WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	           ChangeSet	1.968   -> 1.969  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	include/linux/init.h	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	         init/main.c	1.83    -> 1.84   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# 02/12/02	haveblue@elm3b96.(none)	1.969

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# c-1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#69: 
--- a/include/linux/init.h	Mon Dec  2 15:59:01 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/init.h:104:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#98: FILE: include/linux/init.h:109:
 		 __attribute__((unused,__section__ (".init.setup")))	\
+		= { __setup_str_##fn, fn, level }

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#112: FILE: init/main.c:141:
+	char* str;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#126: FILE: init/main.c:155:
+	static int args = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: init/main.c:158:
+	if (!strncmp(line,"init=",5)) {
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: init/main.c:158:
+	if (!strncmp(line,"init=",5)) {
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: init/main.c:170:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: init/main.c:175:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: init/main.c:176:
+	if (strchr(line,'=')) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#151: FILE: init/main.c:180:
+		envp_init[envs+1] = NULL;
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#157: FILE: init/main.c:186:
+			argv_init[args+1] = NULL;
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#174: FILE: init/main.c:200:
+			arg->handled = p->setup_func(line+n);
 			                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: init/main.c:284:
+ * Make sure not to modify "line" after you call this, because the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: init/main.c:285:
+ * argv array keeps references inside of it.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: init/main.c:290:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#213: FILE: init/main.c:294:
+	if( kernel_argc != -1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#213: FILE: init/main.c:294:
+	if( kernel_argc != -1 )

ERROR:SPACING: space required before the open parenthesis '('
#213: FILE: init/main.c:294:
+	if( kernel_argc != -1 )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: init/main.c:324:
+ * This routine depends on parse_options() being called first.  If you $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: init/main.c:325:
+ * want to use this in setup_arch(), make sure you can parse_options() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: init/main.c:326:
+ * first.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: init/main.c:329:
+ * filled in as arguments/environment to init as appropriate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: init/main.c:335:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#275: FILE: init/main.c:336:
+	for( i=0; i<kernel_argc; i++ ) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#275: FILE: init/main.c:336:
+	for( i=0; i<kernel_argc; i++ ) {
 	           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#275: FILE: init/main.c:336:
+	for( i=0; i<kernel_argc; i++ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#275: FILE: init/main.c:336:
+	for( i=0; i<kernel_argc; i++ ) {

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: init/main.c:336:
+	for( i=0; i<kernel_argc; i++ ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: init/main.c:338:
+		struct kernel_arg *arg = &kernel_argv[i];
+		if (setup_level == SETUP_ENV && !arg->handled)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: init/main.c:341:
+			checksetup(setup_level,arg);
 			                      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#283: FILE: init/main.c:344:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409704.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 16 warnings, 5 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409704.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
