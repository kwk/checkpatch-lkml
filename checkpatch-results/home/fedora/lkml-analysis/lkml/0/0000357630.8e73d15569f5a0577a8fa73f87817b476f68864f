WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
     The flag is cleared should mntput() decrease the vfsmount's mnt_count to

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#88: FILE: fs/block_dev.c:765:
+	if (test_bit(__MNT_NODEV, &nd.mnt->mnt_flags))
 	                           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#100: FILE: fs/exec.c:462:
+		if (!test_bit(__MNT_NOEXEC, &nd.mnt->mnt_flags) &&
 		                             ^^

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: fs/exec.c:844:
+	if(!test_bit(__MNT_NOSUID, &bprm->file->f_vfsmnt->mnt_flags)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#120: FILE: fs/namei.c:272:
+void path_release_on_umount(struct nameidata *nd)
                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#244: FILE: fs/namespace.c:402:
+	path_release_on_umount(&nd);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/namespace.c:579:
+static int do_remount(struct nameidata *nd, int flags, unsigned long mnt_flags,
                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#283: FILE: fs/namespace.c:665:
+int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,
                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#320: FILE: fs/namespace.c:685:
+	err = graft_tree(newmnt, nd);
 	                         ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#336: FILE: fs/namespace.c:699:
+EXPORT_SYMBOL_GPL(do_add_mount);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#338: FILE: fs/namespace.c:701:
+static int do_new_mount(struct nameidata *nd, char *type, int flags,
                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: fs/namespace.c:717:
+	return do_add_mount(mnt, nd, mnt_flags, NULL);
 	                         ^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#415: FILE: fs/namespace.c:778:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: fs/namespace.c:778:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#431: FILE: fs/namespace.c:794:
+EXPORT_SYMBOL_GPL(mark_mounts_for_expiry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#450: FILE: fs/namespace.c:887:
+		retval = do_new_mount(&nd, type_page, flags, mnt_flags,
 		                       ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#510: FILE: fs/super.c:702:
+EXPORT_SYMBOL_GPL(do_kern_mount);

CHECK:BIT_MACRO: Prefer using the BIT macro
#541: FILE: include/linux/mount.h:22:
+#define MNT_NOSUID		(1 << __MNT_NOSUID)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#542: FILE: include/linux/mount.h:23:
+#define MNT_NODEV		(1 << __MNT_NODEV)

CHECK:BIT_MACRO: Prefer using the BIT macro
#543: FILE: include/linux/mount.h:24:
+#define MNT_NOEXEC		(1 << __MNT_NOEXEC)

CHECK:BIT_MACRO: Prefer using the BIT macro
#544: FILE: include/linux/mount.h:25:
+#define MNT_EXPIRY_MARK		(1 << __MNT_EXPIRY_MARK)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#588: FILE: include/linux/mount.h:75:
+extern int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,
                                                                    ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/linux/mount.h:75:
+extern int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/linux/mount.h:78:
+extern void mark_mounts_for_expiry(struct list_head *mounts);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: include/linux/namei.h:45:
+extern void path_release_on_umount(struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#602: FILE: include/linux/namei.h:45:
+extern void path_release_on_umount(struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#613: FILE: include/linux/namespace.h:18:
+extern void __put_namespace(struct namespace *namespace);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000357630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 16 warnings, 9 checks, 491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000357630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
