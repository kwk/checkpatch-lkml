WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
The patch below consolidates some duplicate code, reduces some indentation, and

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: proc/array.c:284:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: proc/array.c:284:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: proc/array.c:621:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: proc/array.c:621:
+ $

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: proc/base.c:137:
+	struct mm_struct * mm = get_task_mm(task);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: proc/base.c:218:
+	struct mm_struct *mm = get_task_mm(task);
+	if (!mm)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: proc/base.c:221:
+ ^Ilen = mm->arg_end - mm->arg_start;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: proc/base.c:221:
+ ^Ilen = mm->arg_end - mm->arg_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: proc/base.c:221:
+ ^Ilen = mm->arg_end - mm->arg_start;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: proc/base.c:222:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: proc/base.c:222:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: proc/base.c:225:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: proc/base.c:225:
+ $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#161: FILE: proc/base.c:229:
+	if ( res > 0 && buffer[res-1] != '\0' )
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#161: FILE: proc/base.c:229:
+	if ( res > 0 && buffer[res-1] != '\0' )
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#161: FILE: proc/base.c:229:
+	if ( res > 0 && buffer[res-1] != '\0' )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#161: FILE: proc/base.c:229:
+	if ( res > 0 && buffer[res-1] != '\0' )

ERROR:SPACING: space prohibited after that open parenthesis '('
#163: FILE: proc/base.c:231:
+		len = strnlen( buffer, res );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#163: FILE: proc/base.c:231:
+		len = strnlen( buffer, res );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#164: FILE: proc/base.c:232:
+		if ( len < res )
 		{

ERROR:SPACING: space prohibited after that open parenthesis '('
#164: FILE: proc/base.c:232:
+		if ( len < res )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#164: FILE: proc/base.c:232:
+		if ( len < res )

CHECK:BRACES: braces {} should be used on all arms of this statement
#164: FILE: proc/base.c:232:
+		if ( len < res )
[...]
-			{
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#182: FILE: proc/base.c:236:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#182: FILE: proc/base.c:236:
 		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: proc/base.c:241:
+			res += access_process_vm(task, mm->env_start, buffer+res, len, 0);
 			                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#188: FILE: proc/base.c:242:
+			res = strnlen( buffer, res );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#188: FILE: proc/base.c:242:
+			res = strnlen( buffer, res );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: proc/base.c:427:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: proc/base.c:427:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: proc/base.c:433:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: proc/base.c:433:
+ $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#235: FILE: proc/base.c:434:
+	if (file->private_data != (void*)((long)current->self_exec_id))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: proc/base.c:438:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: proc/base.c:438:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: proc/base.c:454:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: proc/base.c:454:
+ $

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: linux/sched.h:790:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: linux/sched.h:790:
 
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: linux/sched.h:790:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: linux/sched.h:797:
+static inline struct mm_struct * get_task_mm(struct task_struct * task)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: linux/sched.h:797:
+static inline struct mm_struct * get_task_mm(struct task_struct * task)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: linux/sched.h:799:
+	struct mm_struct * mm;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: linux/sched.h:800:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: linux/sched.h:800:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: linux/sched.h:809:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: linux/sched.h:809:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: linux/sched.h:810:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: linux/sched.h:810:
+ 
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: linux/sched.h:810:
+ $

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 21 warnings, 5 checks, 262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
