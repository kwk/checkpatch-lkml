WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
Add force feedback driver for PID devices. This replaces the older PID driver

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#61: FILE: drivers/usb/input/hid-ff.c:81:
+	/* We try pidff when no other driver is found because PID is the
+	standards compliant way of implementing force feedback in HID.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#63: FILE: drivers/usb/input/hid-ff.c:83:
+	be a PID device */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: drivers/usb/input/hid-input.c:672:
+		dbg("Maximum Effects - %d",value);
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: drivers/usb/input/hid-pidff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#157: FILE: drivers/usb/input/hid-pidff.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#158: FILE: drivers/usb/input/hid-pidff.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#170: FILE: drivers/usb/input/hid-pidff.c:32:
+#define debug(format, arg...) printk(KERN_DEBUG "hid-pidff: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#170: FILE: drivers/usb/input/hid-pidff.c:32:
+#define debug(format, arg...) printk(KERN_DEBUG "hid-pidff: " format "\n" , ## arg)
                                                                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#196: FILE: drivers/usb/input/hid-pidff.c:58:
+/* device_control is really 0x95, but 0x96 specified as it is the usage of
+the only field in that report */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: drivers/usb/input/hid-pidff.c:58:
+the only field in that report */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: drivers/usb/input/hid-pidff.c:60:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#288: FILE: drivers/usb/input/hid-pidff.c:150:
+struct pidff_device {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#305: FILE: drivers/usb/input/hid-pidff.c:167:
+	/* Special field is a field that is not composed of
+	usage<->value pairs that pidff_usage values are */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: drivers/usb/input/hid-pidff.c:167:
+	usage<->value pairs that pidff_usage values are */

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: drivers/usb/input/hid-pidff.c:196:
+	struct pidff_device *pidff = hid->ff_private;
+	debug("exiting");

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#339: FILE: drivers/usb/input/hid-pidff.c:201:
+static int pidff_find_fields(struct pidff_usage *usage, u8 *table, struct hid_report *report, int count, int strict)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#377: FILE: drivers/usb/input/hid-pidff.c:239:
+	return i == 0 ? 0 : i > 0 ? i * field->logical_maximum / 0x7fff : i * field->logical_minimum / -0x8000;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: drivers/usb/input/hid-pidff.c:242:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#389: FILE: drivers/usb/input/hid-pidff.c:251:
+	if (usage->field->logical_minimum < 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#391: FILE: drivers/usb/input/hid-pidff.c:253:
+	else {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#405: FILE: drivers/usb/input/hid-pidff.c:267:
+	pidff->set_envelope[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#408: FILE: drivers/usb/input/hid-pidff.c:270:
+			pidff_rescale(envelope->attack_level > 0x7fff ? 0x7fff : envelope->attack_level,

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#417: FILE: drivers/usb/input/hid-pidff.c:279:
+	debug("attack %u => %d", envelope->attack_level, pidff->set_envelope[PID_ATTACK_LEVEL].value[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/usb/input/hid-pidff.c:287:
+	return (envelope->attack_level != old->attack_level ||
+			envelope->fade_level != old->fade_level ||

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#434: FILE: drivers/usb/input/hid-pidff.c:296:
+	pidff->set_constant[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: drivers/usb/input/hid-pidff.c:296:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_constant[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#449: FILE: drivers/usb/input/hid-pidff.c:311:
+	pidff->set_effect[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: drivers/usb/input/hid-pidff.c:311:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_effect[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#456: FILE: drivers/usb/input/hid-pidff.c:318:
+	pidff->effect_direction->value[0] = pidff_rescale(effect->direction, 0xffff, pidff->effect_direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: drivers/usb/input/hid-pidff.c:327:
+	return (effect->replay.length != old->replay.length ||
+			effect->trigger.interval != old->trigger.interval ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#471: FILE: drivers/usb/input/hid-pidff.c:333:
+
+

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#477: FILE: drivers/usb/input/hid-pidff.c:339:
+	pidff->set_periodic[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#485: FILE: drivers/usb/input/hid-pidff.c:347:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: drivers/usb/input/hid-pidff.c:352:
+	return (effect->u.periodic.magnitude != old->u.periodic.magnitude ||
+			effect->u.periodic.offset != old->u.periodic.offset ||

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#501: FILE: drivers/usb/input/hid-pidff.c:363:
+	pidff->set_condition[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#505: FILE: drivers/usb/input/hid-pidff.c:367:
+		pidff_set_signed(&pidff->set_condition[PID_CP_OFFSET], effect->u.condition[i].center);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#506: FILE: drivers/usb/input/hid-pidff.c:368:
+		pidff_set_signed(&pidff->set_condition[PID_POS_COEFFICIENT], effect->u.condition[i].right_coeff);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#507: FILE: drivers/usb/input/hid-pidff.c:369:
+		pidff_set_signed(&pidff->set_condition[PID_NEG_COEFFICIENT], effect->u.condition[i].left_coeff);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#508: FILE: drivers/usb/input/hid-pidff.c:370:
+		pidff_set(&pidff->set_condition[PID_POS_SATURATION], effect->u.condition[i].right_saturation);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#509: FILE: drivers/usb/input/hid-pidff.c:371:
+		pidff_set(&pidff->set_condition[PID_NEG_SATURATION], effect->u.condition[i].left_saturation);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#515: FILE: drivers/usb/input/hid-pidff.c:377:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: drivers/usb/input/hid-pidff.c:382:
+	int i; int ret = 0;
+	for (i = 0; i < 2; i++)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#524: FILE: drivers/usb/input/hid-pidff.c:386:
+			effect->u.condition[i].right_saturation != old->u.condition[i].right_saturation ||

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#525: FILE: drivers/usb/input/hid-pidff.c:387:
+			effect->u.condition[i].left_saturation != old->u.condition[i].left_saturation ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: drivers/usb/input/hid-pidff.c:392:
+
+

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#535: FILE: drivers/usb/input/hid-pidff.c:397:
+	pidff->set_ramp[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

WARNING:LINE_SPACING: Missing a blank line after declarations
#535: FILE: drivers/usb/input/hid-pidff.c:397:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_ramp[PID_EFFECT_BLOCK_INDEX].value[0] = pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/usb/input/hid-pidff.c:406:
+	return (effect->u.ramp.start_level != old->u.ramp.start_level ||
+			effect->u.ramp.end_level != old->u.ramp.end_level);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#547: FILE: drivers/usb/input/hid-pidff.c:409:
+
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#566: FILE: drivers/usb/input/hid-pidff.c:428:
+		if (pidff->block_load_status->value[0] == pidff->status_id[PID_BLOCK_LOAD_SUCCESS]) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#569: FILE: drivers/usb/input/hid-pidff.c:431:
+					      pidff->block_load[PID_RAM_POOL_AVAILABLE].value[0] : -1);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#575: FILE: drivers/usb/input/hid-pidff.c:437:
+					      pidff->block_load[PID_RAM_POOL_AVAILABLE].value[0] : -1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#579: FILE: drivers/usb/input/hid-pidff.c:441:
+	printk(KERN_ERR "hid-pidff: pid_block_load failed 60 times\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#583: FILE: drivers/usb/input/hid-pidff.c:445:
+
+

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#594: FILE: drivers/usb/input/hid-pidff.c:456:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#594: FILE: drivers/usb/input/hid-pidff.c:456:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: drivers/usb/input/hid-pidff.c:469:
+	struct pidff_device *pidff = hid->ff_private;
+	return pidff_playback_pid(dev, pidff->pid_id[effect_id], value);

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: drivers/usb/input/hid-pidff.c:476:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->block_free[PID_EFFECT_BLOCK_INDEX].value[0] = pid_id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#622: FILE: drivers/usb/input/hid-pidff.c:484:
+	struct pidff_device *pidff = hid->ff_private;
+	debug("starting to erase %d/%d", effect_id, pidff->pid_id[effect_id]);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#628: FILE: drivers/usb/input/hid-pidff.c:490:
+static int pidff_upload_effect(struct input_dev *dev, struct ff_effect *effect, struct ff_effect *old)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#645: FILE: drivers/usb/input/hid-pidff.c:507:
+		if (!old || pidff_needs_set_envelope(&effect->u.constant.envelope, &old->u.constant.envelope))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#655: FILE: drivers/usb/input/hid-pidff.c:517:
+				ret = pidff_request_effect_upload(dev, pidff->type_id[PID_TRIANGLE]);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#664: FILE: drivers/usb/input/hid-pidff.c:526:
+				ret = pidff_request_effect_upload(dev, pidff->type_id[PID_SAW_DOWN]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#667: FILE: drivers/usb/input/hid-pidff.c:529:
+				printk(KERN_ERR "hid-pidff: invalid waveform\n");

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#677: FILE: drivers/usb/input/hid-pidff.c:539:
+		if (!old || pidff_needs_set_envelope(&effect->u.periodic.envelope, &old->u.periodic.envelope))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around effect->u.periodic.envelope
#678: FILE: drivers/usb/input/hid-pidff.c:540:
+			pidff_set_envelope_report(dev, &(effect->u.periodic.envelope));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#690: FILE: drivers/usb/input/hid-pidff.c:552:
+		if (!old || pidff_needs_set_envelope(&effect->u.ramp.envelope, &old->u.ramp.envelope))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around effect->u.ramp.envelope
#691: FILE: drivers/usb/input/hid-pidff.c:553:
+			pidff_set_envelope_report(dev, &(effect->u.ramp.envelope));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#739: FILE: drivers/usb/input/hid-pidff.c:601:
+		printk(KERN_ERR "hid-pidff: invalid type\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: drivers/usb/input/hid-pidff.c:615:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff_set(&pidff->device_gain[PID_DEVICE_GAIN_FIELD], gain);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#757: FILE: drivers/usb/input/hid-pidff.c:619:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#764: FILE: drivers/usb/input/hid-pidff.c:626:
+
+

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#766: FILE: drivers/usb/input/hid-pidff.c:628:
+		pidff_playback_pid(dev, pidff->block_load[PID_EFFECT_BLOCK_INDEX].field->logical_minimum, 0);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#770: FILE: drivers/usb/input/hid-pidff.c:632:
+	pidff_playback_pid(dev, pidff->block_load[PID_EFFECT_BLOCK_INDEX].field->logical_minimum, 1);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#783: FILE: drivers/usb/input/hid-pidff.c:645:
+
+}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#790: FILE: drivers/usb/input/hid-pidff.c:652:
+		if (usage == (HID_UP_PID | pidff_reports[i]) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#790: FILE: drivers/usb/input/hid-pidff.c:652:
+		if (usage == (HID_UP_PID | pidff_reports[i]) ) {
+			return i;
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#816: FILE: drivers/usb/input/hid-pidff.c:678:
+		/* Sometimes logical collections are stacked to
+		indicate different usages for the report and the field,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#817: FILE: drivers/usb/input/hid-pidff.c:679:
+		in which case we want the usage of the parent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#820: FILE: drivers/usb/input/hid-pidff.c:682:
+		/* However, Linux HID implementation hides that,
+		so we have to dig it up ourselves */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#820: FILE: drivers/usb/input/hid-pidff.c:682:
+		so we have to dig it up ourselves */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#822: FILE: drivers/usb/input/hid-pidff.c:684:
+		if (i <= 0 || hid->collection[i-1].type != HID_COLLECTION_LOGICAL)
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#824: FILE: drivers/usb/input/hid-pidff.c:686:
+		ret = pidff_check_usage(hid->collection[i-1].usage);
 		                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#847: FILE: drivers/usb/input/hid-pidff.c:709:
+
+

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#848: FILE: drivers/usb/input/hid-pidff.c:710:
+static struct hid_field *pidff_find_special_field(struct hid_report *report, int usage, int enforce_min)

WARNING:LINE_SPACING: Missing a blank line after declarations
#851: FILE: drivers/usb/input/hid-pidff.c:713:
+	int i;
+	for (i = 0; i < report->maxfield; i++) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#852: FILE: drivers/usb/input/hid-pidff.c:714:
+		if (report->field[i]->logical == (HID_UP_PID | usage) && report->field[i]->report_count > 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#853: FILE: drivers/usb/input/hid-pidff.c:715:
+			if (!enforce_min || report->field[i]->logical_minimum == 1)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#855: FILE: drivers/usb/input/hid-pidff.c:717:
+				return report->field[i];
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#855: FILE: drivers/usb/input/hid-pidff.c:717:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#856: FILE: drivers/usb/input/hid-pidff.c:718:
+				printk(KERN_ERR "hid-pidff: logical_minimum not 1 when it should be\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#866: FILE: drivers/usb/input/hid-pidff.c:728:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: drivers/usb/input/hid-pidff.c:731:
+	int found = 0;
+	for (i = 0; i < count; i++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#872: FILE: drivers/usb/input/hid-pidff.c:734:
+				keys[i] = j+1;
 				           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'keys' may be better as '(keys)' to avoid precedence issues
#881: FILE: drivers/usb/input/hid-pidff.c:743:
+#define PIDFF_FIND_SPECIAL_KEYS(keys, field, name) \
+	pidff_find_special_keys(pidff->keys, pidff->field, pidff_ ## name, \
+		sizeof(pidff_ ## name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#881: FILE: drivers/usb/input/hid-pidff.c:743:
+#define PIDFF_FIND_SPECIAL_KEYS(keys, field, name) \
+	pidff_find_special_keys(pidff->keys, pidff->field, pidff_ ## name, \
+		sizeof(pidff_ ## name))

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#888: FILE: drivers/usb/input/hid-pidff.c:750:
+	pidff->create_new_effect_type = pidff_find_special_field(pidff->reports[PID_CREATE_NEW_EFFECT], 0x25, 1);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#891: FILE: drivers/usb/input/hid-pidff.c:753:
+	pidff->device_control = pidff_find_special_field(pidff->reports[PID_DEVICE_CONTROL], 0x96, 1);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#892: FILE: drivers/usb/input/hid-pidff.c:754:
+	pidff->block_load_status = pidff_find_special_field(pidff->reports[PID_BLOCK_LOAD], 0x8b, 1);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#893: FILE: drivers/usb/input/hid-pidff.c:755:
+	pidff->effect_operation_status = pidff_find_special_field(pidff->reports[PID_EFFECT_OPERATION], 0x78, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#897: FILE: drivers/usb/input/hid-pidff.c:759:
+		printk(KERN_ERR "hid-pidff: effect lists not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#901: FILE: drivers/usb/input/hid-pidff.c:763:
+		printk(KERN_ERR "hid-pidff: direction field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#905: FILE: drivers/usb/input/hid-pidff.c:767:
+		printk(KERN_ERR "hid-pidff: device control field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#909: FILE: drivers/usb/input/hid-pidff.c:771:
+		printk(KERN_ERR "hid-pidff: block load status field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#913: FILE: drivers/usb/input/hid-pidff.c:775:
+		printk(KERN_ERR "hid-pidff: effect operation field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#923: FILE: drivers/usb/input/hid-pidff.c:785:
+		printk(KERN_ERR "hid-pidff: no effect types found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#929: FILE: drivers/usb/input/hid-pidff.c:791:
+		printk(KERN_ERR "hidpidff: block load status identifiers not found\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#933: FILE: drivers/usb/input/hid-pidff.c:795:
+	if (PIDFF_FIND_SPECIAL_KEYS(operation_id, effect_operation_status, effect_operation_status) !=

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#935: FILE: drivers/usb/input/hid-pidff.c:797:
+		printk(KERN_ERR "hidpidff: effect operation identifiers not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#952: FILE: drivers/usb/input/hid-pidff.c:814:
+			printk(KERN_ERR "hid-pidff: effect type number %d is invalid\n", i);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#992: FILE: drivers/usb/input/hid-pidff.c:854:
+
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#994: FILE: drivers/usb/input/hid-pidff.c:856:
+#define PIDFF_FIND_FIELDS(name, report, strict) \
+	pidff_find_fields(pidff->name, pidff_ ## name, \
+		pidff->reports[report], \
+		sizeof(pidff_ ## name), strict)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1007: FILE: drivers/usb/input/hid-pidff.c:869:
+		printk(KERN_ERR "hid-pidff: unknown set_effect report layout\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1013: FILE: drivers/usb/input/hid-pidff.c:875:
+		printk(KERN_ERR "hid-pidff: unknown pid_block_load report layout\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1018: FILE: drivers/usb/input/hid-pidff.c:880:
+		printk(KERN_ERR "hid-pidff: unknown effect_operation report layout\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1023: FILE: drivers/usb/input/hid-pidff.c:885:
+		printk(KERN_ERR "hid-pidff: unknown pid_block_free report layout\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1029: FILE: drivers/usb/input/hid-pidff.c:891:
+	if (pidff_find_special_fields(pidff) || pidff_find_effects(dev)) {
+		return -ENODEV;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1035: FILE: drivers/usb/input/hid-pidff.c:897:
+			printk(KERN_WARNING "hid-pidff: has constant effect but no envelope\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1037: FILE: drivers/usb/input/hid-pidff.c:899:
+			printk(KERN_WARNING "hid-pidff: has ramp effect but no envelope\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1039: FILE: drivers/usb/input/hid-pidff.c:901:
+			printk(KERN_WARNING "hid-pidff: has periodic effect but no envelope\n");

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1042: FILE: drivers/usb/input/hid-pidff.c:904:
+	if (test_bit(FF_CONSTANT, ff->flags) && PIDFF_FIND_FIELDS(set_constant, PID_SET_CONSTANT, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1043: FILE: drivers/usb/input/hid-pidff.c:905:
+		printk(KERN_WARNING "hid-pidff: unknown constant effect layout\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1048: FILE: drivers/usb/input/hid-pidff.c:910:
+		printk(KERN_WARNING "hid-pidff: unknown ramp effect layout\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: drivers/usb/input/hid-pidff.c:915:
+	if ((test_bit(FF_SPRING, ff->flags) || test_bit(FF_DAMPER, ff->flags) ||
+		    test_bit(FF_FRICTION, ff->flags) || test_bit(FF_INERTIA, ff->flags)) &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1055: FILE: drivers/usb/input/hid-pidff.c:917:
+		printk(KERN_WARNING "hid-pidff: unknown condition effect layout\n");

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1062: FILE: drivers/usb/input/hid-pidff.c:924:
+	if (test_bit(FF_PERIODIC, ff->flags) && PIDFF_FIND_FIELDS(set_periodic, PID_SET_PERIODIC, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1063: FILE: drivers/usb/input/hid-pidff.c:925:
+		printk(KERN_WARNING "hid-pidff: unknown periodic effect layout\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1069: FILE: drivers/usb/input/hid-pidff.c:931:
+	if (!PIDFF_FIND_FIELDS(device_gain, PID_DEVICE_GAIN, 1)) {
+		set_bit(FF_GAIN, ff->flags);
+	}

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1080: FILE: drivers/usb/input/hid-pidff.c:942:
+	int i = 0;;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1100: FILE: drivers/usb/input/hid-pidff.c:962:
+				printk(KERN_WARNING "hid-pidff: device reports %d simultaneous effects\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1120: FILE: drivers/usb/input/hid-pidff.c:982:
+	/* Specification doesn't specify anything, so we request an
+	effect upload and cancel it immediately. If the approved

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1122: FILE: drivers/usb/input/hid-pidff.c:984:
+	effect id is a built-in spring type effect used for autocenter */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1126: FILE: drivers/usb/input/hid-pidff.c:988:
+		printk(KERN_ERR "hid-pidff: upload request failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1134: FILE: drivers/usb/input/hid-pidff.c:996:
+		printk(KERN_NOTICE "hid-pidff: device has unknown autocenter control method\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1142: FILE: drivers/usb/input/hid-pidff.c:1004:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1152: FILE: drivers/usb/input/hid-pidff.c:1014:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1161: FILE: drivers/usb/input/hid-pidff.c:1023:
+	struct ff_device *ff;
+	debug("starting pid init");

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1167: FILE: drivers/usb/input/hid-pidff.c:1029:
+	report = list_entry(hid->report_enum[HID_OUTPUT_REPORT].report_list.next, struct hid_report, list);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1177: FILE: drivers/usb/input/hid-pidff.c:1039:
+     ^Iret = input_ff_allocate(dev);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1177: FILE: drivers/usb/input/hid-pidff.c:1039:
+     ^Iret = input_ff_allocate(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: drivers/usb/input/hid-pidff.c:1039:
+     ^Iret = input_ff_allocate(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: drivers/usb/input/hid-pidff.c:1040:
+        if (ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: drivers/usb/input/hid-pidff.c:1040:
+        if (ret) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1197: FILE: drivers/usb/input/hid-pidff.c:1059:
+	printk(KERN_INFO "Force feedback for USB HID PID devices by Anssi Hannula <anssi.hannula@gmail.com>\n");

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1229: FILE: drivers/usb/input/hid-pidff.c:1091:
+	if (pidff->pool[PID_DEVICE_MANAGED_POOL].value && pidff->pool[PID_DEVICE_MANAGED_POOL].value[0] == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1229: FILE: drivers/usb/input/hid-pidff.c:1091:
+	if (pidff->pool[PID_DEVICE_MANAGED_POOL].value && pidff->pool[PID_DEVICE_MANAGED_POOL].value[0] == 0) {
+		printk(KERN_NOTICE "hid-pidff: device advertises to not support device managed pool\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1230: FILE: drivers/usb/input/hid-pidff.c:1092:
+		printk(KERN_NOTICE "hid-pidff: device advertises to not support device managed pool\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 105 warnings, 35 checks, 1203 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
