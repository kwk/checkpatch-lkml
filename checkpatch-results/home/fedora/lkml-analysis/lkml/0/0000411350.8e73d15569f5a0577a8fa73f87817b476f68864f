WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#84: 
ChangeSet@1.853.2.3, 2002-11-22 15:48:49-08:00, rth@dorothy.sfbay.redhat.com

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: arch/alpha/kernel/module.c:1:
+/* Kernel module help for Alpha.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#161: FILE: arch/alpha/kernel/module.c:2:
+/* Kernel module help for Alpha.
+   Copyright (C) 2002  Richard Henderson.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#174: FILE: arch/alpha/kernel/module.c:15:
+   with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#175: FILE: arch/alpha/kernel/module.c:16:
+   59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#175: FILE: arch/alpha/kernel/module.c:16:
+   59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#184: FILE: arch/alpha/kernel/module.c:25:
+#if 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#187: FILE: arch/alpha/kernel/module.c:28:
+#define DEBUGP(fmt , ...)
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#205: FILE: arch/alpha/kernel/module.c:46:
+module_core_size(const ElfW(Ehdr) *hdr, struct module *module,
                                   ^

CHECK:CAMELCASE: Avoid CamelCase: <ElfW>
#205: FILE: arch/alpha/kernel/module.c:46:
+module_core_size(const ElfW(Ehdr) *hdr, struct module *module,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Ehdr>
#205: FILE: arch/alpha/kernel/module.c:46:
+module_core_size(const ElfW(Ehdr) *hdr, struct module *module,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#212: FILE: arch/alpha/kernel/module.c:53:
+apply_relocate(const ElfW(Rel) *rel, unsigned long nrelocs,
                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Rel>
#212: FILE: arch/alpha/kernel/module.c:53:
+apply_relocate(const ElfW(Rel) *rel, unsigned long nrelocs,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#219: FILE: arch/alpha/kernel/module.c:60:
+apply_relocate_add(const ElfW(Rela) *rela, unsigned long nrelocs,
                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Rela>
#219: FILE: arch/alpha/kernel/module.c:60:
+apply_relocate_add(const ElfW(Rela) *rela, unsigned long nrelocs,

WARNING:TYPO_SPELLING: 'borken' may be misspelled - perhaps 'broken'?
#231: FILE: arch/alpha/kernel/module.c:72:
+			/* Binutils before 2.12 or so are borken.  We should
 			                                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/alpha/kernel/module.c:73:
+^I^I^I   have the RELATIVE offset as the addend of the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#232: FILE: arch/alpha/kernel/module.c:73:
+			/* Binutils before 2.12 or so are borken.  We should
+			   have the RELATIVE offset as the addend of the 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#234: FILE: arch/alpha/kernel/module.c:75:
+			   value at the relocation address.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: arch/alpha/kernel/module.c:77:
+			u64 addend = rela[i].r_addend;
+			if (addend == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#246: FILE: arch/alpha/kernel/module.c:87:
+			value = (u64) resolve_symbol(me, symnum);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 34)
#247: FILE: arch/alpha/kernel/module.c:88:
+			if (!value)
+				  return -ENOENT;

WARNING:TABSTOP: Statements should start on a tabstop
#248: FILE: arch/alpha/kernel/module.c:89:
+				  return -ENOENT;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#259: FILE: arch/alpha/kernel/module.c:100:
+			printk(KERN_ERR "module %s: Unknown relocation: %lu\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#269: FILE: arch/alpha/kernel/module.c:110:
+module_finalize(const ElfW(Ehdr) *hdr, struct module *me)
                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: arch/alpha/kernel/traps.c:641:
+	if ((fixup = search_exception_table(pc)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: arch/alpha/mm/extable.c:23:
+                if (mid_value == value)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/alpha/mm/extable.c:23:
+                if (mid_value == value)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: arch/alpha/mm/extable.c:25:
+                else if (mid_value < value)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: arch/alpha/mm/extable.c:25:
+                else if (mid_value < value)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#488: FILE: arch/alpha/mm/extable.c:38:
+	unsigned ret = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#529: FILE: arch/alpha/mm/fault.c:179:
+	if ((fixup = search_exception_table(regs->pc)) != 0) {

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#564: FILE: arch/i386/kernel/module.c:43:
+long module_core_size(const ElfW(Ehdr) *hdr, struct module *module,
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#575: FILE: arch/i386/kernel/module.c:49:
+int apply_relocate(const ElfW(Rel) *rel, unsigned long nrelocs,
                                    ^

CHECK:SPACING: No space is necessary after a cast
#604: FILE: arch/i386/kernel/module.c:61:
+			*location += (u32) me->loadaddr;

CHECK:SPACING: No space is necessary after a cast
#611: FILE: arch/i386/kernel/module.c:68:
+			value = (u32) resolve_symbol(me, symnum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#631: FILE: arch/i386/kernel/module.c:81:
+			printk(KERN_ERR "module %s: Unknown relocation: %lu\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#644: FILE: arch/i386/kernel/module.c:90:
+int apply_relocate_add(const ElfW(Rela) *rela, unsigned long nrelocs,
                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#649: FILE: arch/i386/kernel/module.c:93:
+	printk(KERN_ERR "module %s: ADD RELOCATION unsupported\n", me->name);

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#656: FILE: arch/i386/kernel/module.c:97:
+int module_finalize(const ElfW(Ehdr) *hdr, struct module *me)
                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#668: FILE: include/asm-alpha/elf.h:5:
+/* Once upon a time, the type of the hash table entry for Elf64 was unclear.
+   BFD got it wrong, and Alpha is stuck with the result.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#668: FILE: include/asm-alpha/elf.h:5:
+   BFD got it wrong, and Alpha is stuck with the result.  */

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Symndx>
#670: FILE: include/asm-alpha/elf.h:7:
+typedef __u64 Elf_Symndx;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#684: FILE: include/asm-alpha/module.h:5:
+struct mod_arch_specific
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#833: FILE: include/asm-alpha/uaccess.h:505:
+extern unsigned search_exception_table(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: include/asm-alpha/uaccess.h:505:
+extern unsigned search_exception_table(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#833: FILE: include/asm-alpha/uaccess.h:505:
+extern unsigned search_exception_table(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_ ## X>
#944: FILE: include/linux/elf.h:688:
+#define ElfW(X)		Elf32_ ## X

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_ ## X>
#953: FILE: include/linux/elf.h:694:
+#define ElfW(X)		Elf64_ ## X

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#961: FILE: include/linux/elf.h:701:
+extern ElfW(Dyn) _DYNAMIC [];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:CAMELCASE: Avoid CamelCase: <Dyn>
#961: FILE: include/linux/elf.h:701:
+extern ElfW(Dyn) _DYNAMIC [];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#984: FILE: include/linux/init.h:151:
+   function. */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#initfn) over __attribute__((alias(#initfn)))
#992: FILE: include/linux/init.h:157:
+	int _init(void) __attribute__((alias(#initfn)));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#992: FILE: include/linux/init.h:157:
+	int _init(void) __attribute__((alias(#initfn)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#exitfn) over __attribute__((alias(#exitfn)))
#1002: FILE: include/linux/init.h:165:
+	void _fini(void) __attribute__((alias(#exitfn)));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1002: FILE: include/linux/init.h:165:
+	void _fini(void) __attribute__((alias(#exitfn)));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1042: FILE: include/linux/module.h:82:
+#define EXPORT_SYMBOL(sym)			\
+	asm (".section .exports\n\t"		\
+	     ".asciz \"" #sym "\"\n\t"		\
+	     ".protected " #sym "\n\t"		\
+	     ".previous")

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1050: FILE: include/linux/module.h:90:
+/* FIXME: trick the linker into creating a dynamic symbol table for
+   the kernel as well.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1050: FILE: include/linux/module.h:90:
+   the kernel as well.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1099: FILE: include/linux/module.h:126:
+	/* The "base address" of the module.  Usually, but not always,
+	   the same as the above core address.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1099: FILE: include/linux/module.h:126:
+	   the same as the above core address.  */

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1103: FILE: include/linux/module.h:130:
+	const ElfW(Dyn) *dynamic;
 	                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1106: FILE: include/linux/module.h:133:
+	/* Cached components of the dynamic symbol table,
+	   aka exported symbols.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1106: FILE: include/linux/module.h:133:
+	   aka exported symbols.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1108: FILE: include/linux/module.h:135:
+	const Elf_Symndx *dt_hash;
+	const ElfW(Sym) *dt_symtab;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1108: FILE: include/linux/module.h:135:
+	const ElfW(Sym) *dt_symtab;
 	                ^

CHECK:CAMELCASE: Avoid CamelCase: <Sym>
#1108: FILE: include/linux/module.h:135:
+	const ElfW(Sym) *dt_symtab;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1137: FILE: include/linux/module.h:156:
+	/* The command line arguments (may be mangled).
+	   People like keeping pointers to this stuff */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1137: FILE: include/linux/module.h:156:
+	   People like keeping pointers to this stuff */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#1149: FILE: include/linux/module.h:295:
+#define mod_bound(p, n, m) \
+  __mod_between((p),(n),(m)->core,(m)->core_size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: include/linux/module.h:296:
+  __mod_between((p),(n),(m)->core,(m)->core_size)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1150: FILE: include/linux/module.h:296:
+  __mod_between((p),(n),(m)->core,(m)->core_size)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1150: FILE: include/linux/module.h:296:
+  __mod_between((p),(n),(m)->core,(m)->core_size)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1150: FILE: include/linux/module.h:296:
+  __mod_between((p),(n),(m)->core,(m)->core_size)
                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1202: FILE: include/linux/moduleloader.h:15:
+long module_core_size(const ElfW(Ehdr) *hdr,
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1221: FILE: include/linux/moduleloader.h:29:
+int apply_relocate(const ElfW(Rel) *relocs,
                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1231: FILE: include/linux/moduleloader.h:35:
+int apply_relocate_add(const ElfW(Rela) *relocs,
                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1238: FILE: include/linux/moduleloader.h:40:
+int module_finalize(const ElfW(Ehdr) *hdr,
                                      ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1283: FILE: kernel/module.c:34:
+#if 1

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1293: FILE: kernel/module.c:44:
+extern const struct kernel_symbol __start___ksymtab[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1294: FILE: kernel/module.c:45:
+extern const struct kernel_symbol __stop___ksymtab[];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: kernel/module.c:64:
+  u32 hash = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: kernel/module.c:66:
+  while (*name)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1349: FILE: kernel/module.c:66:
+  while (*name)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1349: FILE: kernel/module.c:66:
+  while (*name)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1350: FILE: kernel/module.c:67:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1351: FILE: kernel/module.c:68:
+      u32 hi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: kernel/module.c:70:
+      hash = (hash << 4) + (u8)*name++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: kernel/module.c:71:
+      hi = hash & 0xf0000000;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1357: FILE: kernel/module.c:74:
+      /* The algorithm specified in the ELF ABI is as follows:
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1362: FILE: kernel/module.c:79:
+	 But the following is equivalent and faster.  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: kernel/module.c:80:
+      hash ^= hi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: kernel/module.c:81:
+      hash ^= hi >> 24;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: kernel/module.c:82:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: kernel/module.c:84:
+  return hash;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1372: FILE: kernel/module.c:87:
+/* Find a symbol, return it and the module.  Must be holding the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1373: FILE: kernel/module.c:88:
+/* Find a symbol, return it and the module.  Must be holding the 
+   module list lock.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1373: FILE: kernel/module.c:88:
+   module list lock.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1392: FILE: kernel/module.c:107:
+	hash = elf_hash (name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1398: FILE: kernel/module.c:111:
+		Elf_Symndx nbuckets, nchain, symidx;
+		const ElfW(Sym) *symtab, *sym;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1398: FILE: kernel/module.c:111:
+		const ElfW(Sym) *symtab, *sym;
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1523: FILE: kernel/module.c:542:
+		Elf_Symndx nbuckets, nchain, symidx, i;
+		const ElfW(Sym) *symtab, *sym;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1523: FILE: kernel/module.c:542:
+		const ElfW(Sym) *symtab, *sym;
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1685: FILE: kernel/module.c:640:
+	const ElfW(Sym) *sym = mod->dt_symtab + symnum;
 	                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1769: FILE: kernel/module.c:664:
+		printk(KERN_WARNING "%s: Unknown symbol %s\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1794: FILE: kernel/module.c:677:
+	ElfW(Ehdr) *ehdr;
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1795: FILE: kernel/module.c:678:
+	const ElfW(Phdr) *phdrs;
 	                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Phdr>
#1795: FILE: kernel/module.c:678:
+	const ElfW(Phdr) *phdrs;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1796: FILE: kernel/module.c:679:
+	const ElfW(Shdr) *shdrs;
 	                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Shdr>
#1796: FILE: kernel/module.c:679:
+	const ElfW(Shdr) *shdrs;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1799: FILE: kernel/module.c:682:
+	long err, core_size;
+	ElfW(Addr) min_addr, max_addr, dynamic_offset;

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#1799: FILE: kernel/module.c:682:
+	ElfW(Addr) min_addr, max_addr, dynamic_offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1802: FILE: kernel/module.c:685:
+	void *core, *loadaddr;
+	const ElfW(Dyn) *dynamic;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1802: FILE: kernel/module.c:685:
+	const ElfW(Dyn) *dynamic;
 	                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1806: FILE: kernel/module.c:689:
+	DEBUGP("load_module: umod=%p, len=%lu\n", umod, umodlen);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1811: FILE: kernel/module.c:694:
+	if (umodlen > 64 * 1024 * 1024 || (ehdr = vmalloc(umodlen)) == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1834: FILE: kernel/module.c:703:
+	/* Sanity checks against insmoding binaries or wrong arch,
+	   or weird elf version.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1834: FILE: kernel/module.c:703:
+	   or weird elf version.  */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1837: FILE: kernel/module.c:706:
+	if (memcmp(ehdr->e_ident, ELFMAG, 4) != 0
+	    || ehdr->e_type != ET_DYN

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1838: FILE: kernel/module.c:707:
+	    || ehdr->e_type != ET_DYN
+	    || !elf_check_arch(ehdr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1839: FILE: kernel/module.c:708:
+	    || !elf_check_arch(ehdr)
+	    || ehdr->e_phentsize != sizeof(*phdrs)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1840: FILE: kernel/module.c:709:
+		DEBUGP("load_module: invalid magic.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1847: FILE: kernel/module.c:716:
+	/* Scan the program headers for the loadable segments, as well
+	   as locate the dynamic linking information.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1847: FILE: kernel/module.c:716:
+	   as locate the dynamic linking information.  */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1852: FILE: kernel/module.c:721:
+		if (phdrs[i].p_type == PT_LOAD) {
[...]
+		} else if (phdrs[i].p_type == PT_DYNAMIC)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1864: FILE: kernel/module.c:733:
+			DEBUGP("load_module: no loadable segments.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1866: FILE: kernel/module.c:735:
+			DEBUGP("load_module: no dynamic segment.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1871: FILE: kernel/module.c:740:
+	/* Allow the architecture to allocate extra space.  E.g. non-pic jump
+	   tables might go here.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1871: FILE: kernel/module.c:740:
+	   tables might go here.  */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1872: FILE: kernel/module.c:741:
+	err = core_size = module_core_size(ehdr, mod, min_addr, max_addr);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1874: FILE: kernel/module.c:743:
+		DEBUGP("load_module: module_core_size failed\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1879: FILE: kernel/module.c:748:
+	core = module_alloc (core_size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1884: FILE: kernel/module.c:753:
+	DEBUGP("load_module: %s loadaddr %p\n", mod->name, loadaddr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1890: FILE: kernel/module.c:759:
+			void *segstart = loadaddr + phdrs[i].p_vaddr;
+			memcpy(segstart, (void *)ehdr + phdrs[i].p_offset,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1901: FILE: kernel/module.c:770:
+	mod->dynamic = dynamic = loadaddr + dynamic_offset;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1905: FILE: kernel/module.c:774:
+	dt_rela = dt_rel = dt_jmprel = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1906: FILE: kernel/module.c:775:
+	dt_relasz = dt_relsz = dt_pltrelsz = dt_pltrel = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1909: FILE: kernel/module.c:778:
+		void *addr = loadaddr + dynamic[i].d_un.d_ptr;
+		switch (dynamic[i].d_tag) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1910: FILE: kernel/module.c:779:
+		case DT_HASH:	mod->dt_hash = addr;			break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1911: FILE: kernel/module.c:780:
+		case DT_STRTAB: mod->dt_strtab = addr;			break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1912: FILE: kernel/module.c:781:
+		case DT_STRSZ:	/* Store it?  */			break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1913: FILE: kernel/module.c:782:
+		case DT_SYMTAB: mod->dt_symtab = addr;			break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1916: FILE: kernel/module.c:785:
+				DEBUGP("load_module: DT_SYMENT mismatch.\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1925: FILE: kernel/module.c:790:
+		case DT_RELA:	dt_rela = addr;				break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1926: FILE: kernel/module.c:791:
+		case DT_RELASZ:	dt_relasz = dynamic[i].d_un.d_val;	break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1929: FILE: kernel/module.c:794:
+				DEBUGP("load_module: DT_RELAENT mismatch.\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1935: FILE: kernel/module.c:799:
+		case DT_REL:	dt_rel = addr;				break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1936: FILE: kernel/module.c:800:
+		case DT_RELSZ:	dt_relsz = dynamic[i].d_un.d_val;	break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#1939: FILE: kernel/module.c:803:
+				DEBUGP("load_module: DT_RELENT mismatch.\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1972: FILE: kernel/module.c:808:
+		case DT_PLTREL:	dt_pltrel = dynamic[i].d_un.d_val;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1973: FILE: kernel/module.c:809:
+		case DT_JMPREL:	dt_jmprel = addr;			break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1974: FILE: kernel/module.c:810:
+		case DT_PLTRELSZ: dt_pltrelsz = dynamic[i].d_un.d_val;	break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1999: FILE: kernel/module.c:815:
+	/* On some machines, DT_JMPREL is included within the DT_REL* range.
+	   Since we're not doing lazy binding, notice this and zap the pltrel

WARNING:TYPO_SPELLING: 'cheking' may be misspelled - perhaps 'checking'?
#2000: FILE: kernel/module.c:816:
+	   sub-range.  Only bother cheking for perfect overlap.  */
 	                           ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2000: FILE: kernel/module.c:816:
+	   sub-range.  Only bother cheking for perfect overlap.  */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2010: FILE: kernel/module.c:821:
+		if (dt_jmprel >= rel && dt_jmprel+dt_pltrelsz <= rel+sz)
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2010: FILE: kernel/module.c:821:
+		if (dt_jmprel >= rel && dt_jmprel+dt_pltrelsz <= rel+sz)
 		                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2048: FILE: kernel/module.c:827:
+		err = apply_relocate(dt_rel, dt_relsz/sizeof(ElfW(Rel)), mod);
 		                                     ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#2050: FILE: kernel/module.c:829:
+			DEBUGP("load_module: apply_relocate failed.\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2109: FILE: kernel/module.c:835:
+					 dt_relasz/sizeof(ElfW(Rela)), mod);
 					          ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#2111: FILE: kernel/module.c:837:
+			DEBUGP("load_module: apply_relocate_add failed.\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2132: FILE: kernel/module.c:843:
+				     dt_pltrelsz/sizeof(ElfW(Rel)), mod);
 				                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#2134: FILE: kernel/module.c:845:
+			DEBUGP("load_module: apply_relocate failed.\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2139: FILE: kernel/module.c:850:
+					 dt_pltrelsz/sizeof(ElfW(Rela)), mod);
 					            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#2141: FILE: kernel/module.c:852:
+			DEBUGP("load_module: apply_relocate_add failed.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2166: FILE: kernel/module.c:863:
+		if (strcmp (secname, "__ex_table") == 0) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2169: FILE: kernel/module.c:866:
+			mod->extable.num_entries
+			  = shdrs[i].sh_size / sizeof(struct exception_table_entry);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'load_module', this function's name, in a string
#2180: FILE: kernel/module.c:873:
+		DEBUGP("load_module: module_finalize failed.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2223: FILE: kernel/module.c:892:
+/* Allocate the module structure.  Done with module_alloc so that the
+   __this_module symbol that maps the current module is "near" the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2224: FILE: kernel/module.c:893:
+   module code.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2226: FILE: kernel/module.c:895:
+/* ??? The suggestion was made to allocate the module struct contiguous
+   with the code.  This does not appear to be necessary for either sparc64

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2228: FILE: kernel/module.c:897:
+   complicate the code.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2239: FILE: kernel/module.c:900:
+alloc_module_struct (const char *uargs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2323: FILE: kernel/module.c:912:
+	memset(mod, 0, sizeof (*mod));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2377: FILE: kernel/module.c:939:
+	mod = alloc_module_struct (uargs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2383: FILE: kernel/module.c:945:
+	ret = strncpy_from_user(mod->name, umodname, sizeof(mod->name)-1);
 	                                                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2429: FILE: kernel/module.c:976:
+	   have them used.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2439: FILE: kernel/module.c:984:
+			int (*init)(void);
+			init = mod->loadaddr + mod->dynamic[i].d_un.d_ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2648: FILE: scripts/Makefile.lib:124:
+^I         $(basename_flags) $(export_flags) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411350.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 96 warnings, 54 checks, 2383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411350.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
