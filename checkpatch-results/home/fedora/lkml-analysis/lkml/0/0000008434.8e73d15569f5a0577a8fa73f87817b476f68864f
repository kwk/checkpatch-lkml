WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: rtc/rtc-sysfs.c:69:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: rtc/rtc-sysfs.c:72:
+       ssize_t retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: rtc/rtc-sysfs.c:73:
+       struct rtc_wkalrm alrm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: rtc/rtc-sysfs.c:75:
+       retval = rtc_read_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: rtc/rtc-sysfs.c:76:
+       if (retval == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#89: FILE: rtc/rtc-sysfs.c:76:
+       if (retval == 0) {
+               unsigned long time;

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: rtc/rtc-sysfs.c:77:
+               unsigned long time;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: rtc/rtc-sysfs.c:77:
+               unsigned long time;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: rtc/rtc-sysfs.c:78:
+               rtc_tm_to_time(&alrm.time, &time);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: rtc/rtc-sysfs.c:78:
+               unsigned long time;
+               rtc_tm_to_time(&alrm.time, &time);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: rtc/rtc-sysfs.c:78:
+               rtc_tm_to_time(&alrm.time, &time);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: rtc/rtc-sysfs.c:79:
+               retval = sprintf(buf, "%lu\n", time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: rtc/rtc-sysfs.c:79:
+               retval = sprintf(buf, "%lu\n", time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: rtc/rtc-sysfs.c:80:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: rtc/rtc-sysfs.c:82:
+       return retval;$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#98: FILE: rtc/rtc-sysfs.c:85:
+static ssize_t rtc_sysfs_store_alarm_since_epoch(struct class_device *dev, const char *buf, size_t count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: rtc/rtc-sysfs.c:87:
+       ssize_t retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: rtc/rtc-sysfs.c:88:
+       struct rtc_wkalrm alrm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: rtc/rtc-sysfs.c:90:
+       unsigned long time = simple_strtoul(buf, NULL, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#103: FILE: rtc/rtc-sysfs.c:90:
+       unsigned long time = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: rtc/rtc-sysfs.c:92:
+       retval = rtc_read_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: rtc/rtc-sysfs.c:93:
+       if (retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#106: FILE: rtc/rtc-sysfs.c:93:
+       if (retval)
+               return retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: rtc/rtc-sysfs.c:94:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: rtc/rtc-sysfs.c:94:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: rtc/rtc-sysfs.c:95:
+       rtc_time_to_tm(time, &alrm.time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: rtc/rtc-sysfs.c:96:
+       retval = rtc_set_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: rtc/rtc-sysfs.c:97:
+       if (retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#110: FILE: rtc/rtc-sysfs.c:97:
+       if (retval)
+               return retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: rtc/rtc-sysfs.c:98:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: rtc/rtc-sysfs.c:98:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: rtc/rtc-sysfs.c:100:
+       return count;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: rtc/rtc-sysfs.c:102:
+}
+/* Use sysfs attribute name consistent with clock's */

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#116: FILE: rtc/rtc-sysfs.c:103:
+struct class_device_attribute class_device_attr_alarm_since_epoch = \

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#117: FILE: rtc/rtc-sysfs.c:104:
+       __ATTR(since_epoch, 0644 ,rtc_sysfs_show_alarm_since_epoch, rtc_sysfs_store_alarm_since_epoch);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: rtc/rtc-sysfs.c:104:
+       __ATTR(since_epoch, 0644 ,rtc_sysfs_show_alarm_since_epoch, rtc_sysfs_store_alarm_since_epoch);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#117: FILE: rtc/rtc-sysfs.c:104:
+       __ATTR(since_epoch, 0644 ,rtc_sysfs_show_alarm_since_epoch, rtc_sysfs_store_alarm_since_epoch);
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#117: FILE: rtc/rtc-sysfs.c:104:
+       __ATTR(since_epoch, 0644 ,rtc_sysfs_show_alarm_since_epoch, rtc_sysfs_store_alarm_since_epoch);
                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: rtc/rtc-sysfs.c:108:
+       ssize_t retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: rtc/rtc-sysfs.c:109:
+       struct rtc_wkalrm alrm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: rtc/rtc-sysfs.c:111:
+       retval = rtc_read_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: rtc/rtc-sysfs.c:112:
+       if (retval == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#125: FILE: rtc/rtc-sysfs.c:112:
+       if (retval == 0) {
+               retval = sprintf(buf, "%d\n", alrm.enabled);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#125: FILE: rtc/rtc-sysfs.c:112:
+       if (retval == 0) {
+               retval = sprintf(buf, "%d\n", alrm.enabled);
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: rtc/rtc-sysfs.c:113:
+               retval = sprintf(buf, "%d\n", alrm.enabled);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: rtc/rtc-sysfs.c:113:
+               retval = sprintf(buf, "%d\n", alrm.enabled);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: rtc/rtc-sysfs.c:114:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: rtc/rtc-sysfs.c:116:
+       return retval;$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#132: FILE: rtc/rtc-sysfs.c:119:
+static ssize_t rtc_sysfs_store_alarm_wakeup_enabled(struct class_device *dev, const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: rtc/rtc-sysfs.c:121:
+       ssize_t retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: rtc/rtc-sysfs.c:122:
+       struct rtc_wkalrm alrm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: rtc/rtc-sysfs.c:124:
+       unsigned long enabled = simple_strtoul(buf, NULL, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#137: FILE: rtc/rtc-sysfs.c:124:
+       unsigned long enabled = simple_strtoul(buf, NULL, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: rtc/rtc-sysfs.c:126:
+       retval = rtc_read_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: rtc/rtc-sysfs.c:127:
+       if (retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#140: FILE: rtc/rtc-sysfs.c:127:
+       if (retval)
+               return retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: rtc/rtc-sysfs.c:128:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: rtc/rtc-sysfs.c:128:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: rtc/rtc-sysfs.c:129:
+       alrm.enabled = !!enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: rtc/rtc-sysfs.c:130:
+       retval = rtc_set_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: rtc/rtc-sysfs.c:131:
+       if (retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#144: FILE: rtc/rtc-sysfs.c:131:
+       if (retval)
+               return retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: rtc/rtc-sysfs.c:132:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: rtc/rtc-sysfs.c:132:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: rtc/rtc-sysfs.c:134:
+       return count;$

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#149: FILE: rtc/rtc-sysfs.c:136:
+static CLASS_DEVICE_ATTR(wakeup_enabled, 0644, rtc_sysfs_show_alarm_wakeup_enabled, rtc_sysfs_store_alarm_wakeup_enabled);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: rtc/rtc-sysfs.c:140:
+       ssize_t retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: rtc/rtc-sysfs.c:141:
+       struct rtc_wkalrm alrm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: rtc/rtc-sysfs.c:143:
+       retval = rtc_read_alarm(dev, &alrm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: rtc/rtc-sysfs.c:144:
+       if (retval == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#157: FILE: rtc/rtc-sysfs.c:144:
+       if (retval == 0) {
+               retval = sprintf(buf, "%d\n", alrm.pending);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#157: FILE: rtc/rtc-sysfs.c:144:
+       if (retval == 0) {
+               retval = sprintf(buf, "%d\n", alrm.pending);
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: rtc/rtc-sysfs.c:145:
+               retval = sprintf(buf, "%d\n", alrm.pending);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: rtc/rtc-sysfs.c:145:
+               retval = sprintf(buf, "%d\n", alrm.pending);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: rtc/rtc-sysfs.c:146:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: rtc/rtc-sysfs.c:148:
+       return retval;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#163: FILE: rtc/rtc-sysfs.c:150:
+static CLASS_DEVICE_ATTR(pending, S_IRUGO, rtc_sysfs_show_alarm_pending, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#165: FILE: rtc/rtc-sysfs.c:152:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: rtc/rtc-sysfs.c:166:
+       &class_device_attr_alarm_since_epoch.attr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: rtc/rtc-sysfs.c:167:
+       &class_device_attr_wakeup_enabled.attr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: rtc/rtc-sysfs.c:168:
+       &class_device_attr_pending.attr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: rtc/rtc-sysfs.c:169:
+       NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: rtc/rtc-sysfs.c:173:
+       .name   = "alarm",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: rtc/rtc-sysfs.c:174:
+       .attrs  = rtc_alarm_attrs,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: rtc/rtc-sysfs.c:177:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#186: FILE: rtc/rtc-sysfs.c:178:
 static int __devinit rtc_sysfs_add_device(struct class_device *class_dev,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: rtc/rtc-sysfs.c:186:
+       if (err) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#194: FILE: rtc/rtc-sysfs.c:186:
+       if (err) {
                dev_err(class_dev->dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: rtc/rtc-sysfs.c:189:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: rtc/rtc-sysfs.c:189:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: rtc/rtc-sysfs.c:190:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: rtc/rtc-sysfs.c:191:
+       err = sysfs_create_group(&class_dev->kobj, &rtc_alarm_attr_group);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: rtc/rtc-sysfs.c:192:
+       if (err) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#200: FILE: rtc/rtc-sysfs.c:192:
+       if (err) {
+               sysfs_remove_group(&class_dev->kobj, &rtc_attr_group);

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: rtc/rtc-sysfs.c:193:
+               sysfs_remove_group(&class_dev->kobj, &rtc_attr_group);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: rtc/rtc-sysfs.c:193:
+               sysfs_remove_group(&class_dev->kobj, &rtc_attr_group);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: rtc/rtc-sysfs.c:194:
+               dev_err(class_dev->dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: rtc/rtc-sysfs.c:194:
+               dev_err(class_dev->dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: rtc/rtc-sysfs.c:195:
+                       "failed to create sysfs alarm attributes\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: rtc/rtc-sysfs.c:195:
+                       "failed to create sysfs alarm attributes\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: rtc/rtc-sysfs.c:196:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: rtc/rtc-sysfs.c:206:
+       sysfs_remove_group(&class_dev->kobj, &rtc_alarm_attr_group);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000008434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 84 warnings, 4 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000008434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
