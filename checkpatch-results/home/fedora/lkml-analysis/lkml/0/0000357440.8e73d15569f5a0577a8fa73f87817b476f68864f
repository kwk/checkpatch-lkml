WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#25: 
i found open_exec() had several indent level. To much to be usefull.
                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#51: FILE: exec.c:371:
+       err = path_lookup(name, LOOKUP_FOLLOW | LOOKUP_POSITIVE, &nd);
                                                                  ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: exec.c:371:
+       err = path_lookup(name, LOOKUP_FOLLOW | LOOKUP_POSITIVE, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: exec.c:372:
+       if (err)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#52: FILE: exec.c:372:
+       if (err)
+               return ERR_PTR(err);

ERROR:CODE_INDENT: code indent should use tabs where possible
#53: FILE: exec.c:373:
+               return ERR_PTR(err);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: exec.c:373:
+               return ERR_PTR(err);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#55: FILE: exec.c:375:
+       inode = nd.dentry->d_inode;
                ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: exec.c:375:
+       inode = nd.dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: exec.c:376:
+       file = ERR_PTR(-EACCES);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: exec.c:378:
+       if (!S_ISREG(inode->i_mode))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#58: FILE: exec.c:378:
+       if (!S_ISREG(inode->i_mode))
+               goto error;

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: exec.c:379:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: exec.c:379:
+               goto error;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#61: FILE: exec.c:381:
+       if (nd.mnt->mnt_flags & MNT_NOEXEC)
            ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: exec.c:381:
+       if (nd.mnt->mnt_flags & MNT_NOEXEC)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#61: FILE: exec.c:381:
+       if (nd.mnt->mnt_flags & MNT_NOEXEC)
+               goto error;

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: exec.c:382:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: exec.c:382:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: exec.c:384:
+       err = permission(inode, MAY_EXEC);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: exec.c:385:
+       if (err) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: exec.c:385:
+       if (err) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#65: FILE: exec.c:385:
+       if (err) 
+               goto error;

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: exec.c:386:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: exec.c:386:
+               goto error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: exec.c:388:
+          is this useless ?$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#68: FILE: exec.c:388:
+       /* To check:
+          is this useless ?

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: exec.c:391:
+       if (!(inode->i_mode & 0111)) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: exec.c:391:
+       if (!(inode->i_mode & 0111)) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#71: FILE: exec.c:391:
+       if (!(inode->i_mode & 0111)) 
+               goto error;

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: exec.c:392:
+               goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: exec.c:392:
+               goto error;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#74: FILE: exec.c:394:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#75: FILE: exec.c:395:
+       file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#75: FILE: exec.c:395:
+       file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
                                      ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: exec.c:395:
+       file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: exec.c:396:
+       if (!IS_ERR(file)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#76: FILE: exec.c:396:
+       if (!IS_ERR(file)) {
+               err = deny_write_access(file);

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: exec.c:397:
+               err = deny_write_access(file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: exec.c:397:
+               err = deny_write_access(file);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: exec.c:398:
+               if (err) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: exec.c:398:
+               if (err) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#78: FILE: exec.c:398:
+               if (err) {
+                       fput(file);

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: exec.c:399:
+                       fput(file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: exec.c:399:
+                       fput(file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: exec.c:403:
+       return file;$

WARNING:INDENTED_LABEL: labels should not be indented
#99: FILE: exec.c:405:
+      error:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#100: FILE: exec.c:406:
+       path_release(&nd);
                      ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: exec.c:406:
+       path_release(&nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: exec.c:407:
+       return file;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: exec.c:418:
+       if (file->f_op->read) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#117: FILE: exec.c:418:
+       if (file->f_op->read) {
+               old_fs = get_fs();

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: exec.c:419:
+               old_fs = get_fs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: exec.c:419:
+               old_fs = get_fs();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: exec.c:420:
+               set_fs(get_ds());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: exec.c:420:
+               set_fs(get_ds());$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: exec.c:421:
+               result = file->f_op->read(file, addr, count, &pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: exec.c:421:
+               result = file->f_op->read(file, addr, count, &pos);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: exec.c:422:
+               set_fs(old_fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: exec.c:422:
+               set_fs(old_fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: exec.c:423:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: exec.c:430:
+       struct mm_struct *active_mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: exec.c:439:
+       if (!mm) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#140: FILE: exec.c:439:
+       if (!mm) {
+               return -ENOMEM;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#140: FILE: exec.c:439:
+       if (!mm) {
+               return -ENOMEM;
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: exec.c:440:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: exec.c:440:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: exec.c:441:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: exec.c:444:
+       if (init_new_context(current, mm)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#149: FILE: exec.c:444:
+       if (init_new_context(current, mm)) {
+               mmdrop(mm);

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: exec.c:445:
+               mmdrop(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: exec.c:445:
+               mmdrop(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: exec.c:446:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: exec.c:446:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: exec.c:447:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: exec.c:450:
+       spin_lock(&mmlist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: exec.c:451:
+       list_add(&mm->mmlist, &init_mm.mmlist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: exec.c:452:
+       mmlist_nr++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: exec.c:453:
+       spin_unlock(&mmlist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: exec.c:455:
+       task_lock(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: exec.c:456:
+       active_mm = current->active_mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: exec.c:457:
+       current->mm = mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: exec.c:458:
+       current->active_mm = mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: exec.c:459:
+       task_unlock(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: exec.c:460:
+       activate_mm(active_mm, mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: exec.c:461:
+       mm_release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: exec.c:462:
+       if (old_mm) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#186: FILE: exec.c:462:
+       if (old_mm) {
+               if (active_mm != old_mm) BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: exec.c:463:
+               if (active_mm != old_mm) BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: exec.c:463:
+               if (active_mm != old_mm) BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: exec.c:463:
+               if (active_mm != old_mm) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#187: FILE: exec.c:463:
+               if (active_mm != old_mm) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: exec.c:464:
+               mmput(old_mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: exec.c:464:
+               mmput(old_mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: exec.c:467:
+       mmdrop(active_mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: exec.c:468:
+       return 0;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000357440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 75 warnings, 1 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000357440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
