WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
   NTFS: 2.0.13 - Use iget5_locked() in preparation for fake inodes and small cleanups.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#66: 
--- a/Documentation/filesystems/ntfs.txt	Sun Jun 30 13:47:22 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#115: FILE: fs/ntfs/Makefile:8:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.0.13\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:NEW_TYPEDEFS: do not add new typedefs
#142: FILE: fs/ntfs/inode.c:43:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <NInoAttr>
#173: FILE: fs/ntfs/inode.c:74:
+	if (likely(!NInoAttr(ni))) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: fs/ntfs/inode.c:85:
+		if (na->name_len && memcmp(ni->name, na->name,
+				na->name_len * sizeof(uchar_t)))

CHECK:CAMELCASE: Avoid CamelCase: <NInoSetAttr>
#221: FILE: fs/ntfs/inode.c:122:
+	NInoSetAttr(ni);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#233: FILE: fs/ntfs/inode.c:134:
+		ni->name = (uchar_t*)kmalloc(i + sizeof(uchar_t), GFP_ATOMIC);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#233: FILE: fs/ntfs/inode.c:134:
+		ni->name = (uchar_t*)kmalloc(i + sizeof(uchar_t), GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/ntfs/inode.c:174:
+	vi = iget5_locked(sb, mft_no, (test_t)ntfs_test_inode,
+			(set_t)ntfs_init_locked_inode, &na);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#282: FILE: fs/ntfs/inode.c:183:
+#if 0

WARNING:TYPO_SPELLING: 'attemps' may be misspelled - perhaps 'attempts'?
#285: FILE: fs/ntfs/inode.c:186:
+	// result in repeated attemps to read a bad inode which is not
 	                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#292: FILE: fs/ntfs/inode.c:193:
+		iput(vi);
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ni"
#309: FILE: fs/ntfs/inode.c:207:
+	if (likely(ni != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ni"
#332: FILE: fs/ntfs/inode.c:229:
+	if (likely(ni != NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#359: FILE: fs/ntfs/inode.c:259:
+	ni->initialized_size = ni->allocated_size = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ni"
#398: FILE: fs/ntfs/inode.c:300:
+	if (likely(ni != NULL)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: fs/ntfs/inode.h:234:
+extern struct inode *ntfs_iget(struct super_block *sb, unsigned long mft_no);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: fs/ntfs/inode.h:240:
+extern ntfs_inode *ntfs_new_extent_inode(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: fs/ntfs/inode.h:241:
+extern ntfs_inode *ntfs_new_extent_inode(struct super_block *sb,
+		unsigned long mft_no);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#566: FILE: fs/ntfs/namei.c:116:
+		if (likely(!IS_ERR(dent_inode))) {

WARNING:SPLIT_STRING: quoted string split across lines
#575: FILE: fs/ntfs/namei.c:135:
 					"0x%x, inode sequence number = 0x%x, "
+					"returning -EIO. Run chkdsk.",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#584: FILE: fs/ntfs/namei.c:142:
+			ntfs_error(vol->sb, "ntfs_iget(0x%lx) failed with "
+				   "error code %li.", dent_ino,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#614: FILE: fs/ntfs/super.c:609:
+	ntfs_debug("vol->nr_clusters = 0x%Lx", (long long)vol->nr_clusters);

CHECK:CAMELCASE: Avoid CamelCase: <FILE_MFTMirr>
#667: FILE: fs/ntfs/super.c:917:
+	vol->mftmirr_ino = ntfs_iget(sb, FILE_MFTMirr);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#817: FILE: fs/ntfs/super.c:1301:
+			if ((i = vol->nr_mft_records & 31))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#902: FILE: fs/ntfs/super.c:1705:
+	 * inode we have ever called ntfs_iget()/iput() on, otherwise we A)
 	                                         ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#930: FILE: fs/ntfs/volume.h:93:
+	LCN nr_clusters;		/* Volume size in clusters == number of
+					   bits in lcn bitmap. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#930: FILE: fs/ntfs/volume.h:93:
+					   bits in lcn bitmap. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#943: FILE: fs/ntfs/volume.h:106:
+	unsigned long nr_mft_records;	/* Number of mft records == number of
+					   bits in mft bitmap. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#943: FILE: fs/ntfs/volume.h:106:
+					   bits in mft bitmap. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 16 warnings, 12 checks, 816 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
