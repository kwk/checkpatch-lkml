WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
It's arguable whether it's a big security issue, but certainly such behavior

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#88: FILE: drivers/block/floppy.c:3777:
 	if (filp->f_mode & 2
+	    || permission(filp->f_dentry->d_inode, 2, NULL, NULL) == 0)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: fs/cifs/cifsfs.c:191:
+static int cifs_permission(struct inode * inode, int mask,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#100: FILE: fs/cifs/cifsfs.c:192:
+		struct nameidata *nd, struct exec_perm *exec_perm)
 		                  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: fs/cifs/cifsfs.c:192:
+static int cifs_permission(struct inode * inode, int mask,
+		struct nameidata *nd, struct exec_perm *exec_perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#120: FILE: fs/coda/dir.c:150:
+int coda_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: fs/coda/dir.c:151:
+int coda_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#132: FILE: fs/coda/pioctl.c:28:
+				 struct nameidata *nd, struct exec_perm *);
 				                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: fs/coda/pioctl.c:46:
+				 struct nameidata *nd,
 				                   ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/ext2/acl.c:340:
+ext2_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                  ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#167: FILE: fs/ext2/acl.c:345:
+	if (exec_perm != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#172: FILE: fs/ext2/acl.c:350:
+	if (exec_perm != NULL) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#194: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int, struct nameidata *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/ext2/acl.h:63:
+extern int ext2_permission (struct inode *, int, struct nameidata *,
+		struct exec_perm *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/ext3/acl.c:294:
+__ext3_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#235: FILE: fs/ext3/acl.c:345:
+ext3_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                  ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#240: FILE: fs/ext3/acl.c:350:
+	if (exec_perm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#245: FILE: fs/ext3/acl.c:355:
+	if (exec_perm != NULL) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#267: FILE: fs/ext3/acl.h:62:
+extern int ext3_permission (struct inode *, int, struct nameidata *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: fs/ext3/acl.h:63:
+extern int ext3_permission (struct inode *, int, struct nameidata *,
+		struct exec_perm *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#299: FILE: fs/hfs/inode.c:515:
+			  struct nameidata *nd, struct exec_perm *exec_perm)
 			                    ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#316: FILE: fs/hfsplus/inode.c:256:
+		struct nameidata *nd, struct exec_perm *exec_perm)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/hfsplus/inode.c:256:
+static int hfsplus_permission(struct inode *inode, int mask,
+		struct nameidata *nd, struct exec_perm *exec_perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#339: FILE: fs/hostfs/hostfs_kern.c:793:
+int hostfs_permission(struct inode *ino, int desired, struct nameidata *nd,
                                                                         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: fs/hostfs/hostfs_kern.c:794:
+int hostfs_permission(struct inode *ino, int desired, struct nameidata *nd,
+		struct exec_perm *exec_perm)

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: fs/hostfs/hostfs_kern.c:806:
+	if(!err) err = vfs_permission(ino, desired, exec_perm);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#349: FILE: fs/hostfs/hostfs_kern.c:806:
+	if(!err) err = vfs_permission(ino, desired, exec_perm);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#371: FILE: fs/jfs/acl.c:131:
+int __jfs_permission(struct inode * inode, int mask, struct nameidata *nd)
                                                                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: fs/jfs/acl.c:131:
+int __jfs_permission(struct inode * inode, int mask, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#379: FILE: fs/jfs/acl.c:210:
+int jfs_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                     ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: fs/jfs/acl.c:211:
+int jfs_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#384: FILE: fs/jfs/acl.c:215:
+	if (exec_perm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#389: FILE: fs/jfs/acl.c:220:
+	if (exec_perm != NULL) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#442: FILE: fs/ncpfs/ioctl.c:37:
+	if ((permission(inode, MAY_WRITE, NULL, NULL) != 0)
 	    && (current->uid != server->m.mounted_uid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#451: FILE: fs/ncpfs/ioctl.c:65:
+	if ((permission(inode, MAY_WRITE, NULL, NULL) != 0)
 	    && (current->uid != server->m.mounted_uid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#460: FILE: fs/ncpfs/ioctl.c:193:
+		if ((permission(inode, MAY_WRITE, NULL, NULL) != 0)
 		    && (current->uid != server->m.mounted_uid)) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#469: FILE: fs/ncpfs/ioctl.c:257:
+			if (   (permission(inode, MAY_READ, NULL, NULL) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#469: FILE: fs/ncpfs/ioctl.c:257:
+			if (   (permission(inode, MAY_READ, NULL, NULL) != 0)
 			    && (current->uid != server->m.mounted_uid))

ERROR:SPACING: space prohibited after that open parenthesis '('
#478: FILE: fs/ncpfs/ioctl.c:271:
+			if (   (permission(inode, MAY_READ, NULL, NULL) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#478: FILE: fs/ncpfs/ioctl.c:271:
+			if (   (permission(inode, MAY_READ, NULL, NULL) != 0)
 			    && (current->uid != server->m.mounted_uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#487: FILE: fs/ncpfs/ioctl.c:344:
+		if ((permission(inode, MAY_WRITE, NULL, NULL) != 0)
 		    && (current->uid != server->m.mounted_uid))

ERROR:SPACING: space prohibited after that open parenthesis '('
#496: FILE: fs/ncpfs/ioctl.c:367:
+		if (   (permission(inode, MAY_READ, NULL, NULL) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#496: FILE: fs/ncpfs/ioctl.c:367:
+		if (   (permission(inode, MAY_READ, NULL, NULL) != 0)
 		    && (current->uid != server->m.mounted_uid))

ERROR:SPACING: space prohibited after that open parenthesis '('
#505: FILE: fs/ncpfs/ioctl.c:380:
+			if (   (permission(inode, MAY_WRITE, NULL, NULL) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#505: FILE: fs/ncpfs/ioctl.c:380:
+			if (   (permission(inode, MAY_WRITE, NULL, NULL) != 0)
 			    && (current->uid != server->m.mounted_uid))

ERROR:SPACING: space prohibited after that open parenthesis '('
#514: FILE: fs/ncpfs/ioctl.c:401:
+		if (   (permission(inode, MAY_WRITE, NULL, NULL) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#514: FILE: fs/ncpfs/ioctl.c:401:
+		if (   (permission(inode, MAY_WRITE, NULL, NULL) != 0)
 		    && (current->uid != server->m.mounted_uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#523: FILE: fs/ncpfs/ioctl.c:606:
+		if ((permission(inode, MAY_WRITE, NULL, NULL) != 0) &&
 				 (current->uid != server->m.mounted_uid))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: fs/ncpfs/ioctl.c:607:
+		if ((permission(inode, MAY_WRITE, NULL, NULL) != 0) &&
 				 (current->uid != server->m.mounted_uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#532: FILE: fs/ncpfs/ioctl.c:636:
+		if ((permission(inode, MAY_READ, NULL, NULL) != 0)
 		    && (current->uid != server->m.mounted_uid)) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#543: FILE: fs/nfs/dir.c:1544:
+int nfs_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                     ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: fs/nfs/dir.c:1545:
+int nfs_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#583: FILE: fs/nfsd/vfs.c:1768:
+	err = permission(inode, acc & (MAY_READ|MAY_WRITE|MAY_EXEC),
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#583: FILE: fs/nfsd/vfs.c:1768:
+	err = permission(inode, acc & (MAY_READ|MAY_WRITE|MAY_EXEC),
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: fs/nfsd/vfs.c:1769:
+	err = permission(inode, acc & (MAY_READ|MAY_WRITE|MAY_EXEC),
+			NULL, NULL);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#601: FILE: fs/proc/base.c:472:
+static int proc_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: fs/proc/base.c:473:
+static int proc_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#616: FILE: fs/reiserfs/xattr.c:1439:
+reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,
                                                                       ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: fs/reiserfs/xattr.c:1439:
+reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: fs/reiserfs/xattr.c:1440:
+reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#622: FILE: fs/reiserfs/xattr.c:1444:
+	if (exec_perm != NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#625: FILE: fs/reiserfs/xattr.c:1447:
+	ret = __reiserfs_permission (inode, mask, nd, 1);
 	                                          ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#625: FILE: fs/reiserfs/xattr.c:1447:
+	ret = __reiserfs_permission (inode, mask, nd, 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#627: FILE: fs/reiserfs/xattr.c:1449:
+	if (exec_perm != NULL) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#647: FILE: fs/smbfs/file.c:390:
+smb_file_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: fs/smbfs/file.c:391:
+smb_file_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space prohibited after that open parenthesis '('
#659: FILE: fs/udf/file.c:191:
+	if ( permission(inode, MAY_READ, NULL, NULL) != 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#659: FILE: fs/udf/file.c:191:
+	if ( permission(inode, MAY_READ, NULL, NULL) != 0 )

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#670: FILE: fs/xfs/linux-2.6/xfs_iops.c:471:
+	struct nameidata *nd,
 	                  ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#682: FILE: fs/exec.c:133:
+	error = permission(nd.dentry->d_inode, MAY_READ | MAY_EXEC, &nd, NULL);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#682: FILE: fs/exec.c:133:
+	error = permission(nd.dentry->d_inode, MAY_READ | MAY_EXEC, &nd, NULL);
 	                                                             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: fs/exec.c:487:
+			int err;
+			if (bprm != NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#703: FILE: fs/exec.c:487:
+			if (bprm != NULL) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bprm"
#703: FILE: fs/exec.c:487:
+			if (bprm != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#705: FILE: fs/exec.c:489:
+				err = permission(inode, MAY_EXEC, &nd,
 				                                   ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: fs/exec.c:490:
+				err = permission(inode, MAY_EXEC, &nd,
+						&bprm->perm);

CHECK:BRACES: Unbalanced braces around else statement
#707: FILE: fs/exec.c:491:
+			} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#708: FILE: fs/exec.c:492:
+				err = permission(inode, MAY_EXEC, &nd, NULL);
 				                                   ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#795: FILE: fs/namei.c:162:
+int __vfs_permission(struct inode * inode, int mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#804: FILE: fs/namei.c:211:
+int vfs_permission(struct inode * inode, int mask, struct exec_perm * exec_perm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#804: FILE: fs/namei.c:211:
+int vfs_permission(struct inode * inode, int mask, struct exec_perm * exec_perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#808: FILE: fs/namei.c:215:
+	if (exec_perm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "exec_perm"
#813: FILE: fs/namei.c:220:
+	if (exec_perm != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#825: FILE: fs/namei.c:232:
+int permission(struct inode * inode, int mask, struct nameidata *nd,
                                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#825: FILE: fs/namei.c:232:
+int permission(struct inode * inode, int mask, struct nameidata *nd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: fs/namei.c:233:
+int permission(struct inode * inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#835: FILE: fs/namei.c:242:
+		retval = inode->i_op->permission(inode, submask, nd, exec_perm);
 		                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#847: FILE: fs/namei.c:703:
+			err = permission(inode, MAY_EXEC, nd, NULL);
 			                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#856: FILE: fs/namei.c:997:
+	err = permission(inode, MAY_EXEC, nd, NULL);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#874: FILE: fs/namei.c:1163:
+	return permission(dir, MAY_WRITE | MAY_EXEC, nd, NULL);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#883: FILE: fs/namei.c:1271:
+	error = permission(inode, acc_mode, nd, NULL);
 	                                    ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#903: FILE: fs/namespace.c:518:
+	if (permission(nd->dentry->d_inode, MAY_WRITE, nd, NULL))
 	                                               ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#914: FILE: fs/open.c:237:
+	error = permission(inode,MAY_WRITE,&nd,NULL);
 	                                    ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: fs/open.c:237:
+	error = permission(inode,MAY_WRITE,&nd,NULL);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#914: FILE: fs/open.c:237:
+	error = permission(inode,MAY_WRITE,&nd,NULL);
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#914: FILE: fs/open.c:237:
+	error = permission(inode,MAY_WRITE,&nd,NULL);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: fs/open.c:237:
+	error = permission(inode,MAY_WRITE,&nd,NULL);
 	                                      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#923: FILE: fs/open.c:391:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                         ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#923: FILE: fs/open.c:391:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#923: FILE: fs/open.c:391:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#923: FILE: fs/open.c:391:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#923: FILE: fs/open.c:391:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#932: FILE: fs/open.c:444:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                         ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#932: FILE: fs/open.c:444:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#932: FILE: fs/open.c:444:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#932: FILE: fs/open.c:444:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#932: FILE: fs/open.c:444:
+		    (error = permission(inode,MAY_WRITE,&nd,NULL)) != 0)
 		                                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#941: FILE: fs/open.c:503:
+		res = permission(nd.dentry->d_inode, mode, &nd, NULL);
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#941: FILE: fs/open.c:503:
+		res = permission(nd.dentry->d_inode, mode, &nd, NULL);
 		                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                                ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: fs/open.c:527:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                                  ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                                ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: fs/open.c:578:
+	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd,NULL);
 	                                                  ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: fs/binfmt_misc.c:154:
+		if (permission(bprm->file->f_dentry->d_inode, MAY_READ,
+					NULL, NULL))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: fs/binfmt_misc.c:183:
+	interp_file = open_exec (iname, bprm);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: Unnecessary space before function pointer arguments
#1068: FILE: include/linux/fs.h:938:
+	int (*permission) (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1068: FILE: include/linux/fs.h:938:
+	int (*permission) (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1068: FILE: include/linux/fs.h:938:
+	int (*permission) (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1068: FILE: include/linux/fs.h:938:
+	int (*permission) (struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#1068: FILE: include/linux/fs.h:938:
+	int (*permission) (struct inode *, int, struct nameidata *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: include/linux/fs.h:939:
+	int (*permission) (struct inode *, int, struct nameidata *,
+			struct exec_perm *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1079: FILE: include/linux/fs.h:1345:
+extern int permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1079: FILE: include/linux/fs.h:1345:
+extern int permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1079: FILE: include/linux/fs.h:1345:
+extern int permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1079: FILE: include/linux/fs.h:1345:
+extern int permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#1079: FILE: include/linux/fs.h:1345:
+extern int permission(struct inode *, int, struct nameidata *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: include/linux/fs.h:1346:
+extern int permission(struct inode *, int, struct nameidata *,
+		struct exec_perm *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1081: FILE: include/linux/fs.h:1347:
+extern int vfs_permission(struct inode *, int, struct exec_perm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1347:
+extern int vfs_permission(struct inode *, int, struct exec_perm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1081: FILE: include/linux/fs.h:1347:
+extern int vfs_permission(struct inode *, int, struct exec_perm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1347:
+extern int vfs_permission(struct inode *, int, struct exec_perm *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1092: FILE: include/linux/fs.h:1366:
+extern struct file * open_exec(const char *, struct linux_binprm *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1092: FILE: include/linux/fs.h:1366:
+extern struct file * open_exec(const char *, struct linux_binprm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1092: FILE: include/linux/fs.h:1366:
+extern struct file * open_exec(const char *, struct linux_binprm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1092: FILE: include/linux/fs.h:1366:
+extern struct file * open_exec(const char *, struct linux_binprm *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1121: FILE: include/linux/coda_linux.h:41:
+int coda_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1122: FILE: include/linux/coda_linux.h:42:
+int coda_permission(struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: include/linux/nfs_fs.h:293:
+extern int nfs_permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1133: FILE: include/linux/nfs_fs.h:293:
+extern int nfs_permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1133: FILE: include/linux/nfs_fs.h:293:
+extern int nfs_permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1133: FILE: include/linux/nfs_fs.h:293:
+extern int nfs_permission(struct inode *, int, struct nameidata *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_perm *' should also have an identifier name
#1133: FILE: include/linux/nfs_fs.h:293:
+extern int nfs_permission(struct inode *, int, struct nameidata *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1134: FILE: include/linux/nfs_fs.h:294:
+extern int nfs_permission(struct inode *, int, struct nameidata *,
+		struct exec_perm *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1145: FILE: include/linux/reiserfs_xattr.h:45:
+int reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,
                                                                           ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1145: FILE: include/linux/reiserfs_xattr.h:45:
+int reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1146: FILE: include/linux/reiserfs_xattr.h:46:
+int reiserfs_permission (struct inode *inode, int mask, struct nameidata *nd,
+		struct exec_perm *exec_perm);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: ipc/mqueue.c:635:
+	if (permission(dentry->d_inode, oflag2acc[oflag & O_ACCMODE],
+				NULL, NULL))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1169: FILE: net/unix/af_unix.c:680:
+		err = permission(nd.dentry->d_inode, MAY_WRITE, &nd, NULL);
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1169: FILE: net/unix/af_unix.c:680:
+		err = permission(nd.dentry->d_inode, MAY_WRITE, &nd, NULL);
 		                                                 ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253998.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 120 warnings, 55 checks, 928 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253998.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
