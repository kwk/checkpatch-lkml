WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: Documentation/DocBook/rapidio.tmpl:10:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: Documentation/DocBook/rapidio.tmpl:35:
+      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: Documentation/DocBook/rapidio.tmpl:42:
+      $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: Documentation/DocBook/rapidio.tmpl:45:
+     License along with this program; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: Documentation/DocBook/rapidio.tmpl:46:
+     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: Documentation/DocBook/rapidio.tmpl:49:
+      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: Documentation/DocBook/rapidio.tmpl:76:
+  $

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#164: FILE: Documentation/DocBook/rapidio.tmpl:105:
+!Iinclude/linux/rio_drv.h
  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: Documentation/DocBook/rapidio.tmpl:109:
+  </chapter>^I$

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#179: FILE: Documentation/DocBook/rapidio.tmpl:120:
+!Iinclude/linux/rio.h
  ^^^^^^^^

WARNING:TYPO_SPELLING: 'Earch' may be misspelled - perhaps 'Search'?
#196: FILE: Documentation/DocBook/rapidio.tmpl:137:
+!Earch/ppc/syslib/ppc85xx_rio.c
  ^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#239: FILE: drivers/rio/Kconfig:4:
+config RAPIDIO_8_BIT_TRANSPORT
+	bool "8-bit transport addressing"
+	depends on RAPIDIO
+	---help---
+	  By default, the kernel assumes a 16-bit addressed RapidIO
+	  network. By selecting this option, the kernel will support
+	  an 8-bit addressed network.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'beforing' may be misspelled - perhaps 'before'?
#253: FILE: drivers/rio/Kconfig:18:
+	  enumeration beforing giving up.
 	              ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: drivers/rio/rio-access.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: drivers/rio/rio-access.c:42:
+#define RIO_LOP_READ(size,type,len) \
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: drivers/rio/rio-access.c:42:
+#define RIO_LOP_READ(size,type,len) \
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#313: FILE: drivers/rio/rio-access.c:44:
+	(struct rio_mport *mport, u32 offset, type *value)		\
 	                                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#318: FILE: drivers/rio/rio-access.c:49:
+	if (RIO_##size##_BAD) return RIO_BAD_SIZE;			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: drivers/rio/rio-access.c:66:
+#define RIO_LOP_WRITE(size,type,len) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: drivers/rio/rio-access.c:66:
+#define RIO_LOP_WRITE(size,type,len) \
                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#341: FILE: drivers/rio/rio-access.c:72:
+	if (RIO_##size##_BAD) return RIO_BAD_SIZE;			\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#355: FILE: drivers/rio/rio-access.c:86:
+EXPORT_SYMBOL_GPL(__rio_local_read_config_8);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#356: FILE: drivers/rio/rio-access.c:87:
+EXPORT_SYMBOL_GPL(__rio_local_read_config_16);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#357: FILE: drivers/rio/rio-access.c:88:
+EXPORT_SYMBOL_GPL(__rio_local_read_config_32);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#358: FILE: drivers/rio/rio-access.c:89:
+EXPORT_SYMBOL_GPL(__rio_local_write_config_8);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#359: FILE: drivers/rio/rio-access.c:90:
+EXPORT_SYMBOL_GPL(__rio_local_write_config_16);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#360: FILE: drivers/rio/rio-access.c:91:
+EXPORT_SYMBOL_GPL(__rio_local_write_config_32);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: drivers/rio/rio-access.c:102:
+#define RIO_OP_READ(size,type,len) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: drivers/rio/rio-access.c:102:
+#define RIO_OP_READ(size,type,len) \
                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#373: FILE: drivers/rio/rio-access.c:104:
+	(struct rio_mport *mport, u16 destid, u8 hopcount, u32 offset, type *value)	\
 	                                                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#378: FILE: drivers/rio/rio-access.c:109:
+	if (RIO_##size##_BAD) return RIO_BAD_SIZE;			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: drivers/rio/rio-access.c:126:
+#define RIO_OP_WRITE(size,type,len) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: drivers/rio/rio-access.c:126:
+#define RIO_OP_WRITE(size,type,len) \
                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#401: FILE: drivers/rio/rio-access.c:132:
+	if (RIO_##size##_BAD) return RIO_BAD_SIZE;			\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#415: FILE: drivers/rio/rio-access.c:146:
+EXPORT_SYMBOL_GPL(rio_mport_read_config_8);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#416: FILE: drivers/rio/rio-access.c:147:
+EXPORT_SYMBOL_GPL(rio_mport_read_config_16);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#417: FILE: drivers/rio/rio-access.c:148:
+EXPORT_SYMBOL_GPL(rio_mport_read_config_32);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#418: FILE: drivers/rio/rio-access.c:149:
+EXPORT_SYMBOL_GPL(rio_mport_write_config_8);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#419: FILE: drivers/rio/rio-access.c:150:
+EXPORT_SYMBOL_GPL(rio_mport_write_config_16);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: drivers/rio/rio-access.c:151:
+EXPORT_SYMBOL_GPL(rio_mport_write_config_32);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: drivers/rio/rio-access.c:175:
+EXPORT_SYMBOL_GPL(rio_mport_send_doorbell);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#450: FILE: drivers/rio/rio-driver.c:1:
+/*

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->vid == RIO_ANY_ID'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->vid == rdev->vid'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->did == RIO_ANY_ID'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->did == rdev->did'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->asm_vid == RIO_ANY_ID'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->asm_vid == rdev->asm_vid'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->asm_did == RIO_ANY_ID'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->asm_did == rdev->asm_did'
#483: FILE: drivers/rio/rio-driver.c:34:
+		if (((id->vid == RIO_ANY_ID) || (id->vid == rdev->vid)) &&
+		    ((id->did == RIO_ANY_ID) || (id->did == rdev->did)) &&
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#486: FILE: drivers/rio/rio-driver.c:37:
+		    ((id->asm_vid == RIO_ANY_ID)
+		     || (id->asm_vid == rdev->asm_vid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#487: FILE: drivers/rio/rio-driver.c:38:
+		     || (id->asm_vid == rdev->asm_vid))
+		    && ((id->asm_did == RIO_ANY_ID)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#488: FILE: drivers/rio/rio-driver.c:39:
+		    && ((id->asm_did == RIO_ANY_ID)
+			|| (id->asm_did == rdev->asm_did)))

WARNING:INDENTED_LABEL: labels should not be indented
#646: FILE: drivers/rio/rio-driver.c:197:
+      out:return 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#668: FILE: drivers/rio/rio-driver.c:219:
+		printk("RIO: failed to register RIO bus device\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#674: FILE: drivers/rio/rio-driver.c:225:
+EXPORT_SYMBOL_GPL(rio_register_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#675: FILE: drivers/rio/rio-driver.c:226:
+EXPORT_SYMBOL_GPL(rio_unregister_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#676: FILE: drivers/rio/rio-driver.c:227:
+EXPORT_SYMBOL_GPL(rio_bus_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#677: FILE: drivers/rio/rio-driver.c:228:
+EXPORT_SYMBOL_GPL(rio_dev_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#678: FILE: drivers/rio/rio-driver.c:229:
+EXPORT_SYMBOL_GPL(rio_dev_put);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#684: FILE: drivers/rio/rio-sysfs.c:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#705: FILE: drivers/rio/rio-sysfs.c:22:
+#define rio_config_attr(field, format_string)					\
+static ssize_t								\
+	field##_show(struct device *dev, char *buf)			\
+{									\
+	struct rio_dev *rdev = to_rio_dev(dev);				\
+									\
+	return sprintf(buf, format_string, rdev->field);		\
+}									\
+

WARNING:INDENTED_LABEL: labels should not be indented
#738: FILE: drivers/rio/rio-sysfs.c:55:
+      out:

CHECK:SPACING: No space is necessary after a cast
#760: FILE: drivers/rio/rio-sysfs.c:77:
+	u8 *data = (u8 *) buf;

WARNING:LINE_SPACING: Missing a blank line after declarations
#777: FILE: drivers/rio/rio-sysfs.c:94:
+		u8 val;
+		rio_read_config_8(dev, off, &val);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#785: FILE: drivers/rio/rio-sysfs.c:102:
+		u16 val;
+		rio_read_config_16(dev, off, &val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: drivers/rio/rio-sysfs.c:111:
+		u32 val;
+		rio_read_config_32(dev, off, &val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: drivers/rio/rio-sysfs.c:122:
+		u16 val;
+		rio_read_config_16(dev, off, &val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#814: FILE: drivers/rio/rio-sysfs.c:131:
+		u8 val;
+		rio_read_config_8(dev, off, &val);

CHECK:SPACING: No space is necessary after a cast
#830: FILE: drivers/rio/rio-sysfs.c:147:
+	u8 *data = (u8 *) buf;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size > 2'
#845: FILE: drivers/rio/rio-sysfs.c:162:
+	if ((off & 3) && (size > 2)) {

CHECK:SPACING: No space is necessary after a cast
#847: FILE: drivers/rio/rio-sysfs.c:164:
+		val |= (u16) data[off - init_off] << 8;

WARNING:LINE_SPACING: Missing a blank line after declarations
#847: FILE: drivers/rio/rio-sysfs.c:164:
+		u16 val = data[off - init_off + 1];
+		val |= (u16) data[off - init_off] << 8;

CHECK:SPACING: No space is necessary after a cast
#855: FILE: drivers/rio/rio-sysfs.c:172:
+		val |= (u32) data[off - init_off + 2] << 8;

WARNING:LINE_SPACING: Missing a blank line after declarations
#855: FILE: drivers/rio/rio-sysfs.c:172:
+		u32 val = data[off - init_off + 3];
+		val |= (u32) data[off - init_off + 2] << 8;

CHECK:SPACING: No space is necessary after a cast
#856: FILE: drivers/rio/rio-sysfs.c:173:
+		val |= (u32) data[off - init_off + 1] << 16;

CHECK:SPACING: No space is necessary after a cast
#857: FILE: drivers/rio/rio-sysfs.c:174:
+		val |= (u32) data[off - init_off] << 24;

CHECK:SPACING: No space is necessary after a cast
#865: FILE: drivers/rio/rio-sysfs.c:182:
+		val |= (u16) data[off - init_off] << 8;

WARNING:LINE_SPACING: Missing a blank line after declarations
#865: FILE: drivers/rio/rio-sysfs.c:182:
+		u16 val = data[off - init_off + 1];
+		val |= (u16) data[off - init_off] << 8;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#883: FILE: drivers/rio/rio-sysfs.c:200:
+		 .mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#919: FILE: drivers/rio/rio.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#963: FILE: drivers/rio/rio.c:45:
+	return (RIO_GET_DID(result));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#970: FILE: drivers/rio/rio.c:52:
+ * @entries: Number of entries in inbound mailbox queue $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#979: FILE: drivers/rio/rio.c:61:
+			 void (*minb) (struct rio_mport * mport, int mbox,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#979: FILE: drivers/rio/rio.c:61:
+			 void (*minb) (struct rio_mport * mport, int mbox,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#984: FILE: drivers/rio/rio.c:66:
+	struct resource *res = kmalloc(sizeof(struct resource), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#986: FILE: drivers/rio/rio.c:68:
+	if (res) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#990: FILE: drivers/rio/rio.c:72:
+		if ((rc =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1003: FILE: drivers/rio/rio.c:85:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#1006: FILE: drivers/rio/rio.c:88:
+      out:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/rio/rio.c:112:
+ * @entries: Number of entries in outbound mailbox queue $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1039: FILE: drivers/rio/rio.c:121:
+			  void (*moutb) (struct rio_mport * mport, int mbox,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1039: FILE: drivers/rio/rio.c:121:
+			  void (*moutb) (struct rio_mport * mport, int mbox,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#1044: FILE: drivers/rio/rio.c:126:
+	struct resource *res = kmalloc(sizeof(struct resource), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1046: FILE: drivers/rio/rio.c:128:
+	if (res) {
[...]
+	} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1050: FILE: drivers/rio/rio.c:132:
+		if ((rc =

CHECK:BRACES: Unbalanced braces around else statement
#1063: FILE: drivers/rio/rio.c:145:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#1066: FILE: drivers/rio/rio.c:148:
+      out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1098: FILE: drivers/rio/rio.c:180:
+		    void (*dinb) (struct rio_mport * mport, u16 src, u16 dst,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1098: FILE: drivers/rio/rio.c:180:
+		    void (*dinb) (struct rio_mport * mport, u16 src, u16 dst,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1104: FILE: drivers/rio/rio.c:186:
+	if (!(dbell = kmalloc(sizeof(struct rio_dbell), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dbell)...) over kmalloc(sizeof(struct rio_dbell)...)
#1104: FILE: drivers/rio/rio.c:186:
+	if (!(dbell = kmalloc(sizeof(struct rio_dbell), GFP_KERNEL))) {

WARNING:INDENTED_LABEL: labels should not be indented
#1114: FILE: drivers/rio/rio.c:196:
+      out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1132: FILE: drivers/rio/rio.c:214:
+			  void (*dinb) (struct rio_mport * mport, u16 src,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1132: FILE: drivers/rio/rio.c:214:
+			  void (*dinb) (struct rio_mport * mport, u16 src,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#1137: FILE: drivers/rio/rio.c:219:
+	struct resource *res = kmalloc(sizeof(struct resource), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1139: FILE: drivers/rio/rio.c:221:
+	if (res) {
[...]
+	} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1143: FILE: drivers/rio/rio.c:225:
+		if ((rc =

CHECK:BRACES: Unbalanced braces around else statement
#1152: FILE: drivers/rio/rio.c:234:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#1155: FILE: drivers/rio/rio.c:237:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->start == start'
#1175: FILE: drivers/rio/rio.c:257:
+		if ((dbell->res->start == start) && (dbell->res->end == end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->end == end'
#1175: FILE: drivers/rio/rio.c:257:
+		if ((dbell->res->start == start) && (dbell->res->end == end)) {

WARNING:INDENTED_LABEL: labels should not be indented
#1196: FILE: drivers/rio/rio.c:278:
+      out:

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#1212: FILE: drivers/rio/rio.c:294:
+	struct resource *res = kmalloc(sizeof(struct resource), GFP_KERNEL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1272: FILE: drivers/rio/rio.c:354:
+rio_mport_get_feature(struct rio_mport * port, int local, u16 destid,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1294: FILE: drivers/rio/rio.c:376:
+		if (!(ext_ftr_ptr = RIO_GET_BLOCK_PTR(ftr_header)))

WARNING:INDENTED_LABEL: labels should not be indented
#1338: FILE: drivers/rio/rio.c:420:
+      exit:

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1368: FILE: drivers/rio/rio.c:450:
+static int __devinit rio_init(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1372: FILE: drivers/rio/rio.c:454:
+	while ((dev = rio_get_device(RIO_ANY_ID, RIO_ANY_ID, dev)) != NULL) {
+		rio_fixup_device(dev);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1389: FILE: drivers/rio/rio.c:471:
+			printk(KERN_ERR

WARNING:INDENTED_LABEL: labels should not be indented
#1402: FILE: drivers/rio/rio.c:484:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1411: FILE: drivers/rio/rio.c:493:
+EXPORT_SYMBOL_GPL(rio_local_get_device_id);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1412: FILE: drivers/rio/rio.c:494:
+EXPORT_SYMBOL_GPL(rio_get_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1413: FILE: drivers/rio/rio.c:495:
+EXPORT_SYMBOL_GPL(rio_get_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1414: FILE: drivers/rio/rio.c:496:
+EXPORT_SYMBOL_GPL(rio_request_inb_dbell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1415: FILE: drivers/rio/rio.c:497:
+EXPORT_SYMBOL_GPL(rio_release_inb_dbell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1416: FILE: drivers/rio/rio.c:498:
+EXPORT_SYMBOL_GPL(rio_request_outb_dbell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1417: FILE: drivers/rio/rio.c:499:
+EXPORT_SYMBOL_GPL(rio_release_outb_dbell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1418: FILE: drivers/rio/rio.c:500:
+EXPORT_SYMBOL_GPL(rio_request_inb_mbox);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1419: FILE: drivers/rio/rio.c:501:
+EXPORT_SYMBOL_GPL(rio_release_inb_mbox);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1420: FILE: drivers/rio/rio.c:502:
+EXPORT_SYMBOL_GPL(rio_request_outb_mbox);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1421: FILE: drivers/rio/rio.c:503:
+EXPORT_SYMBOL_GPL(rio_release_outb_mbox);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1427: FILE: drivers/rio/rio.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1445: FILE: drivers/rio/rio.h:19:
+extern u32 rio_mport_get_feature(struct rio_mport *mport, int local, u16 destid,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1447: FILE: drivers/rio/rio.h:21:
+extern int rio_create_sysfs_dev_files(struct rio_dev *rdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: drivers/rio/rio.h:22:
+extern int rio_enum_mport(struct rio_mport *mport);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1449: FILE: drivers/rio/rio.h:23:
+extern int rio_disc_mport(struct rio_mport *mport);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1456: FILE: drivers/rio/rio.h:30:
+#define DECLARE_RIO_ROUTE_SECTION(section, vid, did, add_hook, get_hook)  \
+        static struct rio_route_ops __rio_route_ops __attribute_used__   \
+	        __attribute__((__section__(#section))) = { vid, did, add_hook, get_hook };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1457: FILE: drivers/rio/rio.h:31:
+        static struct rio_route_ops __rio_route_ops __attribute_used__   \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1457: FILE: drivers/rio/rio.h:31:
+        static struct rio_route_ops __rio_route_ops __attribute_used__   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1458: FILE: drivers/rio/rio.h:32:
+^I        __attribute__((__section__(#section))) = { vid, did, add_hook, get_hook };$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(#section) over __attribute__((__section__(#section)))
#1458: FILE: drivers/rio/rio.h:32:
+	        __attribute__((__section__(#section))) = { vid, did, add_hook, get_hook };

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1478: FILE: drivers/rio/rio.h:52:
+#define RIO_GET_DID(x)	((x & 0x00ff0000) >> 16)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1479: FILE: drivers/rio/rio.h:53:
+#define RIO_SET_DID(x)	((x & 0x000000ff) << 16)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1481: FILE: drivers/rio/rio.h:55:
+#define RIO_GET_DID(x)	(x & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1482: FILE: drivers/rio/rio.h:56:
+#define RIO_SET_DID(x)	(x & 0xffff)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 69 warnings, 43 checks, 1406 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
