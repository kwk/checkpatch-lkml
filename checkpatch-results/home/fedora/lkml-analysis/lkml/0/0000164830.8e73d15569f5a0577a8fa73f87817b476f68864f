CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#294: FILE: drivers/input/evdev.c:471:
+#define NBITS_COMPAT(x) ((((x)-1)/BITS_PER_COMPAT_LONG)+1)
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#294: FILE: drivers/input/evdev.c:471:
+#define NBITS_COMPAT(x) ((((x)-1)/BITS_PER_COMPAT_LONG)+1)
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#294: FILE: drivers/input/evdev.c:471:
+#define NBITS_COMPAT(x) ((((x)-1)/BITS_PER_COMPAT_LONG)+1)
                                                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#295: FILE: drivers/input/evdev.c:472:
+#define OFF_COMPAT(x)  ((x)%BITS_PER_COMPAT_LONG)
                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#298: FILE: drivers/input/evdev.c:474:
+#define LONG_COMPAT(x) ((x)/BITS_PER_COMPAT_LONG)
                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: fs/compat.c:54:
+asmlinkage ssize_t compat_sys_read(unsigned int fd, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: fs/compat.c:55:
+asmlinkage ssize_t compat_sys_read(unsigned int fd, char __user * buf,
+		compat_size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: fs/compat.c:60:
+asmlinkage ssize_t compat_sys_write(unsigned int fd, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: fs/compat.c:61:
+asmlinkage ssize_t compat_sys_write(unsigned int fd, const char __user * buf,
+		compat_size_t count)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#380: FILE: fs/read_write.c:22:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+		 : (((compat) && ((file)->f_op->compat_ ## func != NULL)) \
+			? (file)->f_op->compat_ ## func			\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#380: FILE: fs/read_write.c:22:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+		 : (((compat) && ((file)->f_op->compat_ ## func != NULL)) \
+			? (file)->f_op->compat_ ## func			\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'func' may be better as '(func)' to avoid precedence issues
#380: FILE: fs/read_write.c:22:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+		 : (((compat) && ((file)->f_op->compat_ ## func != NULL)) \
+			? (file)->f_op->compat_ ## func			\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL))))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f_op"
#381: FILE: fs/read_write.c:23:
+		(((file)->f_op == NULL) ? NULL				\

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_op->compat_ ## func"
#382: FILE: fs/read_write.c:24:
+		 : (((compat) && ((file)->f_op->compat_ ## func != NULL)) \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_op->func"
#384: FILE: fs/read_write.c:26:
+			: (((file)->f_op->func != NULL)			\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_op->aio_ ## func"
#386: FILE: fs/read_write.c:28:
+				: (((file)->f_op->aio_ ## func != NULL)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#390: FILE: fs/read_write.c:32:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#390: FILE: fs/read_write.c:32:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'func' may be better as '(func)' to avoid precedence issues
#390: FILE: fs/read_write.c:32:
+#define vfs_select_rw(file, func, compat)				\
+		(((file)->f_op == NULL) ? NULL				\
+			: (((file)->f_op->func != NULL)			\
+				? (file)->f_op->func			\
+				: (((file)->f_op->aio_ ## func != NULL)	\
+					? do_sync_ ## func		\
+					: NULL)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f_op"
#391: FILE: fs/read_write.c:33:
+		(((file)->f_op == NULL) ? NULL				\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_op->func"
#392: FILE: fs/read_write.c:34:
+			: (((file)->f_op->func != NULL)			\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_op->aio_ ## func"
#394: FILE: fs/read_write.c:36:
+				: (((file)->f_op->aio_ ## func != NULL)	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: fs/read_write.c:256:
+static ssize_t do_vfs_read(struct file *file, char __user *buf, size_t count,
+		loff_t *pos, ssize_t (*read_func)(struct file *, char __user *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: fs/read_write.c:310:
+static ssize_t do_vfs_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: fs/read_write.c:312:
+		ssize_t (*write_func)(struct file *, const char __user *,
+			size_t, loff_t *))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: fs/read_write.c:340:
+ssize_t vfs_write(struct file *file, const char __user *buf, size_t count,
+		loff_t *pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: fs/read_write.c:358:
+ssize_t do_sys_read(unsigned int fd, char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/read_write.c:359:
+ssize_t do_sys_read(unsigned int fd, char __user * buf,
+		size_t count, int compat)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: fs/read_write.c:369:
+		ret = do_vfs_read(file, buf, count, &pos,
+				vfs_select_rw(file, read, compat));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: fs/read_write.c:377:
+asmlinkage ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/read_write.c:383:
+ssize_t do_sys_write(unsigned int fd, const char __user * buf, size_t count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/read_write.c:384:
+ssize_t do_sys_write(unsigned int fd, const char __user * buf, size_t count,
+		int compat)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: fs/read_write.c:394:
+		ret = do_vfs_write(file, buf, count, &pos,
+				vfs_select_rw(file, write, compat));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#538: FILE: fs/read_write.c:402:
+asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: fs/read_write.c:403:
+asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf,
+		size_t count)

WARNING:SPACING: Unnecessary space before function pointer arguments
#554: FILE: include/linux/fs.h:957:
+	ssize_t (*compat_read) (struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#554: FILE: include/linux/fs.h:957:
+	ssize_t (*compat_read) (struct file *, char __user *, size_t, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#554: FILE: include/linux/fs.h:957:
+	ssize_t (*compat_read) (struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#554: FILE: include/linux/fs.h:957:
+	ssize_t (*compat_read) (struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#554: FILE: include/linux/fs.h:957:
+	ssize_t (*compat_read) (struct file *, char __user *, size_t, loff_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#557: FILE: include/linux/fs.h:960:
+	ssize_t (*compat_write) (struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#557: FILE: include/linux/fs.h:960:
+	ssize_t (*compat_write) (struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#557: FILE: include/linux/fs.h:960:
+	ssize_t (*compat_write) (struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#557: FILE: include/linux/fs.h:960:
+	ssize_t (*compat_write) (struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#557: FILE: include/linux/fs.h:960:
+	ssize_t (*compat_write) (struct file *, const char __user *, size_t, loff_t *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#565: FILE: include/linux/fs.h:1511:
+extern ssize_t do_sys_read(unsigned int fd, char __user * buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#565: FILE: include/linux/fs.h:1511:
+extern ssize_t do_sys_read(unsigned int fd, char __user * buf,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: include/linux/fs.h:1512:
+extern ssize_t do_sys_read(unsigned int fd, char __user * buf,
+		size_t count, int compat);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#567: FILE: include/linux/fs.h:1513:
+extern ssize_t do_sys_write(unsigned int fd, const char __user * buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: include/linux/fs.h:1513:
+extern ssize_t do_sys_write(unsigned int fd, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: include/linux/fs.h:1514:
+extern ssize_t do_sys_write(unsigned int fd, const char __user * buf,
+		size_t count, int compat);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164830.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 10 warnings, 33 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164830.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
