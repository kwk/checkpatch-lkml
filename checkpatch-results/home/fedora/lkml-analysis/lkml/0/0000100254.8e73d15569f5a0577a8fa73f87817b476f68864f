WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#73: FILE: include/linux/rtc.h:113:
+	int (*open)(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#74: FILE: include/linux/rtc.h:114:
+	void (*release)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#75: FILE: include/linux/rtc.h:115:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#75: FILE: include/linux/rtc.h:115:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#75: FILE: include/linux/rtc.h:115:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#76: FILE: include/linux/rtc.h:116:
+	int (*read_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_time *' should also have an identifier name
#76: FILE: include/linux/rtc.h:116:
+	int (*read_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#77: FILE: include/linux/rtc.h:117:
+	int (*set_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_time *' should also have an identifier name
#77: FILE: include/linux/rtc.h:117:
+	int (*set_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#78: FILE: include/linux/rtc.h:118:
+	int (*read_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_wkalrm *' should also have an identifier name
#78: FILE: include/linux/rtc.h:118:
+	int (*read_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#79: FILE: include/linux/rtc.h:119:
+	int (*set_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_wkalrm *' should also have an identifier name
#79: FILE: include/linux/rtc.h:119:
+	int (*set_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#80: FILE: include/linux/rtc.h:120:
+	int (*proc)(struct device *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#80: FILE: include/linux/rtc.h:120:
+	int (*proc)(struct device *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#81: FILE: include/linux/rtc.h:121:
+	int (*set_mmss)(struct device *, unsigned long secs);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#82: FILE: include/linux/rtc.h:122:
+	int (*irq_set_state)(struct device *, int enabled);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#83: FILE: include/linux/rtc.h:123:
+	int (*irq_set_freq)(struct device *, int freq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#84: FILE: include/linux/rtc.h:124:
+	int (*read_callback)(struct device *, int data);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#91: FILE: include/linux/rtc.h:131:
+struct rtc_device
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#98: FILE: include/linux/rtc.h:138:
+	struct rtc_class_ops *ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#99: FILE: include/linux/rtc.h:139:
+	struct mutex ops_lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#103: FILE: include/linux/rtc.h:143:
+	struct mutex char_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#106: FILE: include/linux/rtc.h:146:
+	spinlock_t irq_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#111: FILE: include/linux/rtc.h:151:
+	spinlock_t irq_task_lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: include/linux/rtc.h:154:
+};
+#define to_rtc_device(d) container_of(d, struct rtc_device, class_dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/rtc.h:156:
+extern struct rtc_device *rtc_device_register(const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/rtc.h:157:
+extern struct rtc_device *rtc_device_register(const char *name,
+					struct device *dev,

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#118: FILE: include/linux/rtc.h:158:
+					struct rtc_class_ops *ops,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/rtc.h:160:
+extern void rtc_device_unregister(struct rtc_device *rdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/rtc.h:161:
+extern int rtc_interface_register(struct class_interface *intf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/rtc.h:163:
+extern int rtc_month_days(unsigned int month, unsigned int year);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/rtc.h:164:
+extern int rtc_valid_tm(struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/rtc.h:165:
+extern int rtc_tm_to_time(struct rtc_time *tm, unsigned long *time);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/rtc.h:166:
+extern void rtc_time_to_tm(unsigned long time, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/rtc.h:168:
+extern int rtc_read_time(struct class_device *class_dev, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/rtc.h:169:
+extern int rtc_set_time(struct class_device *class_dev, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/rtc.h:170:
+extern int rtc_set_mmss(struct class_device *class_dev, unsigned long secs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/rtc.h:171:
+extern int rtc_read_alarm(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: include/linux/rtc.h:172:
+extern int rtc_read_alarm(struct class_device *class_dev,
+			struct rtc_wkalrm *alrm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/rtc.h:173:
+extern int rtc_set_alarm(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: include/linux/rtc.h:174:
+extern int rtc_set_alarm(struct class_device *class_dev,
+				struct rtc_wkalrm *alrm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/rtc.h:175:
+extern void rtc_update_irq(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: include/linux/rtc.h:176:
+extern void rtc_update_irq(struct class_device *class_dev,
+			unsigned long num, unsigned long events);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/rtc.h:178:
+extern struct class_device *rtc_class_open(char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/rtc.h:179:
+extern void rtc_class_close(struct class_device *class_dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/rtc.h:181:
+extern int rtc_irq_register(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: include/linux/rtc.h:182:
+extern int rtc_irq_register(struct class_device *class_dev,
+				struct rtc_task *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/rtc.h:183:
+extern void rtc_irq_unregister(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/linux/rtc.h:184:
+extern void rtc_irq_unregister(struct class_device *class_dev,
+				struct rtc_task *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/rtc.h:185:
+extern int rtc_irq_set_state(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/linux/rtc.h:186:
+extern int rtc_irq_set_state(struct class_device *class_dev,
+				struct rtc_task *task, int enabled);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/rtc.h:187:
+extern int rtc_irq_set_freq(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: include/linux/rtc.h:188:
+extern int rtc_irq_set_freq(struct class_device *class_dev,
+				struct rtc_task *task, int freq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: drivers/rtc/class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#186: FILE: drivers/rtc/class.c:12:
+ * the Free Software Foundation; version 2 of the License.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: drivers/rtc/class.c:26:
+	struct rtc_device *rtc = to_rtc_device(class_dev);
+	mutex_lock(&idr_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: drivers/rtc/class.c:42:
+struct rtc_device *rtc_device_register(const char *name, struct device *dev,
+					struct rtc_class_ops *ops,

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#216: FILE: drivers/rtc/class.c:42:
+					struct rtc_class_ops *ops,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: drivers/rtc/class.c:53:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rtc)...) over kzalloc(sizeof(struct rtc_device)...)
#237: FILE: drivers/rtc/class.c:63:
+	rtc = kzalloc(sizeof(struct rtc_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rtc"
#238: FILE: drivers/rtc/class.c:64:
+	if (rtc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#254: FILE: drivers/rtc/class.c:80:
+	strlcpy(rtc->name, name, RTC_DEVICE_NAME_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/rtc/class.c:88:
+	dev_info(dev, "rtc core: registered %s as %s\n",
+			rtc->name, rtc->class_dev.class_id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: drivers/rtc/class.c:103:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#303: FILE: drivers/rtc/class.c:129:
+		printk(KERN_ERR "%s: couldn't create class\n", __FILE__);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#341: FILE: drivers/rtc/Kconfig:19:
+config RTC_HCTOSYS
+	bool "Set system time from RTC on startup"
+	depends on RTC_CLASS = y
+	default y
+	help
+	  If you say yes here, the system time will be set using
+	  the value read from the specified RTC device. This is useful
+	  in order to avoid unnecessary fschk runs.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'fschk' may be misspelled - perhaps 'fsck'?
#348: FILE: drivers/rtc/Kconfig:26:
+	  in order to avoid unnecessary fschk runs.
 	                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#379: FILE: drivers/rtc/interface.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#390: FILE: drivers/rtc/interface.c:12:
+ * the Free Software Foundation; version 2 of the License.
+*/

CHECK:BRACES: braces {} should be used on all arms of this statement
#403: FILE: drivers/rtc/interface.c:25:
+	if (!rtc->ops)
[...]
+	else if (!rtc->ops->read_time)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: drivers/rtc/interface.c:29:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#451: FILE: drivers/rtc/interface.c:73:
+	if (!rtc->ops)
[...]
+	else if (!rtc->ops->set_mmss) {
[...]
+	else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#454: FILE: drivers/rtc/interface.c:76:
+		if (rtc->ops->read_time && rtc->ops->set_time) {
[...]
+		else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: drivers/rtc/interface.c:77:
+^I^I        struct rtc_time new, old;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: drivers/rtc/interface.c:79:
+^I^I        new.tm_sec  = secs % 60;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: drivers/rtc/interface.c:80:
+^I^I        secs /= 60;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: drivers/rtc/interface.c:81:
+^I^I        new.tm_min  = secs % 60;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: drivers/rtc/interface.c:82:
+^I^I        secs /= 60;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: drivers/rtc/interface.c:83:
+^I^I        new.tm_hour = secs % 24;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: drivers/rtc/interface.c:86:
+^I^I        * avoid writing when we're going to change the day$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: drivers/rtc/interface.c:87:
+^I^I        * of the month.  We will retry in the next minute.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: drivers/rtc/interface.c:88:
+^I^I        * This basically means that if the RTC must not drift$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: drivers/rtc/interface.c:89:
+^I^I        * by more than 1 minute in 11 minutes.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: drivers/rtc/interface.c:90:
+^I^I        */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: drivers/rtc/interface.c:92:
+^I^I            (new.tm_hour == 23 && new.tm_min == 59)))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: drivers/rtc/interface.c:92:
+			if (!((old.tm_hour == 23 && old.tm_min == 59) ||
+		            (new.tm_hour == 23 && new.tm_min == 59)))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#473: FILE: drivers/rtc/interface.c:95:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#476: FILE: drivers/rtc/interface.c:98:
+	}
+	else

CHECK:BRACES: braces {} should be used on all arms of this statement
#494: FILE: drivers/rtc/interface.c:116:
+	if (rtc->ops == NULL)
[...]
+	else if (!rtc->ops->read_alarm)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rtc->ops"
#494: FILE: drivers/rtc/interface.c:116:
+	if (rtc->ops == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#498: FILE: drivers/rtc/interface.c:120:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/rtc/interface.c:152:
+void rtc_update_irq(struct class_device *class_dev,
+		unsigned long num, unsigned long events)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#582: FILE: drivers/rtc/interface.c:204:
+	if (task == NULL || task->func == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->func"
#582: FILE: drivers/rtc/interface.c:204:
+	if (task == NULL || task->func == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rtc->irq_task"
#586: FILE: drivers/rtc/interface.c:208:
+	if (rtc->irq_task == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#635: FILE: drivers/rtc/interface.c:257:
+/*
+	FIXME: this does not belong here, will move where appropriate

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#662: FILE: drivers/rtc/hctosys.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#671: FILE: drivers/rtc/hctosys.c:10:
+ * the Free Software Foundation; version 2 of the License.
+*/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!class_dev"
#692: FILE: drivers/rtc/hctosys.c:31:
+	if (class_dev == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: drivers/rtc/hctosys.c:32:
+		printk("%s: unable to open rtc device (%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/rtc/hctosys.c:33:
+		printk("%s: unable to open rtc device (%s)\n",
+			__FILE__, CONFIG_RTC_HCTOSYS_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: drivers/rtc/hctosys.c:50:
+			dev_info(class_dev->dev,
+				"setting the system clock to "

WARNING:SPLIT_STRING: quoted string split across lines
#712: FILE: drivers/rtc/hctosys.c:51:
+				"setting the system clock to "
+				"%d-%02d-%02d %02d:%02d:%02d (%u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#715: FILE: drivers/rtc/hctosys.c:54:
+				(unsigned int) tv.tv_sec);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#717: FILE: drivers/rtc/hctosys.c:56:
+		}
+		else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#721: FILE: drivers/rtc/hctosys.c:60:
+	}
+	else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 36 warnings, 54 checks, 665 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
