WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#	           ChangeSet	1.497   -> 1.498  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#	include/linux/init_task.h	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	include/linux/sched.h	1.83    -> 1.84   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#	       kernel/fork.c	1.66    -> 1.67   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#	         init/main.c	1.62    -> 1.63   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	     kernel/Makefile	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	      kernel/sched.c	1.120   -> 1.121  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	       kernel/exit.c	1.41    -> 1.42   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	               (new)	        -> 1.1     kernel/rcupdate.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	               (new)	        -> 1.1     include/linux/rcupdate.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# 02/08/27	dipankar@in.ibm.com	1.498

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#   Add RCU infrastructure based on rcu_poll in -aa kernels with support

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#   for preemption and per-CPU queues.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#71: 
--- a/include/linux/init_task.h	Tue Aug 27 00:34:16 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: include/linux/rcupdate.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: include/linux/rcupdate.h:2:
+ * Read-Copy Update mechanism for mutual exclusion $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#99: FILE: include/linux/rcupdate.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: include/linux/rcupdate.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: include/linux/rcupdate.h:21:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: include/linux/rcupdate.h:29:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#139: FILE: include/linux/rcupdate.h:55:
+#define RCU_HEAD(head) struct rcu_head head = RCU_HEAD_INIT(head)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#140: FILE: include/linux/rcupdate.h:56:
+#define INIT_RCU_HEAD(ptr) do { \
+	INIT_LIST_HEAD(&(ptr)->list); (ptr)->func = NULL; (ptr)->arg = NULL; \
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: include/linux/rcupdate.h:60:
+extern void FASTCALL(call_rcu(struct rcu_head *head, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/rcupdate.h:60:
+extern void FASTCALL(call_rcu(struct rcu_head *head, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: include/linux/rcupdate.h:61:
+extern void FASTCALL(call_rcu(struct rcu_head *head, 
+				void (*func)(void *arg), void *arg));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/rcupdate.h:67:
+extern void FASTCALL(call_rcu_preempt(struct rcu_head *head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/linux/rcupdate.h:68:
+extern void FASTCALL(call_rcu_preempt(struct rcu_head *head,
+				void (*func)(void *arg), void *arg));

ERROR:SPACING: space required before the open parenthesis '('
#156: FILE: include/linux/rcupdate.h:72:
+#define rcu_read_lock()         do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#157: FILE: include/linux/rcupdate.h:73:
+#define rcu_read_unlock()       do {} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: include/linux/rcupdate.h:74:
+static inline void call_rcu_preempt(struct rcu_head *head, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/rcupdate.h:75:
+static inline void call_rcu_preempt(struct rcu_head *head, 
+				void (*func)(void *arg), void *arg)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/rcupdate.h:82:
+extern void synchronize_kernel(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/rcupdate.h:83:
+extern void rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/linux/sched.h:168:
+extern void force_cpu_reschedule(int cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: include/linux/sched.h:958:
+	atomic_t *tmp;
+	tmp = per_cpu(curr_preempt_cntr, cpu);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#225: FILE: include/linux/sched.h:962:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->cpu_preempt_cntr"
#230: FILE: include/linux/sched.h:967:
+	if (unlikely(current->cpu_preempt_cntr != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->cpu_preempt_cntr"
#240: FILE: include/linux/sched.h:977:
+	if (likely(current->cpu_preempt_cntr == NULL)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: include/linux/sched.h:978:
+^I^Icurrent->cpu_preempt_cntr = $

ERROR:SPACING: space required before the open parenthesis '('
#253: FILE: include/linux/sched.h:990:
+#define rcu_init_preempt_cntr(cpu) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#254: FILE: include/linux/sched.h:991:
+#define rcu_switch_preempt_cntr(cpu) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: include/linux/sched.h:992:
+#define rcu_preempt_put() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: include/linux/sched.h:993:
+#define rcu_preempt_get() do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#326: FILE: kernel/rcupdate.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#340: FILE: kernel/rcupdate.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#341: FILE: kernel/rcupdate.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/rcupdate.c:23:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: kernel/rcupdate.c:31:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: kernel/rcupdate.c:61:
+static inline void rcu_preempt_lock(void) $

CHECK:SPACING: No space is necessary after a cast
#386: FILE: kernel/rcupdate.c:61:
+static inline void rcu_preempt_lock(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: kernel/rcupdate.c:65:
+static inline void rcu_preempt_unlock(void) $

CHECK:SPACING: No space is necessary after a cast
#390: FILE: kernel/rcupdate.c:65:
+static inline void rcu_preempt_unlock(void) 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#390: FILE: kernel/rcupdate.c:65:
+}
+static inline void rcu_preempt_unlock(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: kernel/rcupdate.c:69:
+static inline void rcu_data_preempt_init(void) $

CHECK:SPACING: No space is necessary after a cast
#394: FILE: kernel/rcupdate.c:69:
+static inline void rcu_data_preempt_init(void) 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#394: FILE: kernel/rcupdate.c:69:
+}
+static inline void rcu_data_preempt_init(void) 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#398: FILE: kernel/rcupdate.c:73:
+}
+#define is_rcu_preempt_data(rdata) (rdata == &rcu_data_preempt)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rdata' may be better as '(rdata)' to avoid precedence issues
#398: FILE: kernel/rcupdate.c:73:
+#define is_rcu_preempt_data(rdata) (rdata == &rcu_data_preempt)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#401: FILE: kernel/rcupdate.c:76:
+static inline void rcu_preempt_unlock(void) ^I{}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: kernel/rcupdate.c:84:
+ * call_rcu - Queue an RCU update request. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: kernel/rcupdate.c:89:
+ * The update function will be invoked as soon as all CPUs have performed a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: kernel/rcupdate.c:90:
+ * context switch or been seen in the idle loop or in a user process. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: kernel/rcupdate.c:91:
+ * It can be called only from process or BH context, however can be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: kernel/rcupdate.c:92:
+ * made to work from irq context too with minor code changes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: kernel/rcupdate.c:93:
+ * if necessary. The read-side of critical section that use $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: kernel/rcupdate.c:94:
+ * call_rcu() for updation must be protected by $

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: kernel/rcupdate.c:103:
+ ^Irdata = &rcu_data[get_cpu()];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: kernel/rcupdate.c:103:
+ ^Irdata = &rcu_data[get_cpu()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: kernel/rcupdate.c:103:
+ ^Irdata = &rcu_data[get_cpu()];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: kernel/rcupdate.c:113:
+ * call_rcu - Queue an RCU update request. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/rcupdate.c:119:
+ * context switch or been seen in the idle loop or in a user process. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: kernel/rcupdate.c:120:
+ * It can be called only from process or BH context, however can be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: kernel/rcupdate.c:121:
+ * made to work from irq context too with minor code changes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/rcupdate.c:122:
+ * if necessary. The read-side of critical section  doesn't require any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: kernel/rcupdate.c:124:
+ * It should not be used for things like deferred kfree() unless such $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: kernel/rcupdate.c:125:
+ * use can be guaranteed to be extremely infrequent. Doing otherwise $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: kernel/rcupdate.c:126:
+ * can result in all your memory consumed while waiting for a $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#482: FILE: kernel/rcupdate.c:157:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#532: FILE: kernel/rcupdate.c:207:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#537: FILE: kernel/rcupdate.c:212:
+		if ((rdata->qcheckpt[i] != RCU_quiescent(i)) &&
[...]
+				rdata->qsmask &= ~(1UL << i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdata->qcheckpt[i] != RCU_quiescent(i)'
#537: FILE: kernel/rcupdate.c:212:
+		if ((rdata->qcheckpt[i] != RCU_quiescent(i)) &&
+		    (!is_rcu_preempt_data(rdata) || !is_rcu_cpu_preempted(i)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: kernel/rcupdate.c:254:
+^Itasklet_init(&rdata->tasklet, rcu_process_callbacks, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: kernel/rcupdate.c:255:
+	tasklet_init(&rdata->tasklet, rcu_process_callbacks, 
+			(unsigned long)rdata);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#593: FILE: kernel/rcupdate.c:268:
+	for (i = 0; i < NR_CPUS; i++) {
+		rcu_data_init(&rcu_data[i]);
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#593: FILE: kernel/rcupdate.c:268:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: kernel/rcupdate.c:275:
+ * synchronize-kernel - wait until all the CPUs have gone $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#615: FILE: kernel/rcupdate.c:290:
+EXPORT_SYMBOL(call_rcu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#616: FILE: kernel/rcupdate.c:291:
+EXPORT_SYMBOL(synchronize_kernel);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: kernel/sched.c:173:
+DEFINE_PER_CPU(atomic_t[2], rcu_preempt_cntr) = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#647: FILE: kernel/sched.c:174:
+DEFINE_PER_CPU(atomic_t[2], rcu_preempt_cntr) = 
+			{ATOMIC_INIT(0), ATOMIC_INIT(0)};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#652: FILE: kernel/sched.c:179:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/sched.c:182:
+^Iper_cpu(curr_preempt_cntr, cpu) = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: kernel/sched.c:184:
+^Iper_cpu(next_preempt_cntr, cpu) = $

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: kernel/sched.c:884:
+            (idle_cpu(cpu) && !in_softirq() && hardirq_count() <= 1))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: kernel/sched.c:884:
+	if (user_ticks ||
+            (idle_cpu(cpu) && !in_softirq() && hardirq_count() <= 1))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: kernel/sched.c:884:
+            (idle_cpu(cpu) && !in_softirq() && hardirq_count() <= 1))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#716: FILE: kernel/sched.c:1315:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 39 warnings, 25 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
