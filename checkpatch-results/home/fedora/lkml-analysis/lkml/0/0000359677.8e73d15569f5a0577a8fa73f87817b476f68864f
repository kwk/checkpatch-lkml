WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	           ChangeSet	1.1005  -> 1.1006 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	    drivers/atm/he.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	drivers/atm/Config.in	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	    drivers/atm/he.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# 03/06/25	chas@relax.cmf.nrl.navy.mil	1.1006

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# backport of he from 2.5; allow suni when he is modular

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/atm/Config.in	Wed Jun 25 14:35:48 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#92: FILE: drivers/atm/he.c:92:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,69)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: drivers/atm/he.c:92:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,69)
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: drivers/atm/he.c:92:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,69)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#92: FILE: drivers/atm/he.c:92:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,69)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#93: FILE: drivers/atm/he.c:93:
+typedef void irqreturn_t;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#99: FILE: drivers/atm/he.c:99:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,9)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: drivers/atm/he.c:99:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,9)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: drivers/atm/he.c:99:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,9)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#99: FILE: drivers/atm/he.c:99:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,9)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#113: FILE: drivers/atm/he.c:107:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,3)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: drivers/atm/he.c:107:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,3)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: drivers/atm/he.c:107:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,3)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#113: FILE: drivers/atm/he.c:107:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,3)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#114: FILE: drivers/atm/he.c:108:
+#define pci_set_drvdata(pci_dev, data)	(pci_dev)->driver_data = (data)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#115: FILE: drivers/atm/he.c:109:
+#define pci_get_drvdata(pci_dev)	(pci_dev)->driver_data

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#118: FILE: drivers/atm/he.c:112:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: drivers/atm/he.c:112:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: drivers/atm/he.c:112:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#118: FILE: drivers/atm/he.c:112:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,44)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#129: FILE: drivers/atm/he.c:122:
+#define hprintk(fmt,args...)	printk(KERN_ERR DEV_LABEL "%d: " fmt, he_dev->number , ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: drivers/atm/he.c:122:
+#define hprintk(fmt,args...)	printk(KERN_ERR DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#129: FILE: drivers/atm/he.c:122:
+#define hprintk(fmt,args...)	printk(KERN_ERR DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                             	                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#135: FILE: drivers/atm/he.c:126:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: drivers/atm/he.c:126:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#135: FILE: drivers/atm/he.c:126:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                             	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/atm/he.c:128:
+#define HPRINTK(fmt,args...)	do { } while (0)
                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/atm/he.c:166:
+^I.close =^Ihe_close,^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: drivers/atm/he.c:167:
+^I.ioctl =^Ihe_ioctl,^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: drivers/atm/he.c:169:
+^I.sg_send =^Ihe_sg_send,^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#198: FILE: drivers/atm/he.c:176:
+#define he_writel(dev, val, reg)	do { writel(val, (dev)->membase + (reg)); wmb(); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#207: FILE: drivers/atm/he.c:190:
+	while (he_readl(he_dev, CON_CTL) & CON_CTL_BUSY);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#216: FILE: drivers/atm/he.c:206:
+	while (he_readl(he_dev, CON_CTL) & CON_CTL_BUSY);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vpi' may be better as '(vpi)' to avoid precedence issues
#225: FILE: drivers/atm/he.c:222:
+#define he_mkcid(dev, vpi, vci)		(((vpi << (dev)->vcibits) | vci) & 0x1fff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vci' may be better as '(vci)' to avoid precedence issues
#225: FILE: drivers/atm/he.c:222:
+#define he_mkcid(dev, vpi, vci)		(((vpi << (dev)->vcibits) | vci) & 0x1fff)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#359: FILE: drivers/atm/he.c:346:
 static int __devinit

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#379: FILE: drivers/atm/he.c:358:
+		printk(KERN_WARNING "he: no suitable dma available\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#431: FILE: drivers/atm/he.c:398:
+	if (he_dev)
+		kfree(he_dev);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#436: FILE: drivers/atm/he.c:403:
 static void __devexit

CHECK:BIT_MACRO: Prefer using the BIT macro
#466: FILE: drivers/atm/he.c:426:
+#define NONZERO (1 << 14)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#469: FILE: drivers/atm/he.c:428:
+	unsigned exp = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#499: FILE: drivers/atm/he.c:445:
+	unsigned i, lbm_offset, lbufd_index, lbuf_addr, lbuf_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#500: FILE: drivers/atm/he.c:446:
+	unsigned lbufs_per_row = he_dev->cells_per_row / he_dev->cells_per_lbuf;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#501: FILE: drivers/atm/he.c:447:
+	unsigned lbuf_bufsize = he_dev->cells_per_lbuf * ATM_CELL_PAYLOAD;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#502: FILE: drivers/atm/he.c:448:
+	unsigned row_offset = he_dev->r0_startrow * he_dev->bytes_per_row;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: drivers/atm/he.c:449:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: drivers/atm/he.c:468:
+^I^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#547: FILE: drivers/atm/he.c:476:
+	unsigned i, lbm_offset, lbufd_index, lbuf_addr, lbuf_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#548: FILE: drivers/atm/he.c:477:
+	unsigned lbufs_per_row = he_dev->cells_per_row / he_dev->cells_per_lbuf;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#549: FILE: drivers/atm/he.c:478:
+	unsigned lbuf_bufsize = he_dev->cells_per_lbuf * ATM_CELL_PAYLOAD;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#550: FILE: drivers/atm/he.c:479:
+	unsigned row_offset = he_dev->r1_startrow * he_dev->bytes_per_row;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: drivers/atm/he.c:480:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: drivers/atm/he.c:499:
+^I^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#595: FILE: drivers/atm/he.c:507:
+	unsigned i, lbm_offset, lbufd_index, lbuf_addr, lbuf_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#596: FILE: drivers/atm/he.c:508:
+	unsigned lbufs_per_row = he_dev->cells_per_row / he_dev->cells_per_lbuf;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#597: FILE: drivers/atm/he.c:509:
+	unsigned lbuf_bufsize = he_dev->cells_per_lbuf * ATM_CELL_PAYLOAD;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: drivers/atm/he.c:510:
+	unsigned row_offset = he_dev->tx_startrow * he_dev->bytes_per_row;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: drivers/atm/he.c:511:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: drivers/atm/he.c:530:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tpdrq_base"
#642: FILE: drivers/atm/he.c:539:
+	if (he_dev->tpdrq_base == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#707: FILE: drivers/atm/he.c:655:
+	unsigned (*rategrid)[16][16];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#716: FILE: drivers/atm/he.c:663:
+	rategrid = kmalloc( sizeof(unsigned) * 16 * 16, GFP_KERNEL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#716: FILE: drivers/atm/he.c:663:
+	rategrid = kmalloc( sizeof(unsigned) * 16 * 16, GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#767: FILE: drivers/atm/he.c:730:
+			if ((*rategrid)[i/16][i%16] >= rate_cps)
 			                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#767: FILE: drivers/atm/he.c:730:
+			if ((*rategrid)[i/16][i%16] >= rate_cps)
 			                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbps_pool"
#834: FILE: drivers/atm/he.c:783:
+	if (he_dev->rbps_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbps_base"
#853: FILE: drivers/atm/he.c:798:
+	if (he_dev->rbps_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_pool"
#898: FILE: drivers/atm/he.c:847:
+	if (he_dev->rbpl_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_pages"
#908: FILE: drivers/atm/he.c:854:
+	if (he_dev->rbpl_pages == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_base"
#919: FILE: drivers/atm/he.c:862:
+	if (he_dev->rbpl_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbrq_base"
#959: FILE: drivers/atm/he.c:903:
+	if (he_dev->rbrq_base == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#980: FILE: drivers/atm/he.c:919:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tbrq_base"
#991: FILE: drivers/atm/he.c:927:
+	if (he_dev->tbrq_base == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/atm/he.c:952:
+	he_dev->irq_base = pci_alloc_consistent(he_dev->pci_dev,
 			(CONFIG_IRQ_SIZE+1) * sizeof(struct he_irq), &he_dev->irq_phys);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->irq_base"
#1006: FILE: drivers/atm/he.c:953:
+	if (he_dev->irq_base == NULL) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1026: FILE: drivers/atm/he.c:995:
+	if (request_irq(he_dev->pci_dev->irq, he_irq_handler, SA_INTERRUPT|SA_SHIRQ, DEV_LABEL, he_dev)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1026: FILE: drivers/atm/he.c:995:
+	if (request_irq(he_dev->pci_dev->irq, he_irq_handler, SA_INTERRUPT|SA_SHIRQ, DEV_LABEL, he_dev)) {
 	                                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/atm/he.c:998:
+^I}   $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1199: FILE: drivers/atm/he.c:1159:
+	if ((err = he_init_irq(he_dev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: drivers/atm/he.c:1213:
+	if (nvpibits != -1 && nvcibits != -1 && nvpibits+nvcibits != HE_MAXCIDBITS) {
 	                                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tpd_pool"
#1332: FILE: drivers/atm/he.c:1473:
+	if (he_dev->tpd_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->hsp"
#1369: FILE: drivers/atm/he.c:1527:
+	if (he_dev->hsp == NULL) {

CHECK:SPACING: No space is necessary after a cast
#1487: FILE: drivers/atm/he.c:1704:
+		iounmap((void *) he_dev->membase);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1506: FILE: drivers/atm/he.c:1749:
+			((((unsigned char *)(buf))[(len)-6] << 8) |	\
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1515: FILE: drivers/atm/he.c:1759:
+			((((unsigned char *)(buf))[(len)-2] << 8) |	\
 			                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcc"
#1548: FILE: drivers/atm/he.c:1807:
+		if (vcc == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_vcc"
#1558: FILE: drivers/atm/he.c:1816:
+		if (he_vcc == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1607: FILE: drivers/atm/he.c:1851:
 		if (RBRQ_LEN_ERR(he_dev->rbrq_head)
+				|| RBRQ_CRC_ERR(he_dev->rbrq_head)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#1745: FILE: drivers/atm/he.c:1992:
+		if (tpd == NULL) {

CHECK:SPACING: No space is necessary after a cast
#1827: FILE: drivers/atm/he.c:2079:
+		(void) he_readl(he_dev, G0_RBPL_T);

CHECK:SPACING: No space is necessary after a cast
#1852: FILE: drivers/atm/he.c:2111:
+		(void) he_readl(he_dev, G0_RBPS_T);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1878: FILE: drivers/atm/he.c:2139:
+				/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1892: FILE: drivers/atm/he.c:2150:
+				/* fall through */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1914: FILE: drivers/atm/he.c:2172:
+				switch (type|group) {
 				            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2080: FILE: drivers/atm/he.c:2339:
+	if ((err = atm_find_ci(vcc, &vpi, &vci))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_vcc"
#2104: FILE: drivers/atm/he.c:2355:
+	if (he_vcc == NULL) {

WARNING:LONG_LINE_COMMENT: line length of 134 exceeds 100 columns
#2176: FILE: drivers/atm/he.c:2423:
+				spin_lock_irqsave(&he_dev->global_lock, flags);			/* also protects he_dev->cs_stper[] */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 56)
#2181: FILE: drivers/atm/he.c:2427:
 					if (he_dev->cs_stper[reg].inuse == 0 || 
[...]
+							break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2265: FILE: drivers/atm/he.c:2534:
+			  the open/closed indication in rsr0 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#2288: FILE: drivers/atm/he.c:2546:
+	if (err) {
[...]
 	}
[...]

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2290: FILE: drivers/atm/he.c:2548:
+		if (he_vcc)
+			kfree(he_vcc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#2420: FILE: drivers/atm/he.c:2661:
+		if (tpd == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#2533: FILE: drivers/atm/he.c:2771:
+	if (tpd == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#2552: FILE: drivers/atm/he.c:2783:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#2586: FILE: drivers/atm/he.c:2813:
+			if (tpd == NULL) {

CHECK:SPACING: No space is necessary after a cast
#2655: FILE: drivers/atm/he.c:2892:
+				copy_to_user((struct he_ioctl_reg *) arg, &reg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2656: FILE: drivers/atm/he.c:2893:
+				copy_to_user((struct he_ioctl_reg *) arg, &reg,
 							sizeof(struct he_ioctl_reg));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2675: FILE: drivers/atm/he.c:2917:
+	he_writel(he_dev, val, FRAMER + (addr*4));
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2684: FILE: drivers/atm/he.c:2924:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2684: FILE: drivers/atm/he.c:2924:
  
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2696: FILE: drivers/atm/he.c:2933:
+	reg = he_readl(he_dev, FRAMER + (addr*4));
 	                                     ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(readtab)
#2746: FILE: drivers/atm/he.c:3040:
+	for (i = 0; i < sizeof(readtab)/sizeof(readtab[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2746: FILE: drivers/atm/he.c:3040:
+	for (i = 0; i < sizeof(readtab)/sizeof(readtab[0]); i++) {
 	                               ^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#2800: FILE: drivers/atm/he.c:3091:
 static struct pci_device_id he_pci_tbl[] __devinitdata = {

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2889: FILE: drivers/atm/he.h:359:
+struct he_iovec
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000359677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 56 warnings, 42 checks, 2687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000359677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
