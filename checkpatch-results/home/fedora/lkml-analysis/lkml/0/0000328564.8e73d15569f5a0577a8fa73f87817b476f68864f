WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
The only two changes were reconciling changes to proc/base.c and the syscall

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#35: 
--- a/arch/i386/kernel/cpu/proc.c	Tue Oct 21 16:05:27 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CODE_INDENT: code indent should use tabs where possible
#55: FILE: arch/i386/kernel/cpu/proc.c:73:
+        /* show only CPUs in current cpuset */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: arch/i386/kernel/cpu/proc.c:74:
+        if (!cpu_isset(n, current->cpuset->cpus_allowed))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: arch/i386/kernel/cpu/proc.c:74:
+        if (!cpu_isset(n, current->cpuset->cpus_allowed))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: arch/i386/kernel/cpu/proc.c:75:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: arch/i386/kernel/cpu/proc.c:75:
+                return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: arch/i386/kernel/entry.S:891:
+ ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: arch/ia64/kernel/entry.S:1484:
+#ifdef CONFIG_CPUSETS^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: arch/ia64/kernel/entry.S:1490:
+#else^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/ia64/kernel/entry.S:1496:
+#endif^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: arch/ia64/kernel/setup.c:393:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: arch/ia64/kernel/setup.c:394:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/ia64/kernel/setup.c:395:
+^Iif (!cpu_isset(cpunum, current->cpuset->cpus_allowed)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/ia64/kernel/setup.c:396:
+^I^Ireturn 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: arch/ia64/kernel/setup.c:397:
+#endif /* CONFIG_CPUSETS_PROC_CPUINFO */^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: arch/ia64/kernel/setup.c:446:
+^I^I   cpunum, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#176: FILE: fs/proc/base.c:130:
+	E(PROC_TGID_CPUSET,    "cpuset",  S_IFREG|S_IRUGO),
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#176: FILE: fs/proc/base.c:130:
+	E(PROC_TGID_CPUSET,    "cpuset",  S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: fs/proc/base.c:375:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: fs/proc/proc_misc.c:391:
+^I^Iif (!cpu_isset(i, current->cpuset->cpus_allowed)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: fs/proc/proc_misc.c:393:
+#endif        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: fs/proc/proc_misc.c:418:
+^I^Iif (!cpu_isset(i, current->cpuset->cpus_allowed)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: fs/proc/proc_misc.c:420:
+#endif        $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: include/linux/cpuset.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#296: FILE: include/linux/cpuset.h:8:
+typedef unsigned int cpuset_t;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuset *' should also have an identifier name
#305: FILE: include/linux/cpuset.h:17:
+void use_cpuset(struct cpuset *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuset *' should also have an identifier name
#306: FILE: include/linux/cpuset.h:18:
+void release_cpuset(struct cpuset *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: include/linux/cpuset.h:21:
+int cpuset_setaffinity(struct task_struct * task, unsigned long mask);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: include/linux/cpuset.h:25:
+int cpuset_realtologic_cpuid(struct cpuset * cs, int cpuid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#322: FILE: include/linux/cpuset_types.h:1:
+#ifndef _LINUX_CPUSET_TYPES_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#325: FILE: include/linux/cpuset_types.h:4:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: include/linux/cpuset_types.h:6:
+        cpuset_t id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: include/linux/cpuset_types.h:6:
+        cpuset_t id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: include/linux/cpuset_types.h:7:
+        int flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: include/linux/cpuset_types.h:7:
+        int flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: include/linux/cpuset_types.h:10:
+        /* bitmask of the cpus present in this cpuset */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: include/linux/cpuset_types.h:11:
+        cpumask_t cpus_allowed;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: include/linux/cpuset_types.h:11:
+        cpumask_t cpus_allowed;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: include/linux/cpuset_types.h:13:
+        /* bitmask of the cpus reserved in this cpuset */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: include/linux/cpuset_types.h:14:
+        cpumask_t cpus_reserved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: include/linux/cpuset_types.h:14:
+        cpumask_t cpus_reserved;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: include/linux/cpuset_types.h:16:
+        /* bitmask of the cpus reserved with CPUSET_STRICT */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: include/linux/cpuset_types.h:17:
+        cpumask_t cpus_strictly_reserved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: include/linux/cpuset_types.h:17:
+        cpumask_t cpus_strictly_reserved;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: include/linux/cpuset_types.h:19:
+        struct cpuset * parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: include/linux/cpuset_types.h:19:
+        struct cpuset * parent;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: include/linux/cpuset_types.h:19:
+        struct cpuset * parent;

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: include/linux/cpuset_types.h:20:
+        struct list_head list; /* for the whole list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: include/linux/cpuset_types.h:20:
+        struct list_head list; /* for the whole list */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: include/linux/cpuset_types.h:22:
+        struct list_head children; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: include/linux/cpuset_types.h:22:
+        struct list_head children; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/cpuset_types.h:22:
+        struct list_head children; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: include/linux/cpuset_types.h:23:
+        struct list_head brothers;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/linux/cpuset_types.h:23:
+        struct list_head brothers;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: include/linux/cpuset_types.h:27:
+        atomic_t count; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: include/linux/cpuset_types.h:27:
+        atomic_t count; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: include/linux/cpuset_types.h:27:
+        atomic_t count; $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#350: FILE: include/linux/cpuset_types.h:29:
+	spinlock_t attach_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: include/linux/cpuset_types.h:35:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: include/linux/cpuset_types.h:38:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: include/linux/init_task.h:59:
+#ifdef CONFIG_CPUSETS^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: include/linux/init_task.h:60:
+#define CPUSET_TSKINIT(a,b)	.a = b,
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: include/linux/init_task.h:62:
+#define CPUSET_TSKINIT(a,b)
                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: include/linux/init_task.h:63:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: include/linux/sched.h:470:
+#ifdef CONFIG_CPUSETS^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#405: FILE: include/linux/sched.h:471:
+	struct cpuset * cpuset;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#407: FILE: include/linux/sched.h:473:
+	spinlock_t cpuset_attach_lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: include/linux/sched.h:474:
+#endif ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: include/linux/sched.h:474:
+#endif ^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#421: FILE: init/Kconfig:199:
+config CPUSETS
+        bool "cpusets"
+        depends on SMP
+        help
+          This options will let you create and manage sets of cpu where you
+          can run the processes.
+  
+          Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: init/Kconfig:205:
+  $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#430: FILE: init/Kconfig:208:
+config CPUSETS_PROC
+        bool "/proc/cpusets support"
+        depends on CPUSETS
+        help
+          Get some info about the existing cpusets in your system.
+          To use this option, you have to ensure that the "/proc file system
+          support" (CONFIG_PROC_FS) is enabled, too.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#438: FILE: init/Kconfig:216:
+config CPUSETS_PROC_CPUINFO
+        bool "/proc/cpuinfo uses current cpuset"
+        depends on CPUSETS_PROC
+        help
+          With this option enabled, a process reading /proc/cpuinfo will
+          only see the CPUs that are in its current cpuset.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#445: FILE: init/Kconfig:223:
+config CPUSETS_PROC_STAT
+        bool "/proc/stat uses current cpuset"
+        depends on CPUSETS_PROC
+        help
+          With this option enabled, a process reading /proc/stat will
+          only see the CPUs that are in its current cpuset.
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#464: FILE: init/main.c:42:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: init/main.c:48:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#478: FILE: init/main.c:95:
+extern void cpusets_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: init/main.c:469:
+#endif^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#527: FILE: kernel/cpuset.c:1:
+#include <linux/cpumask.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: kernel/cpuset.c:6:
+#include <asm/uaccess.h> $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#532: FILE: kernel/cpuset.c:6:
+#include <asm/uaccess.h> 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: kernel/cpuset.c:16:
+#define info(args...) do {} while(0) $

ERROR:SPACING: space required before the open parenthesis '('
#542: FILE: kernel/cpuset.c:16:
+#define info(args...) do {} while(0) 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: kernel/cpuset.c:19:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: kernel/cpuset.c:43:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#569: FILE: kernel/cpuset.c:43:
+
+	

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#574: FILE: kernel/cpuset.c:48:
+	info("cpusets ("__FILE__ " compiled " __DATE__ " " __TIME__ "initializing..\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#574: FILE: kernel/cpuset.c:48:
+	info("cpusets ("__FILE__ " compiled " __DATE__ " " __TIME__ "initializing..\n");

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#574: FILE: kernel/cpuset.c:48:
+	info("cpusets ("__FILE__ " compiled " __DATE__ " " __TIME__ "initializing..\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: kernel/cpuset.c:50:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: kernel/cpuset.c:53:
+#endif /* CONFIG_CPUSETS_PROC */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: kernel/cpuset.c:57:
+/*  $

WARNING:SPACING: space prohibited before semicolon
#591: FILE: kernel/cpuset.c:65:
+	top_cpuset.cpus_allowed =  cpu_online_map ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#594: FILE: kernel/cpuset.c:68:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#595: FILE: kernel/cpuset.c:69:
+static const int N = (8*sizeof(cpumask_t));
                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#598: FILE: kernel/cpuset.c:72:
+static inline void _next_cpu(const cpumask_t mask, int * index)

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: kernel/cpuset.c:74:
+	for(;;) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#601: FILE: kernel/cpuset.c:75:
+		if (++*index >= N) *index = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#602: FILE: kernel/cpuset.c:76:
+		if (cpu_isset(*index, mask)) return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: kernel/cpuset.c:79:
+^I^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#617: FILE: kernel/cpuset.c:91:
+	if (cpus_empty(wanted)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#618: FILE: kernel/cpuset.c:92:
+	if (cpus_empty(allowed)) return 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#622: FILE: kernel/cpuset.c:96:
+	for(i=0; i < N; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#622: FILE: kernel/cpuset.c:96:
+	for(i=0; i < N; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: kernel/cpuset.c:98:
+^I^Iif (cpu_isset(i, wanted)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: kernel/cpuset.c:101:
+^Iinfo("cpuset_combine_mask: %016lx + %016lx --> %016lx\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpuset_combine_mask', this function's name, in a string
#627: FILE: kernel/cpuset.c:101:
+	info("cpuset_combine_mask: %016lx + %016lx --> %016lx\n", 

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: kernel/cpuset.c:102:
+^I^I^I^Iwanted, allowed, mask); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: kernel/cpuset.c:102:
+	info("cpuset_combine_mask: %016lx + %016lx --> %016lx\n", 
+				wanted, allowed, mask); 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: kernel/cpuset.c:109:
+int cpuset_realtologic_cpuid(struct cpuset * cs, int cpuid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: kernel/cpuset.c:113:
+	int l = 0;
+	for(i=0; i < NR_CPUS; i++)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#639: FILE: kernel/cpuset.c:113:
+	for(i=0; i < NR_CPUS; i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#639: FILE: kernel/cpuset.c:113:
+	for(i=0; i < NR_CPUS; i++)
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: kernel/cpuset.c:113:
+	for(i=0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#639: FILE: kernel/cpuset.c:113:
+	for(i=0; i < NR_CPUS; i++)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#641: FILE: kernel/cpuset.c:115:
+		if (i == cpuid) return l;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: kernel/cpuset.c:120:
+^IBUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#646: FILE: kernel/cpuset.c:120:
+	BUG(); 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: kernel/cpuset.c:124:
+static struct cpuset * find_cpuset_by_id(cpuset_t id)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: kernel/cpuset.c:126:
+	struct cpuset * cs;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: kernel/cpuset.c:127:
+^Iif (id == CPUSET_TOP_ID) return &top_cpuset; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#653: FILE: kernel/cpuset.c:127:
+	struct cpuset * cs;
+	if (id == CPUSET_TOP_ID) return &top_cpuset; 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#653: FILE: kernel/cpuset.c:127:
+	if (id == CPUSET_TOP_ID) return &top_cpuset; 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#656: FILE: kernel/cpuset.c:130:
+		if (cs->id == id) return cs;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#663: FILE: kernel/cpuset.c:137:
+void use_cpuset(struct cpuset * cs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#672: FILE: kernel/cpuset.c:146:
+void release_cpuset(struct cpuset * cs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: kernel/cpuset.c:148:
+^Iif (atomic_dec_and_test(&cs->count))^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#683: FILE: kernel/cpuset.c:157:
+	while (find_cpuset_by_id(++curid));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#688: FILE: kernel/cpuset.c:162:
+asmlinkage long sys_cpuset_create(cpuset_t * cpusetp, int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: kernel/cpuset.c:164:
+^Istruct cpuset * cs;^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#690: FILE: kernel/cpuset.c:164:
+	struct cpuset * cs;		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: kernel/cpuset.c:165:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: kernel/cpuset.c:166:
+^Iinfo("sys_cpuset_create(%016lx, %d) called\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_cpuset_create', this function's name, in a string
#692: FILE: kernel/cpuset.c:166:
+	info("sys_cpuset_create(%016lx, %d) called\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: kernel/cpuset.c:167:
+	info("sys_cpuset_create(%016lx, %d) called\n", 
+		(unsigned long) cpusetp, flags);

CHECK:SPACING: No space is necessary after a cast
#693: FILE: kernel/cpuset.c:167:
+		(unsigned long) cpusetp, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: kernel/cpuset.c:170:
+^Iif ((flags & CPUSET_STRICT) && (!(current->cpuset->flags & CPUSET_STRICT)))^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#700: FILE: kernel/cpuset.c:174:
+^Iif (verify_area(VERIFY_WRITE, cpusetp, sizeof(cpuset_t))) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: kernel/cpuset.c:176:
+^I$

CHECK:SPACING: No space is necessary after a cast
#703: FILE: kernel/cpuset.c:177:
+	cs = (struct cpuset *) kmalloc(sizeof(struct cpuset), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#703: FILE: kernel/cpuset.c:177:
+	cs = (struct cpuset *) kmalloc(sizeof(struct cpuset), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cs)...) over kmalloc(sizeof(struct cpuset)...)
#703: FILE: kernel/cpuset.c:177:
+	cs = (struct cpuset *) kmalloc(sizeof(struct cpuset), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: kernel/cpuset.c:184:
+^Ics->cpus_allowed = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: kernel/cpuset.c:191:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: kernel/cpuset.c:195:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: kernel/cpuset.c:196:
+^Iwrite_lock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: kernel/cpuset.c:197:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#727: FILE: kernel/cpuset.c:201:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: kernel/cpuset.c:210:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: kernel/cpuset.c:211:
+static inline int bad_permission(struct cpuset * cs) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#737: FILE: kernel/cpuset.c:211:
+static inline int bad_permission(struct cpuset * cs) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#742: FILE: kernel/cpuset.c:216:
+static void __cpuset_destroy(struct cpuset * cs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: kernel/cpuset.c:218:
+asmlinkage long sys_cpuset_destroy(cpuset_t cpuset) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#746: FILE: kernel/cpuset.c:220:
+	struct cpuset * cs;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_cpuset_destroy', this function's name, in a string
#748: FILE: kernel/cpuset.c:222:
+	info("sys_cpuset_destroy(%d) called\n", cpuset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: kernel/cpuset.c:227:
+^Iread_lock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: kernel/cpuset.c:229:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: kernel/cpuset.c:231:
+^I^Iread_unlock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: kernel/cpuset.c:236:
+^Iread_unlock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: kernel/cpuset.c:237:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/cpuset.c:244:
+^I/* there's at least 1 user (us), if there's more, we can't destroy cs */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: kernel/cpuset.c:247:
+^I^Irelease_cpuset(cs);^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#784: FILE: kernel/cpuset.c:258:
+static void rebuild_reserved_masks(struct cpuset * csp) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#784: FILE: kernel/cpuset.c:258:
+static void rebuild_reserved_masks(struct cpuset * csp) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#787: FILE: kernel/cpuset.c:261:
+	struct cpuset * cs;

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: kernel/cpuset.c:262:
+	struct cpuset * cs;
+	info("Updating cpuset %d masks\n", csp->id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: kernel/cpuset.c:277:
+/* REALLY destroy a cpuset $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: kernel/cpuset.c:278:
+ * NOTE: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: kernel/cpuset.c:279:
+ * -> write cpuset_lock must be held $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: kernel/cpuset.c:283:
+static void __cpuset_destroy(struct cpuset * cs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#811: FILE: kernel/cpuset.c:285:
+        list_del(&cs->list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: kernel/cpuset.c:285:
+        list_del(&cs->list);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: kernel/cpuset.c:287:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: kernel/cpuset.c:289:
+^Irebuild_reserved_masks(cs->parent); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: kernel/cpuset.c:296:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#824: FILE: kernel/cpuset.c:298:
+static void check_cpuset_autoclean(struct cpuset * cs)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#826: FILE: kernel/cpuset.c:300:
+	if (!(cs->flags & CPUSET_AUTOCLEAN)) return; /* not autoclean */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: kernel/cpuset.c:301:
+^Iif (!cs->has_been_attached) return;^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#827: FILE: kernel/cpuset.c:301:
+	if (!cs->has_been_attached) return;	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: kernel/cpuset.c:307:
+^I^Ireturn; $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#844: FILE: kernel/cpuset.c:318:
+	struct cpuset * cs;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: kernel/cpuset.c:319:
+	struct task_struct * task;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: kernel/cpuset.c:320:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_cpuset_attach', this function's name, in a string
#847: FILE: kernel/cpuset.c:321:
+	info("sys_cpuset_attach(%d, %d) called\n", cpuset, pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#849: FILE: kernel/cpuset.c:323:
+^Iread_lock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: kernel/cpuset.c:327:
+^I^Iread_unlock(&cpuset_lock); $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#857: FILE: kernel/cpuset.c:331:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: kernel/cpuset.c:334:
+^Iread_unlock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#861: FILE: kernel/cpuset.c:335:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: kernel/cpuset.c:346:
+^Iif (pid) {^I$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#885: FILE: kernel/cpuset.c:359:
+		if ((current->euid) && (current->euid != task->uid) && (current->euid != task->suid)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#885: FILE: kernel/cpuset.c:359:
+		if ((current->euid) && (current->euid != task->uid) && (current->euid != task->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->uid'
#885: FILE: kernel/cpuset.c:359:
+		if ((current->euid) && (current->euid != task->uid) && (current->euid != task->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->suid'
#885: FILE: kernel/cpuset.c:359:
+		if ((current->euid) && (current->euid != task->uid) && (current->euid != task->suid)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#891: FILE: kernel/cpuset.c:365:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#891: FILE: kernel/cpuset.c:365:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: kernel/cpuset.c:374:
+^I/* lock to prevent a race where two cpuset_attach would be called on the same $

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: kernel/cpuset.c:376:
+         */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: kernel/cpuset.c:378:
+^Iif (!task->cpuset) { /* task with no cpuset ? means it is exiting */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#909: FILE: kernel/cpuset.c:383:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: kernel/cpuset.c:393:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#920: FILE: kernel/cpuset.c:394:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: kernel/cpuset.c:397:
+^I/* don't call release_cpuset here, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#924: FILE: kernel/cpuset.c:398:
+^I * the task being attached to the cpuset $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#931: FILE: kernel/cpuset.c:405:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#931: FILE: kernel/cpuset.c:405:
+
+		

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#932: FILE: kernel/cpuset.c:406:
+static int __cpuset_setaffinity(struct task_struct * task)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: kernel/cpuset.c:415:
+^Ifor(;;) {^I$

ERROR:SPACING: space required before the open parenthesis '('
#941: FILE: kernel/cpuset.c:415:
+	for(;;) {	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#951: FILE: kernel/cpuset.c:425:
+^I^Iif (last == allowed) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: kernel/cpuset.c:429:
+		int ret;
+		ret = set_cpus_allowed(task, cpuset_combine_mask(task->cpus_wanted, allowed));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: kernel/cpuset.c:430:
+^I^Iif (ret < 0) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#964: FILE: kernel/cpuset.c:438:
+int cpuset_setaffinity(struct task_struct * task, cpumask_t mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#973: FILE: kernel/cpuset.c:447:
+static void migrate_cpuset_processes(struct cpuset * cs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#974: FILE: kernel/cpuset.c:448:
+{^I^I$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#987: FILE: kernel/cpuset.c:461:
+	struct task_struct ** array;

CHECK:SPACING: No space is necessary after a cast
#994: FILE: kernel/cpuset.c:468:
+	array = (struct task_struct **) kmalloc(sz * sizeof(struct task_struct *), GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#994: FILE: kernel/cpuset.c:468:
+	array = (struct task_struct **) kmalloc(sz * sizeof(struct task_struct *), GFP_ATOMIC);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#994: FILE: kernel/cpuset.c:468:
+	array = (struct task_struct **) kmalloc(sz * sizeof(struct task_struct *), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: kernel/cpuset.c:471:
+		printk("Error allocating array in migrate_cpuset_processes !\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'migrate_cpuset_processes', this function's name, in a string
#997: FILE: kernel/cpuset.c:471:
+		printk("Error allocating array in migrate_cpuset_processes !\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1005: FILE: kernel/cpuset.c:479:
+				printk("migrate_cpuset_processes: array full !\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'migrate_cpuset_processes', this function's name, in a string
#1005: FILE: kernel/cpuset.c:479:
+				printk("migrate_cpuset_processes: array full !\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1011: FILE: kernel/cpuset.c:485:
+^I} while_each_thread(g, p); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1012: FILE: kernel/cpuset.c:486:
+end_loop:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1015: FILE: kernel/cpuset.c:489:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: kernel/cpuset.c:490:
+	while(nb) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: kernel/cpuset.c:491:
+^I^Istruct task_struct * p = array[--nb];^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1017: FILE: kernel/cpuset.c:491:
+		struct task_struct * p = array[--nb];	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1018: FILE: kernel/cpuset.c:492:
+^I^I__cpuset_setaffinity(p); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1018: FILE: kernel/cpuset.c:492:
+		struct task_struct * p = array[--nb];	
+		__cpuset_setaffinity(p); 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1024: FILE: kernel/cpuset.c:498:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1031: FILE: kernel/cpuset.c:505:
+	cpumask_t r;
+	cpus_or(r, a, b);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1044: FILE: kernel/cpuset.c:518:
+	cpumask_t r;
+	cpus_or(r, a, b);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1051: FILE: kernel/cpuset.c:525:
+	cpumask_t r;
+	cpus_and(r, a, b);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1055: FILE: kernel/cpuset.c:529:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1056: FILE: kernel/cpuset.c:530:
+asmlinkage long sys_cpuset_alloc(cpuset_t cpuset, int len, unsigned long * user_mask_ptr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1060: FILE: kernel/cpuset.c:534:
+	struct cpuset * cs ;

WARNING:SPACING: space prohibited before semicolon
#1060: FILE: kernel/cpuset.c:534:
+	struct cpuset * cs ;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_cpuset_alloc', this function's name, in a string
#1063: FILE: kernel/cpuset.c:537:
+	info("sys_cpuset_alloc(%d, ...) called\n", cpuset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: kernel/cpuset.c:556:
+^I * in the parent's mask $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1083: FILE: kernel/cpuset.c:557:
+	 * (just some overhead in a _really_ rare case) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: kernel/cpuset.c:558:
+#if 0^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1084: FILE: kernel/cpuset.c:558:
+#if 0	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: kernel/cpuset.c:563:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: kernel/cpuset.c:566:
+^Iread_lock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1094: FILE: kernel/cpuset.c:568:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1095: FILE: kernel/cpuset.c:569:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1095: FILE: kernel/cpuset.c:569:
+	
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1097: FILE: kernel/cpuset.c:571:
+^I^Iread_unlock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: kernel/cpuset.c:574:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1102: FILE: kernel/cpuset.c:576:
+^Iread_unlock(&cpuset_lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: kernel/cpuset.c:582:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: kernel/cpuset.c:587:
+^Iif (!MASK_INCLUDED(cs->parent->cpus_allowed, new_mask)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: kernel/cpuset.c:589:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1123: FILE: kernel/cpuset.c:597:
+^I^I * if (!MASK_INCLUDED(~cs->parent->cpus_reserved, new_mask & (~old_mask))) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1126: FILE: kernel/cpuset.c:600:
+^I^Iif (!MASK_INCLUDED(CPUS_NOT(cs->parent->cpus_reserved), $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1130: FILE: kernel/cpuset.c:604:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1130: FILE: kernel/cpuset.c:604:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1135: FILE: kernel/cpuset.c:609:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: kernel/cpuset.c:610:
+^I/* are we trying to FREE reserved CPUs $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1138: FILE: kernel/cpuset.c:612:
+	 * from a non-unused cpuset ? */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1146: FILE: kernel/cpuset.c:620:
+^Iwrite_unlock(&cpuset_lock); $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1149: FILE: kernel/cpuset.c:623:
+	if ((atomic_read(&cs->count) > 1) && !cpus_equal(new_mask, old_mask)) {
+		migrate_cpuset_processes(cs);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1157: FILE: kernel/cpuset.c:631:
+^Iwrite_unlock(&cpuset_lock); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1162: FILE: kernel/cpuset.c:636:
+asmlinkage long sys_cpuset_getfreecpus(int flags, int len, unsigned long * user_mask_ptr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1168: FILE: kernel/cpuset.c:642:
+	int real_len = sizeof(unsigned long);
+	if (len < real_len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1170: FILE: kernel/cpuset.c:644:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: kernel/cpuset.c:647:
+^Ielse^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: kernel/cpuset.c:666:
+        loff_t n = *pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: kernel/cpuset.c:666:
+        loff_t n = *pos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: kernel/cpuset.c:667:
+        struct list_head *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: kernel/cpuset.c:667:
+        struct list_head *p;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: kernel/cpuset.c:669:
+^Iread_lock(&cpuset_lock); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1196: FILE: kernel/cpuset.c:670:
+        if (!n) seq_puts(m, "cpusets info \n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: kernel/cpuset.c:670:
+        if (!n) seq_puts(m, "cpusets info \n");$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1196: FILE: kernel/cpuset.c:670:
+        if (!n) seq_puts(m, "cpusets info \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1196: FILE: kernel/cpuset.c:670:
+        if (!n) seq_puts(m, "cpusets info \n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: kernel/cpuset.c:671:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: kernel/cpuset.c:671:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: kernel/cpuset.c:671:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1199: FILE: kernel/cpuset.c:673:
+        while (n--) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: kernel/cpuset.c:673:
+        while (n--) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1200: FILE: kernel/cpuset.c:674:
+                p = p->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: kernel/cpuset.c:674:
+                p = p->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1201: FILE: kernel/cpuset.c:675:
+                if (p == &top_cpuset.list)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: kernel/cpuset.c:675:
+                if (p == &top_cpuset.list)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1202: FILE: kernel/cpuset.c:676:
+                        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: kernel/cpuset.c:676:
+                        return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1203: FILE: kernel/cpuset.c:677:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: kernel/cpuset.c:677:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1204: FILE: kernel/cpuset.c:678:
+        return list_entry(p, struct cpuset, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: kernel/cpuset.c:678:
+        return list_entry(p, struct cpuset, list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1209: FILE: kernel/cpuset.c:683:
+        struct cpuset * cs = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: kernel/cpuset.c:683:
+        struct cpuset * cs = p;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1209: FILE: kernel/cpuset.c:683:
+        struct cpuset * cs = p;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: kernel/cpuset.c:684:
+        ++*pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: kernel/cpuset.c:684:
+        ++*pos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1211: FILE: kernel/cpuset.c:685:
+        return cs->list.next == &top_cpuset.list ? NULL$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: kernel/cpuset.c:685:
+        return cs->list.next == &top_cpuset.list ? NULL$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1212: FILE: kernel/cpuset.c:686:
+                : list_entry(cs->list.next, struct cpuset, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: kernel/cpuset.c:686:
+                : list_entry(cs->list.next, struct cpuset, list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: kernel/cpuset.c:690:
+#define CHARS_FOR_LONG ^I(BITS_PER_LONG / 4)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1217: FILE: kernel/cpuset.c:691:
+#define CFL ^I^ICHARS_FOR_LONG$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1218: FILE: kernel/cpuset.c:692:
+static void sprint_mask(char * buf, cpumask_t mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: kernel/cpuset.c:694:
+#ifdef CPU_ARRAY_SIZE^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1222: FILE: kernel/cpuset.c:696:
+	int l;
+	for (l = CPU_ARRAY_SIZE - 1; l>=0; l--) {

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1222: FILE: kernel/cpuset.c:696:
+	for (l = CPU_ARRAY_SIZE - 1; l>=0; l--) {
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: kernel/cpuset.c:706:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1233: FILE: kernel/cpuset.c:707:
+		
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1236: FILE: kernel/cpuset.c:710:
+        struct cpuset * cs = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: kernel/cpuset.c:710:
+        struct cpuset * cs = p;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: kernel/cpuset.c:710:
+        struct cpuset * cs = p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: kernel/cpuset.c:723:
+^I^Ics->id, cs->parent ? cs->parent->id : -1, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1254: FILE: kernel/cpuset.c:728:
+	seq_printf(m,"\tcpus_allowed = %s\n", maskbuf);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1256: FILE: kernel/cpuset.c:730:
+	seq_printf(m,"\tcpus_reserved = %s\n", maskbuf);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1258: FILE: kernel/cpuset.c:732:
+	seq_printf(m,"\tcpus_strictly_reserved = %s\n", maskbuf);
 	            ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1260: FILE: kernel/cpuset.c:734:
+	seq_printf(m, "}\n\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1270: FILE: kernel/cpuset.c:744:
+static struct seq_operations cpusets_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1277: FILE: kernel/cpuset.c:751:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1283: FILE: kernel/cpuset.c:757:
+static struct file_operations proc_cpusets_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: kernel/cpuset.c:764:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: kernel/cpuset.c:784:
+#endif /* CONFIG_CPUSETS_PROC */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1319: FILE: kernel/exit.c:57:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1319: FILE: kernel/exit.c:57:
  
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1320: FILE: kernel/exit.c:58:
+#ifdef CONFIG_CPUSETS^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1324: FILE: kernel/exit.c:62:
+^I/* mark that this process's cpuset has already been released $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1327: FILE: kernel/exit.c:65:
+^Ip->cpuset = NULL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: kernel/exit.c:67:
+#endif /* CONFIG_CPUSETS */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1330: FILE: kernel/exit.c:68:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1331: FILE: kernel/exit.c:69:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1362: FILE: kernel/fork.c:1043:
+#ifdef CONFIG_CPUSETS^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1364: FILE: kernel/fork.c:1045:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1376: FILE: kernel/sched.c:41:
+#ifdef CONFIG_CPUSETS^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: kernel/sched.c:2210:
+#ifdef CONFIG_CPUSETS $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328564.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 216 errors, 81 warnings, 39 checks, 1279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328564.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
