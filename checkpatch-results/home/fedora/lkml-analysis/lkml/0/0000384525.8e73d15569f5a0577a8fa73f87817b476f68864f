CHECK:CAMELCASE: Avoid CamelCase: <PatchSet>
#50: FILE: cvsps.c:117:
+static int patch_set_contains_member(PatchSet *, regex_t);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#59: FILE: cvsps.c:569:
+	    if ((err = regcomp(&restrict_log, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#59: FILE: cvsps.c:569:
+	    if ((err = regcomp(&restrict_log, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#59: FILE: cvsps.c:569:
+	    if ((err = regcomp(&restrict_log, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TABSTOP: Statements should start on a tabstop
#67: FILE: cvsps.c:583:
+	    int err;

WARNING:TABSTOP: Statements should start on a tabstop
#73: FILE: cvsps.c:588:
+	    if ((err = regcomp(&restrict_file, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#73: FILE: cvsps.c:588:
+	    if ((err = regcomp(&restrict_file, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)
+	    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#73: FILE: cvsps.c:588:
+	    if ((err = regcomp(&restrict_file, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)
 	                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#73: FILE: cvsps.c:588:
+	    if ((err = regcomp(&restrict_file, argv[i++], REG_NOSUB|REG_EXTENDED)) != 0)

WARNING:TABSTOP: Statements should start on a tabstop
#74: FILE: cvsps.c:589:
+	    {

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: cvsps.c:591:
+		char errbuf[256];
+		regerror(err, &restrict_file, errbuf, 256);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#78: FILE: cvsps.c:593:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: cvsps.c:1099:
+    if (have_restrict_file && !patch_set_contains_member(ps, restrict_file))$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: cvsps.c:1346:
+static int patch_set_contains_member(PatchSet * ps, regex_t restrict_file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#108: FILE: cvsps.c:1354:
+	if (!regexec(&restrict_file, psm->file->filename, 0, NULL, 0))
 	    return 1;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#170: FILE: drivers/net/pci-skeleton.c:1352:
+	/* If we don't have auto-pad remember not to send random
+	   memory! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: drivers/net/pci-skeleton.c:1352:
+	   memory! */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: drivers/net/pci-skeleton.c:1353:
+^I   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#172: FILE: drivers/net/pci-skeleton.c:1354:
+	if (skb->len < ETH_ZLEN)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#175: FILE: drivers/net/pci-skeleton.c:1357:
+		if(skb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#175: FILE: drivers/net/pci-skeleton.c:1357:
+		if(skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: drivers/net/pci-skeleton.c:1360:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: fs/ext2/inode.c:884:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: fs/ext2/inode.c:884:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: fs/ext2/inode.c:884:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#373: FILE: fs/ext3/inode.c:2075:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#373: FILE: fs/ext3/inode.c:2075:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#373: FILE: fs/ext3/inode.c:2075:
+	inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME);
 	                                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#384: FILE: fs/ext3/inode.c:2086:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/ext2_fs.h:590:
+extern void ext2_set_inode_flags(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#461: FILE: include/linux/ext3_fs.h:645:
+extern void ext3_set_inode_flags(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#461: FILE: include/linux/ext3_fs.h:645:
+extern void ext3_set_inode_flags(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 11 warnings, 13 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
