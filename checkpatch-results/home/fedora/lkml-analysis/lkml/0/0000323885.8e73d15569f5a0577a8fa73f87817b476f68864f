WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.6/2.6.0-test9/2.6.0-test9-mm4/

WARNING:TYPO_SPELLING: 'cacheing' may be misspelled - perhaps 'caching'?
#50: 
cacheing. The a priori benefits are cache conservation, and the motive
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: arch/i386/mm/pgtable.c:145:
+	int cpu;
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#84: FILE: arch/i386/mm/pgtable.c:145:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: arch/i386/mm/pgtable.c:148:
+		struct mmu_gather *tlb = &per_cpu(mmu_gathers, cpu);
+		for (zone = 0; zone < MAX_ZONE_ID; ++zone) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: arch/i386/mm/pgtable.c:158:
+	struct page *page = alloc_page(gfp_mask);
+	if (page) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: arch/i386/mm/pgtable.c:161:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: arch/i386/mm/pgtable.c:183:
+		int z;
+		for (z = MAX_ZONE_ID - 1; z >= 0; --z) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: arch/i386/mm/pgtable.c:185:
+			struct zone *zone = zone_table[z];
+			if (!(gfp_flags & __GFP_HIGHMEM) && zone_high(zone))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: arch/i386/mm/pgtable.c:192:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: arch/i386/mm/pgtable.c:205:
+	struct page *page = pte_alloc_ready(GFP_PTE);
+	return page ? page : pte_alloc_fresh(GFP_PTE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#211: FILE: arch/i386/mm/pgtable.c:426:
+	BUG_ON(irqs_disabled());

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: include/asm-i386/pgalloc.h:51:
+	struct mmu_gather *tlb = &per_cpu(mmu_gathers, get_cpu());
+	tlb_remove_page(tlb, page);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#293: FILE: include/asm-i386/system.h:470:
+#define smp_local_irq_save(x)		do { (void)(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#294: FILE: include/asm-i386/system.h:471:
+#define smp_local_irq_restore(x)	do { (void)(x); } while (0)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#309: FILE: include/asm-i386/tlb.h:4:
+ * include/asm-i386/tlb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'cacheing' may be misspelled - perhaps 'caching'?
#311: FILE: include/asm-i386/tlb.h:6:
+ * Routines for pagetable cacheing and release.
                           ^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#323: FILE: include/asm-i386/tlb.h:18:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT|__GFP_HIGHMEM)
                			           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#323: FILE: include/asm-i386/tlb.h:18:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT|__GFP_HIGHMEM)
                			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#325: FILE: include/asm-i386/tlb.h:20:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT)
                			           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: include/asm-i386/tlb.h:66:
+	struct mmu_gather *tlb = &per_cpu(mmu_gathers, get_cpu());
+	tlb->mm = mm;

WARNING:LINE_SPACING: Missing a blank line after declarations
#461: FILE: include/asm-i386/tlb.h:155:
+	int zone = PageZoneID(page);
+	ClearPagePTE(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: mm/page_alloc.c:242:
+int free_pages_bulk(struct zone *zone, int count,
 		struct list_head *list, unsigned int order)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 19 warnings, 4 checks, 441 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
