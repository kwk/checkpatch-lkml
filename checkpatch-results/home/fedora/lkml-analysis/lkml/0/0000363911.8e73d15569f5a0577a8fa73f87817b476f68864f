WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#110: 
diff -urNp --exclude CVS --exclude BitKeeper xx-ref/drivers/block/ll_rw_blk.c xx/drivers/block/ll_rw_blk.c

WARNING:MEMORY_BARRIER: memory barrier without comment
#162: FILE: drivers/block/ll_rw_blk.c:858:
+			smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#163: FILE: drivers/block/ll_rw_blk.c:859:
+			if (waitqueue_active(&q->wait_for_requests[rw]))

WARNING:TYPO_SPELLING: 'suprious' may be misspelled - perhaps 'spurious'?
#236: FILE: fs/buffer.c:172:
+		 * don't do a suprious unplug if we get a racy
 		              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: fs/buffer.c:1487:
+	BUG_ON(page_count(page) < 3);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#275: FILE: fs/buffer.c:1742:
+	BUG_ON(page_count(page) < 3);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: fs/buffer.c:2424:
+	BUG_ON(page_count(page) < 3);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: include/linux/pagemap.h:101:
+extern void FASTCALL(wakeup_page_waiters(struct page * page));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/pagemap.h:101:
+extern void FASTCALL(wakeup_page_waiters(struct page * page));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#350: FILE: mm/filemap.c:787:
+void wakeup_page_waiters(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: mm/filemap.c:789:
+	wait_queue_head_t * head;

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#355: FILE: mm/filemap.c:792:
+	if (waitqueue_active(head))

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_DriverVersion>
#391: FILE: drivers/block/DAC960.c:22:
+#define DAC960_DriverVersion			"2.4.20aa1"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_DriverDate>
#392: FILE: drivers/block/DAC960.c:23:
+#define DAC960_DriverDate			"4 December 2002"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/block/DAC960.c:2978:
+  Command->Request = Request;$

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#400: FILE: drivers/block/DAC960.c:2978:
+  Command->Request = Request;

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#400: FILE: drivers/block/DAC960.c:2978:
+  Command->Request = Request;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcessCompletedBuffer>
#412: FILE: drivers/block/DAC960.c:3027:
+static inline void DAC960_ProcessCompletedBuffer(IO_Request_T *Req, BufferHeader_T *BufferHeader,

CHECK:CAMELCASE: Avoid CamelCase: <Req>
#412: FILE: drivers/block/DAC960.c:3027:
+static inline void DAC960_ProcessCompletedBuffer(IO_Request_T *Req, BufferHeader_T *BufferHeader,

CHECK:CAMELCASE: Avoid CamelCase: <BufferHeader_T>
#412: FILE: drivers/block/DAC960.c:3027:
+static inline void DAC960_ProcessCompletedBuffer(IO_Request_T *Req, BufferHeader_T *BufferHeader,

CHECK:CAMELCASE: Avoid CamelCase: <BufferHeader>
#412: FILE: drivers/block/DAC960.c:3027:
+static inline void DAC960_ProcessCompletedBuffer(IO_Request_T *Req, BufferHeader_T *BufferHeader,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: drivers/block/DAC960.c:3030:
+  blk_finished_io(Req, BufferHeader->b_size >> 9);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: drivers/block/DAC960.c:3032:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/block/DAC960.c:3032:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: drivers/block/DAC960.c:3124:
+  ^I  blkdev_release_request(Command->Request);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: drivers/block/DAC960.c:3124:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: drivers/block/DAC960.c:3124:
+  ^I  blkdev_release_request(Command->Request);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: drivers/block/DAC960.c:3175:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: drivers/block/DAC960.c:3175:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/block/DAC960.c:3175:
+  ^I  blkdev_release_request(Command->Request);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: drivers/block/DAC960.c:3210:
+        blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: drivers/block/DAC960.c:3210:
+        blkdev_release_request(Command->Request);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: drivers/block/DAC960.c:4233:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: drivers/block/DAC960.c:4233:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: drivers/block/DAC960.c:4233:
+  ^I  blkdev_release_request(Command->Request);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: drivers/block/DAC960.c:4279:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: drivers/block/DAC960.c:4279:
+  ^I  blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/block/DAC960.c:4279:
+  ^I  blkdev_release_request(Command->Request);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: drivers/block/DAC960.c:4329:
+        blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: drivers/block/DAC960.c:4329:
+        blkdev_release_request(Command->Request);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/block/DAC960.h:2285:
+  IO_Request_T *Request;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: drivers/block/cciss.c:1993:
+static inline void complete_buffers(struct request * req, struct buffer_head *bh, int status)

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: drivers/block/cciss.c:2227:
+                complete_buffers(creq, creq->bh, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: drivers/block/cciss.c:2227:
+                complete_buffers(creq, creq->bh, 0);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: drivers/block/cpqarray.c:172:
+static inline void complete_buffers(struct request * req, struct buffer_head *bh, int ok);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#609: FILE: drivers/block/cpqarray.c:1085:
+static inline void complete_buffers(struct request * req, struct buffer_head *bh, int ok)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: drivers/block/ll_rw_blk.c:191:
+		printk("blk_cleanup_queue: leaked sectors (%d)\n", atomic_read(&q->nr_sectors));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blk_cleanup_queue', this function's name, in a string
#644: FILE: drivers/block/ll_rw_blk.c:191:
+		printk("blk_cleanup_queue: leaked sectors (%d)\n", atomic_read(&q->nr_sectors));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: drivers/block/ll_rw_blk.c:420:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#688: FILE: drivers/block/ll_rw_blk.c:433:
+	BUG_ON(!q->batch_sectors);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#719: FILE: drivers/block/ll_rw_blk.c:457:
+	BUG_ON(!nr_requests);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#720: FILE: drivers/block/ll_rw_blk.c:458:
+	BUG_ON(!max_queue_sectors);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#734: FILE: drivers/block/ll_rw_blk.c:531:
+static struct request * FASTCALL(get_request(request_queue_t *q, int rw));

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#814: FILE: drivers/block/ll_rw_blk.c:668:
+	if (waitqueue_active(&q->wait_for_requests))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#840: FILE: drivers/block/ll_rw_blk.c:899:
+			if (waitqueue_active(&q->wait_for_requests))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#986: FILE: include/linux/blkdev.h:240:
+extern int blk_grow_request_list(request_queue_t *q, int nr_requests, int max_queue_sectors);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1005: FILE: include/linux/blkdev.h:292:
+static inline int blk_oversized_queue(request_queue_t * q)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1010: FILE: include/linux/blkdev.h:297:
+static inline int blk_oversized_queue_batch(request_queue_t * q)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1015: FILE: include/linux/blkdev.h:302:
+static inline void blk_started_io(struct request * req, int nsects)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1017: FILE: include/linux/blkdev.h:304:
+	request_queue_t * q = req->q;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: include/linux/blkdev.h:308:
+	BUG_ON(atomic_read(&q->nr_sectors) < 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1024: FILE: include/linux/blkdev.h:311:
+static inline void blk_finished_io(struct request * req, int nsects)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1026: FILE: include/linux/blkdev.h:313:
+	request_queue_t * q = req->q;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1032: FILE: include/linux/blkdev.h:319:
+			smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1033: FILE: include/linux/blkdev.h:320:
+			if (waitqueue_active(&q->wait_for_requests))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: include/linux/blkdev.h:324:
+	BUG_ON(atomic_read(&q->nr_sectors) < 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363911.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 34 warnings, 10 checks, 844 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363911.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
