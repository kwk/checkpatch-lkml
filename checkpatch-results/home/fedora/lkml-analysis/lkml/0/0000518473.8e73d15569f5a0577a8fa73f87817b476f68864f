WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#28: 
> Linus refused to let make make the vmalloc helpers generic code, thats
                                                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'make'
#28: 
> Linus refused to let make make the vmalloc helpers generic code, thats

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: video-mm.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#61: FILE: video-mm.h:9:
+struct page* videomm_vmalloc_to_page(unsigned long virt);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#66: FILE: video-mm.h:14:
+struct scatterlist* videomm_vmalloc_to_sg(unsigned long virt, int nr_pages);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#71: FILE: video-mm.h:19:
+struct scatterlist* videomm_iobuf_to_sg(struct kiobuf *iobuf);

ERROR:POINTER_LOCATION: "foo*               *bar" should be "foo **bar"
#80: FILE: video-mm.h:28:
+	void*               *vmalloc;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: video-mm.c:1:
+#include <linux/pci.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#108: FILE: video-mm.c:6:
+#include <asm/pgtable.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: video-mm.c:17:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#125: FILE: video-mm.c:23:
+			if (pte_present(*pte)) {
+				ret = pte_page(*pte);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#140: FILE: video-mm.c:38:
+	sglist = kmalloc(sizeof(struct scatterlist)*nr_pages, GFP_KERNEL);
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sglist)...) over kmalloc(sizeof(struct scatterlist)...)
#140: FILE: video-mm.c:38:
+	sglist = kmalloc(sizeof(struct scatterlist)*nr_pages, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#140: FILE: video-mm.c:38:
+	sglist = kmalloc(sizeof(struct scatterlist)*nr_pages, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#141: FILE: video-mm.c:39:
+	if (NULL == sglist)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#143: FILE: video-mm.c:41:
+	memset(sglist,0,sizeof(struct scatterlist)*nr_pages);
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#143: FILE: video-mm.c:41:
+	memset(sglist,0,sizeof(struct scatterlist)*nr_pages);
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#143: FILE: video-mm.c:41:
+	memset(sglist,0,sizeof(struct scatterlist)*nr_pages);
 	                                          ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#146: FILE: video-mm.c:44:
+		if (NULL == pg)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: video-mm.c:50:
+^I$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#158: FILE: video-mm.c:56:
+#if 1

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#163: FILE: video-mm.c:61:
+# if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sglist)...) over kmalloc(sizeof(struct scatterlist)...)
#176: FILE: video-mm.c:74:
+	sglist = kmalloc(sizeof(struct scatterlist) * iobuf->nr_pages,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#176: FILE: video-mm.c:74:
+	sglist = kmalloc(sizeof(struct scatterlist) * iobuf->nr_pages,
+			 GFP_KERNEL);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#178: FILE: video-mm.c:76:
+	if (NULL == sglist)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: video-mm.c:78:
+	memset(sglist,0,sizeof(struct scatterlist) * iobuf->nr_pages);
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: video-mm.c:78:
+	memset(sglist,0,sizeof(struct scatterlist) * iobuf->nr_pages);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#208: FILE: video-mm.c:106:
+	if (0 != (err = alloc_kiovec(1,&vbuf->iobuf)))
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#208: FILE: video-mm.c:106:
+	if (0 != (err = alloc_kiovec(1,&vbuf->iobuf)))
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: video-mm.c:106:
+	if (0 != (err = alloc_kiovec(1,&vbuf->iobuf)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#210: FILE: video-mm.c:108:
+	if (0 != (err = map_user_kiobuf(READ, vbuf->iobuf, data, size)))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#219: FILE: video-mm.c:117:
+	if (NULL == vbuf->vmalloc)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#229: FILE: video-mm.c:127:
+	if (0 == vbuf->nr_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: video-mm.c:128:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: video-mm.c:129:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#233: FILE: video-mm.c:131:
+		if (0 != (err = lock_kiovec(1,&vbuf->iobuf,1)))
 		                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#233: FILE: video-mm.c:131:
+		if (0 != (err = lock_kiovec(1,&vbuf->iobuf,1)))
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: video-mm.c:131:
+		if (0 != (err = lock_kiovec(1,&vbuf->iobuf,1)))
 		                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#233: FILE: video-mm.c:131:
+		if (0 != (err = lock_kiovec(1,&vbuf->iobuf,1)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: video-mm.c:137:
+			((unsigned long)vbuf->vmalloc,vbuf->nr_pages);
 			                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#241: FILE: video-mm.c:139:
+	if (NULL == vbuf->sglist)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: video-mm.c:141:
+	vbuf->sglen = pci_map_sg(dev,vbuf->sglist,vbuf->nr_pages,
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: video-mm.c:141:
+	vbuf->sglen = pci_map_sg(dev,vbuf->sglist,vbuf->nr_pages,
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: video-mm.c:149:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#253: FILE: video-mm.c:151:
+	pci_unmap_sg(dev,vbuf->sglist,vbuf->iobuf->nr_pages,
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#253: FILE: video-mm.c:151:
+	pci_unmap_sg(dev,vbuf->sglist,vbuf->iobuf->nr_pages,
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#259: FILE: video-mm.c:157:
+		unlock_kiovec(1,&vbuf->iobuf);
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#259: FILE: video-mm.c:157:
+		unlock_kiovec(1,&vbuf->iobuf);
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#266: FILE: video-mm.c:164:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#270: FILE: video-mm.c:168:
+		free_kiovec(1,&vbuf->iobuf);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#270: FILE: video-mm.c:168:
+		free_kiovec(1,&vbuf->iobuf);
 		              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: video-mm.c:178:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 18 warnings, 6 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
