WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
D: 5) Tasks are migrated, cpus_allowed broken if required (not kernel threads)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: drivers/scsi/scsi.c:1135:
+static int scsi_cpu_notify(struct notifier_block *self, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#258: FILE: drivers/scsi/scsi.c:1140:
+	switch(action) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#273: FILE: drivers/scsi/scsi.c:1155:
+static struct notifier_block __devinitdata scsi_cpu_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after scsi_cpu_nb
#273: FILE: drivers/scsi/scsi.c:1155:
+static struct notifier_block __devinitdata scsi_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: fs/buffer.c:3006:
+static int buffer_cpu_notify(struct notifier_block *self, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/buffer.c:3007:
+static int buffer_cpu_notify(struct notifier_block *self, 
+			      unsigned long action, void *hcpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#362: FILE: include/linux/cpu.h:66:
+}
+#define cpu_is_offline(cpu) unlikely(!cpu_online(cpu))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/interrupt.h:214:
+extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/sched.h:638:
+extern void migrate_all_tasks(void);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#448: FILE: kernel/cpu.c:27:
+	if ((ret = down_interruptible(&cpucontrol)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#473: FILE: kernel/cpu.c:51:
+			printk(KERN_WARNING "Task %s is on cpu %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#474: FILE: kernel/cpu.c:52:
+			printk(KERN_WARNING "Task %s is on cpu %d, "
+				"not dying\n", p->comm, cpu);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#480: FILE: kernel/cpu.c:58:
+ * cpu' with certain environment variables set.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#497: FILE: kernel/cpu.c:75:
+	envp [i++] = "HOME=/";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#498: FILE: kernel/cpu.c:76:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#499: FILE: kernel/cpu.c:77:
+	envp [i++] = cpu_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#500: FILE: kernel/cpu.c:78:
+	envp [i++] = action_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#501: FILE: kernel/cpu.c:79:
+	envp [i] = NULL;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#512: FILE: kernel/cpu.c:90:
+	if (any_online_cpu(mask) == NR_CPUS)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#527: FILE: kernel/cpu.c:105:
+	 * preemption disabled. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: kernel/cpu.c:107:
+	BUG_ON(cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: kernel/cpu.c:117:
+^Iif ((err = down_interruptible(&cpucontrol)) != 0) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#539: FILE: kernel/cpu.c:117:
+	if ((err = down_interruptible(&cpucontrol)) != 0) 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#544: FILE: kernel/cpu.c:122:
+	if ((err = cpu_down_check(cpu, oldmask)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#550: FILE: kernel/cpu.c:128:
+	if ((err = cpu_disable(cpu)) != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: kernel/cpu.c:132:
+           not running now). */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#554: FILE: kernel/cpu.c:132:
+	/* Move other tasks off to other CPUs (simple since they are
+           not running now). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: kernel/cpu.c:132:
+           not running now). */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: kernel/cpu.c:143:
+	BUG_ON(rc == NOTIFY_BAD);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#574: FILE: kernel/cpu.c:152:
+	BUG_ON(rc == NOTIFY_BAD);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#591: FILE: kernel/cpu.c:169:
 int __devinit cpu_up(unsigned int cpu)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#610: FILE: kernel/kmod.c:175:
+	/* As a kernel thread which was bound to a specific cpu,
+	   migrate_all_tasks wouldn't touch us.  Avoid running child

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#611: FILE: kernel/kmod.c:176:
+	   on dying CPU. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#643: FILE: kernel/kthread.c:52:
+	/* As a kernel thread which was bound to a specific cpu,
+	   migrate_all_tasks wouldn't touch us.  Avoid running on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#644: FILE: kernel/kthread.c:53:
+	   dying CPU. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: kernel/rcupdate.c:193:
+^I^I * CPU will start a new batch anyway for $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#749: FILE: kernel/sched.c:732:
 	if (unlikely(!cpu_isset(this_cpu, p->cpus_allowed)
+		     || task_running(rq, p)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#750: FILE: kernel/sched.c:733:
+		     || task_running(rq, p)
+		     || cpu_is_offline(this_cpu)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#876: FILE: kernel/sched.c:3148:
+ * cpu via set_cpus_allowed  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#894: FILE: kernel/sched.c:3166:
+		cpumask_t mask;
+		if (tsk == current)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#903: FILE: kernel/sched.c:3175:
+		 * one online cpu will be migrated. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#907: FILE: kernel/sched.c:3179:
+		if (dest_cpu == NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#909: FILE: kernel/sched.c:3181:
+		if (dest_cpu == NR_CPUS) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#913: FILE: kernel/sched.c:3185:
+			 * can have mm NULL too. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk->mm"
#914: FILE: kernel/sched.c:3186:
+			if (tsk->mm == NULL && !(tsk->flags & PF_EXITING))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#922: FILE: kernel/sched.c:3194:
+			/* Don't tell them about moving exiting tasks,
+			   since they never leave kernel. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#922: FILE: kernel/sched.c:3194:
+			   since they never leave kernel. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#924: FILE: kernel/sched.c:3196:
+			if (!(tsk->flags & PF_EXITING)
+			    && printk_ratelimit())

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#924: FILE: kernel/sched.c:3196:
+			    && printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#925: FILE: kernel/sched.c:3197:
+				printk(KERN_INFO "process %d (%s) no "

WARNING:SPLIT_STRING: quoted string split across lines
#926: FILE: kernel/sched.c:3198:
+				printk(KERN_INFO "process %d (%s) no "
+				       "longer affine to cpu%d\n",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#948: FILE: kernel/sched.c:3235:
+		/* Unbind it from offline cpu so it can run.  Fall thru. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#949: FILE: kernel/sched.c:3236:
+		kthread_bind(cpu_rq(cpu)->migration_thread,smp_processor_id());
 		                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: kernel/sched.c:3243:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#956: FILE: kernel/sched.c:3243:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: kernel/sched.c:3243:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#956: FILE: kernel/sched.c:3243:
+ 		BUG_ON(cpu_rq(cpu)->nr_running != 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: kernel/sched.c:3244:
+ ^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#957: FILE: kernel/sched.c:3244:
+ ^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: kernel/sched.c:3244:
+ ^I^Ibreak;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#969: FILE: kernel/sched.c:3252:
+ * runqueue so we know it's empty. */

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#970: FILE: kernel/sched.c:3253:
 static struct notifier_block __devinitdata migration_notifier = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: kernel/softirq.c:352:
+/* $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1007: FILE: kernel/softirq.c:365:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1008: FILE: kernel/softirq.c:366:
+	BUG_ON(test_bit(TASKLET_STATE_RUN, &t->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1020: FILE: kernel/softirq.c:378:
+	BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1031: FILE: kernel/softirq.c:389:
+	for (i = &__get_cpu_var(tasklet_vec).list; *i; i = &(*i)->next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1036: FILE: kernel/softirq.c:394:
+	for (i = &__get_cpu_var(tasklet_hi_vec).list; *i; i = &(*i)->next);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1045: FILE: kernel/softirq.c:403:
 static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1054: FILE: kernel/softirq.c:428:
+		/* Unbind so it can run.  Fall thru. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1087: FILE: kernel/timer.c:1235:
+		/* We're locking backwards from __mod_timer order here,
+		   beware deadlock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1087: FILE: kernel/timer.c:1235:
+		   beware deadlock. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1098: FILE: kernel/timer.c:1246:
+static void __devinit migrate_timers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1104: FILE: kernel/timer.c:1252:
+	BUG_ON(cpu_online(cpu));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1107: FILE: kernel/timer.c:1255:
+	printk("migrate_timers: offlined base %p\n", old_base);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'migrate_timers', this function's name, in a string
#1107: FILE: kernel/timer.c:1255:
+	printk("migrate_timers: offlined base %p\n", old_base);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: kernel/timer.c:1269:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1127: FILE: kernel/timer.c:1275:
+		if (!migrate_timer_list(new_base, old_base->tv2.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv3.vec + i)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1128: FILE: kernel/timer.c:1276:
+		    || !migrate_timer_list(new_base, old_base->tv3.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv4.vec + i)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1129: FILE: kernel/timer.c:1277:
+		    || !migrate_timer_list(new_base, old_base->tv4.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv5.vec + i))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1146: FILE: kernel/timer.c:1294:
 static int __devinit timer_cpu_notify(struct notifier_block *self, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1183: FILE: kernel/workqueue.c:66:
+/* All the workqueues on the system, for hotplug cpu to add/remove
+   threads to each one as cpus come/go.  Protected by cpucontrol

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1184: FILE: kernel/workqueue.c:67:
+   sem. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1302: FILE: kernel/workqueue.c:389:
+	printk("Workqueue %s: %i\n", wq->name, list_empty(&cwq->worklist));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1306: FILE: kernel/workqueue.c:393:
+		printk("Taking work for %s\n", wq->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: kernel/workqueue.c:394:
+		work = list_entry(list.next,struct work_struct,entry);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: kernel/workqueue.c:394:
+		work = list_entry(list.next,struct work_struct,entry);
 		                                              ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1315: FILE: kernel/workqueue.c:402:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1316: FILE: kernel/workqueue.c:403:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1327: FILE: kernel/workqueue.c:414:
+				printk("workqueue for %i failed\n", hotcpu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1376: FILE: mm/page_alloc.c:1542:
+static int page_alloc_cpu_notify(struct notifier_block *self, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1407: FILE: mm/slab.c:524:
+static void free_block (kmem_cache_t* cachep, void** objpp, int len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1407: FILE: mm/slab.c:524:
+static void free_block (kmem_cache_t* cachep, void** objpp, int len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1407: FILE: mm/slab.c:524:
+static void free_block (kmem_cache_t* cachep, void** objpp, int len);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1410: FILE: mm/slab.c:527:
+static inline void ** ac_entry(struct array_cache *ac)

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1412: FILE: mm/slab.c:529:
+	return (void**)(ac+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1412: FILE: mm/slab.c:529:
+	return (void**)(ac+1);
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: mm/slab.c:600:
+^I}^I$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1446: FILE: mm/slab.c:604:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1452: FILE: mm/slab.c:609:
+	kmem_cache_t* cachep;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1575: FILE: mm/swap.c:395:
+		printk("pagevec_count for %u is %u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1581: FILE: mm/swap.c:401:
+		printk("active pagevec_count for %u is %u\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1631: FILE: mm/vmscan.c:1112:
+/* It's optimal to keep kswapds on the same CPUs as their memory, but
+   not required for correctness.  So if the last cpu in a node goes

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1633: FILE: mm/vmscan.c:1114:
+   restore their cpu bindings. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1634: FILE: mm/vmscan.c:1115:
+static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1646: FILE: mm/vmscan.c:1127:
+			if (any_online_cpu(mask) == NR_CPUS) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1657: FILE: mm/vmscan.c:1138:
+			if (any_online_cpu(mask) == NR_CPUS) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1675: FILE: mm/vmscan.c:1155:
+		pgdat->kswapd
+		= find_task_by_pid(kernel_thread(kswapd, pgdat, CLONE_KERNEL));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 65 warnings, 14 checks, 1481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
