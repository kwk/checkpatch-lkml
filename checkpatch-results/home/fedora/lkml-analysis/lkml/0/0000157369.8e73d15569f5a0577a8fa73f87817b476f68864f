WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#62: 
'echo -n 1 > /proc/ide/hda/freeze' to freeze, and 0 to thaw.
                       ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#87: 
diff -urN linux-2.6.13-rc6.original/drivers/ide/ide-io.c linux-2.6.13-rc6/drivers/ide/ide-io.c

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#97: FILE: drivers/ide/ide-io.c:1187:
+		if (test_bit(QUEUE_FLAG_STOPPED, &drive->queue->queue_flags) && !blk_pm_resume_request(rq)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: drivers/ide/ide-io.c:1188:
+			printk(KERN_ERR "%s: queue is stopped!\n", drive->name);

CHECK:SPACING: No space is necessary after a cast
#127: FILE: drivers/ide/ide-proc.c:270:
+	ide_drive_t	*drive = (ide_drive_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/ide/ide-proc.c:282:
+	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/ide/ide-proc.c:282:
+	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/ide/ide-proc.c:282:
+	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/ide/ide-proc.c:282:
+	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/ide/ide-proc.c:282:
+	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 	                                             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#148: FILE: drivers/ide/ide-proc.c:291:
+	if (argbuf[3] == 0xc4) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#150: FILE: drivers/ide/ide-proc.c:293:
+		printk(KERN_ERR "ide_end_freeze_rq(): Queue stopped...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_end_freeze_rq', this function's name, in a string
#150: FILE: drivers/ide/ide-proc.c:293:
+		printk(KERN_ERR "ide_end_freeze_rq(): Queue stopped...\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#152: FILE: drivers/ide/ide-proc.c:295:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#153: FILE: drivers/ide/ide-proc.c:296:
+		printk(KERN_ERR "ide_end_freeze_rq(): Head not parked...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_end_freeze_rq', this function's name, in a string
#153: FILE: drivers/ide/ide-proc.c:296:
+		printk(KERN_ERR "ide_end_freeze_rq(): Head not parked...\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: drivers/ide/ide-proc.c:298:
+/*
+	blk_stop_queue(rq->q);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: drivers/ide/ide-proc.c:305:
+static int proc_ide_write_freeze(struct file *file, const char __user *buffer,
+				   unsigned long count, void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: drivers/ide/ide-proc.c:309:
+^Ichar ^I^I*buf, *s;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: drivers/ide/ide-proc.c:309:
+^Ichar ^I^I*buf, *s;^I$

CHECK:SPACING: No space is necessary after a cast
#168: FILE: drivers/ide/ide-proc.c:311:
+	ide_drive_t	*drive = (ide_drive_t *) data;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: drivers/ide/ide-proc.c:312:
+^Iu8 ^I^Iargs[7], *argbuf = args;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#179: FILE: drivers/ide/ide-proc.c:322:
+	s = buf = (char *)__get_free_page(GFP_USER);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'STANDY' may be misspelled - perhaps 'STANDBY'?
#194: FILE: drivers/ide/ide-proc.c:337:
+	/* STANDY IMMEDIATE COMMAND (spins down drive - more obvious for testing?)
 	   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#195: FILE: drivers/ide/ide-proc.c:338:
+	/* STANDY IMMEDIATE COMMAND (spins down drive - more obvious for testing?)
+	argbuf[0] = 0xe0;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#206: FILE: drivers/ide/ide-proc.c:349:
+	val = simple_strtoul(buf, &s, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#209: FILE: drivers/ide/ide-proc.c:352:
+		if (!test_bit(QUEUE_FLAG_STOPPED, &drive->queue->queue_flags)) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#222: FILE: drivers/ide/ide-proc.c:365:
+		}
+		else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#223: FILE: drivers/ide/ide-proc.c:366:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue already stopped...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_ide_write_freeze', this function's name, in a string
#223: FILE: drivers/ide/ide-proc.c:366:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue already stopped...\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#225: FILE: drivers/ide/ide-proc.c:368:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: drivers/ide/ide-proc.c:368:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: drivers/ide/ide-proc.c:369:
+^I^I/* Check we are frozen & unfreeze */ $

CHECK:BRACES: braces {} should be used on all arms of this statement
#227: FILE: drivers/ide/ide-proc.c:370:
+		if (test_bit(QUEUE_FLAG_STOPPED, &drive->queue->queue_flags)) {
[...]
+		else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#231: FILE: drivers/ide/ide-proc.c:374:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue started...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_ide_write_freeze', this function's name, in a string
#231: FILE: drivers/ide/ide-proc.c:374:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue started...\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#233: FILE: drivers/ide/ide-proc.c:376:
+		}
+		else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#234: FILE: drivers/ide/ide-proc.c:377:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue not stopped...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_ide_write_freeze', this function's name, in a string
#234: FILE: drivers/ide/ide-proc.c:377:
+			printk(KERN_ERR "proc_ide_write_freeze(): Queue not stopped...\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#247: FILE: drivers/ide/ide-proc.c:509:
+	{ "freeze",	S_IFREG|S_IRUSR|S_IWUSR,proc_ide_read_freeze,	proc_ide_write_freeze },
 	           	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#247: FILE: drivers/ide/ide-proc.c:509:
+	{ "freeze",	S_IFREG|S_IRUSR|S_IWUSR,proc_ide_read_freeze,	proc_ide_write_freeze },
 	           	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: drivers/ide/ide-proc.c:509:
+	{ "freeze",	S_IFREG|S_IRUSR|S_IWUSR,proc_ide_read_freeze,	proc_ide_write_freeze },
 	           	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#247: FILE: drivers/ide/ide-proc.c:509:
+	{ "freeze",	S_IFREG|S_IRUSR|S_IWUSR,proc_ide_read_freeze,	proc_ide_write_freeze },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000157369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 21 warnings, 10 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000157369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
