WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
[Please Cc: fireflier-devel@lists.sourceforge.net, Martin, and me on replys, 

WARNING:TYPO_SPELLING: 'replys' may be misspelled - perhaps 'replies'?
#36: 
[Please Cc: fireflier-devel@lists.sourceforge.net, Martin, and me on replys, 
                                                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: fs/proc/root.c:152:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#160: FILE: fs/proc/root.c:152:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#161: FILE: fs/proc/root.c:152:
**dentry, struct vfsmount **mnt);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/proc/task_mmu.c:74:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/proc/task_mmu.c:75:
+int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/proc/task_mmu.c:76:
+int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, 
 {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: fs/proc/task_mmu.c:104:
+int proc_exe_link(struct inode *inode, struct dentry **dentry, struct $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: fs/proc/task_nommu.c:106:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: fs/proc/task_nommu.c:107:
+int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: fs/proc/task_nommu.c:108:
+int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, 
 {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: fs/proc/task_nommu.c:140:
+int proc_exe_link(struct inode *inode, struct dentry **dentry, struct $

WARNING:TYPO_SPELLING: 'unambigous' may be misspelled - perhaps 'unambiguous'?
#264: FILE: include/linux/netfilter_ipv4/ipt_owner.h:22:
+    /* it's the only simple (and unambigous) way to reference a program */
                                  ^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/linux/netfilter_ipv4/ipt_owner.h:23:
+    char device[IPT_DEVNAME_SZ];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: include/linux/netfilter_ipv4/ipt_owner.h:24:
+    unsigned long ino;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: net/ipv4/netfilter/ipt_owner.c:4:
+                packet can be found (IPT_OWNER_DEV) and also the inode$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: net/ipv4/netfilter/ipt_owner.c:5:
+                on that filesystem of that same program.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: net/ipv4/netfilter/ipt_owner.c:7:
+                why anyone would want to only check just the mountpoint$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: net/ipv4/netfilter/ipt_owner.c:12:
+edwin 2006feb17: use the wait queue of the socket instead of walking through $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: net/ipv4/netfilter/ipt_owner.c:13:
+                 this should allow ipt_owner to be used for incoming packets $

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: net/ipv4/netfilter/ipt_owner.c:13:
+                 this should allow ipt_owner to be used for incoming packets $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#323: FILE: net/ipv4/netfilter/ipt_owner.c:51:
+ * it in fs/proc/base.c.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: net/ipv4/netfilter/ipt_owner.c:52:
+extern int proc_task_dentry_lookup(struct task_struct *task,

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: net/ipv4/netfilter/ipt_owner.c:53:
+^I^I                           struct dentry **dentry,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: net/ipv4/netfilter/ipt_owner.c:53:
+extern int proc_task_dentry_lookup(struct task_struct *task,
+		                           struct dentry **dentry,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#328: FILE: net/ipv4/netfilter/ipt_owner.c:56:
+/*
+ * look up the dentry (for the inode) of the task's executable,

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#333: FILE: net/ipv4/netfilter/ipt_owner.c:61:
+ * returns 0 if program is authorized
+*/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: net/ipv4/netfilter/ipt_owner.c:62:
+static int proc_exe_check(struct task_struct* task,u_int8_t match,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: net/ipv4/netfilter/ipt_owner.c:62:
+static int proc_exe_check(struct task_struct* task,u_int8_t match,
                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: net/ipv4/netfilter/ipt_owner.c:68:
+	struct dentry *dentry;
+	printk(KERN_DEBUG "proc_exe_check:%s\n",task->comm);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#340: FILE: net/ipv4/netfilter/ipt_owner.c:68:
+	printk(KERN_DEBUG "proc_exe_check:%s\n",task->comm);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: net/ipv4/netfilter/ipt_owner.c:68:
+	printk(KERN_DEBUG "proc_exe_check:%s\n",task->comm);
 	                                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_exe_check', this function's name, in a string
#340: FILE: net/ipv4/netfilter/ipt_owner.c:68:
+	printk(KERN_DEBUG "proc_exe_check:%s\n",task->comm);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#343: FILE: net/ipv4/netfilter/ipt_owner.c:71:
+		printk(KERN_DEBUG "proc_task_dentry_lookup error:%d\n",result);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: net/ipv4/netfilter/ipt_owner.c:71:
+		printk(KERN_DEBUG "proc_task_dentry_lookup error:%d\n",result);
 		                                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#348: FILE: net/ipv4/netfilter/ipt_owner.c:76:
+		printk(KERN_DEBUG "dentry inode not found\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: net/ipv4/netfilter/ipt_owner.c:86:
+                        printk(KERN_DEBUG "if(1) return 0");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: net/ipv4/netfilter/ipt_owner.c:86:
+                        printk(KERN_DEBUG "if(1) return 0");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#358: FILE: net/ipv4/netfilter/ipt_owner.c:86:
+                        printk(KERN_DEBUG "if(1) return 0");

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: net/ipv4/netfilter/ipt_owner.c:91:
+                        printk(KERN_DEBUG "if(2) return 0");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: net/ipv4/netfilter/ipt_owner.c:91:
+                        printk(KERN_DEBUG "if(2) return 0");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#363: FILE: net/ipv4/netfilter/ipt_owner.c:91:
+                        printk(KERN_DEBUG "if(2) return 0");

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: net/ipv4/netfilter/ipt_owner.c:96:
+                        printk(KERN_DEBUG "if(3) return 0");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: net/ipv4/netfilter/ipt_owner.c:96:
+                        printk(KERN_DEBUG "if(3) return 0");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#368: FILE: net/ipv4/netfilter/ipt_owner.c:96:
+                        printk(KERN_DEBUG "if(3) return 0");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#371: FILE: net/ipv4/netfilter/ipt_owner.c:99:
+	printk(KERN_DEBUG "proc_exe_check: ENOENT");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_exe_check', this function's name, in a string
#371: FILE: net/ipv4/netfilter/ipt_owner.c:99:
+	printk(KERN_DEBUG "proc_exe_check: ENOENT");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: net/ipv4/netfilter/ipt_owner.c:103:
+//check that the process or process group is authorized (process in $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: net/ipv4/netfilter/ipt_owner.c:104:
+static int proc_exe_check_fown(struct fown_struct* fown,u_int8_t match,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: net/ipv4/netfilter/ipt_owner.c:104:
+static int proc_exe_check_fown(struct fown_struct* fown,u_int8_t match,
                                                        ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#381: FILE: net/ipv4/netfilter/ipt_owner.c:108:
+	struct task_struct* task;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#383: FILE: net/ipv4/netfilter/ipt_owner.c:110:
+	int result=-ENOENT;
 	          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#383: FILE: net/ipv4/netfilter/ipt_owner.c:110:
+	int result=-ENOENT;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#386: FILE: net/ipv4/netfilter/ipt_owner.c:113:
+	pid=fown->pid;
 	   ^

ERROR:SPACING: space required before the open parenthesis '('
#387: FILE: net/ipv4/netfilter/ipt_owner.c:114:
+	if(!pid)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#390: FILE: net/ipv4/netfilter/ipt_owner.c:117:
+	if(pid>0)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#390: FILE: net/ipv4/netfilter/ipt_owner.c:117:
+	if(pid>0)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#390: FILE: net/ipv4/netfilter/ipt_owner.c:117:
+	if(pid>0)

ERROR:SPACING: space required before the open parenthesis '('
#393: FILE: net/ipv4/netfilter/ipt_owner.c:120:
+		if(task)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#394: FILE: net/ipv4/netfilter/ipt_owner.c:121:
+			if(proc_exe_check(task,match,devname,i_num))
+			{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: net/ipv4/netfilter/ipt_owner.c:121:
+			if(proc_exe_check(task,match,devname,i_num))
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: net/ipv4/netfilter/ipt_owner.c:121:
+			if(proc_exe_check(task,match,devname,i_num))
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: net/ipv4/netfilter/ipt_owner.c:121:
+			if(proc_exe_check(task,match,devname,i_num))
 			                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: net/ipv4/netfilter/ipt_owner.c:121:
+			if(proc_exe_check(task,match,devname,i_num))

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#396: FILE: net/ipv4/netfilter/ipt_owner.c:123:
+				result=-ENOENT;
 				      ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#396: FILE: net/ipv4/netfilter/ipt_owner.c:123:
+				result=-ENOENT;
 				       ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#399: FILE: net/ipv4/netfilter/ipt_owner.c:126:
+	} else
+	{

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: net/ipv4/netfilter/ipt_owner.c:126:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: net/ipv4/netfilter/ipt_owner.c:128:
+		do_each_task_pid(~pid,PIDTYPE_PGID,task)
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: net/ipv4/netfilter/ipt_owner.c:128:
+		do_each_task_pid(~pid,PIDTYPE_PGID,task)
 		                                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#403: FILE: net/ipv4/netfilter/ipt_owner.c:130:
+			if(proc_exe_check(task,match,devname,i_num))
+			{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: net/ipv4/netfilter/ipt_owner.c:130:
+			if(proc_exe_check(task,match,devname,i_num))
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: net/ipv4/netfilter/ipt_owner.c:130:
+			if(proc_exe_check(task,match,devname,i_num))
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: net/ipv4/netfilter/ipt_owner.c:130:
+			if(proc_exe_check(task,match,devname,i_num))
 			                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: net/ipv4/netfilter/ipt_owner.c:130:
+			if(proc_exe_check(task,match,devname,i_num))

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#405: FILE: net/ipv4/netfilter/ipt_owner.c:132:
+				result=-ENOENT;
 				      ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#405: FILE: net/ipv4/netfilter/ipt_owner.c:132:
+				result=-ENOENT;
 				       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: net/ipv4/netfilter/ipt_owner.c:135:
+		} while_each_task_pid(~pid,PIDTYPE_PGID,task);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: net/ipv4/netfilter/ipt_owner.c:135:
+		} while_each_task_pid(~pid,PIDTYPE_PGID,task);
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: net/ipv4/netfilter/ipt_owner.c:137:
+	result=0;
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#411: FILE: net/ipv4/netfilter/ipt_owner.c:138:
+	out_unlock_tasklist:

WARNING:INDENTED_LABEL: labels should not be indented
#413: FILE: net/ipv4/netfilter/ipt_owner.c:140:
+	out_unlock_fown:

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: net/ipv4/netfilter/ipt_owner.c:142:
+        return result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: net/ipv4/netfilter/ipt_owner.c:142:
+        return result;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#418: FILE: net/ipv4/netfilter/ipt_owner.c:145:
+static int __authorize_programs(struct sock* sk, u_int8_t match,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#419: FILE: net/ipv4/netfilter/ipt_owner.c:146:
+				const char* devname, unsigned long i_num)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#422: FILE: net/ipv4/netfilter/ipt_owner.c:149:
+	wait_queue_head_t* q = sk->sk_sleep;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#423: FILE: net/ipv4/netfilter/ipt_owner.c:150:
+	struct list_head* tmp,*next;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#423: FILE: net/ipv4/netfilter/ipt_owner.c:150:
+	struct list_head* tmp,*next;
 	                     ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#423: FILE: net/ipv4/netfilter/ipt_owner.c:150:
+	struct list_head* tmp,*next;
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: net/ipv4/netfilter/ipt_owner.c:151:
+        struct fasync_struct* fa;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: net/ipv4/netfilter/ipt_owner.c:151:
+        struct fasync_struct* fa;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#424: FILE: net/ipv4/netfilter/ipt_owner.c:151:
+        struct fasync_struct* fa;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#425: FILE: net/ipv4/netfilter/ipt_owner.c:152:
+	list_for_each_safe(tmp, next, &q->task_list)
+	{

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: net/ipv4/netfilter/ipt_owner.c:155:
+		wait_queue_t *curr;
+		curr = list_entry(tmp, wait_queue_t, task_list);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#429: FILE: net/ipv4/netfilter/ipt_owner.c:156:
+		if(proc_exe_check(curr->private,match,devname,i_num))
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#429: FILE: net/ipv4/netfilter/ipt_owner.c:156:
+		if(proc_exe_check(curr->private,match,devname,i_num))
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#429: FILE: net/ipv4/netfilter/ipt_owner.c:156:
+		if(proc_exe_check(curr->private,match,devname,i_num))
 		                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#429: FILE: net/ipv4/netfilter/ipt_owner.c:156:
+		if(proc_exe_check(curr->private,match,devname,i_num))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#434: FILE: net/ipv4/netfilter/ipt_owner.c:161:
+	while (fa)
+	{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: net/ipv4/netfilter/ipt_owner.c:163:
+		struct fown_struct * fown;

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: net/ipv4/netfilter/ipt_owner.c:164:
+		struct fown_struct * fown;
+		if (fa->magic != FASYNC_MAGIC)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#437: FILE: net/ipv4/netfilter/ipt_owner.c:164:
+		if (fa->magic != FASYNC_MAGIC)
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#439: FILE: net/ipv4/netfilter/ipt_owner.c:166:
+			printk(KERN_ERR "kill_fasync: bad magic number in "

WARNING:SPLIT_STRING: quoted string split across lines
#440: FILE: net/ipv4/netfilter/ipt_owner.c:167:
+			printk(KERN_ERR "kill_fasync: bad magic number in "
+			       "fasync_struct!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ipt_owner.c:171:
+		if(proc_exe_check_fown(fown,match,devname,i_num))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ipt_owner.c:171:
+		if(proc_exe_check_fown(fown,match,devname,i_num))
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ipt_owner.c:171:
+		if(proc_exe_check_fown(fown,match,devname,i_num))
 		                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: net/ipv4/netfilter/ipt_owner.c:171:
+		if(proc_exe_check_fown(fown,match,devname,i_num))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: net/ipv4/netfilter/ipt_owner.c:179:
+match_inode(const struct sk_buff* skb,u_int8_t match,const char* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#452: FILE: net/ipv4/netfilter/ipt_owner.c:179:
+match_inode(const struct sk_buff* skb,u_int8_t match,const char* 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: net/ipv4/netfilter/ipt_owner.c:179:
+match_inode(const struct sk_buff* skb,u_int8_t match,const char* 
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: net/ipv4/netfilter/ipt_owner.c:179:
+match_inode(const struct sk_buff* skb,u_int8_t match,const char* 
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/ipv4/netfilter/ipt_owner.c:181:
+	return __authorize_programs(skb->sk,match,devname,i_num);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/ipv4/netfilter/ipt_owner.c:181:
+	return __authorize_programs(skb->sk,match,devname,i_num);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/ipv4/netfilter/ipt_owner.c:181:
+	return __authorize_programs(skb->sk,match,devname,i_num);
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: net/ipv4/netfilter/ipt_owner.c:184:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#466: FILE: net/ipv4/netfilter/ipt_owner.c:210:
+	if (info->match & IPT_OWNER_INO || info->match & IPT_OWNER_DEV)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#466: FILE: net/ipv4/netfilter/ipt_owner.c:210:
+	if (info->match & IPT_OWNER_INO || info->match & IPT_OWNER_DEV)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^
[...]
+		    return 0;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^
 	                                                ^

CHECK:SPACING: space preferred before that '^' (ctx:VxE)
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^
 	                                                           ^

ERROR:SPACING: space required before the open parenthesis '('
#468: FILE: net/ipv4/netfilter/ipt_owner.c:212:
+	    if(!match_inode(skb,info->match,info->device,info->ino)^

WARNING:TABSTOP: Statements should start on a tabstop
#470: FILE: net/ipv4/netfilter/ipt_owner.c:214:
+		    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#471: FILE: net/ipv4/netfilter/ipt_owner.c:215:
+	    }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: net/ipv4/netfilter/ipt_owner.c:247:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: net/ipv4/netfilter/ipt_owner.c:247:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: net/ipv4/netfilter/ipt_owner.c:260:
+    printk(KERN_DEBUG "ipt_owner (with enhanced inode rules) startup\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#491: FILE: net/ipv4/netfilter/ipt_owner.c:260:
+    printk(KERN_DEBUG "ipt_owner (with enhanced inode rules) startup\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: net/ipv4/netfilter/ipt_owner.c:261:
+    return ipt_register_match(&owner_match);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: net/ipv4/netfilter/ipt_owner.c:266:
+    printk(KERN_DEBUG "ipt_owner shutdown");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#498: FILE: net/ipv4/netfilter/ipt_owner.c:266:
+    printk(KERN_DEBUG "ipt_owner shutdown");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: net/ipv4/netfilter/ipt_owner.c:267:
+    ipt_unregister_match(&owner_match);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 88 errors, 43 warnings, 6 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
