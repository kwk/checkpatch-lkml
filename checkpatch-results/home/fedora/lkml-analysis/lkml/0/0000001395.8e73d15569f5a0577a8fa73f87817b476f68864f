WARNING:SPACING: Unnecessary space before function pointer arguments
#137: FILE: include/linux/net.h:158:
+	int		(*sendmsg)   (struct socket *sock, struct msghdr *m,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#139: FILE: include/linux/net.h:160:
+	int		(*recvmsg)   (struct socket *sock, struct msghdr *m,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: include/net/inet_common.h:28:
+extern int^I^I^Iinet_sendmsg(struct socket *sock, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/net/inet_common.h:28:
+extern int			inet_sendmsg(struct socket *sock, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: include/net/sock.h:539:
+	int			(*sendmsg)(struct sock *sk, struct msghdr *msg,
+					size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: include/net/sock.h:541:
+	int			(*recvmsg)(struct sock *sk, struct msghdr *msg,
 					size_t len, int noblock, int flags, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/net/sock.h:815:
+extern int                      sock_no_sendmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#209: FILE: include/net/sock.h:815:
+extern int                      sock_no_sendmsg(struct socket *, struct msghdr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#209: FILE: include/net/sock.h:815:
+extern int                      sock_no_sendmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#209: FILE: include/net/sock.h:815:
+extern int                      sock_no_sendmsg(struct socket *, struct msghdr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/net/sock.h:817:
+extern int                      sock_no_recvmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#211: FILE: include/net/sock.h:817:
+extern int                      sock_no_recvmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#211: FILE: include/net/sock.h:817:
+extern int                      sock_no_recvmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#211: FILE: include/net/sock.h:817:
+extern int                      sock_no_recvmsg(struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#211: FILE: include/net/sock.h:817:
+extern int                      sock_no_recvmsg(struct socket *, struct msghdr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/net/sock.h:833:
+extern int sock_common_recvmsg(struct socket *sock, struct msghdr *msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/net/sock.h:834:
+extern int sock_common_recvmsg(struct socket *sock, struct msghdr *msg,
+				size_t size, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/net/tcp.h:276:
+extern int			tcp_sendmsg(struct sock *sk, struct msghdr *msg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/net/tcp.h:367:
+extern int			tcp_recvmsg(struct sock *sk,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/net/udp.h:130:
+extern int	udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#486: FILE: net/dccp/dccp.h:260:
+extern int	   dccp_sendmsg(struct sock *sk, struct msghdr *msg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#488: FILE: net/dccp/dccp.h:262:
+extern int	   dccp_recvmsg(struct sock *sk, struct msghdr *msg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: net/ipv4/udp_impl.h:28:
+extern int	udp_recvmsg(struct sock *sk, struct msghdr *msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: net/ipv6/raw.c:395:
+static int rawv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 		  int noblock, int flags, int *addr_len)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#786: FILE: net/ipv6/udp_impl.h:23:
+extern int	udpv6_sendmsg(struct sock *sk, struct msghdr *msg, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#787: FILE: net/ipv6/udp_impl.h:24:
+extern int	udpv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: net/ipv6/udp_impl.h:25:
+extern int	udpv6_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 		  	      int noblock, int flags, int *addr_len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1238: FILE: net/tipc/socket.c:654:
+                        if ((res = send_packet(sock, &my_msg, 0)) < 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: net/tipc/socket.c:654:
+                        if ((res = send_packet(sock, &my_msg, 0)) < 0) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1238: FILE: net/tipc/socket.c:654:
+                        if ((res = send_packet(sock, &my_msg, 0)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1238: FILE: net/tipc/socket.c:654:
+                        if ((res = send_packet(sock, &my_msg, 0)) < 0) {
 				return bytes_sent ? bytes_sent : res;
 			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 17 checks, 1086 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
