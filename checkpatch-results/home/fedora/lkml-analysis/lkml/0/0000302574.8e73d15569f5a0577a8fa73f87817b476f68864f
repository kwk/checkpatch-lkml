WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#30: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#161: FILE: ipc/util.c:617:
+void free_msg(struct msg_msg* msg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#163: FILE: ipc/util.c:619:
+	struct msg_msgseg* seg;

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: ipc/util.c:625:
+	while(seg != NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "seg"
#169: FILE: ipc/util.c:625:
+	while(seg != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#170: FILE: ipc/util.c:626:
+		struct msg_msgseg* tmp = seg->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: ipc/util.c:627:
+		struct msg_msgseg* tmp = seg->next;
+		kfree(seg);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#176: FILE: ipc/util.c:632:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#176: FILE: ipc/util.c:632:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#178: FILE: ipc/util.c:634:
+	struct msg_msg* msg;

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#179: FILE: ipc/util.c:635:
+	struct msg_msgseg** pseg;

ERROR:SPACING: space required before the open parenthesis '('
#184: FILE: ipc/util.c:640:
+	if(alen > DATALEN_MSG)

CHECK:SPACING: No space is necessary after a cast
#187: FILE: ipc/util.c:643:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: ipc/util.c:643:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#187: FILE: ipc/util.c:643:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#188: FILE: ipc/util.c:644:
+	if(msg==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: ipc/util.c:644:
+	if(msg==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#188: FILE: ipc/util.c:644:
+	if(msg==NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#194: FILE: ipc/util.c:650:
+	if (copy_from_user(msg+1, src, alen)) {
 	                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#200: FILE: ipc/util.c:656:
+	src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: ipc/util.c:656:
+	src = ((char*)src)+alen;
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: ipc/util.c:658:
+	while(len > 0) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#203: FILE: ipc/util.c:659:
+		struct msg_msgseg* seg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: ipc/util.c:660:
+		struct msg_msgseg* seg;
+		alen = len;

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: ipc/util.c:661:
+		if(alen > DATALEN_SEG)

CHECK:SPACING: No space is necessary after a cast
#207: FILE: ipc/util.c:663:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: ipc/util.c:663:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#207: FILE: ipc/util.c:663:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#208: FILE: ipc/util.c:664:
+		if(seg==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: ipc/util.c:664:
+		if(seg==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#208: FILE: ipc/util.c:664:
+		if(seg==NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#209: FILE: ipc/util.c:665:
+			err=-ENOMEM;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#209: FILE: ipc/util.c:665:
+			err=-ENOMEM;
 			    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: ipc/util.c:670:
+		if(copy_from_user (seg+1, src, alen)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: ipc/util.c:670:
+		if(copy_from_user (seg+1, src, alen)) {
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: ipc/util.c:670:
+		if(copy_from_user (seg+1, src, alen)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#220: FILE: ipc/util.c:676:
+		src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: ipc/util.c:676:
+		src = ((char*)src)+alen;
 		                  ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#234: FILE: ipc/util.c:690:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#234: FILE: ipc/util.c:690:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:SPACING: space required before the open parenthesis '('
#240: FILE: ipc/util.c:696:
+	if(alen > DATALEN_MSG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: ipc/util.c:698:
+	if(copy_to_user (dest, msg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#242: FILE: ipc/util.c:698:
+	if(copy_to_user (dest, msg+1, alen))
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: ipc/util.c:698:
+	if(copy_to_user (dest, msg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#246: FILE: ipc/util.c:702:
+	dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: ipc/util.c:702:
+	dest = ((char*)dest)+alen;
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: ipc/util.c:704:
+	while(len > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: ipc/util.c:706:
+		if(alen > DATALEN_SEG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: ipc/util.c:708:
+		if(copy_to_user (dest, seg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#252: FILE: ipc/util.c:708:
+		if(copy_to_user (dest, seg+1, alen))
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: ipc/util.c:708:
+		if(copy_to_user (dest, seg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#255: FILE: ipc/util.c:711:
+		dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: ipc/util.c:711:
+		dest = ((char*)dest)+alen;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#256: FILE: ipc/util.c:712:
+		seg=seg->next;
 		   ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#269: FILE: ipc/util.h:29:
+	struct msg_msgseg* next;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#273: FILE: ipc/util.h:33:
+void free_msg(struct msg_msg* msg);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#274: FILE: ipc/util.h:34:
+struct msg_msg* load_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#274: FILE: ipc/util.h:34:
+struct msg_msg* load_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#275: FILE: ipc/util.h:35:
+int store_msg(void* dest, struct msg_msg* msg, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#275: FILE: ipc/util.h:35:
+int store_msg(void* dest, struct msg_msg* msg, int len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: ipc/util.h:37:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 10 warnings, 14 checks, 240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
