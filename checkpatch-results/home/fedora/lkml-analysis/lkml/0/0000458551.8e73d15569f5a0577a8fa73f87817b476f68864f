Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#27: 
This is a patch that adds an extra mount option for msdos/vfat
                                                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: fs/fat/inode.c:177:
+       struct fat_filter_data *this,*next;$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#50: FILE: fs/fat/inode.c:177:
+       struct fat_filter_data *this,*next;
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '*' (ctx:OxV)
#50: FILE: fs/fat/inode.c:177:
+       struct fat_filter_data *this,*next;
                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#51: FILE: fs/fat/inode.c:178:
+       struct fat_filter_data *this,*next;
+       this=filter;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: fs/fat/inode.c:178:
+       this=filter;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#51: FILE: fs/fat/inode.c:178:
+       this=filter;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: fs/fat/inode.c:179:
+       while (this) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#52: FILE: fs/fat/inode.c:179:
+       while (this) {
+               next=this->next;

ERROR:CODE_INDENT: code indent should use tabs where possible
#53: FILE: fs/fat/inode.c:180:
+               next=this->next;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: fs/fat/inode.c:180:
+               next=this->next;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#53: FILE: fs/fat/inode.c:180:
+               next=this->next;
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#54: FILE: fs/fat/inode.c:181:
+               kfree(this);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: fs/fat/inode.c:181:
+               kfree(this);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#55: FILE: fs/fat/inode.c:182:
+               this=next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: fs/fat/inode.c:182:
+               this=next;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#55: FILE: fs/fat/inode.c:182:
+               this=next;
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: fs/fat/inode.c:183:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/fat/inode.c:191:
+       char *tmp_pointer;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#65: FILE: fs/fat/inode.c:192:
+       char *tmp_pointer;
+       tmp_pointer = strchr(value, ':');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: fs/fat/inode.c:192:
+       tmp_pointer = strchr(value, ':');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: fs/fat/inode.c:193:
+       if (tmp_pointer) *tmp_pointer = '\0';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#66: FILE: fs/fat/inode.c:193:
+       if (tmp_pointer) *tmp_pointer = '\0';

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: fs/fat/inode.c:194:
+       strncpy(filter->extension,value,3);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: fs/fat/inode.c:194:
+       strncpy(filter->extension,value,3);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: fs/fat/inode.c:194:
+       strncpy(filter->extension,value,3);
                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: fs/fat/inode.c:195:
+       filter->next = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: fs/fat/inode.c:196:
+       filter->mask_umask = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: fs/fat/inode.c:197:
+       filter->mask_uid = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: fs/fat/inode.c:198:
+       filter->mask_gid = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: fs/fat/inode.c:199:
+       if (tmp_pointer) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#72: FILE: fs/fat/inode.c:199:
+       if (tmp_pointer) {
+       if (tmp_pointer[1] != ':') {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: fs/fat/inode.c:200:
+       if (tmp_pointer[1] != ':') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#73: FILE: fs/fat/inode.c:200:
+       if (tmp_pointer[1] != ':') {
+               filter->filter_umask = simple_strtoul(tmp_pointer + 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: fs/fat/inode.c:201:
+               filter->filter_umask = simple_strtoul(tmp_pointer + 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/fat/inode.c:201:
+               filter->filter_umask = simple_strtoul(tmp_pointer + 1,$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#74: FILE: fs/fat/inode.c:201:
+               filter->filter_umask = simple_strtoul(tmp_pointer + 1,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: fs/fat/inode.c:201:
NULL, 8);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: fs/fat/inode.c:202:
+               filter->mask_umask = 1;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: fs/fat/inode.c:202:
+               filter->filter_umask = simple_strtoul(tmp_pointer + 1,
+               filter->mask_umask = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: fs/fat/inode.c:202:
+               filter->mask_umask = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: fs/fat/inode.c:203:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: fs/fat/inode.c:204:
+       tmp_pointer = strchr(tmp_pointer + 1, ':');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: fs/fat/inode.c:205:
+       if (tmp_pointer) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#79: FILE: fs/fat/inode.c:205:
+       if (tmp_pointer) {
+       if (tmp_pointer[1] != ':') {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: fs/fat/inode.c:206:
+       if (tmp_pointer[1] != ':') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#80: FILE: fs/fat/inode.c:206:
+       if (tmp_pointer[1] != ':') {
+               filter->filter_uid = simple_strtoul(tmp_pointer + 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: fs/fat/inode.c:207:
+               filter->filter_uid = simple_strtoul(tmp_pointer + 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/fat/inode.c:207:
+               filter->filter_uid = simple_strtoul(tmp_pointer + 1,$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#81: FILE: fs/fat/inode.c:207:
+               filter->filter_uid = simple_strtoul(tmp_pointer + 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: fs/fat/inode.c:208:
+               filter->mask_uid = 1;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: fs/fat/inode.c:208:
+               filter->filter_uid = simple_strtoul(tmp_pointer + 1,
+               filter->mask_uid = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: fs/fat/inode.c:208:
+               filter->mask_uid = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: fs/fat/inode.c:209:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: fs/fat/inode.c:210:
+       tmp_pointer = strchr(tmp_pointer + 1, ':');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: fs/fat/inode.c:211:
+       if (tmp_pointer) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#86: FILE: fs/fat/inode.c:211:
+       if (tmp_pointer) {
+               filter->filter_gid = simple_strtoul(tmp_pointer + 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: fs/fat/inode.c:212:
+               filter->filter_gid = simple_strtoul(tmp_pointer + 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: fs/fat/inode.c:212:
+               filter->filter_gid = simple_strtoul(tmp_pointer + 1,$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#87: FILE: fs/fat/inode.c:212:
+               filter->filter_gid = simple_strtoul(tmp_pointer + 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: fs/fat/inode.c:213:
+               filter->mask_gid = 1;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: fs/fat/inode.c:213:
+               filter->filter_gid = simple_strtoul(tmp_pointer + 1,
+               filter->mask_gid = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/fat/inode.c:213:
+               filter->mask_gid = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: fs/fat/inode.c:214:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: fs/fat/inode.c:215:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: fs/fat/inode.c:216:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: fs/fat/inode.c:246:
+       if (sbi->options.filter) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#102: FILE: fs/fat/inode.c:246:
+       if (sbi->options.filter) {
+               fat_clear_filter(sbi->options.filter);

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: fs/fat/inode.c:247:
+               fat_clear_filter(sbi->options.filter);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: fs/fat/inode.c:247:
+               fat_clear_filter(sbi->options.filter);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: fs/fat/inode.c:248:
+               sbi->options.filter = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: fs/fat/inode.c:248:
+               sbi->options.filter = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/fat/inode.c:249:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: fs/fat/inode.c:274:
+       opts->filter = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: fs/fat/inode.c:311:
+               else if (!strcmp(this_char,"filter") && value) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/fat/inode.c:311:
+               else if (!strcmp(this_char,"filter") && value) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#121: FILE: fs/fat/inode.c:311:
+               else if (!strcmp(this_char,"filter") && value) {
+                       struct fat_filter_data *cur_filter;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: fs/fat/inode.c:311:
+               else if (!strcmp(this_char,"filter") && value) {
                                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#121: FILE: fs/fat/inode.c:311:
                }
+               else if (!strcmp(this_char,"filter") && value) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: fs/fat/inode.c:312:
+                       struct fat_filter_data *cur_filter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: fs/fat/inode.c:312:
+                       struct fat_filter_data *cur_filter;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: fs/fat/inode.c:313:
+                       /* Allocates memory in the list for a filter */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: fs/fat/inode.c:314:
+                       if (opts->filter == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: fs/fat/inode.c:314:
+                       if (opts->filter == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#124: FILE: fs/fat/inode.c:314:
+                       if (opts->filter == NULL) {
+                               opts->filter = kmalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opts->filter"
#124: FILE: fs/fat/inode.c:314:
+                       if (opts->filter == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: fs/fat/inode.c:315:
+                               opts->filter = kmalloc($

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/fat/inode.c:315:
+                               opts->filter = kmalloc($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#125: FILE: fs/fat/inode.c:315:
+                               opts->filter = kmalloc(

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: fs/fat/inode.c:316:
+                                       sizeof(struct fat_filter_data),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: fs/fat/inode.c:316:
+                                       sizeof(struct fat_filter_data),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: fs/fat/inode.c:317:
+                                       GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/fat/inode.c:317:
+                                       GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/fat/inode.c:318:
+                               cur_filter=opts->filter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/fat/inode.c:318:
+                               cur_filter=opts->filter;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#128: FILE: fs/fat/inode.c:318:
+                               cur_filter=opts->filter;
                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/fat/inode.c:319:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/fat/inode.c:319:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#129: FILE: fs/fat/inode.c:319:
+                       } else {
+                               cur_filter = opts->filter;

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/fat/inode.c:320:
+                               cur_filter = opts->filter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/fat/inode.c:320:
+                               cur_filter = opts->filter;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/fat/inode.c:321:
+                               while (cur_filter->next != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/fat/inode.c:321:
+                               while (cur_filter->next != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#131: FILE: fs/fat/inode.c:321:
+                               while (cur_filter->next != NULL)
+                                       cur_filter = cur_filter->next;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_filter->next"
#131: FILE: fs/fat/inode.c:321:
+                               while (cur_filter->next != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/fat/inode.c:322:
+                                       cur_filter = cur_filter->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/fat/inode.c:322:
+                                       cur_filter = cur_filter->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/fat/inode.c:323:
+                               cur_filter->next =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/fat/inode.c:323:
+                               cur_filter->next =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/fat/inode.c:324:
+                                       kmalloc(sizeof(struct$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/fat/inode.c:324:
+                                       kmalloc(sizeof(struct$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: fs/fat/inode.c:325:
+                                       GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/fat/inode.c:325:
+                                       GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: fs/fat/inode.c:326:
+                               cur_filter = cur_filter->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/fat/inode.c:326:
+                               cur_filter = cur_filter->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/fat/inode.c:327:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/fat/inode.c:327:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: fs/fat/inode.c:328:
+                       /* Processes the filter option itself */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: fs/fat/inode.c:329:
+                       if (cur_filter)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/fat/inode.c:329:
+                       if (cur_filter)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#140: FILE: fs/fat/inode.c:329:
+                       if (cur_filter)
+                               fat_load_filter(cur_filter, value);

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: fs/fat/inode.c:330:
+                               fat_load_filter(cur_filter, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/fat/inode.c:330:
+                               fat_load_filter(cur_filter, value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: fs/fat/inode.c:331:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/fat/inode.c:331:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/fat/inode.c:996:
+       if (sbi->options.filter) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#150: FILE: fs/fat/inode.c:996:
+       if (sbi->options.filter) {
+               fat_clear_filter(sbi->options.filter);

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: fs/fat/inode.c:997:
+               fat_clear_filter(sbi->options.filter);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: fs/fat/inode.c:997:
+               fat_clear_filter(sbi->options.filter);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: fs/fat/inode.c:998:
+               sbi->options.filter = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: fs/fat/inode.c:998:
+               sbi->options.filter = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/fat/inode.c:999:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/fat/inode.c:1081:
+       struct fat_filter_data *filter;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: fs/fat/inode.c:1123:
+               /* Check if the inode's extension needs special$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: fs/fat/inode.c:1124:
+               filter = fat_is_filtered(de->ext, &sbi->options);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#171: FILE: fs/fat/inode.c:1124:
+               /* Check if the inode's extension needs special
+               filter = fat_is_filtered(de->ext, &sbi->options);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: fs/fat/inode.c:1125:
+               if (filter) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/fat/inode.c:1126:
+                       if (filter->mask_uid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: fs/fat/inode.c:1127:
+                               inode->i_uid = filter->filter_uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: fs/fat/inode.c:1128:
+                       if (filter->mask_gid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: fs/fat/inode.c:1129:
+                               inode->i_gid = filter->filter_gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/fat/inode.c:1130:
+                       if (filter->mask_umask)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: fs/fat/inode.c:1131:
+                               inode->i_mode = MSDOS_MKMODE(de->attr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/fat/inode.c:1132:
+                                   ((sbi->options.showexec &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/fat/inode.c:1133:
+                                      !is_exec(de->ext))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/fat/inode.c:1134:
+                                       ? S_IRUGO|S_IWUGO : S_IRWXUGO)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/fat/inode.c:1135:
+                                   & ~filter->filter_umask) | S_IFREG;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/fat/inode.c:1136:
+               }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: fs/fat/misc.c:88:
+struct fat_filter_data *fat_is_filtered(char *extension,
+       struct fat_mount_options * opts)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/fat/misc.c:88:
+       struct fat_mount_options * opts)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#200: FILE: fs/fat/misc.c:88:
+       struct fat_mount_options * opts)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/fat/misc.c:90:
+       struct fat_filter_data *walk;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: fs/fat/misc.c:91:
+       struct fat_filter_data *walk;
+       for (walk = opts->filter; walk; walk = walk->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/fat/misc.c:91:
+       for (walk = opts->filter; walk; walk = walk->next)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#203: FILE: fs/fat/misc.c:91:
+       for (walk = opts->filter; walk; walk = walk->next)
+               if (!strncmp(extension,walk->extension,3)) return walk;

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/fat/misc.c:92:
+               if (!strncmp(extension,walk->extension,3)) return walk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/fat/misc.c:92:
+               if (!strncmp(extension,walk->extension,3)) return walk;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: fs/fat/misc.c:92:
+               if (!strncmp(extension,walk->extension,3)) return walk;
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: fs/fat/misc.c:92:
+               if (!strncmp(extension,walk->extension,3)) return walk;
                                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#204: FILE: fs/fat/misc.c:92:
+               if (!strncmp(extension,walk->extension,3)) return walk;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/fat/misc.c:93:
+       return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: include/linux/msdos_fs.h:304:
+               struct fat_mount_options *opts);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: include/linux/msdos_fs.h:304:
+fat_is_filtered(char *extension,
+               struct fat_mount_options *opts);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/msdos_fs.h:304:
+               struct fat_mount_options *opts);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/msdos_fs_sb.h:9:
+       char extension[4];              /* The extension to be filtered$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#239: FILE: include/linux/msdos_fs_sb.h:10:
+       char extension[4];              /* The extension to be filtered
+       uid_t filter_uid;               /* The uid of this filter */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/msdos_fs_sb.h:11:
+       gid_t filter_gid;               /* The gid of this filter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/msdos_fs_sb.h:12:
+       unsigned short filter_umask;    /* The umask of this filter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/msdos_fs_sb.h:13:
+       unsigned mask_umask:1,          /* Is the umask applied? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: include/linux/msdos_fs_sb.h:14:
+                mask_uid:1,            /* Is the uid applied? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: include/linux/msdos_fs_sb.h:15:
+                mask_gid:1;            /* Is the gid applied? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/linux/msdos_fs_sb.h:16:
+       struct fat_filter_data *next;   /* The next filter */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458551.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 96 warnings, 8 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458551.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
