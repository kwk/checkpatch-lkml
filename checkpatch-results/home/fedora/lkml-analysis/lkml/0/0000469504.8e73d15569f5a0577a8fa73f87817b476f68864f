WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
> UP vs SMP - a UP system still wants to do locking, but it doesn't need the

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: i386/kernel/smpboot.c:975:
+extern const unsigned long __lock_tbl_end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: i386/kernel/smpboot.c:976:
+extern char _text, _etext;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#79: FILE: i386/kernel/smpboot.c:978:
+#define IN_TEXT(x) (((char*)(x) >= &_text) && ((char*)(x) < &_etext))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#79: FILE: i386/kernel/smpboot.c:978:
+#define IN_TEXT(x) (((char*)(x) >= &_text) && ((char*)(x) < &_etext))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#79: FILE: i386/kernel/smpboot.c:978:
+#define IN_TEXT(x) (((char*)(x) >= &_text) && ((char*)(x) < &_etext))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#85: FILE: i386/kernel/smpboot.c:984:
+	printk("Dynamically optimizing SMP kernel code for UP operation...\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#88: FILE: i386/kernel/smpboot.c:987:
+	for (i = 0; __lock_tbl_start[i] != __lock_tbl_end[0]; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#89: FILE: i386/kernel/smpboot.c:988:
+		u8 *here = (u8*)__lock_tbl_start[i];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#95: FILE: i386/kernel/smpboot.c:994:
+			printk("0x%p is not 0xf0 (lock opcode)\n", here);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: i386/kernel/smpboot.c:1002:
+	printk("OK, made %ld modifications to kernel code.\n", count);

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#389: FILE: asm-i386/spinlock.h:204:
+#define read_unlock(rw)		asm volatile( \
+	"\n1:\tlock ; incl %0\n" \
+	".section .lock.init,\"a\"\n\t" \
+	".align 4\n\t" \
+	".long 1b\n" \
+	".previous" \
+	:"=m" ((rw)->lock) : : "memory")

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#395: FILE: asm-i386/spinlock.h:210:
+	:"=m" ((rw)->lock) : : "memory")
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#397: FILE: asm-i386/spinlock.h:212:
+#define write_unlock(rw)	asm volatile( \
+	"\n1:\tlock ; addl $" RW_LOCK_BIAS_STR ",%0\n" \
+	".section .lock.init,\"a\"\n\t" \
+	".align 4\n\t" \
+	".long 1b\n" \
+	".previous" \
+	:"=m" ((rw)->lock) : : "memory")

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#403: FILE: asm-i386/spinlock.h:218:
+	:"=m" ((rw)->lock) : : "memory")
 	^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 13 warnings, 2 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
