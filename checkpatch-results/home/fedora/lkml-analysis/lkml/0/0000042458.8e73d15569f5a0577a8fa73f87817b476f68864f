WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#40: 
8- LTTng architecture independant instrumentation
                      ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/fs/buffer.c

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#65: FILE: fs/buffer.c:94:
+	trace_fs_buf_wait_start((void*)bh);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#67: FILE: fs/buffer.c:96:
+	trace_fs_buf_wait_end((void*)bh);

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: fs/compat.c:1567:
+			int i;
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#109: FILE: fs/compat.c:1567:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {
 			     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#109: FILE: fs/compat.c:1567:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: fs/compat.c:1567:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: fs/compat.c:1568:
+				if(current->ltt_facilities[i] == 0) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#110: FILE: fs/compat.c:1568:
+				if(current->ltt_facilities[i] == 0) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#111: FILE: fs/compat.c:1569:
+				WARN_ON(ltt_facility_unregister(

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: fs/exec.c:1219:
+			int i;
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#159: FILE: fs/exec.c:1219:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {
 			     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#159: FILE: fs/exec.c:1219:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: fs/exec.c:1219:
+			for(i=0; i<LTT_FAC_PER_PROCESS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: fs/exec.c:1220:
+				if(current->ltt_facilities[i] == 0) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#160: FILE: fs/exec.c:1220:
+				if(current->ltt_facilities[i] == 0) break;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#161: FILE: fs/exec.c:1221:
+				WARN_ON(ltt_facility_unregister(

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: fs/read_write.c:362:
+		if(ret > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/read_write.c:364:
+			lttng_sequence_fs_data_read_data lttng_data;
+			lttng_data.len = min(LTT_LOG_RW_SIZE, ret);

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: fs/read_write.c:389:
+		if(ret > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: fs/read_write.c:391:
+			lttng_sequence_fs_data_write_data lttng_data;
+			lttng_data.len = min(LTT_LOG_RW_SIZE, ret);

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: fs/read_write.c:440:
+ ^I^Iif (file->f_mode & FMODE_PWRITE) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: fs/read_write.c:440:
+ ^I^Iif (file->f_mode & FMODE_PWRITE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: fs/read_write.c:440:
+ ^I^Iif (file->f_mode & FMODE_PWRITE) {$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#346: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#363: FILE: fs/select.c:244:
+													*timeout);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: ipc/msg.c:241:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#453: FILE: kernel/irq/handle.c:40:
+EXPORT_SYMBOL_GPL(irq_desc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: kernel/itimer.c:223:
+	trace_timer_set_itimer(which,
+			value->it_interval.tv_sec,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#577: FILE: kernel/softirq.c:97:
+			trace_kernel_soft_irq_entry((void*)(h - softirq_vec));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#579: FILE: kernel/softirq.c:99:
+			trace_kernel_soft_irq_exit((void*)(h - softirq_vec));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: kernel/softirq.c:270:
+				if (!test_and_clear_bit(TASKLET_STATE_SCHED,
+						&t->state))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#591: FILE: kernel/softirq.c:272:
+				trace_kernel_tasklet_entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#594: FILE: kernel/softirq.c:275:
+				trace_kernel_tasklet_exit(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: kernel/softirq.c:308:
+				if (!test_and_clear_bit(TASKLET_STATE_SCHED,
+						&t->state))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#607: FILE: kernel/softirq.c:310:
+				trace_kernel_tasklet_entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: kernel/softirq.c:313:
+				trace_kernel_tasklet_exit(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: kernel/module.c:2051:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#694: FILE: kernel/module.c:2058:
+		trace_statedump_enumerate_modules(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#747: FILE: mm/memory.c:1886:
+		trace_memory_swap_in((void*)address);

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: net/ipv4/devinet.c:1026:
+^I^I ^Istruct in_ifaddr **ifap = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#848: FILE: net/ipv4/devinet.c:1026:
+^I^I ^Istruct in_ifaddr **ifap = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: net/ipv4/devinet.c:1027:
+^I^I ^Istruct in_ifaddr *ifa = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#849: FILE: net/ipv4/devinet.c:1027:
+^I^I ^Istruct in_ifaddr *ifa = NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#850: FILE: net/ipv4/devinet.c:1028:
+			for (ifap = &in_dev->ifa_list; (ifa = *ifap) != NULL;
[...]
+			  trace_network_ip_interface_dev_up(ifa->ifa_label, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: net/ipv4/devinet.c:1029:
+^I^I^I     ^I^I^I^Iifap = &ifa->ifa_next) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#851: FILE: net/ipv4/devinet.c:1029:
+^I^I^I     ^I^I^I^Iifap = &ifa->ifa_next) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#851: FILE: net/ipv4/devinet.c:1029:
+^I^I^I     ^I^I^I^Iifap = &ifa->ifa_next) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#852: FILE: net/ipv4/devinet.c:1030:
+^I^I^I  trace_network_ip_interface_dev_up(ifa->ifa_label, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: net/ipv4/devinet.c:1031:
+			  trace_network_ip_interface_dev_up(ifa->ifa_label, 
+							ifa->ifa_address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: net/socket.c:607:
+	trace_socket_sendmsg(sock, sock->sk->sk_family,
+		sock->sk->sk_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: net/socket.c:664:
+	trace_socket_recvmsg(sock, sock->sk->sk_family,
+		sock->sk->sk_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: net/socket.c:1263:
+	trace_socket_create(sock, family,
+		type,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042458.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 15 warnings, 14 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042458.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
