ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: Documentation/MSI-HOWTO.txt:10:
+This guide describes the basics of Message Signaled Interrupts (MSI), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: Documentation/MSI-HOWTO.txt:11:
+the advantages of using MSI over traditional interrupt mechanisms, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: Documentation/MSI-HOWTO.txt:12:
+and how to enable your driver to use MSI or MSI-X. Also included is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: Documentation/MSI-HOWTO.txt:101:
+To allow MSI/MSI-X capable device drivers to selectively enable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: Documentation/MSI-HOWTO.txt:102:
+MSI/MSI-X (using pci_enable_msi()/pci_enable_msix() as described $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: Documentation/MSI-HOWTO.txt:103:
+below), the VECTOR based scheme needs to be enabled by setting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: Documentation/MSI-HOWTO.txt:115:
+capability structure requires a device driver to call the function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: Documentation/MSI-HOWTO.txt:116:
+pci_enable_msi() explicitly. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: Documentation/MSI-HOWTO.txt:137:
+the pre-assigned IOAPIC vector and switches a device's interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: Documentation/MSI-HOWTO.txt:138:
+mode to PCI pin-irq assertion/INTx emulation mode.    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: Documentation/MSI-HOWTO.txt:141:
+it has done request_irq() on before calling this API. Failure to do  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: Documentation/MSI-HOWTO.txt:142:
+so results a BUG_ON() and a device will be left with MSI enabled and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: Documentation/MSI-HOWTO.txt:143:
+leaks its vector. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: Documentation/MSI-HOWTO.txt:161:
+in this context means PCI pin-irq assertion or PCI-Express INTx $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: Documentation/MSI-HOWTO.txt:162:
+emulation. A successful MSI request (using pci_enable_msi()) switches $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: Documentation/MSI-HOWTO.txt:164:
+stored in dev->irq will be saved by the PCI subsystem and a new $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: Documentation/MSI-HOWTO.txt:165:
+assigned MSI vector will replace dev->irq. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: Documentation/MSI-HOWTO.txt:170:
+request_irq() on before calling pci_disable_msi(). Failure to do so $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: Documentation/MSI-HOWTO.txt:171:
+results a BUG_ON() and a device will be left with MSI enabled and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: Documentation/MSI-HOWTO.txt:174:
+MSI vector as unused. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: Documentation/MSI-HOWTO.txt:176:
+Once being marked as unused, there is no guarantee that the PCI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: Documentation/MSI-HOWTO.txt:177:
+subsystem will reserve this MSI vector for a device. Depending on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: Documentation/MSI-HOWTO.txt:178:
+the availability of current PCI vector resources and the number of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: Documentation/MSI-HOWTO.txt:179:
+MSI/MSI-X requests from other drivers, this MSI may be re-assigned. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: Documentation/MSI-HOWTO.txt:181:
+For the case where the PCI subsystem re-assigned this MSI vector $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: Documentation/MSI-HOWTO.txt:182:
+another driver, a request to switching back to MSI mode may result $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: Documentation/MSI-HOWTO.txt:183:
+in being assigned a different MSI vector or a failure if no more $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: Documentation/MSI-HOWTO.txt:184:
+vectors are available.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: Documentation/MSI-HOWTO.txt:189:
+the MSI-X capability structure with an independent message address $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: Documentation/MSI-HOWTO.txt:191:
+the existing Linux kernel has no impact on supporting multiple $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: Documentation/MSI-HOWTO.txt:192:
+messages on an MSI-X capable device functions. To enable MSI-X on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: Documentation/MSI-HOWTO.txt:193:
+a device function's MSI-X capability structure requires its device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: Documentation/MSI-HOWTO.txt:198:
+resources. If the PCI vector resources are available for the number $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: Documentation/MSI-HOWTO.txt:199:
+of vectors requested by a device driver, this function will configure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: Documentation/MSI-HOWTO.txt:201:
+requested messages. To emphasize this reason, for example, a device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: Documentation/MSI-HOWTO.txt:202:
+may be capable for supporting the maximum of 32 vectors while its $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: Documentation/MSI-HOWTO.txt:204:
+that the device driver should call this function once during the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: Documentation/MSI-HOWTO.txt:207:
+Unlike the function pci_enable_msi(), the function pci_enable_msix() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: Documentation/MSI-HOWTO.txt:208:
+does not replace the pre-assigned IOAPIC dev->irq with a new MSI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: Documentation/MSI-HOWTO.txt:210:
+into the field vector of each element contained in a second argument. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/MSI-HOWTO.txt:214:
+may result unpredictabe behavior. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: Documentation/MSI-HOWTO.txt:216:
+For each MSI-X vector granted, a device driver is responsible to call $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: Documentation/MSI-HOWTO.txt:218:
+this vector with its corresponding interrupt service handler. It is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: Documentation/MSI-HOWTO.txt:219:
+a device driver's choice to assign all vectors with the same $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: Documentation/MSI-HOWTO.txt:220:
+interrupt service handler or each vector with a unique interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: Documentation/MSI-HOWTO.txt:221:
+service handler. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: Documentation/MSI-HOWTO.txt:226:
+space for a device's MSI-X structure should be isolated so that the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: Documentation/MSI-HOWTO.txt:227:
+software system can set different page for controlling accesses to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: Documentation/MSI-HOWTO.txt:230:
+table/MSI-X PBA and MMIO address space of the MSI-X table/MSI-X PBA. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: Documentation/MSI-HOWTO.txt:231:
+A device driver is prohibited from requesting the MMIO address space $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: Documentation/MSI-HOWTO.txt:232:
+of the MSI-X table/MSI-X PBA. Otherwise, the PCI subsystem will fail $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: Documentation/MSI-HOWTO.txt:233:
+enabling MSI-X on its hardware device when it calls the function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: Documentation/MSI-HOWTO.txt:238:
+Determining the number of MSI-X vectors allocated to a function is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: Documentation/MSI-HOWTO.txt:240:
+devices populated in the system. The policy of allocating MSI-X $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: Documentation/MSI-HOWTO.txt:245:
+x = ^IThe number of available PCI vector resources by the time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: Documentation/MSI-HOWTO.txt:252:
+^INR_HP_RESERVED_VECTORS, for the case where the system is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: Documentation/MSI-HOWTO.txt:255:
+^Imeet their specific needs. $

WARNING:TYPO_SPELLING: 'pupulated' may be misspelled - perhaps 'populated'?
#320: FILE: Documentation/MSI-HOWTO.txt:262:
+z =	The number of MSI-X capable devices pupulated in the system.
    	                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: Documentation/MSI-HOWTO.txt:263:
+^IThis policy ensures that maximum (x - y) is distributed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: Documentation/MSI-HOWTO.txt:264:
+^Ievenly among MSI-X capable devices.^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: Documentation/MSI-HOWTO.txt:265:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: Documentation/MSI-HOWTO.txt:268:
+structure of a device as requested by its device driver, y/z is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: Documentation/MSI-HOWTO.txt:269:
+decremented accordingly.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: Documentation/MSI-HOWTO.txt:273:
+For the case where fewer MSI-X vectors are allocated to a function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: Documentation/MSI-HOWTO.txt:275:
+maximum number of MSI-X vectors available to the caller. A device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: Documentation/MSI-HOWTO.txt:277:
+in a return. For example, if a device driver requests 5 vectors, but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: Documentation/MSI-HOWTO.txt:278:
+the number of available vectors is 3 vectors, a value of 3 will be a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: Documentation/MSI-HOWTO.txt:279:
+return as a result of pci_enable_msix() call. A function could be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: Documentation/MSI-HOWTO.txt:280:
+designed for its driver to use only 3 MSI-X table entries as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: Documentation/MSI-HOWTO.txt:281:
+different combinations as ABC--, A-B-C, A--CB, etc. Note that this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: Documentation/MSI-HOWTO.txt:282:
+patch does not support multiple entries with the same vector. Such $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: Documentation/MSI-HOWTO.txt:285:
+pci_enable_msix(). Below are the reasons why supporting multiple $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: Documentation/MSI-HOWTO.txt:287:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: Documentation/MSI-HOWTO.txt:290:
+^I  software driver ISR. Attempting to walk through all MSI-X $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: Documentation/MSI-HOWTO.txt:291:
+^I  table entries (2048 max) to mask/unmask any match vector $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: Documentation/MSI-HOWTO.txt:292:
+^I  is an undesirable solution. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: Documentation/MSI-HOWTO.txt:295:
+^I  SMP affinity of any match vector is an undesirable solution. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: Documentation/MSI-HOWTO.txt:302:
+for enabling MSI-X messages on its hardware device. Depending on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: Documentation/MSI-HOWTO.txt:309:
+elements is indicated in argument nvec. The content of each element $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: Documentation/MSI-HOWTO.txt:317:
+A device driver is responsible for initializing the field entry of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: Documentation/MSI-HOWTO.txt:318:
+each element with unique entry supported by MSI-X table. Otherwise, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: Documentation/MSI-HOWTO.txt:319:
+-EINVAL will be returned as a result. A successful return of zero $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: Documentation/MSI-HOWTO.txt:320:
+indicates the PCI subsystem completes initializing each of requested $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: Documentation/MSI-HOWTO.txt:321:
+entries of the MSI-X table with message address and message data. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: Documentation/MSI-HOWTO.txt:322:
+Last but not least, the PCI subsystem will write the 1:1 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: Documentation/MSI-HOWTO.txt:323:
+vector-to-entry mapping into the field vector of each element. A $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: Documentation/MSI-HOWTO.txt:333:
+a failure. This failure may be a result of duplicate entries $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: Documentation/MSI-HOWTO.txt:342:
+when a device driver is unloading. Note that a device driver should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: Documentation/MSI-HOWTO.txt:343:
+always call free_irq() on all MSI-X vectors it has done request_irq() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: Documentation/MSI-HOWTO.txt:344:
+on before calling this API. Failure to do so results a BUG_ON() and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: Documentation/MSI-HOWTO.txt:345:
+a device will be left with MSI-X enabled and leaks its vectors. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: Documentation/MSI-HOWTO.txt:361:
+In Figure 2.0, a device operates by default in legacy mode. A $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: Documentation/MSI-HOWTO.txt:362:
+successful MSI-X request (using pci_enable_msix()) switches a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: Documentation/MSI-HOWTO.txt:364:
+stored in dev->irq will be saved by the PCI subsystem; however, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: Documentation/MSI-HOWTO.txt:365:
+unlike MSI mode, the PCI subsystem will not replace dev->irq with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: Documentation/MSI-HOWTO.txt:366:
+assigned MSI-X vector because the PCI subsystem already writes the 1:1 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: Documentation/MSI-HOWTO.txt:367:
+vector-to-entry mapping into the field vector of each element $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: Documentation/MSI-HOWTO.txt:371:
+pci_disable_msix() to undo the effect of pci_enable_msix(). Note that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: Documentation/MSI-HOWTO.txt:372:
+a device driver should always call free_irq() on all MSI-X vectors it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: Documentation/MSI-HOWTO.txt:373:
+has done request_irq() on before calling pci_disable_msix(). Failure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: Documentation/MSI-HOWTO.txt:374:
+to do so results a BUG_ON() and a device will be left with MSI-X $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: Documentation/MSI-HOWTO.txt:376:
+device function's interrupt mode from MSI-X mode to legacy mode and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: Documentation/MSI-HOWTO.txt:377:
+marks all allocated MSI-X vectors as unused. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: Documentation/MSI-HOWTO.txt:379:
+Once being marked as unused, there is no guarantee that the PCI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: Documentation/MSI-HOWTO.txt:380:
+subsystem will reserve these MSI-X vectors for a device. Depending on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: Documentation/MSI-HOWTO.txt:381:
+the availability of current PCI vector resources and the number of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: Documentation/MSI-HOWTO.txt:382:
+MSI/MSI-X requests from other drivers, these MSI-X vectors may be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: Documentation/MSI-HOWTO.txt:383:
+re-assigned. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: Documentation/MSI-HOWTO.txt:387:
+being assigned with another set of MSI-X vectors or a failure if no $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: Documentation/MSI-HOWTO.txt:388:
+more vectors are available.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: Documentation/MSI-HOWTO.txt:392:
+For the case where a function implements both MSI and MSI-X $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: Documentation/MSI-HOWTO.txt:395:
+wants MSI or MSI-X enabled on its hardware device. Once a device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: Documentation/MSI-HOWTO.txt:419:
+depend on BIOS support. This key independency enables MSI/MSI-X $

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#519: FILE: Documentation/MSI-HOWTO.txt:433:
+device funtion. The device function is now running on MSI/MSI-X mode.
        ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: Documentation/MSI-HOWTO.txt:437:
+At the driver level, a return of zero from the function call of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: Documentation/MSI-HOWTO.txt:439:
+its device function is initialized successfully and ready to run in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: Documentation/MSI-HOWTO.txt:444:
+MSI/MSI-X mode ("PCI MSI"/"PCI MSIX"). Below shows below MSI mode is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: Documentation/MSI-HOWTO.txt:445:
+enabled on a SCSI Adaptec 39320D Ultra320.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: drivers/pci/msi.c:168:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: drivers/pci/msi.c:201:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#623: FILE: drivers/pci/msi.c:288:
+static int msi_free_vector(struct pci_dev* dev, int vector, int reassign);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: drivers/pci/msi.c:303:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: drivers/pci/msi.c:321:
+^I^I^Iif (!msi_desc[vector]) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: drivers/pci/msi.c:322:
+^I^I^I      ^Ibreak;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: drivers/pci/msi.c:322:
+^I^I^I      ^Ibreak;^I$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#646: FILE: drivers/pci/msi.c:322:
+^I^I^I      ^Ibreak;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: drivers/pci/msi.c:329:
+^I^I}^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msi_desc[free_vector]"
#658: FILE: drivers/pci/msi.c:333:
+		if (msi_desc[free_vector] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: drivers/pci/msi.c:336:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: drivers/pci/msi.c:346:
+^I       ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#671: FILE: drivers/pci/msi.c:346:
+^I       ^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#683: FILE: drivers/pci/msi.c:383:
+		printk(KERN_INFO "WARNING: ALL VECTORS ARE BUSY\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: drivers/pci/msi.c:491:
+^I^I^Icontinue;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: drivers/pci/msi.c:508:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSIX) > 0) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: drivers/pci/msi.c:508:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSIX) > 0) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#722: FILE: drivers/pci/msi.c:508:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSIX) > 0) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: drivers/pci/msi.c:508:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSIX) > 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: drivers/pci/msi.c:548:
+^Idev->irq = vector;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: drivers/pci/msi.c:599:
+static int msix_capability_init(struct pci_dev *dev, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#791: FILE: drivers/pci/msi.c:607:
+ ^Iu16 control;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#791: FILE: drivers/pci/msi.c:607:
+ ^Iu16 control;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: drivers/pci/msi.c:607:
+ ^Iu16 control;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: drivers/pci/msi.c:610:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#855: FILE: drivers/pci/msi.c:625:
+	if (base == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: drivers/pci/msi.c:633:
+^I^I^Ibreak;^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#864: FILE: drivers/pci/msi.c:634:
+		if ((vector = get_msi_vector(dev)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: drivers/pci/msi.c:635:
+^I^I^Ibreak; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#865: FILE: drivers/pci/msi.c:635:
+^I^I^Ibreak; ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: drivers/pci/msi.c:637:
+ ^I^Ij = entries[i].entry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#867: FILE: drivers/pci/msi.c:637:
+ ^I^Ij = entries[i].entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: drivers/pci/msi.c:637:
+ ^I^Ij = entries[i].entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: drivers/pci/msi.c:638:
+ ^I^Ientries[i].vector = vector;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#868: FILE: drivers/pci/msi.c:638:
+ ^I^Ientries[i].vector = vector;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: drivers/pci/msi.c:638:
+ ^I^Ientries[i].vector = vector;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#870: FILE: drivers/pci/msi.c:640:
+ ^I^Ientry->msi_attrib.state = 0;^I^I/* Mark it not active */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#870: FILE: drivers/pci/msi.c:640:
+ ^I^Ientry->msi_attrib.state = 0;^I^I/* Mark it not active */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: drivers/pci/msi.c:640:
+ ^I^Ientry->msi_attrib.state = 0;^I^I/* Mark it not active */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#893: FILE: drivers/pci/msi.c:663:
+^I^Ientry->msi_attrib.current_cpu = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: drivers/pci/msi.c:666:
+^I^Iwritel(address.lo_address.value, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: drivers/pci/msi.c:667:
+		writel(address.lo_address.value, 
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: drivers/pci/msi.c:669:
+^I^Iwritel(address.hi_address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: drivers/pci/msi.c:670:
+		writel(address.hi_address, 
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: drivers/pci/msi.c:672:
+^I^Iwritel(*(u32*)&data, $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#904: FILE: drivers/pci/msi.c:672:
+		writel(*(u32*)&data, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: drivers/pci/msi.c:673:
+		writel(*(u32*)&data, 
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: drivers/pci/msi.c:688:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#963: FILE: drivers/pci/msi.c:710:
+	if ((status = msi_init()) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#970: FILE: drivers/pci/msi.c:713:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#970: FILE: drivers/pci/msi.c:713:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: drivers/pci/msi.c:713:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#970: FILE: drivers/pci/msi.c:713:
+   	if (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))

WARNING:TYPO_SPELLING: 'Sucess' may be misspelled - perhaps 'Success'?
#978: FILE: drivers/pci/msi.c:721:
+		/* Lookup Sucess */
 		          ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: drivers/pci/msi.c:726:
+^I^I^Imsi_desc[dev->irq]->msi_attrib.state = 0; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#983: FILE: drivers/pci/msi.c:726:
+^I^I^Imsi_desc[dev->irq]->msi_attrib.state = 0; ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: drivers/pci/msi.c:727:
+^I^I^Ivector_irq[dev->irq] = -1;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: drivers/pci/msi.c:737:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: drivers/pci/msi.c:737:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#994: FILE: drivers/pci/msi.c:737:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: drivers/pci/msi.c:737:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#994: FILE: drivers/pci/msi.c:737:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && 
[...]
+			printk(KERN_INFO "Can't enable MSI. Device already had MSI-X vectors assigned\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#994: FILE: drivers/pci/msi.c:737:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: drivers/pci/msi.c:738:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 && 
+		!msi_lookup_vector(dev, PCI_CAP_ID_MSIX)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#996: FILE: drivers/pci/msi.c:739:
+			printk(KERN_INFO "Can't enable MSI. Device already had MSI-X vectors assigned\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: drivers/pci/msi.c:741:
+^I^I^Ireturn -EINVAL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: drivers/pci/msi.c:742:
+^I}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1002: FILE: drivers/pci/msi.c:745:
+   ^I^Iif (!pos) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: drivers/pci/msi.c:745:
+   ^I^Iif (!pos) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1002: FILE: drivers/pci/msi.c:745:
+   ^I^Iif (!pos) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: drivers/pci/msi.c:745:
+   ^I^Iif (!pos) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: drivers/pci/msi.c:747:
+^I^Ielse if (nr_msix_devices > 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1005: FILE: drivers/pci/msi.c:748:
+^I^I^Inr_msix_devices--;^I/* Both MSI and MSI-X capable, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1006: FILE: drivers/pci/msi.c:749:
+			nr_msix_devices--;	/* Both MSI and MSI-X capable, 
+						   but choose enabling MSI */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1006: FILE: drivers/pci/msi.c:749:
+						   but choose enabling MSI */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1014: FILE: drivers/pci/msi.c:755:
+void pci_disable_msi(struct pci_dev* dev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: drivers/pci/msi.c:762:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1023: FILE: drivers/pci/msi.c:762:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: drivers/pci/msi.c:762:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1023: FILE: drivers/pci/msi.c:762:
+   	if (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: drivers/pci/msi.c:766:
+^Iif (!(control & PCI_MSI_FLAGS_ENABLE)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: drivers/pci/msi.c:768:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: drivers/pci/msi.c:777:
+^I^Iprintk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1064: FILE: drivers/pci/msi.c:777:
+		printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: drivers/pci/msi.c:778:
+		printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", 
+		dev->bus->number, PCI_SLOT(dev->devfn),	PCI_FUNC(dev->devfn),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1067: FILE: drivers/pci/msi.c:780:
+		BUG_ON(entry->msi_attrib.state > 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: drivers/pci/msi.c:789:
+		disable_msi_mode(dev, pci_find_capability(dev, PCI_CAP_ID_MSI),
+					PCI_CAP_ID_MSI);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: drivers/pci/msi.c:800:
+^Iif (entry && entry->dev) $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1147: FILE: drivers/pci/msi.c:805:
+static int msi_free_vector(struct pci_dev* dev, int vector, int reassign)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: drivers/pci/msi.c:835:
+^I^Iif (!reassign) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1187: FILE: drivers/pci/msi.c:836:
+^I^I^Iwritel(1, base + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1190: FILE: drivers/pci/msi.c:839:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: drivers/pci/msi.c:841:
+^I^I^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1201: FILE: drivers/pci/msi.c:850:
+   ^I^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: drivers/pci/msi.c:850:
+   ^I^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: drivers/pci/msi.c:850:
+   ^I^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: drivers/pci/msi.c:851:
+^I^I^Ipci_read_config_word(dev, msi_control_reg(pos), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1203: FILE: drivers/pci/msi.c:852:
+			pci_read_config_word(dev, msi_control_reg(pos), 
+				&control);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: drivers/pci/msi.c:855:
+			pci_read_config_dword(dev, msix_table_offset_reg(pos),
+				&table_offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1208: FILE: drivers/pci/msi.c:857:
+			phys_addr = pci_resource_start (dev, bir);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: drivers/pci/msi.c:858:
+^I^I^Iphys_addr += (u32)(table_offset & $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1211: FILE: drivers/pci/msi.c:860:
+			iounmap((void*)base);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1212: FILE: drivers/pci/msi.c:861:
+^I^I^Irelease_mem_region(phys_addr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: drivers/pci/msi.c:862:
+			release_mem_region(phys_addr, 
+				nr_entries * PCI_MSIX_ENTRY_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1226: FILE: drivers/pci/msi.c:875:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: drivers/pci/msi.c:893:
+^I^Ivector_irq[vector] = -1;^I^I/* Mark it busy */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: drivers/pci/msi.c:898:
+^I^I^Imsi_desc[vector]->msi_attrib.entry_nr =^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1251: FILE: drivers/pci/msi.c:900:
+			writel( readl(base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: drivers/pci/msi.c:901:
+^I^I^I^IPCI_MSIX_ENTRY_LOWER_ADDR_OFFSET), base + $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1255: FILE: drivers/pci/msi.c:904:
+			writel(	readl(base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: drivers/pci/msi.c:905:
+^I^I^I^IPCI_MSIX_ENTRY_UPPER_ADDR_OFFSET), base + $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1259: FILE: drivers/pci/msi.c:908:
+			writel( (readl(base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: drivers/pci/msi.c:910:
+^I^I^I^Ibase + (entries+i)->entry*PCI_MSIX_ENTRY_SIZE + $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: drivers/pci/msi.c:910:
+				base + (entries+i)->entry*PCI_MSIX_ENTRY_SIZE + 
 				               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1261: FILE: drivers/pci/msi.c:910:
+				base + (entries+i)->entry*PCI_MSIX_ENTRY_SIZE + 
 				                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1267: FILE: drivers/pci/msi.c:916:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: drivers/pci/msi.c:929:
+ * indicates the successful configuration of MSI-X capability structure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: drivers/pci/msi.c:930:
+ * with new allocated MSI-X vectors. A return of < 0 indicates a failure. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1288: FILE: drivers/pci/msi.c:932:
+ * of vectors available. Driver should use the returned value to re-send $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1292: FILE: drivers/pci/msi.c:935:
+int pci_enable_msix(struct pci_dev* dev, struct msix_entry *entries, int nvec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1306: FILE: drivers/pci/msi.c:944:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1307: FILE: drivers/pci/msi.c:945:
+	if ((status = msi_init()) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1309: FILE: drivers/pci/msi.c:947:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1323: FILE: drivers/pci/msi.c:950:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1327: FILE: drivers/pci/msi.c:954:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1331: FILE: drivers/pci/msi.c:958:
+^I$

WARNING:TYPO_SPELLING: 'Sucess' may be misspelled - perhaps 'Success'?
#1343: FILE: drivers/pci/msi.c:970:
+		/* Lookup Sucess */
 		          ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1344: FILE: drivers/pci/msi.c:971:
+^I^Inr_entries = nvec;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1356: FILE: drivers/pci/msi.c:983:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSI) > 0 &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1356: FILE: drivers/pci/msi.c:983:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSI) > 0 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: drivers/pci/msi.c:983:
+   ^Iif (pci_find_capability(dev, PCI_CAP_ID_MSI) > 0 &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1357: FILE: drivers/pci/msi.c:984:
+   	if (pci_find_capability(dev, PCI_CAP_ID_MSI) > 0 &&
+		!msi_lookup_vector(dev, PCI_CAP_ID_MSI)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1358: FILE: drivers/pci/msi.c:985:
+		printk(KERN_INFO "Can't enable MSI-X. Device already had MSI vector assigned\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1360: FILE: drivers/pci/msi.c:987:
+^I^Ireturn -EINVAL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1362: FILE: drivers/pci/msi.c:989:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: drivers/pci/msi.c:1011:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: drivers/pci/msi.c:1016:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1421: FILE: drivers/pci/msi.c:1020:
+void pci_disable_msix(struct pci_dev* dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: drivers/pci/msi.c:1024:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1429: FILE: drivers/pci/msi.c:1025:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1429: FILE: drivers/pci/msi.c:1025:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1429: FILE: drivers/pci/msi.c:1025:
+   ^Iif (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1429: FILE: drivers/pci/msi.c:1025:
+   	if (!dev || !(pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1435: FILE: drivers/pci/msi.c:1029:
+^Iif (!(control & PCI_MSIX_FLAGS_ENABLE)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1437: FILE: drivers/pci/msi.c:1031:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1448: FILE: drivers/pci/msi.c:1037:
+		vector = head = dev->irq;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1452: FILE: drivers/pci/msi.c:1041:
+^I^I^Iif (state) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1452: FILE: drivers/pci/msi.c:1041:
+			if (state) 
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1454: FILE: drivers/pci/msi.c:1043:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1467: FILE: drivers/pci/msi.c:1053:
+^I^I^Iprintk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1467: FILE: drivers/pci/msi.c:1053:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1468: FILE: drivers/pci/msi.c:1054:
+^I^I^Idev->bus->number, PCI_SLOT(dev->devfn),^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: drivers/pci/msi.c:1054:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", 
+			dev->bus->number, PCI_SLOT(dev->devfn),	

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1470: FILE: drivers/pci/msi.c:1056:
+			BUG_ON(warning > 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1473: FILE: drivers/pci/msi.c:1059:
+^I^I^Idisable_msi_mode(dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1474: FILE: drivers/pci/msi.c:1060:
+			disable_msi_mode(dev, 
+				pci_find_capability(dev, PCI_CAP_ID_MSIX),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1481: FILE: drivers/pci/msi.c:1063:
 
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1497: FILE: drivers/pci/msi.c:1080:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1512: FILE: drivers/pci/msi.c:1083:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1514: FILE: drivers/pci/msi.c:1085:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) > 0 &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1514: FILE: drivers/pci/msi.c:1085:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) > 0 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1514: FILE: drivers/pci/msi.c:1085:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) > 0 &&$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1514: FILE: drivers/pci/msi.c:1085:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) > 0 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1515: FILE: drivers/pci/msi.c:1086:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) > 0 &&
+		!msi_lookup_vector(dev, PCI_CAP_ID_MSI)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1539: FILE: drivers/pci/msi.c:1090:
+^I^Iif (state) { ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1539: FILE: drivers/pci/msi.c:1090:
+^I^Iif (state) { ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1540: FILE: drivers/pci/msi.c:1091:
+^I^I^Iprintk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1540: FILE: drivers/pci/msi.c:1091:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1541: FILE: drivers/pci/msi.c:1092:
+^I^I^Idev->bus->number, PCI_SLOT(dev->devfn),^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1541: FILE: drivers/pci/msi.c:1092:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on vector->%d\n", 
+			dev->bus->number, PCI_SLOT(dev->devfn),	

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1543: FILE: drivers/pci/msi.c:1094:
+			BUG_ON(state > 0);

CHECK:BRACES: Unbalanced braces around else statement
#1544: FILE: drivers/pci/msi.c:1095:
+		} else /* Release MSI vector assigned to this device */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1548: FILE: drivers/pci/msi.c:1099:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1548: FILE: drivers/pci/msi.c:1099:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1548: FILE: drivers/pci/msi.c:1099:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 &&$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1548: FILE: drivers/pci/msi.c:1099:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1549: FILE: drivers/pci/msi.c:1100:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) > 0 &&
+		!msi_lookup_vector(dev, PCI_CAP_ID_MSIX)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1552: FILE: drivers/pci/msi.c:1103:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1553: FILE: drivers/pci/msi.c:1104:
+		vector = head = dev->irq;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1565: FILE: drivers/pci/msi.c:1111:
+^I^I^Iif (state)  ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1565: FILE: drivers/pci/msi.c:1111:
+^I^I^Iif (state)  ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1578: FILE: drivers/pci/msi.c:1124:
+^I^I^Ipci_read_config_word(dev, msi_control_reg(pos), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1579: FILE: drivers/pci/msi.c:1125:
+			pci_read_config_word(dev, msi_control_reg(pos), 
+				&control);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1581: FILE: drivers/pci/msi.c:1127:
+			pci_read_config_dword(dev, msix_table_offset_reg(pos),
+				&table_offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1583: FILE: drivers/pci/msi.c:1129:
+			phys_addr = pci_resource_start (dev, bir);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: drivers/pci/msi.c:1130:
+^I^I^Iphys_addr += (u32)(table_offset & $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1586: FILE: drivers/pci/msi.c:1132:
+			iounmap((void*)base);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1589: FILE: drivers/pci/msi.c:1135:
+^I^I^Iprintk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1589: FILE: drivers/pci/msi.c:1135:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1590: FILE: drivers/pci/msi.c:1136:
+^I^I^I^Idev->bus->number, PCI_SLOT(dev->devfn),^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1590: FILE: drivers/pci/msi.c:1136:
+			printk(KERN_DEBUG "Driver[%d:%d:%d] unloaded wo doing free_irq on all vectors\n", 
+				dev->bus->number, PCI_SLOT(dev->devfn),	

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1592: FILE: drivers/pci/msi.c:1138:
+			BUG_ON(warning > 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1607: FILE: drivers/pci/msi.c:1146:
+EXPORT_SYMBOL(pci_enable_msix);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1608: FILE: drivers/pci/msi.c:1147:
+EXPORT_SYMBOL(pci_disable_msix);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1618: FILE: drivers/pci/msi.h:143:
+^I^I__u8^Istate^I: 1; ^I/* {0: free, 1: busy}^I^I  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1619: FILE: drivers/pci/msi.h:144:
+^I^I__u8^Ireserved: 1; ^I/* reserved^I^I^I  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1632: FILE: include/linux/pci.h:835:
+^Iu16 ^Ivector;^I/* kernel uses to write allocated vector */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: include/linux/pci.h:843:
+static inline int pci_enable_msix(struct pci_dev* dev, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1640: FILE: include/linux/pci.h:843:
+static inline int pci_enable_msix(struct pci_dev* dev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1641: FILE: include/linux/pci.h:844:
+static inline int pci_enable_msix(struct pci_dev* dev, 
+	struct msix_entry *entries, int nvec) {return -1;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1641: FILE: include/linux/pci.h:844:
+	struct msix_entry *entries, int nvec) {return -1;}
 	                                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1647: FILE: include/linux/pci.h:850:
+extern void pci_disable_msi(struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1648: FILE: include/linux/pci.h:851:
+extern int pci_enable_msix(struct pci_dev* dev, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1648: FILE: include/linux/pci.h:851:
+extern int pci_enable_msix(struct pci_dev* dev, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1648: FILE: include/linux/pci.h:851:
+extern int pci_enable_msix(struct pci_dev* dev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1649: FILE: include/linux/pci.h:852:
+extern int pci_enable_msix(struct pci_dev* dev, 
+	struct msix_entry *entries, int nvec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1650: FILE: include/linux/pci.h:853:
+extern void pci_disable_msix(struct pci_dev *dev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 233 errors, 59 warnings, 33 checks, 1569 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
