WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#49: FILE: include/linux/mm.h:63:
+								 * For rollback support of sys_mlock series system calls.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#49: FILE: include/linux/mm.h:63:
+	int vm_wire_change;			/* VM_LOCKED bit of vm_flags was just changed.
+								 * For rollback support of sys_mlock series system calls.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/mm.h:709:
+extern int make_pages_wired(unsigned long addr, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#61: FILE: include/linux/mm.h:710:
unsigned long end);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: include/linux/mm.h:711:
+void make_pages_unwired(struct mm_struct *mm, unsigned long addr,
 extern int access_process_vm(struct task_struct *tsk, unsigned long

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: include/linux/mm.h:711:
+void make_pages_unwired(struct mm_struct *mm, unsigned long addr,
addr, void *buf, int len, int write);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: mm/memory.c:954:
+void make_pages_unwired(struct mm_struct *mm,
+					unsigned long start,unsigned long end)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: mm/memory.c:954:
+					unsigned long start,unsigned long end)
 					                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#89: FILE: mm/memory.c:960:
+	foll_flags =0;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#91: FILE: mm/memory.c:962:
+	vma=find_vma(mm,start);
 	   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: mm/memory.c:962:
+	vma=find_vma(mm,start);
 	               ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: mm/memory.c:963:
+	if(!vma)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: mm/memory.c:964:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: mm/memory.c:965:
+	if(is_vm_hugetlb_page(vma))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: mm/memory.c:967:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#97: FILE: mm/memory.c:968:
+	for(; start<end ; start+=PAGE_SIZE) {
 	           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#97: FILE: mm/memory.c:968:
+	for(; start<end ; start+=PAGE_SIZE) {
 	                       ^

ERROR:SPACING: space required before the open parenthesis '('
#97: FILE: mm/memory.c:968:
+	for(; start<end ; start+=PAGE_SIZE) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#98: FILE: mm/memory.c:969:
+		page=follow_page(vma,start,foll_flags);
 		    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: mm/memory.c:969:
+		page=follow_page(vma,start,foll_flags);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: mm/memory.c:969:
+		page=follow_page(vma,start,foll_flags);
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: mm/memory.c:970:
+		if(page)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: mm/memory.c:976:
+		unsigned long start, int len, int write,int force, int wire,
 		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: mm/memory.c:998:
+^I^I^Istruct page *page;^I$

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: mm/memory.c:1030:
+			if(wire)

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: mm/memory.c:1098:
+			if(wire)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: mm/memory.c:1111:
+static int zeromap_pte_range(struct mm_struct *mm, struct vm_area_struct *vma,
+			pmd_t *pmd, unsigned long addr, unsigned long end, pgprot_t prot)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: mm/memory.c:2346:
+	struct mm_struct *mm=current->mm;
 	                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: mm/memory.c:2361:
+	ret = get_user_pages(current, mm, addr,
+			len, write, 1, 1, NULL, NULL); /* write,set_wire */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#200: FILE: mm/memory.c:2363:
+	if(ret < len) {
+	    for(; addr< end ; addr += PAGE_SIZE) {

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: mm/memory.c:2363:
+	if(ret < len) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: mm/memory.c:2363:
+	if(ret < len) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#201: FILE: mm/memory.c:2364:
+	    for(; addr< end ; addr += PAGE_SIZE) {

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#201: FILE: mm/memory.c:2364:
+	    for(; addr< end ; addr += PAGE_SIZE) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: mm/memory.c:2364:
+	    for(; addr< end ; addr += PAGE_SIZE) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: mm/memory.c:2365:
+        ^Ipage=follow_page(vma,addr,0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: mm/memory.c:2365:
+        ^Ipage=follow_page(vma,addr,0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/memory.c:2365:
+        ^Ipage=follow_page(vma,addr,0);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#202: FILE: mm/memory.c:2365:
+        	page=follow_page(vma,addr,0);
         	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: mm/memory.c:2365:
+        	page=follow_page(vma,addr,0);
         	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: mm/memory.c:2365:
+        	page=follow_page(vma,addr,0);
         	                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: mm/memory.c:2366:
+            if(page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: mm/memory.c:2366:
+            if(page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 32)
#203: FILE: mm/memory.c:2366:
+            if(page)
+				unwire_page(page);

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: mm/memory.c:2366:
+            if(page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: mm/memory.c:2369:
+				BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: mm/memory.c:2370:
+   ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: mm/memory.c:2370:
+   ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: mm/memory.c:2370:
+   ^I^I}$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#210: FILE: mm/memory.c:2373:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093061.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 12 warnings, 7 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093061.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
