WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#74: FILE: drivers/ide/ide-disk.c:137:
+			return task_error(drive, rq, __FUNCTION__, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: drivers/ide/ide-disk.c:169:
+		printk("%s: write_intr error1: nr_sectors=%u, stat=0x%02x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_intr', this function's name, in a string
#138: FILE: drivers/ide/ide-disk.c:169:
+		printk("%s: write_intr error1: nr_sectors=%u, stat=0x%02x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/ide/ide-disk.c:170:
+		printk("%s: write_intr error1: nr_sectors=%u, stat=0x%02x\n",
+			drive->name, hwif->nleft, stat);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hwif->nleft == 0'
#148: FILE: drivers/ide/ide-disk.c:172:
+		if ((hwif->nleft == 0) ^ ((stat & DRQ_STAT) != 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#240: FILE: drivers/ide/ide-disk.c:185:
+	return task_error(drive, rq, __FUNCTION__, stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#290: FILE: drivers/ide/ide-disk.c:215:
+	return task_error(drive, rq, __FUNCTION__, stat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#392: FILE: drivers/ide/ide-taskfile.c:341:
+EXPORT_SYMBOL_GPL(ide_pio_sector);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: drivers/ide/ide-taskfile.c:352:
+EXPORT_SYMBOL_GPL(ide_pio_multi);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#427: FILE: drivers/ide/ide-taskfile.c:402:
+EXPORT_SYMBOL_GPL(task_error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/ide.h:1364:
+extern void ide_pio_sector(ide_drive_t *, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#466: FILE: include/linux/ide.h:1364:
+extern void ide_pio_sector(ide_drive_t *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#466: FILE: include/linux/ide.h:1364:
+extern void ide_pio_sector(ide_drive_t *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: include/linux/ide.h:1365:
+extern void ide_pio_multi(ide_drive_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#467: FILE: include/linux/ide.h:1365:
+extern void ide_pio_multi(ide_drive_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#467: FILE: include/linux/ide.h:1365:
+extern void ide_pio_multi(ide_drive_t *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/ide.h:1367:
+extern ide_startstop_t task_error(ide_drive_t *, struct request *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#469: FILE: include/linux/ide.h:1367:
+extern ide_startstop_t task_error(ide_drive_t *, struct request *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#469: FILE: include/linux/ide.h:1367:
+extern ide_startstop_t task_error(ide_drive_t *, struct request *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#469: FILE: include/linux/ide.h:1367:
+extern ide_startstop_t task_error(ide_drive_t *, struct request *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#469: FILE: include/linux/ide.h:1367:
+extern ide_startstop_t task_error(ide_drive_t *, struct request *, const char *, u8);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 16 warnings, 5 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
