WARNING:PATCH_PREFIX: patch prefix '..' exists, appears to be a -p0 patch

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#52: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:45:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootComplete>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <PktCmd>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#73: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:79:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <RIOAtVec2Ctrl>
#76: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:81:
+static const unsigned char RIOAtVec2Ctrl[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:109:
+int RIOBootCodeRTA(struct rio_info *p, struct DownLoad * rbp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeRTA>
#99: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:109:
+int RIOBootCodeRTA(struct rio_info *p, struct DownLoad * rbp)

CHECK:CAMELCASE: Avoid CamelCase: <DownLoad>
#99: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:109:
+int RIOBootCodeRTA(struct rio_info *p, struct DownLoad * rbp)

CHECK:CAMELCASE: Avoid CamelCase: <DataP>
#110: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:115:
+	rio_dprintk(RIO_DEBUG_BOOT, "Data at user address %p\n", rbp->DataP);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootPackets>
#135: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:146:
+	memset(p->RIOBootPackets, 0, offset);

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#143: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:152:
+	if (copy_from_user(((u8 *)p->RIOBootPackets) + offset, rbp->DataP, rbp->Count)) {

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#175: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:183:
+		writeb(BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF], &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#175: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:183:
+		writeb(BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF], &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <Ivec>
#175: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:183:
+		writeb(BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF], &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <xF>
#175: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:183:
+		writeb(BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF], &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <Control>
#175: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:183:
+		writeb(BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF], &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <PCITpBootFromRam>
#205: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:192:
+		writeb(PCITpBootFromRam | PCITpBusEnable | HostP->Mode, &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <PCITpBusEnable>
#205: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:192:
+		writeb(PCITpBootFromRam | PCITpBusEnable | HostP->Mode, &HostP->Control);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeHOST>
#226: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:209:
+int RIOBootCodeHOST(struct rio_info *p, struct DownLoad *rbp)

CHECK:CAMELCASE: Avoid CamelCase: <Cad>
#233: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:212:
+	u8 *Cad;

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#234: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:213:
+	PARM_MAP *ParmMapP;

CHECK:CAMELCASE: Avoid CamelCase: <RupN>
#235: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:214:
+	int RupN;

CHECK:CAMELCASE: Avoid CamelCase: <StartP>
#241: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:217:
+	u8 *StartP;

CHECK:CAMELCASE: Avoid CamelCase: <DestP>
#242: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:218:
+	u8 *DestP;

CHECK:CAMELCASE: Avoid CamelCase: <OldParmMap>
#248: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:220:
+	u16 OldParmMap;

CHECK:CAMELCASE: Avoid CamelCase: <DownCode>
#250: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:222:
+	u8 *DownCode = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:227:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOConf>
#281: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:252:
+		StartP = &Cad[p->RIOConf.HostLoadBase - rbp->Count];

CHECK:CAMELCASE: Avoid CamelCase: <HostLoadBase>
#281: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:252:
+		StartP = &Cad[p->RIOConf.HostLoadBase - rbp->Count];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#328: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:280:
+		/* Buffer to local memory as we want to use I/O space and
+		   some cards only do 8 or 16 bit I/O */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:280:
+		   some cards only do 8 or 16 bit I/O */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:281:
+^I^I   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOError>
#332: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:284:
+			p->RIOError.Error = NOT_ENOUGH_CORE_FOR_PCI_COPY;

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#332: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:284:
+			p->RIOError.Error = NOT_ENOUGH_CORE_FOR_PCI_COPY;

CHECK:CAMELCASE: Avoid CamelCase: <Copy>
#342: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:294:
+		HostP->Copy(DownCode, StartP, rbp->Count);

CHECK:SPACING: No space is necessary after a cast
#352: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:374:
+		DestP = (u8 *) &Cad[0x7FF8];	/* <<<---- READ THE ABOVE COMMENTS */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#367: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:391:
+		writeb(NFIX(((ushort) (~offset) >> (ushort) 12) & 0xF), DestP);

CHECK:CAMELCASE: Avoid CamelCase: <__ParmMapR>
#382: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:412:
+		OldParmMap = readw(&HostP->__ParmMapR);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#393: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:431:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && (readw(&HostP->__ParmMapR) == OldParmMap); wait_count++) {

CHECK:CAMELCASE: Avoid CamelCase: <StartupTime>
#393: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:431:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && (readw(&HostP->__ParmMapR) == OldParmMap); wait_count++) {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#394: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:432:
+			rio_dprintk(RIO_DEBUG_BOOT, "Checkout %d, 0x%x\n", wait_count, readw(&HostP->__ParmMapR));

ERROR:SPACING: space prohibited after that open parenthesis '('
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <RIOHostReset>
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <CardP>
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <Slot>
#412: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:446:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:SPACING: No space is necessary after a cast
#429: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:461:
+		ParmMapP = (PARM_MAP *) RIO_PTR(Cad, readw(&HostP->__ParmMapR));

CHECK:SPACING: No space is necessary after a cast
#431: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:463:
+		ParmMapP = (PARM_MAP *) ((unsigned long) Cad + readw(&HostP->__ParmMapR));

ERROR:SPACING: space prohibited after that open parenthesis '('
#448: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:476:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#448: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:476:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#462: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:488:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && !readw(&ParmMapP->init_done); wait_count++) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#477: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:499:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#477: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:499:
+			RIOHostReset( HostP->Type, (struct DpRam *)HostP->CardP, HostP->Slot );

CHECK:CAMELCASE: Avoid CamelCase: <Timer>
#488: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:513:
+		writew(p->RIOConf.Timer, &ParmMapP->timer);

CHECK:CAMELCASE: Avoid CamelCase: <PhbP>
#500: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:520:
+		HostP->PhbP = (PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#501: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:521:
+		HostP->RupP = (RUP *) RIO_PTR(Cad, readw(&ParmMapP->rups));

CHECK:SPACING: No space is necessary after a cast
#502: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:522:
+		HostP->PhbNumP = (ushort *) RIO_PTR(Cad, readw(&ParmMapP->phb_num_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <PhbNumP>
#502: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:522:
+		HostP->PhbNumP = (ushort *) RIO_PTR(Cad, readw(&ParmMapP->phb_num_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <LinkStrP>
#503: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:523:
+		HostP->LinkStrP = (LPB *) RIO_PTR(Cad, readw(&ParmMapP->link_str_ptr));

CHECK:SPACING: No space is necessary after a cast
#517: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:559:
+				PortP->TxAdd = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_add));

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#517: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:559:
+				PortP->TxAdd = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_add));

CHECK:CAMELCASE: Avoid CamelCase: <TxAdd>
#517: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:559:
+				PortP->TxAdd = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_add));

CHECK:SPACING: No space is necessary after a cast
#518: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:560:
+				PortP->TxStart = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_start));

CHECK:CAMELCASE: Avoid CamelCase: <TxStart>
#518: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:560:
+				PortP->TxStart = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_start));

CHECK:SPACING: No space is necessary after a cast
#519: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:561:
+				PortP->TxEnd = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_end));

CHECK:CAMELCASE: Avoid CamelCase: <TxEnd>
#519: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:561:
+				PortP->TxEnd = (u16 *) RIO_PTR(Cad, readw(&PhbP->tx_end));

CHECK:SPACING: No space is necessary after a cast
#520: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:562:
+				PortP->RxRemove = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_remove));

CHECK:CAMELCASE: Avoid CamelCase: <RxRemove>
#520: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:562:
+				PortP->RxRemove = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_remove));

CHECK:SPACING: No space is necessary after a cast
#521: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:563:
+				PortP->RxStart = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_start));

CHECK:CAMELCASE: Avoid CamelCase: <RxStart>
#521: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:563:
+				PortP->RxStart = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_start));

CHECK:SPACING: No space is necessary after a cast
#522: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:564:
+				PortP->RxEnd = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_end));

CHECK:CAMELCASE: Avoid CamelCase: <RxEnd>
#522: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:564:
+				PortP->RxEnd = (u16 *) RIO_PTR(Cad, readw(&PhbP->rx_end));

WARNING:TYPO_SPELLING: 'havent' may be misspelled - perhaps 'haven't'?
#547: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:606:
+ *	return 1. If we havent, then return 0.
   	                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:608:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:608:
+ $

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootRup>
#550: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:609:
+int RIOBootRup(struct rio_info *p, unsigned int Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#550: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:609:
+int RIOBootRup(struct rio_info *p, unsigned int Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#574: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:630:
+	if ((readb(&PacketP->len) & PKT_CMD_BIT) && (readb(&PktCmdP->Command) == BOOT_COMPLETED))

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#596: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:660:
+			rio_dprintk(RIO_DEBUG_BOOT, "Unexpected command %d on BOOT RUP %d of host %Zd\n", readb(&PktCmdP->Command), Rup, HostP - p->RIOHosts);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#596: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:660:
+			rio_dprintk(RIO_DEBUG_BOOT, "Unexpected command %d on BOOT RUP %d of host %Zd\n", readb(&PktCmdP->Command), Rup, HostP - p->RIOHosts);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#596: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:660:
+			rio_dprintk(RIO_DEBUG_BOOT, "Unexpected command %d on BOOT RUP %d of host %Zd\n", readb(&PktCmdP->Command), Rup, HostP - p->RIOHosts);

CHECK:SPACING: No space is necessary after a cast
#626: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:683:
+		memcpy((void *) &CmdBlkP->Packet.data[BOOT_SEQUENCE_LEN], "BOOT", 4);

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#626: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:683:
+		memcpy((void *) &CmdBlkP->Packet.data[BOOT_SEQUENCE_LEN], "BOOT", 4);

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#626: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:683:
+		memcpy((void *) &CmdBlkP->Packet.data[BOOT_SEQUENCE_LEN], "BOOT", 4);

WARNING:LONG_LINE: line length of 193 exceeds 100 columns
#629: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:685:
+		rio_dprintk(RIO_DEBUG_BOOT, "Boot RTA on Host %Zd Rup %d - %d (0x%x) packets to 0x%x\n", HostP - p->RIOHosts, Rup, p->RIONumBootPkts, p->RIONumBootPkts, p->RIOConf.RtaLoadBase);

CHECK:CAMELCASE: Avoid CamelCase: <RIONumBootPkts>
#629: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:685:
+		rio_dprintk(RIO_DEBUG_BOOT, "Boot RTA on Host %Zd Rup %d - %d (0x%x) packets to 0x%x\n", HostP - p->RIOHosts, Rup, p->RIONumBootPkts, p->RIONumBootPkts, p->RIOConf.RtaLoadBase);

CHECK:CAMELCASE: Avoid CamelCase: <RtaLoadBase>
#629: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:685:
+		rio_dprintk(RIO_DEBUG_BOOT, "Boot RTA on Host %Zd Rup %d - %d (0x%x) packets to 0x%x\n", HostP - p->RIOHosts, Rup, p->RIONumBootPkts, p->RIONumBootPkts, p->RIOConf.RtaLoadBase);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#629: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:685:
+		rio_dprintk(RIO_DEBUG_BOOT, "Boot RTA on Host %Zd Rup %d - %d (0x%x) packets to 0x%x\n", HostP - p->RIOHosts, Rup, p->RIONumBootPkts, p->RIONumBootPkts, p->RIOConf.RtaLoadBase);

CHECK:CAMELCASE: Avoid CamelCase: <Sequence>
#638: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:702:
+	sequence = readw(&PktCmdP->Sequence);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#641: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:704:
+	rio_dprintk(RIO_DEBUG_BOOT, "Boot block %d on Host %Zd Rup%d\n", sequence, HostP - p->RIOHosts, Rup);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#641: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:704:
+	rio_dprintk(RIO_DEBUG_BOOT, "Boot block %d on Host %Zd Rup%d\n", sequence, HostP - p->RIOHosts, Rup);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#652: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:711:
+	memcpy(PktReplyP->BootData, p->RIOBootPackets[p->RIONumBootPkts - sequence - 1], RTA_BOOT_DATA_SIZE);

CHECK:CAMELCASE: Avoid CamelCase: <PktReplyP>
#652: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:711:
+	memcpy(PktReplyP->BootData, p->RIOBootPackets[p->RIONumBootPkts - sequence - 1], RTA_BOOT_DATA_SIZE);

CHECK:CAMELCASE: Avoid CamelCase: <BootData>
#652: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:711:
+	memcpy(PktReplyP->BootData, p->RIOBootPackets[p->RIONumBootPkts - sequence - 1], RTA_BOOT_DATA_SIZE);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#679: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:730:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, unsigned int Rup, struct PktCmd *PktCmdP)

CHECK:CAMELCASE: Avoid CamelCase: <MyLink>
#690: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:740:
+	unsigned int MyLink;

CHECK:CAMELCASE: Avoid CamelCase: <RtaType>
#691: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:741:
+	unsigned short RtaType;

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#692: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:742:
+	u32 RtaUniq = (readb(&PktCmdP->UniqNum[0])) + (readb(&PktCmdP->UniqNum[1]) << 8) + (readb(&PktCmdP->UniqNum[2]) << 16) + (readb(&PktCmdP->UniqNum[3]) << 24);

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniq>
#692: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:742:
+	u32 RtaUniq = (readb(&PktCmdP->UniqNum[0])) + (readb(&PktCmdP->UniqNum[1]) << 8) + (readb(&PktCmdP->UniqNum[2]) << 16) + (readb(&PktCmdP->UniqNum[3]) << 24);

CHECK:CAMELCASE: Avoid CamelCase: <UniqNum>
#692: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:742:
+	u32 RtaUniq = (readb(&PktCmdP->UniqNum[0])) + (readb(&PktCmdP->UniqNum[1]) << 8) + (readb(&PktCmdP->UniqNum[2]) << 16) + (readb(&PktCmdP->UniqNum[3]) << 24);

CHECK:SPACING: No space is necessary after a cast
#710: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:753:
+	if (Rup >= (ushort) MAX_RUP)

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#711: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:754:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: Host %s has booted an RTA(%d) on link %c\n", HostP->Name, 8 * RtaType, readb(&PktCmdP->LinkNum) + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#711: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:754:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: Host %s has booted an RTA(%d) on link %c\n", HostP->Name, 8 * RtaType, readb(&PktCmdP->LinkNum) + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <LinkNum>
#711: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:754:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: Host %s has booted an RTA(%d) on link %c\n", HostP->Name, 8 * RtaType, readb(&PktCmdP->LinkNum) + 'A');

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#713: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:756:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: RTA %s has booted an RTA(%d) on link %c\n", HostP->Mapping[Rup].Name, 8 * RtaType, readb(&PktCmdP->LinkNum) + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <Mapping>
#713: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:756:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: RTA %s has booted an RTA(%d) on link %c\n", HostP->Mapping[Rup].Name, 8 * RtaType, readb(&PktCmdP->LinkNum) + 'A');

CHECK:SPACING: No space is necessary after a cast
#731: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:773:
+		if (Rup < (unsigned short) MAX_RUP) {

CHECK:BRACES: Unbalanced braces around else statement
#740: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:782:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <WaitNoBoot>
#748: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:788:
+			writew(30, &HostP->LinkStrP[MyLink].WaitNoBoot);

CHECK:SPACING: No space is necessary after a cast
#795: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:837:
+	if (Rup >= (unsigned short) MAX_RUP) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#813: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:872:
+				printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#813: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:872:
+				printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <MyType>
#813: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:872:
+				printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <MyName>
#813: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:872:
+				printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#822: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:993:
+				memcpy(HostP->Mapping[entry].Name, MapP->Name, MAX_NAME_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <MapP2>
#855: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1020:
+				memset(MapP2, 0, sizeof(struct Map));

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#855: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1020:
+				memset(MapP2, 0, sizeof(struct Map));

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#858: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1022:
+			memset(MapP, 0, sizeof(struct Map));
 			       ^^^^

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#861: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1024:
+				printk("An orphaned RTA has been adopted by %s '%s' (%c).\n", MyType, MyName, MyLink + 'A');

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#861: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1024:
+				printk("An orphaned RTA has been adopted by %s '%s' (%c).\n", MyType, MyName, MyLink + 'A');

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#864: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1026:
+			printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#864: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1026:
+			printk("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

WARNING:LONG_LINE: line length of 174 exceeds 100 columns
#873: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1037:
+		printk("The RTA connected to %s '%s' (%c) cannot be configured.  You cannot configure more than 128 ports to one host card.\n", MyType, MyName, MyLink + 'A');

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#873: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1037:
+		printk("The RTA connected to %s '%s' (%c) cannot be configured.  You cannot configure more than 128 ports to one host card.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootOk>
#885: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1064:
+int RIOBootOk(struct rio_info *p, struct Host *HostP, unsigned long RtaUniq)

CHECK:CAMELCASE: Avoid CamelCase: <HostUniq>
#889: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1067:
+	unsigned int HostUniq = HostP->UniqueNum;

CHECK:CAMELCASE: Avoid CamelCase: <UniqueNum>
#889: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1067:
+	unsigned int HostUniq = HostP->UniqueNum;

CHECK:CAMELCASE: Avoid CamelCase: <FillSlot>
#902: FILE: ../../../linux-2.6.15-mm2/drivers/char/rio/rioboot.c:1085:
+void FillSlot(int entry, int entry2, unsigned int RtaUniq, struct Host *HostP)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104337.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 31 warnings, 95 checks, 834 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104337.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
