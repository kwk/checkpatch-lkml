WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
> OK...you asked for it.  I found three separate bugs, two of them oopsed the

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: include/linux/stringify.h:13:
+#define ___cat(a,b) a ## b
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: include/linux/stringify.h:14:
+#define __cat(a,b) ___cat(a,b)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: include/linux/stringify.h:14:
+#define __cat(a,b) ___cat(a,b)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: include/linux/stringify.h:18:
+	__cat(__cat(__uniq,stem),__cat(__LINE__,KBUILD_BASENAME))
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: include/linux/stringify.h:18:
+	__cat(__cat(__uniq,stem),__cat(__LINE__,KBUILD_BASENAME))
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: include/linux/stringify.h:18:
+	__cat(__cat(__uniq,stem),__cat(__LINE__,KBUILD_BASENAME))
 	                                       ^

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pcxe_cleanup() should probably be void pcxe_cleanup(void)
#163: FILE: drivers/char/pcxx.c:214:
+static void pcxe_cleanup()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_hookfn' - possible side-effects?
#355: FILE: include/linux/netfilter.h:97:
+#define module_nf_hook(_prio, _hookfn, _pf, _hooknum, _hookprio)	     \
+ static struct nf_hook_ops __cat(nf_hook, _hookfn)			     \
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
+     .priority=_hookprio }; 						     \
+ static int __init __cat(nfh_reg, _hookfn)(void)			     \
+ {									     \
+ 	return nf_register_hook(&__cat(nf_hook, _hookfn));		     \
+ }									     \
+ static void __init __cat(nfh_unreg, _hookfn)(void)			     \
+ {									     \
+ 	nf_unregister_hook(&__cat(nf_hook, _hookfn));			     \
+ }									     \
+ module_init_exit(_prio, __cat(nfh_reg, _hookfn), __cat(nfh_unreg, _hookfn))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#355: FILE: include/linux/netfilter.h:97:
+#define module_nf_hook(_prio, _hookfn, _pf, _hooknum, _hookprio)	     \
+ static struct nf_hook_ops __cat(nf_hook, _hookfn)			     \
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
+     .priority=_hookprio }; 						     \
+ static int __init __cat(nfh_reg, _hookfn)(void)			     \
+ {									     \
+ 	return nf_register_hook(&__cat(nf_hook, _hookfn));		     \
+ }									     \
+ static void __init __cat(nfh_unreg, _hookfn)(void)			     \
+ {									     \
+ 	nf_unregister_hook(&__cat(nf_hook, _hookfn));			     \
+ }									     \
+ module_init_exit(_prio, __cat(nfh_reg, _hookfn), __cat(nfh_unreg, _hookfn))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/netfilter.h:98:
+ static struct nf_hook_ops __cat(nf_hook, _hookfn)^I^I^I     \$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#357: FILE: include/linux/netfilter.h:99:
+ static struct nf_hook_ops __cat(nf_hook, _hookfn)			     \
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/netfilter.h:99:
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,^I     \$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: include/linux/netfilter.h:99:
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: include/linux/netfilter.h:99:
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: include/linux/netfilter.h:99:
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: include/linux/netfilter.h:99:
+ = { .hook=_hookfn, .owner=THIS_MODULE, .pf=_pf, .hooknum=_hooknum,	     \
                                                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: include/linux/netfilter.h:100:
+     .priority=_hookprio }; ^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/linux/netfilter.h:100:
+     .priority=_hookprio }; ^I^I^I^I^I^I     \$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#358: FILE: include/linux/netfilter.h:100:
+     .priority=_hookprio }; 						     \
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: include/linux/netfilter.h:101:
+ static int __init __cat(nfh_reg, _hookfn)(void)^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: include/linux/netfilter.h:102:
+ {^I^I^I^I^I^I^I^I^I     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: include/linux/netfilter.h:103:
+ ^Ireturn nf_register_hook(&__cat(nf_hook, _hookfn));^I^I     \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: include/linux/netfilter.h:103:
+ ^Ireturn nf_register_hook(&__cat(nf_hook, _hookfn));^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: include/linux/netfilter.h:103:
+ ^Ireturn nf_register_hook(&__cat(nf_hook, _hookfn));^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: include/linux/netfilter.h:104:
+ }^I^I^I^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: include/linux/netfilter.h:105:
+ static void __init __cat(nfh_unreg, _hookfn)(void)^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: include/linux/netfilter.h:106:
+ {^I^I^I^I^I^I^I^I^I     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: include/linux/netfilter.h:107:
+ ^Inf_unregister_hook(&__cat(nf_hook, _hookfn));^I^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: include/linux/netfilter.h:107:
+ ^Inf_unregister_hook(&__cat(nf_hook, _hookfn));^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: include/linux/netfilter.h:107:
+ ^Inf_unregister_hook(&__cat(nf_hook, _hookfn));^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: include/linux/netfilter.h:108:
+ }^I^I^I^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: include/linux/netfilter.h:109:
+ module_init_exit(_prio, __cat(nfh_reg, _hookfn), __cat(nfh_unreg, _hookfn))$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#378: FILE: include/linux/netfilter.h:185:
+#define module_nf_hook(prio, hookfn, pf, hooknum, hookprio)	\
+static inline nf_hookfn *__unique_id(hookfn) { return hookfn; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hookfn' - possible side-effects?
#378: FILE: include/linux/netfilter.h:185:
+#define module_nf_hook(prio, hookfn, pf, hooknum, hookprio)	\
+static inline nf_hookfn *__unique_id(hookfn) { return hookfn; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#378: FILE: include/linux/netfilter.h:185:
+#define module_nf_hook(prio, hookfn, pf, hooknum, hookprio)	\
+static inline nf_hookfn *__unique_id(hookfn) { return hookfn; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#398: FILE: include/linux/proc_fs.h:195:
+#define module_proc_net(prio, name, fn)					     \
+static int __cat(_proc_net_init,fn)(void)				     \
+{									     \
+	struct proc_dir_entry *proc = proc_net_create(name, 0, fn);	     \
+	if (!proc)							     \
+		return -EINVAL;						     \
+	proc->owner = THIS_MODULE;					     \
+	return 0;							     \
+}									     \
+static void __cat(_proc_net_exit,fn)(void)				     \
+{									     \
+	proc_net_remove(name);						     \
+}									     \
+module_init_exit(prio, __cat(_proc_net_init,fn), __cat(_proc_net_exit,fn))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fn' - possible side-effects?
#398: FILE: include/linux/proc_fs.h:195:
+#define module_proc_net(prio, name, fn)					     \
+static int __cat(_proc_net_init,fn)(void)				     \
+{									     \
+	struct proc_dir_entry *proc = proc_net_create(name, 0, fn);	     \
+	if (!proc)							     \
+		return -EINVAL;						     \
+	proc->owner = THIS_MODULE;					     \
+	return 0;							     \
+}									     \
+static void __cat(_proc_net_exit,fn)(void)				     \
+{									     \
+	proc_net_remove(name);						     \
+}									     \
+module_init_exit(prio, __cat(_proc_net_init,fn), __cat(_proc_net_exit,fn))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#398: FILE: include/linux/proc_fs.h:195:
+#define module_proc_net(prio, name, fn)					     \
+static int __cat(_proc_net_init,fn)(void)				     \
+{									     \
+	struct proc_dir_entry *proc = proc_net_create(name, 0, fn);	     \
+	if (!proc)							     \
+		return -EINVAL;						     \
+	proc->owner = THIS_MODULE;					     \
+	return 0;							     \
+}									     \
+static void __cat(_proc_net_exit,fn)(void)				     \
+{									     \
+	proc_net_remove(name);						     \
+}									     \
+module_init_exit(prio, __cat(_proc_net_init,fn), __cat(_proc_net_exit,fn))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: include/linux/proc_fs.h:196:
+static int __cat(_proc_net_init,fn)(void)				     \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#407: FILE: include/linux/proc_fs.h:204:
+static void __cat(_proc_net_exit,fn)(void)				     \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: include/linux/proc_fs.h:208:
+module_init_exit(prio, __cat(_proc_net_init,fn), __cat(_proc_net_exit,fn))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: include/linux/proc_fs.h:208:
+module_init_exit(prio, __cat(_proc_net_init,fn), __cat(_proc_net_exit,fn))
                                                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#420: FILE: include/linux/proc_fs.h:255:
+ * allow gcc 3.3+ to discard it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#421: FILE: include/linux/proc_fs.h:256:
+#define module_proc_net(prio, name, fn)     \
+static inline get_info_t *__unique_id(test_fntype)(void) { return fn; }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#438: FILE: net/ipv4/foo.c:1:
+#include <linux/types.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#448: FILE: net/ipv4/foo.c:11:
+#define HOOK(n) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#448: FILE: net/ipv4/foo.c:11:
+#define HOOK(n) 				\
+static int init##n(void)			\
+{						\
+	printk("foo: init %u\n", n);		\
+	if (n == fail_hook)			\
+		return -EINVAL;			\
+	return 0;				\
+}						\
+static void fini##n(void)			\
+{						\
+	printk("foo: fini %u\n", n);		\
+}						\
+module_init_exit(-n, init##n, fini##n)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: net/ipv4/foo.c:14:
+	printk("foo: init %u\n", n);		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#458: FILE: net/ipv4/foo.c:21:
+	printk("foo: fini %u\n", n);		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#472: FILE: net/ipv4/foo.c:35:
+	printk("foo: init module\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: net/ipv4/foo.c:41:
+	printk("foo: cleanup module\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#606: FILE: net/ipv4/netfilter/ip_conntrack_standalone.c:275:
+/* Connection tracking may drop packets, but never alters them, so
+   make it the first hook. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#606: FILE: net/ipv4/netfilter/ip_conntrack_standalone.c:275:
+   make it the first hook. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#611: FILE: net/ipv4/netfilter/ip_conntrack_standalone.c:280:
+module_nf_hook(0, ip_confirm, PF_INET, NF_IP_LOCAL_IN, NF_IP_PRI_LAST-1);
                                                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 29 warnings, 7 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
