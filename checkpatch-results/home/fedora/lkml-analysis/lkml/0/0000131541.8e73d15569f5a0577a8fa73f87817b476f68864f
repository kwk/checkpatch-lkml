WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#110: FILE: net/core/dev.c:3208:
+		n = ((num_online_cpus() / net_dma_count) + (i < (num_online_cpus() % net_dma_count) ? 1 : 0));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: net/core/dev.c:3210:
+		while(n) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#124: FILE: net/core/dev.c:3222:
+static void netdev_dma_event(struct dma_client *client, struct dma_chan *chan, enum dma_event_t event)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#165: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#170: FILE: net/core/user_dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#171: FILE: net/core/user_dma.c:2:
+/*
+  Copyright(c) 2004 - 2005 Intel Corporation

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#183: FILE: net/core/user_dma.c:14:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#184: FILE: net/core/user_dma.c:15:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#188: FILE: net/core/user_dma.c:19:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#188: FILE: net/core/user_dma.c:19:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'length' may be better as '(length)' to avoid precedence issues
#188: FILE: net/core/user_dma.c:19:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#193: FILE: net/core/user_dma.c:24:
+/*
+ * Lock down all the iovec pages needed for len bytes.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: net/core/user_dma.c:59:
+		+ (nr_iovecs * sizeof (struct dma_page_list))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#229: FILE: net/core/user_dma.c:60:
+		+ (iovec_pages_used * sizeof (struct page*)), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#229: FILE: net/core/user_dma.c:60:
+		+ (iovec_pages_used * sizeof (struct page*)), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#234: FILE: net/core/user_dma.c:65:
+	pages = (struct page **) &local_list->page_list[nr_iovecs];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#257: FILE: net/core/user_dma.c:88:
+		ret = get_user_pages(

CHECK:SPACING: No space is necessary after a cast
#260: FILE: net/core/user_dma.c:91:
+			(unsigned long) iov[i].iov_base,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#268: FILE: net/core/user_dma.c:99:
+		if (ret != page_list->nr_pages) {
+			goto mem_error;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: net/core/user_dma.c:124:
+		struct dma_page_list *page_list = &locked_list->page_list[i];
+		for (j = 0; j < page_list->nr_pages; j++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: net/core/user_dma.c:135:
+dma_memcpy_tokerneliovec(struct dma_chan *chan, struct iovec *iov,
+	unsigned char *kdata, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: net/core/user_dma.c:142:
+			int copy = min_t(unsigned int, iov->iov_len, len);
+			dma_cookie = dma_async_memcpy_buf_to_buf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#311: FILE: net/core/user_dma.c:142:
+			dma_cookie = dma_async_memcpy_buf_to_buf(

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#328: FILE: net/core/user_dma.c:159:
+/*
+ * We have already locked down the pages we will be using in the iovecs.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: net/core/user_dma.c:168:
+dma_memcpy_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, unsigned char *kdata, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: net/core/user_dma.c:203:
+			dma_cookie = dma_async_memcpy_buf_to_pg(chan,
+					page_list->pages[page_idx],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: net/core/user_dma.c:223:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: net/core/user_dma.c:229:
+dma_memcpy_pg_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, struct page *page,

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: net/core/user_dma.c:243:
+		u8 *vaddr = kmap(page);
+		err = memcpy_toiovec(iov, vaddr + offset, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: net/core/user_dma.c:268:
+			dma_cookie = dma_async_memcpy_pg_to_pg(chan,
+					page_list->pages[page_idx],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: net/core/user_dma.c:289:
+	BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#482: FILE: net/core/user_dma.c:313:
+dma_skb_copy_datagram_iovec(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#498: FILE: net/core/user_dma.c:329:
+		if ((cookie = dma_memcpy_toiovec(chan, to, locked_list,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: net/core/user_dma.c:330:
+		if ((cookie = dma_memcpy_toiovec(chan, to, locked_list,
+		     skb->data + offset, copy)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#501: FILE: net/core/user_dma.c:332:
+		if ((len -= copy) == 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#513: FILE: net/core/user_dma.c:344:
+		if ((copy = end - offset) > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: net/core/user_dma.c:352:
+			cookie = dma_memcpy_pg_toiovec(chan, to, locked_list, page,
+					frag->page_offset + offset - start, copy);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#524: FILE: net/core/user_dma.c:355:
+			if (!(len -= copy))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#540: FILE: net/core/user_dma.c:371:
+			if ((copy = end - offset) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#543: FILE: net/core/user_dma.c:374:
+				if ((cookie = dma_skb_copy_datagram_iovec(chan, list,

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: net/core/user_dma.c:375:
+^I^I^I^I^I        offset - start, to, copy, locked_list)) < 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: net/core/user_dma.c:375:
+				if ((cookie = dma_skb_copy_datagram_iovec(chan, list,
+					        offset - start, to, copy, locked_list)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#546: FILE: net/core/user_dma.c:377:
+				if ((len -= copy) == 0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#556: FILE: net/core/user_dma.c:387:
+#if 0

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: net/core/user_dma.c:394:
+ ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#563: FILE: net/core/user_dma.c:394:
+ ^Ireturn -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: net/core/user_dma.c:394:
+ ^Ireturn -EFAULT;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#577: FILE: net/core/user_dma.c:408:
+dma_unlock_iovec_pages(struct dma_locked_list* locked_list)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000131541.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 21 warnings, 16 checks, 545 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000131541.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
