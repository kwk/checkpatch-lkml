WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
<linux/namei.h> which is now directly included by the 24 files that actually

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: include/linux/namei.h:1:
+#ifndef _LINUX_NAMEI_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'compnents' may be misspelled - perhaps 'components'?
#387: FILE: include/linux/namei.h:26:
+ *  - internal "there are more path compnents" flag
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: include/linux/namei.h:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: include/linux/namei.h:36:
+extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: include/linux/namei.h:36:
+extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#397: FILE: include/linux/namei.h:36:
+extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#397: FILE: include/linux/namei.h:36:
+extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#397: FILE: include/linux/namei.h:36:
+extern int FASTCALL(__user_walk(const char *, unsigned, struct nameidata *));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#398: FILE: include/linux/namei.h:37:
+#define user_path_walk(name,nd) \
                             ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: include/linux/namei.h:37:
+#define user_path_walk(name,nd) \
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#399: FILE: include/linux/namei.h:38:
+	__user_walk(name, LOOKUP_FOLLOW, nd)
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#400: FILE: include/linux/namei.h:39:
+#define user_path_walk_link(name,nd) \
                                  ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: include/linux/namei.h:39:
+#define user_path_walk_link(name,nd) \
                                 ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#401: FILE: include/linux/namei.h:40:
+	__user_walk(name, 0, nd)
 	                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#402: FILE: include/linux/namei.h:41:
+extern int FASTCALL(path_init(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: include/linux/namei.h:41:
+extern int FASTCALL(path_init(const char *, unsigned, struct nameidata *));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#403: FILE: include/linux/namei.h:42:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/namei.h:42:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#403: FILE: include/linux/namei.h:42:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#403: FILE: include/linux/namei.h:42:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#403: FILE: include/linux/namei.h:42:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: include/linux/namei.h:43:
+extern int FASTCALL(path_walk(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#404: FILE: include/linux/namei.h:43:
+extern int FASTCALL(path_walk(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#404: FILE: include/linux/namei.h:43:
+extern int FASTCALL(path_walk(const char *, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/namei.h:44:
+extern int FASTCALL(link_path_walk(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#405: FILE: include/linux/namei.h:44:
+extern int FASTCALL(link_path_walk(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#405: FILE: include/linux/namei.h:44:
+extern int FASTCALL(link_path_walk(const char *, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#406: FILE: include/linux/namei.h:45:
+extern void path_release(struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#406: FILE: include/linux/namei.h:45:
+extern void path_release(struct nameidata *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: include/linux/namei.h:47:
+extern struct dentry * lookup_one_len(const char *, struct dentry *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: include/linux/namei.h:47:
+extern struct dentry * lookup_one_len(const char *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#408: FILE: include/linux/namei.h:47:
+extern struct dentry * lookup_one_len(const char *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#408: FILE: include/linux/namei.h:47:
+extern struct dentry * lookup_one_len(const char *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#408: FILE: include/linux/namei.h:47:
+extern struct dentry * lookup_one_len(const char *, struct dentry *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#409: FILE: include/linux/namei.h:48:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/linux/namei.h:48:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#409: FILE: include/linux/namei.h:48:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#409: FILE: include/linux/namei.h:48:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: include/linux/namei.h:50:
+extern int follow_down(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#411: FILE: include/linux/namei.h:50:
+extern int follow_down(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#411: FILE: include/linux/namei.h:50:
+extern int follow_down(struct vfsmount **, struct dentry **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/namei.h:51:
+extern int follow_up(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#412: FILE: include/linux/namei.h:51:
+extern int follow_up(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#412: FILE: include/linux/namei.h:51:
+extern int follow_up(struct vfsmount **, struct dentry **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#414: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#414: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct dentry *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#415: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#415: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct dentry *, struct dentry *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 34 warnings, 13 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
