WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
It's based on a kernel 2.4 driver (cyport) by Marcus Maul which I ported to kernel 2.6 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: drivers/usb/misc/cy7c63.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#93: FILE: drivers/usb/misc/cy7c63.c:2:
+/*
+* cy7c63.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: drivers/usb/misc/cy7c63.c:50:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#143: FILE: drivers/usb/misc/cy7c63.c:52:
+static struct usb_device_id cy7c63_table [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#151: FILE: drivers/usb/misc/cy7c63.c:60:
+	struct usb_device *	udev;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: drivers/usb/misc/cy7c63.c:61:
+^Ichar ^I^I^Iport0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#157: FILE: drivers/usb/misc/cy7c63.c:66:
+int vendor_command(struct cy7c63 *dev, unsigned char request,
+			 unsigned char address, unsigned char data) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/usb/misc/cy7c63.c:67:
+int vendor_command(struct cy7c63 *dev, unsigned char request,
+			 unsigned char address, unsigned char data) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#159: FILE: drivers/usb/misc/cy7c63.c:68:
+			 unsigned char address, unsigned char data) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#167: FILE: drivers/usb/misc/cy7c63.c:76:
+	if (!iobuf) {
+		dev_err(&dev->udev->dev, "Out of memory!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: drivers/usb/misc/cy7c63.c:86:
+	retval = usb_control_msg(dev->udev, pipe, request,
+				USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_OTHER,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#182: FILE: drivers/usb/misc/cy7c63.c:91:
+	switch (request) {
+		case CY7C63_READ_PORT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: drivers/usb/misc/cy7c63.c:96:
+					"READ_PORT0 returned: %d\n",dev->port0);
 					                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#189: FILE: drivers/usb/misc/cy7c63.c:98:
+			}
+			else if (address == CY7C63_READ_PORT_ID1) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#192: FILE: drivers/usb/misc/cy7c63.c:101:
+					"READ_PORT1 returned: %d\n",dev->port1);
 					                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: drivers/usb/misc/cy7c63.c:111:
+#define get_set_port(num,read_id,write_id) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: drivers/usb/misc/cy7c63.c:111:
+#define get_set_port(num,read_id,write_id) \
                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num' - possible side-effects?
#202: FILE: drivers/usb/misc/cy7c63.c:111:
+#define get_set_port(num,read_id,write_id) \
+static ssize_t set_port##num(struct device *dev, struct device_attribute *attr,	\
+					const char *buf, size_t count) {	\
+										\
+	int value;								\
+	int result = 0;								\
+										\
+	struct usb_interface *intf = to_usb_interface(dev);			\
+	struct cy7c63 *cyp = usb_get_intfdata(intf);				\
+										\
+	dev_dbg(&cyp->udev->dev, "WRITE_PORT%d called\n", num);			\
+										\
+	/* validate input data */						\
+	if (sscanf(buf, "%d", &value) < 1) {					\
+		result = -EINVAL;						\
+		goto error;							\
+	}									\
+	if (value>255 || value<0) {						\
+		result = -EINVAL;						\
+		goto error;							\
+	}									\
+										\
+	result = vendor_command(cyp, CY7C63_WRITE_PORT, write_id,		\
+					 (unsigned char)value);			\
+										\
+	dev_dbg(&cyp->udev->dev, "Result of vendor_command: %d\n\n",result);	\
+error:										\
+	return result < 0 ? result : count;					\
+}										\
+										\
+static ssize_t get_port##num(struct device *dev,				\
+				 struct device_attribute *attr, char *buf) {	\
+										\
+	int result = 0;								\
+										\
+	struct usb_interface *intf = to_usb_interface(dev);			\
+	struct cy7c63 *cyp = usb_get_intfdata(intf);				\
+										\
+	dev_dbg(&cyp->udev->dev, "READ_PORT%d called\n", num);			\
+										\
+	result = vendor_command(cyp, CY7C63_READ_PORT, read_id, 0);		\
+										\
+	dev_dbg(&cyp->udev->dev, "Result of vendor_command: %d\n\n", result);	\
+										\
+	return sprintf(buf, "%d", cyp->port##num);				\
+}										\
+static DEVICE_ATTR(port##num, S_IWUGO | S_IRUGO, get_port##num, set_port##num);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#202: FILE: drivers/usb/misc/cy7c63.c:111:
+#define get_set_port(num,read_id,write_id) \
+static ssize_t set_port##num(struct device *dev, struct device_attribute *attr,	\
+					const char *buf, size_t count) {	\
+										\
+	int value;								\
+	int result = 0;								\
+										\
+	struct usb_interface *intf = to_usb_interface(dev);			\
+	struct cy7c63 *cyp = usb_get_intfdata(intf);				\
+										\
+	dev_dbg(&cyp->udev->dev, "WRITE_PORT%d called\n", num);			\
+										\
+	/* validate input data */						\
+	if (sscanf(buf, "%d", &value) < 1) {					\
+		result = -EINVAL;						\
+		goto error;							\
+	}									\
+	if (value>255 || value<0) {						\
+		result = -EINVAL;						\
+		goto error;							\
+	}									\
+										\
+	result = vendor_command(cyp, CY7C63_WRITE_PORT, write_id,		\
+					 (unsigned char)value);			\
+										\
+	dev_dbg(&cyp->udev->dev, "Result of vendor_command: %d\n\n",result);	\
+error:										\
+	return result < 0 ? result : count;					\
+}										\
+										\
+static ssize_t get_port##num(struct device *dev,				\
+				 struct device_attribute *attr, char *buf) {	\
+										\
+	int result = 0;								\
+										\
+	struct usb_interface *intf = to_usb_interface(dev);			\
+	struct cy7c63 *cyp = usb_get_intfdata(intf);				\
+										\
+	dev_dbg(&cyp->udev->dev, "READ_PORT%d called\n", num);			\
+										\
+	result = vendor_command(cyp, CY7C63_READ_PORT, read_id, 0);		\
+										\
+	dev_dbg(&cyp->udev->dev, "Result of vendor_command: %d\n\n", result);	\
+										\
+	return sprintf(buf, "%d", cyp->port##num);				\
+}										\
+static DEVICE_ATTR(port##num, S_IWUGO | S_IRUGO, get_port##num, set_port##num);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#203: FILE: drivers/usb/misc/cy7c63.c:112:
+static ssize_t set_port##num(struct device *dev, struct device_attribute *attr,	\
+					const char *buf, size_t count) {	\

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#215: FILE: drivers/usb/misc/cy7c63.c:124:
+	if (sscanf(buf, "%d", &value) < 1) {					\
+		result = -EINVAL;						\
+		goto error;							\
+	}									\

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#219: FILE: drivers/usb/misc/cy7c63.c:128:
+	if (value>255 || value<0) {						\
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#219: FILE: drivers/usb/misc/cy7c63.c:128:
+	if (value>255 || value<0) {						\
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#227: FILE: drivers/usb/misc/cy7c63.c:136:
+	dev_dbg(&cyp->udev->dev, "Result of vendor_command: %d\n\n",result);	\
 	                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#232: FILE: drivers/usb/misc/cy7c63.c:141:
+static ssize_t get_port##num(struct device *dev,				\
+				 struct device_attribute *attr, char *buf) {	\

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#248: FILE: drivers/usb/misc/cy7c63.c:157:
+static DEVICE_ATTR(port##num, S_IWUGO | S_IRUGO, get_port##num, set_port##num);

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO | S_IRUGO' are not preferred. Consider using octal permissions '0666'.
#248: FILE: drivers/usb/misc/cy7c63.c:157:
+static DEVICE_ATTR(port##num, S_IWUGO | S_IRUGO, get_port##num, set_port##num);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#253: FILE: drivers/usb/misc/cy7c63.c:162:
+static int cy7c63_probe(struct usb_interface *interface,
+			const struct usb_device_id *id) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#255: FILE: drivers/usb/misc/cy7c63.c:164:
+			const struct usb_device_id *id) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#261: FILE: drivers/usb/misc/cy7c63.c:170:
+	if (dev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#262: FILE: drivers/usb/misc/cy7c63.c:171:
+	if (dev == NULL) {
+		dev_err(&dev->udev->dev, "Out of memory!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/usb/misc/cy7c63.c:186:
+	dev_info(&interface->dev,
+		"Cypress CY7C63xxx device now attached\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#284: FILE: drivers/usb/misc/cy7c63.c:193:
+static void cy7c63_disconnect(struct usb_interface *interface) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#285: FILE: drivers/usb/misc/cy7c63.c:194:
+static void cy7c63_disconnect(struct usb_interface *interface) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: drivers/usb/misc/cy7c63.c:207:
+	dev_info(&interface->dev,
+		"Cypress CY7C63xxx device now disconnected\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#310: FILE: drivers/usb/misc/cy7c63.c:219:
+static int __init cy7c63_init(void) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#311: FILE: drivers/usb/misc/cy7c63.c:220:
+static int __init cy7c63_init(void) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#316: FILE: drivers/usb/misc/cy7c63.c:225:
+	if (result) {
+		err("Function usb_register failed! Error number: %d\n", result);
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#323: FILE: drivers/usb/misc/cy7c63.c:232:
+static void __exit cy7c63_exit(void) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#324: FILE: drivers/usb/misc/cy7c63.c:233:
+static void __exit cy7c63_exit(void) {
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070333.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 11 warnings, 12 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070333.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
