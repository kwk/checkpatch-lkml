WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#73: 
This also adds an existance test field to struct driver_attribute,
                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
 drivers/pci/pci-driver.c       |  267 +++++++++++++++++++++++++++++++++++++----

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#93: 
--- a/drivers/pci/Makefile	Thu May 22 14:54:18 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: drivers/pci/pci-driver.c:19:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#144: FILE: drivers/pci/pci-driver.c:48:
+		if (pci_match_one_device(ids, dev))
+		    return ids;

WARNING:TABSTOP: Statements should start on a tabstop
#145: FILE: drivers/pci/pci-driver.c:49:
+		    return ids;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: drivers/pci/pci-driver.c:57:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/pci/pci-driver.c:62:
+pci_device_probe_static(struct pci_driver *drv,
+			  struct pci_dev *pci_dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: drivers/pci/pci-driver.c:63:
+{^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/pci/pci-driver.c:66:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/pci/pci-driver.c:79:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/pci/pci-driver.c:85:
+pci_device_probe_dynamic(struct pci_driver *drv,
+			   struct pci_dev *pci_dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/pci/pci-driver.c:86:
+{^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: drivers/pci/pci-driver.c:90:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: drivers/pci/pci-driver.c:110:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/pci/pci-driver.c:117:
+{^I^I   $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#264: FILE: drivers/pci/pci-driver.c:197:
+	struct pci_dev *pci_dev=NULL;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: drivers/pci/pci-driver.c:199:
+	int error = 0;
+	pci_for_each_dev(pci_dev) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: drivers/pci/pci-driver.c:216:
+	int writeone = 0;
+	if (!((sscanf(buf, "%d", &writeone) == 1) && writeone == 1))

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#283: FILE: drivers/pci/pci-driver.c:216:
+	if (!((sscanf(buf, "%d", &writeone) == 1) && writeone == 1))
+		return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: drivers/pci/pci-driver.c:218:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: drivers/pci/pci-driver.c:232:
+	struct pci_driver *pdrv = to_pci_driver(driver);
+	return pdrv->probe != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdrv->probe"
#299: FILE: drivers/pci/pci-driver.c:232:
+	return pdrv->probe != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#302: FILE: drivers/pci/pci-driver.c:235:
+static DRIVER_ATTR_EXISTS(probe_it, S_IWUSR, NULL, store_probe_it, probe_it_exists);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#308: FILE: drivers/pci/pci-driver.c:241:
+pci_driver_attr_show(struct kobject * kobj, struct attribute *attr, char *buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: drivers/pci/pci-driver.c:256:
+pci_driver_attr_store(struct kobject * kobj, struct attribute *attr,

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#338: FILE: drivers/pci/pci-driver.c:271:
+static struct sysfs_ops pci_driver_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#342: FILE: drivers/pci/pci-driver.c:275:
+};
+static struct kobj_type pci_driver_kobj_type = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#345: FILE: drivers/pci/pci-driver.c:278:
+};
+static struct driver_attribute * driver_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: drivers/pci/pci-driver.c:278:
+static struct driver_attribute * driver_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#350: FILE: drivers/pci/pci-driver.c:283:
+static void pci_populate_driver_dir(struct pci_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: drivers/pci/pci-driver.c:285:
+	struct driver_attribute * attr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: drivers/pci/pci-driver.c:289:
+^I^Iif (!attr->exists || $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#358: FILE: drivers/pci/pci-driver.c:291:
+			error = sysfs_create_file(&drv->driver.kobj,&attr->attr);
 			                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#358: FILE: drivers/pci/pci-driver.c:291:
+			error = sysfs_create_file(&drv->driver.kobj,&attr->attr);
 			                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: drivers/pci/pci-driver.c:334:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: drivers/pci/pci-driver.c:390:
+	const struct pci_dev * pci_dev = to_pci_dev(dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: drivers/pci/pci-driver.c:401:
+^Iif (found_id) $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#435: FILE: drivers/pci/pci-sysfs-dynids.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#436: FILE: drivers/pci/pci-sysfs-dynids.c:2:
+ * linux/drivers/pci/pci-sysfs-dynids.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: drivers/pci/pci-sysfs-dynids.c:21:
+static int dynid_create_file(struct pci_driver * pdrv, struct dynid_attribute * dattr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: drivers/pci/pci-sysfs-dynids.c:21:
+static int dynid_create_file(struct pci_driver * pdrv, struct dynid_attribute * dattr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: drivers/pci/pci-sysfs-dynids.c:25:
+	if (get_driver(&pdrv->driver)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#460: FILE: drivers/pci/pci-sysfs-dynids.c:26:
+		error = sysfs_create_file(&pdrv->dynids.kobj,&dattr->attr);
 		                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#460: FILE: drivers/pci/pci-sysfs-dynids.c:26:
+		error = sysfs_create_file(&pdrv->dynids.kobj,&dattr->attr);
 		                                             ^

CHECK:BRACES: Unbalanced braces around else statement
#462: FILE: drivers/pci/pci-sysfs-dynids.c:28:
+	} else

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#470: FILE: drivers/pci/pci-sysfs-dynids.c:36:
+ *	@id:	the id to to remove

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: drivers/pci/pci-sysfs-dynids.c:38:
+static void dynid_remove_file(struct pci_driver * pdrv, struct dynid_attribute * dattr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: drivers/pci/pci-sysfs-dynids.c:38:
+static void dynid_remove_file(struct pci_driver * pdrv, struct dynid_attribute * dattr)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#475: FILE: drivers/pci/pci-sysfs-dynids.c:41:
+		sysfs_remove_file(&pdrv->dynids.kobj,&dattr->attr);
 		                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#475: FILE: drivers/pci/pci-sysfs-dynids.c:41:
+		sysfs_remove_file(&pdrv->dynids.kobj,&dattr->attr);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: drivers/pci/pci-sysfs-dynids.c:46:
+#define kobj_to_dynids(obj) container_of(obj,struct pci_dynamic_id_kobj,kobj)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: drivers/pci/pci-sysfs-dynids.c:46:
+#define kobj_to_dynids(obj) container_of(obj,struct pci_dynamic_id_kobj,kobj)
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#481: FILE: drivers/pci/pci-sysfs-dynids.c:47:
+#define dynids_to_pci_driver(obj) container_of(obj,struct pci_driver,dynids)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#481: FILE: drivers/pci/pci-sysfs-dynids.c:47:
+#define dynids_to_pci_driver(obj) container_of(obj,struct pci_driver,dynids)
                                                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#485: FILE: drivers/pci/pci-sysfs-dynids.c:51:
+default_show_id(const struct pci_device_id * id, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#485: FILE: drivers/pci/pci-sysfs-dynids.c:51:
+default_show_id(const struct pci_device_id * id, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: drivers/pci/pci-sysfs-dynids.c:63:
+dynid_show_id(struct pci_driver * pdrv, struct dynid_attribute *dattr, char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: drivers/pci/pci-sysfs-dynids.c:68:
+}^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: drivers/pci/pci-sysfs-dynids.c:71:
+default_show_new_id(char * buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: drivers/pci/pci-sysfs-dynids.c:73:
+^Ichar *p = buf;^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: drivers/pci/pci-sysfs-dynids.c:74:
+	char *p = buf;	
+	p += sprintf(p,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#527: FILE: drivers/pci/pci-sysfs-dynids.c:93:
+	dattr->attr.mode = S_IRUGO;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: drivers/pci/pci-sysfs-dynids.c:98:
+default_store_new_id(struct pci_driver * pdrv, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: drivers/pci/pci-sysfs-dynids.c:98:
+default_store_new_id(struct pci_driver * pdrv, const char * buf, size_t count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#536: FILE: drivers/pci/pci-sysfs-dynids.c:102:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#536: FILE: drivers/pci/pci-sysfs-dynids.c:102:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#536: FILE: drivers/pci/pci-sysfs-dynids.c:102:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: drivers/pci/pci-sysfs-dynids.c:103:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: drivers/pci/pci-sysfs-dynids.c:103:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: drivers/pci/pci-sysfs-dynids.c:103:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#538: FILE: drivers/pci/pci-sysfs-dynids.c:104:
+	int fields=0, error=0;
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#538: FILE: drivers/pci/pci-sysfs-dynids.c:104:
+	int fields=0, error=0;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#543: FILE: drivers/pci/pci-sysfs-dynids.c:109:
+	if (fields < 0) return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#546: FILE: drivers/pci/pci-sysfs-dynids.c:112:
+	if (!dattr) return -ENOMEM;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: drivers/pci/pci-sysfs-dynids.c:114:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: drivers/pci/pci-sysfs-dynids.c:134:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: drivers/pci/pci-sysfs-dynids.c:135:
+	error = dynid_create_file(pdrv,dattr);
 	                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: drivers/pci/pci-sysfs-dynids.c:149:
+dynid_show_new_id(struct pci_driver * pdrv, struct dynid_attribute *unused, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: drivers/pci/pci-sysfs-dynids.c:149:
+dynid_show_new_id(struct pci_driver * pdrv, struct dynid_attribute *unused, char * buf)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#591: FILE: drivers/pci/pci-sysfs-dynids.c:157:
+dynid_store_new_id(struct pci_driver * pdrv, struct dynid_attribute *unused, const char * buf, size_t count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: drivers/pci/pci-sysfs-dynids.c:157:
+dynid_store_new_id(struct pci_driver * pdrv, struct dynid_attribute *unused, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: drivers/pci/pci-sysfs-dynids.c:157:
+dynid_store_new_id(struct pci_driver * pdrv, struct dynid_attribute *unused, const char * buf, size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: drivers/pci/pci-sysfs-dynids.c:164:
+#define DYNID_ATTR(_name,_mode,_show,_store) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: drivers/pci/pci-sysfs-dynids.c:164:
+#define DYNID_ATTR(_name,_mode,_show,_store) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: drivers/pci/pci-sysfs-dynids.c:164:
+#define DYNID_ATTR(_name,_mode,_show,_store) \
                                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#599: FILE: drivers/pci/pci-sysfs-dynids.c:165:
+struct dynid_attribute dynid_attr_##_name = { ^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: drivers/pci/pci-sysfs-dynids.c:167:
+        .id   = NULL,                                   \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/pci/pci-sysfs-dynids.c:167:
+        .id   = NULL,                                   \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: drivers/pci/pci-sysfs-dynids.c:172:
+static DYNID_ATTR(new_id,S_IRUSR|S_IWUSR,dynid_show_new_id,dynid_store_new_id);
                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#606: FILE: drivers/pci/pci-sysfs-dynids.c:172:
+static DYNID_ATTR(new_id,S_IRUSR|S_IWUSR,dynid_show_new_id,dynid_store_new_id);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: drivers/pci/pci-sysfs-dynids.c:172:
+static DYNID_ATTR(new_id,S_IRUSR|S_IWUSR,dynid_show_new_id,dynid_store_new_id);
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: drivers/pci/pci-sysfs-dynids.c:172:
+static DYNID_ATTR(new_id,S_IRUSR|S_IWUSR,dynid_show_new_id,dynid_store_new_id);
                                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#606: FILE: drivers/pci/pci-sysfs-dynids.c:172:
+static DYNID_ATTR(new_id,S_IRUSR|S_IWUSR,dynid_show_new_id,dynid_store_new_id);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: drivers/pci/pci-sysfs-dynids.c:174:
+static struct attribute * dynids_def_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#614: FILE: drivers/pci/pci-sysfs-dynids.c:180:
+dynid_show(struct kobject * kobj, struct attribute *attr, char *buf)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#622: FILE: drivers/pci/pci-sysfs-dynids.c:188:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#626: FILE: drivers/pci/pci-sysfs-dynids.c:192:
+dynid_store(struct kobject * kobj, struct attribute *attr, const char *buf, size_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: drivers/pci/pci-sysfs-dynids.c:197:
+^I$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#634: FILE: drivers/pci/pci-sysfs-dynids.c:200:
+	return -ENOSYS;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#651: FILE: drivers/pci/pci-sysfs-dynids.c:217:
+		if (dattr->id)
+			kfree(dattr->id);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#657: FILE: drivers/pci/pci-sysfs-dynids.c:223:
+static struct sysfs_ops dynids_attr_ops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#661: FILE: drivers/pci/pci-sysfs-dynids.c:227:
+};
+static struct kobj_type dynids_kobj_type = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: drivers/pci/pci-sysfs-dynids.c:243:
+	struct pci_dynamic_id_kobj *dynids = &drv->dynids;
+	if (drv->probe) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: drivers/pci/pci.h:6:
+extern int pci_register_dynids(struct pci_driver *drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_driver *' should also have an identifier name
#701: FILE: include/linux/device.h:147:
+	int (*exists)(struct device_driver *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/linux/device.h:158:
+#define DRIVER_ATTR_EXISTS(_name,_mode,_show,_store,_exists)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/linux/device.h:158:
+#define DRIVER_ATTR_EXISTS(_name,_mode,_show,_store,_exists)	\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/linux/device.h:158:
+#define DRIVER_ATTR_EXISTS(_name,_mode,_show,_store,_exists)	\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/linux/device.h:158:
+#define DRIVER_ATTR_EXISTS(_name,_mode,_show,_store,_exists)	\
                                                    ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#712: FILE: include/linux/device.h:158:
+#define DRIVER_ATTR_EXISTS(_name,_mode,_show,_store,_exists)	\
+struct driver_attribute driver_attr_##_name = { 		\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,				\
+	.store	= _store,				\
+	.exists	= _exists,				\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#713: FILE: include/linux/device.h:159:
+struct driver_attribute driver_attr_##_name = { ^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#727: FILE: include/linux/pci-dynids.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#750: FILE: include/linux/pci-dynids.h:24:
+	ssize_t (*show)(struct pci_driver * pdrv, struct dynid_attribute *dattr, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#750: FILE: include/linux/pci-dynids.h:24:
+	ssize_t (*show)(struct pci_driver * pdrv, struct dynid_attribute *dattr, char * buf);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#751: FILE: include/linux/pci-dynids.h:25:
+	ssize_t (*store)(struct pci_driver * pdrv, struct dynid_attribute *dattr, const char * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#751: FILE: include/linux/pci-dynids.h:25:
+	ssize_t (*store)(struct pci_driver * pdrv, struct dynid_attribute *dattr, const char * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#751: FILE: include/linux/pci-dynids.h:25:
+	ssize_t (*store)(struct pci_driver * pdrv, struct dynid_attribute *dattr, const char * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: include/linux/pci-dynids.h:30:
+	ssize_t (*show_new_id)(struct pci_driver * pdrv, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: include/linux/pci-dynids.h:30:
+	ssize_t (*show_new_id)(struct pci_driver * pdrv, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: include/linux/pci-dynids.h:31:
+	ssize_t (*store_new_id)(struct pci_driver * pdrv, const char * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: include/linux/pci-dynids.h:31:
+	ssize_t (*store_new_id)(struct pci_driver * pdrv, const char * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#758: FILE: include/linux/pci-dynids.h:32:
+	ssize_t (*show_id)(struct pci_device_id * id, struct dynid_attribute *dattr, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#758: FILE: include/linux/pci-dynids.h:32:
+	ssize_t (*show_id)(struct pci_device_id * id, struct dynid_attribute *dattr, char * buf);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368245.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 85 errors, 29 warnings, 10 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368245.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
