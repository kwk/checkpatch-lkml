WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#33: 
inode and offset, hence during registeration the inode and offset
                               ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'agruments' may be misspelled - perhaps 'arguments'?
#45: 
User processes use stack space to store local variables, agruments and
                                                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#53: 
boundry. The copied instruction is then single stepped. Several
^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#88: FILE: include/asm-i386/kprobes.h:29:
+#include <asm/cacheflush.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/asm-i386/kprobes.h:105:
+extern int uprobe_exceptions_notify(struct notifier_block *self,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/asm-i386/kprobes.h:106:
+extern int uprobe_exceptions_notify(struct notifier_block *self,
+						unsigned long val, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/asm-i386/kprobes.h:107:
+extern unsigned long get_segment_eip(struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: include/asm-i386/kprobes.h:108:
+extern unsigned long get_segment_eip(struct pt_regs *regs,
+						unsigned long *eip_limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/asm-i386/kprobes.h:109:
+extern int is_IF_modifier(kprobe_opcode_t opcode);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#130: FILE: arch/i386/kernel/uprobes.c:33:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#175: FILE: arch/i386/kernel/uprobes.c:110:
+static int __kprobes copy_insn_on_new_page(struct uprobe *uprobe ,
                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: arch/i386/kernel/uprobes.c:111:
+static int __kprobes copy_insn_on_new_page(struct uprobe *uprobe ,
+			struct pt_regs *regs, struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: arch/i386/kernel/uprobes.c:116:
+	if (vma->vm_flags & VM_GROWSDOWN) {
[...]
+	} else if (vma->vm_flags & VM_GROWSUP) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#190: FILE: arch/i386/kernel/uprobes.c:125:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: arch/i386/kernel/uprobes.c:131:
+	if (__copy_to_user_inatomic((unsigned long *)addr,
+				(unsigned long *)uprobe->kp.ainsn.insn, size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: arch/i386/kernel/uprobes.c:145:
+static int __kprobes copy_insn_onexpstack(struct uprobe *uprobe,
+			struct pt_regs *regs, struct vm_area_struct *vma)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: arch/i386/kernel/uprobes.c:152:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#218: FILE: arch/i386/kernel/uprobes.c:153:
+	 if (!down_read_trylock(&current->mm->mmap_sem))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#218: FILE: arch/i386/kernel/uprobes.c:153:
+	 if (!down_read_trylock(&current->mm->mmap_sem))
+		 return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#219: FILE: arch/i386/kernel/uprobes.c:154:
+		 return -ENOMEM;

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: arch/i386/kernel/uprobes.c:156:
+	if (vma->vm_flags & VM_GROWSDOWN)
[...]
+	else if (vma->vm_flags & VM_GROWSUP)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: arch/i386/kernel/uprobes.c:160:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: arch/i386/kernel/uprobes.c:180:
+	if (__copy_to_user_inatomic((unsigned long *)addr,
+				(unsigned long *)uprobe->kp.ainsn.insn, size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: arch/i386/kernel/uprobes.c:196:
+static int __kprobes copy_insn_onstack(struct uprobe *uprobe,
+			struct pt_regs *regs, unsigned long flags)

CHECK:BRACES: braces {} should be used on all arms of this statement
#267: FILE: arch/i386/kernel/uprobes.c:202:
+	if (flags & VM_GROWSDOWN) {
[...]
+	} else if (flags & VM_GROWSUP) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: arch/i386/kernel/uprobes.c:209:
+		if (__copy_to_user_inatomic((unsigned long *)page_addr,
+								source, size))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#283: FILE: arch/i386/kernel/uprobes.c:218:
+			return -ENOMEM;
+		else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#289: FILE: arch/i386/kernel/uprobes.c:224:
+		if (__copy_to_user_inatomic(

CHECK:BRACES: Unbalanced braces around else statement
#294: FILE: arch/i386/kernel/uprobes.c:229:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: arch/i386/kernel/uprobes.c:241:
+void __kprobes replace_original_insn(struct uprobe *uprobe,
+				struct pt_regs *regs, kprobe_opcode_t opcode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: arch/i386/kernel/uprobes.c:247:
+	page = find_get_page(uprobe->inode->i_mapping,
+					uprobe->offset >> PAGE_CACHE_SHIFT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: arch/i386/kernel/uprobes.c:248:
+	BUG_ON(!page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: arch/i386/kernel/uprobes.c:273:
+static inline int prepare_singlestep_uprobe(struct uprobe *uprobe,
+				struct uprobe_ctlblk *ucb, struct pt_regs *regs)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#415: FILE: arch/i386/kernel/uprobes.c:350:
+	if (!p) {
+

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#436: FILE: arch/i386/kernel/uprobes.c:371:
+		 * was inserted, this might break some compatability with
 		                                       ^^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: arch/i386/kernel/uprobes.c:426:
+static void __kprobes resume_execution_user(struct kprobe *p,
+		struct pt_regs *regs, struct uprobe_ctlblk *ucb)

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#510: FILE: arch/i386/kernel/uprobes.c:445:
+		return;
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: arch/i386/kernel/uprobes.c:507:
+		replace_original_insn(current_uprobe, regs,
+						BREAKPOINT_INSTRUCTION);

CHECK:BRACES: Unbalanced braces around else statement
#573: FILE: arch/i386/kernel/uprobes.c:508:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: arch/i386/kernel/uprobes.c:538:
+	switch(ucb->uprobe_status) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#609: FILE: arch/i386/kernel/uprobes.c:544:
+		/* Fall through and reset the current probe */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#633: FILE: arch/i386/kernel/uprobes.c:568:
+		return 1;
+		break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 13 warnings, 27 checks, 635 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
