CHECK:CAMELCASE: Avoid CamelCase: <SCx200_CBA>
#43: FILE: arch/i386/kernel/scx200.c:17:
+#define scx200_cb_probe(base) (inw((base) + SCx200_CBA) == (base))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#43: FILE: arch/i386/kernel/scx200.c:17:
+#define scx200_cb_probe(base) (inw((base) + SCx200_CBA) == (base))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#52: FILE: arch/i386/kernel/scx200.c:28:
+unsigned scx200_cb_base = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#52: FILE: arch/i386/kernel/scx200.c:28:
+unsigned scx200_cb_base = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#75: FILE: arch/i386/kernel/scx200.c:58:
+		printk(KERN_INFO NAME ": GPIO base 0x%x\n", base);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_GPIO_SIZE>
#77: FILE: arch/i386/kernel/scx200.c:60:
+		if (request_region(base, SCx200_GPIO_SIZE, "NatSemi SCx200 GPIO") == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#78: FILE: arch/i386/kernel/scx200.c:61:
+			printk(KERN_ERR NAME ": can't allocate I/O for GPIOs\n");

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_CB_BASE_FIXED>
#90: FILE: arch/i386/kernel/scx200.c:73:
+		if (scx200_cb_probe(SCx200_CB_BASE_FIXED)) {

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_CBA_SCRATCH>
#93: FILE: arch/i386/kernel/scx200.c:76:
+			pci_read_config_dword(pdev, SCx200_CBA_SCRATCH, &base);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#97: FILE: arch/i386/kernel/scx200.c:80:
+				printk(KERN_WARNING NAME ": Configuration Block not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#101: FILE: arch/i386/kernel/scx200.c:84:
+		printk(KERN_INFO NAME ": Configuration Block base 0x%x\n", scx200_cb_base);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_PMR>
#143: FILE: drivers/mtd/maps/scx200_docflash.c:104:
+		pmr = inl(scx200_cb_base + SCx200_PMR);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_WDT_WDTO>
#182: FILE: drivers/char/watchdog/scx200_wdt.c:67:
+	outw(wdto_restart, scx200_cb_base + SCx200_WDT_WDTO);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_WDT_WDSTS_WDOVF>
#194: FILE: drivers/char/watchdog/scx200_wdt.c:82:
+	outb(SCx200_WDT_WDSTS_WDOVF, scx200_cb_base + SCx200_WDT_WDSTS);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_WDT_WDSTS>
#194: FILE: drivers/char/watchdog/scx200_wdt.c:82:
+	outb(SCx200_WDT_WDSTS_WDOVF, scx200_cb_base + SCx200_WDT_WDSTS);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_WDT_WDCNFG>
#195: FILE: drivers/char/watchdog/scx200_wdt.c:83:
+	outw(W_ENABLE, scx200_cb_base + SCx200_WDT_WDCNFG);

CHECK:CAMELCASE: Avoid CamelCase: <SCx200_WDT_OFFSET>
#248: FILE: drivers/char/watchdog/scx200_wdt.c:227:
+	if (!request_region(scx200_cb_base + SCx200_WDT_OFFSET,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/char/watchdog/scx200_wdt.c:242:
+		release_region(scx200_cb_base + SCx200_WDT_OFFSET,
 				SCx200_WDT_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: drivers/char/watchdog/scx200_wdt.c:251:
+		release_region(scx200_cb_base + SCx200_WDT_OFFSET,
 				SCx200_WDT_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: include/linux/scx200.h:10:
+extern unsigned scx200_cb_base;

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#315: FILE: include/linux/scx200.h:12:
+#define scx200_cb_present() (scx200_cb_base!=0)
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 13 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
