WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#44: 
	Basically it adds the call to timeofday_interrupt_hook() and cuts alot
	                                                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/arch/i386/Kconfig	2005-01-24 13:33:59 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: arch/i386/kernel/i8259.c:394:
+	extern spinlock_t i8253_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: arch/i386/kernel/i8259.c:398:
+	outb_p(0x34,PIT_MODE);		/* binary, mode 2, LSB/MSB, ch 0 */
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#131: FILE: arch/i386/kernel/i8259.c:399:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#132: FILE: arch/i386/kernel/i8259.c:400:
+	outb_p(LATCH & 0xff , PIT_CH0);	/* LSB */
 	                    ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#133: FILE: arch/i386/kernel/i8259.c:401:
+	udelay(10);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#134: FILE: arch/i386/kernel/i8259.c:402:
+	outb(LATCH >> 8 , PIT_CH0);	/* MSB */
 	                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: arch/i386/kernel/i8259.c:425:
+	int error = sysdev_class_register(&timer_sysclass);
+	if (!error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#261: FILE: arch/i386/kernel/time.c:348:
+			>= USEC_AFTER - ((unsigned) TICK_SIZE) / 2 &&

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#261: FILE: arch/i386/kernel/time.c:348:
+			>= USEC_AFTER - ((unsigned) TICK_SIZE) / 2 &&

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/i386/kernel/time.c:350:
+			<= USEC_BEFORE + ((unsigned) TICK_SIZE) / 2) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#263: FILE: arch/i386/kernel/time.c:350:
+			<= USEC_BEFORE + ((unsigned) TICK_SIZE) / 2) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#265: FILE: arch/i386/kernel/time.c:352:
+		if (efi_enabled) {
[...]
+		} else if (set_rtc_mmss(ts.tv_sec) == 0)
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: arch/i386/kernel/time.c:353:
+^I ^I^Iif (efi_set_rtc_mmss(ts.tv_sec) == 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: arch/i386/kernel/time.c:353:
+^I ^I^Iif (efi_set_rtc_mmss(ts.tv_sec) == 0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: arch/i386/kernel/time.c:364:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: arch/i386/lib/delay.c:39:
+	int d0;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#327: FILE: arch/i386/lib/delay.c:39:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#333: FILE: arch/i386/lib/delay.c:45:
+		:"=&a" (d0)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#334: FILE: arch/i386/lib/delay.c:46:
+		:"0" (loops));
 		^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: arch/ppc64/kernel/time.c:157:
+	sec = mktime(tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
+			      tm.tm_hour, tm.tm_min, tm.tm_sec);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#405: FILE: arch/ppc64/kernel/time.c:160:
+}
+void sync_persistent_clock(struct timespec ts)

ERROR:SPACING: space prohibited after that open parenthesis '('
#423: FILE: arch/ppc64/kernel/time.c:178:
+	if ( ts.tv_sec - last_rtc_update >= 659 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: arch/ppc64/kernel/time.c:179:
+	if ( ts.tv_sec - last_rtc_update >= 659 &&
+		abs((ts.tv_nsec/1000) - (1000000-1000000/HZ)) < 500000/HZ) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#424: FILE: arch/ppc64/kernel/time.c:179:
+		abs((ts.tv_nsec/1000) - (1000000-1000000/HZ)) < 500000/HZ) {
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: arch/ppc64/kernel/time.c:179:
+		abs((ts.tv_nsec/1000) - (1000000-1000000/HZ)) < 500000/HZ) {
 		                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#424: FILE: arch/ppc64/kernel/time.c:179:
+		abs((ts.tv_nsec/1000) - (1000000-1000000/HZ)) < 500000/HZ) {
 		                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#424: FILE: arch/ppc64/kernel/time.c:179:
+		abs((ts.tv_nsec/1000) - (1000000-1000000/HZ)) < 500000/HZ) {
 		                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: arch/ppc64/kernel/time.c:181:
+		struct rtc_time tm;
+		to_tm(ts.tv_sec+1, &tm);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#426: FILE: arch/ppc64/kernel/time.c:181:
+		to_tm(ts.tv_sec+1, &tm);
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#430: FILE: arch/ppc64/kernel/time.c:185:
+			last_rtc_update = ts.tv_sec+1;
 			                           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#483: FILE: arch/ppc64/kernel/time.c:408:
 }
+#ifndef CONFIG_NEWTOD

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#628: FILE: arch/x86_64/kernel/time.c:582:
+	static unsigned long rtc_update = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: arch/x86_64/kernel/time.c:592:
+	if (ts.tv_sec > rtc_update &&
+		abs(ts.tv_nsec - 500000000) <= tick_nsec / 2) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'remainder' may be better as '(remainder)' to avoid precedence issues
#702: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
+({							\
+	u64 result = dividend;				\
+	*remainder = do_div(result,divisor);		\
+	result;						\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#705: FILE: include/asm-generic/div64.h:62:
+	*remainder = do_div(result,divisor);		\
 	                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 8 warnings, 19 checks, 602 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
