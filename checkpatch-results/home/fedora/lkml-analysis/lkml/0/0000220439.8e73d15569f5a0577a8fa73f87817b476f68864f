ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: fs/cifs/file.c:66:
+^I^I^IpCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#66: FILE: fs/cifs/file.c:66:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#66: FILE: fs/cifs/file.c:66:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#75: FILE: fs/cifs/file.c:75:
+		if (file->private_data != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#83: FILE: fs/cifs/file.c:81:
+				cERROR(1, ("could not find file instance for new file %p ", file));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#91: FILE: fs/cifs/file.c:88:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#97: FILE: fs/cifs/file.c:93:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode, file->f_flags, full_path));

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#123: FILE: fs/cifs/file.c:153:
+	if (buf== NULL) {
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#123: FILE: fs/cifs/file.c:153:
+	if (buf== NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#144: FILE: fs/cifs/file.c:176:
+			pCifsFile->closePend = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#148: FILE: fs/cifs/file.c:179:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#148: FILE: fs/cifs/file.c:179:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#151: FILE: fs/cifs/file.c:181:
+			if (pCifsInode) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#165: FILE: fs/cifs/file.c:192:
+				if (pCifsInode->clientCanCacheRead) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: fs/cifs/file.c:203:
+^I^I^I^I^I^Iif (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#178: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#178: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:SPACING: space required after that ',' (ctx:VxO)
#178: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 						                                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#178: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 						                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile)'
#178: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: fs/cifs/file.c:204:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#184: FILE: fs/cifs/file.c:207:
+							if (file->f_dentry->d_inode->i_mapping) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: fs/cifs/file.c:225:
+				if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
-				} else if((oplock & 0xF) == OPLOCK_READ)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#205: FILE: fs/cifs/file.c:228:
+					cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: fs/cifs/file.c:235:
+^I^I^Iif (oplock & CIFS_CREATE_ACTION) {           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: fs/cifs/file.c:263:
+static int $

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#223: FILE: fs/cifs/file.c:264:
+cifs_relock_file(struct cifsFileInfo *cifsFile)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: fs/cifs/file.c:273:
+static int $

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#249: FILE: fs/cifs/file.c:296:
+	if (pCifsFile->invalidHandle == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#249: FILE: fs/cifs/file.c:296:
+	if (pCifsFile->invalidHandle == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#256: FILE: fs/cifs/file.c:302:
+	if (file->f_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#268: FILE: fs/cifs/file.c:315:
+	if (full_path == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#279: FILE: fs/cifs/file.c:346:
+/*	buf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);
+	if (buf==0) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#304: FILE: fs/cifs/file.c:387:
+				cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#332: FILE: fs/cifs/file.c:434:
+		if (pSMBFile->search_resume_name)

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#349: FILE: fs/cifs/file.c:448:
+	if ((rc ==0) && CIFS_I(inode)->write_behind_rc)
 	        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc ==0'
#349: FILE: fs/cifs/file.c:448:
+	if ((rc ==0) && CIFS_I(inode)->write_behind_rc)

CHECK:CAMELCASE: Avoid CamelCase: <pCFileStruct>
#375: FILE: fs/cifs/file.c:474:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#375: FILE: fs/cifs/file.c:474:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#375: FILE: fs/cifs/file.c:474:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#387: FILE: fs/cifs/file.c:483:
+			cFYI(1, ("freeing smb buf in srch struct in closedir")); /* BB removeme BB */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <pfLock>
#404: FILE: fs/cifs/file.c:536:
+		cFYI(1, ("Unknown lock flags 0x%x", pfLock->fl_flags));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#436: FILE: fs/cifs/file.c:620:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#441: FILE: fs/cifs/file.c:624:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#441: FILE: fs/cifs/file.c:624:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#452: FILE: fs/cifs/file.c:654:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#470: FILE: fs/cifs/file.c:670:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#470: FILE: fs/cifs/file.c:670:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#470: FILE: fs/cifs/file.c:670:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: fs/cifs/file.c:671:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#530: FILE: fs/cifs/file.c:740:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#535: FILE: fs/cifs/file.c:744:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#535: FILE: fs/cifs/file.c:744:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#549: FILE: fs/cifs/file.c:760:
+	if (file->f_dentry->d_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#560: FILE: fs/cifs/file.c:774:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#578: FILE: fs/cifs/file.c:790:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#578: FILE: fs/cifs/file.c:790:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#578: FILE: fs/cifs/file.c:790:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: fs/cifs/file.c:791:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#624: FILE: fs/cifs/file.c:849:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#624: FILE: fs/cifs/file.c:849:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to > PAGE_CACHE_SIZE'
#647: FILE: fs/cifs/file.c:878:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from > to'
#647: FILE: fs/cifs/file.c:878:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: fs/cifs/file.c:902:
+^I^Iif ((open_file->pfile) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#676: FILE: fs/cifs/file.c:902:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 
 			(open_file->pfile->f_flags & O_WRONLY))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: fs/cifs/file.c:903:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#697: FILE: fs/cifs/file.c:928:
+		if (tmp->next == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#705: FILE: fs/cifs/file.c:934:
+	if (open_file == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: fs/cifs/file.c:999:
+^I^I^I^Iif ((open_file->invalidHandle) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: fs/cifs/file.c:1022:
+			cFYI(1, ("Illegal offsets, can not copy from %d to %d",
+				offset, to));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#795: FILE: fs/cifs/file.c:1031:
+		/* BB check if anything else missing out of ppw
+		   such as updating last write time */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#795: FILE: fs/cifs/file.c:1031:
+		   such as updating last write time */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#798: FILE: fs/cifs/file.c:1033:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#798: FILE: fs/cifs/file.c:1033:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: fs/cifs/file.c:1034:
+		rc = cifs_write(file, page_data+offset, to-offset,
                                         &position);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: fs/cifs/file.c:1098:
+int $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#853: FILE: fs/cifs/file.c:1105:
+	/* Rather than do the steps manually:
+	   lock the inode for writing

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#859: FILE: fs/cifs/file.c:1111:
+	   filemapfdatawrite appears easier for the time being */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: fs/cifs/file.c:1124:
+cifs_user_read(struct file *file, char __user *read_data, size_t read_size,
+	  loff_t *poffset)

CHECK:CAMELCASE: Avoid CamelCase: <pSMBr>
#892: FILE: fs/cifs/file.c:1136:
+	struct smb_com_read_rsp *pSMBr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#901: FILE: fs/cifs/file.c:1152:
+	for (total_read = 0,current_offset = read_data; read_size > total_read;
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: fs/cifs/file.c:1271:
+int $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1023: FILE: fs/cifs/file.c:1322:
+		if (PAGE_CACHE_SIZE > bytes_read) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#1065: FILE: fs/cifs/file.c:1371:
+	for(i = 0; i < num_pages; ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1072: FILE: fs/cifs/file.c:1376:
+		if (list_empty(page_list)) {
 			break;
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1089: FILE: fs/cifs/file.c:1393:
+		if (contig_pages + i >  num_pages) {
 			contig_pages = num_pages - i;
 		}

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#1117: FILE: fs/cifs/file.c:1417:
+			if (rc== -EAGAIN) {
 			      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: fs/cifs/file.c:1461:
+^I^I^IcFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", $

WARNING:LONG_LINE_STRING: line length of 117 exceeds 100 columns
#1144: FILE: fs/cifs/file.c:1461:
+			cFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", 

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: fs/cifs/file.c:1462:
+^I^I^I^Ibytes_read, offset)); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: fs/cifs/file.c:1462:
+			cFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", 
+				bytes_read, offset)); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: fs/cifs/file.c:1490:
+static int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: fs/cifs/file.c:1554:
+int $

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#1204: FILE: fs/cifs/file.c:1555:
+is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1204: FILE: fs/cifs/file.c:1555:
+is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsInode"
#1212: FILE: fs/cifs/file.c:1562:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#1220: FILE: fs/cifs/file.c:1568:
+		if (open_file == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1231: FILE: fs/cifs/file.c:1575:
+^I^Iif ((open_file->pfile) && $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1231: FILE: fs/cifs/file.c:1575:
+		if ((open_file->pfile) && 
[...]
 			 rc = FALSE;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#1231: FILE: fs/cifs/file.c:1575:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 
+		   (open_file->pfile->f_flags & O_WRONLY))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: fs/cifs/file.c:1576:
+^I^I   ((open_file->pfile->f_flags & O_RDWR) || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: fs/cifs/file.c:1576:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#1239: FILE: fs/cifs/file.c:1581:
+		if (tmp->next == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: fs/cifs/file.c:1591:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pfindData>
#1252: FILE: fs/cifs/file.c:1591:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1263: FILE: fs/cifs/file.c:1613:
+		   or retrieve from NTFS stream extended attribute */

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#1264: FILE: fs/cifs/file.c:1614:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#1264: FILE: fs/cifs/file.c:1614:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1311: FILE: fs/cifs/file.c:1784:
+		if (*ptmp_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1314: FILE: fs/cifs/file.c:1786:
+			if (*ptmp_inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1323: FILE: fs/cifs/file.c:1793:
+		if (tmp_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1332: FILE: fs/cifs/file.c:1801:
+		if (*ptmp_inode == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1343: FILE: fs/cifs/file.c:1813:
+static void $

CHECK:CAMELCASE: Avoid CamelCase: <Unicode>
#1345: FILE: fs/cifs/file.c:1815:
+		 unsigned int len, int Unicode, struct nls_table *nls_tab)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1355: FILE: fs/cifs/file.c:1826:
+^Iif (Unicode) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1366: FILE: fs/cifs/file.c:1835:
+		cERROR(1, ("failed new resume key allocate, length %d",
 				  cifsFile->resume_name_length));

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strtoUCS>
#1372: FILE: fs/cifs/file.c:1839:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1373: FILE: fs/cifs/file.c:1840:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,
 			filename, len, nls_tab);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1399: FILE: fs/cifs/file.c:1860:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1399: FILE: fs/cifs/file.c:1860:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1399: FILE: fs/cifs/file.c:1860:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {
 		return -ENOMEM;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1399: FILE: fs/cifs/file.c:1860:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1399: FILE: fs/cifs/file.c:1860:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <FileName>
#1417: FILE: fs/cifs/file.c:1877:
+		cFYI(1, ("Error %d on filldir of %s", rc, pfindData->FileName));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1427: FILE: fs/cifs/file.c:1884:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pUnixFindData>
#1427: FILE: fs/cifs/file.c:1884:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1437: FILE: fs/cifs/file.c:1895:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1437: FILE: fs/cifs/file.c:1895:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1437: FILE: fs/cifs/file.c:1895:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1437: FILE: fs/cifs/file.c:1895:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <experimEnabled>
#1468: FILE: fs/cifs/file.c:1942:
+	if (!experimEnabled)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#1476: FILE: fs/cifs/file.c:1949:
+	if (file->f_dentry == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSMaxBufSize>
#1485: FILE: fs/cifs/file.c:1957:
+	if (bufsize > CIFSMaxBufSize) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1494: FILE: fs/cifs/file.c:1964:
+	if (data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#1503: FILE: fs/cifs/file.c:1973:
+	if (full_path == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#1538: FILE: fs/cifs/file.c:2026:
+			if (file->private_data == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1550: FILE: fs/cifs/file.c:2044:
+^I^I^I^I(FILE_DIRECTORY_INFO *)((char *) pfindData + $

CHECK:SPACING: No space is necessary after a cast
#1550: FILE: fs/cifs/file.c:2044:
+				(FILE_DIRECTORY_INFO *)((char *) pfindData + 

CHECK:CAMELCASE: Avoid CamelCase: <lastFindData>
#1554: FILE: fs/cifs/file.c:2046:
+			if ((char *)lastFindData > (char *)pfindData + bufsize) {

CHECK:CAMELCASE: Avoid CamelCase: <UnixSearch>
#1562: FILE: fs/cifs/file.c:2053:
+			if (UnixSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#1562: FILE: fs/cifs/file.c:2053:
+			if (UnixSearch == FALSE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1569: FILE: fs/cifs/file.c:2058:
+					cFYI(1, ("Illegal resume file name length %d",
 						cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: fs/cifs/file.c:2065:
+				cFYI(1, ("Last file: %s with name %d bytes long",
 					lastFindData->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1580: FILE: fs/cifs/file.c:2067:
+				if (cifsFile->search_resume_name == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1589: FILE: fs/cifs/file.c:2077:
+^I^I^I^I^Ifor(i = 0; (pfindDataUnix->FileName[i] $

ERROR:SPACING: space required before the open parenthesis '('
#1589: FILE: fs/cifs/file.c:2077:
+					for(i = 0; (pfindDataUnix->FileName[i] 

CHECK:CAMELCASE: Avoid CamelCase: <pfindDataUnix>
#1589: FILE: fs/cifs/file.c:2077:
+					for(i = 0; (pfindDataUnix->FileName[i] 

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1594: FILE: fs/cifs/file.c:2080:
+						if (i > bufsize - 64)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1608: FILE: fs/cifs/file.c:2091:
+					cFYI(1, ("Illegal resume file name length %d",
 						cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1616: FILE: fs/cifs/file.c:2098:
+				cFYI(1, ("Last file: %s with name %d bytes long",
 					pfindDataUnix->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1619: FILE: fs/cifs/file.c:2100:
+				if (cifsFile->search_resume_name == NULL) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1628: FILE: fs/cifs/file.c:2134:
+							reset_resume_key(file, pfindData->FileName, qstring.len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: fs/cifs/file.c:2135:
+							reset_resume_key(file, pfindData->FileName, qstring.len,
 								Unicode, cifs_sb->local_nls);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1646: FILE: fs/cifs/file.c:2165:
+						if (cifs_filldir_unix(&qstring,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1647: FILE: fs/cifs/file.c:2166:
+						if (cifs_filldir_unix(&qstring,
 								  pfindDataUnix,

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1655: FILE: fs/cifs/file.c:2175:
+								qstring.len, Unicode, cifs_sb->local_nls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: fs/cifs/file.c:2221:
+			cFYI(1, ("Count: %d  End: %d ",
 			      le16_to_cpu(findNextParms.SearchCount),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1687: FILE: fs/cifs/file.c:2242:
+						cFYI(1, ("Illegal resume file name length %d",
 							cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: fs/cifs/file.c:2254:
+					cFYI(1, ("Last file: %s with name %d bytes long",
 						lastFindData->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1704: FILE: fs/cifs/file.c:2256:
+					if (cifsFile->search_resume_name == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: fs/cifs/file.c:2267:
+^I^I^I^I^I^Ifor (i=0; (pfindDataUnix->FileName[i] $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1713: FILE: fs/cifs/file.c:2267:
+						for (i=0; (pfindDataUnix->FileName[i] 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1713: FILE: fs/cifs/file.c:2267:
+						for (i=0; (pfindDataUnix->FileName[i] 
 						      ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1718: FILE: fs/cifs/file.c:2270:
+							if (i > bufsize - 64)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1730: FILE: fs/cifs/file.c:2282:
+						cFYI(1, ("Illegal resume file name length %d",
 								cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1744: FILE: fs/cifs/file.c:2294:
+					cFYI(1, ("fnext last file: %s with name %d bytes long",
 						pfindDataUnix->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1747: FILE: fs/cifs/file.c:2296:
+					if (cifsFile->search_resume_name == NULL) {

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1757: FILE: fs/cifs/file.c:2375:
+								reset_resume_key(file, pfindDataUnix->FileName, qstring.len,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1758: FILE: fs/cifs/file.c:2376:
+									Unicode, cifs_sb->local_nls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1758: FILE: fs/cifs/file.c:2376:
+								reset_resume_key(file, pfindDataUnix->FileName, qstring.len,
+									Unicode, cifs_sb->local_nls);

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#1768: FILE: fs/cifs/file.c:2402:
+	FreeXid(xid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1774: FILE: fs/cifs/file.c:2406:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1775: FILE: fs/cifs/file.c:2407:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1775: FILE: fs/cifs/file.c:2407:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1776: FILE: fs/cifs/file.c:2408:
+		   unsigned to)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1781: FILE: fs/cifs/file.c:2412:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1781: FILE: fs/cifs/file.c:2412:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1781: FILE: fs/cifs/file.c:2412:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to == PAGE_CACHE_SIZE'
#1790: FILE: fs/cifs/file.c:2423:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from == 0'
#1790: FILE: fs/cifs/file.c:2423:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 32 warnings, 112 checks, 1652 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
