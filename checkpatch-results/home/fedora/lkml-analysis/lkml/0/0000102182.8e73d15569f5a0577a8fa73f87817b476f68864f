CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/compat.h:134:
+extern void compat_exit_robust_list(struct task_struct *curr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: kernel/futex_compat.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#181: FILE: kernel/futex_compat.c:2:
+ * linux/kernel/futex_compat.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'compatibililty' may be misspelled - perhaps 'compatibility'?
#183: FILE: kernel/futex_compat.c:4:
+ * Futex compatibililty routines.
          ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#192: FILE: kernel/futex_compat.c:13:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: kernel/futex_compat.c:58:
+			if (handle_futex_death((void *)entry + futex_offset,
+						curr))

CHECK:BRACES: braces {} should be used on all arms of this statement
#275: FILE: kernel/futex_compat.c:96:
+	if (!pid)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#277: FILE: kernel/futex_compat.c:98:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->euid'
#286: FILE: kernel/futex_compat.c:107:
+		if ((current->euid != p->euid) && (current->euid != p->uid) &&
+				!capable(CAP_SYS_PTRACE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#286: FILE: kernel/futex_compat.c:107:
+		if ((current->euid != p->euid) && (current->euid != p->uid) &&
+				!capable(CAP_SYS_PTRACE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: kernel/futex_compat.c:108:
+		if ((current->euid != p->euid) && (current->euid != p->uid) &&
+				!capable(CAP_SYS_PTRACE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: kernel/futex_compat.c:125:
+asmlinkage long compat_sys_futex(u32 __user *uaddr, int op, int val,
+		struct compat_timespec __user *utime, u32 __user *uaddr2,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == FUTEX_WAIT'
#311: FILE: kernel/futex_compat.c:132:
+	if ((op == FUTEX_WAIT) && utime) {

CHECK:SPACING: No space is necessary after a cast
#317: FILE: kernel/futex_compat.c:138:
+		val2 = (int) (unsigned long) utime;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 10 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
