WARNING:TYPO_SPELLING: 'conver' may be misspelled - perhaps 'convert'?
#35: 
another patch to conver XFS to use it, as discussed with Christoph a 
                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#80: 
diff -ruN virgin-2.5/include/linux/kernel.h linux-2.5/include/linux/kernel.h

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: include/linux/kernel.h:210:
+void qsort(void *base, size_t nmemb, size_t size,
+	int (*compar)(const void *, const void *));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: include/linux/kernel.h:212:
+void *bsearch(const void *key, const void *base, size_t nmemb, size_t size,
+	int (*compar)(const void *, const void *));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: lib/bsearch.c:1:
+/* Copyright (C) 1991, 1992, 1997, 2000 Free Software Foundation, Inc.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#115: FILE: lib/bsearch.c:2:
+/* Copyright (C) 1991, 1992, 1997, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#129: FILE: lib/bsearch.c:16:
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: lib/bsearch.c:17:
+   Boston, MA 02111-1307, USA.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#136: FILE: lib/bsearch.c:23:
+/* Perform a binary search for KEY in BASE which has NMEMB elements
+   of SIZE bytes each.  The comparisons are done by (*COMPAR)().  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: lib/bsearch.c:23:
+   of SIZE bytes each.  The comparisons are done by (*COMPAR)().  */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: lib/bsearch.c:26:
+bsearch(const void *key, const void *base, size_t nmemb, size_t size,
+    int (*compar)(const void *, const void *))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: lib/bsearch.c:26:
+    int (*compar)(const void *, const void *))$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#162: FILE: lib/bsearch.c:49:
+EXPORT_SYMBOL(bsearch);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: lib/qsort.c:1:
+/*

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#190: FILE: lib/qsort.c:24:
+ *    must display the following acknowledgement:
                                  ^^^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: lib/qsort.c:42:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#211: FILE: lib/qsort.c:45:
+ *	FreeBSD: src/lib/libc/stdlib/qsort.c,v 1.11 2002/03/22 21:53:10

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: lib/qsort.c:58:
+#define swapcode(TYPE, parmi, parmj, n) do { ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: lib/qsort.c:59:
+^Ilong i = (n) / sizeof (TYPE); ^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: lib/qsort.c:59:
+	long i = (n) / sizeof (TYPE); 			\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: lib/qsort.c:60:
+^ITYPE *pi = (TYPE *) (parmi); ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: lib/qsort.c:61:
+^ITYPE *pj = (TYPE *) (parmj); ^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#227: FILE: lib/qsort.c:61:
+	TYPE *pj = (TYPE *) (parmj); 			\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: lib/qsort.c:62:
+^Ido { ^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: lib/qsort.c:66:
+        } while (--i > 0);^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: lib/qsort.c:66:
+        } while (--i > 0);^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#235: FILE: lib/qsort.c:69:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#235: FILE: lib/qsort.c:69:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'es' - possible side-effects?
#235: FILE: lib/qsort.c:69:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'es' may be better as '(es)' to avoid precedence issues
#235: FILE: lib/qsort.c:69:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#235: FILE: lib/qsort.c:69:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#236: FILE: lib/qsort.c:70:
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;
 	                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#241: FILE: lib/qsort.c:75:
+	if(swaptype <= 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#247: FILE: lib/qsort.c:81:
+#define swap(a, b) do {					\
+	if (swaptype == 0) {				\
+		long t = *(long *)(a);			\
+		*(long *)(a) = *(long *)(b);		\
+		*(long *)(b) = t;			\
+	} else						\
+		swapfunc(a, b, es, swaptype);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#247: FILE: lib/qsort.c:81:
+#define swap(a, b) do {					\
+	if (swaptype == 0) {				\
+		long t = *(long *)(a);			\
+		*(long *)(a) = *(long *)(b);		\
+		*(long *)(b) = t;			\
+	} else						\
+		swapfunc(a, b, es, swaptype);		\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: lib/qsort.c:90:
+#define vecswap(a, b, n) ^Ido { ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#256: FILE: lib/qsort.c:90:
+#define vecswap(a, b, n) 	do { 			\
+	if ((n) > 0) swapfunc(a, b, n, swaptype);	\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#257: FILE: lib/qsort.c:91:
+	if ((n) > 0) swapfunc(a, b, n, swaptype);	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#264: FILE: lib/qsort.c:98:
+	       (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a ))

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: lib/qsort.c:99:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: lib/qsort.c:99:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#265: FILE: lib/qsort.c:99:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));
               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#265: FILE: lib/qsort.c:99:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#296: FILE: lib/qsort.c:130:
+	pa = pb = (char *)a + es;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#298: FILE: lib/qsort.c:132:
+	pc = pd = (char *)a + (n - 1) * es;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: lib/qsort.c:170:
+	if ((r = pb - pa) > es)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#338: FILE: lib/qsort.c:172:
+	if ((r = pd - pc) > es) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#346: FILE: lib/qsort.c:180:
+EXPORT_SYMBOL(qsort);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: kernel/sys.c:1075:
+	BUG_ON(gidsetsize && !grouplist);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#508: FILE: kernel/sys.c:1091:
+	if (current->ngroups
+	    && atomic_dec_and_test(current->groups_refcount)) {

WARNING:TYPO_SPELLING: 'compatiblity' may be misspelled - perhaps 'compatibility'?
#535: FILE: kernel/sys.c:1113:
+		 * the group list for backwards compatiblity sake.
 		                                ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: kernel/sys.c:1115:
+^I^Iint alloc_size = (gidsetsize > OLD_NGROUPS) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: kernel/sys.c:1122:
+		if (copy_from_user(groups, grouplist,
+		    gidsetsize * sizeof(gid_t))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: kernel/sys.c:1141:
+		if (bsearch(&grp, current->groups, current->ngroups,
+		    sizeof(gid_t), gid_t_cmp))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#602: FILE: kernel/uid16.c:31:
+extern int do_setgroups(int gidsetsize, gid_t *grouplist);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#627: FILE: kernel/uid16.c:128:
+		if (copy_to_user(grouplist, groups, sizeof(old_gid_t)*i)) {
 		                                                     ^

WARNING:TYPO_SPELLING: 'compatiblity' may be misspelled - perhaps 'compatibility'?
#655: FILE: kernel/uid16.c:148:
+		 * the group list for backwards compatiblity sake.
 		                                ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: kernel/uid16.c:150:
+^I^Iint alloc_size = (gidsetsize > OLD_NGROUPS) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: kernel/uid16.c:158:
+		if (copy_from_user(groups, grouplist,
+		    gidsetsize * sizeof(old_gid_t))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#670: FILE: kernel/uid16.c:163:
+		if (!(new_groups = vmalloc(sizeof(gid_t) * alloc_size))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426681.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 27 warnings, 17 checks, 550 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426681.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
