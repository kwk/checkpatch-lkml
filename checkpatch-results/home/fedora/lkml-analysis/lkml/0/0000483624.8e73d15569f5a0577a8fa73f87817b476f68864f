WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
wait_on_inode functions.  I am not sure if a new specific wait_on_attr_inode 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#49: FILE: fs//attr.c:120:
+	int error,tflag;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: fs//attr.c:140:
+		wait_on_inode(inode,I_ATTR_LOCK);
 		                   ^

ERROR:SPACING: space required before the open parenthesis '('
#67: FILE: fs//attr.c:142:
+		if(inode->i_state & I_ATTR_LOCK) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#70: FILE: fs//attr.c:145:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#70: FILE: fs//attr.c:145:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#71: FILE: fs//attr.c:146:
+			inode->i_state =| I_ATTR_LOCK;
 			               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:OxW)
#71: FILE: fs//attr.c:146:
+			inode->i_state =| I_ATTR_LOCK;
 			                ^

ERROR:SPACING: space required before the open parenthesis '('
#75: FILE: fs//attr.c:150:
+	} while(!tflag);

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#86: FILE: fs//attr.c:165:
+	inode->i_state =& ~I_ATTR_LOCK;
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxW)
#86: FILE: fs//attr.c:165:
+	inode->i_state =& ~I_ATTR_LOCK;
 	                ^

ERROR:SPACING: space prohibited after that '&' (ctx:OxW)
#86: FILE: fs//attr.c:165:
+	inode->i_state =& ~I_ATTR_LOCK;
 	                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs//inode.c:166:
+static void __wait_on_inode(struct inode * inode,int flag)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: fs//inode.c:166:
+static void __wait_on_inode(struct inode * inode,int flag)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: fs//inode.c:246:
+		__wait_on_inode(inode,I_LOCK);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#144: FILE: fs//inode.c:269:
+		__wait_on_inode(inode,I_LOCK);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: fs//inode.c:431:
+			wait_on_inode(inode,I_LOCK);
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: fs//inode.c:487:
+		wait_on_inode(inode,I_LOCK);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: fs//inode.c:511:
+	wait_on_inode(inode,I_LOCK);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: fs//inode.c:900:
+		wait_on_inode(inode,I_LOCK);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#189: FILE: fs//inode.c:978:
+		wait_on_inode(inode,I_LOCK);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#208: FILE: include/linux//fs.h:921:
+extern void __wait_on_inode(struct inode *,int);
                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux//fs.h:921:
+extern void __wait_on_inode(struct inode *,int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#208: FILE: include/linux//fs.h:921:
+extern void __wait_on_inode(struct inode *,int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#208: FILE: include/linux//fs.h:921:
+extern void __wait_on_inode(struct inode *,int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: include/linux//fs.h:925:
+		__wait_on_inode(inode,flag);
 		                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 3 warnings, 3 checks, 151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
