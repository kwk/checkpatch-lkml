WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: include/linux/cpumap.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: include/linux/cpumap.h:6:
+ *^I01/25/02 Initial Version ^IRuss Weight <rweight@us.ibm.com>$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#81: FILE: include/linux/cpumap.h:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#82: FILE: include/linux/cpumap.h:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#100: FILE: include/linux/cpumap.h:42:
+typedef unsigned long cpumap_t[CPUMAP_SIZE];

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#111: FILE: include/linux/cpumap.h:53:
+#define CPUMAP_FILLMASK	((1 << (NR_CPUS % BITS_PER_LONG)) -1)
                        	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: include/linux/cpumap.h:60:
+ * a cpumap_t object for display. This function knows the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/cpumap.h:74:
+extern char *cpumap_format(cpumap_t map, char *buf, int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#142: FILE: include/linux/cpumap.h:84:
+#define cpumap_is_empty(cpumap) ^I^I(cpumap[0] == 0)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map2' may be better as '(map2)' to avoid precedence issues
#143: FILE: include/linux/cpumap.h:85:
+#define cpumap_cmp_mask(map1, map2)		(map1[0] ==  map2[0])

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/cpumap.h:88:
+#define cpumap_copy_mask(srcmap, destmap) ^I(destmap[0] = srcmap[0])$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map2' may be better as '(map2)' to avoid precedence issues
#147: FILE: include/linux/cpumap.h:89:
+#define cpumap_and_mask(map1, map2, result)	(result[0] = map1[0] & map2[0])

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/cpumap.h:100:
+extern unsigned long __bad_cpumap_to_ulong(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/cpumap.h:101:
+extern void __bad_cpumap_ulong_to_cpumap(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/cpumap.h:105:
+extern int cpumap_is_empty(cpumap_t map);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/cpumap.h:106:
+extern int cpumap_cmp_mask(cpumap_t map1, cpumap_t map2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/cpumap.h:107:
+extern void cpumap_clear_mask(cpumap_t cpumap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/cpumap.h:108:
+extern void cpumap_fill(cpumap_t cpumap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/cpumap.h:109:
+extern void cpumap_copy_mask(cpumap_t srcmap, cpumap_t destmap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/cpumap.h:110:
+extern void cpumap_and_mask(cpumap_t map1, cpumap_t map2, cpumap_t result);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#192: FILE: lib/cpumap.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: lib/cpumap.c:6:
+ *^I03/20/02 Initial Version ^IRuss Weight <rweight@us.ibm.com>$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#213: FILE: lib/cpumap.c:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#214: FILE: lib/cpumap.c:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#219: FILE: lib/cpumap.c:28:
+#include <asm/string.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: lib/cpumap.c:31:
+#ifndef BUG

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: lib/cpumap.c:32:
+  #define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#224: FILE: lib/cpumap.c:33:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

CHECK:SPACING: No space is necessary after a cast
#225: FILE: lib/cpumap.c:34:
+	* ((char *) 0) = 0; \

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#225: FILE: lib/cpumap.c:34:
+	* ((char *) 0) = 0; \
 	^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: lib/cpumap.c:35:
+  } while (0)$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#236: FILE: lib/cpumap.c:45:
+	if (size < CPUMAP_BUFSIZE) {
+		BUG();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: lib/cpumap.c:46:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#241: FILE: lib/cpumap.c:50:
+	sprintf(buf, "0x" CPUMAP_FORMAT_STR, map[CPUMAP_SIZE-1]);
 	                                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: lib/cpumap.c:54:
+		char *p = buf + strlen(buf);
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#245: FILE: lib/cpumap.c:54:
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {
 		                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#245: FILE: lib/cpumap.c:54:
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {
+			sprintf(p, " " CPUMAP_FORMAT_STR, map[i]);
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: lib/cpumap.c:73:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#265: FILE: lib/cpumap.c:74:
+		if (cpumap[i] !=  0) {
+			return 0;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: lib/cpumap.c:87:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#279: FILE: lib/cpumap.c:88:
+		if (map1[i] !=  map2[i]) {
+			return 0;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: lib/cpumap.c:98:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#289: FILE: lib/cpumap.c:98:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		cpumap[i] = 0UL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: lib/cpumap.c:106:
+	int i;
+	for (i = 0; i < (CPUMAP_SIZE - 1); i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#297: FILE: lib/cpumap.c:106:
+	for (i = 0; i < (CPUMAP_SIZE - 1); i++) {
+		cpumap[i] = ~0UL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: lib/cpumap.c:119:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#310: FILE: lib/cpumap.c:119:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		destmap[i] = srcmap[i];
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: lib/cpumap.c:127:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#318: FILE: lib/cpumap.c:127:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		result[i] = map1[i] & map2[i];
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468201.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 28 warnings, 15 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468201.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
