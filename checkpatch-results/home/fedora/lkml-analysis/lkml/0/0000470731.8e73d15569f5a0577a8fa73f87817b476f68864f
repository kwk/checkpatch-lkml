WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -urN -X scripts/dontdiff linux-2.5.6/fs/minix/bitmap.c linux/fs/minix/bitmap.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#55: FILE: fs/minix/bitmap.c:55:
+	struct minix_sb_info * sbi = minix_sb(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: fs/minix/bitmap.c:86:
+	struct minix_sb_info * sbi = minix_sb(sb);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#110: FILE: fs/minix/bitmap.c:109:
+	j += i*8192 + sbi->s_firstdatazone-1;
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#110: FILE: fs/minix/bitmap.c:109:
+	j += i*8192 + sbi->s_firstdatazone-1;
 	                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#123: FILE: fs/minix/bitmap.c:119:
+	struct minix_sb_info *sbi = minix_sb(sb);
+	return (count_free(sbi->s_zmap, sbi->s_zmap_blocks,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: fs/minix/bitmap.c:120:
+	return (count_free(sbi->s_zmap, sbi->s_zmap_blocks,
+		sbi->s_nzones - sbi->s_firstdatazone + 1)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: fs/minix/dir.c:143:
+	struct minix_sb_info * sbi = minix_sb(sb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/minix/dir.c:181:
+	struct minix_sb_info * sbi = minix_sb(sb);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: fs/minix/dir.c:239:
+	unsigned to = from + minix_sb(inode->i_sb)->s_dirsize;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: fs/minix/dir.c:259:
+	struct minix_sb_info * sbi = minix_sb(inode->i_sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#314: FILE: fs/minix/inode.c:71:
+	brelse (sbi->s_sbh);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: fs/minix/inode.c:133:
+	struct minix_sb_info * sbi = minix_sb(sb);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#397: FILE: fs/minix/itree_v1.c:31:
+	} else if (block >= (minix_sb(inode->i_sb)->s_max_size/BLOCK_SIZE)) {
 	                                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#409: FILE: fs/minix/itree_v2.c:31:
+	} else if (block >= (minix_sb(inode->i_sb)->s_max_size/BLOCK_SIZE)) {
 	                                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: fs/minix/namei.c:224:
+	struct minix_sb_info * info = minix_sb(old_dir->i_sb);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#469: FILE: include/linux/minix_fs.h:35:
+#define INODE_VERSION(inode)	minix_sb(inode->i_sb)->s_version

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct minix_sb_info)...)
#520: FILE: fs/minix/inode.c:177:
+	sbi = kmalloc(sizeof(struct minix_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 4 warnings, 7 checks, 441 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
