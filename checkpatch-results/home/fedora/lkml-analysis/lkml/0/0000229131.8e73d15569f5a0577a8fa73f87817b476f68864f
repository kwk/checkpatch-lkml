WARNING:LINE_SPACING: Missing a blank line after declarations
#45: FILE: fs/fuse/dev.c:274:
+	struct fuse_getdir_out_i *arg = req->out.args[0].value;
+	arg->file = fget(arg->fd);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#56: FILE: fs/fuse/dev.c:387:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: fs/fuse/dev.c:391:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#74: FILE: fs/fuse/dir.c:17:
+static struct inode_operations fuse_file_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#75: FILE: fs/fuse/dir.c:18:
+static struct inode_operations fuse_symlink_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#76: FILE: fs/fuse/dir.c:19:
+static struct file_operations fuse_dir_operations;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#77: FILE: fs/fuse/dir.c:20:
+static struct dentry_operations fuse_dentry_operations;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#89: FILE: fs/fuse/dir.c:51:
+	}
+	else if (S_ISDIR(inode->i_mode)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#93: FILE: fs/fuse/dir.c:55:
+	}
+	else if (S_ISLNK(inode->i_mode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: fs/fuse/dir.c:58:
+^Ielse if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode) || $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#96: FILE: fs/fuse/dir.c:58:
+	}
+	else if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode) || 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: fs/fuse/dir.c:65:
+		printk("fuse_init_inode: bad file type: %o\n", inode->i_mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fuse_init_inode', this function's name, in a string
#103: FILE: fs/fuse/dir.c:65:
+		printk("fuse_init_inode: bad file type: %o\n", inode->i_mode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/fuse/dir.c:145:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: fs/fuse/dir.c:220:
+^Ierr = req->out.h.error;^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: fs/fuse/dir.c:236:
+	if (fi->nodeid == FUSE_ROOT_ID) {
[...]
+	} else if (!fi->i_time || time_before_eq(jiffies, fi->i_time))
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/fuse/dir.c:245:
+static int fuse_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                             ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#212: FILE: fs/fuse/dir.c:259:
+		struct fuse_dirent *dirent = (struct fuse_dirent *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: fs/fuse/dir.c:262:
+		int over;
+		if (dirent->namelen > NAME_MAX) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#216: FILE: fs/fuse/dir.c:263:
+			printk("fuse_readdir: name too long\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: fs/fuse/dir.c:270:
+		over = filldir(dstbuf, dirent->name, dirent->namelen,
+			      file->f_pos, dirent->ino, dirent->type);

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: fs/fuse/dir.c:285:
+	struct inode *inode;
+	if (!cfile) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: fs/fuse/dir.c:286:
+		printk("fuse_getdir: invalid file\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: fs/fuse/dir.c:291:
+		printk("fuse_getdir: not a regular file\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/fuse/dir.c:295:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: fs/fuse/dir.c:318:
+^Ierr = req->out.h.error;^I$

CHECK:SPACING: No space is necessary after a cast
#292: FILE: fs/fuse/dir.c:339:
+	buf = (char *) __get_free_page(GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: fs/fuse/dir.c:342:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: fs/fuse/dir.c:345:
+		printk("fuse_readdir: failed to read container file\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fuse_readdir', this function's name, in a string
#298: FILE: fs/fuse/dir.c:345:
+		printk("fuse_readdir: failed to read container file\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: fs/fuse/dir.c:346:
+^Ielse $

CHECK:SPACING: No space is necessary after a cast
#302: FILE: fs/fuse/dir.c:349:
+	free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#317: FILE: fs/fuse/dir.c:364:
+	link = (char *) __get_free_page(GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#329: FILE: fs/fuse/dir.c:376:
+	if (req->out.h.error) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#330: FILE: fs/fuse/dir.c:377:
+		free_page((unsigned long) link);

CHECK:BRACES: Unbalanced braces around else statement
#332: FILE: fs/fuse/dir.c:379:
+	} else

CHECK:SPACING: No space is necessary after a cast
#342: FILE: fs/fuse/dir.c:389:
+		free_page((unsigned long) link);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: fs/fuse/dir.c:404:
+static int fuse_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#363: FILE: fs/fuse/dir.c:410:
+	ret = vfs_follow_link(nd, link);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#384: FILE: fs/fuse/dir.c:431:
+static int fuse_dentry_revalidate(struct dentry *entry, struct nameidata *nd)
                                                                           ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: fs/fuse/dir.c:433:
+	if (!entry->d_inode)
[...]
+	else if (entry->d_time && time_after(jiffies, entry->d_time)) {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: fs/fuse/dir.c:441:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: fs/fuse/dir.c:446:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: fs/fuse/dir.c:449:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: fs/fuse/dir.c:465:
+	int err = fuse_revalidate(entry);
+	if (!err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: fs/fuse/dir.c:467:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#435: FILE: fs/fuse/dir.c:487:
+static struct file_operations fuse_dir_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#442: FILE: fs/fuse/dir.c:494:
+static struct inode_operations fuse_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#447: FILE: fs/fuse/dir.c:499:
+static struct inode_operations fuse_symlink_inode_operations = {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#453: FILE: fs/fuse/dir.c:505:
+static struct dentry_operations fuse_dentry_operations = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: fs/fuse/inode.c:122:
+        req = fuse_get_request(fc);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: fs/fuse/inode.c:122:
+        req = fuse_get_request(fc);$

CHECK:SPACING: No space is necessary after a cast
#622: FILE: include/linux/fuse.h:136:
+#define FUSE_NAME_OFFSET ((unsigned int) ((struct fuse_dirent *) 0)->name)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 24 warnings, 13 checks, 562 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
