WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: arch/um/os-Linux/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open brace '{'
#399: FILE: arch/um/os-Linux/main.c:45:
+	if(getrlimit(RLIMIT_STACK, &lim) < 0){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: arch/um/os-Linux/main.c:45:
+	if(getrlimit(RLIMIT_STACK, &lim) < 0){

ERROR:SPACING: space required before the open brace '{'
#403: FILE: arch/um/os-Linux/main.c:49:
+	if((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lim.rlim_cur == RLIM_INFINITY'
#403: FILE: arch/um/os-Linux/main.c:49:
+	if((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lim.rlim_cur > STACKSIZE'
#403: FILE: arch/um/os-Linux/main.c:49:
+	if((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)){

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: arch/um/os-Linux/main.c:49:
+	if((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)){

ERROR:SPACING: space required before the open brace '{'
#405: FILE: arch/um/os-Linux/main.c:51:
+		if(setrlimit(RLIMIT_STACK, &lim) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: arch/um/os-Linux/main.c:51:
+		if(setrlimit(RLIMIT_STACK, &lim) < 0){

ERROR:SPACING: space required before the open brace '{'
#418: FILE: arch/um/os-Linux/main.c:64:
+	while (call < &__uml_initcall_end){;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: arch/um/os-Linux/main.c:64:
+	while (call < &__uml_initcall_end){;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited after that open parenthesis '('
#435: FILE: arch/um/os-Linux/main.c:81:
+extern void scan_elf_aux( char **envp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#435: FILE: arch/um/os-Linux/main.c:81:
+extern void scan_elf_aux( char **envp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open brace '{'
#449: FILE: arch/um/os-Linux/main.c:95:
+	if(sigprocmask(SIG_SETMASK, &mask, NULL) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: arch/um/os-Linux/main.c:95:
+	if(sigprocmask(SIG_SETMASK, &mask, NULL) < 0){

ERROR:SPACING: space required before the open brace '{'
#456: FILE: arch/um/os-Linux/main.c:102:
+	if(argc < 2 || strlen(argv[1]) < THREAD_NAME_LEN - 1){

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: arch/um/os-Linux/main.c:102:
+	if(argc < 2 || strlen(argv[1]) < THREAD_NAME_LEN - 1){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#457: FILE: arch/um/os-Linux/main.c:103:
+	if(argc < 2 || strlen(argv[1]) < THREAD_NAME_LEN - 1){
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#459: FILE: arch/um/os-Linux/main.c:105:
+			[ 0 ...  THREAD_NAME_LEN - 2] = ' ', '\0'

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#462: FILE: arch/um/os-Linux/main.c:108:
+		new_argv = malloc((argc + 2) * sizeof(char*));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#463: FILE: arch/um/os-Linux/main.c:109:
+		if(!new_argv) {

ERROR:SPACING: space required before the open parenthesis '('
#471: FILE: arch/um/os-Linux/main.c:117:
+		for(i = 2; i <= argc; i++)

ERROR:SPACING: space required before the open brace '{'
#486: FILE: arch/um/os-Linux/main.c:132:
+	if(new_argv == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: arch/um/os-Linux/main.c:132:
+	if(new_argv == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_argv"
#486: FILE: arch/um/os-Linux/main.c:132:
+	if(new_argv == NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){
 	              ^

ERROR:SPACING: space required before the open brace '{'
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: arch/um/os-Linux/main.c:136:
+	for(i=0;i<argc;i++){

ERROR:SPACING: space required before the open brace '{'
#492: FILE: arch/um/os-Linux/main.c:138:
+		if(new_argv[i] == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#492: FILE: arch/um/os-Linux/main.c:138:
+		if(new_argv[i] == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_argv[i]"
#492: FILE: arch/um/os-Linux/main.c:138:
+		if(new_argv[i] == NULL){

ERROR:SPACING: space prohibited after that open parenthesis '('
#503: FILE: arch/um/os-Linux/main.c:149:
+	scan_elf_aux( envp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: arch/um/os-Linux/main.c:160:
+        /* This signal stuff used to be in the reboot case.  However,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'reproducably' may be misspelled - perhaps 'reproducibly'?
#515: FILE: arch/um/os-Linux/main.c:161:
+         * sometimes a SIGVTALRM can come in when we're halting (reproducably
                                                                  ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: arch/um/os-Linux/main.c:161:
+         * sometimes a SIGVTALRM can come in when we're halting (reproducably$

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: arch/um/os-Linux/main.c:162:
+         * when writing out gcov information, presumably because that takes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: arch/um/os-Linux/main.c:163:
+         * some time) and cause a segfault.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: arch/um/os-Linux/main.c:164:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: arch/um/os-Linux/main.c:166:
+        /* stop timers and set SIG*ALRM to be ignored */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: arch/um/os-Linux/main.c:167:
+        disable_timer();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: arch/um/os-Linux/main.c:167:
+        disable_timer();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: arch/um/os-Linux/main.c:169:
+        /* disable SIGIO for the fds and set SIGIO to be ignored */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: arch/um/os-Linux/main.c:170:
+        err = deactivate_all_fds();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/um/os-Linux/main.c:170:
+        err = deactivate_all_fds();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: arch/um/os-Linux/main.c:171:
+        if(err)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: arch/um/os-Linux/main.c:171:
+        if(err)$

ERROR:SPACING: space required before the open parenthesis '('
#525: FILE: arch/um/os-Linux/main.c:171:
+        if(err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: arch/um/os-Linux/main.c:172:
+                printf("deactivate_all_fds failed, errno = %d\n", -err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: arch/um/os-Linux/main.c:172:
+                printf("deactivate_all_fds failed, errno = %d\n", -err);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: arch/um/os-Linux/main.c:174:
+        /* Let any pending signals fire now.  This ensures$

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: arch/um/os-Linux/main.c:175:
+         * that they won't be delivered after the exec, when$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: arch/um/os-Linux/main.c:176:
+         * they are definitely not expected.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: arch/um/os-Linux/main.c:177:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: arch/um/os-Linux/main.c:178:
+        unblock_signals();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/um/os-Linux/main.c:178:
+        unblock_signals();$

ERROR:SPACING: space required before the open brace '{'
#535: FILE: arch/um/os-Linux/main.c:181:
+	if(ret){

ERROR:SPACING: space required before the open parenthesis '('
#535: FILE: arch/um/os-Linux/main.c:181:
+	if(ret){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#542: FILE: arch/um/os-Linux/main.c:188:
+	return(uml_exitcode);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#548: FILE: arch/um/os-Linux/main.c:194:
+extern void *__real_malloc(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#548: FILE: arch/um/os-Linux/main.c:194:
+extern void *__real_malloc(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required before the open parenthesis '('
#554: FILE: arch/um/os-Linux/main.c:200:
+	if(!CAN_KMALLOC())

WARNING:TYPO_SPELLING: 'contiguos' may be misspelled - perhaps 'contiguous'?
#556: FILE: arch/um/os-Linux/main.c:202:
+	else if(size <= PAGE_SIZE) /* finding contiguos pages can be hard*/
 	                                      ^^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#556: FILE: arch/um/os-Linux/main.c:202:
+	else if(size <= PAGE_SIZE) /* finding contiguos pages can be hard*/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#558: FILE: arch/um/os-Linux/main.c:204:
+	else ret = um_vmalloc(size);

ERROR:SPACING: space required before the open parenthesis '('
#563: FILE: arch/um/os-Linux/main.c:209:
+	if(ret == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#563: FILE: arch/um/os-Linux/main.c:209:
+	if(ret == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#566: FILE: arch/um/os-Linux/main.c:212:
+	return(ret);

ERROR:SPACING: space required before the open parenthesis '('
#573: FILE: arch/um/os-Linux/main.c:219:
+	if(ptr == NULL) return(NULL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#573: FILE: arch/um/os-Linux/main.c:219:
+	if(ptr == NULL) return(NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#573: FILE: arch/um/os-Linux/main.c:219:
+	if(ptr == NULL) return(NULL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#575: FILE: arch/um/os-Linux/main.c:221:
+	return(ptr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#580: FILE: arch/um/os-Linux/main.c:226:
+extern unsigned long high_physmem;

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/um/os-Linux/main.c:230:
+	unsigned long addr = (unsigned long) ptr;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: arch/um/os-Linux/main.c:235:
+^I * ^Iphysical memory - kmalloc/kfree$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#591: FILE: arch/um/os-Linux/main.c:237:
+^I * ^Ianywhere else - malloc/free$

ERROR:SPACING: space required before the open brace '{'
#604: FILE: arch/um/os-Linux/main.c:250:
+	if((addr >= uml_physmem) && (addr < high_physmem)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= uml_physmem'
#604: FILE: arch/um/os-Linux/main.c:250:
+	if((addr >= uml_physmem) && (addr < high_physmem)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < high_physmem'
#604: FILE: arch/um/os-Linux/main.c:250:
+	if((addr >= uml_physmem) && (addr < high_physmem)){

ERROR:SPACING: space required before the open parenthesis '('
#604: FILE: arch/um/os-Linux/main.c:250:
+	if((addr >= uml_physmem) && (addr < high_physmem)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#604: FILE: arch/um/os-Linux/main.c:250:
+	if((addr >= uml_physmem) && (addr < high_physmem)){
[...]
+	else if((addr >= start_vm) && (addr < end_vm)){
[...]
+	else __real_free(ptr);
[...]

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: arch/um/os-Linux/main.c:251:
+		if(CAN_KMALLOC())

ERROR:SPACING: space required before the open brace '{'
#608: FILE: arch/um/os-Linux/main.c:254:
+	else if((addr >= start_vm) && (addr < end_vm)){

ERROR:SPACING: space required before the open parenthesis '('
#608: FILE: arch/um/os-Linux/main.c:254:
+	else if((addr >= start_vm) && (addr < end_vm)){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#608: FILE: arch/um/os-Linux/main.c:254:
+	}
+	else if((addr >= start_vm) && (addr < end_vm)){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#609: FILE: arch/um/os-Linux/main.c:255:
+		if(CAN_KMALLOC())

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#612: FILE: arch/um/os-Linux/main.c:258:
+	else __real_free(ptr);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#612: FILE: arch/um/os-Linux/main.c:258:
+	}
+	else __real_free(ptr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 65 errors, 14 warnings, 11 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
