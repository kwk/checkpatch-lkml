WARNING:TYPO_SPELLING: 'agains' may be misspelled - perhaps 'against'?
#32: 
This patch agains 2.4.20-pre5:
           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'peices' may be misspelled - perhaps 'pieces'?
#42: 
* Splits up a nasty monolithic header (befs_fs.h) into peices
                                                       ^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#70: FILE: MAINTAINERS:249:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'enableing' may be misspelled - perhaps 'enabling'?
#104: FILE: Documentation/Configure.help:14837:
+  of the driver, where enableing this option would turn on debugging
                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'automaticly' may be misspelled - perhaps 'automatically'?
#105: FILE: Documentation/Configure.help:14838:
+  output automaticly.
          ^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: fs/befs/befs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#182: FILE: fs/befs/befs.h:23:
+typedef struct befs_mount_options {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#191: FILE: fs/befs/befs.h:32:
+typedef struct befs_sb_info {

WARNING:TYPO_SPELLING: 'jornal' may be misspelled - perhaps 'journal'?
#206: FILE: fs/befs/befs.h:47:
+	/* jornal log entry */
 	   ^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#220: FILE: fs/befs/befs.h:61:
+typedef struct befs_inode_info {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'befs_inode *' should also have an identifier name
#254: FILE: fs/befs/befs.h:94:
+void befs_dump_inode(const struct super_block *sb, befs_inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#257: FILE: fs/befs/befs.h:96:
+void befs_dump_index_node(const struct super_block *sb, befs_btree_nodehea=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'befs_inode_addr' should also have an identifier name
#259: FILE: fs/befs/befs.h:97:
+void befs_dump_inode_addr(const struct super_block *sb, befs_inode_addr);

CHECK:SPACING: No space is necessary after a cast
#268: FILE: fs/befs/befs.h:106:
+	return (befs_sb_info *) super->u.generic_sbp;

CHECK:SPACING: No space is necessary after a cast
#274: FILE: fs/befs/befs.h:112:
+	return (befs_inode_info *) inode->u.generic_ip;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: fs/befs/befs.h:116:
+iaddr2blockno(struct super_block *sb, befs_inode_addr * iaddr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/befs/befs.h:126:
+	befs_inode_addr iaddr;
+	iaddr.allocation_group =3D blockno >> BEFS_SB(sb)->ag_shift;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#288: FILE: fs/befs/befs.h:126:
+	iaddr.allocation_group =3D blockno >> BEFS_SB(sb)->ag_shift;
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#289: FILE: fs/befs/befs.h:127:
+	iaddr.start =3D
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#291: FILE: fs/befs/befs.h:129:
+	iaddr.len =3D 1;
 	          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: fs/befs/befs.h:137:
+	return BEFS_SB(sb)->block_size / sizeof (befs_inode_addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#303: FILE: fs/befs/befs.h:141:
+befs_iaddr_is_empty(befs_inode_addr * iaddr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#545: FILE: fs/befs/befs_fs_types.h:55:
 };
+#define BEFS_BYTEORDER_NATIVE 0x42494745

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#706: FILE: fs/befs/btree.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#711: FILE: fs/befs/btree.c:6:
+int befs_btree_find(struct super_block *sb, befs_data_stream * ds,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#711: FILE: fs/befs/btree.c:6:
+int befs_btree_find(struct super_block *sb, befs_data_stream * ds,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: fs/befs/btree.c:7:
+		    const char *key, befs_off_t * value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#714: FILE: fs/befs/btree.c:9:
+int befs_btree_read(struct super_block *sb, befs_data_stream * ds,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#714: FILE: fs/befs/btree.c:9:
+int befs_btree_read(struct super_block *sb, befs_data_stream * ds,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: fs/befs/btree.c:11:
+		    size_t * keysize, befs_off_t * value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: fs/befs/btree.c:11:
+		    size_t * keysize, befs_off_t * value);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#779: FILE: fs/befs/datastream.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#785: FILE: fs/befs/datastream.h:7:
+					 befs_data_stream * ds, befs_off_t pos,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#786: FILE: fs/befs/datastream.h:8:
+					 uint * off);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: fs/befs/datastream.h:10:
+int befs_fblock2brun(struct super_block *sb, befs_data_stream * data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#789: FILE: fs/befs/datastream.h:11:
+		     befs_blocknr_t fblock, befs_block_run * run);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: fs/befs/datastream.h:13:
+size_t befs_read_lsymlink(struct super_block *sb, befs_data_stream * data,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'befs_data_stream' should also have an identifier name
#794: FILE: fs/befs/datastream.h:16:
+befs_blocknr_t befs_count_blocks(struct super_block *sb, befs_data_stream =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#842: FILE: fs/befs/inode.c:22:
+	u32 magic1 =3D fs32_to_cpu(sb, raw_inode->magic1);
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#845: FILE: fs/befs/inode.c:24:
+	u32 flags =3D fs32_to_cpu(sb, raw_inode->flags);
 	          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#854: FILE: fs/befs/inode.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#859: FILE: fs/befs/inode.h:6:
+int befs_check_inode(struct super_block *sb, befs_inode * raw_inode,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#880: FILE: fs/befs/io.c:1:
+/*

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#887: FILE: fs/befs/io.c:8:
+struct buffer_head *befs_bread(struct super_block *sb, befs_blocknr_t bloc=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#933: FILE: fs/befs/linuxvfs.c:60:
+static int befs_setxattr(struct dentry *dentry, const char *name, void *va=
                                                                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#947: FILE: fs/befs/linuxvfs.c:72:
+	remount_fs:befs_remount,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#947: FILE: fs/befs/linuxvfs.c:72:
+	remount_fs:befs_remount,

WARNING:INDENTED_LABEL: labels should not be indented
#956: FILE: fs/befs/linuxvfs.c:75:
+	read:generic_read_dir,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#957: FILE: fs/befs/linuxvfs.c:76:
+	readdir:befs_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#957: FILE: fs/befs/linuxvfs.c:76:
+	readdir:befs_readdir,

WARNING:INDENTED_LABEL: labels should not be indented
#962: FILE: fs/befs/linuxvfs.c:79:
+	lookup:befs_lookup,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#969: FILE: fs/befs/linuxvfs.c:83:
+	read:generic_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#969: FILE: fs/befs/linuxvfs.c:83:
+	read:generic_file_read,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#970: FILE: fs/befs/linuxvfs.c:84:
+	mmap:generic_file_mmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#970: FILE: fs/befs/linuxvfs.c:84:
+	mmap:generic_file_mmap,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#973: FILE: fs/befs/linuxvfs.c:87:
+struct inode_operations befs_file_inode_operations =3D {
                                                    ^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#973: FILE: fs/befs/linuxvfs.c:87:
+struct inode_operations befs_file_inode_operations =3D {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#983: FILE: fs/befs/linuxvfs.c:100:
+	readlink:befs_readlink,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#984: FILE: fs/befs/linuxvfs.c:101:
+	follow_link:befs_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#984: FILE: fs/befs/linuxvfs.c:101:
+	follow_link:befs_follow_link,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1005: FILE: fs/befs/linuxvfs.c:402:
+		inode->i_op =3D &befs_file_inode_operations;
 		            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#1005: FILE: fs/befs/linuxvfs.c:402:
+		inode->i_op =3D &befs_file_inode_operations;
 		                ^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#1015: FILE: fs/befs/linuxvfs.c:556:
+	int maxlen =3D in_len;	/* The utf8->nls conversion cant make more chars *=
 	                      	                            ^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1015: FILE: fs/befs/linuxvfs.c:556:
+	int maxlen =3D in_len;	/* The utf8->nls conversion cant make more chars *=
 	           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1030: FILE: fs/befs/linuxvfs.c:683:
+	printk(KERN_ERR "befs_listxattr called\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'befs_listxattr', this function's name, in a string
#1030: FILE: fs/befs/linuxvfs.c:683:
+	printk(KERN_ERR "befs_listxattr called\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1079: FILE: fs/befs/super.c:29:
+	if (le32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE)
 	                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1079: FILE: fs/befs/super.c:29:
+	if (le32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE)
 	                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1079: FILE: fs/befs/super.c:29:
+	if (le32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1080: FILE: fs/befs/super.c:30:
+		befs_sb->byte_order =3D BEFS_BYTESEX_LE;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1081: FILE: fs/befs/super.c:31:
+	else if (be32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE=
 	                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1081: FILE: fs/befs/super.c:31:
+	else if (be32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE=
 	                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1081: FILE: fs/befs/super.c:31:
+	else if (be32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE=
 	                                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1081: FILE: fs/befs/super.c:31:
+	else if (be32_to_cpu(disk_sb->fs_byte_order) =3D=3D BEFS_BYTEORDER_NATIVE=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1083: FILE: fs/befs/super.c:32:
+		befs_sb->byte_order =3D BEFS_BYTESEX_BE;
 		                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1092: FILE: fs/befs/super.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1096: FILE: fs/befs/super.h:5:
+int befs_load_sb(struct super_block *sb, befs_super_block * disk_sb);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436027.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 33 warnings, 9 checks, 729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436027.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
