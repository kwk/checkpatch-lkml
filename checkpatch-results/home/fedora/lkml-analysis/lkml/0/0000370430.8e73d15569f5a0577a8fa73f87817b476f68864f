WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -u -p -r linux/include/net/irda.d9/iriap.h linux/include/net/irda/iriap.h

ERROR:SPACING: space prohibited before that close parenthesis ')'
#195: FILE: net/irda/ircomm/ircomm_core.c:372:
+			   __FUNCTION__ );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#195: FILE: net/irda/ircomm/ircomm_core.c:372:
+			   __FUNCTION__ );

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: net/irda/ircomm/ircomm_core.c:420:
+		skb_trim(ctrl_skb, clen+1);
 		                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: net/irda/ircomm/ircomm_core.c:426:
+		 * see ircomm_tty_control_indication(). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: net/irda/ircomm/ircomm_lmp.c:98:
+	if(userdata)

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: net/irda/ircomm/ircomm_lmp.c:148:
+        struct sk_buff *tx_skb;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: net/irda/ircomm/ircomm_lmp.c:148:
+        struct sk_buff *tx_skb;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: net/irda/ircomm/ircomm_lmp.c:159:
+^I^Iskb_reserve(tx_skb, LMP_MAX_HEADER);^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: net/irda/ircomm/ircomm_lmp.c:367:
+	if(skb)

ERROR:SPACING: space required before the open parenthesis '('
#457: FILE: net/irda/ircomm/ircomm_ttp.c:99:
+	if(userdata)

ERROR:SPACING: space required before the open parenthesis '('
#481: FILE: net/irda/ircomm/ircomm_ttp.c:123:
+	if(userdata)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: net/irda/ircomm/ircomm_ttp.c:141:
+^I^I^I    struct sk_buff *skb, $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qos"
#533: FILE: net/irda/ircomm/ircomm_ttp.c:211:
+	ASSERT(qos != NULL, goto out;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qos"
#559: FILE: net/irda/ircomm/ircomm_ttp.c:251:
+	ASSERT(qos != NULL, goto out;);

ERROR:SPACING: space required before the open parenthesis '('
#585: FILE: net/irda/ircomm/ircomm_ttp.c:283:
+	if(userdata)

ERROR:SPACING: space required before the open parenthesis '('
#597: FILE: net/irda/ircomm/ircomm_ttp.c:314:
+	if(skb)

ERROR:SPACING: space required before the open parenthesis '('
#619: FILE: net/irda/ircomm/ircomm_tty.c:667:
+	if(ctrl_skb) {

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: net/irda/ircomm/ircomm_tty.c:668:
+		if(self->flow == FLOW_START)

CHECK:SPACING: No space is necessary after a cast
#688: FILE: net/irda/ircomm/ircomm_tty_attach.c:242:
+					   NULL, (void *) self);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_skb"
#832: FILE: net/irda/iriap.c:334:
+	if (tx_skb == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#872: FILE: net/irda/iriap.c:415:
+	skb_put(tx_skb, 3+name_len+attr_len);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#872: FILE: net/irda/iriap.c:415:
+	skb_put(tx_skb, 3+name_len+attr_len);
 	                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#1039: FILE: net/irda/iriap.c:755:
+	ASSERT(skb != NULL, return;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#1069: FILE: net/irda/iriap.c:785:
+	ASSERT(skb != NULL, return;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1070: FILE: net/irda/iriap.c:786:
+	ASSERT(self != NULL, goto out;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1112: FILE: net/irda/iriap.c:834:
+	ASSERT(self != NULL, goto out;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->request_skb"
#1205: FILE: net/irda/iriap_event.c:178:
+		ASSERT(self->request_skb == NULL, return;);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: net/irda/iriap_event.c:180:
+		 * see iriap_getvaluebyclass_request(). */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1268: FILE: net/irda/iriap_event.c:468:
+	ASSERT(self != NULL, return;);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1279: FILE: net/irda/iriap_event.c:480:
+		 * iriap_getvaluebyclass_response(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1392: FILE: net/irda/irlap_event.c:292:
+				 * irlap_send_data_xxx() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1401: FILE: net/irda/irlap_event.c:524:
+			 * count, so no dev_kfree_skb() - Jean II */

CHECK:SPACING: No space is necessary after a cast
#1437: FILE: net/irda/irlap_frame.c:121:
+	frame = (struct snrm_frame *) skb_put(tx_skb, 2);

CHECK:SPACING: No space is necessary after a cast
#1488: FILE: net/irda/irlap_frame.c:214:
+	frame = (struct ua_frame *) skb_put(tx_skb, 10);

CHECK:SPACING: No space is necessary after a cast
#1593: FILE: net/irda/irlap_frame.c:320:
+	frame = (struct xid_frame *) tx_skb->data;

ERROR:SPACING: space prohibited after that open parenthesis '('
#1698: FILE: net/irda/irlap_frame.c:629:
+	tx_skb = dev_alloc_skb( 32);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1721: FILE: net/irda/irlap_frame.c:740:
+		/*
+		 *  Insert frame in store, in case of retransmissions

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1746: FILE: net/irda/irlap_frame.c:785:
+		/*
+		 *  Insert frame in store, in case of retransmissions

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1772: FILE: net/irda/irlap_frame.c:855:
+		/*
+		 *  Insert frame in store, in case of retransmissions

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1794: FILE: net/irda/irlap_frame.c:912:
+		/*
+		 *  Insert frame in store, in case of retransmissions

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1841: FILE: net/irda/irlap_frame.c:1197:
+	tx_skb = dev_alloc_skb(cmd->len+sizeof(struct test_frame));
 	                               ^

CHECK:SPACING: No space is necessary after a cast
#1856: FILE: net/irda/irlap_frame.c:1210:
+		frame = (struct test_frame *) skb_put(tx_skb, LAP_ADDR_HEADER + LAP_CTRL_HEADER);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_skb"
#1952: FILE: net/irda/irlmp.c:372:
+	if (tx_skb == NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#2013: FILE: net/irda/irlmp.c:475:
+	if(tx_skb)

ERROR:SPACING: space required before the open parenthesis '('
#2104: FILE: net/irda/irlmp.c:758:
+		if(skb)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "userdata"
#2178: FILE: net/irda/irlmp.c:1128:
+	ASSERT(userdata != NULL, return -1;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "userdata"
#2224: FILE: net/irda/irlmp.c:1178:
+	ASSERT(userdata != NULL, return -1;);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2228: FILE: net/irda/irlmp.c:1181:
+	ASSERT(skb_headroom(userdata) >= LMP_HEADER+LMP_PID_HEADER,
 	                                           ^

WARNING:TABSTOP: Statements should start on a tabstop
#2229: FILE: net/irda/irlmp.c:1182:
+	       return -1;);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2241: FILE: net/irda/irlmp.c:1190:
+	userdata->data[0] = userdata->data[1] = LSAP_CONNLESS;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2258: FILE: net/irda/irlmp.c:1205:
+		 * so no dev_kfree_skb() - Jean II */

WARNING:TYPO_SPELLING: 'bizzare' may be misspelled - perhaps 'bizarre'?
#2326: FILE: net/irda/irlmp_event.c:496:
+		/* This is most bizzare. Those packets are  aka unreliable
 		                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2328: FILE: net/irda/irlmp_event.c:498:
+		 * Why do we pass them as Ultra ??? Jean II */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2529: FILE: net/irda/irlmp_frame.c:282:
+        /* FIXME: must do something with the skb if any */$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2588: FILE: net/irda/irttp.c:265:
+		   __FUNCTION__, n, self->rx_sdu_size, self->rx_max_sdu_size);

WARNING:TYPO_SPELLING: 'droped' may be misspelled - perhaps 'dropped'?
#2592: FILE: net/irda/irttp.c:269:
+	 * droped the last fragment (when self->rx_sdu_size exceed
 	   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2594: FILE: net/irda/irttp.c:271:
+	 * Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2669: FILE: net/irda/irttp.c:624:
+		 * to resend the data in the client code - Jean II */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2709: FILE: net/irda/irttp.c:859:
+						    self,skb);
 						        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2711: FILE: net/irda/irttp.c:861:
+^I^Iif (err != -ENOMEM) $

ERROR:SPACING: space required before the open parenthesis '('
#2735: FILE: net/irda/irttp.c:1078:
+		if(userdata)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2767: FILE: net/irda/irttp.c:1129:
+		frame = skb_push(tx_skb, TTP_HEADER+TTP_SAR_HEADER);
 		                                   ^

CHECK:BRACES: Unbalanced braces around else statement
#2794: FILE: net/irda/irttp.c:1232:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2838: FILE: net/irda/irttp.c:1365:
+		ASSERT(skb_headroom(tx_skb) >= (TTP_MAX_HEADER+TTP_SAR_HEADER),
 		                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2843: FILE: net/irda/irttp.c:1369:
+		frame = skb_push(tx_skb, TTP_HEADER+TTP_SAR_HEADER);
 		                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2877: FILE: net/irda/irttp.c:1520:
+		struct sk_buff *tx_skb;
+		tx_skb = dev_alloc_skb(64);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000370430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 21 warnings, 27 checks, 2595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000370430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
