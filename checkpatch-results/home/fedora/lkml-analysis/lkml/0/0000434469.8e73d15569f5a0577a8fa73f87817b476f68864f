ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: arch/ppc/kernel/entry.S:177:
+ ^ITRACE_REAL_ASM_SYSCALL_EXIT ; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#172: FILE: arch/ppc/kernel/process.c:303:
+long original_kernel_thread(int (*fn) (void *), void* arg, unsigned long flags);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#173: FILE: arch/ppc/kernel/process.c:304:
+long kernel_thread(int (*fn) (void *), void* arg, unsigned long flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: arch/ppc/kernel/process.c:306:
+        long   retval;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/ppc/kernel/process.c:306:
+        long   retval;$

CHECK:SPACING: No space is necessary after a cast
#179: FILE: arch/ppc/kernel/process.c:310:
+		TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, retval, (int) fn);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: arch/ppc/kernel/time.c:166:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: arch/ppc/kernel/time.c:166:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/ppc/kernel/time.c:166:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/ppc/kernel/time.c:223:
+ ^ITRACE_TRAP_EXIT();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: arch/ppc/kernel/time.c:223:
+ ^ITRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/ppc/kernel/time.c:223:
+ ^ITRACE_TRAP_EXIT();$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: arch/ppc/kernel/traps.c:379:
+asmlinkage void trace_real_syscall_entry(struct pt_regs * regs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/ppc/kernel/traps.c:381:
+        int                 use_depth;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/ppc/kernel/traps.c:381:
+        int                 use_depth;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/ppc/kernel/traps.c:384:
+        int                 seek_depth;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/ppc/kernel/traps.c:384:
+        int                 seek_depth;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/ppc/kernel/traps.c:385:
+        unsigned long       lower_bound;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/ppc/kernel/traps.c:385:
+        unsigned long       lower_bound;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/ppc/kernel/traps.c:386:
+        unsigned long       upper_bound;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/ppc/kernel/traps.c:386:
+        unsigned long       upper_bound;$

ERROR:POINTER_LOCATION: "foo*      bar" should be "foo *bar"
#275: FILE: arch/ppc/kernel/traps.c:388:
+	unsigned long*      stack;

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: arch/ppc/kernel/traps.c:391:
+        /* Set the syscall ID */$

CHECK:SPACING: No space is necessary after a cast
#279: FILE: arch/ppc/kernel/traps.c:392:
+	trace_syscall_event.syscall_id = (uint8_t) regs->gpr[0];

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#285: FILE: arch/ppc/kernel/traps.c:398:
+	if(!user_mode(regs))
[...]
+	  goto trace_syscall_end;

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: arch/ppc/kernel/traps.c:398:
+	if(!user_mode(regs))

WARNING:TABSTOP: Statements should start on a tabstop
#287: FILE: arch/ppc/kernel/traps.c:400:
+	  goto trace_syscall_end;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#290: FILE: arch/ppc/kernel/traps.c:403:
+	if(trace_get_config(&use_depth,
[...]
+	  goto trace_syscall_end;

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: arch/ppc/kernel/traps.c:403:
+	if(trace_get_config(&use_depth,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#293: FILE: arch/ppc/kernel/traps.c:406:
+			    (void*)&lower_bound,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#294: FILE: arch/ppc/kernel/traps.c:407:
+			    (void*)&upper_bound) < 0)

WARNING:TABSTOP: Statements should start on a tabstop
#295: FILE: arch/ppc/kernel/traps.c:408:
+	  goto trace_syscall_end;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#298: FILE: arch/ppc/kernel/traps.c:411:
+	if((use_depth == 1) || (use_bounds == 1))
+	  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#298: FILE: arch/ppc/kernel/traps.c:411:
+	if((use_depth == 1) || (use_bounds == 1))
[...]
+	  /* Start at the top of the stack (bottom address since stacks grow downward) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#298: FILE: arch/ppc/kernel/traps.c:411:
+	if((use_depth == 1) || (use_bounds == 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#298: FILE: arch/ppc/kernel/traps.c:411:
+	if((use_depth == 1) || (use_bounds == 1))

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: arch/ppc/kernel/traps.c:411:
+	if((use_depth == 1) || (use_bounds == 1))

WARNING:TABSTOP: Statements should start on a tabstop
#299: FILE: arch/ppc/kernel/traps.c:412:
+	  {

CHECK:SPACING: No space is necessary after a cast
#301: FILE: arch/ppc/kernel/traps.c:414:
+	  stack = (unsigned long*) regs->gpr[1];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#301: FILE: arch/ppc/kernel/traps.c:414:
+	  stack = (unsigned long*) regs->gpr[1];

WARNING:TABSTOP: Statements should start on a tabstop
#304: FILE: arch/ppc/kernel/traps.c:417:
+	  if(get_user(addr, stack))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#304: FILE: arch/ppc/kernel/traps.c:417:
+	  if(get_user(addr, stack))
+	    goto trace_syscall_end;

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: arch/ppc/kernel/traps.c:417:
+	  if(get_user(addr, stack))

WARNING:TABSTOP: Statements should start on a tabstop
#305: FILE: arch/ppc/kernel/traps.c:418:
+	    goto trace_syscall_end;

CHECK:SPACING: No space is necessary after a cast
#306: FILE: arch/ppc/kernel/traps.c:419:
+	  stack = (unsigned long*) addr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#306: FILE: arch/ppc/kernel/traps.c:419:
+	  stack = (unsigned long*) addr;

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#308: FILE: arch/ppc/kernel/traps.c:421:
+	  /* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TABSTOP: Statements should start on a tabstop
#309: FILE: arch/ppc/kernel/traps.c:422:
+	  while(!get_user(addr, stack + 1)) /* "stack + 1", since this is where the IP is */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#309: FILE: arch/ppc/kernel/traps.c:422:
+	  while(!get_user(addr, stack + 1)) /* "stack + 1", since this is where the IP is */
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#309: FILE: arch/ppc/kernel/traps.c:422:
+	  while(!get_user(addr, stack + 1)) /* "stack + 1", since this is where the IP is */
[...]
+	    /* Does this LOOK LIKE an address in the program */

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: arch/ppc/kernel/traps.c:422:
+	  while(!get_user(addr, stack + 1)) /* "stack + 1", since this is where the IP is */

WARNING:TABSTOP: Statements should start on a tabstop
#310: FILE: arch/ppc/kernel/traps.c:423:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#312: FILE: arch/ppc/kernel/traps.c:425:
+	    if((addr > current->mm->start_code)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#312: FILE: arch/ppc/kernel/traps.c:425:
+	    if((addr > current->mm->start_code)
+             &&(addr < current->mm->end_code))
+	      {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#312: FILE: arch/ppc/kernel/traps.c:425:
+	    if((addr > current->mm->start_code)
[...]
+	      /* Does this address fit the description */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#312: FILE: arch/ppc/kernel/traps.c:425:
+	    if((addr > current->mm->start_code)
+             &&(addr < current->mm->end_code))

ERROR:SPACING: space required before the open parenthesis '('
#312: FILE: arch/ppc/kernel/traps.c:425:
+	    if((addr > current->mm->start_code)

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: arch/ppc/kernel/traps.c:426:
+             &&(addr < current->mm->end_code))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: arch/ppc/kernel/traps.c:426:
+	    if((addr > current->mm->start_code)
+             &&(addr < current->mm->end_code))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/ppc/kernel/traps.c:426:
+             &&(addr < current->mm->end_code))$

ERROR:SPACING: spaces required around that '&&' (ctx:ExV)
#313: FILE: arch/ppc/kernel/traps.c:426:
+             &&(addr < current->mm->end_code))
              ^

WARNING:TABSTOP: Statements should start on a tabstop
#314: FILE: arch/ppc/kernel/traps.c:427:
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

ERROR:SPACING: space required before the open parenthesis '('
#316: FILE: arch/ppc/kernel/traps.c:429:
+	      if(((use_depth == 1) && (depth == seek_depth))

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: arch/ppc/kernel/traps.c:430:
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#317: FILE: arch/ppc/kernel/traps.c:430:
+	      if(((use_depth == 1) && (depth == seek_depth))
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: arch/ppc/kernel/traps.c:430:
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))$

ERROR:SPACING: spaces required around that '||' (ctx:ExV)
#317: FILE: arch/ppc/kernel/traps.c:430:
+               ||((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound)))
                ^

WARNING:TABSTOP: Statements should start on a tabstop
#325: FILE: arch/ppc/kernel/traps.c:438:
+	      else

WARNING:TABSTOP: Statements should start on a tabstop
#328: FILE: arch/ppc/kernel/traps.c:441:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#330: FILE: arch/ppc/kernel/traps.c:443:
+	    if(get_user(addr, stack))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#330: FILE: arch/ppc/kernel/traps.c:443:
+	    if(get_user(addr, stack))
+	      goto trace_syscall_end;

ERROR:SPACING: space required before the open parenthesis '('
#330: FILE: arch/ppc/kernel/traps.c:443:
+	    if(get_user(addr, stack))

WARNING:TABSTOP: Statements should start on a tabstop
#331: FILE: arch/ppc/kernel/traps.c:444:
+	      goto trace_syscall_end;

CHECK:SPACING: No space is necessary after a cast
#332: FILE: arch/ppc/kernel/traps.c:445:
+	    stack = (unsigned long*) addr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#332: FILE: arch/ppc/kernel/traps.c:445:
+	    stack = (unsigned long*) addr;

WARNING:TABSTOP: Statements should start on a tabstop
#333: FILE: arch/ppc/kernel/traps.c:446:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#334: FILE: arch/ppc/kernel/traps.c:447:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: arch/ppc/kernel/traps.c:456:
+        trace_event(TRACE_EV_SYSCALL_EXIT, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: arch/ppc/kernel/traps.c:456:
+        trace_event(TRACE_EV_SYSCALL_EXIT, NULL);$

ERROR:SPACING: space required before the open brace '{'
#377: FILE: arch/ppc/mm/fault.c:104:
+		if (debugger_dabr_match(regs)){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#440: FILE: include/asm-ppc/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#441: FILE: include/asm-ppc/trace.h:2:
+ * linux/include/asm-ppc/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#456: FILE: include/asm-ppc/trace.h:17:
+#define TRACE_ARCH_VARIANT_PPC_6xx          2   /* 6xx/7xx/74xx/8260/POWER3 systems (desktop flavor) */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 39 warnings, 15 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
