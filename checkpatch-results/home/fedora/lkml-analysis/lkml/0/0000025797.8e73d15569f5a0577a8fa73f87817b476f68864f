WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#81: FILE: fs/binfmt_aout.c:277:
+	    i_size_read(bprm->file->f_path.dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: fs/binfmt_aout.c:277:
+	    i_size_read(bprm->file->f_path.dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: fs/binfmt_aout.c:277:
+	    i_size_read(bprm->file->f_path.dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: fs/binfmt_aout.c:277:
+	    i_size_read(bprm->file->f_path.dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Node>
#165: FILE: fs/binfmt_misc.c:545:
+	Node *e = file->f_path.dentry->d_inode->i_private;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#183: FILE: fs/binfmt_misc.c:587:
+		case 3: root = dget(file->f_path.mnt->mnt_sb->s_root);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#197: FILE: fs/binfmt_misc.c:699:
 	switch (res) {
[...]
+		case 3: root = dget(file->f_path.mnt->mnt_sb->s_root);

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#201: FILE: fs/binfmt_misc.c:702:
+		case 3: root = dget(file->f_path.mnt->mnt_sb->s_root);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: fs/exec.c:915:
+	struct inode * inode = bprm->file->f_path.dentry->d_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: fs/exec.c:925:
+	if(!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: fs/fcntl.c:207:
+	struct inode * inode = filp->f_path.dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: fs/ioctl.c:48:
+	struct inode * inode = filp->f_path.dentry->d_inode;

CHECK:BRACES: braces {} should be used on all arms of this statement
#509: FILE: fs/ioctl.c:140:
+			if (S_ISDIR(filp->f_path.dentry->d_inode->i_mode) ||
[...]
 			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: fs/locks.c:737:
+	struct inode * inode = filp->f_path.dentry->d_inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: fs/locks.c:1954:
+^Istruct inode * inode = filp->f_path.dentry->d_inode; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#710: FILE: fs/locks.c:1954:
+	struct inode * inode = filp->f_path.dentry->d_inode; 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->intent.open.file->f_path.dentry"
#749: FILE: fs/namei.c:369:
+	if (nd->intent.open.file->f_path.dentry == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp->f_path.dentry"
#857: FILE: fs/open.c:825:
+	if (filp->f_path.dentry == NULL)

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#986: FILE: fs/read_write.c:73:
+	if (offset>=0 && offset<=file->f_path.dentry->d_inode->i_sb->s_maxbytes) {
 	          ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#986: FILE: fs/read_write.c:73:
+	if (offset>=0 && offset<=file->f_path.dentry->d_inode->i_sb->s_maxbytes) {
 	                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025797.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 1 warnings, 7 checks, 983 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025797.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
