WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
i_blocks in all references have been changed to data type sector_t in order 

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#40: 
to accomodate 64 bits.
   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: fs/ext3/inode.c:908:
+				sector_t block, int create, int * errp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: fs/ext3/inode.c:2687:
+			struct super_block *sb = inode->i_sb;
+			if (!EXT3_HAS_RO_COMPAT_FEATURE(sb,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: fs/ext3/inode.c:2688:
+			if (!EXT3_HAS_RO_COMPAT_FEATURE(sb,
+					EXT3_FEATURE_RO_COMPAT_MANY_BLOCKS) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: fs/ext3/inode.c:2696:
+				err = ext3_journal_get_write_access(handle,
+						EXT3_SB(sb)->s_sbh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: fs/ext3/inode.c:2701:
+				EXT3_SET_RO_COMPAT_FEATURE(sb,
+					EXT3_FEATURE_RO_COMPAT_MANY_BLOCKS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/ext3/inode.c:2705:
+				err = ext3_journal_dirty_metadata(handle,
+						EXT3_SB(sb)->s_sbh);

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: fs/ext3/super.c:1176:
+        if (res > (512LL << 32) - (1 << bits))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: fs/ext3/super.c:1176:
+        if (res > (512LL << 32) - (1 << bits))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/ext3/super.c:1177:
+                res = (512LL << 32) - (1 << bits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/ext3/super.c:1177:
+                res = (512LL << 32) - (1 << bits);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: fs/Kconfig:122:
+^I  Ext3 filesystem currently has a limit of 2TB on i386. This $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: fs/Kconfig:124:
+^I  inode can hold only 32-bit unsigned integers. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: fs/Kconfig:126:
+^I  This experimental release extends this limit by using the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: fs/Kconfig:127:
+^I  some unused/ unreserved fields in the inode. This feature $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/Kconfig:128:
+^I  is compatible with existing EXT3 filesystem. However, if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/Kconfig:129:
+^I  you make files greater than the earlier imposed limits, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/Kconfig:130:
+^I  you would have to mount the partitions as read-only in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/Kconfig:134:
+^I^I$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#205: FILE: fs/Kconfig:138:
diff -rup linux-2.6.7.orig/include/linux/ext3_fs.h linux-2.6.7/include/linux/ext3_fs.h

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#232: FILE: include/linux/ext3_fs.h:527:
+					 EXT3_FEATURE_RO_COMPAT_MANY_BLOCKS| \
 					                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#242: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#243: FILE: include/linux/ext3_fs.h:729:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 7 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
