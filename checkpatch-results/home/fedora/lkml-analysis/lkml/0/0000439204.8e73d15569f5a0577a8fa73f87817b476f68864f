WARNING:TYPO_SPELLING: 'tranformation' may be misspelled - perhaps 'transformation'?
#36: 
tranformation and is backed by a tmpfs file.
^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: include/linux/loop.h:32:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: include/linux/loop.h:33:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative 
+				512 byte sectors */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#101: FILE: include/linux/loop.h:33:
+				512 byte sectors */

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: include/linux/loop.h:35:
+#define LO_IV_SECTOR_SIZE (1 << LO_IV_SECTOR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: drivers/block/loop.c:8:
+ * Redistribution of this file is permitted under the GNU General $

WARNING:TYPO_SPELLING: 'tranformation' may be misspelled - perhaps 'transformation'?
#190: FILE: drivers/block/loop.c:62:
+ * with no data tranformation, because that use is so rare.  Made loop
                 ^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: drivers/block/loop.c:120:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: drivers/block/loop.c:124:
+	struct block_device *bdev = lo->lo_device;
+	return bdev ? block_size(lo->lo_device) : PAGE_CACHE_SIZE;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#249: FILE: drivers/block/loop.c:134:
+	sector += lo->lo_sector_offset; /* FIXME.  Make IV independent of
+					   location of the loop device. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: drivers/block/loop.c:134:
+					   location of the loop device. */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#250: FILE: drivers/block/loop.c:135:
+	switch (lo->lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
[...]
+		default:
[...]
+		case LO_IV_MODE_DEFAULT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#256: FILE: drivers/block/loop.c:141:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: drivers/block/loop.c:141:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#259: FILE: drivers/block/loop.c:144:
+			IV = sector / ((unsigned long) (bs >> 9));

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#260: FILE: drivers/block/loop.c:145:
+			offset = ((unsigned long) (((sector % (bs >> 9)) << 9) + lo->lo_offset)) % bs;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#260: FILE: drivers/block/loop.c:145:
+			offset = ((unsigned long) (((sector % (bs >> 9)) << 9) + lo->lo_offset)) % bs;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#285: FILE: drivers/block/loop.c:173:
+		/* Do the transfer with file_operatios->{read,write}.
+		   No need to allocate an intermediate buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#285: FILE: drivers/block/loop.c:173:
+		   No need to allocate an intermediate buffer. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#371: FILE: drivers/block/loop.c:236:
+	return (compute_loop_size(lo) + (SECTOR_SIZE-1) - lo->lo_offset) >> 9;
 	                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: drivers/block/loop.c:248:
+	unsigned offset, this_size, end;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: drivers/block/loop.c:259:
+	/* pos is not necessarily page aligned.  So, we loop, in
+	   case the transfer writes to two pages. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: drivers/block/loop.c:259:
+	   case the transfer writes to two pages. */

ERROR:SPACING: space required before the open parenthesis '('
#409: FILE: drivers/block/loop.c:260:
+	for(;;) {

CHECK:SPACING: No space is necessary after a cast
#410: FILE: drivers/block/loop.c:261:
+		end = min(offset + size, (unsigned) PAGE_CACHE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#410: FILE: drivers/block/loop.c:261:
+		end = min(offset + size, (unsigned) PAGE_CACHE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#436: FILE: drivers/block/loop.c:281:
+			printk(KERN_ERR

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#512: FILE: drivers/block/loop.c:326:
+	p = (struct lo_read_data*)desc->buf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: drivers/block/loop.c:329:
+	IV = loop_get_iv(lo,
+		((page->index <<  (PAGE_CACHE_SHIFT - LO_IV_SECTOR_BITS))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: drivers/block/loop.c:333:
+^I/* BUG_ON(LO_IV_SECTOR_BITS != 9); ^Igcc 3.1 appears to have a problem with BUG_ON(0). */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: drivers/block/loop.c:360:
+^Icookie.bsize = ^Iloop_get_bs(lo);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#580: FILE: drivers/block/loop.c:375:
+	struct file_operations *f_op = file->f_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: No space is necessary after a cast
#582: FILE: drivers/block/loop.c:377:
+		(rw == READ) ? f_op->read : ((read_write_func_t) f_op->write);

CHECK:BRACES: braces {} should be used on all arms of this statement
#590: FILE: drivers/block/loop.c:383:
+		if (res > 0) {
[...]
+		else if (res == 0 && rw == WRITE)
[...]
+		else if ((res == -EAGAIN) || (res == -ENOMEM)
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#594: FILE: drivers/block/loop.c:387:
+		}
+		else if (res == 0 && rw == WRITE)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#597: FILE: drivers/block/loop.c:390:
+		else if ((res == -EAGAIN) || (res == -ENOMEM)
+			   || (res == -ERESTART) || (res == -EINTR)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#602: FILE: drivers/block/loop.c:395:
+		}
+		else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#640: FILE: drivers/block/loop.c:417:
 
+		|| (*lo->transfer)(lo, rw, scratch, data, size,

CHECK:SPACING: No space is necessary after a cast
#641: FILE: drivers/block/loop.c:418:
+				loop_get_iv(lo, (unsigned long) (pos >> 9)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#643: FILE: drivers/block/loop.c:420:
+
+		|| (rw == WRITE &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: drivers/block/loop.c:430:
 
+

CHECK:SPACING: No space is necessary after a cast
#658: FILE: drivers/block/loop.c:433:
+	loff_t pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#659: FILE: drivers/block/loop.c:434:
+	unsigned vecnr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#701: FILE: drivers/block/loop.c:461:
+	int i;
+	for (i = 0; i < bio->bi_vcnt; i++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#787: FILE: drivers/block/loop.c:575:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#867: FILE: drivers/block/loop.c:681:
+			printk(KERN_WARNING "loop: missing bio\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#888: FILE: drivers/block/loop.c:705:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: drivers/block/loop.c:741:
+		/* We will ignore the underlying device's page cache, so
+		   first send any data in it to disk, without waiting.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#931: FILE: drivers/block/loop.c:743:
+		   our reads. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#945: FILE: drivers/block/loop.c:753:
+	if (IS_RDONLY (inode) || (lo_device && bdev_read_only(lo_device))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#949: FILE: drivers/block/loop.c:757:
 
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lo_device"
#950: FILE: drivers/block/loop.c:758:
+	if (lo_device == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lo"
#961: FILE: drivers/block/loop.c:769:
+	if (lo == NULL)

CHECK:SPACING: No space is necessary after a cast
#965: FILE: drivers/block/loop.c:773:
+	bvec = lo->lo_backup_bio.bi_io_vec = (struct bio_vec*) &lo[1];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#965: FILE: drivers/block/loop.c:773:
+	bvec = lo->lo_backup_bio.bi_io_vec = (struct bio_vec*) &lo[1];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#965: FILE: drivers/block/loop.c:773:
+	bvec = lo->lo_backup_bio.bi_io_vec = (struct bio_vec*) &lo[1];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#969: FILE: drivers/block/loop.c:777:
+			while(i--) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#969: FILE: drivers/block/loop.c:777:
+			while(i--) {
+				__free_page(bvec->bv_page);
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lo_device"
#1003: FILE: drivers/block/loop.c:810:
+	if (lo_device != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1051: FILE: drivers/block/loop.c:844:
+^Istruct loop_func_table *xfer= xfer_funcs[lo->lo_encrypt_type]; $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1051: FILE: drivers/block/loop.c:844:
+	struct loop_func_table *xfer= xfer_funcs[lo->lo_encrypt_type]; 
 	                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: drivers/block/loop.c:847:
+^I^Ierr = xfer->release(lo); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1056: FILE: drivers/block/loop.c:849:
+^I^Ixfer->unlock(lo); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: drivers/block/loop.c:857:
+^Istruct loop_func_table *xfer = xfer_funcs[type]; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1074: FILE: drivers/block/loop.c:858:
+	struct loop_func_table *xfer = xfer_funcs[type]; 
+	if (xfer->init)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: drivers/block/loop.c:860:
+^Iif (!err) { $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1094: FILE: drivers/block/loop.c:874:
+	if (bdev->bd_openers != 2)	/* one for this fd being open plus
+					   one incremented by loop_set_fd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1094: FILE: drivers/block/loop.c:874:
+					   one incremented by loop_set_fd */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1138: FILE: drivers/block/loop.c:898:
+	while (num_pages--) {
+		__free_page(lo->lo_backup_bio.bi_io_vec[num_pages].bv_page);
+	}

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1180: FILE: drivers/block/loop.c:934:
+		struct address_space_operations *aops = inode->i_mapping->a_ops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1181: FILE: drivers/block/loop.c:935:
+		struct address_space_operations *aops = inode->i_mapping->a_ops;
+		lo->lo_file_io[READ] =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: drivers/block/loop.c:938:
+^I^Ilo->lo_file_io[WRITE] = $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1223: FILE: drivers/block/loop.c:981:
+	info.lo_rdevice = lo->lo_device ? lo->lo_device->bd_dev : MKDEV(0,0);
 	                                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev->bd_queue"
#1247: FILE: drivers/block/loop.c:1001:
+	lo = (bdev->bd_queue != NULL) ? bdev->bd_queue->queuedata : NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lo"
#1253: FILE: drivers/block/loop.c:1007:
+	if (lo != NULL) {

CHECK:SPACING: No space is necessary after a cast
#1273: FILE: drivers/block/loop.c:1024:
+		err = loop_set_status(lo, bdev, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#1284: FILE: drivers/block/loop.c:1030:
+		err = put_user((unsigned long) compute_loop_sectors(lo),

CHECK:SPACING: No space is necessary after a cast
#1285: FILE: drivers/block/loop.c:1031:
+			       (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#1293: FILE: drivers/block/loop.c:1034:
+		err = put_user((u64) compute_loop_sectors(lo),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1294: FILE: drivers/block/loop.c:1035:
+			       (u64*)arg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1382: FILE: drivers/block/loop.c:1076:
+	unsigned char buf[20];
+	sprintf(buf, "%d", dev_minor);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#1385: FILE: drivers/block/loop.c:1079:
+		       S_IFBLK | S_IRUSR | S_IWUSR | S_IRGRP, &lo_fops, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439204.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 35 warnings, 29 checks, 1400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439204.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
