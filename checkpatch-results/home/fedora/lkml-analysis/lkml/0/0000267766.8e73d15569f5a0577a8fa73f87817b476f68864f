WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/i2c/chips/lm77.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#87: FILE: drivers/i2c/chips/lm77.c:2:
+/*
+    lm77.c - Part of lm_sensors, Linux kernel modules for hardware

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: drivers/i2c/chips/lm77.c:3:
+             monitoring$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: drivers/i2c/chips/lm77.c:24:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#110: FILE: drivers/i2c/chips/lm77.c:25:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: drivers/i2c/chips/lm77.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: drivers/i2c/chips/lm77.c:76:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#171: FILE: drivers/i2c/chips/lm77.c:86:
+static int lm77_id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#178: FILE: drivers/i2c/chips/lm77.c:93:
+/* In the temperature registers, the low 3 bits are not part of the
+   temperature values; they are the status bits. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: drivers/i2c/chips/lm77.c:93:
+   temperature values; they are the status bits. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: drivers/i2c/chips/lm77.c:97:
+	int ntemp = SENSORS_LIMIT(temp, LM77_TEMP_MIN, LM77_TEMP_MAX);
+	return (u16)((ntemp / 500) * 8);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#193: FILE: drivers/i2c/chips/lm77.c:108:
+#define show(value)	\
+static ssize_t show_##value(struct device *dev, char *buf)	\
+{								\
+	struct lm77_data *data = lm77_update_device(dev);	\
+	return sprintf(buf, "%d\n", data->value);		\
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: drivers/i2c/chips/lm77.c:125:
+	struct lm77_data *data = lm77_update_device(dev);
+	return sprintf(buf, "%d\n", data->temp_crit - data->temp_hyst);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: drivers/i2c/chips/lm77.c:127:
+}
+static ssize_t show_temp_min_hyst(struct device *dev, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: drivers/i2c/chips/lm77.c:130:
+	struct lm77_data *data = lm77_update_device(dev);
+	return sprintf(buf, "%d\n", data->temp_min + data->temp_hyst);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#217: FILE: drivers/i2c/chips/lm77.c:132:
+}
+static ssize_t show_temp_max_hyst(struct device *dev, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: drivers/i2c/chips/lm77.c:135:
+	struct lm77_data *data = lm77_update_device(dev);
+	return sprintf(buf, "%d\n", data->temp_max - data->temp_hyst);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#224: FILE: drivers/i2c/chips/lm77.c:139:
+#define set(value, reg)	\
+static ssize_t set_##value(struct device *dev, const char *buf, size_t count)	\
+{										\
+	struct i2c_client *client = to_i2c_client(dev);				\
+	struct lm77_data *data = i2c_get_clientdata(client);			\
+	data->value = simple_strtoul(buf, NULL, 10);				\
+	lm77_write_value(client, reg, LM77_TEMP_TO_REG(data->value));		\
+	return count;								\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#224: FILE: drivers/i2c/chips/lm77.c:139:
+#define set(value, reg)	\
+static ssize_t set_##value(struct device *dev, const char *buf, size_t count)	\
+{										\
+	struct i2c_client *client = to_i2c_client(dev);				\
+	struct lm77_data *data = i2c_get_clientdata(client);			\
+	data->value = simple_strtoul(buf, NULL, 10);				\
+	lm77_write_value(client, reg, LM77_TEMP_TO_REG(data->value));		\
+	return count;								\
+}

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#229: FILE: drivers/i2c/chips/lm77.c:144:
+	data->value = simple_strtoul(buf, NULL, 10);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#238: FILE: drivers/i2c/chips/lm77.c:153:
+/* hysteresis is stored as a relative value on the chip, so it has to be
+   converted first */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#238: FILE: drivers/i2c/chips/lm77.c:153:
+   converted first */

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: drivers/i2c/chips/lm77.c:158:
+	struct lm77_data *data = i2c_get_clientdata(client);
+	data->temp_hyst = data->temp_crit - simple_strtoul(buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#243: FILE: drivers/i2c/chips/lm77.c:158:
+	data->temp_hyst = data->temp_crit - simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: drivers/i2c/chips/lm77.c:170:
+	int oldcrithyst = data->temp_crit - data->temp_hyst;
+	data->temp_crit = simple_strtoul(buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#255: FILE: drivers/i2c/chips/lm77.c:170:
+	data->temp_crit = simple_strtoul(buf, NULL, 10);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_input' to 'temp1_input_show'
#262: FILE: drivers/i2c/chips/lm77.c:177:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#264: FILE: drivers/i2c/chips/lm77.c:179:
+static DEVICE_ATTR(temp1_input, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_crit' to 'temp1_crit_show' 'set_temp_crit' to 'temp1_crit_store'
#266: FILE: drivers/i2c/chips/lm77.c:181:
+static DEVICE_ATTR(temp1_crit, S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#266: FILE: drivers/i2c/chips/lm77.c:181:
+static DEVICE_ATTR(temp1_crit, S_IWUSR | S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_min' to 'temp1_min_show' 'set_temp_min' to 'temp1_min_store'
#268: FILE: drivers/i2c/chips/lm77.c:183:
+static DEVICE_ATTR(temp1_min, S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#268: FILE: drivers/i2c/chips/lm77.c:183:
+static DEVICE_ATTR(temp1_min, S_IWUSR | S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_max' to 'temp1_max_show' 'set_temp_max' to 'temp1_max_store'
#270: FILE: drivers/i2c/chips/lm77.c:185:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#270: FILE: drivers/i2c/chips/lm77.c:185:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_crit_hyst' to 'temp1_crit_hyst_show' 'set_temp_crit_hyst' to 'temp1_crit_hyst_store'
#273: FILE: drivers/i2c/chips/lm77.c:188:
+static DEVICE_ATTR(temp1_crit_hyst, S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#273: FILE: drivers/i2c/chips/lm77.c:188:
+static DEVICE_ATTR(temp1_crit_hyst, S_IWUSR | S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_min_hyst' to 'temp1_min_hyst_show'
#275: FILE: drivers/i2c/chips/lm77.c:190:
+static DEVICE_ATTR(temp1_min_hyst, S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#275: FILE: drivers/i2c/chips/lm77.c:190:
+static DEVICE_ATTR(temp1_min_hyst, S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_max_hyst' to 'temp1_max_hyst_show'
#277: FILE: drivers/i2c/chips/lm77.c:192:
+static DEVICE_ATTR(temp1_max_hyst, S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#277: FILE: drivers/i2c/chips/lm77.c:192:
+static DEVICE_ATTR(temp1_max_hyst, S_IRUGO,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#280: FILE: drivers/i2c/chips/lm77.c:195:
+static DEVICE_ATTR(alarms, S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#280: FILE: drivers/i2c/chips/lm77.c:195:
+static DEVICE_ATTR(alarms, S_IRUGO,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#303: FILE: drivers/i2c/chips/lm77.c:218:
+	/* OK. For now, we presume we have a valid client. We now create the
+	   client structure, even though we cannot fill it completely yet.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: drivers/i2c/chips/lm77.c:219:
+	   But it allows us to access lm77_{read,write}_value. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#305: FILE: drivers/i2c/chips/lm77.c:220:
+	if (!(data = kmalloc(sizeof(struct lm77_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct lm77_data)...)
#305: FILE: drivers/i2c/chips/lm77.c:220:
+	if (!(data = kmalloc(sizeof(struct lm77_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#319: FILE: drivers/i2c/chips/lm77.c:234:
+	/* Here comes the remaining detection.  Since the LM77 has no
+	   register dedicated to identification, we have to rely on the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: drivers/i2c/chips/lm77.c:243:
+	   Word-sized registers are high-byte first. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#341: FILE: drivers/i2c/chips/lm77.c:256:
+			if (i2c_smbus_read_byte_data(new_client, i + 1) != conf
+			    || i2c_smbus_read_word_data(new_client, i + 2) != hyst

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#342: FILE: drivers/i2c/chips/lm77.c:257:
+			    || i2c_smbus_read_word_data(new_client, i + 2) != hyst
+			    || i2c_smbus_read_word_data(new_client, i + 3) != crit

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#343: FILE: drivers/i2c/chips/lm77.c:258:
+			    || i2c_smbus_read_word_data(new_client, i + 3) != crit
+			    || i2c_smbus_read_word_data(new_client, i + 4) != min

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#344: FILE: drivers/i2c/chips/lm77.c:259:
+			    || i2c_smbus_read_word_data(new_client, i + 4) != min
+			    || i2c_smbus_read_word_data(new_client, i + 5) != max)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#349: FILE: drivers/i2c/chips/lm77.c:264:
+		if (((cur & 0x00f0) != 0xf0 && (cur & 0x00f0) != 0x0)
+		    || ((hyst & 0x00f0) != 0xf0 && (hyst & 0x00f0) != 0x0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#350: FILE: drivers/i2c/chips/lm77.c:265:
+		    || ((hyst & 0x00f0) != 0xf0 && (hyst & 0x00f0) != 0x0)
+		    || ((crit & 0x00f0) != 0xf0 && (crit & 0x00f0) != 0x0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#351: FILE: drivers/i2c/chips/lm77.c:266:
+		    || ((crit & 0x00f0) != 0xf0 && (crit & 0x00f0) != 0x0)
+		    || ((min & 0x00f0) != 0xf0 && (min & 0x00f0) != 0x0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#352: FILE: drivers/i2c/chips/lm77.c:267:
+		    || ((min & 0x00f0) != 0xf0 && (min & 0x00f0) != 0x0)
+		    || ((max & 0x00f0) != 0xf0 && (max & 0x00f0) != 0x0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#362: FILE: drivers/i2c/chips/lm77.c:277:
+		if (i2c_smbus_read_word_data(new_client, 6) != cur
+		    || i2c_smbus_read_word_data(new_client, 7) != cur)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#366: FILE: drivers/i2c/chips/lm77.c:281:
+		if (i2c_smbus_read_word_data(new_client, 6) != hyst
+		    || i2c_smbus_read_word_data(new_client, 7) != hyst)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#370: FILE: drivers/i2c/chips/lm77.c:285:
+		if (i2c_smbus_read_word_data(new_client, 6) != min
+		    || i2c_smbus_read_word_data(new_client, 7) != min)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#373: FILE: drivers/i2c/chips/lm77.c:288:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#379: FILE: drivers/i2c/chips/lm77.c:294:
+	if (kind == lm77) {
+		name = "lm77";
+	}

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#384: FILE: drivers/i2c/chips/lm77.c:299:
+	strlcpy(new_client->name, name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#391: FILE: drivers/i2c/chips/lm77.c:306:
+	if ((err = i2c_attach_client(new_client)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#422: FILE: drivers/i2c/chips/lm77.c:337:
+/* All registers are word-sized, except for the configuration register.
+   The LM77 uses the high-byte first convention. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: drivers/i2c/chips/lm77.c:337:
+   The LM77 uses the high-byte first convention. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: drivers/i2c/chips/lm77.c:358:
+	int conf = lm77_read_value(client, LM77_REG_CONF);
+	if (conf & 1)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#454: FILE: drivers/i2c/chips/lm77.c:369:
+	if ((jiffies - data->last_updated > HZ + HZ / 2) ||
+	    (jiffies < data->last_updated) || !data->valid) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#455: FILE: drivers/i2c/chips/lm77.c:370:
+	    (jiffies < data->last_updated) || !data->valid) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267766.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 41 warnings, 21 checks, 437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267766.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
