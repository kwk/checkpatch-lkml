WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#40: 
then it is journaled and hence the node has uptodate data in the
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
Content-Disposition: attachment; filename="jbd-2.6.17-rc3-1-checkpoint_list_split.diff"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: fs/jbd/checkpoint.c:79:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#132: FILE: fs/jbd/checkpoint.c:81:
+		jh->b_cpnext = jh->b_cpprev = jh;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: fs/jbd/checkpoint.c:184:
+	if (journal->j_checkpoint_transactions != transaction ||
+		transaction->t_tid != this_tid)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: fs/jbd/checkpoint.c:206:
+		 * it has been written out and so we can drop it from the list */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: fs/jbd/checkpoint.c:241:
+static int __process_buffer(journal_t *journal, struct journal_head *jh,
+			struct buffer_head **bhs, int *batch_count)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#320: FILE: fs/jbd/checkpoint.c:256:
+	}
+	else if (jh->b_transaction != NULL) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "jh->b_transaction"
#320: FILE: fs/jbd/checkpoint.c:256:
+	else if (jh->b_transaction != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#330: FILE: fs/jbd/checkpoint.c:266:
+	}
+	else if (!buffer_dirty(bh)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#340: FILE: fs/jbd/checkpoint.c:276:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#340: FILE: fs/jbd/checkpoint.c:276:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: fs/jbd/checkpoint.c:341:
+ ^Iif (journal->j_checkpoint_transactions == transaction$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: fs/jbd/checkpoint.c:341:
+ ^Iif (journal->j_checkpoint_transactions == transaction$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: fs/jbd/checkpoint.c:341:
+ ^Iif (journal->j_checkpoint_transactions == transaction$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#434: FILE: fs/jbd/checkpoint.c:342:
+ 	if (journal->j_checkpoint_transactions == transaction
+		&& transaction->t_tid == this_tid) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: fs/jbd/checkpoint.c:359:
+			retry = __process_buffer(journal, jh, bhs,
+				&batch_count);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#503: FILE: fs/jbd/checkpoint.c:381:
+		 * list. Let's clean up the second one. */

WARNING:TYPO_SPELLING: 'bufers' may be misspelled - perhaps 'buffers'?
#525: FILE: fs/jbd/checkpoint.c:479:
+ * Returns number of bufers reaped (for debug)
                      ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: fs/jbd/checkpoint.c:492:
+ ^Ilast_jh = jh->b_cpprev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: fs/jbd/checkpoint.c:492:
+ ^Ilast_jh = jh->b_cpprev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: fs/jbd/checkpoint.c:492:
+ ^Ilast_jh = jh->b_cpprev;$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'transaction->t_checkpoint_list'
#617: FILE: fs/jbd/checkpoint.c:545:
+		ret += journal_clean_one_cp_list(transaction->
+				t_checkpoint_list, &released);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#623: FILE: fs/jbd/checkpoint.c:551:
+		/* It is essential that we are as careful as in the case of
+		   t_checkpoint_list with removing the buffer from the list

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#625: FILE: fs/jbd/checkpoint.c:553:
+		   io_list */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'transaction->t_checkpoint_io_list'
#627: FILE: fs/jbd/checkpoint.c:555:
+		ret += journal_clean_one_cp_list(transaction->
+				t_checkpoint_io_list, &released);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "transaction->t_checkpoint_list"
#666: FILE: fs/jbd/checkpoint.c:600:
+	if (transaction->t_checkpoint_list != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "transaction->t_checkpoint_io_list"
#667: FILE: fs/jbd/checkpoint.c:601:
+	    transaction->t_checkpoint_io_list != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!transaction->t_checkpoint_io_list"
#686: FILE: fs/jbd/checkpoint.c:692:
+	J_ASSERT(transaction->t_checkpoint_io_list == NULL);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct journal_head *' should also have an identifier name
#711: FILE: include/linux/jbd.h:858:
+int __journal_remove_checkpoint(struct journal_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 14 warnings, 10 checks, 630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
