WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#40: FILE: arch/ppc/Kconfig:1180:
+config RAPIDIO
+	bool "RapidIO support" if MPC8540 || MPC8560
+	help
+	  If you say Y here, the kernel will include drivers and
+	  infrastructure code to support RapidIO interconnect devices.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#385: FILE: arch/ppc/kernel/rio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#410: FILE: arch/ppc/kernel/rio.c:26:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: arch/ppc/kernel/rio.c:27:
+    platform_rio_init(void)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#413: FILE: arch/ppc/kernel/rio.c:29:
+	printk(KERN_WARNING "RIO: No platform_rio_init() present\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#425: FILE: arch/ppc/kernel/rio.c:41:
+	printk(KERN_INFO "RIO: RapidIO init\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#501: FILE: arch/ppc/syslib/ppc85xx_rio.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#522: FILE: arch/ppc/syslib/ppc85xx_rio.c:22:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#558: FILE: arch/ppc/syslib/ppc85xx_rio.c:58:
+#define DBELL_SID(x)		(*(u8 *)(x + DOORBELL_SID_OFFSET))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#559: FILE: arch/ppc/syslib/ppc85xx_rio.c:59:
+#define DBELL_TID(x)		(*(u8 *)(x + DOORBELL_TID_OFFSET))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#560: FILE: arch/ppc/syslib/ppc85xx_rio.c:60:
+#define DBELL_INF(x)		(*(u16 *)(x + DOORBELL_INFO_OFFSET))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#562: FILE: arch/ppc/syslib/ppc85xx_rio.c:62:
+#define is_power_of_2(x)	(((x) & ((x) - 1)) == 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#676: FILE: arch/ppc/syslib/ppc85xx_rio.c:176:
+static int mpc85xx_local_config_read(int index, u32 offset, int len, u32 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpc85xx_local_config_read', this function's name, in a string
#678: FILE: arch/ppc/syslib/ppc85xx_rio.c:178:
+	pr_debug("mpc85xx_local_config_read: index %d offset %8.8x\n", index,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpc85xx_local_config_write', this function's name, in a string
#698: FILE: arch/ppc/syslib/ppc85xx_rio.c:198:
+	    ("mpc85xx_local_config_write: index %d offset %8.8x data %8.8x\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#719: FILE: arch/ppc/syslib/ppc85xx_rio.c:219:
+			u32 * val)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpc85xx_rio_config_read', this function's name, in a string
#724: FILE: arch/ppc/syslib/ppc85xx_rio.c:224:
+	    ("mpc85xx_rio_config_read: index %d destid %d hopcount %d offset %8.8x len %d\n",

CHECK:SPACING: No space is necessary after a cast
#729: FILE: arch/ppc/syslib/ppc85xx_rio.c:229:
+	data = (u8 *) maint_win + offset;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#732: FILE: arch/ppc/syslib/ppc85xx_rio.c:232:
+		*val = in_8((u8 *) data);

CHECK:SPACING: No space is necessary after a cast
#735: FILE: arch/ppc/syslib/ppc85xx_rio.c:235:
+		*val = in_be16((u16 *) data);

CHECK:SPACING: No space is necessary after a cast
#738: FILE: arch/ppc/syslib/ppc85xx_rio.c:238:
+		*val = in_be32((u32 *) data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#762: FILE: arch/ppc/syslib/ppc85xx_rio.c:262:
+	u8 *data;
+	pr_debug

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#763: FILE: arch/ppc/syslib/ppc85xx_rio.c:263:
+	    ("mpc85xx_rio_config_write: index %d destid %d hopcount %d offset %8.8x len %d val %8.8x\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpc85xx_rio_config_write', this function's name, in a string
#763: FILE: arch/ppc/syslib/ppc85xx_rio.c:263:
+	    ("mpc85xx_rio_config_write: index %d destid %d hopcount %d offset %8.8x len %d val %8.8x\n",

CHECK:SPACING: No space is necessary after a cast
#768: FILE: arch/ppc/syslib/ppc85xx_rio.c:268:
+	data = (u8 *) maint_win + offset;

CHECK:SPACING: No space is necessary after a cast
#771: FILE: arch/ppc/syslib/ppc85xx_rio.c:271:
+		out_8((u8 *) data, val);

CHECK:SPACING: No space is necessary after a cast
#774: FILE: arch/ppc/syslib/ppc85xx_rio.c:274:
+		out_be16((u16 *) data, val);

CHECK:SPACING: No space is necessary after a cast
#777: FILE: arch/ppc/syslib/ppc85xx_rio.c:277:
+		out_be32((u32 *) data, val);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#804: FILE: arch/ppc/syslib/ppc85xx_rio.c:304:
+	pr_debug(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_outb_message', this function's name, in a string
#805: FILE: arch/ppc/syslib/ppc85xx_rio.c:305:
+		 "RIO: rio_hw_add_outb_message(): destid %4.4x mbox %d buffer %8.8x len %8.8x\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 8'
#808: FILE: arch/ppc/syslib/ppc85xx_rio.c:308:
+	if ((len < 8) || (len > RIO_MAX_MSG_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > RIO_MAX_MSG_SIZE'
#808: FILE: arch/ppc/syslib/ppc85xx_rio.c:308:
+	if ((len < 8) || (len > RIO_MAX_MSG_SIZE)) {

CHECK:SPACING: No space is necessary after a cast
#816: FILE: arch/ppc/syslib/ppc85xx_rio.c:316:
+		memset((void *)((u32) msg_tx_ring.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'msg_tx_ring.virt_buffer[msg_tx_ring.tx_slot]'
#817: FILE: arch/ppc/syslib/ppc85xx_rio.c:317:
+		memset((void *)((u32) msg_tx_ring.
+				virt_buffer[msg_tx_ring.tx_slot] + len), 0,

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:INDENTED_LABEL: labels should not be indented
#840: FILE: arch/ppc/syslib/ppc85xx_rio.c:340:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#844: FILE: arch/ppc/syslib/ppc85xx_rio.c:344:
+EXPORT_SYMBOL(rio_hw_add_outb_message);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#853: FILE: arch/ppc/syslib/ppc85xx_rio.c:353:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#864: FILE: arch/ppc/syslib/ppc85xx_rio.c:364:
+		printk(KERN_INFO "RIO: outbound message transmission error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#870: FILE: arch/ppc/syslib/ppc85xx_rio.c:370:
+		printk(KERN_INFO "RIO: outbound message queue overflow\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#878: FILE: arch/ppc/syslib/ppc85xx_rio.c:378:
+		int slot = (dqp - msg_tx_ring.phys) >> 5;
+		port->outb_msg[0].mcback(port, -1, slot);

WARNING:INDENTED_LABEL: labels should not be indented
#884: FILE: arch/ppc/syslib/ppc85xx_rio.c:384:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries < RIO_MIN_TX_RING_SIZE'
#902: FILE: arch/ppc/syslib/ppc85xx_rio.c:402:
+	if ((entries < RIO_MIN_TX_RING_SIZE) ||
+	    (entries > RIO_MAX_TX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries > RIO_MAX_TX_RING_SIZE'
#902: FILE: arch/ppc/syslib/ppc85xx_rio.c:402:
+	if ((entries < RIO_MIN_TX_RING_SIZE) ||
+	    (entries > RIO_MAX_TX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:SPACING: No space is necessary after a cast
#915: FILE: arch/ppc/syslib/ppc85xx_rio.c:415:
+		    (dma_addr_t) __pa(msg_tx_ring.virt_buffer[i]);

WARNING:INDENTED_LABEL: labels should not be indented
#957: FILE: arch/ppc/syslib/ppc85xx_rio.c:457:
+      out:

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#989: FILE: arch/ppc/syslib/ppc85xx_rio.c:489:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1000: FILE: arch/ppc/syslib/ppc85xx_rio.c:500:
+		printk(KERN_INFO "RIO: inbound message reception error\n");

WARNING:INDENTED_LABEL: labels should not be indented
#1019: FILE: arch/ppc/syslib/ppc85xx_rio.c:519:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries < RIO_MIN_RX_RING_SIZE'
#1037: FILE: arch/ppc/syslib/ppc85xx_rio.c:537:
+	if ((entries < RIO_MIN_RX_RING_SIZE) ||
+	    (entries > RIO_MAX_RX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries > RIO_MAX_RX_RING_SIZE'
#1037: FILE: arch/ppc/syslib/ppc85xx_rio.c:537:
+	if ((entries < RIO_MIN_RX_RING_SIZE) ||
+	    (entries > RIO_MAX_RX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:SPACING: No space is necessary after a cast
#1056: FILE: arch/ppc/syslib/ppc85xx_rio.c:556:
+	out_be32((void *)&msg_regs->ifqdpar, (u32) msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1057: FILE: arch/ppc/syslib/ppc85xx_rio.c:557:
+	out_be32((void *)&msg_regs->ifqepar, (u32) msg_rx_ring.phys);

WARNING:INDENTED_LABEL: labels should not be indented
#1083: FILE: arch/ppc/syslib/ppc85xx_rio.c:583:
+      out:

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_inb_buffer', this function's name, in a string
#1121: FILE: arch/ppc/syslib/ppc85xx_rio.c:621:
+	pr_debug("RIO: rio_hw_add_inb_buffer(), msg_rx_ring.rx_slot %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1125: FILE: arch/ppc/syslib/ppc85xx_rio.c:625:
+		printk(KERN_ERR

WARNING:INDENTED_LABEL: labels should not be indented
#1136: FILE: arch/ppc/syslib/ppc85xx_rio.c:636:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1140: FILE: arch/ppc/syslib/ppc85xx_rio.c:640:
+EXPORT_SYMBOL(rio_hw_add_inb_buffer);

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: arch/ppc/syslib/ppc85xx_rio.c:663:
+	virt_buf = (u32) msg_rx_ring.virt + (phys_buf - msg_rx_ring.phys);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#1168: FILE: arch/ppc/syslib/ppc85xx_rio.c:668:
+		pr_debug(KERN_ERR

WARNING:INDENTED_LABEL: labels should not be indented
#1179: FILE: arch/ppc/syslib/ppc85xx_rio.c:679:
+      out1:

WARNING:INDENTED_LABEL: labels should not be indented
#1183: FILE: arch/ppc/syslib/ppc85xx_rio.c:683:
+      out2:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1187: FILE: arch/ppc/syslib/ppc85xx_rio.c:687:
+EXPORT_SYMBOL(rio_hw_get_inb_message);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1207: FILE: arch/ppc/syslib/ppc85xx_rio.c:707:
+		printk(KERN_INFO "RIO: doorbell reception error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1213: FILE: arch/ppc/syslib/ppc85xx_rio.c:713:
+		printk(KERN_INFO "RIO: doorbell queue full\n");

CHECK:SPACING: No space is necessary after a cast
#1221: FILE: arch/ppc/syslib/ppc85xx_rio.c:721:
+		    (u32) dbell_ring.virt +

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#1227: FILE: arch/ppc/syslib/ppc85xx_rio.c:727:
+		pr_debug(KERN_INFO

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->start <= DBELL_INF(dmsg)'
#1232: FILE: arch/ppc/syslib/ppc85xx_rio.c:732:
+			if ((dbell->res->start <= DBELL_INF(dmsg)) &&
+			    (dbell->res->end >= DBELL_INF(dmsg))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->end >= DBELL_INF(dmsg)'
#1232: FILE: arch/ppc/syslib/ppc85xx_rio.c:732:
+			if ((dbell->res->start <= DBELL_INF(dmsg)) &&
+			    (dbell->res->end >= DBELL_INF(dmsg))) {

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#1242: FILE: arch/ppc/syslib/ppc85xx_rio.c:742:
+			pr_debug(KERN_INFO

WARNING:INDENTED_LABEL: labels should not be indented
#1252: FILE: arch/ppc/syslib/ppc85xx_rio.c:752:
+      out:

CHECK:SPACING: No space is necessary after a cast
#1267: FILE: arch/ppc/syslib/ppc85xx_rio.c:767:
+	    (u32) ioremap(mport->iores.start + RIO_MAINT_WIN_SIZE,

CHECK:SPACING: No space is necessary after a cast
#1276: FILE: arch/ppc/syslib/ppc85xx_rio.c:776:
+	out_be32((void *)&msg_regs->dqdpar, (u32) dbell_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1277: FILE: arch/ppc/syslib/ppc85xx_rio.c:777:
+	out_be32((void *)&msg_regs->dqepar, (u32) dbell_ring.phys);

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1290: FILE: arch/ppc/syslib/ppc85xx_rio.c:790:
+static char *cmdline = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1298: FILE: arch/ppc/syslib/ppc85xx_rio.c:798:
+	return simple_strtol(cmdline, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1310: FILE: arch/ppc/syslib/ppc85xx_rio.c:810:
+__setup("riohdid=", mpc85xx_rio_get_cmdline);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ops)...) over kmalloc(sizeof(struct rio_ops)...)
#1326: FILE: arch/ppc/syslib/ppc85xx_rio.c:826:
+	ops = kmalloc(sizeof(struct rio_ops), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*port)...) over kmalloc(sizeof(struct rio_mport)...)
#1333: FILE: arch/ppc/syslib/ppc85xx_rio.c:833:
+	port = kmalloc(sizeof(struct rio_mport), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1351: FILE: arch/ppc/syslib/ppc85xx_rio.c:851:
+	regs_win = (u32) ioremap(RIO_REGS_BASE, 0x20000);

CHECK:SPACING: No space is necessary after a cast
#1361: FILE: arch/ppc/syslib/ppc85xx_rio.c:861:
+	maint_win = (u32) ioremap(law_start, RIO_MAINT_WIN_SIZE);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1373: FILE: arch/ppc/syslib/ppc85xx_rio.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1391: FILE: arch/ppc/syslib/ppc85xx_rio.h:19:
+extern void mpc85xx_rio_setup(int law_start, int law_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1399: FILE: include/asm-ppc/rio.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1414: FILE: include/asm-ppc/rio.h:16:
+extern void platform_rio_init(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 44 warnings, 37 checks, 1309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
