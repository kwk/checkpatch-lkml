WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irlan"
#35: FILE: irda/irlan/irlan_common.c:212:
+	ASSERT(irlan != NULL, return NULL;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irlan"
#51: FILE: irda/irlan/irlan_common.c:1077:
+	ASSERT(irlan != NULL, return 0;);

ERROR:SPACING: space required before the open parenthesis '('
#66: FILE: irda/irlan/irlan_common.c:1089:
+		if(self->magic != IRLAN_MAGIC) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#66: FILE: irda/irlan/irlan_common.c:1089:
+		if(self->magic != IRLAN_MAGIC) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#80: FILE: irda/af_irda.c:1082:
+	if (self == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ias_opt)...) over kmalloc(sizeof(struct irda_ias_set)...)
#101: FILE: irda/af_irda.c:1767:
+		ias_opt = kmalloc(sizeof(struct irda_ias_set), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: irda/af_irda.c:1768:
+		if(ias_opt == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#102: FILE: irda/af_irda.c:1768:
+		if(ias_opt == NULL) return -ENOMEM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ias_opt"
#102: FILE: irda/af_irda.c:1768:
+		if(ias_opt == NULL) return -ENOMEM;

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: irda/af_irda.c:1785:
+		if(irias_find_attrib(ias_obj, ias_opt->irda_attrib_name)) {

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: irda/af_irda.c:1791:
+		switch(ias_opt->irda_attrib_type) {

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: irda/af_irda.c:1802:
+			if(ias_opt->attribute.irda_attrib_octet_seq.len >

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: irda/af_irda.c:1818:
+			if(ias_opt->attribute.irda_attrib_string.len >

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#173: FILE: irda/af_irda.c:1824:
+			ias_opt->attribute.irda_attrib_string.string[ias_opt->attribute.irda_attrib_string.len] = '\0';

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#205: FILE: irda/af_irda.c:1856:
+		if(ias_obj == (struct ias_object *) NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: irda/af_irda.c:1856:
+		if(ias_obj == (struct ias_object *) NULL) {

CHECK:SPACING: No space is necessary after a cast
#215: FILE: irda/af_irda.c:1864:
+		if(ias_attr == (struct ias_attrib *) NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#215: FILE: irda/af_irda.c:1864:
+		if(ias_attr == (struct ias_attrib *) NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ias_opt)...) over kmalloc(sizeof(struct irda_ias_set)...)
#309: FILE: irda/af_irda.c:2033:
+	ias_opt = kmalloc(sizeof(struct irda_ias_set), GFP_ATOMIC);

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: irda/af_irda.c:2034:
+	if(ias_opt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ias_opt"
#310: FILE: irda/af_irda.c:2034:
+	if(ias_opt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!discoveries"
#319: FILE: irda/af_irda.c:2042:
+		if (discoveries == NULL) {

CHECK:SPACING: No space is necessary after a cast
#370: FILE: irda/af_irda.c:2099:
+		if (copy_from_user((char *) ias_opt, (char *)optval, len)) {

CHECK:SPACING: No space is necessary after a cast
#379: FILE: irda/af_irda.c:2105:
+		if(ias_obj == (struct ias_object *) NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: irda/af_irda.c:2105:
+		if(ias_obj == (struct ias_object *) NULL) {

CHECK:SPACING: No space is necessary after a cast
#389: FILE: irda/af_irda.c:2112:
+		if(ias_attr == (struct ias_attrib *) NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#389: FILE: irda/af_irda.c:2112:
+		if(ias_attr == (struct ias_attrib *) NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: irda/af_irda.c:2118:
+		if(err) {

CHECK:SPACING: No space is necessary after a cast
#406: FILE: irda/af_irda.c:2123:
+		if (copy_to_user((char *)optval, (char *) ias_opt,

CHECK:SPACING: No space is necessary after a cast
#426: FILE: irda/af_irda.c:2141:
+		if (copy_from_user((char *) ias_opt, (char *)optval, len)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!daddr'
#441: FILE: irda/af_irda.c:2161:
+			if((!daddr) || (daddr == DEV_ADDR_ANY)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'daddr == DEV_ADDR_ANY'
#441: FILE: irda/af_irda.c:2161:
+			if((!daddr) || (daddr == DEV_ADDR_ANY)) {

ERROR:SPACING: space required before the open parenthesis '('
#441: FILE: irda/af_irda.c:2161:
+			if((!daddr) || (daddr == DEV_ADDR_ANY)) {

CHECK:SPACING: No space is necessary after a cast
#491: FILE: irda/af_irda.c:2210:
+		if (copy_to_user((char *)optval, (char *) ias_opt,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000530957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 4 warnings, 18 checks, 482 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000530957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
