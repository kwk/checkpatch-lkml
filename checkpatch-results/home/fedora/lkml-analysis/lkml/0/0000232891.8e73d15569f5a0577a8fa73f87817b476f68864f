WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
ftp://ftp.yggdrasil.com/pub/dist/device_control/devfs/devfs_helper/devfs_helper-0.2.tar.gz .

WARNING:REPEATED_WORD: Possible repeated word: 'ftp'
#207: FILE: Documentation/filesystems/lookup-trap.txt:149:
+	% ftp ftp.yggdrasil.com

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: Documentation/filesystems/lookup-trap.txt:210:
+^I    fname=0xfffffffe <Address 0xfffffffe out of bounds>, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/filesystems/lookup-trap.txt:214:
+^I#6  0xb7e88e02 in __libc_start_main (main=0x8059380 <main>, argc=1, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: Documentation/filesystems/lookup-trap.txt:215:
+^I    ubp_av=0xbfffebc4, init=0x805897c <_init>, $

WARNING:TYPO_SPELLING: 'speical' may be misspelled - perhaps 'special'?
#401: FILE: Documentation/filesystems/lookup-trap.txt:343:
+	   (create them with speical temporary names that your helper
 	                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#740: FILE: fs/compat_ioctl.c:415:
+#if defined(CONFIG_NET) || defined(CONFIG_NET_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#749: FILE: fs/compat_ioctl.c:3169:
+#if defined(CONFIG_NET) || defined(CONFIG_NET_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#765: FILE: fs/devfs/fs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#766: FILE: fs/devfs/fs.c:2:
+/*
+  Device File System implementation as an instance of trapfs.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: fs/devfs/fs.c:3:
+ $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#781: FILE: fs/devfs/fs.c:17:
+  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#782: FILE: fs/devfs/fs.c:18:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#800: FILE: fs/devfs/fs.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#813: FILE: fs/devfs/fs.c:49:
+			printk (KERN_ERR "devfs_get_sb: unable to find %s.\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#813: FILE: fs/devfs/fs.c:49:
+			printk (KERN_ERR "devfs_get_sb: unable to find %s.\n",

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_get_sb', this function's name, in a string
#813: FILE: fs/devfs/fs.c:49:
+			printk (KERN_ERR "devfs_get_sb: unable to find %s.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Unbalanced braces around else statement
#815: FILE: fs/devfs/fs.c:51:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (slavefs->get_sb)
#816: FILE: fs/devfs/fs.c:52:
+			devfs_sb = (slavefs->get_sb)(fs_type, flags, dev_name,

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#819: FILE: fs/devfs/fs.c:55:
+				printk (KERN_ERR "devfs_get_sb: "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#819: FILE: fs/devfs/fs.c:55:
+				printk (KERN_ERR "devfs_get_sb: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_get_sb', this function's name, in a string
#819: FILE: fs/devfs/fs.c:55:
+				printk (KERN_ERR "devfs_get_sb: "

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: fs/devfs/fs.c:56:
+				printk (KERN_ERR "devfs_get_sb: "
+					"slavefs_get_sb failed.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#823: FILE: fs/devfs/fs.c:59:
+
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#835: FILE: fs/devfs/fs.c:71:
+	BUG_ON(sb != devfs_sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#839: FILE: fs/devfs/fs.c:75:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#855: FILE: fs/devfs/fs.c:91:
+	if (initialized)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#857: FILE: fs/devfs/fs.c:93:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#866: FILE: fs/devfs/fs.c:102:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#885: FILE: fs/devfs/interface.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#886: FILE: fs/devfs/interface.c:2:
+/*
+    Device File System (devfs) - device interface routines

CHECK:LINE_SPACING: Please don't use multiple blank lines
#891: FILE: fs/devfs/interface.c:7:
+
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#906: FILE: fs/devfs/interface.c:22:
+    License along with this library; if not, write to the Free$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#907: FILE: fs/devfs/interface.c:23:
+    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#911: FILE: fs/devfs/interface.c:27:
+/* Change log:
+	2003.02.24 - Maneesh Soni <maneesh@in.ibm.com> made it work with

ERROR:TRAILING_WHITESPACE: trailing whitespace
#929: FILE: fs/devfs/interface.c:45:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#930: FILE: fs/devfs/interface.c:46:
+	
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#946: FILE: fs/devfs/interface.c:62:
+/*
+   walk_parents expects to be called with parent->d_inode->i_sem

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#979: FILE: fs/devfs/interface.c:95:
+	/*
+	  FUTURE: parent can be null if the kernel has devfs support

ERROR:SPACING: space required before the open parenthesis '('
#985: FILE: fs/devfs/interface.c:101:
+	if(!parent || !parent->d_inode)

ERROR:SPACING: space required before the open parenthesis '('
#990: FILE: fs/devfs/interface.c:106:
+	for(;;) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#995: FILE: fs/devfs/interface.c:111:
+		/* paths passed to devfs_mk_* must not end in "/".
+		   It's too much of a pain to deal with, so we just

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#996: FILE: fs/devfs/interface.c:112:
+		   declare that to be a bug in the calling device driver. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#997: FILE: fs/devfs/interface.c:113:
+		BUG_ON(*path == '\0');

CHECK:LINE_SPACING: Please don't use multiple blank lines
#999: FILE: fs/devfs/interface.c:115:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slash"
#1005: FILE: fs/devfs/interface.c:121:
+		if (slash == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#1053: FILE: fs/devfs/interface.c:169:
+	if (IS_ERR(dentry))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1055: FILE: fs/devfs/interface.c:171:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1068: FILE: fs/devfs/interface.c:184:
+int devfs_mk_symlink (const char *link_contents, const char *fmt, ...)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1082: FILE: fs/devfs/interface.c:198:
+	if (IS_ERR(dentry))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1084: FILE: fs/devfs/interface.c:200:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1111: FILE: fs/devfs/interface.c:227:
+	if (IS_ERR(dentry))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1113: FILE: fs/devfs/interface.c:229:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "devfs_root"
#1183: FILE: fs/devfs/interface.c:299:
+	if (devfs_root != NULL)	/* FIXME? Can this happen? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1187: FILE: fs/devfs/interface.c:303:
+	devfs_init();		/* Safe to call repeatedly if devfs
+				   is compiled into the kernel. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1187: FILE: fs/devfs/interface.c:303:
+				   is compiled into the kernel. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1191: FILE: fs/devfs/interface.c:307:
+	if (IS_ERR(vfsmount))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1193: FILE: fs/devfs/interface.c:309:
+		return PTR_ERR(vfsmount);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1193: FILE: fs/devfs/interface.c:309:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1199: FILE: fs/devfs/interface.c:315:
+void __init mount_devfs_fs (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1202: FILE: fs/devfs/interface.c:318:
+		int err = do_mount ("none", devfs_mountpoint, dev_fs_type, 0, "");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1205: FILE: fs/devfs/interface.c:321:
+			printk (KERN_INFO "Mounted devfs on /dev\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1205: FILE: fs/devfs/interface.c:321:
+			printk (KERN_INFO "Mounted devfs on /dev\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1207: FILE: fs/devfs/interface.c:323:
+			printk ("(): unable to mount devfs, err: %d\n", err);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1207: FILE: fs/devfs/interface.c:323:
+			printk ("(): unable to mount devfs, err: %d\n", err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: fs/devfs/interface.c:327:
+#else $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1213: FILE: fs/devfs/interface.c:329:
+void __init mount_devfs_fs (void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1222: FILE: fs/devfs/internal.h:1:
+#ifndef DEVFS_INTERNAL_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: fs/devfs/internal.h:4:
+extern int __init devfs_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1249: FILE: fs/lookuptrap.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1250: FILE: fs/lookuptrap.c:2:
+/*
+  struct dentry *trapping_lookup(struct inode *dir,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1252: FILE: fs/lookuptrap.c:4:
+				 struct nameidata *nd,
 				                   ^^

WARNING:TYPO_SPELLING: 'nonexistant' may be misspelled - perhaps 'nonexistent'?
#1257: FILE: fs/lookuptrap.c:9:
+  an attempt is made to access a nonexistant file.  It invokes the
                                  ^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1273: FILE: fs/lookuptrap.c:25:
+
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1288: FILE: fs/lookuptrap.c:40:
+  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1289: FILE: fs/lookuptrap.c:41:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1298: FILE: fs/lookuptrap.c:50:
+static inline int want_to_trap(struct nameidata *nd)
                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1300: FILE: fs/lookuptrap.c:52:
+	return (nd != NULL);
 	        ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nd"
#1300: FILE: fs/lookuptrap.c:52:
+	return (nd != NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: fs/lookuptrap.c:55:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1314: FILE: fs/lookuptrap.c:66:
+/* Force revalidation of all negative dentries.  Note that this routine
+   only gets called when some other routine has a reference to the dentry

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1321: FILE: fs/lookuptrap.c:73:
+				 struct nameidata *nd)
 				                   ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#1327: FILE: fs/lookuptrap.c:79:
+	if (dentry->d_inode != NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1330: FILE: fs/lookuptrap.c:82:
+	if (!want_to_trap(nd))
 	                  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1334: FILE: fs/lookuptrap.c:86:
+	/* FIXME? I think there is no need to use dget_parent or
+	   to take dcache_lock here, because dentry->d_parent never

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1337: FILE: fs/lookuptrap.c:89:
+	   dentry->d_d_parent->d_inode. Right??? -AJR 2004.11.05 */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#1345: FILE: fs/lookuptrap.c:97:
+		return (dentry->d_inode != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1354: FILE: fs/lookuptrap.c:106:
+	/* At this point, maybe the queue was woken up or maybe we got a
+	   signal.  There is no need to check, because we just return

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1355: FILE: fs/lookuptrap.c:107:
+	   in either case. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#1357: FILE: fs/lookuptrap.c:109:
+	return (dentry->d_inode != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1358: FILE: fs/lookuptrap.c:110:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1359: FILE: fs/lookuptrap.c:111:
+	
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1361: FILE: fs/lookuptrap.c:113:
+
+

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1362: FILE: fs/lookuptrap.c:114:
+static struct dentry_operations trapping_dentry_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1370: FILE: fs/lookuptrap.c:122:
+		struct nameidata *nd,
 		                  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1374: FILE: fs/lookuptrap.c:126:
+	/*
+	  We must do d_add before call_fs_helper to prevent

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1389: FILE: fs/lookuptrap.c:141:
+	  layers passed nd==NULL in these cases via a routine
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1391: FILE: fs/lookuptrap.c:143:
+	  so we filter out the case where nd == NULL.
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1393: FILE: fs/lookuptrap.c:145:
+	  Filtering out nd==NULL has the unintented side-effect of
 	                ^^

WARNING:TYPO_SPELLING: 'unintented' may be misspelled - perhaps 'unintended'?
#1393: FILE: fs/lookuptrap.c:145:
+	  Filtering out nd==NULL has the unintented side-effect of
 	                                 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'arguement' may be misspelled - perhaps 'argument'?
#1396: FILE: fs/lookuptrap.c:148:
+	  For rmdir, unlink, and the source arguement to rename,
 	                                    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nonexistant' may be misspelled - perhaps 'nonexistent'?
#1398: FILE: fs/lookuptrap.c:150:
+	  nonexistant files.  We're probably also OK skipping the
 	  ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1407: FILE: fs/lookuptrap.c:159:
+	if (!want_to_trap(nd))
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1408: FILE: fs/lookuptrap.c:160:
+		return simple_lookup(dir, dentry, nd);
 		                                  ^^

CHECK:BRACES: Unbalanced braces around else statement
#1427: FILE: fs/lookuptrap.c:179:
+	else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1438: FILE: fs/lookuptrap.c:190:
+EXPORT_SYMBOL_GPL(trapping_lookup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1481: FILE: fs/userhelper.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1482: FILE: fs/userhelper.c:2:
+/*
+  helper.c -- Invoke user level helper command for a struct dentry.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1498: FILE: fs/userhelper.c:18:
+  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1499: FILE: fs/userhelper.c:19:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1507: FILE: fs/userhelper.c:27:
+static int path_len (struct dentry *de, struct dentry *root)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1510: FILE: fs/userhelper.c:30:
+	int len = 0;
+	while (de != root) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1515: FILE: fs/userhelper.c:35:
+	return len;		/* -1 because we omit the leading '/',
+				   +1 because we include trailing '\0' */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1515: FILE: fs/userhelper.c:35:
+				   +1 because we include trailing '\0' */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1518: FILE: fs/userhelper.c:38:
+static int write_path_from_mnt (struct dentry *de, char *path, int buflen)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#1524: FILE: fs/userhelper.c:44:
+	if (de == NULL || de == mnt_root)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: fs/userhelper.c:65:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1548: FILE: fs/userhelper.c:68:
+	BUG_ON(path != path_orig);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1558: FILE: fs/userhelper.c:78:
+	int argc = 0;
+	while (*str) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1588: FILE: fs/userhelper.c:108:
+	argv = kmalloc(((argc + argc_extra) * sizeof(char*)) + str_len + 1,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1593: FILE: fs/userhelper.c:113:
+	str_out = (char*) (argv + argc + argc_extra);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1593: FILE: fs/userhelper.c:113:
+	str_out = (char*) (argv + argc + argc_extra);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1612: FILE: fs/userhelper.c:132:
+/*
+  Warning: dentry_usermodehelper releases and retakes

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1630: FILE: fs/userhelper.c:150:
+	if (write_path_from_mnt(dentry, path, sizeof(path)) == 0) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1632: FILE: fs/userhelper.c:152:
+		/*
+		  FIXME.  We would not need the extra memory allocation,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "argv"
#1654: FILE: fs/userhelper.c:174:
+		if (argv != NULL) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1656: FILE: fs/userhelper.c:176:
+			static char *envp[] =
+				{"PATH=/bin:/sbin:/usr/bin:/usr/sbin",

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1659: FILE: fs/userhelper.c:179:
+			argv[argc++] = (char*) event;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1659: FILE: fs/userhelper.c:179:
+			argv[argc++] = (char*) event;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1686: FILE: include/linux/devfs_fs_kernel.h:15:
+#define devfs_mk_cdev(dev, mode, fmt...)	devfs_mk_bdev(dev,mode,fmt)
                                         	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1686: FILE: include/linux/devfs_fs_kernel.h:15:
+#define devfs_mk_cdev(dev, mode, fmt...)	devfs_mk_bdev(dev,mode,fmt)
                                         	                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1688: FILE: include/linux/devfs_fs_kernel.h:17:
+extern int devfs_mk_symlink (const char *link_contents, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1688: FILE: include/linux/devfs_fs_kernel.h:17:
+extern int devfs_mk_symlink (const char *link_contents, const char *fmt, ...);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1697: FILE: include/linux/devfs_fs_kernel.h:34:
 }
+static inline int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1698: FILE: include/linux/devfs_fs_kernel.h:35:
+devfs_mk_symlink (const char *link_contents, const char *fmt, ...)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1705: FILE: include/linux/fsuserhelper.h:1:
+#ifndef _LINUX_FS_HELPER

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1712: FILE: include/linux/fsuserhelper.h:8:
+/*
+  Note: call_fs_helper releases and retakes dentry->d_parent->d_inode->i_sem.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1714: FILE: include/linux/fsuserhelper.h:10:
+extern void call_fs_helper(char **comand_str_ptr,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1723: FILE: include/linux/lookuptrap.h:1:
+#ifndef _LINUX_LOOKUPTRAP_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1729: FILE: include/linux/lookuptrap.h:7:
+extern struct dentry *trapping_lookup(struct inode *dir,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1731: FILE: include/linux/lookuptrap.h:9:
+				      struct nameidata *nd,
 				                        ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1768: FILE: include/linux/shmem_fs.h:43:
+extern int __init init_tmpfs(void); /* early initialization for devfs */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1898: FILE: mm/shmem.c:1673:
+#endif $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1904: FILE: mm/shmem.c:1679:
+	int error = shmem_mknod_no_register(dir, dentry, mode, dev);
+	if (!error)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1915: FILE: mm/shmem.c:1689:
+	if ((error = shmem_mknod_no_register(dir, dentry, mode | S_IFDIR, 0)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1929: FILE: mm/shmem.c:1705:
+static struct dentry * shmem_lookup(struct inode *dir,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1931: FILE: mm/shmem.c:1707:
+				    struct nameidata *nd)
 				                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1935: FILE: mm/shmem.c:1711:
+	return trapping_lookup(dir, dentry, nd, &sbinfo->helper_shell_command);
 	                                    ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1958: FILE: mm/shmem.c:1754:
+^I^I$

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#1979: FILE: mm/shmem.c:1910:
+static int shmem_parse_options(char *options, int *mode, uid_t *uid, gid_t *gid, unsigned long *blocks, unsigned long *inodes, substring_t *helper)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1987: FILE: mm/shmem.c:1964:
+		} else if (!strcmp(this_char,"helper")) {
 		                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!substr->from"
#2003: FILE: mm/shmem.c:1988:
+	if (substr->from == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2006: FILE: mm/shmem.c:1991:
+	if (substr->from == substr->to)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2008: FILE: mm/shmem.c:1993:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2064: FILE: mm/shmem.c:2042:
+# ifdef CONFIG_TMPFS_LOOKUP_TRAPS^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbinfo)...) over kmalloc(sizeof(struct shmem_sb_info)...)
#2114: FILE: mm/shmem.c:2091:
+	sbinfo = kmalloc(sizeof(struct shmem_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2154: FILE: mm/shmem.c:2318:
+/* init_tmpfs is exported so that devfs can get an earlier initialization
+   if necessary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2154: FILE: mm/shmem.c:2318:
+   if necessary. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 83 warnings, 45 checks, 2031 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
