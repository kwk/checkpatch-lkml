WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: fs/iolock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: fs/iolock.c:39:
+	struct iolock *ret = kzalloc(sizeof(*ret), GFP_KERNEL);
+	if (!ret)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/iolock.c:54:
+	struct iolock_chain * ret = kzalloc(sizeof(*ret), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/iolock.c:55:
+	struct iolock_chain * ret = kzalloc(sizeof(*ret), GFP_KERNEL);
+	if (ret) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#112: FILE: fs/iolock.c:55:
+	if (ret) {
+		INIT_LIST_HEAD(&ret->list);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: fs/iolock.c:63:
+	struct iolock * iolock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#125: FILE: fs/iolock.c:68:
+			err = iolock->mapping->a_ops->iolock_acquire(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#189: FILE: fs/iolock.c:132:
+		/* Allocate chain lazily to avoid initialization overhead
+		   when we don't have any files that require iolock.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: fs/iolock.c:132:
+		   when we don't have any files that require iolock.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: fs/iolock.c:177:
+		struct address_space *mapping = iolock->mapping;
+		if (mapping && mapping->a_ops->iolock_release)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/read_write.c:251:
+			struct iolock_chain * lock = iolock_region(buf, count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: fs/read_write.c:252:
+			struct iolock_chain * lock = iolock_region(buf, count);
+			if (IS_ERR(lock)) {

WARNING:INDENTED_LABEL: labels should not be indented
#271: FILE: fs/read_write.c:265:
+  out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: fs/read_write.c:309:
+			struct iolock_chain * lock = iolock_region(buf, count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: fs/read_write.c:310:
+			struct iolock_chain * lock = iolock_region(buf, count);
+			if (IS_ERR(lock)) {

WARNING:INDENTED_LABEL: labels should not be indented
#293: FILE: fs/read_write.c:323:
+  out:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#302: FILE: include/linux/iolock.h:1:
+#ifndef __LINUX_IOLOCK_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/iolock.h:8:
+extern struct iolock_chain *iolock_region(const char __user *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#309: FILE: include/linux/iolock.h:8:
+extern struct iolock_chain *iolock_region(const char __user *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#309: FILE: include/linux/iolock.h:8:
+extern struct iolock_chain *iolock_region(const char __user *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: include/linux/iolock.h:9:
+extern void iolock_release(struct iolock_chain *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iolock_chain *' should also have an identifier name
#310: FILE: include/linux/iolock.h:9:
+extern void iolock_release(struct iolock_chain *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file **' should also have an identifier name
#334: FILE: include/linux/fs.h:337:
+	int (*iolock_acquire)(struct file **, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#334: FILE: include/linux/fs.h:337:
+	int (*iolock_acquire)(struct file **, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file **' should also have an identifier name
#335: FILE: include/linux/fs.h:338:
+	void (*iolock_release)(struct file **, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#335: FILE: include/linux/fs.h:338:
+	void (*iolock_release)(struct file **, unsigned long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160495.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 19 warnings, 3 checks, 259 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160495.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
