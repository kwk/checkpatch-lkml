WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
But surely giving rw-semaphores this behaviour is even worse... It introduces

WARNING:TYPO_SPELLING: 'decription' may be misspelled - perhaps 'description'?
#49: 
the process's VM decription so that it knows that nobody is going to modify it
                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/cris/kernel/sys_cris.c:62:
+        mm_lock_exclusive(current->mm);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/cris/kernel/sys_cris.c:62:
+        mm_lock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: arch/cris/kernel/sys_cris.c:64:
+        mm_unlock_exclusive(current->mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/cris/kernel/sys_cris.c:64:
+        mm_unlock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: arch/cris/mm/fault.c:400:
+        mm_unlock_shared(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: arch/cris/mm/fault.c:400:
+        mm_unlock_shared(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: arch/mips/kernel/irixelf.c:501:
+^I        mm_lock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: arch/mips/kernel/irixelf.c:506:
+^I        mm_unlock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#922: FILE: arch/s390/mm/fault.c:116:
+        mm_lock_shared_recursive(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: arch/s390/mm/fault.c:116:
+        mm_lock_shared_recursive(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: arch/s390/mm/fault.c:167:
+        mm_unlock_shared(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: arch/s390/mm/fault.c:167:
+        mm_unlock_shared(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: arch/s390/mm/fault.c:175:
+        mm_unlock_shared(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: arch/s390/mm/fault.c:175:
+        mm_unlock_shared(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: arch/s390x/mm/fault.c:144:
+        mm_lock_shared_recursive(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: arch/s390x/mm/fault.c:144:
+        mm_lock_shared_recursive(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: arch/s390x/mm/fault.c:198:
+        mm_unlock_shared(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: arch/s390x/mm/fault.c:198:
+        mm_unlock_shared(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1060: FILE: arch/s390x/mm/fault.c:206:
+        mm_unlock_shared(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: arch/s390x/mm/fault.c:206:
+        mm_unlock_shared(mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1295: FILE: arch/sparc64/kernel/binfmt_aout32.c:280:
+^I        mm_lock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1301: FILE: arch/sparc64/kernel/binfmt_aout32.c:285:
+^I        mm_unlock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: arch/sparc64/kernel/binfmt_aout32.c:292:
+^I        mm_lock_exclusive(current->mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1315: FILE: arch/sparc64/kernel/binfmt_aout32.c:297:
+^I        mm_unlock_exclusive(current->mm);$

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1799: FILE: include/linux/sched.h:213:
+	int mmsem_activity;			/* 0 inactive, +n active readers, -1 active writer */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1817: FILE: include/linux/sched.h:238:
+#define INIT_MM(name)						\
+{								\
+	mm_rb:		RB_ROOT,				\
+	pgd:		swapper_pg_dir,				\
+	mm_users:	ATOMIC_INIT(2),				\
+	mm_count:	ATOMIC_INIT(1),				\
+	mmsem_lock:	SPIN_LOCK_UNLOCKED,			\
+	mmsem_activity:	0,					\
+	mmsem_waiters:	LIST_HEAD_INIT(name.mmsem_waiters),	\
+	page_table_lock: SPIN_LOCK_UNLOCKED,			\
+	mmlist:		LIST_HEAD_INIT(name.mmlist),		\
+}

WARNING:INDENTED_LABEL: labels should not be indented
#1819: FILE: include/linux/sched.h:240:
+	mm_rb:		RB_ROOT,				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1820: FILE: include/linux/sched.h:241:
+	pgd:		swapper_pg_dir,				\
 	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1820: FILE: include/linux/sched.h:241:
+	pgd:		swapper_pg_dir,				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1821: FILE: include/linux/sched.h:242:
+	mm_users:	ATOMIC_INIT(2),				\
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1821: FILE: include/linux/sched.h:242:
+	mm_users:	ATOMIC_INIT(2),				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1822: FILE: include/linux/sched.h:243:
+	mm_count:	ATOMIC_INIT(1),				\
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1822: FILE: include/linux/sched.h:243:
+	mm_count:	ATOMIC_INIT(1),				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1823: FILE: include/linux/sched.h:244:
+	mmsem_lock:	SPIN_LOCK_UNLOCKED,			\
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#1823: FILE: include/linux/sched.h:244:
+	mmsem_lock:	SPIN_LOCK_UNLOCKED,			\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1825: FILE: include/linux/sched.h:246:
+	mmsem_waiters:	LIST_HEAD_INIT(name.mmsem_waiters),	\
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#1825: FILE: include/linux/sched.h:246:
+	mmsem_waiters:	LIST_HEAD_INIT(name.mmsem_waiters),	\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1826: FILE: include/linux/sched.h:247:
+	page_table_lock: SPIN_LOCK_UNLOCKED,			\
 	               ^

WARNING:INDENTED_LABEL: labels should not be indented
#1826: FILE: include/linux/sched.h:247:
+	page_table_lock: SPIN_LOCK_UNLOCKED,			\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1827: FILE: include/linux/sched.h:248:
+	mmlist:		LIST_HEAD_INIT(name.mmlist),		\
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1827: FILE: include/linux/sched.h:248:
+	mmlist:		LIST_HEAD_INIT(name.mmlist),		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1830: FILE: include/linux/sched.h:251:
+extern void __mm_lock_wait(struct mm_struct *mm, int bias);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1831: FILE: include/linux/sched.h:252:
+extern void __mm_lock_wake(struct mm_struct *mm);

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1836: FILE: include/linux/sched.h:257:
+	if (mm->mmsem_activity>=0 && list_empty(&mm->mmsem_waiters)) {
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1836: FILE: include/linux/sched.h:257:
+	if (mm->mmsem_activity>=0 && list_empty(&mm->mmsem_waiters)) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1840: FILE: include/linux/sched.h:261:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1841: FILE: include/linux/sched.h:262:
+		__mm_lock_wait(mm,1);
 		                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1847: FILE: include/linux/sched.h:268:
+	if (mm->mmsem_activity>=0) {
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1847: FILE: include/linux/sched.h:268:
+	if (mm->mmsem_activity>=0) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1851: FILE: include/linux/sched.h:272:
+	}
+	else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1852: FILE: include/linux/sched.h:273:
+		__mm_lock_wait(mm,1);
 		                 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1866: FILE: include/linux/sched.h:287:
+	if (mm->mmsem_activity==0) {
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1866: FILE: include/linux/sched.h:287:
+	if (mm->mmsem_activity==0) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1870: FILE: include/linux/sched.h:291:
+	}
+	else

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1871: FILE: include/linux/sched.h:292:
+		__mm_lock_wait(mm,-1);
 		                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1871: FILE: include/linux/sched.h:292:
+		__mm_lock_wait(mm,-1);
 		                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1969: FILE: kernel/ksyms.c:91:
+EXPORT_SYMBOL(__mm_lock_wake);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2179: FILE: mm/mmap.c:1177:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2201: FILE: mm/mmap.c:1199:
+	waiter = list_entry(mm->mmsem_waiters.next,struct mm_waiter,list);
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2201: FILE: mm/mmap.c:1199:
+	waiter = list_entry(mm->mmsem_waiters.next,struct mm_waiter,list);
 	                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2223: FILE: mm/mmap.c:1221:
+		waiter = list_entry(mm->mmsem_waiters.next,struct mm_waiter,list);
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2223: FILE: mm/mmap.c:1221:
+		waiter = list_entry(mm->mmsem_waiters.next,struct mm_waiter,list);
 		                                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2224: FILE: mm/mmap.c:1222:
+	} while (waiter->flags&MM_WAITING_FOR_READ);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2239: FILE: mm/mmap.c:1237:
+	set_task_state(tsk,TASK_UNINTERRUPTIBLE);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2245: FILE: mm/mmap.c:1243:
+	list_add_tail(&waiter.list,&mm->mmsem_waiters);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2245: FILE: mm/mmap.c:1243:
+	list_add_tail(&waiter.list,&mm->mmsem_waiters);
 	                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000512723.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 21 warnings, 8 checks, 1864 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000512723.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
