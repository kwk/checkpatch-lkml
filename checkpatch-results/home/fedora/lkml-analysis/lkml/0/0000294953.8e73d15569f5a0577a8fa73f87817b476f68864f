WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -Nurp --exclude-from=/home/mcd/.dontdiff linux-2.6.4-vanilla/include/asm-generic/nodemask.h linux-2.6.4-nodemask_t-definitions/include/asm-generic/nodemask.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: include/asm-generic/nodemask.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#56: FILE: include/asm-generic/nodemask.h:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#61: FILE: include/asm-generic/nodemask.h:15:
+struct nodemask
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#64: FILE: include/asm-generic/nodemask.h:18:
+};
+typedef struct nodemask nodemask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#64: FILE: include/asm-generic/nodemask.h:18:
+typedef struct nodemask nodemask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#67: FILE: include/asm-generic/nodemask.h:21:
+typedef unsigned long nodemask_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#70: FILE: include/asm-generic/nodemask.h:24:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: include/asm-generic/nodemask.h:37:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#84: FILE: include/asm-generic/nodemask.h:38:
+#if MAX_NUMNODES <= 4*BITS_PER_LONG
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: include/asm-generic/nodemask_arith.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_ARITH_H

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#108: FILE: include/asm-generic/nodemask_arith.h:14:
+#define nodes_and(d, s1, s2)		do { d = (s1) & (s2); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#109: FILE: include/asm-generic/nodemask_arith.h:15:
+#define nodes_or(d, s1, s2)		do { d = (s1) | (s2); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#110: FILE: include/asm-generic/nodemask_arith.h:16:
+#define nodes_clear(map)		do { map = 0UL; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#111: FILE: include/asm-generic/nodemask_arith.h:17:
+#define nodes_complement(map)		do { map = ~(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#111: FILE: include/asm-generic/nodemask_arith.h:17:
+#define nodes_complement(map)		do { map = ~(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#122: FILE: include/asm-generic/nodemask_arith.h:28:
+#define nodes_shift_right(d, s, n)	do { d = (s) >> (n); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#123: FILE: include/asm-generic/nodemask_arith.h:29:
+#define nodes_shift_left(d, s, n)	do { d = (s) << (n); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#126: FILE: include/asm-generic/nodemask_arith.h:32:
+#define next_node(node, map)		find_next_bit(&(map), MAX_NUMNODES, node + 1)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#139: FILE: include/asm-generic/nodemask_arith.h:45:
+#define NODE_MASK_ALL	(~((nodemask_t)0) >> (8*sizeof(nodemask_t) - MAX_NUMNODES))
                      	                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#147: FILE: include/asm-generic/nodemask_array.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_ARRAY_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: include/asm-generic/nodemask_array.h:14:
+#define nodes_and(d,s1,s2)	bitmap_and((d).mask,(s1).mask, (s2).mask, MAX_NUMNODES)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: include/asm-generic/nodemask_array.h:14:
+#define nodes_and(d,s1,s2)	bitmap_and((d).mask,(s1).mask, (s2).mask, MAX_NUMNODES)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: include/asm-generic/nodemask_array.h:14:
+#define nodes_and(d,s1,s2)	bitmap_and((d).mask,(s1).mask, (s2).mask, MAX_NUMNODES)
                           	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: include/asm-generic/nodemask_array.h:15:
+#define nodes_or(d,s1,s2)	bitmap_or((d).mask, (s1).mask, (s2).mask, MAX_NUMNODES)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: include/asm-generic/nodemask_array.h:15:
+#define nodes_or(d,s1,s2)	bitmap_or((d).mask, (s1).mask, (s2).mask, MAX_NUMNODES)
                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#174: FILE: include/asm-generic/nodemask_array.h:28:
+#define next_node(node, map)	find_next_bit((map).mask, MAX_NUMNODES, node + 1)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#194: FILE: include/asm-generic/nodemask_array.h:48:
+#define NODE_MASK_ALL	{ {[0 ... NODE_ARRAY_SIZE-1] = ~0UL} }
                      	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#195: FILE: include/asm-generic/nodemask_array.h:49:
+#define NODE_MASK_NONE	{ {[0 ... NODE_ARRAY_SIZE-1] =  0UL} }
                       	                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#202: FILE: include/asm-generic/nodemask_const_reference.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_CONST_REFERENCE_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#209: FILE: include/asm-generic/nodemask_const_reference.h:8:
+typedef const struct nodemask_ref nodemask_const_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                                       	             ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                                       	              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                                       	                         ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#214: FILE: include/asm-generic/nodemask_const_reference.h:13:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst,*(src1).val,*(src2).val)
                                       	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                                      	            ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                                      	             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                                      	                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#215: FILE: include/asm-generic/nodemask_const_reference.h:14:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst,*(src1).val,*(src2).val)
                                      	                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: include/asm-generic/nodemask_const_value.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_CONST_VALUE_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#236: FILE: include/asm-generic/nodemask_const_value.h:4:
+typedef const nodemask_t nodemask_const_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: include/asm-generic/nodemask_const_value.h:8:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst, src1, src2)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: include/asm-generic/nodemask_const_value.h:8:
+#define nodes_and_const(dst,src1,src2)	nodes_and(dst, src1, src2)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: include/asm-generic/nodemask_const_value.h:9:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst, src1, src2)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: include/asm-generic/nodemask_const_value.h:9:
+#define nodes_or_const(dst,src1,src2)	nodes_or(dst, src1, src2)
                                ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#244: FILE: include/asm-generic/nodemask_const_value.h:12:
+#define nodes_copy_const(map1, map2)	do { map1 = (nodemask_t)map2; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#258: FILE: include/asm-generic/nodemask_nonuma.h:1:
+#ifndef __ASM_GENERIC_NODEMASK_NONUMA_H

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#271: FILE: include/asm-generic/nodemask_nonuma.h:14:
+#define nodes_and(d, s1, s2)		do { d = (s1) & (s2); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#272: FILE: include/asm-generic/nodemask_nonuma.h:15:
+#define nodes_or(d, s1, s2)		do { d = (s1) | (s2); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#273: FILE: include/asm-generic/nodemask_nonuma.h:16:
+#define nodes_clear(map)		do { map = 0UL; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#274: FILE: include/asm-generic/nodemask_nonuma.h:17:
+#define nodes_complement(map)		do { map = !(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#274: FILE: include/asm-generic/nodemask_nonuma.h:17:
+#define nodes_complement(map)		do { map = !(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#281: FILE: include/asm-generic/nodemask_nonuma.h:24:
+#define nodes_shift_right(d, s, n)	do { d = (n) == 0 ? (s) : 0UL; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#282: FILE: include/asm-generic/nodemask_nonuma.h:25:
+#define nodes_shift_left(d, s, n)	do { d = (n) == 0 ? (s) : 0UL; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#364: FILE: include/linux/nodemask.h:1:
+#ifndef __LINUX_NODEMASK_H

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#370: FILE: include/linux/nodemask.h:7:
+#include <asm/bug.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: include/linux/nodemask.h:23:
+#define node_online(node)		({ BUG_ON((node) != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#387: FILE: include/linux/nodemask.h:24:
+#define node_possible(node)		({ BUG_ON((node) != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: include/linux/nodemask.h:25:
+#define node_set_online(node)		({ BUG_ON((node) != 0); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: include/linux/nodemask.h:26:
+#define node_set_offline(node)		({ BUG(); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#393: FILE: include/linux/nodemask.h:30:
+#define for_each_node_mask(node, mask)					\
+	for (node = first_node_const(mk_nodemask_const(mask));		\
+		node < MAX_NUMNODES;					\
+		node = next_node_const(node, mk_nodemask_const(mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#393: FILE: include/linux/nodemask.h:30:
+#define for_each_node_mask(node, mask)					\
+	for (node = first_node_const(mk_nodemask_const(mask));		\
+		node < MAX_NUMNODES;					\
+		node = next_node_const(node, mk_nodemask_const(mask)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: include/linux/nodemask.h:35:
+#define for_each_node(node) ^I^Ifor_each_node_mask(node, node_possible_map)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 31 warnings, 14 checks, 331 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
