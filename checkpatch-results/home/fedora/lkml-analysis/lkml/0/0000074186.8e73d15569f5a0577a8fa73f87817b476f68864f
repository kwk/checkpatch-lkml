WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
the required position/timing info. This kind of estimation is more conservative

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# diffprofile oprofile.50.stateful oprofile.50.stateless

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#179: 
# diffprofile oprofile.50.stateful2 oprofile.50.stateless2

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: mm/readahead.c:1187:
+ * ^Il: the number of pages read by the stream$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: mm/readahead.c:1189:
+ * ^IL: the number of pages pushed into inactive_list in the mean time$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: mm/readahead.c:1191:
+ * ^If(l01) <= L0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: mm/readahead.c:1192:
+ * ^If(l11 + l12) = L1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: mm/readahead.c:1193:
+ * ^If(l21 + l22) = L2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: mm/readahead.c:1194:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: mm/readahead.c:1195:
+ * ^If(l01 + l11 + ...) <= Sum(L0 + L1 + ...)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#283: FILE: mm/readahead.c:1203:
+#define PAGE_REFCNT_1           (1 << PG_referenced)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#284: FILE: mm/readahead.c:1204:
+#define PAGE_REFCNT_2           (1 << PG_active)

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: mm/readahead.c:1219:
+        return page->flags & PAGE_REFCNT_MASK;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: mm/readahead.c:1219:
+        return page->flags & PAGE_REFCNT_MASK;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: mm/readahead.c:1226:
+ * ^I^Ilen(inactive_list) / speed(leader)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: mm/readahead.c:1253:
+static pgoff_t find_segtail(struct address_space *mapping,
+					pgoff_t index, unsigned long max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: mm/readahead.c:1272:
+static pgoff_t find_segtail_backward(struct address_space *mapping,
+					pgoff_t index, unsigned long max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: mm/readahead.c:1299:
+static int count_cache_hit(struct address_space *mapping,
+				pgoff_t first_index, pgoff_t last_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: mm/readahead.c:1326:
+static unsigned long query_page_cache_segment(struct address_space *mapping,
+				struct file_ra_state *ra,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: mm/readahead.c:1341:
+	index = radix_tree_scan_hole_backward(&mapping->page_tree,
+							offset, ra_max);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'query_page_cache_segment', this function's name, in a string
#466: FILE: mm/readahead.c:1386:
+	ddprintk("query_page_cache_segment: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#467: FILE: mm/readahead.c:1387:
+	ddprintk("query_page_cache_segment: "
+			"ino=%lu, idx=%lu, count=%lu, remain=%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: mm/readahead.c:1406:
+static int adjust_rala_aggressive(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: mm/readahead.c:1433:
+try_context_based_readahead(struct address_space *mapping,
+			struct file_ra_state *ra, struct page *prev_page,

CHECK:BRACES: braces {} should be used on all arms of this statement
#527: FILE: mm/readahead.c:1447:
+	if (page) {
[...]
+	} else if (prev_page || probe_page(mapping, index - 1)) {
[...]
+	} else if (readahead_hit_rate > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: mm/readahead.c:1455:
+		ra_index = find_segtail_backward(mapping, index,
+						readahead_hit_rate + ra_min);

CHECK:BRACES: Unbalanced braces around else statement
#540: FILE: mm/readahead.c:1460:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: mm/readahead.c:1464:
+	ra_size = query_page_cache_segment(mapping, ra, &remain_pages,
+							index, ra_min, ra_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: mm/readahead.c:1468:
+	if (page && remain_pages <= la_size &&
+			remain_pages < index && la_size > 1) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 14 warnings, 14 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
