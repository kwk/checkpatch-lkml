WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: arch/ia64/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#149: FILE: arch/ia64/kernel/kgdb.c:23:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#164: FILE: arch/ia64/kernel/kgdb.c:38:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#168: FILE: arch/ia64/kernel/kgdb.c:42:
+#define REGISTER_BYTE(N) (((N) * 8) \
+  + ((N) <= IA64_FR0_REGNUM ? 0 : 8 * (((N) > IA64_FR127_REGNUM) ? 128 : (N) - IA64_FR0_REGNUM)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/ia64/kernel/kgdb.c:43:
+  + ((N) <= IA64_FR0_REGNUM ? 0 : 8 * (((N) > IA64_FR127_REGNUM) ? 128 : (N) - IA64_FR0_REGNUM)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#170: FILE: arch/ia64/kernel/kgdb.c:44:
+#define	REGISTER_SIZE(N) (((N) >= IA64_FR0_REGNUM && (N) <= IA64_FR127_REGNUM) ? 16 : 8)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#173: FILE: arch/ia64/kernel/kgdb.c:47:
+#define IA64_FR127_REGNUM       (IA64_FR0_REGNUM+127)
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: arch/ia64/kernel/kgdb.c:57:
+#define IA64_NAT31_REGNUM       (IA64_NAT0_REGNUM+31)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: arch/ia64/kernel/kgdb.c:58:
+#define IA64_NAT32_REGNUM       (IA64_NAT0_REGNUM+32)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#185: FILE: arch/ia64/kernel/kgdb.c:59:
+#define IA64_RSC_REGNUM		(IA64_AR0_REGNUM+16)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: arch/ia64/kernel/kgdb.c:60:
+#define IA64_BSP_REGNUM		(IA64_AR0_REGNUM+17)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: arch/ia64/kernel/kgdb.c:61:
+#define IA64_BSPSTORE_REGNUM	(IA64_AR0_REGNUM+18)
                             	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: arch/ia64/kernel/kgdb.c:62:
+#define IA64_RNAT_REGNUM	(IA64_AR0_REGNUM+19)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: arch/ia64/kernel/kgdb.c:63:
+#define IA64_FCR_REGNUM		(IA64_AR0_REGNUM+21)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: arch/ia64/kernel/kgdb.c:64:
+#define IA64_EFLAG_REGNUM	(IA64_AR0_REGNUM+24)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#191: FILE: arch/ia64/kernel/kgdb.c:65:
+#define IA64_CSD_REGNUM		(IA64_AR0_REGNUM+25)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#192: FILE: arch/ia64/kernel/kgdb.c:66:
+#define IA64_SSD_REGNUM		(IA64_AR0_REGNUM+26)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: arch/ia64/kernel/kgdb.c:67:
+#define IA64_CFLG_REGNUM	(IA64_AR0_REGNUM+27)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#194: FILE: arch/ia64/kernel/kgdb.c:68:
+#define IA64_FSR_REGNUM		(IA64_AR0_REGNUM+28)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#195: FILE: arch/ia64/kernel/kgdb.c:69:
+#define IA64_FIR_REGNUM		(IA64_AR0_REGNUM+29)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: arch/ia64/kernel/kgdb.c:70:
+#define IA64_FDR_REGNUM		(IA64_AR0_REGNUM+30)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#197: FILE: arch/ia64/kernel/kgdb.c:71:
+#define IA64_CCV_REGNUM		(IA64_AR0_REGNUM+32)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: arch/ia64/kernel/kgdb.c:72:
+#define IA64_UNAT_REGNUM	(IA64_AR0_REGNUM+36)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#199: FILE: arch/ia64/kernel/kgdb.c:73:
+#define IA64_FPSR_REGNUM	(IA64_AR0_REGNUM+40)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: arch/ia64/kernel/kgdb.c:74:
+#define IA64_ITC_REGNUM		(IA64_AR0_REGNUM+44)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: arch/ia64/kernel/kgdb.c:75:
+#define IA64_PFS_REGNUM		(IA64_AR0_REGNUM+64)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: arch/ia64/kernel/kgdb.c:76:
+#define IA64_LC_REGNUM		(IA64_AR0_REGNUM+65)
                       		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#203: FILE: arch/ia64/kernel/kgdb.c:77:
+#define IA64_EC_REGNUM		(IA64_AR0_REGNUM+66)
                       		                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: arch/ia64/kernel/kgdb.c:79:
+#define	REGISTER_INDEX(N)	(REGISTER_BYTE(N) / sizeof (unsigned long))

CHECK:SPACING: No space is necessary after a cast
#207: FILE: arch/ia64/kernel/kgdb.c:81:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'V' may be better as '(V)' to avoid precedence issues
#207: FILE: arch/ia64/kernel/kgdb.c:81:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: arch/ia64/kernel/kgdb.c:86:
+};
+struct reg_to_ptreg_index gr_reg_to_ptreg_index[] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#230: FILE: arch/ia64/kernel/kgdb.c:104:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#242: FILE: arch/ia64/kernel/kgdb.c:116:
+	    (regnum >= (IA64_GR0_REGNUM + 4) && regnum <= (IA64_GR0_REGNUM + 7))
+	    || (regnum >= (IA64_GR0_REGNUM + 16)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#243: FILE: arch/ia64/kernel/kgdb.c:117:
+	    || (regnum >= (IA64_GR0_REGNUM + 16)
+		&& regnum <= (IA64_GR0_REGNUM + 31))) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#246: FILE: arch/ia64/kernel/kgdb.c:120:
+	} else
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)

CHECK:BRACES: Unbalanced braces around else statement
#246: FILE: arch/ia64/kernel/kgdb.c:120:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#247: FILE: arch/ia64/kernel/kgdb.c:121:
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#248: FILE: arch/ia64/kernel/kgdb.c:122:
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)
+		 && regnum <= (IA64_GR0_REGNUM + 3))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: arch/ia64/kernel/kgdb.c:123:
+		 && regnum <= (IA64_GR0_REGNUM + 3))
+		|| (regnum >= (IA64_GR0_REGNUM + 8)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: arch/ia64/kernel/kgdb.c:124:
+		|| (regnum >= (IA64_GR0_REGNUM + 8)
+		    && regnum <= (IA64_GR0_REGNUM + 15))) {

CHECK:BRACES: Unbalanced braces around else statement
#260: FILE: arch/ia64/kernel/kgdb.c:134:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#281: FILE: arch/ia64/kernel/kgdb.c:155:
+			} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: arch/ia64/kernel/kgdb.c:169:
+	} else if (regnum >= IA64_FR0_REGNUM
+		   && regnum <= (IA64_FR0_REGNUM + 127))

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: arch/ia64/kernel/kgdb.c:181:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#410: FILE: arch/ia64/kernel/kgdb.c:284:
+	if (size) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#413: FILE: arch/ia64/kernel/kgdb.c:287:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#417: FILE: arch/ia64/kernel/kgdb.c:291:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#432: FILE: arch/ia64/kernel/kgdb.c:306:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM + 1)) ||
[...]
+	} else
[...]
+	} else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM + 7))
[...]
+	} else if (regnum >= IA64_FR0_REGNUM
[...]
+	} else if (regnum == IA64_IP_REGNUM)
[...]
+	else if (regnum == IA64_CFM_REGNUM)
[...]
+	else if (regnum == IA64_PSR_REGNUM)
[...]
+	else if (regnum == IA64_PR_REGNUM)
[...]
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM)
[...]
+	} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#434: FILE: arch/ia64/kernel/kgdb.c:308:
+	    (regnum >= (IA64_GR0_REGNUM + 4) && regnum <= (IA64_GR0_REGNUM + 7))
+	    || (regnum >= (IA64_GR0_REGNUM + 16)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#435: FILE: arch/ia64/kernel/kgdb.c:309:
+	    || (regnum >= (IA64_GR0_REGNUM + 16)
+		&& regnum <= (IA64_GR0_REGNUM + 31))) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#437: FILE: arch/ia64/kernel/kgdb.c:311:
+	} else
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)

CHECK:BRACES: Unbalanced braces around else statement
#437: FILE: arch/ia64/kernel/kgdb.c:311:
+	} else

WARNING:TABSTOP: Statements should start on a tabstop
#438: FILE: arch/ia64/kernel/kgdb.c:312:
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)

CHECK:BRACES: braces {} should be used on all arms of this statement
#438: FILE: arch/ia64/kernel/kgdb.c:312:
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)
[...]
+	} else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM + 7))
[...]
+	} else if (regnum >= IA64_FR0_REGNUM
[...]
+	} else if (regnum == IA64_IP_REGNUM)
[...]
+	else if (regnum == IA64_CFM_REGNUM)
[...]
+	else if (regnum == IA64_PSR_REGNUM)
[...]
+	else if (regnum == IA64_PR_REGNUM)
[...]
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM)
[...]
+	} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#439: FILE: arch/ia64/kernel/kgdb.c:313:
+	    if ((regnum >= (IA64_GR0_REGNUM + 2)
+		 && regnum <= (IA64_GR0_REGNUM + 3))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#440: FILE: arch/ia64/kernel/kgdb.c:314:
+		 && regnum <= (IA64_GR0_REGNUM + 3))
+		|| (regnum >= (IA64_GR0_REGNUM + 8)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#441: FILE: arch/ia64/kernel/kgdb.c:315:
+		|| (regnum >= (IA64_GR0_REGNUM + 8)
+		    && regnum <= (IA64_GR0_REGNUM + 15))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#475: FILE: arch/ia64/kernel/kgdb.c:349:
+	} else if (regnum >= IA64_FR0_REGNUM
+		   && regnum <= (IA64_FR0_REGNUM + 127))

CHECK:BRACES: Unbalanced braces around else statement
#532: FILE: arch/ia64/kernel/kgdb.c:406:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#536: FILE: arch/ia64/kernel/kgdb.c:410:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#548: FILE: arch/ia64/kernel/kgdb.c:422:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#549: FILE: arch/ia64/kernel/kgdb.c:423:
+
+}

CHECK:BIT_MACRO: Prefer using the BIT macro
#560: FILE: arch/ia64/kernel/kgdb.c:434:
+#define	HWCAP_IBR	(1 << WATCH_INSTRUCTION)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#562: FILE: arch/ia64/kernel/kgdb.c:436:
+	unsigned enabled;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#610: FILE: arch/ia64/kernel/kgdb.c:484:
+	extern unsigned long _start[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#664: FILE: arch/ia64/kernel/kgdb.c:538:
+	extern unsigned long _start[];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#690: FILE: arch/ia64/kernel/kgdb.c:564:
+		printk(KERN_INFO "do_init_hw_break: pal call failed %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_init_hw_break', this function's name, in a string
#690: FILE: arch/ia64/kernel/kgdb.c:564:
+		printk(KERN_INFO "do_init_hw_break: pal call failed %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#696: FILE: arch/ia64/kernel/kgdb.c:570:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_init_hw_break', this function's name, in a string
#696: FILE: arch/ia64/kernel/kgdb.c:570:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#700: FILE: arch/ia64/kernel/kgdb.c:574:
+		while ((HW_BREAKPOINT > MAX_HW_BREAKPOINT)
+		       && hw_break_total_ibr != 1)

WARNING:RETURN_VOID: void function return statements are not generally useful
#717: FILE: arch/ia64/kernel/kgdb.c:591:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: arch/ia64/kernel/kgdb.c:604:
+				int ibreakno = breakno - hw_break_total_dbr;
+				ia64_set_ibr(ibreakno << 1,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'breakinfo[breakno].mask'
#741: FILE: arch/ia64/kernel/kgdb.c:615:
+					     (~breakinfo[breakno].
+					      mask & ((1UL << 56UL) - 1)) |

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:RETURN_VOID: void function return statements are not generally useful
#756: FILE: arch/ia64/kernel/kgdb.c:630:
+	return;
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#762: FILE: arch/ia64/kernel/kgdb.c:636:
+	extern unsigned long _start[];

CHECK:BRACES: braces {} should be used on all arms of this statement
#779: FILE: arch/ia64/kernel/kgdb.c:653:
+		if (action) {
[...]
+		} else if (breakinfo[breakno].enabled &&
[...]
+		} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: arch/ia64/kernel/kgdb.c:655:
+			if (breakinfo[breakno].enabled
+			    || !(breakinfo[breakno].capable & mask))

CHECK:BRACES: Unbalanced braces around else statement
#795: FILE: arch/ia64/kernel/kgdb.c:669:
+		} else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#802: FILE: arch/ia64/kernel/kgdb.c:676:
+			break;
+		else

WARNING:MEMORY_BARRIER: memory barrier without comment
#811: FILE: arch/ia64/kernel/kgdb.c:685:
+	mb();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#831: FILE: arch/ia64/kernel/kgdb.c:705:
+
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#856: FILE: arch/ia64/kernel/kgdb.c:730:
+volatile static struct smp_unw {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#859: FILE: arch/ia64/kernel/kgdb.c:733:
+} smp_unw[NR_CPUS];

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#861: FILE: arch/ia64/kernel/kgdb.c:735:
+static int inline kgdb_get_blocked_state(struct task_struct *p,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#883: FILE: arch/ia64/kernel/kgdb.c:757:
+static void inline kgdb_wait(struct pt_regs *regs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#886: FILE: arch/ia64/kernel/kgdb.c:760:
+	unsigned long hw_breakpoint_status = ia64_getreg(_IA64_REG_PSR);
+	if (hw_breakpoint_status & IA64_PSR_DB)

WARNING:RETURN_VOID: void function return statements are not generally useful
#893: FILE: arch/ia64/kernel/kgdb.c:767:
+	return;
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#895: FILE: arch/ia64/kernel/kgdb.c:769:
+static void inline normalize(struct unw_frame_info *running,

WARNING:RETURN_VOID: void function return statements are not generally useful
#907: FILE: arch/ia64/kernel/kgdb.c:781:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#929: FILE: arch/ia64/kernel/kgdb.c:803:
+		if (current->state == TASK_RUNNING)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#931: FILE: arch/ia64/kernel/kgdb.c:805:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#943: FILE: arch/ia64/kernel/kgdb.c:817:
+	return;
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#965: FILE: arch/ia64/kernel/kgdb.c:839:
+static void inline kgdb_pc(struct pt_regs *regs, unsigned long pc)

WARNING:RETURN_VOID: void function return statements are not generally useful
#970: FILE: arch/ia64/kernel/kgdb.c:844:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#972: FILE: arch/ia64/kernel/kgdb.c:846:
+volatile int kgdb_hwbreak_sstep[NR_CPUS];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1025: FILE: arch/ia64/kernel/kgdb.c:899:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1027: FILE: arch/ia64/kernel/kgdb.c:901:
+			if (smp_unw[i].task == kgdb_usethread && smp_unw[i].unw
+			    && smp_unw[i].unw != (struct unw_frame_info *)1) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1031: FILE: arch/ia64/kernel/kgdb.c:905:
+				break;
+			} else {

WARNING:INDENTED_LABEL: labels should not be indented
#1037: FILE: arch/ia64/kernel/kgdb.c:911:
+      bad:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1041: FILE: arch/ia64/kernel/kgdb.c:915:
+		printk("kgdb_arch_handle_exception: p packet bad (%s)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kgdb_arch_handle_exception', this function's name, in a string
#1041: FILE: arch/ia64/kernel/kgdb.c:915:
+		printk("kgdb_arch_handle_exception: p packet bad (%s)\n",

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#1055: FILE: arch/ia64/kernel/kgdb.c:929:
+	unsigned long newPC;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#1084: FILE: arch/ia64/kernel/kgdb.c:958:
+			} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v >= 0'
#1096: FILE: arch/ia64/kernel/kgdb.c:970:
+			if ((!kgdb_usethread || kgdb_usethread == current) &&
+			    kgdb_hex2long(&ptr, &v) &&
+			    *ptr++ == '=' && (v >= 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1096: FILE: arch/ia64/kernel/kgdb.c:970:
+			if ((!kgdb_usethread || kgdb_usethread == current) &&
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1103: FILE: arch/ia64/kernel/kgdb.c:977:
+			} else

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1117: FILE: arch/ia64/kernel/kgdb.c:991:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1119: FILE: arch/ia64/kernel/kgdb.c:993:
+		if (kgdb_hex2long(&ptr, &addr)) {
+			linux_regs->cr_iip = addr;
+		}

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1140: FILE: arch/ia64/kernel/kgdb.c:1014:
+		/* if not hardware breakpoint, then reenable them */
 		                                    ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1141: FILE: arch/ia64/kernel/kgdb.c:1015:
+		if (e_vector != 29)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1143: FILE: arch/ia64/kernel/kgdb.c:1017:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1155: FILE: arch/ia64/kernel/kgdb.c:1029:
+	return;
+}

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1157: FILE: arch/ia64/kernel/kgdb.c:1031:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1169: FILE: arch/ia64/kernel/kgdb-jmp.S:1:
+/* setjmp() and longjmp() assembler support for kdb on ia64.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1191: FILE: arch/ia64/kernel/kgdb-jmp.S:23:
+   not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1192: FILE: arch/ia64/kernel/kgdb-jmp.S:24:
+   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:TABSTOP: Statements should start on a tabstop
#1497: FILE: arch/ia64/kernel/smp.c:163:
+			      case IPI_KGDB_INTERRUPT:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1588: FILE: arch/ia64/kernel/traps.c:568:
+		if (vector == 36 && !user_mode(&regs) &&
+			kgdb_hwbreak_sstep[smp_processor_id()]) {

WARNING:TABSTOP: Statements should start on a tabstop
#1598: FILE: arch/ia64/kernel/traps.c:578:
+	      case 35: /* Taken Branch Trap */

WARNING:MISPLACED_INIT: __initdata should be placed after kgdb_reg_state[KGDB_EARLY_SIZE]
#1621: FILE: arch/ia64/kernel/unwind.c:77:
+static struct unw_reg_state __initdata kgdb_reg_state[KGDB_EARLY_SIZE];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after kgdb_labeled_state[KGDB_EARLY_SIZE]
#1622: FILE: arch/ia64/kernel/unwind.c:78:
+static struct unw_labeled_state __initdata kgdb_labeled_state[KGDB_EARLY_SIZE];

CHECK:SPACING: No space is necessary after a cast
#1632: FILE: arch/ia64/kernel/unwind.c:88:
+		*((unsigned long *) &kgdb_reg_state[i]) = (unsigned long) kgdb_reg_state_free;

CHECK:SPACING: No space is necessary after a cast
#1638: FILE: arch/ia64/kernel/unwind.c:94:
+		*((unsigned long *) &kgdb_labeled_state[i]) =

CHECK:SPACING: No space is necessary after a cast
#1639: FILE: arch/ia64/kernel/unwind.c:95:
+			(unsigned long) kgdb_labeled_state_free;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1643: FILE: arch/ia64/kernel/unwind.c:99:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1651: FILE: arch/ia64/kernel/unwind.c:107:
+	*mem = *((void **) p);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1662: FILE: arch/ia64/kernel/unwind.c:118:
+#define alloc_reg_state()^I(!malloc_sizes[0].cs_cachep ? ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1663: FILE: arch/ia64/kernel/unwind.c:119:
+^I^Ikgdb_malloc(&kgdb_reg_state_free) : ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'usr' - possible side-effects?
#1665: FILE: arch/ia64/kernel/unwind.c:121:
+#define free_reg_state(usr)	(!malloc_sizes[0].cs_cachep ?		\
+		kgdb_free(&kgdb_reg_state_free, usr) :			\
+		kfree(usr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'usr' - possible side-effects?
#1671: FILE: arch/ia64/kernel/unwind.c:127:
+#define free_labeled_state(usr)	(!malloc_sizes[0].cs_cachep ?		\
+		kgdb_free(&kgdb_labeled_state_free, usr) :		\
+		kfree(usr))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1697: FILE: arch/ia64/kernel/unwind.c:308:
+static unsigned long inline kgdb_unimpl_va_mask(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1792: FILE: include/asm-ia64/kgdb.h:1:
+#ifdef __KERNEL__

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1810: FILE: include/asm-ia64/kgdb.h:19:
+ * on ia64. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1813: FILE: include/asm-ia64/kgdb.h:22:
+#define NUMCRITREGBYTES		(70*8)
                        		   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1814: FILE: include/asm-ia64/kgdb.h:23:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1814: FILE: include/asm-ia64/kgdb.h:23:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#1814: FILE: include/asm-ia64/kgdb.h:23:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1818: FILE: include/asm-ia64/kgdb.h:27:
+#define BREAKPOINT()		asm volatile ("break.m 0x6665")

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1824: FILE: include/asm-ia64/kgdb.h:33:
+extern volatile int kgdb_hwbreak_sstep[NR_CPUS];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1825: FILE: include/asm-ia64/kgdb.h:34:
+extern void smp_send_nmi_allbutself(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1826: FILE: include/asm-ia64/kgdb.h:35:
+extern void kgdb_wait_ipi(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1826: FILE: include/asm-ia64/kgdb.h:35:
+extern void kgdb_wait_ipi(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 56 warnings, 82 checks, 1715 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
