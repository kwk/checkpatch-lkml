WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
--- linux-2.6.15-rc5-rt2.orig/init/Kconfig	2005-12-17 14:09:22.000000000 -0500

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#205: FILE: mm/slab.c:285:
+#define LIST3_INIT(parent) \
+	{ \
+		.slabs_full	= LIST_HEAD_INIT(parent.slabs_full), \
+		.slabs_partial	= LIST_HEAD_INIT(parent.slabs_partial), \
+		.slabs_free	= LIST_HEAD_INIT(parent.slabs_free) \
+	}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#293: FILE: mm/slab.c:589:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#293: FILE: mm/slab.c:589:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len);

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#302: FILE: mm/slab.c:595:
+	return (void**)(ac+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#302: FILE: mm/slab.c:595:
+	return (void**)(ac+1);
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/slab.c:604:
+static inline kmem_cache_t *__find_general_cachep(size_t size,
+						unsigned int __nocast gfpflags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: mm/slab.c:613:
+	BUG_ON(csizep->cs_cachep == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#321: FILE: mm/slab.c:613:
+	BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: mm/slab.c:629:
+kmem_cache_t *kmem_find_general_cachep(size_t size,
+		unsigned int __nocast gfpflags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/slab.c:695:
+static struct array_cache *alloc_arraycache(int cpu, int entries,
 						int batchcount)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#443: FILE: mm/slab.c:714:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#497: FILE: mm/slab.c:732:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#497: FILE: mm/slab.c:732:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: mm/slab.c:788:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#682: FILE: mm/slab.c:833:
+		 * allow tighter packing of the smaller caches. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: mm/slab.c:835:
+		sizes->cs_cachep = kmem_cache_create(names->name,
+			sizes->cs_size, ARCH_KMALLOC_MINALIGN,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: mm/slab.c:859:
+		BUG_ON(ac_data(&cache_cache, cpu) != &initarray_cache.cache);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#716: FILE: mm/slab.c:866:
+		BUG_ON(ac_data(malloc_sizes[0].cs_cachep, cpu) != &initarray_generic.cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: mm/slab.c:868:
+		memcpy(ptr, ac_data(malloc_sizes[0].cs_cachep, cpu),
 				sizeof(struct arraycache_init));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: mm/slab.c:890:
 
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#763: FILE: mm/slab.c:904:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#784: FILE: mm/slab.c:991:
+	*addr++=raw_smp_processor_id();
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#837: FILE: mm/slab.c:1474:
+		cachep->slabp_cache = kmem_find_general_cachep(slab_size,0);
 		                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#879: FILE: mm/slab.c:1493:
+			cachep->array[cpu] = kmalloc(sizeof(struct arraycache_init),GFP_KERNEL);
 			                                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cachep->array[cpu])...) over kmalloc(sizeof(struct arraycache_init)...)
#879: FILE: mm/slab.c:1493:
+			cachep->array[cpu] = kmalloc(sizeof(struct arraycache_init),GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#890: FILE: mm/slab.c:1495:
+		BUG_ON(!ac_data(cachep, cpu));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#897: FILE: mm/slab.c:1502:
+		cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#897: FILE: mm/slab.c:1502:
+		cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 		                                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#902: FILE: mm/slab.c:1507:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#913: FILE: mm/slab.c:1525:
+	BUG_ON(!raw_irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: mm/slab.c:1531:
+	BUG_ON(raw_irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#936: FILE: mm/slab.c:1538:
+	BUG_ON(spin_trylock(&cachep->spinlock));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#996: FILE: mm/slab.c:1587:
+	do_drain_cpu((kmem_cache_t*)arg, smp_processor_id());

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1028: FILE: mm/slab.c:1608:
 
+

ERROR:SPACING: space required before the open parenthesis '('
#1042: FILE: mm/slab.c:1620:
+	for(;;) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1113: FILE: mm/slab.c:1711:
+	for (i = 0; i < NR_CPUS; i++)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1135: FILE: mm/slab.c:1726:
+static struct slab* alloc_slabmgmt(kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: mm/slab.c:1727:
+static struct slab* alloc_slabmgmt(kmem_cache_t *cachep,
+			void *objp, int colour_off, unsigned int __nocast local_flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1145: FILE: mm/slab.c:1758:
+		void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1145: FILE: mm/slab.c:1758:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1145: FILE: mm/slab.c:1758:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1183: FILE: mm/slab.c:1877:
 
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1258: FILE: mm/slab.c:2050:
+	BUG_ON(ac->avail > 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: mm/slab.c:2060:
+			memcpy(ac_entry(ac), &ac_entry(shared_array)[shared_array->avail],
+					sizeof(void*)*batchcount);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1271: FILE: mm/slab.c:2060:
+					sizeof(void*)*batchcount);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1271: FILE: mm/slab.c:2060:
+					sizeof(void*)*batchcount);
 					             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1281: FILE: mm/slab.c:2087:
+			ac_entry(ac)[ac->avail++] = slabp->s_mem + slabp->free*cachep->objsize;
 			                                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1334: FILE: mm/slab.c:2186:
 
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1488: FILE: mm/slab.c:2242:
+			printk(KERN_ERR "slab: double free detected in cache '%s', objp %p.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1489: FILE: mm/slab.c:2243:
+			printk(KERN_ERR "slab: double free detected in cache '%s', objp %p.\n",
+						cachep->name, objp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1510: FILE: mm/slab.c:2260:
+				list_add(&slabp->list,
+				&list3_data_ptr(cachep, objp)->slabs_free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1519: FILE: mm/slab.c:2268:
+			list_add_tail(&slabp->list,
+				&list3_data_ptr(cachep, objp)->slabs_partial);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1549: FILE: mm/slab.c:2290:
+			memcpy(&ac_entry(shared_array)[shared_array->avail],
+					&ac_entry(ac)[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1580: FILE: mm/slab.c:2320:
+	memmove(&ac_entry(ac)[0], &ac_entry(ac)[batchcount],
 			sizeof(void*)*ac->avail);

ERROR:SPACING: space required after that ';' (ctx:OxV)
#1682: FILE: mm/slab.c:2429:
+	for (loop = 0;;loop++) {
 	              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1689: FILE: mm/slab.c:2436:
+		 * from the right node */

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1690: FILE: mm/slab.c:2437:
+		list_for_each(q,&cachep->lists.slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1690: FILE: mm/slab.c:2437:
+		list_for_each(q,&cachep->lists.slabs_partial) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: mm/slab.c:2441:
+			if (page_to_nid(virt_to_page(slabp->s_mem)) == nodeid ||
+					loop > 2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: mm/slab.c:2448:
+			if (page_to_nid(virt_to_page(slabp->s_mem)) == nodeid ||
+					loop > 2)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1727: FILE: mm/slab.c:2470:
+	objp = slabp->s_mem + slabp->free*cachep->objsize;
 	                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1752: FILE: mm/slab.c:2491:
+	objp = cache_alloc_debugcheck_after(cachep, GFP_KERNEL, objp,
+					__builtin_return_address(0));

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1787: FILE: mm/slab.c:2562:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1791: FILE: mm/slab.c:2566:
+		pdata->ptrs[i] = kmalloc_node(size, GFP_KERNEL,
+						cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1840: FILE: mm/slab.c:2639:
+	if (check_no_locks_freed(objp, objp+cache_size(c)))
 	                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1841: FILE: mm/slab.c:2640:
+		printk("slab %s[%p] (%d), obj: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1842: FILE: mm/slab.c:2641:
+		printk("slab %s[%p] (%d), obj: %p\n",
+			c->name, c, c->objsize, objp);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1858: FILE: mm/slab.c:2662:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1961: FILE: mm/slab.c:2713:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1965: FILE: mm/slab.c:2717:
+				for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1978: FILE: mm/slab.c:2732:
+	cachep->free_limit = (1+num_online_cpus())*cachep->batchcount + cachep->num;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1978: FILE: mm/slab.c:2732:
+	cachep->free_limit = (1+num_online_cpus())*cachep->batchcount + cachep->num;
 	                                          ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1982: FILE: mm/slab.c:2735:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2000: FILE: mm/slab.c:2744:
+	new_shared = alloc_arraycache(-1, batchcount*shared, 0xbaadf00d);
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2050: FILE: mm/slab.c:2833:
+		memmove(&ac_entry(ac)[0], &ac_entry(ac)[tofree],
 					sizeof(void*)*ac->avail);

ERROR:SPACING: space required before the open parenthesis '('
#2086: FILE: mm/slab.c:2880:
+		if(time_after(searchp->lists.next_reap, jiffies))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2106: FILE: mm/slab.c:2893:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2106: FILE: mm/slab.c:2893:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2106: FILE: mm/slab.c:2893:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2106: FILE: mm/slab.c:2893:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2106: FILE: mm/slab.c:2893:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                                  ^

WARNING:SPLIT_STRING: quoted string split across lines
#2147: FILE: mm/slab.c:2949:
 		seq_puts(m, " : globalstat <listallocs> <maxobjs> <grown> <reaped>"
+				" <error> <maxfreeable> <freelimit> <nodeallocs>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2199: FILE: mm/slab.c:2992:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2199: FILE: mm/slab.c:2992:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2206: FILE: mm/slab.c:2999:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2206: FILE: mm/slab.c:2999:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2215: FILE: mm/slab.c:3008:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2215: FILE: mm/slab.c:3008:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2235: FILE: mm/slab.c:3028:
+			cachep->lists.shared->limit/cachep->batchcount);
 			                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2237: FILE: mm/slab.c:3030:
+	seq_printf(m, " : slabdata %6lu %6lu %6u",
+			active_slabs, num_slabs, cachep->lists.shared->avail);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2252: FILE: mm/slab.c:3043:
+		seq_printf(m, " : globalstat %7lu %6lu %5lu %4lu %4lu %4lu %4lu %4lu",
 				allocs, high, grown, reaped, errors,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "objp"
#2295: FILE: mm/slab.c:3143:
+	if (likely(objp != NULL)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124370.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 21 warnings, 50 checks, 2171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124370.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
