WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#149: 
think that will cause any problems.  This should never be the last reference

WARNING:REPEATED_WORD: Possible repeated word: 'using'
#156: 
files using using AIO and O_DIRECT, O_SYNC, and both.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#226: FILE: fs/aio.c:42:
+long aio_run = 0; /* for testing only */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#227: FILE: fs/aio.c:43:
+long aio_wakeups = 0; /* for testing only */

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetCancelled>
#236: FILE: fs/aio.c:283:
+		kiocbSetCancelled(iocb);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: fs/aio.c:623:
+		list_add_tail(&iocb->ki_run_list,
+			&ctx->run_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#392: FILE: fs/aio.c:655:
+	ssize_t (*retry)(struct kiocb *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#400: FILE: fs/aio.c:658:
+	if (iocb->ki_retried++ > 1024*1024) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: fs/aio.c:659:
+		printk("Maximal retry count.  Bytes done %Zd\n",

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#401: FILE: fs/aio.c:659:
+		printk("Maximal retry count.  Bytes done %Zd\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: fs/aio.c:660:
+		printk("Maximal retry count.  Bytes done %Zd\n",
+			iocb->ki_nbytes - iocb->ki_left);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: fs/aio.c:666:
+		pr_debug("%ld retry: %d of %d (kick %ld, Q %ld run %ld, wake %ld)\n",
+			iocb->ki_retried,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#413: FILE: fs/aio.c:671:
+	if (!(retry = iocb->ki_retry)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: fs/aio.c:672:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_run_iocb', this function's name, in a string
#414: FILE: fs/aio.c:672:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearKicked>
#437: FILE: fs/aio.c:695:
+	kiocbClearKicked(iocb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: fs/aio.c:703:
+	iocb->ki_run_list.next = iocb->ki_run_list.prev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsCancelled>
#452: FILE: fs/aio.c:707:
+	if (kiocbIsCancelled(iocb)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: fs/aio.c:724:
+	BUG_ON(current->io_wait != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->io_wait"
#469: FILE: fs/aio.c:724:
+	BUG_ON(current->io_wait != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: fs/aio.c:730:
+ ^I^Iif (-EIOCBQUEUED != ret) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: fs/aio.c:730:
+ ^I^Iif (-EIOCBQUEUED != ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: fs/aio.c:730:
+ ^I^Iif (-EIOCBQUEUED != ret) {$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: fs/aio.c:731:
+			BUG_ON(!list_empty(&iocb->ki_wait.task_list));

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetKicked>
#487: FILE: fs/aio.c:741:
+			kiocbSetKicked(iocb);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#506: FILE: fs/aio.c:757:
+		 * has already been kicked */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsKicked>
#507: FILE: fs/aio.c:758:
+		if (kiocbIsKicked(iocb)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#507: FILE: fs/aio.c:758:
+		if (kiocbIsKicked(iocb)) {
+			__queue_kicked_iocb(iocb);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#516: FILE: fs/aio.c:767:
+ * ^IProcess all pending retries queued on the ioctx$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: fs/aio.c:768:
+ * ^Irun list.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: fs/aio.c:779:
+		iocb = list_entry(ctx->run_list.next, struct kiocb,
+			ki_run_list);

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: fs/aio.c:789:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: fs/aio.c:789:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: fs/aio.c:789:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: fs/aio.c:795:
+ * ^IProcess all pending retries queued on the ioctx$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#545: FILE: fs/aio.c:796:
+ * ^Irun list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: fs/aio.c:804:
+ ^Ispin_unlock_irq(&ctx->ctx_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: fs/aio.c:804:
+ ^Ispin_unlock_irq(&ctx->ctx_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/aio.c:804:
+ ^Ispin_unlock_irq(&ctx->ctx_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#558: FILE: fs/aio.c:809:
+ * ^IWork queue handler triggered to process pending$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#559: FILE: fs/aio.c:810:
+ * ^Iretries on an ioctx. Takes on the aio issuer's$

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: fs/aio.c:825:
+ ^Iunuse_mm(ctx->mm);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: fs/aio.c:825:
+ ^Iunuse_mm(ctx->mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: fs/aio.c:825:
+ ^Iunuse_mm(ctx->mm);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#579: FILE: fs/aio.c:830:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: fs/aio.c:838:
+ ^Istruct kioctx^I*ctx = iocb->ki_ctx;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: fs/aio.c:838:
+ ^Istruct kioctx^I*ctx = iocb->ki_ctx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: fs/aio.c:838:
+ ^Istruct kioctx^I*ctx = iocb->ki_ctx;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: fs/aio.c:866:
+^I        wake_up_process(iocb->ki_obj.tsk);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: fs/aio.c:966:
+	pr_debug("%ld retries: %d of %d (kicked %ld, Q %ld run %ld wake %ld)\n",
+		iocb->ki_retried,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#668: FILE: fs/aio.c:1076:
+^Iint ^I^I^Ievent_loop = 0; /* testing only */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#744: FILE: fs/aio.c:1291:
+	if ((ret == 0) || (iocb->ki_left == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#744: FILE: fs/aio.c:1291:
+	if ((ret == 0) || (iocb->ki_left == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#771: FILE: fs/aio.c:1318:
+	if ((ret == 0) || (iocb->ki_left == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#771: FILE: fs/aio.c:1318:
+	if ((ret == 0) || (iocb->ki_left == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#814: FILE: fs/aio.c:1361:
+		if (unlikely(!access_ok(VERIFY_WRITE, kiocb->ki_buf,
+			kiocb->ki_left)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: fs/aio.c:1373:
+		if (unlikely(!access_ok(VERIFY_READ, kiocb->ki_buf,
+			kiocb->ki_left)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#855: FILE: fs/aio.c:1402:
+ * ^Iwait queue callback function for aio notification,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#856: FILE: fs/aio.c:1403:
+ * ^ISimply triggers a retry of the operation via kick_iocb.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#858: FILE: fs/aio.c:1405:
+ * ^IThis callback is specified in the wait queue entry in$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: fs/aio.c:1408:
+ * ^Iinstead of a synchronous wait when an i/o blocking$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#871: FILE: fs/aio.c:1418:
+int aio_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#896: FILE: fs/aio.c:1474:
+	req->ki_left = req->ki_nbytes = iocb->aio_nbytes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#900: FILE: fs/aio.c:1478:
+	req->ki_run_list.next = req->ki_run_list.prev = NULL;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#987: FILE: include/linux/aio.h:55:
+	ssize_t			(*ki_retry)(struct kiocb *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: include/linux/aio.h:69:
+^Isize_t^I^I^Iki_nbytes; ^I/* copy of iocb->aio_nbytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#998: FILE: include/linux/aio.h:70:
+^Ichar ^I^I^I*ki_buf;^I/* remaining iocb->aio_buf */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#999: FILE: include/linux/aio.h:71:
+^Isize_t^I^I^Iki_left; ^I/* remaining bytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1001: FILE: include/linux/aio.h:73:
+^Ilong^I^I^Iki_retried; ^I/* just for testing */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1002: FILE: include/linux/aio.h:74:
+^Ilong^I^I^Iki_kicked; ^I/* just for testing */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1003: FILE: include/linux/aio.h:75:
+^Ilong^I^I^Iki_queued; ^I/* just for testing */$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1023: FILE: include/linux/aio.h:178:
+#define warn_if_async()	if (in_aio()) {\
+	printk(KERN_ERR "%s(%s:%d) called in async context!\n", \
+	__FUNCTION__, __FILE__, __LINE__); \
+	dump_stack(); \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1024: FILE: include/linux/aio.h:179:
+	printk(KERN_ERR "%s(%s:%d) called in async context!\n", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1025: FILE: include/linux/aio.h:180:
+	__FUNCTION__, __FILE__, __LINE__); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wait' - possible side-effects?
#1089: FILE: include/linux/wait.h:90:
+#define is_sync_wait(wait)	(!(wait) || ((wait)->task))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1118: FILE: kernel/fork.c:176:
+ ^I * queue an async wait queue callback$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1118: FILE: kernel/fork.c:176:
+ ^I * queue an async wait queue callback$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 43 warnings, 23 checks, 866 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
