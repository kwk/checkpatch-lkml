WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

WARNING:PATCH_PREFIX: patch prefix 'Makefile' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#62: FILE: Makefile:4:
+EXTRAVERSION =3D-shpte
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#63: FILE: Makefile:4:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#138: FILE: asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'm' should also have an identifier name
#138: FILE: asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: asm-generic/rmap.h:65:
+extern void pgtable_remove_rmap(struct page * page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: asm-generic/rmap.h:65:
+extern void pgtable_remove_rmap(struct page * page, struct mm_struct *mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'm' should also have an identifier name
#141: FILE: asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: asm-generic/rmap.h:67:
+extern void increment_rss(struct page *ptepage);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#163: FILE: asm-i386/pgalloc.h:21:
+static inline void pmd_populate_rdonly(struct mm_struct *mm, pmd_t *pmd, =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#166: FILE: asm-i386/pgalloc.h:24:
+			(unsigned long long) PAGE_SHIFT)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#186: FILE: asm-i386/pgtable.h:126:
+#define _PAGE_TABLE_RDONLY	(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED | =

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#199: FILE: asm-i386/pgtable.h:188:
+#define	pmd_bad(x)	((pmd_val(x) & (~PAGE_MASK & ~_PAGE_USER & ~_PAGE_RW)) =

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#213: FILE: asm-i386/pgtable.h:214:
+static inline pmd_t pmd_wrprotect(pmd_t pmd)	{ (pmd).pmd &=3D ~_PAGE_RW; =

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#213: FILE: asm-i386/pgtable.h:214:
+static inline pmd_t pmd_wrprotect(pmd_t pmd)	{ (pmd).pmd &=3D ~_PAGE_RW; =
                                             	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: asm-i386/pgtable.h:270:
+	((pte_t *)kmap_atomic(__page,KM_PTE0) + __pte_offset(address))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#227: FILE: asm-i386/pgtable.h:272:
+	((pte_t *)kmap_atomic(__page,KM_PTE1) + __pte_offset(address))
 	                            ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#281: FILE: fork.c:211:
+	pmd_t *prev_pmd =3D 0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#290: FILE: fork.c:274:
+		retval =3D share_page_range(mm, current->mm, tmp, &prev_pmd);
 		       ^

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#351: FILE: memory.c:108:
+	ptepage =3D pmd_page(*dir);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#356: FILE: memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#356: FILE: memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#356: FILE: memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#356: FILE: memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
+		dec_page_state(nr_page_table_pages);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#367: FILE: memory.c:154:
 }
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#407: FILE: memory.c:188:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#409: FILE: memory.c:190:
+	    (vma->vm_start <=3D ptepage->index) &&
 	                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: memory.c:191:
+	    (vma->vm_end >=3D (ptepage->index + PMD_SIZE))) {

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#410: FILE: memory.c:191:
+	    (vma->vm_end >=3D (ptepage->index + PMD_SIZE))) {
 	                 ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#443: FILE: memory.c:219:
+static pte_t *pte_unshare(struct mm_struct *mm, pmd_t *pmd, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#451: FILE: memory.c:227:
+	oldpage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#454: FILE: memory.c:230:
+	if (page_count(oldpage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#454: FILE: memory.c:230:
+	if (page_count(oldpage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#454: FILE: memory.c:230:
+	if (page_count(oldpage) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#463: FILE: memory.c:239:
+	newpage =3D pte_alloc_one(mm, address);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#474: FILE: memory.c:250:
+	tmppage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#475: FILE: memory.c:251:
+	if (oldpage !=3D tmppage) {
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#478: FILE: memory.c:254:
+		oldpage =3D tmppage;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#481: FILE: memory.c:257:
+	if (page_count(oldpage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#481: FILE: memory.c:257:
+	if (page_count(oldpage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#481: FILE: memory.c:257:
+	if (page_count(oldpage) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#488: FILE: memory.c:264:
+	base =3D addr =3D oldpage->index;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#488: FILE: memory.c:264:
+	base =3D addr =3D oldpage->index;
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#489: FILE: memory.c:265:
+	page_end =3D base + PMD_SIZE;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#490: FILE: memory.c:266:
+	vma =3D find_vma(mm, base);
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#491: FILE: memory.c:267:
+	if (!vma || (page_end <=3D vma->vm_start))
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: memory.c:268:
+^I^IBUG(); ^I^I/* No valid pages in this pte page */$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: memory.c:268:
+		BUG(); 		/* No valid pages in this pte page */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#494: FILE: memory.c:270:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#494: FILE: memory.c:270:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#494: FILE: memory.c:270:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#495: FILE: memory.c:271:
+	dst_ptb =3D pte_page_map(newpage, base);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#496: FILE: memory.c:272:
+	src_ptb =3D pte_page_map_nested(oldpage, base);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#499: FILE: memory.c:275:
+		addr =3D vma->vm_start;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#502: FILE: memory.c:278:
+		end =3D vma->vm_end;
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#504: FILE: memory.c:280:
+		end =3D page_end;
 		    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: memory.c:283:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#507: FILE: memory.c:283:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#507: FILE: memory.c:283:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#507: FILE: memory.c:283:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#509: FILE: memory.c:284:
+		pte_t *src_pte =3D src_ptb + __pte_offset(addr);
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#510: FILE: memory.c:285:
+		pte_t *dst_pte =3D dst_ptb + __pte_offset(addr);
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#513: FILE: memory.c:288:
+			pte_t pte =3D *src_pte;
 			          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#513: FILE: memory.c:288:
+			pte_t pte =3D *src_pte;
 			              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#524: FILE: memory.c:299:
+			page =3D pte_page(pte);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#528: FILE: memory.c:303:
+					pte =3D pte_wrprotect(pte);
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#536: FILE: memory.c:311:
+					pte =3D pte_mkclean(pte);
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#537: FILE: memory.c:312:
+				pte =3D pte_mkold(pte);
 				    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#545: FILE: memory.c:320:
+			addr +=3D PAGE_SIZE;
 			     ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#548: FILE: memory.c:323:
+		if (addr >=3D page_end)
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#551: FILE: memory.c:326:
+		vma =3D vma->vm_next;
 		    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#555: FILE: memory.c:330:
+		if (page_end <=3D vma->vm_start)
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#558: FILE: memory.c:333:
+		addr =3D vma->vm_start;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#560: FILE: memory.c:335:
+			end =3D vma->vm_end;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#562: FILE: memory.c:337:
+			end =3D page_end;
 			    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: memory.c:413:
+int share_page_range(struct mm_struct *dst, struct mm_struct *src,
+	struct vm_area_struct *vma, pmd_t **prev_pmd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: memory.c:419:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#657: FILE: memory.c:433:
+skip_share_pmd_range:	address =3D (address + PGDIR_SIZE) & PGDIR_MASK;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#657: FILE: memory.c:433:
+skip_share_pmd_range:	address =3D (address + PGDIR_SIZE) & PGDIR_MASK;
                      	        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#735: FILE: memory.c:463:
+			if (src_pmd !=3D *prev_pmd) {
 			            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#735: FILE: memory.c:463:
+			if (src_pmd !=3D *prev_pmd) {
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#739: FILE: memory.c:466:
+				*prev_pmd =3D src_pmd;
 				          ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#740: FILE: memory.c:467:
+				dst->rss +=3D ptepage->private;
 				         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#759: FILE: memory.c:469:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#759: FILE: memory.c:469:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;
                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#759: FILE: memory.c:469:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;
                      	        ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#760: FILE: memory.c:470:
+			if (address >=3D end)
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#801: FILE: memory.c:517:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#804: FILE: memory.c:520:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#804: FILE: memory.c:520:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#804: FILE: memory.c:520:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#804: FILE: memory.c:520:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#804: FILE: memory.c:520:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#807: FILE: memory.c:523:
+			tlb->mm->rss -=3D ptepage->private;
 			             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#812: FILE: memory.c:528:
+		ptep =3D pte_unshare(tlb->mm, pmd, address);
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#813: FILE: memory.c:529:
+		ptepage =3D pmd_page(*pmd);
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#815: FILE: memory.c:531:
+		ptep =3D pte_offset_map(pmd, address);
 		     ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#832: FILE: memory.c:652:
 }
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#832: FILE: memory.c:652:
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#834: FILE: memory.c:653:
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: memory.c:654:
+	pgd_t * dir;

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#837: FILE: memory.c:656:
+	if (address >=3D end)
 	            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: memory.c:657:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#839: FILE: memory.c:658:
+	dir =3D pgd_offset(mm, address);
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#842: FILE: memory.c:661:
+		address =3D (address + PGDIR_SIZE) & PGDIR_MASK;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#842: FILE: memory.c:661:
+		address =3D (address + PGDIR_SIZE) & PGDIR_MASK;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#853: FILE: memory.c:1211:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#881: FILE: memory.c:1245:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#912: FILE: memory.c:1396:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#928: FILE: memory.c:1412:
+			ptepage =3D pmd_page(*pmd);
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#946: FILE: memory.c:1436:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#978: FILE: memory.c:1480:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#995: FILE: memory.c:1494:
+		ptepage =3D pmd_page(*pmd);
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1024: FILE: memory.c:1542:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1041: FILE: memory.c:1572:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1086: FILE: memory.c:1684:
+		pte_t * pte;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1090: FILE: memory.c:1688:
+			pte =3D pte_unshare(mm, pmd, address);
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1092: FILE: memory.c:1690:
+			pte =3D pte_alloc_map(mm, pmd, address);
 			    ^

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1117: FILE: mmap.c:1249:
 }
+/*

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1132: FILE: mmap.c:1264:
+	int unmap_vma =3D mm->total_vm < UNMAP_THRESHOLD;
 	              ^

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1183: FILE: rmap.c:56:
 };
+static kmem_cache_t	*mm_chain_cache;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1191: FILE: rmap.c:110:
 }
+static inline struct mm_chain *mm_chain_alloc(void)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1195: FILE: rmap.c:114:
+	ret =3D kmem_cache_alloc(mm_chain_cache, GFP_ATOMIC);
 	    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: rmap.c:119:
+static void mm_chain_free(struct mm_chain *mc,
+		struct mm_chain *prev_mc, struct page *page)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1203: FILE: rmap.c:122:
+		prev_mc->next =3D mc->next;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1205: FILE: rmap.c:124:
+		page->pte.mmchain =3D mc->next;
 		                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1217: FILE: rmap.c:188:
 }
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1217: FILE: rmap.c:188:
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1217: FILE: rmap.c:188:
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1224: FILE: rmap.c:195:
+	extern int mem_init_done;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1230: FILE: rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1230: FILE: rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1230: FILE: rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: rmap.c:203:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1234: FILE: rmap.c:205:
+		mc =3D mm_chain_alloc();
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1235: FILE: rmap.c:206:
+		mc->mm =3D page->pte.mmdirect;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1236: FILE: rmap.c:207:
+		mc->next =3D NULL;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1237: FILE: rmap.c:208:
+		page->pte.mmchain =3D mc;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1242: FILE: rmap.c:213:
+		mc =3D mm_chain_alloc();
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1243: FILE: rmap.c:214:
+		mc->mm =3D mm;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1244: FILE: rmap.c:215:
+		mc->next =3D page->pte.mmchain;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1245: FILE: rmap.c:216:
+		page->pte.mmchain =3D mc;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1247: FILE: rmap.c:218:
+		page->pte.mmdirect =3D mm;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1249: FILE: rmap.c:220:
+		page->index =3D address & ~((PTRS_PER_PTE * PAGE_SIZE) - 1);
 		            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: rmap.c:224:
+void pgtable_remove_rmap_locked(struct page * page, struct mm_struct *mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1255: FILE: rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1255: FILE: rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1258: FILE: rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1258: FILE: rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1258: FILE: rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1262: FILE: rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {
 		                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1262: FILE: rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {
 		                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1262: FILE: rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1263: FILE: rmap.c:234:
+			page->pte.mmdirect =3D NULL;
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1265: FILE: rmap.c:236:
+			page->index =3D 0;
 			            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1270: FILE: rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1270: FILE: rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1270: FILE: rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);
 		                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1272: FILE: rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1272: FILE: rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1272: FILE: rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1273: FILE: rmap.c:244:
+			if (mc->mm =3D=3D mm) {
 			           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1273: FILE: rmap.c:244:
+			if (mc->mm =3D=3D mm) {
 			              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1273: FILE: rmap.c:244:
+			if (mc->mm =3D=3D mm) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1276: FILE: rmap.c:247:
+				mc =3D page->pte.mmchain;
 				   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1278: FILE: rmap.c:249:
+					page->pte.mmdirect =3D mc->mm;
 					                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1286: FILE: rmap.c:257:
+	BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1290: FILE: rmap.c:261:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1290: FILE: rmap.c:261:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: rmap.c:262:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,
+			     unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1298: FILE: rmap.c:269:
+void pgtable_remove_rmap(struct page * page, struct mm_struct *mm)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1321: FILE: rmap.c:313:
+			int count =3D 0;
 			          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1324: FILE: rmap.c:315:
+				for (i =3D 0; i < NRPTE; i++, count++) {
 				       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1328: FILE: rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {
 					           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1328: FILE: rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {
 					              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1328: FILE: rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1329: FILE: rmap.c:318:
+						printk(KERN_ERR "page_add_rmap: page %08lx (count %d), ptep %08lx, =

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1329: FILE: rmap.c:318:
+						printk(KERN_ERR "page_add_rmap: page %08lx (count %d), ptep %08lx, =

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1340: FILE: rmap.c:458:
 }
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1340: FILE: rmap.c:458:
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1342: FILE: rmap.c:459:
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1344: FILE: rmap.c:461:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1347: FILE: rmap.c:464:
+	vma =3D find_vma(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1349: FILE: rmap.c:466:
+		ret =3D SWAP_FAIL;
 		    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1354: FILE: rmap.c:471:
+	if (vma->vm_flags & VM_LOCKED) {
+		ret =3D SWAP_FAIL;
+	}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1355: FILE: rmap.c:472:
+		ret =3D SWAP_FAIL;
 		    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1361: FILE: rmap.c:478:
+static inline int pgtable_check_mlocked(struct page *ptepage, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1363: FILE: rmap.c:479:
+static inline int pgtable_check_mlocked(struct page *ptepage, unsigned =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1365: FILE: rmap.c:481:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1368: FILE: rmap.c:484:
+		ret =3D pgtable_check_mlocked_mm(ptepage->pte.mmdirect, address);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1372: FILE: rmap.c:488:
+	for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1372: FILE: rmap.c:488:
+	for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1374: FILE: rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1374: FILE: rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1374: FILE: rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1376: FILE: rmap.c:492:
+		ret =3D pgtable_check_mlocked_mm(mc->mm, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1377: FILE: rmap.c:493:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1386: FILE: rmap.c:501:
+static inline int pgtable_unmap_one_mm(struct mm_struct *mm, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1388: FILE: rmap.c:503:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1391: FILE: rmap.c:506:
+	vma =3D find_vma(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1393: FILE: rmap.c:508:
+		ret =3D SWAP_FAIL;
 		    ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1406: FILE: rmap.c:520:
+static inline int pgtable_unmap_one(struct page *ptepage, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1408: FILE: rmap.c:522:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1411: FILE: rmap.c:525:
+		ret =3D pgtable_unmap_one_mm(ptepage->pte.mmdirect, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1412: FILE: rmap.c:526:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1414: FILE: rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1414: FILE: rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	                                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1414: FILE: rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1414: FILE: rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1415: FILE: rmap.c:529:
+		ret =3D pgtable_unmap_one_mm(mc->mm, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1416: FILE: rmap.c:530:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1430: FILE: rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1430: FILE: rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)
 	                                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1430: FILE: rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1430: FILE: rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1447: FILE: rmap.c:570:
+	struct page *ptepage =3D kmap_atomic_to_page(ptep);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1448: FILE: rmap.c:571:
+	unsigned long address =3D ptep_to_address(ptep);
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1469: FILE: rmap.c:574:
+	ret =3D pgtable_check_mlocked(ptepage, address);
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1470: FILE: rmap.c:575:
+	if (ret !=3D SWAP_SUCCESS)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1473: FILE: rmap.c:577:
+	pte =3D ptep_get_and_clear(ptep);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1478: FILE: rmap.c:578:
+	ret =3D pgtable_unmap_one(ptepage, address);
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1479: FILE: rmap.c:579:
+	if (ret !=3D SWAP_SUCCESS) {
 	        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1514: FILE: rmap.c:715:
 {
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1515: FILE: rmap.c:716:
+	mm_chain_cache =3D kmem_cache_create(	"mm_chain",
 	               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1515: FILE: rmap.c:716:
+	mm_chain_cache =3D kmem_cache_create(	"mm_chain",

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1544: FILE: swapfile.c:374:
+	pte_t *dir, swp_entry_t entry, struct page* page, pmd_t *pmd)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1562: FILE: swapfile.c:411:
+		unuse_pte(vma, offset+address-vma->vm_start, pte, entry, page, dir);
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1562: FILE: swapfile.c:411:
+		unuse_pte(vma, offset+address-vma->vm_start, pte, entry, page, dir);
 		                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425317.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 189 errors, 38 warnings, 21 checks, 1420 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425317.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
