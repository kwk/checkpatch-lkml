ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#132: FILE: arch/mips/mm/cache.c:84:
+	if (pfn_valid(pfn) && (page = pfn_to_page(pfn), page_mapping(page)) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#163: FILE: arch/sparc64/kernel/smp.c:674:
+			     page_mapping(page) != NULL));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#166: FILE: arch/sparc64/kernel/smp.c:676:
+	if (page_mapping(page) != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#175: FILE: arch/sparc64/kernel/smp.c:697:
+			if (page_mapping(page) != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#184: FILE: arch/sparc64/kernel/smp.c:730:
+		if (page_mapping(page) != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#195: FILE: arch/sparc64/mm/init.c:142:
+			     page_mapping(page) != NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#198: FILE: arch/sparc64/mm/init.c:144:
+	if (page_mapping(page) != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#293: FILE: fs/buffer.c:2882:
+	if (mapping == NULL) {		/* can this still happen? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: include/asm-parisc/cacheflush.h:73:
+	if (page_mapping(page) && list_empty(&page->mapping->i_mmap) &&
 			list_empty(&page->mapping->i_mmap_shared)) {

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#360: FILE: include/linux/mm.h:406:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#360: FILE: include/linux/mm.h:406:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#360: FILE: include/linux/mm.h:406:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: mm/memory.c:421:
+					if (pte_young(pte) &&
+							page_mapping(page))

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#605: FILE: mm/page-writeback.c:536:
+ * just fall through and assume that it wants buffer_heads.

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#610: FILE: mm/page-writeback.c:541:
+	int (*spd)(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#617: FILE: mm/page-writeback.c:548:
+	return spd? (*spd)(page): __set_page_dirty_buffers(page);
 	          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#617: FILE: mm/page-writeback.c:548:
+	return spd? (*spd)(page): __set_page_dirty_buffers(page);
 	                        ^

CHECK:SPACING: No space is necessary after a cast
#742: FILE: mm/rmap.c:42:
+#define ANON_MAPPING_DEBUG	((struct address_space *) 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: mm/rmap.c:46:
+	BUG_ON(page->mapping != ANON_MAPPING_DEBUG);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: mm/rmap.c:610:
+		BUG_ON(!PageSwapCache(page));

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#947: FILE: mm/swap_state.c:24:
+static struct address_space_operations swap_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: mm/swap_state.c:64:
+static int __add_to_swap_cache(struct page *page,
+		swp_entry_t entry, int gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#987: FILE: mm/swap_state.c:68:
+	BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#988: FILE: mm/swap_state.c:69:
+	BUG_ON(PagePrivate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: mm/swap_state.c:75:
+		error = radix_tree_insert(&swapper_space.page_tree,
+						entry.val, page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#995: FILE: mm/swap_state.c:76:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1001: FILE: mm/swap_state.c:82:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1075: FILE: mm/swap_state.c:203:
+	BUG_ON(!PageSwapCache(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1197: FILE: mm/swap_state.c:335:
+		found_page = radix_tree_lookup(&swapper_space.page_tree,
+						entry.val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1233: FILE: mm/swapfile.c:359:
+			page = radix_tree_lookup(&swapper_space.page_tree,
+				entry.val);

CHECK:BRACES: Unbalanced braces around else statement
#1254: FILE: mm/swapfile.c:1012:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1313: FILE: mm/vmscan.c:295:
+		if (PageSwapCache(page))
[...]
+		else if (PageAnon(page)) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: mm/vmscan.c:369:
+					list_move(&page->list,
+						&mapping->locked_pages);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 8 warnings, 20 checks, 1140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
