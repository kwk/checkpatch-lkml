WARNING:REPEATED_WORD: Possible repeated word: 'proto'
#54: 
   family proto proto addr port

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#122: FILE: fs/nfsd/nfsctl.c:107:
+static ssize_t nfsctl_transaction_read(struct file *file, char __user *buf, size_t size, loff_t *pos)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#124: FILE: fs/nfsd/nfsctl.c:109:
+	if (! file->private_data) {
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: fs/nfsd/nfsctl.c:115:
+		ssize_t rv = nfsctl_transaction_write(file, buf, 0, pos);
+		if (rv < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BAD_SIGN_OFF: Duplicate signature
#154: 
Signed-off-by: Neil Brown <neilb@suse.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#223: FILE: fs/nfsd/nfsctl.c:364:
+	if (size>0) {
 	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#226: FILE: fs/nfsd/nfsctl.c:367:
+		if (buf[size-1] != '\n')
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#228: FILE: fs/nfsd/nfsctl.c:369:
+		buf[size-1] = 0;
 		        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#232: FILE: fs/nfsd/nfsctl.c:373:
+		if (len <= 0) return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: fs/nfsd/nfsctl.c:377:
+				num = simple_strtol((vers+1), NULL, 0);
 				                         ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#236: FILE: fs/nfsd/nfsctl.c:377:
+				num = simple_strtol((vers+1), NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#238: FILE: fs/nfsd/nfsctl.c:379:
+				num = simple_strtol(vers, NULL, 0);

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: fs/nfsd/nfsctl.c:380:
+			switch(num) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#257: FILE: fs/nfsd/nfsctl.c:398:
+		if ((nfsd_versbits & NFSCTL_VERALL)==0)
 		                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#263: FILE: fs/nfsd/nfsctl.c:404:
+	for (num=2 ; num <= 4 ; num++)
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: fs/nfsd/nfsctl.c:406:
+			len += sprintf(buf+len, "%s%c%d", sep,
 			                  ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#266: FILE: fs/nfsd/nfsctl.c:407:
+				       NFSCTL_VERISSET(nfsd_versbits, num)?'+':'-',
 				                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#266: FILE: fs/nfsd/nfsctl.c:407:
+				       NFSCTL_VERISSET(nfsd_versbits, num)?'+':'-',
 				                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#270: FILE: fs/nfsd/nfsctl.c:411:
+	len += sprintf(buf+len, "\n");
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: fs/nfsd/nfsctl.c:479:
+		[NFSD_Versions] = {"versions", &transaction_ops, S_IWUSR|S_IRUSR},
 		                                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUSR' are not preferred. Consider using octal permissions '0600'.
#281: FILE: fs/nfsd/nfsctl.c:479:
+		[NFSD_Versions] = {"versions", &transaction_ops, S_IWUSR|S_IRUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: fs/nfsd/nfssvc.c:56:
+       struct svc_serv ^I^I*nfsd_serv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: fs/nfsd/nfssvc.c:56:
+       struct svc_serv ^I^I*nfsd_serv;$

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#310: FILE: fs/nfsd/nfssvc.c:67:
+static struct svc_version *	nfsd_version[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: fs/nfsd/nfssvc.c:77:
+#define NFSD_MINVERS    ^I2$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(nfsd_version)
#321: FILE: fs/nfsd/nfssvc.c:78:
+#define NFSD_NRVERS		(sizeof(nfsd_version)/sizeof(nfsd_version[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#321: FILE: fs/nfsd/nfssvc.c:78:
+#define NFSD_NRVERS		(sizeof(nfsd_version)/sizeof(nfsd_version[0]))
                    		                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#366: FILE: fs/nfsd/nfssvc.c:138:
+			if (NFSCTL_VERISSET(nfsd_versbits, i)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#369: FILE: fs/nfsd/nfssvc.c:141:
+			} else

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 16 warnings, 11 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
