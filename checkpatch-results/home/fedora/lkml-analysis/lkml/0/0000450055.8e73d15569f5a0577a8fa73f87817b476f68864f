WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
- Unify the do_request method for disk devices. This saves quite a lot of code.

CHECK:BRACES: Unbalanced braces around else statement
#170: FILE: drivers/ide/ide.c:705:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#211: FILE: drivers/ide/ide-disk.c:116:
+	} else {
+

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#212: FILE: drivers/ide/ide-disk.c:117:
+		//	printk("Read: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: drivers/ide/ide-disk.c:353:
+static ide_startstop_t __do_request(struct ata_device *drive,
+		struct ata_taskfile *ar, struct request *rq)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: drivers/ide/ide-disk.c:358:
+	 * FIXME: why not?! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#445: FILE: drivers/ide/ide-disk.c:366:
+	if ((id->command_set_2 & 0x0400) && (id->cfs_enable_2 & 0x0400) &&
+	    (drive->addressing == 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/ide/ide-disk.c:373:
+	OUT_BYTE((ar->taskfile.device_head & (drive->addressing ? 0xE0 : 0xEF)) | drive->select.all,
+			IDE_SELECT_REG);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/ide/ide-disk.c:400:
+			if (ata_status_poll(drive, DATA_READY, drive->bad_wstat,
+						WAIT_DRQ, rq, &startstop)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#488: FILE: drivers/ide/ide-disk.c:401:
+				printk(KERN_ERR "%s: no DRQ after issuing %s\n",

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#489: FILE: drivers/ide/ide-disk.c:402:
+						drive->name, drive->mult_count ? "MULTWRITE" : "WRITE");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/ide/ide-disk.c:402:
+				printk(KERN_ERR "%s: no DRQ after issuing %s\n",
+						drive->name, drive->mult_count ? "MULTWRITE" : "WRITE");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#525: FILE: drivers/ide/ide-disk.c:423:
+				return ide_started;
+			} else {

WARNING:TYPO_SPELLING: 'driectly' may be misspelled - perhaps 'directly'?
#533: FILE: drivers/ide/ide-disk.c:430:
+				 * handler driectly therafter.
 				           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#543: FILE: drivers/ide/ide-disk.c:440:
+				if (!drive_is_ready(drive)) {
+					printk(KERN_ERR "DISASTER WAITING TO HAPPEN!\n");
+				}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#544: FILE: drivers/ide/ide-disk.c:441:
+					printk(KERN_ERR "DISASTER WAITING TO HAPPEN!\n");

CHECK:BRACES: Unbalanced braces around else statement
#603: FILE: drivers/ide/ide-disk.c:475:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#604: FILE: drivers/ide/ide-disk.c:476:
+			printk(KERN_ERR "%s: unknown command %x\n", __FUNCTION__, ar->cmd);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#604: FILE: drivers/ide/ide-disk.c:476:
+			printk(KERN_ERR "%s: unknown command %x\n", __FUNCTION__, ar->cmd);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing'
#644: FILE: drivers/ide/ide-disk.c:536:
+	if ((drive->id->cfs_enable_2 & 0x0400) && (drive->addressing)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#676: FILE: drivers/ide/ide-disk.c:568:
+		if (blk_rq_tagged(rq)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#679: FILE: drivers/ide/ide-disk.c:571:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#696: FILE: drivers/ide/ide-disk.c:588:
+		if (blk_rq_tagged(rq)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#699: FILE: drivers/ide/ide-disk.c:591:
+		} else

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#704: FILE: drivers/ide/ide-disk.c:596:
+		args.taskfile.high_cylinder = (cyl>>8);
 		                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#770: FILE: drivers/ide/ide-disk.c:662:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#772: FILE: drivers/ide/ide-disk.c:664:
+	printk("%s: %sing: ", drive->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: drivers/ide/ide-disk.c:665:
+	printk("%s: %sing: ", drive->name,
+			(rq_data_dir(rq)==READ) ? "read" : "writ");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#773: FILE: drivers/ide/ide-disk.c:665:
+			(rq_data_dir(rq)==READ) ? "read" : "writ");
 			                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#774: FILE: drivers/ide/ide-disk.c:666:
+	if (lba)	printk("LBAsect=%lld, ", block);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#774: FILE: drivers/ide/ide-disk.c:666:
+	if (lba)	printk("LBAsect=%lld, ", block);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#775: FILE: drivers/ide/ide-disk.c:667:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#775: FILE: drivers/ide/ide-disk.c:667:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#776: FILE: drivers/ide/ide-disk.c:668:
+	printk("sectors=%ld, ", rq->nr_sectors);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#777: FILE: drivers/ide/ide-disk.c:669:
+	printk("buffer=%p\n", rq->buffer);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1287: FILE: include/linux/ide.h:462:
+	void (*udma_start) (struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1287: FILE: include/linux/ide.h:462:
+	void (*udma_start) (struct ata_device *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1287: FILE: include/linux/ide.h:462:
+	void (*udma_start) (struct ata_device *, struct request *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1290: FILE: include/linux/ide.h:464:
+	int (*udma_init) (struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1290: FILE: include/linux/ide.h:464:
+	int (*udma_init) (struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1290: FILE: include/linux/ide.h:464:
+	int (*udma_init) (struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1299: FILE: include/linux/ide.h:654:
+	ide_startstop_t (*XXX_handler)(struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1299: FILE: include/linux/ide.h:654:
+	ide_startstop_t (*XXX_handler)(struct ata_device *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1337: FILE: include/linux/ide.h:802:
+extern ide_startstop_t udma_tcq_init(struct ata_device *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1337: FILE: include/linux/ide.h:802:
+extern ide_startstop_t udma_tcq_init(struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1337: FILE: include/linux/ide.h:802:
+extern ide_startstop_t udma_tcq_init(struct ata_device *, struct request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450055.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 26 warnings, 17 checks, 1165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450055.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
