WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#345: FILE: arch/ppc64/kernel/pSeries_reconfig.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#365: FILE: arch/ppc64/kernel/pSeries_reconfig.c:21:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: arch/ppc64/kernel/pSeries_reconfig.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#409: FILE: arch/ppc64/kernel/pSeries_reconfig.c:65:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#414: FILE: arch/ppc64/kernel/pSeries_reconfig.c:70:
+	return;
+}

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#439: FILE: arch/ppc64/kernel/pSeries_reconfig.c:95:
+		strlcpy(parent_path, path, parent_path_len);

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_reconfig_chain>
#449: FILE: arch/ppc64/kernel/pSeries_reconfig.c:105:
+static struct notifier_block *pSeries_reconfig_chain;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_reconfig_notifier_register>
#451: FILE: arch/ppc64/kernel/pSeries_reconfig.c:107:
+int pSeries_reconfig_notifier_register(struct notifier_block *nb)

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_reconfig_notifier_unregister>
#456: FILE: arch/ppc64/kernel/pSeries_reconfig.c:112:
+void pSeries_reconfig_notifier_unregister(struct notifier_block *nb)

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_reconfig_add_node>
#461: FILE: arch/ppc64/kernel/pSeries_reconfig.c:117:
+static int pSeries_reconfig_add_node(const char *path, struct property *proplist)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: arch/ppc64/kernel/pSeries_reconfig.c:145:
+		printk(KERN_ERR "Failed to add device node %s\n", path);

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_reconfig_remove_node>
#521: FILE: arch/ppc64/kernel/pSeries_reconfig.c:177:
+static int pSeries_reconfig_remove_node(struct device_node *np)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#529: FILE: arch/ppc64/kernel/pSeries_reconfig.c:185:
+	if ((child = of_get_next_child(np, NULL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: arch/ppc64/kernel/pSeries_reconfig.c:212:
+	struct property *next;
+	for (; prop; prop = next) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#563: FILE: arch/ppc64/kernel/pSeries_reconfig.c:219:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#577: FILE: arch/ppc64/kernel/pSeries_reconfig.c:233:
+static char * parse_next_property(char *buf, char *end, char **name, int *length,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#586: FILE: arch/ppc64/kernel/pSeries_reconfig.c:242:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#587: FILE: arch/ppc64/kernel/pSeries_reconfig.c:243:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#593: FILE: arch/ppc64/kernel/pSeries_reconfig.c:249:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#594: FILE: arch/ppc64/kernel/pSeries_reconfig.c:250:
+		       __FUNCTION__, __LINE__);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#600: FILE: arch/ppc64/kernel/pSeries_reconfig.c:256:
+	*length = simple_strtoul(tmp, &tmp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: arch/ppc64/kernel/pSeries_reconfig.c:258:
+^I^Iprintk(KERN_ERR "property parse failed in %s at line %d\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#602: FILE: arch/ppc64/kernel/pSeries_reconfig.c:258:
+		printk(KERN_ERR "property parse failed in %s at line %d\n", 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#603: FILE: arch/ppc64/kernel/pSeries_reconfig.c:259:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#607: FILE: arch/ppc64/kernel/pSeries_reconfig.c:263:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#608: FILE: arch/ppc64/kernel/pSeries_reconfig.c:264:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#616: FILE: arch/ppc64/kernel/pSeries_reconfig.c:272:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#617: FILE: arch/ppc64/kernel/pSeries_reconfig.c:273:
+		       __FUNCTION__, __LINE__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#620: FILE: arch/ppc64/kernel/pSeries_reconfig.c:276:
+	}
+	else if (tmp < end && *tmp != ' ' && *tmp != '\0') {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#621: FILE: arch/ppc64/kernel/pSeries_reconfig.c:277:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#622: FILE: arch/ppc64/kernel/pSeries_reconfig.c:278:
+		       __FUNCTION__, __LINE__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#640: FILE: arch/ppc64/kernel/pSeries_reconfig.c:296:
+	if (!(new->name = kmalloc(strlen(name) + 1, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#642: FILE: arch/ppc64/kernel/pSeries_reconfig.c:298:
+	if (!(new->value = kmalloc(length + 1, GFP_KERNEL)))

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#654: FILE: arch/ppc64/kernel/pSeries_reconfig.c:310:
+	if (new->name)
+		kfree(new->name);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#656: FILE: arch/ppc64/kernel/pSeries_reconfig.c:312:
+	if (new->value)
+		kfree(new->value);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#666: FILE: arch/ppc64/kernel/pSeries_reconfig.c:322:
+	unsigned char* value;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#677: FILE: arch/ppc64/kernel/pSeries_reconfig.c:333:
+	if ((np = of_find_node_by_path(path))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#712: FILE: arch/ppc64/kernel/pSeries_reconfig.c:368:
+	if ((node = of_find_node_by_path(buf)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#738: FILE: arch/ppc64/kernel/pSeries_reconfig.c:394:
+	if (!(kbuf = kmalloc(count + 1, GFP_KERNEL))) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#768: FILE: arch/ppc64/kernel/pSeries_reconfig.c:424:
+static struct file_operations ofdt_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#780: FILE: arch/ppc64/kernel/pSeries_reconfig.c:436:
+	ent = create_proc_entry("ppc64/ofdt", S_IWUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#790: FILE: arch/ppc64/kernel/pSeries_reconfig.c:446:
+__initcall(proc_ppc64_create_ofdt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1012: FILE: include/asm-ppc64/prom.h:212:
+extern void of_attach_node(struct device_node *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#1012: FILE: include/asm-ppc64/prom.h:212:
+extern void of_attach_node(struct device_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1013: FILE: include/asm-ppc64/prom.h:213:
+extern void of_detach_node(const struct device_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct device_node *' should also have an identifier name
#1013: FILE: include/asm-ppc64/prom.h:213:
+extern void of_detach_node(const struct device_node *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1022: FILE: include/asm-ppc64/pSeries_reconfig.h:1:
+#ifndef _PPC64_PSERIES_RECONFIG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1036: FILE: include/asm-ppc64/pSeries_reconfig.h:15:
+extern int pSeries_reconfig_notifier_register(struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1037: FILE: include/asm-ppc64/pSeries_reconfig.h:16:
+extern void pSeries_reconfig_notifier_unregister(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#1037: FILE: include/asm-ppc64/pSeries_reconfig.h:16:
+extern void pSeries_reconfig_notifier_unregister(struct notifier_block *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1043: FILE: include/asm-ppc64/pSeries_reconfig.h:22:
+}
+static inline void pSeries_reconfig_notifier_unregister(struct notifier_block *nb) { }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198224.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 28 warnings, 13 checks, 724 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198224.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
