ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#59: 
--- a/include/net/arp.h	Sun Oct 13 04:52:41 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#65: FILE: include/net/arp.h:21:
+extern unsigned arp_state_to_flags(struct neighbour *neigh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/net/arp.h:21:
+extern unsigned arp_state_to_flags(struct neighbour *neigh);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#103: FILE: net/ipv4/arp.c:922:
+unsigned arp_state_to_flags(struct neighbour *neigh)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#295: FILE: net/ipv4/ip_proc.c:34:
+/*
+ *	ax25 -> ASCII conversion

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#305: FILE: net/ipv4/ip_proc.c:44:
+		if (c != ' ') *s++ = c;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: net/ipv4/ip_proc.c:46:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#310: FILE: net/ipv4/ip_proc.c:49:
+	if ((n = ((a->ax25_call[6] >> 1) & 0x0F)) > 9) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: net/ipv4/ip_proc.c:53:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#318: FILE: net/ipv4/ip_proc.c:57:
+	if (*buf == '\0' || *buf == '-')
+	   return "*";

WARNING:TABSTOP: Statements should start on a tabstop
#319: FILE: net/ipv4/ip_proc.c:58:
+	   return "*";

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#323: FILE: net/ipv4/ip_proc.c:62:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INLINE: plain inline is preferred over __inline__
#344: FILE: net/ipv4/ip_proc.c:83:
+static __inline__ void arp_format_neigh_table(struct seq_file *seq, int entry)

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#347: FILE: net/ipv4/ip_proc.c:86:
+	const char hexbuf[] = "0123456789ABCDEF";

CHECK:BRACES: braces {} should be used on all arms of this statement
#364: FILE: net/ipv4/ip_proc.c:103:
+		if (hatype == ARPHRD_AX25 || hatype == ARPHRD_NETROM)
[...]
+		else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#366: FILE: net/ipv4/ip_proc.c:105:
+		else {
[...]
+		for (k = 0, j = 0; k < HBUFFERLEN - 3 &&

CHECK:BRACES: Unbalanced braces around else statement
#366: FILE: net/ipv4/ip_proc.c:105:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: net/ipv4/ip_proc.c:108:
+		for (k = 0, j = 0; k < HBUFFERLEN - 3 &&
+				   j < dev->addr_len; j++) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#379: FILE: net/ipv4/ip_proc.c:118:
+			NIPQUAD(*(u32*)n->primary_key));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#381: FILE: net/ipv4/ip_proc.c:120:
+		seq_printf(seq, "%-16s 0x%-10x0x%-10x%s"
+				"     *        %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: net/ipv4/ip_proc.c:121:
+^I^I^I   tbuf, hatype, arp_state_to_flags(n), $

WARNING:INLINE: plain inline is preferred over __inline__
#389: FILE: net/ipv4/ip_proc.c:128:
+static __inline__ void arp_format_pneigh_table(struct seq_file *seq, int entry)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#398: FILE: net/ipv4/ip_proc.c:137:
+		sprintf(tbuf, "%u.%u.%u.%u", NIPQUAD(*(u32*)n->key));

WARNING:SPLIT_STRING: quoted string split across lines
#400: FILE: net/ipv4/ip_proc.c:139:
+		seq_printf(seq, "%-16s 0x%-10x0x%-10x%s"
+				"     *        %s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#413: FILE: net/ipv4/ip_proc.c:152:
+		seq_puts(seq, "IP address       HW type     Flags       "
+			      "HW address            Mask     Device\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#423: FILE: net/ipv4/ip_proc.c:162:
+struct seq_operations arp_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#435: FILE: net/ipv4/ip_proc.c:174:
+static struct file_operations arp_seq_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#453: FILE: net/ipv4/ip_proc.c:204:
+	p = create_proc_entry("arp", S_IRUGO, proc_net);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 15 warnings, 5 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
