WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
By "this allocator" do you mean the algorithm that generates a unique serial

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: include/linux/key.h:1:
+/* key.h: authentication token and access key management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#262: FILE: include/linux/key.h:19:
+#include <asm/atomic.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#269: FILE: include/linux/key.h:26:
+typedef int32_t key_serial_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#300: FILE: include/linux/key.h:57:
+	unsigned		magic;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/key.h:86:
+extern int register_key_type(struct key_type *ktype);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/key.h:87:
+extern void unregister_key_type(struct key_type *ktype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/key.h:89:
+extern void key_retire(struct key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/key.h:90:
+extern void key_put(struct key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/key.h:92:
+extern int add_process_key(int specifier,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: include/linux/key.h:98:
+extern int keyring_search(struct key *keyring,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#353: FILE: include/linux/key.h:110:
+extern int search_process_keyrings(unsigned search_mask,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/linux/key.h:110:
+extern int search_process_keyrings(unsigned search_mask,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: include/linux/key.h:116:
+extern int alloc_uid_keyring(struct user_struct *user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: include/linux/key.h:117:
+extern int copy_keys(unsigned long clone_flags, struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: include/linux/key.h:118:
+extern void exit_keys(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: include/linux/key.h:119:
+extern int suid_keys(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: include/linux/key.h:120:
+extern int exec_keys(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: include/linux/key.h:121:
+extern long get_process_keyring_ID(int specifier);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/key.h:122:
+extern long clear_process_keyring(int specifier);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: include/linux/key.h:123:
+extern long new_session_keyring(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/key.h:124:
+extern long add_user_key(int specifier,

ERROR:SPACING: space required before the open parenthesis '('
#374: FILE: include/linux/key.h:131:
+#define key_put(k)			do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: include/linux/key.h:133:
+#define copy_keys(f,t)			0
                    ^

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: include/linux/key.h:134:
+#define exit_keys(t)			do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: include/linux/key.h:140:
+#define add_user_key(s,t,d,p)		(-EINVAL)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: include/linux/key.h:140:
+#define add_user_key(s,t,d,p)		(-EINVAL)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: include/linux/key.h:140:
+#define add_user_key(s,t,d,p)		(-EINVAL)
                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#469: FILE: kernel/fork.c:888:
+	if ((retval = copy_keys(clone_flags, p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#471: FILE: kernel/fork.c:890:
+	if ((retval = copy_namespace(clone_flags, p)))

CHECK:SPACING: No space is necessary after a cast
#511: FILE: kernel/sys.c:1432:
+					     (char __user *) arg3,

CHECK:SPACING: No space is necessary after a cast
#512: FILE: kernel/sys.c:1433:
+					     (char __user *) arg4,

CHECK:SPACING: No space is necessary after a cast
#513: FILE: kernel/sys.c:1434:
+					     (void __user *) arg5);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#600: FILE: security/keys/internal.h:1:
+/* internal.h: authentication token and access key management internal defs

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#623: FILE: security/keys/internal.h:24:
+	unsigned		maxkeys;	/* max keys this list can hold */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#624: FILE: security/keys/internal.h:25:
+	unsigned		nkeys;		/* number of keys this list currently holds */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: security/keys/internal.h:47:
+extern int key_alloc(struct key_type *type, struct key **_key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: security/keys/internal.h:48:
+extern int keyring_alloc(struct key *source, struct key **_key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: security/keys/internal.h:50:
+extern int __keyring_add_key(struct key *keyring, struct key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: security/keys/internal.h:52:
+extern int keyring_set_name(struct key *keyring, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#652: FILE: security/keys/internal.h:53:
+__attribute__((format(printf, 2, 3)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: security/keys/internal.h:55:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#658: FILE: security/keys/internal.h:59:
+	printk("__key_validate: key %p {%08x} should be {%08x}\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__key_validate', this function's name, in a string
#658: FILE: security/keys/internal.h:59:
+	printk("__key_validate: key %p {%08x} should be {%08x}\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: security/keys/internal.h:61:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#679: FILE: security/keys/key.c:1:
+/* key.c: authentication token and access key management

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#786: FILE: security/keys/key.c:108:
+	 * that point looking for the next unused serial number */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#843: FILE: security/keys/key.c:165:
+EXPORT_SYMBOL(key_put);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#860: FILE: security/keys/key.c:182:
+EXPORT_SYMBOL(key_retire);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#871: FILE: security/keys/key.c:193:
+	unsigned max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#886: FILE: security/keys/key.c:208:
+		const unsigned limit =

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#892: FILE: security/keys/key.c:214:
+			BUG_ON(max > limit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#925: FILE: security/keys/key.c:247:
+EXPORT_SYMBOL(keyring_alloc);

WARNING:INDENTED_LABEL: labels should not be indented
#989: FILE: security/keys/key.c:311:
+	next:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1018: FILE: security/keys/key.c:340:
+EXPORT_SYMBOL(keyring_search);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1027: FILE: security/keys/key.c:349:
+	unsigned max;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1072: FILE: security/keys/key.c:394:
+	if (klist)
+		kfree(klist);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1095: FILE: security/keys/key.c:417:
+EXPORT_SYMBOL(keyring_add_key);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1133: FILE: security/keys/key.c:455:
+EXPORT_SYMBOL(keyring_set_name);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1191: FILE: security/keys/key.c:513:
+	if (kname) {
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1194: FILE: security/keys/key.c:516:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1194: FILE: security/keys/key.c:516:
+	else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1231: FILE: security/keys/key.c:553:
+EXPORT_SYMBOL(register_key_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1246: FILE: security/keys/key.c:568:
+EXPORT_SYMBOL(unregister_key_type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1286: FILE: security/keys/proc.c:1:
+/* proc.c: proc files for key database enumeration

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1313: FILE: security/keys/proc.c:28:
+static struct seq_operations proc_keys_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1320: FILE: security/keys/proc.c:35:
+static struct file_operations proc_keys_fops = {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1335: FILE: security/keys/proc.c:50:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1356: FILE: security/keys/proc.c:71:
+	return rb_next((struct rb_node *) v);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1404: FILE: security/keys/proc.c:119:
+__initcall(key_proc_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1409: FILE: security/keys/process_keys.c:1:
+/* process_keys.c: management of process keyrings

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1429: FILE: security/keys/process_keys.c:21:
+#include <asm/uaccess.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1742: FILE: security/keys/process_keys.c:334:
+EXPORT_SYMBOL(add_process_key);

CHECK:SPACING: No space is necessary after a cast
#1778: FILE: security/keys/process_keys.c:370:
+	ret = get_user(plen, (uint16_t *) _payload);

CHECK:SPACING: No space is necessary after a cast
#1788: FILE: security/keys/process_keys.c:380:
+	payload = (void *) get_zeroed_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1799: FILE: security/keys/process_keys.c:391:
+	free_page((unsigned long) payload);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1824: FILE: security/keys/process_keys.c:416:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1824: FILE: security/keys/process_keys.c:416:
+		else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1877: FILE: security/keys/process_keys.c:469:
+int search_process_keyrings(unsigned search_mask,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338726.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 37 warnings, 32 checks, 1644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338726.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
