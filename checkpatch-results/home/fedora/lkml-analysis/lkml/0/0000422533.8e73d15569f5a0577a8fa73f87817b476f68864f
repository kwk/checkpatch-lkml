ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#53: 
--- a/drivers/scsi/hosts.c	Wed Oct 16 22:51:48 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: drivers/scsi/hosts.c:54:
+struct Scsi_Device_Template * scsi_devicelist;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device_Template>
#102: FILE: drivers/scsi/hosts.c:54:
+struct Scsi_Device_Template * scsi_devicelist;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: drivers/scsi/hosts.c:65:
+ * ^I0 on Success / 1 on Failure$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#118: FILE: drivers/scsi/hosts.c:67:
+int scsi_tp_for_each_host(Scsi_Host_Template *shost_tp, int
+			    (*callback)(struct Scsi_Host *shost))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#118: FILE: drivers/scsi/hosts.c:67:
+int scsi_tp_for_each_host(Scsi_Host_Template *shost_tp, int

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#119: FILE: drivers/scsi/hosts.c:68:
+			    (*callback)(struct Scsi_Host *shost))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: drivers/scsi/hosts.c:91:
+ * @shost: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: drivers/scsi/hosts.c:92:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: drivers/scsi/hosts.c:94:
+ * ^IThis is the default case for the release function.  It should do$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: drivers/scsi/hosts.c:95:
+ * ^Ithe right thing for most correctly written host adapters.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: drivers/scsi/hosts.c:112:
+ * ^I0 on Success / 1 on Failure$

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#184: FILE: drivers/scsi/hosts.c:117:
+	Scsi_Device *sdev;

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#186: FILE: drivers/scsi/hosts.c:119:
+	Scsi_Cmnd *scmd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/scsi/hosts.c:132:
+^Ifor (sdev = shost->host_queue; sdev; sdev = sdev->next) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#211: FILE: drivers/scsi/hosts.c:144:
+				printk(KERN_ERR "SCSI device not inactive"

WARNING:SPLIT_STRING: quoted string split across lines
#212: FILE: drivers/scsi/hosts.c:145:
+				printk(KERN_ERR "SCSI device not inactive"
+				       "- rq_status=%d, target=%d, pid=%ld,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#213: FILE: drivers/scsi/hosts.c:146:
+				       "- rq_status=%d, target=%d, pid=%ld,"
+				       "state=%d, owner=%d.\n",

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#221: FILE: drivers/scsi/hosts.c:154:
+						if (scmd->request->rq_status ==

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#225: FILE: drivers/scsi/hosts.c:158:
+				printk(KERN_ERR "Device busy???\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#236: FILE: drivers/scsi/hosts.c:169:
+					RQ_SCSI_DISCONNECTING;	/* Mark as
+								   busy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#236: FILE: drivers/scsi/hosts.c:169:
+								   busy */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: drivers/scsi/hosts.c:185:
+			printk(KERN_ERR "Attached usage count = %d\n",

ERROR:SPACING: spaces required around that '>' (ctx:OxV)
#302: FILE: drivers/scsi/hosts.c:190:
+		if (shost-->hostt->slave_detach)
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#318: FILE: drivers/scsi/hosts.c:206:
+		if (sdev->inquiry)
+			kfree(sdev->inquiry);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#324: FILE: drivers/scsi/hosts.c:212:
+	if (shost->hostt->release)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#326: FILE: drivers/scsi/hosts.c:214:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Name>
#343: FILE: drivers/scsi/hosts.c:231:
+	Scsi_Host_Name *shost_name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: drivers/scsi/hosts.c:250:
+		DECLARE_MUTEX_LOCKED(sem);
+		shost->eh_notify = &sem;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: drivers/scsi/hosts.c:275:
+ * ^IPointer to a new Scsi_Host_Name$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#397: FILE: drivers/scsi/hosts.c:285:
+		printk(KERN_ERR "%s: out of memory at line %d.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#398: FILE: drivers/scsi/hosts.c:286:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#404: FILE: drivers/scsi/hosts.c:292:
+		printk(KERN_ERR "%s: out of memory at line %d.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#405: FILE: drivers/scsi/hosts.c:293:
+		       __FUNCTION__, __LINE__);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: drivers/scsi/hosts.c:313:
+ * ^IWe call this when we come across a new host adapter. We only do$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: drivers/scsi/hosts.c:314:
+ * ^Ithis once we are 100% sure that we want to use this host adapter -$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: drivers/scsi/hosts.c:315:
+ * ^Iit is a pain to reverse this, so we try to avoid it $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#427: FILE: drivers/scsi/hosts.c:315:
+ * ^Iit is a pain to reverse this, so we try to avoid it $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: drivers/scsi/hosts.c:318:
+ * ^IPointer to a new Scsi_Host$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#434: FILE: drivers/scsi/hosts.c:321:
+struct Scsi_Host * scsi_register(Scsi_Host_Template *shost_tp, int xtr_bytes)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*shost)...) over kmalloc(sizeof(struct Scsi_Host)...)
#533: FILE: drivers/scsi/hosts.c:336:
+	shost = kmalloc(sizeof(struct Scsi_Host) + xtr_bytes, gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#535: FILE: drivers/scsi/hosts.c:338:
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#535: FILE: drivers/scsi/hosts.c:338:
+	if (!shost) {
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#535: FILE: drivers/scsi/hosts.c:338:
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: drivers/scsi/hosts.c:375:
+	atomic_set(&shost->host_active,0);
 	                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#598: FILE: drivers/scsi/hosts.c:397:
+	printk("%s: %x %x: %d\n", __FUNCTION_ (int)shost,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#598: FILE: drivers/scsi/hosts.c:397:
+	printk("%s: %x %x: %d\n", __FUNCTION_ (int)shost,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#634: FILE: drivers/scsi/hosts.c:411:
+	if (!blk_nohighio)
+	shost->highmem_io = shost_tp->highmem_io;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#666: FILE: drivers/scsi/hosts.c:443:
+		DEVICE_NAME_SIZE-1);
 		                ^

CHECK:SPACING: No space is necessary after a cast
#671: FILE: drivers/scsi/hosts.c:448:
+	kernel_thread((int (*)(void *)) scsi_error_handler, (void *) shost, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: drivers/scsi/hosts.c:461:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#690: FILE: drivers/scsi/hosts.c:467:
+ * ^I0 on Success / 1 on Failure.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#733: FILE: drivers/scsi/hosts.c:510:
+				printk(KERN_ERR "scsi: Failure to register"

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: drivers/scsi/hosts.c:511:
+				printk(KERN_ERR "scsi: Failure to register"
+				       "low-level scsi driver");

WARNING:MISSING_SPACE: break quoted strings at a space character
#734: FILE: drivers/scsi/hosts.c:511:
+				printk(KERN_ERR "scsi: Failure to register"
+				       "low-level scsi driver");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#742: FILE: drivers/scsi/hosts.c:519:
+			if(scsi_register(shost_tp, 0)==NULL) {
 			                             ^

ERROR:SPACING: space required before the open parenthesis '('
#742: FILE: drivers/scsi/hosts.c:519:
+			if(scsi_register(shost_tp, 0)==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scsi_register"
#742: FILE: drivers/scsi/hosts.c:519:
+			if(scsi_register(shost_tp, 0)==NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#743: FILE: drivers/scsi/hosts.c:520:
+				printk(KERN_ERR "scsi: register failed.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#758: FILE: drivers/scsi/hosts.c:535:
+				const char *dm_name;
+				if (shost_tp->info) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#758: FILE: drivers/scsi/hosts.c:535:
+				if (shost_tp->info) {
[...]
+				} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#763: FILE: drivers/scsi/hosts.c:540:
+				printk(KERN_INFO "scsi%d : %s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#769: FILE: drivers/scsi/hosts.c:546:
+				if (shost->select_queue_depths != NULL) {
+					(shost->select_queue_depths) (shost, shost->host_queue);
+				}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shost->select_queue_depths"
#769: FILE: drivers/scsi/hosts.c:546:
+				if (shost->select_queue_depths != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (shost->select_queue_depths)
#770: FILE: drivers/scsi/hosts.c:547:
+					(shost->select_queue_depths) (shost, shost->host_queue);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: drivers/scsi/hosts.c:559:
+^I^I * Next we create the Scsi_Cmnd structures for this host $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#791: FILE: drivers/scsi/hosts.c:568:
+						if (sdev_tp->attach)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#795: FILE: drivers/scsi/hosts.c:572:
+						if (sdev->queue_depth == 0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#804: FILE: drivers/scsi/hosts.c:581:
+			if (sdev_tp->finish && sdev_tp->nr_dev) {
+				(*sdev_tp->finish) ();
+			}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#822: FILE: drivers/scsi/hosts.c:599:
+ * ^ISimilarly, this entry point should be called by a loadable module$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: drivers/scsi/hosts.c:600:
+ * ^Iif it is trying to remove a low level scsi driver from the system.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#826: FILE: drivers/scsi/hosts.c:603:
+ * ^I0 on Success / 1 on Failure$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#829: FILE: drivers/scsi/hosts.c:606:
+ * ^Irmmod does not care what we return here the module will be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#830: FILE: drivers/scsi/hosts.c:607:
+ * ^Iremoved.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#844: FILE: drivers/scsi/hosts.c:621:
+		printk(KERN_INFO "scsi : %d host%s left.\n", scsi_hosts_registered,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#851: FILE: drivers/scsi/hosts.c:628:
+	if (!shost_tp->present) {
+		list_del(&shost_tp->shtp_list);
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#860: FILE: drivers/scsi/hosts.c:637:
+
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#867: FILE: drivers/scsi/hosts.c:644:
+ * ^IA pointer to next Scsi_Host in list or NULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#899: FILE: drivers/scsi/hosts.c:676:
+ * ^IA pointer to located Scsi_Host or NULL.$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#927: FILE: drivers/scsi/hosts.c:704:
+{
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#932: FILE: drivers/scsi/hosts.c:709:
+	return;
+}

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __exit scsi_host_hn_release() should probably be void __exit scsi_host_hn_release(void)
#957: FILE: drivers/scsi/hosts.c:734:
+void __exit scsi_host_hn_release()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#965: FILE: drivers/scsi/hosts.c:742:
+		if (shn->name)
+			kfree(shn->name);

WARNING:SPLIT_STRING: quoted string split across lines
#993: FILE: drivers/scsi/hosts.c:767:
 		SCSI_LOG_ERROR_RECOVERY(5, printk("Waking error handler"
+					  " thread\n"));

WARNING:SPLIT_STRING: quoted string split across lines
#1003: FILE: drivers/scsi/hosts.c:782:
 		SCSI_LOG_ERROR_RECOVERY(5, printk("Waking error handler"
+					  " thread\n"));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: drivers/scsi/hosts.h:60:
+    struct list_head^Ishtp_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: drivers/scsi/hosts.h:375:
+    struct list_head      sh_list;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1054: FILE: drivers/scsi/hosts.h:511:
+extern void scsi_free_host_dev(Scsi_Device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#1054: FILE: drivers/scsi/hosts.h:511:
+extern void scsi_free_host_dev(Scsi_Device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1055: FILE: drivers/scsi/hosts.h:512:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1055: FILE: drivers/scsi/hosts.h:512:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1055: FILE: drivers/scsi/hosts.h:512:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1060: FILE: drivers/scsi/hosts.h:514:
+extern void scsi_unblock_requests(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1060: FILE: drivers/scsi/hosts.h:514:
+extern void scsi_unblock_requests(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1061: FILE: drivers/scsi/hosts.h:515:
+extern void scsi_block_requests(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1061: FILE: drivers/scsi/hosts.h:515:
+extern void scsi_block_requests(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1062: FILE: drivers/scsi/hosts.h:516:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1062: FILE: drivers/scsi/hosts.h:516:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1062: FILE: drivers/scsi/hosts.h:516:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1071: FILE: drivers/scsi/hosts.h:519:
 typedef struct SHN
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1085: FILE: drivers/scsi/hosts.h:528:
+extern void scsi_proc_host_mkdir(Scsi_Host_Template *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Host_Template *' should also have an identifier name
#1085: FILE: drivers/scsi/hosts.h:528:
+extern void scsi_proc_host_mkdir(Scsi_Host_Template *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1086: FILE: drivers/scsi/hosts.h:529:
+extern void scsi_proc_host_add(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1086: FILE: drivers/scsi/hosts.h:529:
+extern void scsi_proc_host_add(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1087: FILE: drivers/scsi/hosts.h:530:
+extern void scsi_proc_host_rm(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1087: FILE: drivers/scsi/hosts.h:530:
+extern void scsi_proc_host_rm(struct Scsi_Host *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1099: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1099: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Host_Template *' should also have an identifier name
#1099: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1099: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1100: FILE: drivers/scsi/hosts.h:540:
+extern void scsi_unregister(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1100: FILE: drivers/scsi/hosts.h:540:
+extern void scsi_unregister(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1101: FILE: drivers/scsi/hosts.h:541:
+extern void scsi_register_blocked_host(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1101: FILE: drivers/scsi/hosts.h:541:
+extern void scsi_register_blocked_host(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1102: FILE: drivers/scsi/hosts.h:542:
+extern void scsi_deregister_blocked_host(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1102: FILE: drivers/scsi/hosts.h:542:
+extern void scsi_deregister_blocked_host(struct Scsi_Host *);

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#1118: FILE: drivers/scsi/hosts.h:553:
+	shost->host_driverfs_dev.parent=&pdev->dev;
 	                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1118: FILE: drivers/scsi/hosts.h:553:
+	shost->host_driverfs_dev.parent=&pdev->dev;
 	                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: drivers/scsi/hosts.h:563:
+extern void scan_scsis(struct Scsi_Host *, uint, uint, uint, uint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1136: FILE: drivers/scsi/hosts.h:565:
+extern void scsi_mark_host_reset(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1136: FILE: drivers/scsi/hosts.h:565:
+extern void scsi_mark_host_reset(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#1145: FILE: drivers/scsi/hosts.h:594:
+void  scsi_initialize_queue(Scsi_Device *, struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1145: FILE: drivers/scsi/hosts.h:594:
+void  scsi_initialize_queue(Scsi_Device *, struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1153: FILE: drivers/scsi/hosts.h:605:
+extern struct Scsi_Host *scsi_host_get_next(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1153: FILE: drivers/scsi/hosts.h:605:
+extern struct Scsi_Host *scsi_host_get_next(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1154: FILE: drivers/scsi/hosts.h:606:
+extern struct Scsi_Host *scsi_host_hn_get(unsigned short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned short' should also have an identifier name
#1154: FILE: drivers/scsi/hosts.h:606:
+extern struct Scsi_Host *scsi_host_hn_get(unsigned short);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1155: FILE: drivers/scsi/hosts.h:607:
+extern void scsi_host_put(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1155: FILE: drivers/scsi/hosts.h:607:
+extern void scsi_host_put(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1156: FILE: drivers/scsi/hosts.h:608:
+extern void scsi_host_hn_init(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1156: FILE: drivers/scsi/hosts.h:608:
+extern void scsi_host_hn_init(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1157: FILE: drivers/scsi/hosts.h:609:
+extern void scsi_host_hn_release(void);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: drivers/scsi/hosts.h:653:
+        Scsi_Device *sdev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: drivers/scsi/hosts.h:653:
+        Scsi_Device *sdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: drivers/scsi/hosts.h:655:
+        for (sdev = shost->host_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: drivers/scsi/hosts.h:655:
+        for (sdev = shost->host_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1191: FILE: drivers/scsi/hosts.h:656:
+            sdev != NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: drivers/scsi/hosts.h:656:
+            sdev != NULL;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1191: FILE: drivers/scsi/hosts.h:656:
+            sdev != NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: drivers/scsi/hosts.h:657:
+            sdev = sdev->next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: drivers/scsi/hosts.h:657:
+            sdev = sdev->next)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: drivers/scsi/hosts.h:658:
+                if (sdev->channel == channel && sdev->id == pun$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: drivers/scsi/hosts.h:658:
+                if (sdev->channel == channel && sdev->id == pun$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1194: FILE: drivers/scsi/hosts.h:659:
+                   && sdev->lun ==lun)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1194: FILE: drivers/scsi/hosts.h:659:
+                if (sdev->channel == channel && sdev->id == pun
+                   && sdev->lun ==lun)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1194: FILE: drivers/scsi/hosts.h:659:
+                   && sdev->lun ==lun)$

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#1194: FILE: drivers/scsi/hosts.h:659:
+                   && sdev->lun ==lun)
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: drivers/scsi/hosts.h:661:
+        return sdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: drivers/scsi/hosts.h:661:
+        return sdev;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 85 warnings, 37 checks, 1130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
