CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*pool)...) over kmalloc_node(sizeof(struct gen_pool)...)
#213: FILE: lib/genalloc.c:28:
+	pool = kmalloc_node(sizeof(struct gen_pool), GFP_KERNEL, nid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pool"
#214: FILE: lib/genalloc.c:29:
+	if (pool != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#249: FILE: lib/genalloc.c:56:
+	if (nbytes > PAGE_SIZE) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chunk"
#255: FILE: lib/genalloc.c:62:
+	if (unlikely(chunk == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: lib/genalloc.c:116:
+				bit = find_next_bit(chunk->bits, bit + nbits,
+							bit + 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: lib/genalloc.c:159:
+			BUG_ON(addr + size > chunk->end_addr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: lib/genalloc.c:168:
+	BUG_ON(nbits > 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#495: FILE: include/linux/genalloc.h:32:
+extern struct gen_pool *gen_pool_create(int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#495: FILE: include/linux/genalloc.h:32:
+extern struct gen_pool *gen_pool_create(int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#495: FILE: include/linux/genalloc.h:32:
+extern struct gen_pool *gen_pool_create(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#496: FILE: include/linux/genalloc.h:33:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#496: FILE: include/linux/genalloc.h:33:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#496: FILE: include/linux/genalloc.h:33:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#496: FILE: include/linux/genalloc.h:33:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#496: FILE: include/linux/genalloc.h:33:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: include/linux/genalloc.h:34:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#497: FILE: include/linux/genalloc.h:34:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#497: FILE: include/linux/genalloc.h:34:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: include/linux/genalloc.h:35:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#498: FILE: include/linux/genalloc.h:35:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#498: FILE: include/linux/genalloc.h:35:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#498: FILE: include/linux/genalloc.h:35:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

CHECK:SPACING: No space is necessary after a cast
#597: FILE: arch/ia64/kernel/uncached.c:107:
+		(void) smp_call_function(uncached_ipi_visibility, NULL, 0, 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#628: FILE: arch/ia64/kernel/uncached.c:122:
+	(void) smp_call_function(uncached_ipi_mc_drain, NULL, 0, 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#641: FILE: arch/ia64/kernel/uncached.c:134:
+		free_pages(c_addr, IA64_GRANULE_SHIFT-PAGE_SHIFT);
 		                                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool"
#687: FILE: arch/ia64/kernel/uncached.c:166:
+		if (pool == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool"
#732: FILE: arch/ia64/kernel/uncached.c:194:
+	if (unlikely(pool == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pool"
#776: FILE: arch/ia64/kernel/uncached.c:224:
+	if (pool != NULL) {

CHECK:SPACING: No space is necessary after a cast
#778: FILE: arch/ia64/kernel/uncached.c:226:
+		(void) gen_pool_add(pool, uc_start, size, nid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 15 checks, 698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
