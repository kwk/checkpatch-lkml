CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#67: FILE: include/linux/fs.h:618:
+	uint64_t      cache_hit;        /* cache hit count*/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#141: FILE: mm/readahead.c:113:
+u32 debug_disable_stateful_method = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: mm/readahead.c:123:
+	debugfs_create_bool("disable_stateful_method", 0644, root,
+						&debug_disable_stateful_method);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/readahead.c:950:
+static inline void ra_state_init(struct file_ra_state *ra,
+				pgoff_t la_index, pgoff_t ra_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/readahead.c:962:
+static inline void ra_state_update(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: mm/readahead.c:966:
+	unsigned long old_ra = ra->readahead_index - ra->ra_index;
+	if (ra_size < old_ra && ra_cache_hit(ra, 0))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: mm/readahead.c:981:
+static inline void ra_state_adjust(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#330: FILE: mm/readahead.c:991:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: mm/readahead.c:991:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: mm/readahead.c:1000:
+	BUG_ON(ra_class == 0 || ra_class > RA_CLASS_END);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/readahead.c:1011:
+		if (ra_class == RA_CLASS_CONTEXT_ACCELERATED &&
+				eof_index > ra->lookahead_index + 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#358: FILE: mm/readahead.c:1019:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/readahead.c:1020:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: mm/readahead.c:1025:
+		struct page *page = find_page(mapping, ra->ra_index + actual);
+		if (page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: mm/readahead.c:1039:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class],

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#389: FILE: mm/readahead.c:1050:
+ *   - Substract ra_size by the old look-ahead to get real safe read-ahead;
        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: mm/readahead.c:1061:
+static inline int adjust_rala(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#447: FILE: mm/readahead.c:1108:
+static inline unsigned long compute_thrashing_threshold(

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: mm/readahead.c:1132:
+	ddprintk("compute_thrashing_threshold: "
+			"ra=%lu=%lu*%lu/%lu, remain %lu for %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#482: FILE: mm/readahead.c:1143:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: mm/readahead.c:1144:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: mm/readahead.c:1159:
+	if (!readahead_live_chunk &&
+			remain_space <= la_size && la_size > 1) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#509: FILE: mm/readahead.c:1170:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#512: FILE: mm/readahead.c:1173:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 9 warnings, 14 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
