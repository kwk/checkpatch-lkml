WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Here is an improved version of the patch.  It fixes a race in kmem_freepages (I do

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#	           ChangeSet	1.406   -> 1.412  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#	         fs/buffer.c	1.66    -> 1.68   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#	         fs/dcache.c	1.19    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	          fs/dquot.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	         mm/vmscan.c	1.60    -> 1.65   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	           mm/slab.c	1.16    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	include/linux/slab.h	1.8     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	include/linux/dcache.h	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	          fs/inode.c	1.36    -> 1.38   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# 02/05/24	ed@oscar.et.ca	1.407

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
# age_pressure_v8.diff

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# 02/05/24	ed@oscar.et.ca	1.408

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# Remove side effect from kmem_shrink_slab and fix vmscan to use the new

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# return codes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# 02/05/24	ed@oscar.et.ca	1.409

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# Simpilify - try lates algorythm without touches in lookups.

WARNING:TYPO_SPELLING: 'lates' may be misspelled - perhaps 'later'?
#83: 
# Simpilify - try lates algorythm without touches in lookups.
                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# 02/05/24	ed@oscar.et.ca	1.410

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# Use either vm aging or prune call back aging, not both.  Keep slab

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
# pages on the active list.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# 02/05/28	ed@oscar.et.ca	1.411

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
# fix locking in slab to use pagemap_lru_lock when shrinking or growing

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
# a cache.  Use the inactive clean list when freeing a slab's pages.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# This avoid a race so the vm does not lose track of pages.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# 02/05/29	ed@oscar.et.ca	1.412

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
# Prevent bug in page_launder from being hit due to a dangling 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
# referencebit.  Improve accounting in refill_inactive.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#100: 
--- a/fs/dcache.c	Wed May 29 07:35:03 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: fs/dcache.c:539:
+ * more memory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: fs/dcache.c:1274:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/dcache.c:1276:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: fs/inode.c:675:
+	for(; goal; goal--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#286: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_pruner_t' should also have an identifier name
#286: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#287: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#288: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#289: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr)                 SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#292: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#295: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#295: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#295: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#298: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#298: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#298: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#301: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#301: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#301: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: mm/slab.c:217:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: mm/slab.c:387:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: mm/slab.c:387:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: mm/slab.c:389:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: mm/slab.c:389:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: mm/slab.c:399:
+	slab_t *slabp = GET_PAGE_SLAB(page);
+	if (cachep->pruner != NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#342: FILE: mm/slab.c:399:
+	if (cachep->pruner != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#344: FILE: mm/slab.c:401:
+	return (cachep->pruner != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: mm/slab.c:405:
+int kmem_do_prunes(int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: mm/slab.c:410:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: mm/slab.c:410:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: mm/slab.c:411:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: mm/slab.c:411:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: mm/slab.c:412:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: mm/slab.c:412:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: mm/slab.c:413:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: mm/slab.c:413:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: mm/slab.c:414:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: mm/slab.c:414:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: mm/slab.c:416:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: mm/slab.c:416:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#359: FILE: mm/slab.c:416:
+        list_for_each(p,&cache_chain) {
                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#359: FILE: mm/slab.c:416:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: mm/slab.c:417:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: mm/slab.c:417:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#361: FILE: mm/slab.c:418:
+		if (cachep->pruner != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: mm/slab.c:422:
+^I^I^I^Iprintk("pruned %-17s %d\n",cachep->name, nr, gfp_mask)); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: mm/slab.c:422:
+				int nr = (*cachep->pruner)(cachep, cachep->count, gfp_mask);
+				printk("pruned %-17s %d\n",cachep->name, nr, gfp_mask)); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#365: FILE: mm/slab.c:422:
+				printk("pruned %-17s %d\n",cachep->name, nr, gfp_mask)); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: mm/slab.c:422:
+				printk("pruned %-17s %d\n",cachep->name, nr, gfp_mask)); 
 				                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#371: FILE: mm/slab.c:428:
+
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: mm/slab.c:430:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: mm/slab.c:430:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: mm/slab.c:431:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: mm/slab.c:431:
+        up(&cache_chain_sem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: mm/slab.c:569:
+^I^Iif (cachep->flags & SLAB_NO_REAP) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: mm/slab.c:569:
+		if (cachep->flags & SLAB_NO_REAP) 
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: mm/slab.c:571:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: mm/slab.c:652:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: mm/slab.c:653:
+ * Used by page_launder_zone and refill_inactive_zone to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: mm/slab.c:654:
+ * try to shrink a slab. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: mm/slab.c:666:
+^I ^Iif (!cachep->growing) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: mm/slab.c:666:
+^I ^Iif (!cachep->growing) {$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#442: FILE: mm/slab.c:670:
+			return 1<<cachep->gfporder;
 			        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: mm/slab.c:674:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#449: FILE: mm/slab.c:677:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: mm/slab.c:1063:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: mm/slab.c:1063:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: mm/slab.c:1259:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: mm/slab.c:1260:
+^I * We need the pagemap_lru_lock - is there a way to wait here $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: mm/slab.c:1301:
+^I/* do not use kmem_freepages - we are not in the lru yet... */      $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: mm/vmscan.c:276:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: mm/vmscan.c:544:
+^I^I * slab and move the pages to the inactive clean list. $

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#620: FILE: mm/vmscan.c:548:
+			UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: mm/vmscan.c:551:
+				int pages = kmem_shrink_slab(page);
+				if (!pages) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#628: FILE: mm/vmscan.c:556:
+					if (nr_deactivated+nr_freed > target)
 					                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: mm/vmscan.c:557:
+^I^I^I^I^I^Igoto done; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: mm/vmscan.c:563:
+^I^I/* $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#644: FILE: mm/vmscan.c:573:
+			if (++nr_deactivated+nr_freed > target) {
 			                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#656: FILE: mm/vmscan.c:596:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: mm/vmscan.c:666:
+^I * then prune the prunable caches, aging them. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 75 warnings, 19 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
