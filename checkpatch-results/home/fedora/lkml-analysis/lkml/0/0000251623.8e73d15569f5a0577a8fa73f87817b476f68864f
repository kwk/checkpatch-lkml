WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#170: FILE: proc/base.c:209:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#203: FILE: proc/root.c:150:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#203: FILE: proc/root.c:150:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'unambigous' may be misspelled - perhaps 'unambiguous'?
#237: FILE: linux/netfilter_ipv4/ipt_owner.h:23:
+	/* it's the only simple (and unambigous) way to reference a program */
 	                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: linux/netfilter_ipv4/ipt_owner.h:25:
+    unsigned long ino;$

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: ipv4/netfilter/ipt_owner.c:3:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: ipv4/netfilter/ipt_owner.c:5:
+                  packet can be found (IPT_OWNER_DEV) and also the inode$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#297: FILE: ipv4/netfilter/ipt_owner.c:47:
+extern int proc_task_dentry_lookup(struct task_struct *task,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: ipv4/netfilter/ipt_owner.c:48:
+^I^I                           struct dentry **dentry, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: ipv4/netfilter/ipt_owner.c:48:
+^I^I                           struct dentry **dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: ipv4/netfilter/ipt_owner.c:48:
+extern int proc_task_dentry_lookup(struct task_struct *task,
+		                           struct dentry **dentry, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: ipv4/netfilter/ipt_owner.c:58:
+^I^I                  const char *devname, unsigned long i_num)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: ipv4/netfilter/ipt_owner.c:58:
+static int proc_exe_check(struct task_struct *task, u_int8_t match,
+		                  const char *devname, unsigned long i_num)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: ipv4/netfilter/ipt_owner.c:60:
+    int result = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: ipv4/netfilter/ipt_owner.c:62:
+    struct dentry *dentry;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#324: FILE: ipv4/netfilter/ipt_owner.c:74:
+		if (dentry->d_inode->i_ino == i_num &&
[...]
+		return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: ipv4/netfilter/ipt_owner.c:75:
+		if (dentry->d_inode->i_ino == i_num &&
+			strncmp(mnt->mnt_devname, devname, IPT_DEVNAME_SZ) == 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#328: FILE: ipv4/netfilter/ipt_owner.c:78:
+		if (dentry->d_inode->i_ino == i_num)
+		    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#329: FILE: ipv4/netfilter/ipt_owner.c:79:
+		    return 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#331: FILE: ipv4/netfilter/ipt_owner.c:81:
+		if (strncmp(mnt->mnt_devname, devname, IPT_DEVNAME_SZ) == 0)
+		    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#332: FILE: ipv4/netfilter/ipt_owner.c:82:
+		    return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: ipv4/netfilter/ipt_owner.c:88:
+match_inode(const struct sk_buff *skb, u_int8_t match,
+		    const char *devname, unsigned long i_num)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#346: FILE: ipv4/netfilter/ipt_owner.c:96:
+	do_each_thread(g, p) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#352: FILE: ipv4/netfilter/ipt_owner.c:102:
+		if(files) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#354: FILE: ipv4/netfilter/ipt_owner.c:104:
+			for (i=0; i < files->max_fds; i++) {
 			      ^

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: ipv4/netfilter/ipt_owner.c:264:
+	if(info->match & IPT_OWNER_INO || info->match & IPT_OWNER_DEV) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#408: FILE: home/lkcl/src/iptables-1.2.11/debian/build/iptables-1.2.11/extensions/libipt_owner.c:42:
+	printf(

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: home/lkcl/src/iptables-1.2.11/debian/build/iptables-1.2.11/extensions/libipt_owner.c:172:
+		if(strlen(optarg) > sizeof(ownerinfo->device))

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#451: FILE: home/lkcl/src/iptables-1.2.11/debian/build/iptables-1.2.11/extensions/libipt_owner.c:173:
+			exit_error(PARAMETER_PROBLEM, "OWNER DEV `%s' too long, max %u characters", optarg, (unsigned int)sizeof(ownerinfo->device));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#454: FILE: home/lkcl/src/iptables-1.2.11/debian/build/iptables-1.2.11/extensions/libipt_owner.c:176:
+		ownerinfo->device[sizeof(ownerinfo->device)-1] = '\0';
 		                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251623.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 18 warnings, 7 checks, 299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251623.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
