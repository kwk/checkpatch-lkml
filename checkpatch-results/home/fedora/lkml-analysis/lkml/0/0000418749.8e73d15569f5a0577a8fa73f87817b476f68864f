ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#43: 
--- a/fs/Config.help	Tue Oct 29 09:55:08 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#91: FILE: fs/ext2/ext2.h:120:
+extern struct inode_operations ext2_special_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#95: FILE: fs/ext2/ext2.h:124:
+extern struct inode_operations ext2_symlink_inode_operations;

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: fs/ext2/inode.c:1049:
+		if (ext2_inode_is_fast_symlink(inode))
[...]
 		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#274: FILE: fs/ext2/namei.c:378:
+struct inode_operations ext2_special_inode_operations = {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#313: FILE: fs/ext2/super.c:284:
+		if (!strcmp (this_char, "user_xattr"))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#314: FILE: fs/ext2/super.c:285:
+			set_opt (sbi->s_mount_opt, XATTR_USER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: fs/ext2/super.c:286:
+		else if (!strcmp (this_char, "nouser_xattr"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: fs/ext2/super.c:287:
+			clear_opt (sbi->s_mount_opt, XATTR_USER);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#317: FILE: fs/ext2/super.c:288:
+		else
[...]
 		if (!strcmp (this_char, "bsddf"))

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: fs/ext2/super.c:932:
+	int err = init_ext2_xattr();
+	if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#374: FILE: fs/ext2/symlink.c:35:
+struct inode_operations ext2_symlink_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: fs/ext2/symlink.c:43:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: fs/ext2/symlink.c:43:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#395: FILE: fs/ext2/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#396: FILE: fs/ext2/xattr.c:2:
+ * linux/fs/ext2/xattr.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#418: FILE: fs/ext2/xattr.c:24:
+ *   ¦ entry 1          | |
      ^

WARNING:TYPO_SPELLING: 'alligned' may be misspelled - perhaps 'aligned'?
#429: FILE: fs/ext2/xattr.c:35:
+ * descriptors are variable in size, and alligned to EXT2_XATTR_PAD
                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#460: FILE: fs/ext2/xattr.c:66:
+EXPORT_SYMBOL(ext2_xattr_unregister);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#461: FILE: fs/ext2/xattr.c:67:
+EXPORT_SYMBOL(ext2_xattr_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#462: FILE: fs/ext2/xattr.c:68:
+EXPORT_SYMBOL(ext2_xattr_list);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#463: FILE: fs/ext2/xattr.c:69:
+EXPORT_SYMBOL(ext2_xattr_set);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#467: FILE: fs/ext2/xattr.c:73:
+#define FIRST_ENTRY(bh) ENTRY(HDR(bh)+1)
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#471: FILE: fs/ext2/xattr.c:77:
+# define ea_idebug(inode, f...) do { \
+		printk(KERN_DEBUG "inode %s:%ld: ", \
+			kdevname(inode->i_dev), inode->i_ino); \
+		printk(f); \
+		printk("\n"); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#471: FILE: fs/ext2/xattr.c:77:
+# define ea_idebug(inode, f...) do { \
+		printk(KERN_DEBUG "inode %s:%ld: ", \
+			kdevname(inode->i_dev), inode->i_ino); \
+		printk(f); \
+		printk("\n"); \
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#472: FILE: fs/ext2/xattr.c:78:
+		printk(KERN_DEBUG "inode %s:%ld: ", \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: fs/ext2/xattr.c:80:
+		printk(f); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#475: FILE: fs/ext2/xattr.c:81:
+		printk("\n"); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bh' - possible side-effects?
#477: FILE: fs/ext2/xattr.c:83:
+# define ea_bdebug(bh, f...) do { \
+		printk(KERN_DEBUG "block %s:%ld: ", \
+			kdevname(bh->b_dev), bh->b_blocknr); \
+		printk(f); \
+		printk("\n"); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bh' may be better as '(bh)' to avoid precedence issues
#477: FILE: fs/ext2/xattr.c:83:
+# define ea_bdebug(bh, f...) do { \
+		printk(KERN_DEBUG "block %s:%ld: ", \
+			kdevname(bh->b_dev), bh->b_blocknr); \
+		printk(f); \
+		printk("\n"); \
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#478: FILE: fs/ext2/xattr.c:84:
+		printk(KERN_DEBUG "block %s:%ld: ", \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#480: FILE: fs/ext2/xattr.c:86:
+		printk(f); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#481: FILE: fs/ext2/xattr.c:87:
+		printk("\n"); \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#518: FILE: fs/ext2/xattr.c:124:
+		if (!ext2_xattr_handlers[name_index-1]) {
 		                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#519: FILE: fs/ext2/xattr.c:125:
+			ext2_xattr_handlers[name_index-1] = handler;
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#532: FILE: fs/ext2/xattr.c:138:
+		ext2_xattr_handlers[name_index-1] = NULL;
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#560: FILE: fs/ext2/xattr.c:166:
+	for (i=0; i<EXT2_XATTR_INDEX_MAX; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#560: FILE: fs/ext2/xattr.c:166:
+	for (i=0; i<EXT2_XATTR_INDEX_MAX; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#579: FILE: fs/ext2/xattr.c:185:
+	struct ext2_xattr_handler *handler = NULL;
+	if (name_index > 0 && name_index <= EXT2_XATTR_INDEX_MAX) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#581: FILE: fs/ext2/xattr.c:187:
+		handler = ext2_xattr_handlers[name_index-1];
 		                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#680: FILE: fs/ext2/xattr.c:286:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: fs/ext2/xattr.c:295:
+	ea_bdebug(bh, "b_count=%d, refcount=%d",
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#689: FILE: fs/ext2/xattr.c:295:
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#691: FILE: fs/ext2/xattr.c:297:
+	if (HDR(bh)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+			"inode %ld: bad block %d", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: fs/ext2/xattr.c:352:
+		memcpy(buffer, bh->b_data + le16_to_cpu(entry->e_value_offs),
+			size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: fs/ext2/xattr.c:391:
+	ea_bdebug(bh, "b_count=%d, refcount=%d",
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#785: FILE: fs/ext2/xattr.c:391:
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#787: FILE: fs/ext2/xattr.c:393:
+	if (HDR(bh)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+			"inode %ld: bad block %d", inode->i_ino,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: fs/ext2/xattr.c:433:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: fs/ext2/xattr.c:489:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: fs/ext2/xattr.c:501:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#903: FILE: fs/ext2/xattr.c:509:
+	if (value == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#905: FILE: fs/ext2/xattr.c:511:
+	if (name == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: fs/ext2/xattr.c:525:
+		ea_bdebug(bh, "b_count=%d, refcount=%d",
+			atomic_read(&(bh->b_count)),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#919: FILE: fs/ext2/xattr.c:525:
+			atomic_read(&(bh->b_count)),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#923: FILE: fs/ext2/xattr.c:529:
+		if (header->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+				"inode %ld: bad block %d", inode->i_ino, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: fs/ext2/xattr.c:532:
+^I^I^I^I"inode %ld: bad block %d", inode->i_ino, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: fs/ext2/xattr.c:541:
+			struct ext2_xattr_entry *next = EXT2_XATTR_NEXT(here);
+			if ((char *)next >= end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#939: FILE: fs/ext2/xattr.c:545:
+				int offs = le16_to_cpu(here->e_value_offs);
+				if (offs < min_offs)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#946: FILE: fs/ext2/xattr.c:552:
+				not_found = memcmp(name, here->e_name,name_len);
 				                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: fs/ext2/xattr.c:561:
+			struct ext2_xattr_entry *next = EXT2_XATTR_NEXT(last);
+			if ((char *)next >= end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: fs/ext2/xattr.c:565:
+				int offs = le16_to_cpu(last->e_value_offs);
+				if (offs < min_offs)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#966: FILE: fs/ext2/xattr.c:572:
+		free = min_offs - ((char*)last - (char*)header) - sizeof(__u32);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#966: FILE: fs/ext2/xattr.c:572:
+		free = min_offs - ((char*)last - (char*)header) - sizeof(__u32);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#971: FILE: fs/ext2/xattr.c:577:
+		here = last = NULL;  /* avoid gcc uninitialized warning. */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#980: FILE: fs/ext2/xattr.c:586:
+		if (value == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: fs/ext2/xattr.c:598:
+^I^I^Iif (le16_to_cpu(here->e_value_offs) + size > $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!header"
#1015: FILE: fs/ext2/xattr.c:621:
+			if (header == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!header"
#1027: FILE: fs/ext2/xattr.c:633:
+		if (header == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1032: FILE: fs/ext2/xattr.c:638:
+		header->h_blocks = header->h_refcount = cpu_to_le32(1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1033: FILE: fs/ext2/xattr.c:639:
+		last = here = ENTRY(header+1);
 		                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1033: FILE: fs/ext2/xattr.c:639:
+		last = here = ENTRY(header+1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1040: FILE: fs/ext2/xattr.c:646:
+		int rest = (char *)last - (char *)here;
+		memmove((char *)here + size, here, rest);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1051: FILE: fs/ext2/xattr.c:657:
+			size_t size = EXT2_XATTR_SIZE(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1059: FILE: fs/ext2/xattr.c:665:
+			last = ENTRY(header+1);
 			                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: fs/ext2/xattr.c:668:
+				int o = le16_to_cpu(last->e_value_offs);
+				if (!last->e_value_block && o < offs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#1068: FILE: fs/ext2/xattr.c:674:
+		if (value == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1070: FILE: fs/ext2/xattr.c:676:
+			if (EXT2_XATTR_NEXT(ENTRY(header+1)) == last) {
 			                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1077: FILE: fs/ext2/xattr.c:683:
+				int size = EXT2_XATTR_LEN(name_len);
+				last = ENTRY((char *)last - size);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1078: FILE: fs/ext2/xattr.c:684:
+				memmove(here, (char*)here + size,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1079: FILE: fs/ext2/xattr.c:685:
+					(char*)last - (char*)here);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1079: FILE: fs/ext2/xattr.c:685:
+					(char*)last - (char*)here);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "value"
#1085: FILE: fs/ext2/xattr.c:691:
+	if (value != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1091: FILE: fs/ext2/xattr.c:697:
+			char *val = (char *)header + min_offs - size;
+			here->e_value_offs =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1131: FILE: fs/ext2/xattr.c:737:
+			ea_bdebug(old_bh, "reusing block %ld",
+				new_bh->b_blocknr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1132: FILE: fs/ext2/xattr.c:738:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: fs/ext2/xattr.c:742:
+^I^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1137: FILE: fs/ext2/xattr.c:743:
+			HDR(new_bh)->h_refcount = cpu_to_le32(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: fs/ext2/xattr.c:746:
+			ea_bdebug(new_bh, "refcount now=%d",
+				le32_to_cpu(HDR(new_bh)->h_refcount));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1150: FILE: fs/ext2/xattr.c:756:
+			int block = ext2_new_block(inode, goal, 0, 0, &error);
+			if (error)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: fs/ext2/xattr.c:771:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: fs/ext2/xattr.c:777:
+^I^I^Iwait_on_buffer(new_bh); $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1181: FILE: fs/ext2/xattr.c:787:
+	if (IS_SYNC(inode)) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1182: FILE: fs/ext2/xattr.c:788:
+		error = ext2_sync_inode (inode);

CHECK:BRACES: Unbalanced braces around else statement
#1185: FILE: fs/ext2/xattr.c:791:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1193: FILE: fs/ext2/xattr.c:799:
+		 * we now release the old block.
+		*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1201: FILE: fs/ext2/xattr.c:807:
+			 * need to duplicate the buffer before. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: fs/ext2/xattr.c:845:
+		ext2_error(inode->i_sb, "ext2_xattr_delete_inode",
+			"inode %ld: block %d read error", inode->i_ino,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#1243: FILE: fs/ext2/xattr.c:849:
+	ea_bdebug(bh, "b_count=%d", atomic_read(&(bh->b_count)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: fs/ext2/xattr.c:853:
+		ext2_error(inode->i_sb, "ext2_xattr_delete_inode",
+			"inode %ld: bad block %d", inode->i_ino,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1258: FILE: fs/ext2/xattr.c:864:
+		HDR(bh)->h_refcount = cpu_to_le32(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1285: FILE: fs/ext2/xattr.c:891:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1309: FILE: fs/ext2/xattr.c:915:
+			ea_bdebug(bh, "already in cache (%d cache entries)",
+				atomic_read(&ext2_xattr_cache->c_entry_count));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1334: FILE: fs/ext2/xattr.c:940:
+	entry1 = ENTRY(header1+1);
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1335: FILE: fs/ext2/xattr.c:941:
+	entry2 = ENTRY(header2+1);
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1382: FILE: fs/ext2/xattr.c:988:
+			ext2_error(inode->i_sb, "ext2_xattr_cache_find",
+				"inode %ld: block %ld read error",

CHECK:SPACING: No space is necessary after a cast
#1383: FILE: fs/ext2/xattr.c:989:
+				inode->i_ino, (unsigned long) ce->e_block);

CHECK:SPACING: No space is necessary after a cast
#1387: FILE: fs/ext2/xattr.c:993:
+				  (unsigned long) ce->e_block,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1391: FILE: fs/ext2/xattr.c:997:
+			ea_bdebug(bh, "b_count=%d",atomic_read(&(bh->b_count)));
 			                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#1391: FILE: fs/ext2/xattr.c:997:
+			ea_bdebug(bh, "b_count=%d",atomic_read(&(bh->b_count)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1413: FILE: fs/ext2/xattr.c:1019:
+	if (ce) {
[...]
+	} else 
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1415: FILE: fs/ext2/xattr.c:1021:
+			  atomic_read(&ext2_xattr_cache->c_entry_count)-1);
 			                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1417: FILE: fs/ext2/xattr.c:1023:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#1417: FILE: fs/ext2/xattr.c:1023:
+	} else 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1436: FILE: fs/ext2/xattr.c:1042:
+	for (n=0; n < entry->e_name_len; n++) {
 	      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1438: FILE: fs/ext2/xattr.c:1044:
+		       (hash >> (8*sizeof(hash) - NAME_HASH_SHIFT)) ^
 		                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1448: FILE: fs/ext2/xattr.c:1054:
+			       (hash >> (8*sizeof(hash) - VALUE_HASH_SHIFT)) ^
 			                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1470: FILE: fs/ext2/xattr.c:1076:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1472: FILE: fs/ext2/xattr.c:1078:
+	here = ENTRY(header+1);
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1480: FILE: fs/ext2/xattr.c:1086:
+		       (hash >> (8*sizeof(hash) - BLOCK_HASH_SHIFT)) ^
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1493: FILE: fs/ext2/xattr.c:1099:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: fs/ext2/xattr.c:1104:
+	ext2_xattr_cache = mb_cache_create("ext2_xattr", NULL,
+		sizeof(struct mb_cache_entry) +

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1517: FILE: fs/ext2/xattr.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1518: FILE: fs/ext2/xattr.h:2:
+/*
+  File: linux/ext2_xattr.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1560: FILE: fs/ext2/xattr.h:44:
+#define EXT2_XATTR_PAD		(1<<EXT2_XATTR_PAD_BITS)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1560: FILE: fs/ext2/xattr.h:44:
+#define EXT2_XATTR_PAD		(1<<EXT2_XATTR_PAD_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1561: FILE: fs/ext2/xattr.h:45:
+#define EXT2_XATTR_ROUND		(EXT2_XATTR_PAD-1)
                         		               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#1565: FILE: fs/ext2/xattr.h:49:
+#define EXT2_XATTR_NEXT(entry) \
+	( (struct ext2_xattr_entry *)( \
+	  (char *)(entry) + EXT2_XATTR_LEN((entry)->e_name_len)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1567: FILE: fs/ext2/xattr.h:51:
+	  (char *)(entry) + EXT2_XATTR_LEN((entry)->e_name_len)) )

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1583: FILE: fs/ext2/xattr.h:67:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1583: FILE: fs/ext2/xattr.h:67:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext2_xattr_handler *' should also have an identifier name
#1583: FILE: fs/ext2/xattr.h:67:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1584: FILE: fs/ext2/xattr.h:68:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1584: FILE: fs/ext2/xattr.h:68:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext2_xattr_handler *' should also have an identifier name
#1584: FILE: fs/ext2/xattr.h:68:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1586: FILE: fs/ext2/xattr.h:70:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1587: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1587: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1587: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1587: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1587: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1588: FILE: fs/ext2/xattr.h:72:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1588: FILE: fs/ext2/xattr.h:72:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1588: FILE: fs/ext2/xattr.h:72:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1588: FILE: fs/ext2/xattr.h:72:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1589: FILE: fs/ext2/xattr.h:73:
+extern int ext2_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1589: FILE: fs/ext2/xattr.h:73:
+extern int ext2_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1589: FILE: fs/ext2/xattr.h:73:
+extern int ext2_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1591: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1592: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1592: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1592: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1592: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1593: FILE: fs/ext2/xattr.h:77:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1595: FILE: fs/ext2/xattr.h:79:
+extern void ext2_xattr_delete_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1595: FILE: fs/ext2/xattr.h:79:
+extern void ext2_xattr_delete_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1596: FILE: fs/ext2/xattr.h:80:
+extern void ext2_xattr_put_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1596: FILE: fs/ext2/xattr.h:80:
+extern void ext2_xattr_put_super(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1598: FILE: fs/ext2/xattr.h:82:
+extern int init_ext2_xattr(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: fs/ext2/xattr.h:83:
+extern void exit_ext2_xattr(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1656: FILE: fs/ext2/xattr_user.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1657: FILE: fs/ext2/xattr_user.c:2:
+ * linux/fs/ext2/xattr_user.c

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1679: FILE: fs/ext2/xattr_user.c:24:
+	const int prefix_len = sizeof(XATTR_USER_PREFIX)-1;
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1686: FILE: fs/ext2/xattr_user.c:31:
+		memcpy(list+prefix_len, name, name_len);
 		           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1723: FILE: fs/ext2/xattr_user.c:68:
+	if ( !S_ISREG(inode->i_mode) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1733: FILE: fs/ext2/xattr_user.c:78:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1733: FILE: fs/ext2/xattr_user.c:78:
+  $

WARNING:INDENTED_LABEL: labels should not be indented
#1739: FILE: fs/ext2/xattr_user.c:84:
+	prefix:	XATTR_USER_PREFIX,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1740: FILE: fs/ext2/xattr_user.c:85:
+	list:	ext2_xattr_user_list,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1740: FILE: fs/ext2/xattr_user.c:85:
+	list:	ext2_xattr_user_list,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1741: FILE: fs/ext2/xattr_user.c:86:
+	get:	ext2_xattr_user_get,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1741: FILE: fs/ext2/xattr_user.c:86:
+	get:	ext2_xattr_user_get,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1742: FILE: fs/ext2/xattr_user.c:87:
+	set:	ext2_xattr_user_set,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1742: FILE: fs/ext2/xattr_user.c:87:
+	set:	ext2_xattr_user_set,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 83 warnings, 77 checks, 1704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
