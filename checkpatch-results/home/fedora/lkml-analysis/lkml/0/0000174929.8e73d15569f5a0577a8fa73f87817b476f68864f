ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/sysfs/inode.c:94:
+static inline void set_default_inode_attr(struct inode * inode, mode_t mode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#61: FILE: fs/sysfs/inode.c:99:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: fs/sysfs/inode.c:102:
+static inline void set_inode_attr(struct inode * inode, struct iattr * iattr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: fs/sysfs/inode.c:102:
+static inline void set_inode_attr(struct inode * inode, struct iattr * iattr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: fs/sysfs/inode.c:112:
+struct inode * sysfs_new_inode(mode_t mode, struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: fs/sysfs/inode.c:112:
+struct inode * sysfs_new_inode(mode_t mode, struct sysfs_dirent * sd)

CHECK:BRACES: braces {} should be used on all arms of this statement
#88: FILE: fs/sysfs/inode.c:122:
+		if (sd->s_iattr) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#94: FILE: fs/sysfs/inode.c:128:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/sysfs/inode.c:140:
+			struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: fs/sysfs/inode.c:141:
+			struct sysfs_dirent * sd = dentry->d_fsdata;
+			if ((inode = sysfs_new_inode(mode, sd))) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#105: FILE: fs/sysfs/inode.c:141:
+			if ((inode = sysfs_new_inode(mode, sd))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#125: FILE: fs/sysfs/mount.c:46:
+	inode = sysfs_new_inode(S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: fs/sysfs/mount.c:47:
+	inode = sysfs_new_inode(S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,
+				 &sysfs_root);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/sysfs/sysfs.h:5:
+extern struct inode * sysfs_new_inode(mode_t mode, struct sysfs_dirent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: fs/sysfs/sysfs.h:5:
+extern struct inode * sysfs_new_inode(mode_t mode, struct sysfs_dirent *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#138: FILE: fs/sysfs/sysfs.h:5:
+extern struct inode * sysfs_new_inode(mode_t mode, struct sysfs_dirent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 3 warnings, 5 checks, 80 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
