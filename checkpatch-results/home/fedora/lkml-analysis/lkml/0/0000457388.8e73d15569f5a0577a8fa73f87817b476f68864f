WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
diff -urN --exclude [psx].* linux-2.5/fs/proc/proc_misc.c lazy_buddy-2.5/fs/proc/proc_misc.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#57: FILE: fs/proc/proc_misc.c:135:
+	extern unsigned long nr_deferred_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#96: FILE: include/asm-i386/bitops.h:412:
+		:"=r" (n)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#97: FILE: include/asm-i386/bitops.h:413:
+		:"r" (n));
 		^

ERROR:SPACING: space required before the open parenthesis '('
#158: FILE: include/linux/page-flags.h:185:
+#define SetPageDeferred(page)	do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#158: FILE: include/linux/page-flags.h:185:
+#define SetPageDeferred(page)	do { ; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: include/linux/page-flags.h:186:
+#define ClearPageDeferred(page)	do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#159: FILE: include/linux/page-flags.h:186:
+#define ClearPageDeferred(page)	do { ; } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: mm/page_alloc.c:77:
+#define LAZY_BUG_ON(p) BUG_ON(p)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: mm/page_alloc.c:79:
+#define LAZY_BUG_ON(p) do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#205: FILE: mm/page_alloc.c:79:
+#define LAZY_BUG_ON(p) do { ; } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: mm/page_alloc.c:96:
+			BUG_ON(!PageDeferred(page));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#230: FILE: mm/page_alloc.c:104:
+	printk("zone %s: deferred = %lu, zone->pages_deferred = %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: mm/page_alloc.c:105:
+	printk("zone %s: deferred = %lu, zone->pages_deferred = %lu\n",
+			zone->name,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: mm/page_alloc.c:108:
+	BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#240: FILE: mm/page_alloc.c:114:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/page_alloc.c:315:
+			page = list_entry(zone->deferred_pages[order].next,
+						struct page,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#426: FILE: mm/page_alloc.c:319:
+				printk("page %p, bad offset %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/page_alloc.c:320:
+				printk("page %p, bad offset %lx\n",
+						page,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: mm/page_alloc.c:322:
+				BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: mm/page_alloc.c:325:
+				printk("page %p above MAXMEM=%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: mm/page_alloc.c:326:
+				printk("page %p above MAXMEM=%lx\n",
+						page,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#435: FILE: mm/page_alloc.c:328:
+				BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#450: FILE: mm/page_alloc.c:343:
+static void FASTCALL(__free_pages_ok (struct page *page, unsigned int order));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: mm/page_alloc.c:344:
+static void __free_pages_ok (struct page *page, unsigned int order)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: mm/page_alloc.c:347:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#456: FILE: mm/page_alloc.c:349:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: mm/page_alloc.c:351:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: mm/page_alloc.c:353:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#462: FILE: mm/page_alloc.c:355:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#464: FILE: mm/page_alloc.c:357:
+		BUG();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#466: FILE: mm/page_alloc.c:359:
+	page->flags &= ~(1<<PG_referenced);
 	                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: mm/page_alloc.c:388:
+static FASTCALL(struct page * dequeue(zone_t *zone, unsigned int order));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: mm/page_alloc.c:389:
+static struct page * dequeue(zone_t *zone, unsigned int order)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#547: FILE: mm/page_alloc.c:465:
+	while (split_order >= page_order) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#600: FILE: mm/page_alloc.c:518:
+	page = list_entry(	zone->deferred_pages[deferred_order].next,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: mm/page_alloc.c:519:
+	page = list_entry(	zone->deferred_pages[deferred_order].next,
+				struct page,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 22 warnings, 7 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
