WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
The first successful prediction leads to an additional page being allocated.

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#39: 
Third to 4 pages and so on. In large continous accesses to pages the number of
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: mm/memory.c:1803:
+ ^Iunsigned long end_addr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: mm/memory.c:1803:
+ ^Iunsigned long end_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: mm/memory.c:1803:
+ ^Iunsigned long end_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: mm/memory.c:1807:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: mm/memory.c:1807:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: mm/memory.c:1807:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#98: FILE: mm/memory.c:1808:
+ 	if (likely((vma->vm_flags & VM_RAND_READ)
+		|| current->anon_fault_next_addr != addr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#99: FILE: mm/memory.c:1809:
+		|| current->anon_fault_next_addr != addr)
+		|| current->anon_fault_order >= sysctl_max_prealloc_order) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: mm/memory.c:1815:
+ ^I^Iint order = ++current->anon_fault_order;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: mm/memory.c:1815:
+ ^I^Iint order = ++current->anon_fault_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: mm/memory.c:1815:
+ ^I^Iint order = ++current->anon_fault_order;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#107: FILE: mm/memory.c:1817:
+		if ((1 << order) < PAGEVEC_SIZE)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: mm/memory.c:1819:
+		else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#122: FILE: mm/memory.c:1830:
 	if (write_access) {
+

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: mm/memory.c:1844:
+		for(a = addr; a < end_addr ; a += PAGE_SIZE) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: mm/memory.c:1857:
+		for(i = 0; addr < a; addr += PAGE_SIZE, i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: mm/memory.c:1869:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: mm/memory.c:1869:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: mm/memory.c:1869:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: mm/memory.c:1870:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: mm/memory.c:1870:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: mm/memory.c:1870:
+ 			entry = maybe_mkwrite(pte_mkdirty(mk_pte(p,
+ 						 vma->vm_page_prot)),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: mm/memory.c:1870:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: mm/memory.c:1871:
+ ^I^I^I^I^I      vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: mm/memory.c:1871:
+ ^I^I^I^I^I      vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: mm/memory.c:1871:
+ ^I^I^I^I^I      vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: mm/memory.c:1873:
+^I^I ^Ilru_cache_add_active(p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: mm/memory.c:1873:
+^I^I ^Ilru_cache_add_active(p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: mm/memory.c:1880:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: mm/memory.c:1880:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: mm/memory.c:1880:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: mm/memory.c:1881:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: mm/memory.c:1881:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: mm/memory.c:1881:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: mm/memory.c:1884:
+ ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: mm/memory.c:1884:
+ ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: mm/memory.c:1884:
+ ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: mm/memory.c:1885:
+ ^I^I/* Read */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: mm/memory.c:1885:
+ ^I^I/* Read */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: mm/memory.c:1885:
+ ^I^I/* Read */$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#229: FILE: kernel/sysctl.c:58:
+extern int sysctl_max_prealloc_order;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#245: FILE: kernel/sysctl.c:848:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#258: FILE: include/linux/sysctl.h:173:
+	VM_MAX_PREFAULT_ORDER=29, /* max prefault order during anonymous page faults */
 	                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 25 warnings, 6 checks, 187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
