WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -Nru linux-2.6.0-test2/include/asm-h8300/aki3068net/ne.h linux-2.6.0-test2-h8300/include/asm-h8300/aki3068net/ne.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/asm-h8300/aki3068net/timer_rate.h:1:
+#ifndef __H8300_AKI3068NET_TIMER_RATE__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#65: FILE: include/asm-h8300/aki3068net/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#65: FILE: include/asm-h8300/aki3068net/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#65: FILE: include/asm-h8300/aki3068net/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#66: FILE: include/asm-h8300/aki3068net/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#66: FILE: include/asm-h8300/aki3068net/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#66: FILE: include/asm-h8300/aki3068net/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192

WARNING:INLINE: plain inline is preferred over __inline__
#86: FILE: include/asm-h8300/atomic.h:100:
+static __inline__ void atomic_clear_mask(unsigned long mask, unsigned long *v)

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: include/asm-h8300/atomic.h:103:
+^I                     "orc #0x07,exr\n\t"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/asm-h8300/atomic.h:104:
+^I                     "mov.l %0,er0\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: include/asm-h8300/atomic.h:105:
+^I                     "mov.l %1,er1\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: include/asm-h8300/atomic.h:106:
+^I                     "and.l er1,er0\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: include/asm-h8300/atomic.h:107:
+^I                     "mov.l er0,%0\n\t"$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: include/asm-h8300/atomic.h:108:
+^I                     "ldc r2l,exr" $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: include/asm-h8300/atomic.h:108:
+^I                     "ldc r2l,exr" $

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: include/asm-h8300/atomic.h:109:
+                             : "=m" (*v) : "ir" (~(mask)) :"er0","er1","er2");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/asm-h8300/atomic.h:109:
+                             : "=m" (*v) : "ir" (~(mask)) :"er0","er1","er2");$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#95: FILE: include/asm-h8300/atomic.h:109:
+                             : "=m" (*v) : "ir" (~(mask)) :"er0","er1","er2");
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: include/asm-h8300/atomic.h:109:
+                             : "=m" (*v) : "ir" (~(mask)) :"er0","er1","er2");
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: include/asm-h8300/atomic.h:109:
+                             : "=m" (*v) : "ir" (~(mask)) :"er0","er1","er2");
                                                                       ^

WARNING:INLINE: plain inline is preferred over __inline__
#98: FILE: include/asm-h8300/atomic.h:112:
+static __inline__ void atomic_set_mask(unsigned long mask, unsigned long *v)

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: include/asm-h8300/atomic.h:115:
+^I                     "orc #0x07,exr\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: include/asm-h8300/atomic.h:116:
+^I                     "mov.l %0,er0\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: include/asm-h8300/atomic.h:117:
+^I                     "mov.l %1,er1\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: include/asm-h8300/atomic.h:118:
+^I                     "or.l er1,er0\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: include/asm-h8300/atomic.h:119:
+^I                     "mov.l er0,%0\n\t"$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: include/asm-h8300/atomic.h:120:
+^I                     "ldc r2l,exr" $

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: include/asm-h8300/atomic.h:120:
+^I                     "ldc r2l,exr" $

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: include/asm-h8300/atomic.h:121:
+                             : "=m" (*v) : "ir" (mask) :"er0","er1","er2");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/asm-h8300/atomic.h:121:
+                             : "=m" (*v) : "ir" (mask) :"er0","er1","er2");$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#107: FILE: include/asm-h8300/atomic.h:121:
+                             : "=m" (*v) : "ir" (mask) :"er0","er1","er2");
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#107: FILE: include/asm-h8300/atomic.h:121:
+                             : "=m" (*v) : "ir" (mask) :"er0","er1","er2");
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#107: FILE: include/asm-h8300/atomic.h:121:
+                             : "=m" (*v) : "ir" (mask) :"er0","er1","er2");
                                                                    ^

WARNING:INLINE: plain inline is preferred over __inline__
#158: FILE: include/asm-h8300/bitops.h:24:
+static __inline__ unsigned long ffz(unsigned long word)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#177: FILE: include/asm-h8300/bitops.h:40:
+static __inline__ void set_bit(int nr, volatile unsigned long* addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#177: FILE: include/asm-h8300/bitops.h:40:
+static __inline__ void set_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#177: FILE: include/asm-h8300/bitops.h:40:
+static __inline__ void set_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#187: FILE: include/asm-h8300/bitops.h:47:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#187: FILE: include/asm-h8300/bitops.h:47:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#187: FILE: include/asm-h8300/bitops.h:47:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: include/asm-h8300/bitops.h:47:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: include/asm-h8300/bitops.h:47:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#196: FILE: include/asm-h8300/bitops.h:59:
+static __inline__ void clear_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#196: FILE: include/asm-h8300/bitops.h:59:
+static __inline__ void clear_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#196: FILE: include/asm-h8300/bitops.h:59:
+static __inline__ void clear_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#206: FILE: include/asm-h8300/bitops.h:66:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#206: FILE: include/asm-h8300/bitops.h:66:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#206: FILE: include/asm-h8300/bitops.h:66:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/asm-h8300/bitops.h:66:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/asm-h8300/bitops.h:66:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#212: FILE: include/asm-h8300/bitops.h:71:
+static __inline__ void change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#212: FILE: include/asm-h8300/bitops.h:71:
+static __inline__ void change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#212: FILE: include/asm-h8300/bitops.h:71:
+static __inline__ void change_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#222: FILE: include/asm-h8300/bitops.h:78:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#222: FILE: include/asm-h8300/bitops.h:78:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#222: FILE: include/asm-h8300/bitops.h:78:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: include/asm-h8300/bitops.h:78:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: include/asm-h8300/bitops.h:78:
+		:"=m"(a):"g"(nr & 7):"er0","er1","memory");
 		                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#229: FILE: include/asm-h8300/bitops.h:84:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#229: FILE: include/asm-h8300/bitops.h:84:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#229: FILE: include/asm-h8300/bitops.h:84:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: include/asm-h8300/bitops.h:103:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#259: FILE: include/asm-h8300/bitops.h:103:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#259: FILE: include/asm-h8300/bitops.h:103:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: include/asm-h8300/bitops.h:103:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: include/asm-h8300/bitops.h:103:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#264: FILE: include/asm-h8300/bitops.h:108:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#264: FILE: include/asm-h8300/bitops.h:108:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#264: FILE: include/asm-h8300/bitops.h:108:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long* addr)

CHECK:SPACING: No space is necessary after a cast
#268: FILE: include/asm-h8300/bitops.h:112:
+	a = (unsigned char *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: include/asm-h8300/bitops.h:112:
+	unsigned char *a;
+	a = (unsigned char *) addr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-h8300/bitops.h:127:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#284: FILE: include/asm-h8300/bitops.h:127:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#284: FILE: include/asm-h8300/bitops.h:127:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-h8300/bitops.h:127:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-h8300/bitops.h:127:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#289: FILE: include/asm-h8300/bitops.h:132:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#289: FILE: include/asm-h8300/bitops.h:132:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#289: FILE: include/asm-h8300/bitops.h:132:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: include/asm-h8300/bitops.h:147:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#314: FILE: include/asm-h8300/bitops.h:147:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#314: FILE: include/asm-h8300/bitops.h:147:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: include/asm-h8300/bitops.h:147:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#320: FILE: include/asm-h8300/bitops.h:152:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#320: FILE: include/asm-h8300/bitops.h:152:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#320: FILE: include/asm-h8300/bitops.h:152:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: include/asm-h8300/bitops.h:170:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#349: FILE: include/asm-h8300/bitops.h:170:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#349: FILE: include/asm-h8300/bitops.h:170:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: include/asm-h8300/bitops.h:170:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: include/asm-h8300/bitops.h:170:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#354: FILE: include/asm-h8300/bitops.h:175:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#354: FILE: include/asm-h8300/bitops.h:175:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#354: FILE: include/asm-h8300/bitops.h:175:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long* addr)

CHECK:SPACING: No space is necessary after a cast
#357: FILE: include/asm-h8300/bitops.h:178:
+	unsigned char *a = (unsigned char *) addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/asm-h8300/bitops.h:193:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#373: FILE: include/asm-h8300/bitops.h:193:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#373: FILE: include/asm-h8300/bitops.h:193:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/asm-h8300/bitops.h:193:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/asm-h8300/bitops.h:193:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#378: FILE: include/asm-h8300/bitops.h:198:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#378: FILE: include/asm-h8300/bitops.h:198:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#378: FILE: include/asm-h8300/bitops.h:198:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: include/asm-h8300/bitops.h:213:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#403: FILE: include/asm-h8300/bitops.h:213:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#403: FILE: include/asm-h8300/bitops.h:213:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: include/asm-h8300/bitops.h:213:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#409: FILE: include/asm-h8300/bitops.h:218:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#409: FILE: include/asm-h8300/bitops.h:218:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#409: FILE: include/asm-h8300/bitops.h:218:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: include/asm-h8300/bitops.h:236:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#438: FILE: include/asm-h8300/bitops.h:236:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#438: FILE: include/asm-h8300/bitops.h:236:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: include/asm-h8300/bitops.h:236:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: include/asm-h8300/bitops.h:236:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#443: FILE: include/asm-h8300/bitops.h:241:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#443: FILE: include/asm-h8300/bitops.h:241:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#443: FILE: include/asm-h8300/bitops.h:241:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

CHECK:SPACING: No space is necessary after a cast
#446: FILE: include/asm-h8300/bitops.h:244:
+	unsigned char *a = (unsigned char *) addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: include/asm-h8300/bitops.h:259:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#461: FILE: include/asm-h8300/bitops.h:259:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#461: FILE: include/asm-h8300/bitops.h:259:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: include/asm-h8300/bitops.h:259:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: include/asm-h8300/bitops.h:259:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","er1","memory");
 		                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#467: FILE: include/asm-h8300/bitops.h:264:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#467: FILE: include/asm-h8300/bitops.h:264:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#467: FILE: include/asm-h8300/bitops.h:264:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long* addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#492: FILE: include/asm-h8300/bitops.h:279:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#492: FILE: include/asm-h8300/bitops.h:279:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#492: FILE: include/asm-h8300/bitops.h:279:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#492: FILE: include/asm-h8300/bitops.h:279:
+		: "=r"(retval),"=m"(*a) :"g"(nr & 7):"er0","memory");
 		                                          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#500: FILE: include/asm-h8300/bitops.h:286:
+static __inline__ int __constant_test_bit(int nr, const volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#500: FILE: include/asm-h8300/bitops.h:286:
+static __inline__ int __constant_test_bit(int nr, const volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#500: FILE: include/asm-h8300/bitops.h:286:
+static __inline__ int __constant_test_bit(int nr, const volatile unsigned long* addr)

CHECK:SPACING: No space is necessary after a cast
#505: FILE: include/asm-h8300/bitops.h:288:
+	return ((1UL << (nr & 31)) & (((const volatile unsigned int *) addr)[nr >> 5])) != 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#505: FILE: include/asm-h8300/bitops.h:288:
+	return ((1UL << (nr & 31)) & (((const volatile unsigned int *) addr)[nr >> 5])) != 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#509: FILE: include/asm-h8300/bitops.h:291:
+static __inline__ int __test_bit(int nr, const unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#509: FILE: include/asm-h8300/bitops.h:291:
+static __inline__ int __test_bit(int nr, const unsigned long* addr)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#518: FILE: include/asm-h8300/bitops.h:306:
+		: "=r"(retval) :"g"(nr & 7),"r"(a):"er0");
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: include/asm-h8300/bitops.h:306:
+		: "=r"(retval) :"g"(nr & 7),"r"(a):"er0");
 		                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#518: FILE: include/asm-h8300/bitops.h:306:
+		: "=r"(retval) :"g"(nr & 7),"r"(a):"er0");
 		                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#527: FILE: include/asm-h8300/bitops.h:319:
+static __inline__ int find_next_zero_bit (void * addr, int size, int offset)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#527: FILE: include/asm-h8300/bitops.h:319:
+static __inline__ int find_next_zero_bit (void * addr, int size, int offset)

WARNING:INLINE: plain inline is preferred over __inline__
#527: FILE: include/asm-h8300/bitops.h:319:
+static __inline__ int find_next_zero_bit (void * addr, int size, int offset)

WARNING:INLINE: plain inline is preferred over __inline__
#536: FILE: include/asm-h8300/bitops.h:355:
+static __inline__ unsigned long ffs(unsigned long word)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: include/asm-h8300/bitops.h:406:
+static __inline__ int ext2_set_bit(int nr, volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#564: FILE: include/asm-h8300/bitops.h:406:
+static __inline__ int ext2_set_bit(int nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#564: FILE: include/asm-h8300/bitops.h:406:
+static __inline__ int ext2_set_bit(int nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#582: FILE: include/asm-h8300/bitops.h:410:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#582: FILE: include/asm-h8300/bitops.h:410:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: include/asm-h8300/bitops.h:421:
+static __inline__ int ext2_clear_bit(int nr, volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#594: FILE: include/asm-h8300/bitops.h:421:
+static __inline__ int ext2_clear_bit(int nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#594: FILE: include/asm-h8300/bitops.h:421:
+static __inline__ int ext2_clear_bit(int nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#612: FILE: include/asm-h8300/bitops.h:425:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#612: FILE: include/asm-h8300/bitops.h:425:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#624: FILE: include/asm-h8300/bitops.h:436:
+static __inline__ int ext2_test_bit(int nr, const volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#624: FILE: include/asm-h8300/bitops.h:436:
+static __inline__ int ext2_test_bit(int nr, const volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#624: FILE: include/asm-h8300/bitops.h:436:
+static __inline__ int ext2_test_bit(int nr, const volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#639: FILE: include/asm-h8300/bitops.h:439:
+	const volatile unsigned char	*ADDR = (const unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#639: FILE: include/asm-h8300/bitops.h:439:
+	const volatile unsigned char	*ADDR = (const unsigned char *) addr;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#650: FILE: include/asm-h8300/bitops.h:449:
+static __inline__ unsigned long ext2_find_next_zero_bit(void *addr, unsigned long size, unsigned long offset)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INLINE: plain inline is preferred over __inline__
#650: FILE: include/asm-h8300/bitops.h:449:
+static __inline__ unsigned long ext2_find_next_zero_bit(void *addr, unsigned long size, unsigned long offset)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#681: FILE: include/asm-h8300/edosk2674/timer_rate.h:1:
+#include <linux/config.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#683: FILE: include/asm-h8300/edosk2674/timer_rate.h:3:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#683: FILE: include/asm-h8300/edosk2674/timer_rate.h:3:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#683: FILE: include/asm-h8300/edosk2674/timer_rate.h:3:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#684: FILE: include/asm-h8300/edosk2674/timer_rate.h:4:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#684: FILE: include/asm-h8300/edosk2674/timer_rate.h:4:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#684: FILE: include/asm-h8300/edosk2674/timer_rate.h:4:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192

WARNING:TYPO_SPELLING: 'illigal' may be misspelled - perhaps 'illegal'?
#839: FILE: include/asm-h8300/generic/timer_rate.h:14:
+#error illigal configuration
        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: include/asm-h8300/gpio.h:41:
+        h8300_set_gpio_dir(((port) << 8) | (bit), dir)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: include/asm-h8300/gpio.h:41:
+        h8300_set_gpio_dir(((port) << 8) | (bit), dir)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: include/asm-h8300/gpio.h:44:
+        h8300_get_gpio_dir(((port) << 8) | (bit))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: include/asm-h8300/gpio.h:44:
+        h8300_get_gpio_dir(((port) << 8) | (bit))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#895: FILE: include/asm-h8300/h8max/ne.h:42:
+#define outsb(a,p,l)            h8max_outsb((a) - NE2000_ADDR,(unsigned char *)p,l)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#895: FILE: include/asm-h8300/h8max/ne.h:42:
+#define outsb(a,p,l)            h8max_outsb((a) - NE2000_ADDR,(unsigned char *)p,l)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#895: FILE: include/asm-h8300/h8max/ne.h:42:
+#define outsb(a,p,l)            h8max_outsb((a) - NE2000_ADDR,(unsigned char *)p,l)
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#895: FILE: include/asm-h8300/h8max/ne.h:42:
+#define outsb(a,p,l)            h8max_outsb((a) - NE2000_ADDR,(unsigned char *)p,l)
                                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-h8300/h8max/ne.h:46:
+#define insb(a,p,l)             h8max_insb((a) - NE2000_ADDR,(unsigned char *)p,l)
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-h8300/h8max/ne.h:46:
+#define insb(a,p,l)             h8max_insb((a) - NE2000_ADDR,(unsigned char *)p,l)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-h8300/h8max/ne.h:46:
+#define insb(a,p,l)             h8max_insb((a) - NE2000_ADDR,(unsigned char *)p,l)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-h8300/h8max/ne.h:46:
+#define insb(a,p,l)             h8max_insb((a) - NE2000_ADDR,(unsigned char *)p,l)
                                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#907: FILE: include/asm-h8300/h8max/ne.h:83:
+static inline void h8max_outsb(unsigned char a,unsigned char *p,unsigned long l)
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#907: FILE: include/asm-h8300/h8max/ne.h:83:
+static inline void h8max_outsb(unsigned char a,unsigned char *p,unsigned long l)
                                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#909: FILE: include/asm-h8300/h8max/ne.h:85:
+	for (; l != 0; --l, p++) {
+		*(unsigned short *)(NE2000_ADDR + (a << 1)) = *p;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: include/asm-h8300/h8max/ne.h:90:
+static inline void h8max_insb(unsigned char a,unsigned char *p,unsigned long l)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: include/asm-h8300/h8max/ne.h:90:
+static inline void h8max_insb(unsigned char a,unsigned char *p,unsigned long l)
                                                               ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#916: FILE: include/asm-h8300/h8max/ne.h:92:
+	for (; l != 0; --l, p++) {
+		*p = *((unsigned char *)(NE2000_ADDR + (a << 1))+1);
+	}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#917: FILE: include/asm-h8300/h8max/ne.h:93:
+		*p = *((unsigned char *)(NE2000_ADDR + (a << 1))+1);
 		                                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#926: FILE: include/asm-h8300/h8max/timer_rate.h:1:
+#ifndef __H8300_H8MAX_TIMER_RATE__

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#931: FILE: include/asm-h8300/h8max/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#931: FILE: include/asm-h8300/h8max/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192
                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#931: FILE: include/asm-h8300/h8max/timer_rate.h:6:
+#define H8300_TIMER_COUNT_DATA CONFIG_CPU_CLOCK*10/8192

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#932: FILE: include/asm-h8300/h8max/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#932: FILE: include/asm-h8300/h8max/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#932: FILE: include/asm-h8300/h8max/timer_rate.h:7:
+#define H8300_TIMER_FREQ CONFIG_CPU_CLOCK*1000/8192

CHECK:SPACING: No space is necessary after a cast
#944: FILE: include/asm-h8300/io.h:44:
+    ({ unsigned char __v = (*(volatile unsigned char *) (addr & 0x00ffffff)); __v; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: include/asm-h8300/io.h:44:
+    ({ unsigned char __v = (*(volatile unsigned char *) (addr & 0x00ffffff)); __v; })$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#944: FILE: include/asm-h8300/io.h:44:
+    ({ unsigned char __v = (*(volatile unsigned char *) (addr & 0x00ffffff)); __v; })

CHECK:SPACING: No space is necessary after a cast
#947: FILE: include/asm-h8300/io.h:46:
+    ({ unsigned short __v = (*(volatile unsigned short *) (addr & 0x00ffffff)); __v; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: include/asm-h8300/io.h:46:
+    ({ unsigned short __v = (*(volatile unsigned short *) (addr & 0x00ffffff)); __v; })$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#947: FILE: include/asm-h8300/io.h:46:
+    ({ unsigned short __v = (*(volatile unsigned short *) (addr & 0x00ffffff)); __v; })

CHECK:SPACING: No space is necessary after a cast
#950: FILE: include/asm-h8300/io.h:48:
+    ({ unsigned int __v = (*(volatile unsigned int *) (addr & 0x00ffffff)); __v; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: include/asm-h8300/io.h:48:
+    ({ unsigned int __v = (*(volatile unsigned int *) (addr & 0x00ffffff)); __v; })$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#950: FILE: include/asm-h8300/io.h:48:
+    ({ unsigned int __v = (*(volatile unsigned int *) (addr & 0x00ffffff)); __v; })

CHECK:SPACING: No space is necessary after a cast
#955: FILE: include/asm-h8300/io.h:50:
+#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr & 0x00ffffff)) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#955: FILE: include/asm-h8300/io.h:50:
+#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr & 0x00ffffff)) = (b))
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#955: FILE: include/asm-h8300/io.h:50:
+#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr & 0x00ffffff)) = (b))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#955: FILE: include/asm-h8300/io.h:50:
+#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr & 0x00ffffff)) = (b))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#955: FILE: include/asm-h8300/io.h:50:
+#define writeb(b,addr) (void)((*(volatile unsigned char *) (addr & 0x00ffffff)) = (b))

CHECK:SPACING: No space is necessary after a cast
#956: FILE: include/asm-h8300/io.h:51:
+#define writew(b,addr) (void)((*(volatile unsigned short *) (addr & 0x00ffffff)) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: include/asm-h8300/io.h:51:
+#define writew(b,addr) (void)((*(volatile unsigned short *) (addr & 0x00ffffff)) = (b))
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#956: FILE: include/asm-h8300/io.h:51:
+#define writew(b,addr) (void)((*(volatile unsigned short *) (addr & 0x00ffffff)) = (b))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#956: FILE: include/asm-h8300/io.h:51:
+#define writew(b,addr) (void)((*(volatile unsigned short *) (addr & 0x00ffffff)) = (b))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#956: FILE: include/asm-h8300/io.h:51:
+#define writew(b,addr) (void)((*(volatile unsigned short *) (addr & 0x00ffffff)) = (b))

CHECK:SPACING: No space is necessary after a cast
#957: FILE: include/asm-h8300/io.h:52:
+#define writel(b,addr) (void)((*(volatile unsigned int *) (addr & 0x00ffffff)) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#957: FILE: include/asm-h8300/io.h:52:
+#define writel(b,addr) (void)((*(volatile unsigned int *) (addr & 0x00ffffff)) = (b))
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#957: FILE: include/asm-h8300/io.h:52:
+#define writel(b,addr) (void)((*(volatile unsigned int *) (addr & 0x00ffffff)) = (b))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#957: FILE: include/asm-h8300/io.h:52:
+#define writel(b,addr) (void)((*(volatile unsigned int *) (addr & 0x00ffffff)) = (b))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#957: FILE: include/asm-h8300/io.h:52:
+#define writel(b,addr) (void)((*(volatile unsigned int *) (addr & 0x00ffffff)) = (b))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1034: FILE: include/asm-h8300/local.h:1:
+#ifndef _H8300_LOCAL_H_

ERROR:CODE_INDENT: code indent should use tabs where possible
#1117: FILE: include/asm-h8300/processor.h:77:
+  ^I(_regs)->pc = (_pc);^I^I^I^I        \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1117: FILE: include/asm-h8300/processor.h:77:
+  ^I(_regs)->pc = (_pc);^I^I^I^I        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: include/asm-h8300/processor.h:77:
+  ^I(_regs)->pc = (_pc);^I^I^I^I        \$

ERROR:SPACING: space required before the open parenthesis '('
#1119: FILE: include/asm-h8300/processor.h:79:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_regs' - possible side-effects?
#1122: FILE: include/asm-h8300/processor.h:82:
+#define start_thread(_regs, _pc, _usp)			        \
+do {							        \
+	set_fs(USER_DS);           /* reads from user space */  \
 	(_regs)->pc = (_pc);				        \
+	(_regs)->ccr &= ~0x10;	   /* clear kernel flag */      \
+	(_regs)->exr = 0x78;       /* enable all interrupts */  \
+	/* 14 = space for retaddr(4), vector(4), er0(4) and ext(2) on stack */ \
+	wrusp(((unsigned long)(_usp)) - 14);                    \
 } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1192: FILE: include/asm-h8300/sections.h:1:
+#ifndef _H8300_SECTIONS_H_

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1206: FILE: include/asm-h8300/semaphore.h:54:
+static inline void sema_init (struct semaphore *sem, int val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1216: FILE: include/asm-h8300/semaphore.h:87:
+static inline void down(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1224: FILE: include/asm-h8300/semaphore.h:95:
+	count = &(sem->count);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: include/asm-h8300/semaphore.h:115:
+static inline void down(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1263: FILE: include/asm-h8300/semaphore.h:123:
+	count = &(sem->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1264: FILE: include/asm-h8300/semaphore.h:124:
+	__asm__ __volatile__(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1282: FILE: include/asm-h8300/semaphore.h:141:
+static inline int down_interruptible(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1291: FILE: include/asm-h8300/semaphore.h:149:
+	count = &(sem->count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1312: FILE: include/asm-h8300/semaphore.h:164:
+		: "=r" (count),"=m"(sem->count)
 		              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1319: FILE: include/asm-h8300/semaphore.h:171:
+static inline int down_interruptible(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1327: FILE: include/asm-h8300/semaphore.h:179:
+	count = &(sem->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1328: FILE: include/asm-h8300/semaphore.h:180:
+	__asm__ __volatile__(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1344: FILE: include/asm-h8300/semaphore.h:193:
+		: "=r" (count),"=m"(sem->count)
 		              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1354: FILE: include/asm-h8300/semaphore.h:201:
+static inline int down_trylock(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1363: FILE: include/asm-h8300/semaphore.h:209:
+	count = &(sem->count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1400: FILE: include/asm-h8300/semaphore.h:228:
+		: "=r" (count),"=m"(sem->count)
 		              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1407: FILE: include/asm-h8300/semaphore.h:235:
+static inline int down_trylock(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1415: FILE: include/asm-h8300/semaphore.h:243:
+	count = &(sem->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1416: FILE: include/asm-h8300/semaphore.h:244:
+	__asm__ __volatile__(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1433: FILE: include/asm-h8300/semaphore.h:261:
+		: "=r" (count),"=m"(sem->count)
 		              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1448: FILE: include/asm-h8300/semaphore.h:275:
+static inline void up(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1456: FILE: include/asm-h8300/semaphore.h:283:
+	count = &(sem->count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1489: FILE: include/asm-h8300/semaphore.h:302:
+static inline void up(struct semaphore * sem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sem->count
#1497: FILE: include/asm-h8300/semaphore.h:310:
+	count = &(sem->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1498: FILE: include/asm-h8300/semaphore.h:311:
+	__asm__ __volatile__(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1536: FILE: include/asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1536: FILE: include/asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prev' - possible side-effects?
#1536: FILE: include/asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev' may be better as '(prev)' to avoid precedence issues
#1536: FILE: include/asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'next' may be better as '(next)' to avoid precedence issues
#1536: FILE: include/asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1537: FILE: include/asm-h8300/system.h:40:
+  void *_last;^I^I^I^I^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1538: FILE: include/asm-h8300/system.h:41:
+  __asm__ __volatile__(^I^I^I^I^I    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1539: FILE: include/asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1539: FILE: include/asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1539: FILE: include/asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1541: FILE: include/asm-h8300/system.h:44:
+                        "mov.l  %3, er2\n\t"                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1541: FILE: include/asm-h8300/system.h:44:
+                        "mov.l  %3, er2\n\t"                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1543: FILE: include/asm-h8300/system.h:46:
+                        "mov.l  er2,%0\n\t"                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1543: FILE: include/asm-h8300/system.h:46:
+                        "mov.l  er2,%0\n\t"                 \$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around prev->thread
#1545: FILE: include/asm-h8300/system.h:48:
+		       : "r" (&(prev->thread)),		    \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around next->thread
#1546: FILE: include/asm-h8300/system.h:49:
+			 "r" (&(next->thread)),		    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1547: FILE: include/asm-h8300/system.h:50:
+                         "g" (prev)                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1547: FILE: include/asm-h8300/system.h:50:
+                         "g" (prev)                         \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1549: FILE: include/asm-h8300/system.h:52:
+  (last) = _last; ^I^I^I^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1549: FILE: include/asm-h8300/system.h:52:
+  (last) = _last; ^I^I^I^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1558: FILE: include/asm-h8300/system.h:60:
+       asm volatile ("stc ccr,r0l\n\tmov.l er0,%0":"=r" (x) : : "er0")$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1558: FILE: include/asm-h8300/system.h:60:
+       asm volatile ("stc ccr,r0l\n\tmov.l er0,%0":"=r" (x) : : "er0")
                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1577: FILE: include/asm-h8300/system.h:78:
+       asm volatile ("stc exr,r0l\n\tmov.l er0,%0":"=r" (x) : : "er0")$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1577: FILE: include/asm-h8300/system.h:78:
+       asm volatile ("stc exr,r0l\n\tmov.l er0,%0":"=r" (x) : : "er0")
                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1616: FILE: include/asm-h8300/target_time.h:3:
+extern void platform_gettod(unsigned int *year, unsigned int *mon, unsigned int *day, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/asm-h8300/target_time.h:3:
+extern void platform_gettod(unsigned int *year, unsigned int *mon, unsigned int *day, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1626: FILE: include/asm-h8300/thread_info.h:62:
+		: "g" (~(THREAD_SIZE-1))
 		                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1634: FILE: include/asm-h8300/tlb.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1634: FILE: include/asm-h8300/tlb.h:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: include/asm-h8300/tlb.h:2:
+  include/asm-h8300/tlb.h $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1635: FILE: include/asm-h8300/tlb.h:2:
+  include/asm-h8300/tlb.h 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1635: FILE: include/asm-h8300/tlb.h:2:
+/* 
+  include/asm-h8300/tlb.h 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#1641: FILE: include/asm-h8300/tlb.h:8:
+#define tlb_flush(tlb)	do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1643: FILE: include/asm-h8300/tlb.h:10:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1644: FILE: include/asm-h8300/tlb.h:11:
+  include/asm-h8300/tlb.h $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1644: FILE: include/asm-h8300/tlb.h:11:
+  include/asm-h8300/tlb.h 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1644: FILE: include/asm-h8300/tlb.h:11:
+/* 
+  include/asm-h8300/tlb.h 

ERROR:SPACING: space required before the open parenthesis '('
#1650: FILE: include/asm-h8300/tlb.h:17:
+#define tlb_flush(tlb)	do { } while(0)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1663: FILE: include/asm-h8300/traps.h:2:
+ *  linux/include/asm-h8300/traps.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1866: FILE: include/asm-h8300/traps.h:14:
+extern void system_call(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1867: FILE: include/asm-h8300/traps.h:15:
+extern void interrupt_entry(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1868: FILE: include/asm-h8300/traps.h:16:
+extern void trace_break(void);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1872: FILE: include/asm-h8300/traps.h:20:
+#define VECTOR(address) ((JMP_OP)|((unsigned long)address))
                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1873: FILE: include/asm-h8300/traps.h:21:
+#define REDIRECT(address) ((JSR_OP)|((unsigned long)address))
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1913: FILE: include/asm-h8300/uaccess.h:17:
+#define access_ok(type, addr, size) __access_ok((unsigned long)addr,size)
                                                                    ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1921: FILE: include/asm-h8300/uaccess.h:24:
+	return(RANGE_CHECK_OK(addr, size, 0L, (unsigned long)&_ramend));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1940: FILE: include/asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {^I^I       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1940: FILE: include/asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {^I^I       ^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1940: FILE: include/asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
+    errno = -__res;								\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1941: FILE: include/asm-h8300/unistd.h:411:
+    errno = -__res;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1942: FILE: include/asm-h8300/unistd.h:412:
+    __res = -1;^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1943: FILE: include/asm-h8300/unistd.h:413:
+  }^I^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1944: FILE: include/asm-h8300/unistd.h:414:
+  return (type)__res;^I^I^I^I^I^I^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1946: FILE: include/asm-h8300/unistd.h:416:
+^I^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1947: FILE: include/asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#1947: FILE: include/asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#1947: FILE: include/asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1947: FILE: include/asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#1947: FILE: include/asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

ERROR:CODE_INDENT: code indent should use tabs where possible
#1948: FILE: include/asm-h8300/unistd.h:418:
+                              etype, e, ftype, f)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1948: FILE: include/asm-h8300/unistd.h:418:
+                              etype, e, ftype, f)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1951: FILE: include/asm-h8300/unistd.h:421:
+  register long __res __asm__("er0");^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1952: FILE: include/asm-h8300/unistd.h:422:
+  __asm__ __volatile__ ("mov.l^Ier6,@-sp\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1953: FILE: include/asm-h8300/unistd.h:423:
+                        "mov.l^I%7, er6\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1953: FILE: include/asm-h8300/unistd.h:423:
+                        "mov.l^I%7, er6\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1954: FILE: include/asm-h8300/unistd.h:424:
+                        "mov.l^I%6, er5\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1954: FILE: include/asm-h8300/unistd.h:424:
+                        "mov.l^I%6, er5\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: include/asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1958: FILE: include/asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1958: FILE: include/asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1960: FILE: include/asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1960: FILE: include/asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1960: FILE: include/asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1961: FILE: include/asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1961: FILE: include/asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1961: FILE: include/asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000350696.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 146 errors, 106 warnings, 77 checks, 1801 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000350696.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
