WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
--- 2-pre3.1/scripts/mkdep.c Fri, 05 Jan 2001 13:42:29 +1100 kaos (linux-2.4/12_mkdep.c 1.1 644)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#69: FILE: scripts/mkdep.c:56:
 };
+struct path_struct *path_array;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: scripts/mkdep.c:190:
+void handle_include(int start, const char * name, int len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#95: FILE: scripts/mkdep.c:201:
+	for (i = start, path = path_array+start; i < paths; ++i, ++path) {
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#96: FILE: scripts/mkdep.c:202:
+		memcpy(path->buffer+path->len, name, len);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#97: FILE: scripts/mkdep.c:203:
+		path->buffer[path->len+len] = '\0';
 		                      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#107: FILE: scripts/mkdep.c:211:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#109: FILE: scripts/mkdep.c:213:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: scripts/mkdep.c:218:
+void add_path(const char * name)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#117: FILE: scripts/mkdep.c:221:
+	char resolved_path[PATH_MAX+1];
 	                           ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#127: FILE: scripts/mkdep.c:231:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#127: FILE: scripts/mkdep.c:231:
+	else {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#131: FILE: scripts/mkdep.c:235:
+	path_array = realloc(path_array, (++paths)*sizeof(*path_array));
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: scripts/mkdep.c:241:
+	path = path_array+paths-1;
 	                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: scripts/mkdep.c:241:
+	path = path_array+paths-1;
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: scripts/mkdep.c:243:
+	path->buffer = malloc(path->len+1+256+1);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: scripts/mkdep.c:243:
+	path->buffer = malloc(path->len+1+256+1);
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: scripts/mkdep.c:243:
+	path->buffer = malloc(path->len+1+256+1);
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: scripts/mkdep.c:249:
+	if (path->len && *(path->buffer+path->len-1) != '/') {
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#145: FILE: scripts/mkdep.c:249:
+	if (path->len && *(path->buffer+path->len-1) != '/') {
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: scripts/mkdep.c:250:
+		*(path->buffer+path->len) = '/';
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: scripts/mkdep.c:251:
+		*(path->buffer+(++(path->len))) = '\0';
 		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: scripts/mkdep.c:265:
+	pc = path_array[paths-1].buffer + path_array[paths-1].len;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: scripts/mkdep.c:265:
+	pc = path_array[paths-1].buffer + path_array[paths-1].len;
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#166: FILE: scripts/mkdep.c:283:
+	printf(" \\\n   $(wildcard %s.h)", path_array[paths-1].buffer);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: scripts/mkdep.c:592:
+			if (*((*argv)+2)) {
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: scripts/mkdep.c:593:
+				add_path((*argv)+2);
 				                ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#215: FILE: scripts/mkdep.c:595:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: scripts/mkdep.c:595:
+			else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#221: FILE: scripts/mkdep.c:601:
+		}
+		else if (strcmp(*argv, "--") == 0) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000549981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 1 warnings, 24 checks, 238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000549981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
