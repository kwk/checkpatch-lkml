ERROR:SPACING: space required after that ',' (ctx:OxV)
#153: FILE: include/linux/fs.h:214:
+typedef int (get_block_t)(struct inode*,sector_t,struct buffer_head*,int);
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: include/linux/fs.h:214:
+typedef int (get_block_t)(struct inode*,sector_t,struct buffer_head*,int);
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#153: FILE: include/linux/fs.h:214:
+typedef int (get_block_t)(struct inode*,sector_t,struct buffer_head*,int);
                                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: drivers/block/ll_rw_blk.c:1432:
+	BUG_ON(!buffer_locked(bh));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#625: FILE: fs/buffer.c:158:
+	if (uptodate)
 	    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#637: FILE: fs/buffer.c:522:
+	if (uptodate)
 	    ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <BH_JBDDirty>
#937: FILE: fs/jbd/transaction.c:1550:
+	if (test_and_clear_bit(BH_JBDDirty, &jh2bh(jh)->b_state))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#964: FILE: fs/jbd/transaction.c:1977:
+		if (test_clear_buffer_dirty(jh2bh(jh))) {
 			set_bit(BH_JBDDirty, &jh2bh(jh)->b_state);
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: fs/reiserfs/inode.c:401:
+    set_buffer_uptodate (bh_result);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#984: FILE: fs/reiserfs/inode.c:401:
+    set_buffer_uptodate (bh_result);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1020: FILE: fs/reiserfs/inode.c:772:
+	    set_buffer_uptodate (unbh);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: fs/reiserfs/inode.c:1854:
+        set_buffer_uptodate(bh_result);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: fs/reiserfs/inode.c:1854:
+        set_buffer_uptodate(bh_result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1047: FILE: fs/reiserfs/inode.c:1874:
+        set_buffer_uptodate(bh_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: fs/reiserfs/inode.c:1874:
+        set_buffer_uptodate(bh_result);$

WARNING:SPACING: space prohibited before semicolon
#1057: FILE: fs/reiserfs/inode.c:1924:
+	clear_buffer_dirty(bh) ;

WARNING:SPACING: space prohibited before semicolon
#1058: FILE: fs/reiserfs/inode.c:1925:
+	set_buffer_uptodate(bh) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1069: FILE: fs/reiserfs/do_balan.c:51:
+	if (!test_set_buffer_dirty(bh)) {
[...]
 	    tb->need_balance_dirty = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: fs/reiserfs/do_balan.c:1228:
+    set_buffer_uptodate(first_b);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: fs/reiserfs/do_balan.c:1275:
+    clear_buffer_dirty(bh);$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1230: FILE: fs/jbd/commit.c:32:
+	if (uptodate)
 	    ^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1338: FILE: fs/reiserfs/journal.c:126:
   if (bh)
+    clear_buffer_dirty(bh);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: fs/reiserfs/journal.c:127:
+    clear_buffer_dirty(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: fs/reiserfs/journal.c:850:
+    set_buffer_dirty(SB_JOURNAL(p_s_sb)->j_header_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1349: FILE: fs/reiserfs/journal.c:850:
+    set_buffer_dirty(SB_JOURNAL(p_s_sb)->j_header_bh) ;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1358: FILE: fs/reiserfs/journal.c:896:
+    if (uptodate)
         ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: fs/reiserfs/journal.c:896:
+    if (uptodate)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1359: FILE: fs/reiserfs/journal.c:897:
+    ^Iset_buffer_uptodate(bh) ;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1359: FILE: fs/reiserfs/journal.c:897:
+    ^Iset_buffer_uptodate(bh) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: fs/reiserfs/journal.c:897:
+    ^Iset_buffer_uptodate(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1359: FILE: fs/reiserfs/journal.c:897:
+    	set_buffer_uptodate(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1360: FILE: fs/reiserfs/journal.c:898:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1361: FILE: fs/reiserfs/journal.c:899:
+    ^Iclear_buffer_uptodate(bh) ;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1361: FILE: fs/reiserfs/journal.c:899:
+    ^Iclear_buffer_uptodate(bh) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: fs/reiserfs/journal.c:899:
+    ^Iclear_buffer_uptodate(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1361: FILE: fs/reiserfs/journal.c:899:
+    	clear_buffer_uptodate(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1370: FILE: fs/reiserfs/journal.c:908:
+    clear_buffer_dirty(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1370: FILE: fs/reiserfs/journal.c:908:
+    clear_buffer_dirty(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: fs/reiserfs/journal.c:1571:
+    set_buffer_uptodate(real_blocks[i]) ;$

WARNING:SPACING: space prohibited before semicolon
#1379: FILE: fs/reiserfs/journal.c:1571:
+    set_buffer_uptodate(real_blocks[i]) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1383: FILE: fs/reiserfs/journal.c:1575:
   for (i = 0 ; i < le32_to_cpu(desc->j_len) ; i++) {
+    set_buffer_dirty(real_blocks[i]) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: fs/reiserfs/journal.c:1576:
+    set_buffer_dirty(real_blocks[i]) ;$

WARNING:SPACING: space prohibited before semicolon
#1385: FILE: fs/reiserfs/journal.c:1576:
+    set_buffer_dirty(real_blocks[i]) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1392: FILE: fs/reiserfs/journal.c:2394:
   if (buffer_dirty(bh)) {
+    clear_buffer_dirty(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: fs/reiserfs/journal.c:2395:
+    clear_buffer_dirty(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1394: FILE: fs/reiserfs/journal.c:2395:
+    clear_buffer_dirty(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1403: FILE: fs/reiserfs/journal.c:2985:
+  set_buffer_uptodate(d_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1403: FILE: fs/reiserfs/journal.c:2985:
+  set_buffer_uptodate(d_bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: fs/reiserfs/journal.c:2997:
+  set_buffer_uptodate(c_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1412: FILE: fs/reiserfs/journal.c:2997:
+  set_buffer_uptodate(c_bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1421: FILE: fs/reiserfs/journal.c:3085:
+      set_buffer_uptodate(tmp_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1421: FILE: fs/reiserfs/journal.c:3085:
+      set_buffer_uptodate(tmp_bh) ;

ERROR:SPACING: space prohibited after that open parenthesis '('
#1565: FILE: fs/ufs/util.c:113:
+		for ( i = 0; i < ubh->count; i++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1565: FILE: fs/ufs/util.c:113:
+		for ( i = 0; i < ubh->count; i++ )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1566: FILE: fs/ufs/util.c:114:
+			set_buffer_uptodate (ubh->bh[i]);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1568: FILE: fs/ufs/util.c:116:
+		for ( i = 0; i < ubh->count; i++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1568: FILE: fs/ufs/util.c:116:
+		for ( i = 0; i < ubh->count; i++ )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1569: FILE: fs/ufs/util.c:117:
+			clear_buffer_uptodate (ubh->bh[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1601: FILE: fs/reiserfs/tail_conversion.c:144:
+    clear_buffer_dirty(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1601: FILE: fs/reiserfs/tail_conversion.c:144:
+    clear_buffer_dirty(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1606: FILE: fs/reiserfs/tail_conversion.c:146:
+    clear_buffer_mapped(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1606: FILE: fs/reiserfs/tail_conversion.c:146:
+    clear_buffer_mapped(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1607: FILE: fs/reiserfs/tail_conversion.c:147:
+    clear_buffer_req(bh) ;$

WARNING:SPACING: space prohibited before semicolon
#1607: FILE: fs/reiserfs/tail_conversion.c:147:
+    clear_buffer_req(bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1608: FILE: fs/reiserfs/tail_conversion.c:148:
+    clear_buffer_new(bh);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1615: FILE: include/linux/buffer_head.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1616: FILE: include/linux/buffer_head.h:2:
+ * include/linux/buffer_head.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1644: FILE: include/linux/buffer_head.h:30:
+typedef void (bh_end_io_t)(struct buffer_head *bh, int uptodate);
                                                        ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: include/linux/buffer_head.h:36:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1653: FILE: include/linux/buffer_head.h:39:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1669: FILE: include/linux/buffer_head.h:55:
+	char * b_data;			/* pointer to data block */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1671: FILE: include/linux/buffer_head.h:57:
+ ^Ivoid *b_private;^I^I/* reserved for b_end_io */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1671: FILE: include/linux/buffer_head.h:57:
+ ^Ivoid *b_private;^I^I/* reserved for b_end_io */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1671: FILE: include/linux/buffer_head.h:57:
+ ^Ivoid *b_private;^I^I/* reserved for b_end_io */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1678: FILE: include/linux/buffer_head.h:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Uptodate' may be misspelled - perhaps 'Up-to-date'?
#1710: FILE: include/linux/buffer_head.h:96:
+BUFFER_FNS(Uptodate, uptodate)
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1710: FILE: include/linux/buffer_head.h:96:
+BUFFER_FNS(Uptodate, uptodate)
                      ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Uptodate>
#1710: FILE: include/linux/buffer_head.h:96:
+BUFFER_FNS(Uptodate, uptodate)

CHECK:CAMELCASE: Avoid CamelCase: <Dirty>
#1711: FILE: include/linux/buffer_head.h:97:
+BUFFER_FNS(Dirty, dirty)

CHECK:CAMELCASE: Avoid CamelCase: <Lock>
#1713: FILE: include/linux/buffer_head.h:99:
+BUFFER_FNS(Lock, locked)

CHECK:CAMELCASE: Avoid CamelCase: <Req>
#1715: FILE: include/linux/buffer_head.h:101:
+BUFFER_FNS(Req, req)

CHECK:CAMELCASE: Avoid CamelCase: <Mapped>
#1716: FILE: include/linux/buffer_head.h:102:
+BUFFER_FNS(Mapped, mapped)

CHECK:CAMELCASE: Avoid CamelCase: <New>
#1717: FILE: include/linux/buffer_head.h:103:
+BUFFER_FNS(New, new)

CHECK:CAMELCASE: Avoid CamelCase: <Async>
#1718: FILE: include/linux/buffer_head.h:104:
+BUFFER_FNS(Async, async)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bh' may be better as '(bh)' to avoid precedence issues
#1730: FILE: include/linux/buffer_head.h:116:
+#define touch_buffer(bh)	mark_page_accessed(bh->b_page)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1733: FILE: include/linux/buffer_head.h:119:
+#define page_buffers(page)					\
+	({							\
+		if (!PagePrivate(page))				\
+			BUG();					\
+		((struct buffer_head *)(page)->private);	\
+	})

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1736: FILE: include/linux/buffer_head.h:122:
+			BUG();					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1740: FILE: include/linux/buffer_head.h:126:
+#define set_page_buffers(page, buffers)				\
+	do {							\
+		SetPagePrivate(page);				\
+		page->private = (unsigned long)buffers;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1745: FILE: include/linux/buffer_head.h:131:
+#define clear_page_buffers(page)				\
+	do {							\
+		ClearPagePrivate(page);				\
+		page->private = 0;				\
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1754: FILE: include/linux/buffer_head.h:140:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1761: FILE: include/linux/buffer_head.h:147:
+void init_buffer(struct buffer_head *, bh_end_io_t *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bh_end_io_t *' should also have an identifier name
#1761: FILE: include/linux/buffer_head.h:147:
+void init_buffer(struct buffer_head *, bh_end_io_t *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1761: FILE: include/linux/buffer_head.h:147:
+void init_buffer(struct buffer_head *, bh_end_io_t *, void *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1763: FILE: include/linux/buffer_head.h:149:
+void set_bh_page(struct buffer_head *bh,
+		struct page *page, unsigned long offset);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1764: FILE: include/linux/buffer_head.h:150:
+int try_to_free_buffers(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1765: FILE: include/linux/buffer_head.h:151:
+void create_empty_buffers(struct page *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1765: FILE: include/linux/buffer_head.h:151:
+void create_empty_buffers(struct page *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1766: FILE: include/linux/buffer_head.h:152:
+void create_empty_buffers(struct page *, unsigned long,
+			unsigned long b_state);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1767: FILE: include/linux/buffer_head.h:153:
+void end_buffer_io_sync(struct buffer_head *bh, int uptodate);
                                                     ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1768: FILE: include/linux/buffer_head.h:154:
+void buffer_insert_list(spinlock_t *lock,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#1768: FILE: include/linux/buffer_head.h:154:
+void buffer_insert_list(spinlock_t *lock,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1771: FILE: include/linux/buffer_head.h:157:
+
+

WARNING:SPACING: space prohibited before semicolon
#1773: FILE: include/linux/buffer_head.h:159:
+void set_buffer_async_io(struct buffer_head *bh) ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1774: FILE: include/linux/buffer_head.h:160:
+void invalidate_inode_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1775: FILE: include/linux/buffer_head.h:161:
+void invalidate_bdev(struct block_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1775: FILE: include/linux/buffer_head.h:161:
+void invalidate_bdev(struct block_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1776: FILE: include/linux/buffer_head.h:162:
+void __invalidate_buffers(kdev_t dev, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1777: FILE: include/linux/buffer_head.h:163:
+int sync_buffers(struct block_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1777: FILE: include/linux/buffer_head.h:163:
+int sync_buffers(struct block_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1778: FILE: include/linux/buffer_head.h:164:
+void __wait_on_buffer(struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#1779: FILE: include/linux/buffer_head.h:165:
+int fsync_dev(kdev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1780: FILE: include/linux/buffer_head.h:166:
+int fsync_bdev(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1781: FILE: include/linux/buffer_head.h:167:
+int fsync_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1782: FILE: include/linux/buffer_head.h:168:
+int fsync_no_super(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#1783: FILE: include/linux/buffer_head.h:169:
+int fsync_buffers_list(spinlock_t *lock, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1784: FILE: include/linux/buffer_head.h:170:
+int inode_has_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1785: FILE: include/linux/buffer_head.h:171:
+struct buffer_head *__get_hash_table(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1785: FILE: include/linux/buffer_head.h:171:
+struct buffer_head *__get_hash_table(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1785: FILE: include/linux/buffer_head.h:171:
+struct buffer_head *__get_hash_table(struct block_device *, sector_t, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1786: FILE: include/linux/buffer_head.h:172:
+struct buffer_head * __getblk(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1786: FILE: include/linux/buffer_head.h:172:
+struct buffer_head * __getblk(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1786: FILE: include/linux/buffer_head.h:172:
+struct buffer_head * __getblk(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1786: FILE: include/linux/buffer_head.h:172:
+struct buffer_head * __getblk(struct block_device *, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1787: FILE: include/linux/buffer_head.h:173:
+void __brelse(struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1788: FILE: include/linux/buffer_head.h:174:
+void __bforget(struct buffer_head *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1789: FILE: include/linux/buffer_head.h:175:
+struct buffer_head * __bread(struct block_device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1789: FILE: include/linux/buffer_head.h:175:
+struct buffer_head * __bread(struct block_device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1789: FILE: include/linux/buffer_head.h:175:
+struct buffer_head * __bread(struct block_device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1789: FILE: include/linux/buffer_head.h:175:
+struct buffer_head * __bread(struct block_device *, int, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1792: FILE: include/linux/buffer_head.h:178:
+void free_buffer_head(struct buffer_head * bh);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1793: FILE: include/linux/buffer_head.h:179:
+int brw_page(int, struct page *, struct block_device *, sector_t [], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1793: FILE: include/linux/buffer_head.h:179:
+int brw_page(int, struct page *, struct block_device *, sector_t [], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1793: FILE: include/linux/buffer_head.h:179:
+int brw_page(int, struct page *, struct block_device *, sector_t [], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t []' should also have an identifier name
#1793: FILE: include/linux/buffer_head.h:179:
+int brw_page(int, struct page *, struct block_device *, sector_t [], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1793: FILE: include/linux/buffer_head.h:179:
+int brw_page(int, struct page *, struct block_device *, sector_t [], int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1800: FILE: include/linux/buffer_head.h:186:
+int try_to_release_page(struct page * page, int gfp_mask);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1802: FILE: include/linux/buffer_head.h:188:
+int block_symlink(struct inode *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1802: FILE: include/linux/buffer_head.h:188:
+int block_symlink(struct inode *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1802: FILE: include/linux/buffer_head.h:188:
+int block_symlink(struct inode *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#1803: FILE: include/linux/buffer_head.h:189:
+int block_write_full_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#1803: FILE: include/linux/buffer_head.h:189:
+int block_write_full_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#1804: FILE: include/linux/buffer_head.h:190:
+int block_read_full_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#1804: FILE: include/linux/buffer_head.h:190:
+int block_read_full_page(struct page*, get_block_t*);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#1805: FILE: include/linux/buffer_head.h:191:
+int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1806: FILE: include/linux/buffer_head.h:192:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1807: FILE: include/linux/buffer_head.h:193:
+int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,
+				unsigned long *);

WARNING:SPACING: space prohibited before semicolon
#1808: FILE: include/linux/buffer_head.h:194:
+int generic_cont_expand(struct inode *inode, loff_t size) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1809: FILE: include/linux/buffer_head.h:195:
+int block_commit_write(struct page *page, unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1809: FILE: include/linux/buffer_head.h:195:
+int block_commit_write(struct page *page, unsigned from, unsigned to);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1810: FILE: include/linux/buffer_head.h:196:
+int block_sync_page(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#1811: FILE: include/linux/buffer_head.h:197:
+sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1811: FILE: include/linux/buffer_head.h:197:
+sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#1811: FILE: include/linux/buffer_head.h:197:
+sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1812: FILE: include/linux/buffer_head.h:198:
+int generic_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#1813: FILE: include/linux/buffer_head.h:199:
+int block_truncate_page(struct address_space *, loff_t, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1813: FILE: include/linux/buffer_head.h:199:
+int block_truncate_page(struct address_space *, loff_t, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#1813: FILE: include/linux/buffer_head.h:199:
+int block_truncate_page(struct address_space *, loff_t, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiobuf *' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#1814: FILE: include/linux/buffer_head.h:200:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: include/linux/buffer_head.h:201:
+int generic_direct_IO(int, struct inode *, struct kiobuf *,
+			unsigned long, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1816: FILE: include/linux/buffer_head.h:202:
+int file_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1816: FILE: include/linux/buffer_head.h:202:
+int file_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1816: FILE: include/linux/buffer_head.h:202:
+int file_fsync(struct file *, struct dentry *, int);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1818: FILE: include/linux/buffer_head.h:204:
+#define OSYNC_METADATA	(1<<0)
                       	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1818: FILE: include/linux/buffer_head.h:204:
+#define OSYNC_METADATA	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1819: FILE: include/linux/buffer_head.h:205:
+#define OSYNC_DATA	(1<<1)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1819: FILE: include/linux/buffer_head.h:205:
+#define OSYNC_DATA	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1820: FILE: include/linux/buffer_head.h:206:
+#define OSYNC_INODE	(1<<2)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1820: FILE: include/linux/buffer_head.h:206:
+#define OSYNC_INODE	(1<<2)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1823: FILE: include/linux/buffer_head.h:209:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1828: FILE: include/linux/buffer_head.h:214:
+static inline void get_bh(struct buffer_head * bh)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1830: FILE: include/linux/buffer_head.h:216:
+        atomic_inc(&(bh)->b_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1830: FILE: include/linux/buffer_head.h:216:
+        atomic_inc(&(bh)->b_count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1835: FILE: include/linux/buffer_head.h:221:
+        smp_mb__before_atomic_dec();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1835: FILE: include/linux/buffer_head.h:221:
+        smp_mb__before_atomic_dec();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1836: FILE: include/linux/buffer_head.h:222:
+        atomic_dec(&bh->b_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1836: FILE: include/linux/buffer_head.h:222:
+        atomic_dec(&bh->b_count);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1844: FILE: include/linux/buffer_head.h:230:
+	buffer_insert_list(&inode->i_bufferlist_lock,
+			bh, &inode->i_dirty_buffers);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1850: FILE: include/linux/buffer_head.h:236:
+ * uptodate, and it notifys the upper layer about the end
    ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1853: FILE: include/linux/buffer_head.h:239:
+static inline void buffer_IO_error(struct buffer_head * bh)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1876: FILE: include/linux/buffer_head.h:262:
+	struct buffer_head *bh;
+	bdev = bdget(kdev_t_to_nr(dev));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1878: FILE: include/linux/buffer_head.h:264:
+		printk("No block device for %s\n", bdevname(dev));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1879: FILE: include/linux/buffer_head.h:265:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1886: FILE: include/linux/buffer_head.h:272:
+static inline struct buffer_head * getblk(kdev_t dev, sector_t block, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1890: FILE: include/linux/buffer_head.h:276:
+	struct buffer_head *bh;
+	bdev = bdget(kdev_t_to_nr(dev));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1892: FILE: include/linux/buffer_head.h:278:
+		printk("No block device for %s\n", bdevname(dev));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1893: FILE: include/linux/buffer_head.h:279:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1916: FILE: include/linux/buffer_head.h:302:
+	struct buffer_head *bh;
+	bdev = bdget(kdev_t_to_nr(dev));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1918: FILE: include/linux/buffer_head.h:304:
+		printk("No block device for %s\n", bdevname(dev));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1919: FILE: include/linux/buffer_head.h:305:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1926: FILE: include/linux/buffer_head.h:312:
+static inline struct buffer_head * sb_bread(struct super_block *sb, int block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1931: FILE: include/linux/buffer_head.h:317:
+static inline struct buffer_head * sb_getblk(struct super_block *sb, int block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1951: FILE: include/linux/buffer_head.h:337:
+static inline void wait_on_buffer(struct buffer_head * bh)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1957: FILE: include/linux/buffer_head.h:343:
+static inline void lock_buffer(struct buffer_head * bh)

CHECK:CAMELCASE: Avoid CamelCase: <JBDDirty>
#1983: FILE: include/linux/jbd.h:237:
+BUFFER_FNS(JBDDirty, jbddirty)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462337.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 158 warnings, 28 checks, 1867 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462337.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
