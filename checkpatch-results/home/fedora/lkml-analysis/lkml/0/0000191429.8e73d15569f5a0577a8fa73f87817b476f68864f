WARNING:TYPO_SPELLING: 'plase' may be misspelled - perhaps 'please'?
#27: 
plase apply.
^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#49: FILE: include/asm-h8300/page.h:92:
+#define pfn_valid(page)	        (page < max_mapnr)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#215: FILE: include/asm-h8300/unistd.h:313:
+#define _syscall0(type, name)				\
+type name(void)						\
+{							\
+  register long __res __asm__("er0");			\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name)		\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/asm-h8300/unistd.h:316:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/asm-h8300/unistd.h:317:
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: include/asm-h8300/unistd.h:318:
+                        "trapa^I#0\n\t"^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/asm-h8300/unistd.h:318:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: include/asm-h8300/unistd.h:322:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#227: FILE: include/asm-h8300/unistd.h:325:
+#define _syscall1(type, name, atype, a)			\
+type name(atype a)					\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  _a = (long)a;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a)			\
+			: "cc", "memory");	 	\
+  __syscall_return(type, __res);			\
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/asm-h8300/unistd.h:328:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/asm-h8300/unistd.h:329:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/asm-h8300/unistd.h:330:
+  _a = (long)a;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: include/asm-h8300/unistd.h:331:
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: include/asm-h8300/unistd.h:332:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: include/asm-h8300/unistd.h:332:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: include/asm-h8300/unistd.h:336:
+^I^I^I: "cc", "memory");^I ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: include/asm-h8300/unistd.h:337:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#242: FILE: include/asm-h8300/unistd.h:340:
+#define _syscall2(type, name, atype, a, btype, b)	\
+type name(atype a, btype b)				\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b)			\
+			: "cc", "memory");	 	\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#242: FILE: include/asm-h8300/unistd.h:340:
+#define _syscall2(type, name, atype, a, btype, b)	\
+type name(atype a, btype b)				\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b)			\
+			: "cc", "memory");	 	\
+  __syscall_return(type, __res);			\
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/asm-h8300/unistd.h:343:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/asm-h8300/unistd.h:344:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: include/asm-h8300/unistd.h:345:
+  register long _b __asm__("er2");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/asm-h8300/unistd.h:346:
+  _a = (long)a;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/asm-h8300/unistd.h:347:
+  _b = (long)b;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/asm-h8300/unistd.h:348:
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: include/asm-h8300/unistd.h:349:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: include/asm-h8300/unistd.h:349:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: include/asm-h8300/unistd.h:354:
+^I^I^I: "cc", "memory");^I ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: include/asm-h8300/unistd.h:355:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#260: FILE: include/asm-h8300/unistd.h:358:
+#define _syscall3(type, name, atype, a, btype, b, ctype, c)	\
+type name(atype a, btype b, ctype c)			\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#260: FILE: include/asm-h8300/unistd.h:358:
+#define _syscall3(type, name, atype, a, btype, b, ctype, c)	\
+type name(atype a, btype b, ctype c)			\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#260: FILE: include/asm-h8300/unistd.h:358:
+#define _syscall3(type, name, atype, a, btype, b, ctype, c)	\
+type name(atype a, btype b, ctype c)			\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: include/asm-h8300/unistd.h:361:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: include/asm-h8300/unistd.h:362:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/asm-h8300/unistd.h:363:
+  register long _b __asm__("er2");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: include/asm-h8300/unistd.h:364:
+  register long _c __asm__("er3");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: include/asm-h8300/unistd.h:365:
+  _a = (long)a;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: include/asm-h8300/unistd.h:366:
+  _b = (long)b;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: include/asm-h8300/unistd.h:367:
+  _c = (long)c;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: include/asm-h8300/unistd.h:368:
+  __asm__ __volatile__ ("mov.l %1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: include/asm-h8300/unistd.h:369:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/asm-h8300/unistd.h:369:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: include/asm-h8300/unistd.h:376:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#281: FILE: include/asm-h8300/unistd.h:379:
+#define _syscall4(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d)			\
+type name(atype a, btype b, ctype c, dtype d)		\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  _d = (long)d;						\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#281: FILE: include/asm-h8300/unistd.h:379:
+#define _syscall4(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d)			\
+type name(atype a, btype b, ctype c, dtype d)		\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  _d = (long)d;						\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#281: FILE: include/asm-h8300/unistd.h:379:
+#define _syscall4(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d)			\
+type name(atype a, btype b, ctype c, dtype d)		\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  _d = (long)d;						\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#281: FILE: include/asm-h8300/unistd.h:379:
+#define _syscall4(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d)			\
+type name(atype a, btype b, ctype c, dtype d)		\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  _a = (long)a;						\
+  _b = (long)b;						\
+  _c = (long)c;						\
+  _d = (long)d;						\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: include/asm-h8300/unistd.h:380:
+                  ctype, c, dtype, d)^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/asm-h8300/unistd.h:380:
+                  ctype, c, dtype, d)^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/asm-h8300/unistd.h:383:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/asm-h8300/unistd.h:384:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/asm-h8300/unistd.h:385:
+  register long _b __asm__("er2");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/asm-h8300/unistd.h:386:
+  register long _c __asm__("er3");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/asm-h8300/unistd.h:387:
+  register long _d __asm__("er4");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: include/asm-h8300/unistd.h:388:
+  _a = (long)a;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/asm-h8300/unistd.h:389:
+  _b = (long)b;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: include/asm-h8300/unistd.h:390:
+  _c = (long)c;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: include/asm-h8300/unistd.h:391:
+  _d = (long)d;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: include/asm-h8300/unistd.h:392:
+  __asm__ __volatile__ ("mov.l^I%1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: include/asm-h8300/unistd.h:393:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: include/asm-h8300/unistd.h:393:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: include/asm-h8300/unistd.h:401:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#306: FILE: include/asm-h8300/unistd.h:404:
+#define _syscall5(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e)		\
+type name(atype a, btype b, ctype c, dtype d, etype e)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#306: FILE: include/asm-h8300/unistd.h:404:
+#define _syscall5(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e)		\
+type name(atype a, btype b, ctype c, dtype d, etype e)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#306: FILE: include/asm-h8300/unistd.h:404:
+#define _syscall5(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e)		\
+type name(atype a, btype b, ctype c, dtype d, etype e)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#306: FILE: include/asm-h8300/unistd.h:404:
+#define _syscall5(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e)		\
+type name(atype a, btype b, ctype c, dtype d, etype e)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#306: FILE: include/asm-h8300/unistd.h:404:
+#define _syscall5(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e)		\
+type name(atype a, btype b, ctype c, dtype d, etype e)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: include/asm-h8300/unistd.h:405:
+                  ctype, c, dtype, d, etype, e)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: include/asm-h8300/unistd.h:405:
+                  ctype, c, dtype, d, etype, e)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: include/asm-h8300/unistd.h:408:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: include/asm-h8300/unistd.h:409:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: include/asm-h8300/unistd.h:410:
+  register long _b __asm__("er2");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: include/asm-h8300/unistd.h:411:
+  register long _c __asm__("er3");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: include/asm-h8300/unistd.h:412:
+  register long _d __asm__("er4");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: include/asm-h8300/unistd.h:413:
+  register long _e __asm__("er5");^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: include/asm-h8300/unistd.h:414:
+  _a = (long)a;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/asm-h8300/unistd.h:414:
+  _a = (long)a;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: include/asm-h8300/unistd.h:415:
+  _b = (long)b;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/asm-h8300/unistd.h:415:
+  _b = (long)b;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#318: FILE: include/asm-h8300/unistd.h:416:
+  _c = (long)c;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: include/asm-h8300/unistd.h:416:
+  _c = (long)c;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: include/asm-h8300/unistd.h:417:
+  _d = (long)d;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/asm-h8300/unistd.h:417:
+  _d = (long)d;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: include/asm-h8300/unistd.h:418:
+  _e = (long)e;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: include/asm-h8300/unistd.h:418:
+  _e = (long)e;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: include/asm-h8300/unistd.h:419:
+  __asm__ __volatile__ ("mov.l^I%1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: include/asm-h8300/unistd.h:420:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: include/asm-h8300/unistd.h:420:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/asm-h8300/unistd.h:429:
+  __syscall_return(type, __res);^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#334: FILE: include/asm-h8300/unistd.h:432:
+#define _syscall6(type, name, atype, a, btype, b,	\
+                  ctype, c, dtype, d, etype, e, ftype, f)	\
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)	\
+{							\
+  register long __res __asm__("er0");			\
+  register long _a __asm__("er1");			\
+  register long _b __asm__("er2");			\
+  register long _c __asm__("er3");			\
+  register long _d __asm__("er4");			\
+  register long _e __asm__("er5");			\
+  register long _f __asm__("er6");			\
+  _a = (long)a;                                       	\
+  _b = (long)b;                                       	\
+  _c = (long)c;                                       	\
+  _d = (long)d;                                       	\
+  _e = (long)e;                                       	\
+  _f = (long)f;                                       	\
+  __asm__ __volatile__ ("mov.l	%1,er0\n\t"		\
+                        "trapa	#0\n\t"			\
+			: "=r" (__res)			\
+			: "g" (__NR_##name),		\
+			  "g" (_a),			\
+			  "g" (_b),			\
+			  "g" (_c),			\
+			  "g" (_d),			\
+			  "g" (_e)			\
+			  "g" (_f)			\
+			: "cc", "memory");		\
+  __syscall_return(type, __res);			\
 }

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: include/asm-h8300/unistd.h:433:
+                  ctype, c, dtype, d, etype, e, ftype, f)^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: include/asm-h8300/unistd.h:433:
+                  ctype, c, dtype, d, etype, e, ftype, f)^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: include/asm-h8300/unistd.h:436:
+  register long __res __asm__("er0");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: include/asm-h8300/unistd.h:437:
+  register long _a __asm__("er1");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: include/asm-h8300/unistd.h:438:
+  register long _b __asm__("er2");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: include/asm-h8300/unistd.h:439:
+  register long _c __asm__("er3");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: include/asm-h8300/unistd.h:440:
+  register long _d __asm__("er4");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/asm-h8300/unistd.h:441:
+  register long _e __asm__("er5");^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/asm-h8300/unistd.h:442:
+  register long _f __asm__("er6");^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: include/asm-h8300/unistd.h:443:
+  _a = (long)a;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: include/asm-h8300/unistd.h:443:
+  _a = (long)a;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: include/asm-h8300/unistd.h:444:
+  _b = (long)b;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: include/asm-h8300/unistd.h:444:
+  _b = (long)b;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: include/asm-h8300/unistd.h:445:
+  _c = (long)c;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: include/asm-h8300/unistd.h:445:
+  _c = (long)c;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: include/asm-h8300/unistd.h:446:
+  _d = (long)d;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: include/asm-h8300/unistd.h:446:
+  _d = (long)d;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#349: FILE: include/asm-h8300/unistd.h:447:
+  _e = (long)e;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: include/asm-h8300/unistd.h:447:
+  _e = (long)e;                                       ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#350: FILE: include/asm-h8300/unistd.h:448:
+  _f = (long)f;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: include/asm-h8300/unistd.h:448:
+  _f = (long)f;                                       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: include/asm-h8300/unistd.h:449:
+  __asm__ __volatile__ ("mov.l^I%1,er0\n\t"^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: include/asm-h8300/unistd.h:450:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: include/asm-h8300/unistd.h:450:
+                        "trapa^I#0\n\t"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: include/asm-h8300/unistd.h:460:
+  __syscall_return(type, __res);^I^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 87 warnings, 22 checks, 327 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
