CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 1024'
#63: FILE: net/ipv4/tcp.c:1137:
+	if ((len > 1024) && !(flags & MSG_PEEK) && !sysctl_tcp_low_latency) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: net/ipv4/tcp.c:1147:
+^I^I                         &tp->ucopy.locked_list))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: net/ipv4/tcp.c:1340:
+				u32 urg_offset = tp->urg_seq - *seq;
+				if (urg_offset < used) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#137: FILE: net/ipv4/tcp.c:1341:
+					if (!urg_offset) {
[...]
+					} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#138: FILE: net/ipv4/tcp.c:1342:
+						if (!sock_flag(sk, SOCK_URGINLINE)) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#142: FILE: net/ipv4/tcp.c:1346:
+							if (!used)

CHECK:BRACES: Unbalanced braces around else statement
#145: FILE: net/ipv4/tcp.c:1349:
+					} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#161: FILE: net/ipv4/tcp.c:1356:
+					tp->ucopy.dma_cookie = dma_skb_copy_datagram_iovec(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#167: FILE: net/ipv4/tcp.c:1362:
+					if (tp->ucopy.dma_cookie < 0) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#168: FILE: net/ipv4/tcp.c:1363:
+						printk(KERN_ALERT "dma_cookie < 0\n");

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#171: FILE: net/ipv4/tcp.c:1366:
+						if (!copied)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: net/ipv4/tcp.c:1375:
+					err = skb_copy_datagram_iovec(skb, offset,
+							msg->msg_iov, used);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#183: FILE: net/ipv4/tcp.c:1378:
+						if (!copied)

CHECK:BRACES: braces {} should be used on all arms of this statement
#213: FILE: net/ipv4/tcp.c:1405:
+			if (!skb->copied_early)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: net/ipv4/tcp.c:1407:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#228: FILE: net/ipv4/tcp.c:1418:
+			if (!skb->copied_early)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#230: FILE: net/ipv4/tcp.c:1420:
+			else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: net/ipv4/tcp.c:1448:
 
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: net/ipv4/tcp.c:1457:
+^I^I                                 tp->ucopy.dma_cookie, &done,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: net/ipv4/tcp.c:1458:
+^I^I                                 &used) == DMA_IN_PROGRESS) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: net/ipv4/tcp.c:1462:
+^I^I^I                       done, used) == DMA_SUCCESS)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->ucopy.task == NULL'
#347: FILE: net/ipv4/tcp_input.c:3883:
+	if ((tp->ucopy.task == NULL) || (tp->ucopy.dma_chan == NULL) || tp->ucopy.wakeup)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->ucopy.dma_chan == NULL'
#347: FILE: net/ipv4/tcp_input.c:3883:
+	if ((tp->ucopy.task == NULL) || (tp->ucopy.dma_chan == NULL) || tp->ucopy.wakeup)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->ucopy.task"
#347: FILE: net/ipv4/tcp_input.c:3883:
+	if ((tp->ucopy.task == NULL) || (tp->ucopy.dma_chan == NULL) || tp->ucopy.wakeup)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->ucopy.dma_chan"
#347: FILE: net/ipv4/tcp_input.c:3883:
+	if ((tp->ucopy.task == NULL) || (tp->ucopy.dma_chan == NULL) || tp->ucopy.wakeup)

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: net/ipv4/tcp_input.c:3884:
+          ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: net/ipv4/tcp_input.c:3884:
+          ^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: net/ipv4/tcp_input.c:3884:
+          ^Ireturn;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: net/ipv4/tcp_input.c:3887:
+	if ((tcp_flag_word(th) & TCP_HP_BITS) != tp->pred_flags ||
+		TCP_SKB_CB(skb)->seq != tp->rcv_nxt)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->ucopy.len'
#354: FILE: net/ipv4/tcp_input.c:3890:
+	if (tp->ucopy.dma_chan &&
+	    chunk > 0 &&
+	    chunk <= (tp->ucopy.len) &&
+	    tp->copied_seq == tp->rcv_nxt &&
+	    skb->ip_summed == CHECKSUM_UNNECESSARY) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#359: FILE: net/ipv4/tcp_input.c:3895:
+	    skb->ip_summed == CHECKSUM_UNNECESSARY) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: net/ipv4/tcp_input.c:3897:
+		dma_cookie = dma_skb_copy_datagram_iovec(tp->ucopy.dma_chan,
+			skb, tp->tcp_header_len,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#385: FILE: net/ipv4/tcp_input.c:3921:
+EXPORT_SYMBOL(dma_async_try_early_copy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#413: FILE: net/ipv4/tcp_ipv4.c:1266:
+		struct tcp_sock *tp = tcp_sk(sk);
+		if (tp->ucopy.dma_chan)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#418: FILE: net/ipv4/tcp_ipv4.c:1271:
+			if (!tcp_prequeue(sk, skb))
+			ret = tcp_v4_do_rcv(sk, skb);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 11 warnings, 19 checks, 364 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
