WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#64: FILE: include/linux/mm.h:139:
+	int (*populate)(struct vm_area_struct * area, unsigned long address, unsigned long len, pgprot_t prot, unsigned long pgoff, int nonblock);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: include/linux/mm.h:139:
+	int (*populate)(struct vm_area_struct * area, unsigned long address, unsigned long len, pgprot_t prot, unsigned long pgoff, int nonblock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#73: FILE: include/linux/mm.h:422:
+extern int install_page(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long addr, struct page *page, pgprot_t prot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/mm.h:422:
+extern int install_page(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long addr, struct page *page, pgprot_t prot);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#83: FILE: include/linux/swapops.h:54:
+	BUG_ON(pte_file(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: include/linux/swapops.h:68:
+	BUG_ON(pte_file(__swp_entry_to_pte(arch_entry)));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#131: FILE: include/asm-i386/pgtable-2level.h:70:
+#define pte_to_pgoff(pte) \
+	((((pte).pte_low >> 1) & 0x1f ) + (((pte).pte_low >> 8) << 5 ))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#132: FILE: include/asm-i386/pgtable-2level.h:71:
+	((((pte).pte_low >> 1) & 0x1f ) + (((pte).pte_low >> 8) << 5 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'off' - possible side-effects?
#134: FILE: include/asm-i386/pgtable-2level.h:73:
+#define pgoff_to_pte(off) \
+	((pte_t) { (((off) & 0x1f) << 1) + (((off) >> 5) << 8) + _PAGE_FILE })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: mm/rmap.c:376:
+		BUG_ON(pte_file(*ptep));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: mm/rmap.c:386:
+			BUG_ON(!pte_file(*ptep));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: mm/memory.c:1390:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: mm/memory.c:1390:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: mm/memory.c:1391:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,
+	unsigned long address, int write_access, pte_t *pte, pmd_t *pmd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: mm/memory.c:1396:
+	BUG_ON(!vma->vm_ops || !vma->vm_ops->nopage);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: mm/memory.c:1401:
+^Iif (!vma->vm_ops || !vma->vm_ops->populate || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: mm/memory.c:1402:
+	if (!vma->vm_ops || !vma->vm_ops->populate || 
+			(write_access && !(vma->vm_flags & VM_SHARED))) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#389: FILE: mm/memory.c:1412:
+	err = vma->vm_ops->populate(vma, address & PAGE_MASK, PAGE_SIZE, vma->vm_page_prot, pgoff, 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 8 warnings, 5 checks, 308 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
