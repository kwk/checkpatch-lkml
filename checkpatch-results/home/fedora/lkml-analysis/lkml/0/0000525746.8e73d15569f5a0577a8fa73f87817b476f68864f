WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#69: FILE: char/mem.c:355:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#71: FILE: char/mem.c:357:
+typedef unsigned long wnc_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: char/mem.c:365:
+       wnc_t old_val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: char/mem.c:366:
+       int i;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: char/mem.c:367:
+       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: char/mem.c:367:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: char/mem.c:368:
+       old_val = write_null_count[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: char/mem.c:369:
+       if ((write_null_count[0] += count) < old_val) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#83: FILE: char/mem.c:369:
+       if ((write_null_count[0] += count) < old_val) {
+           for ( i = 1; i < WRITE_NULL_LEN; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#83: FILE: char/mem.c:369:
+       if ((write_null_count[0] += count) < old_val) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: char/mem.c:370:
+           for ( i = 1; i < WRITE_NULL_LEN; i++) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: char/mem.c:370:
+           for ( i = 1; i < WRITE_NULL_LEN; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 15)
#84: FILE: char/mem.c:370:
+           for ( i = 1; i < WRITE_NULL_LEN; i++) {
+               old_val = write_null_count[i];

ERROR:SPACING: space prohibited after that open parenthesis '('
#84: FILE: char/mem.c:370:
+           for ( i = 1; i < WRITE_NULL_LEN; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: char/mem.c:371:
+               old_val = write_null_count[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: char/mem.c:371:
+               old_val = write_null_count[i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: char/mem.c:372:
+               if (++write_null_count[i] > old_val)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: char/mem.c:372:
+               if (++write_null_count[i] > old_val)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 19)
#86: FILE: char/mem.c:372:
+               if (++write_null_count[i] > old_val)
+                   break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: char/mem.c:373:
+                   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: char/mem.c:373:
+                   break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: char/mem.c:375:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: char/mem.c:375:
+           }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#89: FILE: char/mem.c:375:
+
+           }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: char/mem.c:376:
+           if (i == WRITE_NULL_LEN)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: char/mem.c:376:
+           if (i == WRITE_NULL_LEN)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 15)
#90: FILE: char/mem.c:376:
+           if (i == WRITE_NULL_LEN)
+               printk("/dev/null overflow ;)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: char/mem.c:377:
+               printk("/dev/null overflow ;)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: char/mem.c:377:
+               printk("/dev/null overflow ;)\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#91: FILE: char/mem.c:377:
+               printk("/dev/null overflow ;)\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: char/mem.c:378:
+       }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: char/mem.c:379:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: char/mem.c:379:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: char/mem.c:379:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: char/mem.c:380:
+       return count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: char/mem.c:384:
+                         int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: char/mem.c:384:
+static int null_proc_read(char *buf, char **start, off_t offset,
+                         int count, int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: char/mem.c:384:
+                         int count, int *eof, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: char/mem.c:386:
+       int len = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: char/mem.c:387:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: char/mem.c:389:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#103: FILE: char/mem.c:389:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);

ERROR:SPACING: space prohibited after that open parenthesis '('
#103: FILE: char/mem.c:389:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#103: FILE: char/mem.c:389:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                                                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#104: FILE: char/mem.c:390:
+           len += sprintf(buf+len,"%lu  *2^%i+\\\n",write_null_count[i],i*sizeof(wnc_t)*8);
                                                                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: char/mem.c:391:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: char/mem.c:392:
+       len += sprintf(buf+len,"0\n");$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: char/mem.c:392:
+       len += sprintf(buf+len,"0\n");
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: char/mem.c:392:
+       len += sprintf(buf+len,"0\n");
                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: char/mem.c:393:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: char/mem.c:393:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: char/mem.c:395:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: char/mem.c:395:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: char/mem.c:396:
+       if (len <= offset+count) *eof = 1;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: char/mem.c:396:
+       if (len <= offset+count) *eof = 1;
                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#110: FILE: char/mem.c:396:
+       if (len <= offset+count) *eof = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: char/mem.c:397:
+       *start = buf + offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: char/mem.c:398:
+       len -= offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: char/mem.c:399:
+       if (len>count) len = count;$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#113: FILE: char/mem.c:399:
+       if (len>count) len = count;
               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#113: FILE: char/mem.c:399:
+       if (len>count) len = count;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: char/mem.c:400:
+       if (len<0) len = 0;$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#114: FILE: char/mem.c:400:
+       if (len<0) len = 0;
               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#114: FILE: char/mem.c:400:
+       if (len<0) len = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: char/mem.c:401:
+       return len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: char/mem.c:402:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: char/mem.c:402:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: char/mem.c:407:
+                           unsigned long count, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: char/mem.c:407:
+                           unsigned long count, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: char/mem.c:409:
+       int i;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: char/mem.c:410:
+       int i;
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: char/mem.c:410:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#124: FILE: char/mem.c:410:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {
+           write_null_count[i] = 0;

ERROR:SPACING: space prohibited after that open parenthesis '('
#124: FILE: char/mem.c:410:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#124: FILE: char/mem.c:410:
+       for ( i = 0; i < WRITE_NULL_LEN; i++) {
+           write_null_count[i] = 0;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: char/mem.c:411:
+           write_null_count[i] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: char/mem.c:411:
+           write_null_count[i] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: char/mem.c:412:
+       }$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: char/mem.c:509:
+static ssize_t write_zero(struct file * file, const char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: char/mem.c:509:
+static ssize_t write_zero(struct file * file, const char * buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: char/mem.c:510:
+                         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: char/mem.c:510:
+static ssize_t write_zero(struct file * file, const char * buf,
+                         size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: char/mem.c:510:
+                         size_t count, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: char/mem.c:512:
+       return count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: char/mem.c:689:
+       struct proc_dir_entry *ent =  create_proc_entry("null", S_IRUGO | S_IWUSR | S_IWGRP, NULL);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR | S_IWGRP' are not preferred. Consider using octal permissions '0664'.
#156: FILE: char/mem.c:689:
+       struct proc_dir_entry *ent =  create_proc_entry("null", S_IRUGO | S_IWUSR | S_IWGRP, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: char/mem.c:690:
+       struct proc_dir_entry *ent =  create_proc_entry("null", S_IRUGO | S_IWUSR | S_IWGRP, NULL);
+       if (ent) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: char/mem.c:690:
+       if (ent) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#157: FILE: char/mem.c:690:
+       if (ent) {
+           ent->read_proc = &null_proc_read;

CHECK:BRACES: braces {} should be used on all arms of this statement
#157: FILE: char/mem.c:690:
+       if (ent) {
[...]
+       } else 
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: char/mem.c:691:
+           ent->read_proc = &null_proc_read;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: char/mem.c:691:
+           ent->read_proc = &null_proc_read;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: char/mem.c:692:
+           ent->write_proc = &null_proc_write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: char/mem.c:692:
+           ent->write_proc = &null_proc_write;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: char/mem.c:693:
+       } else $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: char/mem.c:693:
+       } else $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#160: FILE: char/mem.c:693:
+       } else 
+           printk("unable to create /proc/null read entry\n");

CHECK:BRACES: Unbalanced braces around else statement
#160: FILE: char/mem.c:693:
+       } else 

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: char/mem.c:694:
+           printk("unable to create /proc/null read entry\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: char/mem.c:694:
+           printk("unable to create /proc/null read entry\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#161: FILE: char/mem.c:694:
+           printk("unable to create /proc/null read entry\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525746.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 61 warnings, 11 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525746.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
