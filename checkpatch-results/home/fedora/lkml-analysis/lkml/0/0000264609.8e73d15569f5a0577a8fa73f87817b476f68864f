WARNING:TYPO_SPELLING: 'eligable' may be misspelled - perhaps 'eligible'?
#38: 
If the maximum hold time is exceeded, the task isn't eligable
                                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
--- linux-2.6.7/include/linux/swap.h.token	2004-07-30 13:22:17.000000000 -0400

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: include/linux/swap.h:209:
+extern struct mm_struct * swap_token_mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/swap.h:210:
+extern void grab_swap_token(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/swap.h:211:
+extern void __put_swap_token(struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#76: FILE: include/linux/swap.h:211:
+extern void __put_swap_token(struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: include/linux/swap.h:213:
+static inline int has_swap_token(struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/linux/swap.h:218:
+static inline void put_swap_token(struct mm_struct * mm)

ERROR:SPACING: space required before the open parenthesis '('
#89: FILE: include/linux/swap.h:224:
+#define put_swap_token do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#90: FILE: include/linux/swap.h:225:
+#define grab_swap_token  do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: mm/thrash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#151: FILE: mm/thrash.c:2:
+ * mm/thrash.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: mm/thrash.c:19:
+struct mm_struct * swap_token_mm = &init_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: mm/thrash.c:31:
+static int should_release_swap_token(struct mm_struct * mm)

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: mm/thrash.c:34:
+	int ret = 0;
+	if (!mm->recent_pagein)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: mm/thrash.c:50:
+	struct mm_struct * mm;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#209: FILE: mm/thrash.c:60:
+	if (time_after(jiffies, swap_token_check)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#224: FILE: mm/thrash.c:75:
+		if ((reason = should_release_swap_token(mm))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'eligable' may be misspelled - perhaps 'eligible'?
#225: FILE: mm/thrash.c:76:
+			unsigned long eligable = jiffies;
 			              ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#226: FILE: mm/thrash.c:77:
+			unsigned long eligable = jiffies;
+			if (reason == SWAP_TOKEN_TIMED_OUT) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: mm/thrash.c:77:
+			if (reason == SWAP_TOKEN_TIMED_OUT) {
+				eligable += SWAP_TOKEN_TIMEOUT;
+			}

WARNING:TYPO_SPELLING: 'eligable' may be misspelled - perhaps 'eligible'?
#227: FILE: mm/thrash.c:78:
+				eligable += SWAP_TOKEN_TIMEOUT;
 				^^^^^^^^

WARNING:TYPO_SPELLING: 'eligable' may be misspelled - perhaps 'eligible'?
#229: FILE: mm/thrash.c:80:
+			mm->swap_token_time = eligable;
 			                      ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: mm/thrash.c:83:
+			printk("Took swap token, pid %d (%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: mm/thrash.c:84:
+			printk("Took swap token, pid %d (%s)\n",
+				 current->pid, current->comm);

WARNING:RETURN_VOID: void function return statements are not generally useful
#238: FILE: mm/thrash.c:89:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: mm/thrash.c:92:
+void __put_swap_token(struct mm_struct * mm)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264609.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 13 warnings, 4 checks, 182 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264609.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
