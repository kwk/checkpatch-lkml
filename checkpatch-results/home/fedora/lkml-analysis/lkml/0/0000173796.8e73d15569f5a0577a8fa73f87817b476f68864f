WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/linux/crbce.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#101: FILE: include/linux/crbce.h:49:
+enum crbce_event {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#109: FILE: include/linux/crbce.h:57:
+	CRBCE_REC_EXIT = (__force crbce_event_t) (CKRM_NUM_EVENTS+1),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: include/linux/crbce.h:57:
+	CRBCE_REC_EXIT = (__force crbce_event_t) (CKRM_NUM_EVENTS+1),
 	                                                         ^

CHECK:SPACING: No space is necessary after a cast
#110: FILE: include/linux/crbce.h:58:
+	CRBCE_REC_DATA_DELIMITER = (__force crbce_event_t) (CRBCE_REC_EXIT+2),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: include/linux/crbce.h:58:
+	CRBCE_REC_DATA_DELIMITER = (__force crbce_event_t) (CRBCE_REC_EXIT+2),
 	                                                                  ^

CHECK:SPACING: No space is necessary after a cast
#111: FILE: include/linux/crbce.h:59:
+	CRBCE_REC_SAMPLE = (__force crbce_event_t) (CRBCE_REC_EXIT+3),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: include/linux/crbce.h:59:
+	CRBCE_REC_SAMPLE = (__force crbce_event_t) (CRBCE_REC_EXIT+3),
 	                                                          ^

CHECK:SPACING: No space is necessary after a cast
#112: FILE: include/linux/crbce.h:60:
+	CRBCE_REC_TASKINFO = (__force crbce_event_t) (CRBCE_REC_EXIT+4),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: include/linux/crbce.h:60:
+	CRBCE_REC_TASKINFO = (__force crbce_event_t) (CRBCE_REC_EXIT+4),
 	                                                            ^

CHECK:SPACING: No space is necessary after a cast
#113: FILE: include/linux/crbce.h:61:
+	CRBCE_REC_SYS_INFO = (__force crbce_event_t) (CRBCE_REC_EXIT+5),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: include/linux/crbce.h:61:
+	CRBCE_REC_SYS_INFO = (__force crbce_event_t) (CRBCE_REC_EXIT+5),
 	                                                            ^

CHECK:SPACING: No space is necessary after a cast
#114: FILE: include/linux/crbce.h:62:
+	CRBCE_REC_CLASS_INFO = (__force crbce_event_t) (CRBCE_REC_EXIT+6),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: include/linux/crbce.h:62:
+	CRBCE_REC_CLASS_INFO = (__force crbce_event_t) (CRBCE_REC_EXIT+6),
 	                                                              ^

CHECK:SPACING: No space is necessary after a cast
#115: FILE: include/linux/crbce.h:63:
+	CRBCE_REC_KERNEL_CMD_DONE = (__force crbce_event_t) (CRBCE_REC_EXIT+7),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#115: FILE: include/linux/crbce.h:63:
+	CRBCE_REC_KERNEL_CMD_DONE = (__force crbce_event_t) (CRBCE_REC_EXIT+7),
 	                                                                   ^

CHECK:SPACING: No space is necessary after a cast
#116: FILE: include/linux/crbce.h:64:
+	CRBCE_REC_UKCC_FULL = (__force crbce_event_t) (CRBCE_REC_EXIT+8),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: include/linux/crbce.h:64:
+	CRBCE_REC_UKCC_FULL = (__force crbce_event_t) (CRBCE_REC_EXIT+8),
 	                                                             ^

CHECK:SPACING: No space is necessary after a cast
#119: FILE: include/linux/crbce.h:67:
+	CRBCE_REC_KERNEL_CMD = (__force crbce_event_t) (CRBCE_REC_EXIT+9),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: include/linux/crbce.h:67:
+	CRBCE_REC_KERNEL_CMD = (__force crbce_event_t) (CRBCE_REC_EXIT+9),
 	                                                              ^

CHECK:SPACING: No space is necessary after a cast
#121: FILE: include/linux/crbce.h:69:
+	CRBCE_NUM_EVENTS = (__force crbce_event_t) (CRBCE_REC_EXIT+10)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#121: FILE: include/linux/crbce.h:69:
+	CRBCE_NUM_EVENTS = (__force crbce_event_t) (CRBCE_REC_EXIT+10)
 	                                                          ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#125: FILE: include/linux/crbce.h:73:
+	uint32_t cpu_running;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#126: FILE: include/linux/crbce.h:74:
+	uint32_t cpu_waiting;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#127: FILE: include/linux/crbce.h:75:
+	uint32_t io_delayed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#128: FILE: include/linux/crbce.h:76:
+	uint32_t memio_delayed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#144: FILE: include/linux/crbce.h:92:
+	uint32_t jiffies;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#145: FILE: include/linux/crbce.h:93:
+	uint64_t cls;

CHECK:SPACING: No space is necessary after a cast
#183: FILE: include/linux/crbce.h:131:
+	CRBCE_CMD_START = (__force crbce_kernel_cmd_t) 1,

CHECK:SPACING: No space is necessary after a cast
#184: FILE: include/linux/crbce.h:132:
+	CRBCE_CMD_STOP = (__force crbce_kernel_cmd_t) 2,

CHECK:SPACING: No space is necessary after a cast
#185: FILE: include/linux/crbce.h:133:
+	CRBCE_CMD_SET_TIMER = (__force crbce_kernel_cmd_t) 3,

CHECK:SPACING: No space is necessary after a cast
#186: FILE: include/linux/crbce.h:134:
+	CRBCE_CMD_SEND_DATA = (__force crbce_kernel_cmd_t) 4,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#192: FILE: include/linux/crbce.h:140:
+	uint32_t len;	/* added in the kernel for reflection */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/linux/crbce.h:143:
+#define set_cmd_hdr(rec,tok) \
                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rec' - possible side-effects?
#195: FILE: include/linux/crbce.h:143:
+#define set_cmd_hdr(rec,tok) \
+	((rec).hdr.type=CRBCE_REC_KERNEL_CMD,(rec).hdr.cmd=(tok))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#196: FILE: include/linux/crbce.h:144:
+	((rec).hdr.type=CRBCE_REC_KERNEL_CMD,(rec).hdr.cmd=(tok))
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#196: FILE: include/linux/crbce.h:144:
+	((rec).hdr.type=CRBCE_REC_KERNEL_CMD,(rec).hdr.cmd=(tok))
 	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#196: FILE: include/linux/crbce.h:144:
+	((rec).hdr.type=CRBCE_REC_KERNEL_CMD,(rec).hdr.cmd=(tok))
 	                                                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#214: FILE: include/linux/crbce.h:162:
+	uint32_t interval;	/* in msec .. 0 means stop */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: kernel/ckrm/rbce/crbce_ext.c:1:
+/* Data Collection Extension to Rule-based Classification Engine (RBCE) module

CHECK:SPACING: No space is necessary after a cast
#305: FILE: kernel/ckrm/rbce/crbce_ext.c:35:
+	UKCC_OK = (__force ukcc_state_t) 0,

CHECK:SPACING: No space is necessary after a cast
#306: FILE: kernel/ckrm/rbce/crbce_ext.c:36:
+	UKCC_STANDBY = (__force ukcc_state_t) 1,

CHECK:SPACING: No space is necessary after a cast
#307: FILE: kernel/ckrm/rbce/crbce_ext.c:37:
+	UKCC_FULL =  (__force ukcc_state_t) 2

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#313: FILE: kernel/ckrm/rbce/crbce_ext.c:43:
+static struct sock *ukcc_sock = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: No space is necessary after a cast
#366: FILE: kernel/ckrm/rbce/crbce_ext.c:96:
+		(void) ukcc_send(NLMSG_DATA(nlh), skblen - NLMSG_LENGTH(0));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#377: FILE: kernel/ckrm/rbce/crbce_ext.c:107:
+		printk(KERN_ERR "kevent: "

WARNING:SPLIT_STRING: quoted string split across lines
#378: FILE: kernel/ckrm/rbce/crbce_ext.c:108:
+		printk(KERN_ERR "kevent: "
+			"unable to create netlink socket; aborting\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: kernel/ckrm/rbce/crbce_ext.c:124:
+#define rec_set_hdr(r,t,p)      ((r)->hdr.type = (t), (r)->hdr.pid = (p))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: kernel/ckrm/rbce/crbce_ext.c:124:
+#define rec_set_hdr(r,t,p)      ((r)->hdr.type = (t), (r)->hdr.pid = (p))
                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#394: FILE: kernel/ckrm/rbce/crbce_ext.c:124:
+#define rec_set_hdr(r,t,p)      ((r)->hdr.type = (t), (r)->hdr.pid = (p))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#395: FILE: kernel/ckrm/rbce/crbce_ext.c:125:
+#define rec_set_timehdr(r,t,p,c)  (rec_set_hdr(r,t,p), \
+	(r)->hdr.jiffies = jiffies, (r)->hdr.cls=(unsigned long)(c) )

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#396: FILE: kernel/ckrm/rbce/crbce_ext.c:126:
+	(r)->hdr.jiffies = jiffies, (r)->hdr.cls=(unsigned long)(c) )
 	                                        ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#396: FILE: kernel/ckrm/rbce/crbce_ext.c:126:
+	(r)->hdr.jiffies = jiffies, (r)->hdr.cls=(unsigned long)(c) )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARN ...
#411: FILE: kernel/ckrm/rbce/crbce_ext.c:141:
+		printk(KERN_WARN "Channel stalled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#413: FILE: kernel/ckrm/rbce/crbce_ext.c:143:
+		printk(KERN_INFO "Channel continues\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: kernel/ckrm/rbce/crbce_ext.c:158:
+ *     UKCC_STANDBY := ^Iwe are waiting to be restarted by the user daemon$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#439: FILE: kernel/ckrm/rbce/crbce_ext.c:169:
+	 * that.
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: kernel/ckrm/rbce/crbce_ext.c:171:
+	int send = 0;
+	spin_lock(&ukcc_state_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chan_state != UKCC_STANDBY'
#442: FILE: kernel/ckrm/rbce/crbce_ext.c:172:
+	if ((send = (chan_state != UKCC_STANDBY)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#442: FILE: kernel/ckrm/rbce/crbce_ext.c:172:
+	if ((send = (chan_state != UKCC_STANDBY)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#448: FILE: kernel/ckrm/rbce/crbce_ext.c:178:
+		struct crbce_ukcc_full rec;
+		rec_set_timehdr(&rec, CRBCE_REC_UKCC_FULL, 0, 0);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#461: FILE: kernel/ckrm/rbce/crbce_ext.c:191:
+		/*FALLTHRU*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#472: FILE: kernel/ckrm/rbce/crbce_ext.c:202:
+#define rec_send(r)	rec_send_len(r, sizeof(*(r)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: kernel/ckrm/rbce/crbce_ext.c:209:
+ *    (a) FORK              ^Isend the pid, the class and the ppid$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: kernel/ckrm/rbce/crbce_ext.c:210:
+ *    (b) RECLASSIFICATION  ^Isend the pid, the class and < sample data +$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: kernel/ckrm/rbce/crbce_ext.c:212:
+ *    (b) EXIT              ^Isend the pid$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#484: FILE: kernel/ckrm/rbce/crbce_ext.c:214:
+ *
+*****************************************************************************/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#486: FILE: kernel/ckrm/rbce/crbce_ext.c:216:
+int delta_mode = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#534: FILE: kernel/ckrm/rbce/crbce_ext.c:264:
+}
+static inline int delay_changed(struct task_delay_info *d)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#550: FILE: kernel/ckrm/rbce/crbce_ext.c:280:
+	if (pdata == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta_mode == 0'
#552: FILE: kernel/ckrm/rbce/crbce_ext.c:282:
+	if (send_forced || (delta_mode == 0)
+	    || sample_changed(PSAMPLE(RBCE_DATA(tsk)))
+	    || delay_changed(&tsk->delays)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#553: FILE: kernel/ckrm/rbce/crbce_ext.c:283:
+	if (send_forced || (delta_mode == 0)
+	    || sample_changed(PSAMPLE(RBCE_DATA(tsk)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#554: FILE: kernel/ckrm/rbce/crbce_ext.c:284:
+	    || sample_changed(PSAMPLE(RBCE_DATA(tsk)))
+	    || delay_changed(&tsk->delays)) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tsk->taskclass'
#557: FILE: kernel/ckrm/rbce/crbce_ext.c:287:
+				core ? core : (struct ckrm_core_class *)tsk->
+				taskclass);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#602: FILE: kernel/ckrm/rbce/crbce_ext.c:332:
+struct timer_list sample_timer = {.expires = 0,.function = sample_task_data };
                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: kernel/ckrm/rbce/crbce_ext.c:358:
+	int taskcnt = 0;
+	limrec.is_stop = 0;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#645: FILE: kernel/ckrm/rbce/crbce_ext.c:375:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!RBCE_DATA"
#715: FILE: kernel/ckrm/rbce/crbce_ext.c:445:
+		if (RBCE_DATA(thread) == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#727: FILE: kernel/ckrm/rbce/crbce_ext.c:457:
+	int wait = 0;
+	read_lock(&tasklist_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#731: FILE: kernel/ckrm/rbce/crbce_ext.c:461:
+		if (pdata == NULL)

CHECK:SPACING: No space is necessary after a cast
#736: FILE: kernel/ckrm/rbce/crbce_ext.c:466:
+				atomic_inc((atomic_t *) &

CHECK:SPACING: No space is necessary after a cast
#740: FILE: kernel/ckrm/rbce/crbce_ext.c:470:
+				atomic_inc((atomic_t *) &

CHECK:SPACING: No space is necessary after a cast
#748: FILE: kernel/ckrm/rbce/crbce_ext.c:478:
+				atomic_inc((atomic_t *) &

CHECK:SPACING: No space is necessary after a cast
#751: FILE: kernel/ckrm/rbce/crbce_ext.c:481:
+				atomic_inc((atomic_t *) &

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#755: FILE: kernel/ckrm/rbce/crbce_ext.c:485:
+	}
+	while_each_thread(proc, thread);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'accidently' may be misspelled - perhaps 'accidentally'?
#768: FILE: kernel/ckrm/rbce/crbce_ext.c:498:
+				 * accidently write the wrong length and the
 				   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_interval_length > 0'
#788: FILE: kernel/ckrm/rbce/crbce_ext.c:518:
+			if ((timer_interval_length > 0)
+			    && (timer_interval_length < 10))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_interval_length < 10'
#788: FILE: kernel/ckrm/rbce/crbce_ext.c:518:
+			if ((timer_interval_length > 0)
+			    && (timer_interval_length < 10))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#789: FILE: kernel/ckrm/rbce/crbce_ext.c:519:
+			if ((timer_interval_length > 0)
+			    && (timer_interval_length < 10))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#792: FILE: kernel/ckrm/rbce/crbce_ext.c:522:
+			printk(KERN_INFO "CRBCE set sample collect timer %lu\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#856: FILE: kernel/ckrm/rbce/crbce_main.c:1:
+/* Easiest way to transmit a symbolic link as a patch */

WARNING:RETURN_VOID: void function return statements are not generally useful
#881: FILE: kernel/ckrm/rbce/rbce_core.c:41:
+	return;
+}

WARNING:TYPO_SPELLING: 'propably' may be misspelled - perhaps 'probably'?
#901: FILE: kernel/ckrm/rbce/rbce_core.c:74:
+			put_class(cls); /* propably created thru addcb */
 			                   ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1001: FILE: kernel/ckrm/rbce/rbce_internal.h:256:
+extern struct rbce_class *create_rbce_class(const char *, int, void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1001: FILE: kernel/ckrm/rbce/rbce_internal.h:256:
+extern struct rbce_class *create_rbce_class(const char *, int, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1001: FILE: kernel/ckrm/rbce/rbce_internal.h:256:
+extern struct rbce_class *create_rbce_class(const char *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1001: FILE: kernel/ckrm/rbce/rbce_internal.h:256:
+extern struct rbce_class *create_rbce_class(const char *, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: kernel/ckrm/rbce/rbce_internal.h:257:
+extern void rbce_tc_manual(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1002: FILE: kernel/ckrm/rbce/rbce_internal.h:257:
+extern void rbce_tc_manual(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: kernel/ckrm/rbce/rbce_internal.h:258:
+extern void notify_class_action(struct rbce_class *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rbce_class *' should also have an identifier name
#1003: FILE: kernel/ckrm/rbce/rbce_internal.h:258:
+extern void notify_class_action(struct rbce_class *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1003: FILE: kernel/ckrm/rbce/rbce_internal.h:258:
+extern void notify_class_action(struct rbce_class *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1004: FILE: kernel/ckrm/rbce/rbce_internal.h:259:
+extern void send_exit_notification(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1004: FILE: kernel/ckrm/rbce/rbce_internal.h:259:
+extern void send_exit_notification(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1005: FILE: kernel/ckrm/rbce/rbce_internal.h:260:
+extern void rbce_tc_ext_notify(int, void *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1005: FILE: kernel/ckrm/rbce/rbce_internal.h:260:
+extern void rbce_tc_ext_notify(int, void *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1005: FILE: kernel/ckrm/rbce/rbce_internal.h:260:
+extern void rbce_tc_ext_notify(int, void *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1005: FILE: kernel/ckrm/rbce/rbce_internal.h:260:
+extern void rbce_tc_ext_notify(int, void *, struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1006: FILE: kernel/ckrm/rbce/rbce_internal.h:261:
+extern int init_rbce_ext_pre(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1007: FILE: kernel/ckrm/rbce/rbce_internal.h:262:
+extern int init_rbce_ext_post(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1008: FILE: kernel/ckrm/rbce/rbce_internal.h:263:
+extern void exit_rbce_ext(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1098: FILE: include/linux/rbce.h:40:
+};
+static inline void send_exit_notification(struct task_struct *tsk)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1101: FILE: include/linux/rbce.h:43:
+}
+static inline void notify_class_action(struct rbce_class *cls, int action)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1104: FILE: include/linux/rbce.h:46:
+}
+/* extension initialization and destruction at module init and exit */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1109: FILE: include/linux/rbce.h:51:
+}
+static inline int init_rbce_ext_post(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1113: FILE: include/linux/rbce.h:55:
+}
+static inline void exit_rbce_ext(void)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1124: FILE: include/linux/rbce.h:66:
+#define RBCE_MOD_DESCR ^I"Rule Based Classification Engine Module" \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1126: FILE: include/linux/rbce.h:68:
+#define RBCE_MOD_NAME ^I"crbce"$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173796.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 40 warnings, 70 checks, 1027 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173796.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
