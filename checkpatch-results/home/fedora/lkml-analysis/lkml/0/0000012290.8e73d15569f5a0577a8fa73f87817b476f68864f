WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Here is the 2.6.19-friendly diff of the atomic.h atomic64_t standardization. As

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#50: 
--- a/include/asm-alpha/atomic.h

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#101: FILE: include/asm-alpha/atomic.h:220:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#101: FILE: include/asm-alpha/atomic.h:220:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#127: FILE: include/asm-alpha/system.h:447:
+__xchg_u8_local(volatile char *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#131: FILE: include/asm-alpha/system.h:451:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#150: FILE: include/asm-alpha/system.h:470:
+__xchg_u16_local(volatile short *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#154: FILE: include/asm-alpha/system.h:474:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#173: FILE: include/asm-alpha/system.h:493:
+__xchg_u32_local(volatile int *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: include/asm-alpha/system.h:497:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#192: FILE: include/asm-alpha/system.h:512:
+__xchg_u64_local(volatile long *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#196: FILE: include/asm-alpha/system.h:516:
+	__asm__ __volatile__(

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#210: FILE: include/asm-alpha/system.h:530:
+#define __xchg_local(ptr, x, size) \
+({ \
+	unsigned long __xchg__res; \
+	volatile void *__xchg__ptr = (ptr); \
+	switch (size) { \
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \
+	} \
+	__xchg__res; \
+})

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#213: FILE: include/asm-alpha/system.h:533:
+	volatile void *__xchg__ptr = (ptr); \

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#214: FILE: include/asm-alpha/system.h:534:
+	switch (size) { \
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#215: FILE: include/asm-alpha/system.h:535:
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#216: FILE: include/asm-alpha/system.h:536:
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#217: FILE: include/asm-alpha/system.h:537:
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#218: FILE: include/asm-alpha/system.h:538:
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#219: FILE: include/asm-alpha/system.h:539:
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: include/asm-alpha/system.h:544:
+#define xchg_local(ptr,x)						     \
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#224: FILE: include/asm-alpha/system.h:544:
+#define xchg_local(ptr,x)						     \
+  ({									     \
+     __typeof__(*(ptr)) _x_ = (x);					     \
+     (__typeof__(*(ptr))) __xchg_local((ptr), (unsigned long)_x_,	     \
+     		sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: include/asm-alpha/system.h:545:
+  ({^I^I^I^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: include/asm-alpha/system.h:546:
+     __typeof__(*(ptr)) _x_ = (x);^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/asm-alpha/system.h:547:
+     (__typeof__(*(ptr))) __xchg_local((ptr), (unsigned long)_x_,^I     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/asm-alpha/system.h:549:
+  })$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#239: FILE: include/asm-alpha/system.h:705:
+__cmpxchg_u8_local(volatile char *m, long old, long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#243: FILE: include/asm-alpha/system.h:709:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#265: FILE: include/asm-alpha/system.h:731:
+__cmpxchg_u16_local(volatile short *m, long old, long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#269: FILE: include/asm-alpha/system.h:735:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#291: FILE: include/asm-alpha/system.h:757:
+__cmpxchg_u32_local(volatile int *m, int old, int new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#295: FILE: include/asm-alpha/system.h:761:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#307: FILE: include/asm-alpha/system.h:773:
+	: "r"((long) old), "r"(new), "m"(*m) : "memory");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#313: FILE: include/asm-alpha/system.h:779:
+__cmpxchg_u64_local(volatile long *m, unsigned long old, unsigned long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#317: FILE: include/asm-alpha/system.h:783:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#329: FILE: include/asm-alpha/system.h:795:
+	: "r"((long) old), "r"(new), "m"(*m) : "memory");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#335: FILE: include/asm-alpha/system.h:801:
+__cmpxchg_local(volatile void *ptr, unsigned long old, unsigned long new,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#338: FILE: include/asm-alpha/system.h:804:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:
[...]
+		case 8:

ERROR:SPACING: space required after that ',' (ctx:VxV)
#352: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#352: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#352: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,	 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/asm-alpha/system.h:819:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: include/asm-alpha/system.h:820:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/asm-alpha/system.h:821:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/asm-alpha/system.h:822:
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/asm-alpha/system.h:824:
+  })$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: include/asm-generic/atomic.h:72:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: include/asm-generic/atomic.h:79:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: include/asm-generic/atomic.h:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: include/asm-generic/atomic.h:93:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: include/asm-generic/atomic.h:100:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: include/asm-generic/atomic.h:107:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: include/asm-generic/atomic.h:114:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: include/asm-generic/atomic.h:121:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: include/asm-generic/atomic.h:128:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: include/asm-generic/atomic.h:135:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: include/asm-generic/atomic.h:189:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: include/asm-generic/atomic.h:196:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: include/asm-generic/atomic.h:203:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: include/asm-generic/atomic.h:210:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: include/asm-generic/atomic.h:217:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: include/asm-generic/atomic.h:224:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: include/asm-generic/atomic.h:231:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: include/asm-generic/atomic.h:238:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: include/asm-generic/atomic.h:245:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: include/asm-generic/atomic.h:252:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#562: FILE: include/asm-i386/system.h:273:
+#define cmpxchg_local(ptr,o,n)\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#562: FILE: include/asm-i386/system.h:273:
+#define cmpxchg_local(ptr,o,n)\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#562: FILE: include/asm-i386/system.h:273:
+#define cmpxchg_local(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg_local((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#563: FILE: include/asm-i386/system.h:274:
+	((__typeof__(*(ptr)))__cmpxchg_local((ptr),(unsigned long)(o),\
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#564: FILE: include/asm-i386/system.h:275:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#572: FILE: include/asm-i386/system.h:338:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/asm-i386/system.h:339:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,
+			unsigned long old, unsigned long new, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#576: FILE: include/asm-i386/system.h:342:
+	unsigned long prev;
+	switch (size) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: include/asm-i386/system.h:401:
+#define cmpxchg_local(ptr,o,n)						\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: include/asm-i386/system.h:401:
+#define cmpxchg_local(ptr,o,n)						\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#606: FILE: include/asm-i386/system.h:401:
+#define cmpxchg_local(ptr,o,n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 3))				\
+		__ret = __cmpxchg_local((ptr), (unsigned long)(o),	\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	else								\
+		__ret = cmpxchg_386((ptr), (unsigned long)(o),		\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o' - possible side-effects?
#606: FILE: include/asm-i386/system.h:401:
+#define cmpxchg_local(ptr,o,n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 3))				\
+		__ret = __cmpxchg_local((ptr), (unsigned long)(o),	\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	else								\
+		__ret = cmpxchg_386((ptr), (unsigned long)(o),		\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#606: FILE: include/asm-i386/system.h:401:
+#define cmpxchg_local(ptr,o,n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 3))				\
+		__ret = __cmpxchg_local((ptr), (unsigned long)(o),	\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	else								\
+		__ret = cmpxchg_386((ptr), (unsigned long)(o),		\
+					(unsigned long)(n), sizeof(*(ptr))); \
+	__ret;								\
+})

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#624: FILE: include/asm-i386/system.h:430:
+static inline unsigned long long __cmpxchg64_local(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: include/asm-i386/system.h:431:
+static inline unsigned long long __cmpxchg64_local(volatile void *ptr,
+			unsigned long long old, unsigned long long new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: include/asm-i386/system.h:434:
+	unsigned long long prev;
+	__asm__ __volatile__("cmpxchg8b %3"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#642: FILE: include/asm-i386/system.h:447:
+#define cmpxchg64_local(ptr,o,n)\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#642: FILE: include/asm-i386/system.h:447:
+#define cmpxchg64_local(ptr,o,n)\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#642: FILE: include/asm-i386/system.h:447:
+#define cmpxchg64_local(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg64_local((ptr),(unsigned long long)(o),\
+					(unsigned long long)(n)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: include/asm-i386/system.h:448:
+	((__typeof__(*(ptr)))__cmpxchg64_local((ptr),(unsigned long long)(o),\
 	                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#674: FILE: include/asm-ia64/atomic.h:115:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__(v->counter) c, old;				\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#674: FILE: include/asm-ia64/atomic.h:115:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__(v->counter) c, old;				\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#733: FILE: include/asm-mips/atomic.h:663:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#733: FILE: include/asm-mips/atomic.h:663:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#785: FILE: include/asm-parisc/atomic.h:288:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;						\
+	c = atomic64_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#785: FILE: include/asm-parisc/atomic.h:288:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;						\
+	c = atomic64_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#795: FILE: include/asm-parisc/atomic.h:298:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#828: FILE: include/asm-powerpc/atomic.h:428:
+static __inline__ int atomic64_add_unless(atomic64_t *v, long a, long u)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#832: FILE: include/asm-powerpc/atomic.h:432:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#834: FILE: include/asm-powerpc/atomic.h:434:
+"1:	ldarx	%0,0,%1		# atomic_add_unless\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#838: FILE: include/asm-powerpc/atomic.h:438:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#838: FILE: include/asm-powerpc/atomic.h:438:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#839: FILE: include/asm-powerpc/atomic.h:439:
+"	stdcx.	%0,0,%1 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#839: FILE: include/asm-powerpc/atomic.h:439:
+"	stdcx.	%0,0,%1 \n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#842: FILE: include/asm-powerpc/atomic.h:442:
+"	subf	%0,%2,%0 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#842: FILE: include/asm-powerpc/atomic.h:442:
+"	subf	%0,%2,%0 \n\

WARNING:INLINE: plain inline is preferred over __inline__
#868: FILE: include/asm-powerpc/system.h:235:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#869: FILE: include/asm-powerpc/system.h:236:
+__xchg_u32_local(volatile void *p, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#873: FILE: include/asm-powerpc/system.h:240:
+	__asm__ __volatile__(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#874: FILE: include/asm-powerpc/system.h:241:
+"1:	lwarx	%0,0,%2 \n"

ERROR:SPACING: space required after that ',' (ctx:VxO)
#875: FILE: include/asm-powerpc/system.h:242:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#875: FILE: include/asm-powerpc/system.h:242:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#876: FILE: include/asm-powerpc/system.h:243:
+"	stwcx.	%3,0,%2 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#876: FILE: include/asm-powerpc/system.h:243:
+"	stwcx.	%3,0,%2 \n\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#878: FILE: include/asm-powerpc/system.h:245:
+	: "=&r" (prev), "+m" (*(volatile unsigned int *)p)

WARNING:INLINE: plain inline is preferred over __inline__
#893: FILE: include/asm-powerpc/system.h:272:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#894: FILE: include/asm-powerpc/system.h:273:
+__xchg_u64_local(volatile void *p, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#898: FILE: include/asm-powerpc/system.h:277:
+	__asm__ __volatile__(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#899: FILE: include/asm-powerpc/system.h:278:
+"1:	ldarx	%0,0,%2 \n"

ERROR:SPACING: space required after that ',' (ctx:VxO)
#900: FILE: include/asm-powerpc/system.h:279:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#900: FILE: include/asm-powerpc/system.h:279:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#901: FILE: include/asm-powerpc/system.h:280:
+"	stdcx.	%3,0,%2 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#901: FILE: include/asm-powerpc/system.h:280:
+"	stdcx.	%3,0,%2 \n\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#903: FILE: include/asm-powerpc/system.h:282:
+	: "=&r" (prev), "+m" (*(volatile unsigned long *)p)

WARNING:INLINE: plain inline is preferred over __inline__
#916: FILE: include/asm-powerpc/system.h:311:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#917: FILE: include/asm-powerpc/system.h:312:
+__xchg_local(volatile void *ptr, unsigned long x, unsigned int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#936: FILE: include/asm-powerpc/system.h:331:
+#define xchg_local(ptr,x)						     \
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#936: FILE: include/asm-powerpc/system.h:331:
+#define xchg_local(ptr,x)						     \
+  ({									     \
+     __typeof__(*(ptr)) _x_ = (x);					     \
+     (__typeof__(*(ptr))) __xchg_local((ptr),				     \
+     		(unsigned long)_x_, sizeof(*(ptr))); 			     \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: include/asm-powerpc/system.h:332:
+  ({^I^I^I^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: include/asm-powerpc/system.h:333:
+     __typeof__(*(ptr)) _x_ = (x);^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: include/asm-powerpc/system.h:334:
+     (__typeof__(*(ptr))) __xchg_local((ptr),^I^I^I^I     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: include/asm-powerpc/system.h:335:
+     ^I^I(unsigned long)_x_, sizeof(*(ptr))); ^I^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: include/asm-powerpc/system.h:335:
+     ^I^I(unsigned long)_x_, sizeof(*(ptr))); ^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: include/asm-powerpc/system.h:335:
+     ^I^I(unsigned long)_x_, sizeof(*(ptr))); ^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: include/asm-powerpc/system.h:336:
+  })$

WARNING:INLINE: plain inline is preferred over __inline__
#950: FILE: include/asm-powerpc/system.h:369:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#951: FILE: include/asm-powerpc/system.h:370:
+__cmpxchg_u32_local(volatile unsigned int *p, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: include/asm-powerpc/system.h:371:
+__cmpxchg_u32_local(volatile unsigned int *p, unsigned long old,
+			unsigned long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#956: FILE: include/asm-powerpc/system.h:375:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#957: FILE: include/asm-powerpc/system.h:376:
+"1:	lwarx	%0,0,%2		# __cmpxchg_u32\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#960: FILE: include/asm-powerpc/system.h:379:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#960: FILE: include/asm-powerpc/system.h:379:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#961: FILE: include/asm-powerpc/system.h:380:
+"	stwcx.	%4,0,%2\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#963: FILE: include/asm-powerpc/system.h:382:
+	"\n\

WARNING:INLINE: plain inline is preferred over __inline__
#980: FILE: include/asm-powerpc/system.h:414:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#981: FILE: include/asm-powerpc/system.h:415:
+__cmpxchg_u64_local(volatile unsigned long *p, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: include/asm-powerpc/system.h:416:
+__cmpxchg_u64_local(volatile unsigned long *p, unsigned long old,
+			unsigned long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#986: FILE: include/asm-powerpc/system.h:420:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#987: FILE: include/asm-powerpc/system.h:421:
+"1:	ldarx	%0,0,%2		# __cmpxchg_u64\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#992: FILE: include/asm-powerpc/system.h:426:
+	"\n\

WARNING:INLINE: plain inline is preferred over __inline__
#1007: FILE: include/asm-powerpc/system.h:456:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1008: FILE: include/asm-powerpc/system.h:457:
+__cmpxchg_local(volatile void *ptr, unsigned long old, unsigned long new,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: include/asm-powerpc/system.h:458:
+__cmpxchg_local(volatile void *ptr, unsigned long old, unsigned long new,
+	  unsigned int size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1030: FILE: include/asm-powerpc/system.h:480:
 
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1031: FILE: include/asm-powerpc/system.h:481:
+#define cmpxchg_local(ptr,o,n)						 \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1031: FILE: include/asm-powerpc/system.h:481:
+#define cmpxchg_local(ptr,o,n)						 \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1031: FILE: include/asm-powerpc/system.h:481:
+#define cmpxchg_local(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,	 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: include/asm-powerpc/system.h:482:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: include/asm-powerpc/system.h:483:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: include/asm-powerpc/system.h:484:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: include/asm-powerpc/system.h:485:
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: include/asm-powerpc/system.h:487:
+  })$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#1068: FILE: include/asm-sparc64/atomic.h:97:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	likely(c != (u));					\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#1068: FILE: include/asm-sparc64/atomic.h:97:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	likely(c != (u));					\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#1125: FILE: include/asm-x86_64/atomic.h:433:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#1125: FILE: include/asm-x86_64/atomic.h:433:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1150: FILE: include/asm-x86_64/system.h:212:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: include/asm-x86_64/system.h:213:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,
+			unsigned long old, unsigned long new, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1154: FILE: include/asm-x86_64/system.h:216:
+	unsigned long prev;
+	switch (size) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1186: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1186: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1186: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1187: FILE: include/asm-x86_64/system.h:249:
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1188: FILE: include/asm-x86_64/system.h:250:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 70 warnings, 50 checks, 1079 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
