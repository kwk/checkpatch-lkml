WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#12: 
Subject: [PATCH] Framebuffer: 2nd try: client notification mecanism & PM
                                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#35: 
notification mecanism by just setting the dummy fbops and directly calling
             ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
vt.c is disturbing me). It may be worth doing better than just update_screen

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#119: FILE: drivers/video/fbmem.c:1424:
+	if (client == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: drivers/video/fbmem.c:1430:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/video/fbmem.c:1442:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#152: FILE: drivers/video/fbmem.c:1457:
+#define make_fb_client_call(name) \
+int fb_clients_call_##name(struct fb_info *info) \
+{ \
+	struct fb_client *client = NULL; \
+	struct list_head *pos; \
+\
+	down(&fb_clients_lock); \
+	list_for_each(pos, &fb_clients) { \
+		client = list_entry(pos, struct fb_client, link); \
+		if (try_module_get(client->ops->owner)) { \
+			if (client->ops->name) \
+				client->ops->name(client->data, info); \
+			module_put(client->ops->owner); \
+		} \
+	} \
+	up(&fb_clients_lock); \
+	return 0; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#152: FILE: drivers/video/fbmem.c:1457:
+#define make_fb_client_call(name) \
+int fb_clients_call_##name(struct fb_info *info) \
+{ \
+	struct fb_client *client = NULL; \
+	struct list_head *pos; \
+\
+	down(&fb_clients_lock); \
+	list_for_each(pos, &fb_clients) { \
+		client = list_entry(pos, struct fb_client, link); \
+		if (try_module_get(client->ops->owner)) { \
+			if (client->ops->name) \
+				client->ops->name(client->data, info); \
+			module_put(client->ops->owner); \
+		} \
+	} \
+	up(&fb_clients_lock); \
+	return 0; \
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#183: FILE: drivers/video/fbmem.c:1497:
+EXPORT_SYMBOL(register_fb_client);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#184: FILE: drivers/video/fbmem.c:1498:
+EXPORT_SYMBOL(unregister_fb_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#185: FILE: drivers/video/fbmem.c:1499:
+EXPORT_SYMBOL(fb_clients_call_mode_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: drivers/video/fbmem.c:1500:
+EXPORT_SYMBOL(fb_clients_call_suspended);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#187: FILE: drivers/video/fbmem.c:1501:
+EXPORT_SYMBOL(fb_clients_call_resumed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#188: FILE: drivers/video/fbmem.c:1502:
+EXPORT_SYMBOL(fb_dummy_fillrect);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#189: FILE: drivers/video/fbmem.c:1503:
+EXPORT_SYMBOL(fb_dummy_copyarea);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#190: FILE: drivers/video/fbmem.c:1504:
+EXPORT_SYMBOL(fb_dummy_imageblit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#191: FILE: drivers/video/fbmem.c:1505:
+EXPORT_SYMBOL(fb_dummy_cursor);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: include/linux/fb.h:362:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: include/linux/fb.h:368:
+^I * $

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#265: FILE: include/linux/fb.h:370:
+	 * semaphore explicitely (call acquire_console_sem()) as it
 	             ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: include/linux/fb.h:372:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: include/linux/fb.h:373:
+^I */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: include/linux/fb.h:374:
+struct fb_client_ops {^I$

WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#274: FILE: include/linux/fb.h:379:
+	/* The device is beeing suspended, do not access from
 	                 ^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: include/linux/fb.h:440:
+   int suspended;^I^I^I/* Is this currently suspended ? */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: include/linux/fb.h:454:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: include/linux/fb.h:454:
+   $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: include/linux/fb.h:518:
+extern int fb_dummy_cursor(struct fb_info *info, struct fb_cursor *cursor);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: include/linux/fb.h:519:
+extern void fb_dummy_fillrect(struct fb_info *info, const struct fb_fillrect *rect); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/fb.h:519:
+extern void fb_dummy_fillrect(struct fb_info *info, const struct fb_fillrect *rect); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: include/linux/fb.h:520:
+extern void fb_dummy_copyarea(struct fb_info *info, const struct fb_copyarea *area); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/fb.h:520:
+extern void fb_dummy_copyarea(struct fb_info *info, const struct fb_copyarea *area); 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/fb.h:521:
+extern void fb_dummy_imageblit(struct fb_info *info, const struct fb_image *image);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/fb.h:626:
+extern int fb_set_suspend(struct fb_info *info, int suspended);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/fb.h:632:
+extern int register_fb_client(struct fb_client_ops *ops, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/fb.h:633:
+extern int unregister_fb_client(struct fb_client_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/fb.h:634:
+extern int fb_clients_call_mode_changed(struct fb_info *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/linux/fb.h:635:
+extern int fb_clients_call_suspended(struct fb_info *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: include/linux/fb.h:636:
+extern int fb_clients_call_resumed(struct fb_info *info);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 16 warnings, 13 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
