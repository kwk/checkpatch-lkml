CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#51: 
; (C) 2003 Herbert Pötzl <herbert@13thfloor.at>
                    ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#72: 
diff -NurP --minimal linux-2.6.0-test3/fs/ext2/ioctl.c linux-2.6.0-test3-bme0.03/fs/ext2/ioctl.c

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: fs/namei.c:215:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
 	    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: fs/namei.c:216:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
+		(S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#152: FILE: fs/namei.c:1046:
+static inline int mnt_may_create(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/namei.c:1047:
+       if (child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#153: FILE: fs/namei.c:1047:
+       if (child->d_inode)
+               return -EEXIST;

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: fs/namei.c:1048:
+               return -EEXIST;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: fs/namei.c:1048:
+               return -EEXIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: fs/namei.c:1049:
+       if (IS_DEADDIR(dir))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#155: FILE: fs/namei.c:1049:
+       if (IS_DEADDIR(dir))
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: fs/namei.c:1050:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/namei.c:1050:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/namei.c:1051:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#157: FILE: fs/namei.c:1051:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: fs/namei.c:1052:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: fs/namei.c:1052:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/namei.c:1053:
+       return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#162: FILE: fs/namei.c:1056:
+static inline int mnt_may_unlink(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/namei.c:1057:
+       if (!child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#163: FILE: fs/namei.c:1057:
+       if (!child->d_inode)
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: fs/namei.c:1058:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/namei.c:1058:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: fs/namei.c:1059:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#165: FILE: fs/namei.c:1059:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: fs/namei.c:1060:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/namei.c:1060:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/namei.c:1061:
+       return 0;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#223: FILE: fs/namei.c:1658:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#223: FILE: fs/namei.c:1658:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

WARNING:INDENTED_LABEL: labels should not be indented
#227: FILE: fs/namei.c:1662:
+	exit2:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#235: FILE: fs/namei.c:1734:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#235: FILE: fs/namei.c:1734:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/namespace.c:229:
+	seq_puts(m, (MNT_IS_RDONLY(mnt) ||
+		(mnt->mnt_sb->s_flags & MS_RDONLY)) ? " ro" : " rw");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#269: FILE: fs/namespace.c:520:
+static int do_loopback(struct nameidata *nd, char *old_name, unsigned long flags, int mnt_flags)
                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#301: FILE: fs/namespace.c:780:
+		retval = do_loopback(&nd, dev_name, flags, mnt_flags);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#313: FILE: fs/open.c:226:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#322: FILE: fs/open.c:350:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#331: FILE: fs/open.c:399:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWOTH' are not preferred. Consider using octal permissions '0002'.
#341: FILE: fs/open.c:473:
+		if (!res && (mode & S_IWOTH)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#342: FILE: fs/open.c:474:
+		   && !special_file(nd.dentry->d_inode->i_mode)
 		                    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#342: FILE: fs/open.c:474:
+		if (!res && (mode & S_IWOTH)
+		   && !special_file(nd.dentry->d_inode->i_mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#343: FILE: fs/open.c:475:
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#343: FILE: fs/open.c:475:
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))
 		                                                      ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#343: FILE: fs/open.c:475:
+		   && !special_file(nd.dentry->d_inode->i_mode)
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#361: FILE: fs/open.c:611:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: fs/open.c:632:
+static int chown_common(struct vfsmount *mnt, struct dentry * dentry, uid_t user, gid_t group)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/open.c:674:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/open.c:674:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: fs/open.c:687:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: fs/open.c:687:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000335672.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 38 warnings, 5 checks, 338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000335672.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
