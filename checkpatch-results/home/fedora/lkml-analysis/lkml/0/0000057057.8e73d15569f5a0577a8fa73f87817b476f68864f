CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: security/slim/slim.h:107:
+extern __init int slm_init_debugfs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: security/slim/slim.h:108:
+extern __exit void slm_cleanup_debugfs(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: security/slim/slim.h:112:
+^ISLM_BASE = 1, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: security/slim/slim.h:113:
+^ISLM_INTEGRITY = 2, $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#57: FILE: security/slim/slim.h:119:
+#define dprintk(level, format, a...) \
+	if (slm_debug & level) \
+		printk(KERN_INFO format, ##a)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#57: FILE: security/slim/slim.h:119:
+#define dprintk(level, format, a...) \
+	if (slm_debug & level) \
+		printk(KERN_INFO format, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#59: FILE: security/slim/slim.h:121:
+		printk(KERN_INFO format, ##a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#76: FILE: security/slim/slm_main.c:141:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#84: FILE: security/slim/slm_main.c:148:
+			dprintk(SLM_BASE, "pid %d - revoking write perm "
+				"for %s\n", current->pid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#101: FILE: security/slim/slm_main.c:202:
+			dprintk(SLM_BASE, "%s: pid %d - unmap SYSV"
+				" shmem for %ld\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#101: FILE: security/slim/slm_main.c:202:
+				" shmem for %ld\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#111: FILE: security/slim/slm_main.c:210:
+				"%s: pid %d - revoking write"
+				" perm for %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#111: FILE: security/slim/slm_main.c:210:
+				" perm for %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#126: FILE: security/slim/slm_main.c:242:
+				__FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != group_tsk->pid'
#137: FILE: security/slim/slm_main.c:258:
+	if ((current->pid != group_tsk->pid)
+	    && (current->mm == group_tsk->mm)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm == group_tsk->mm'
#137: FILE: security/slim/slm_main.c:258:
+	if ((current->pid != group_tsk->pid)
+	    && (current->mm == group_tsk->mm)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#138: FILE: security/slim/slm_main.c:259:
+	if ((current->pid != group_tsk->pid)
+	    && (current->mm == group_tsk->mm)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#140: FILE: security/slim/slm_main.c:261:
+			__FUNCTION__, current->pid);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#158: FILE: security/slim/slm_main.c:280:
+		__FUNCTION__, relation, thread_tsk->pid);

WARNING:SPLIT_STRING: quoted string split across lines
#197: FILE: security/slim/slm_main.c:457:
+			dprintk(SLM_INTEGRITY, "%s:%s - slm_get_xattr "
+				"not supported pid %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#197: FILE: security/slim/slm_main.c:457:
+				"not supported pid %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#207: FILE: security/slim/slm_main.c:475:
+			__FUNCTION__, dentry->d_name.name, rc);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#215: FILE: security/slim/slm_main.c:538:
+		dprintk(SLM_VERBOSE, "%s: %s level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: security/slim/slm_main.c:538:
+		dprintk(SLM_VERBOSE, "%s: %s level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#226: FILE: security/slim/slm_main.c:577:
+			__FUNCTION__, tsk->pid, current->pid);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#246: FILE: security/slim/slm_main.c:602:
 	      || (level->iac_level == SLM_IAC_EXEMPT))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#249: FILE: security/slim/slm_main.c:605:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			" pid %d(%s p=%d-%s) demoting integrity to"

WARNING:SPLIT_STRING: quoted string split across lines
#250: FILE: security/slim/slm_main.c:606:
+			" pid %d(%s p=%d-%s) demoting integrity to"
+			" iac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_r'
#255: FILE: security/slim/slm_main.c:611:
+			? "GUARD" : slm_iac_str[parent_tsec->
+						iac_r],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: security/slim/slm_main.c:644:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) promoting secrecy to "

WARNING:SPLIT_STRING: quoted string split across lines
#285: FILE: security/slim/slm_main.c:645:
+			"pid %d(%s p=%d-%s) promoting secrecy to "
+			"p=%d-%s(%s)\n", parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->sac_rx'
#289: FILE: security/slim/slm_main.c:649:
+			? "GUARD" : slm_sac_str[parent_tsec->
+						sac_rx],

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#330: FILE: security/slim/slm_main.c:688:
 	      || (level->iac_level == SLM_IAC_NOTDEFINED)
+	      || (level->iac_level == SLM_IAC_EXEMPT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#331: FILE: security/slim/slm_main.c:689:
+	      || (level->iac_level == SLM_IAC_EXEMPT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#334: FILE: security/slim/slm_main.c:692:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) can't write higher "

WARNING:SPLIT_STRING: quoted string split across lines
#335: FILE: security/slim/slm_main.c:693:
+			"pid %d(%s p=%d-%s) can't write higher "
+			"integrity iac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#340: FILE: security/slim/slm_main.c:698:
+			? "GUARD" : slm_iac_str[parent_tsec->
+						iac_wx],

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#365: FILE: security/slim/slm_main.c:720:
 	if (!((cur_tsec->sac_w <= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#366: FILE: security/slim/slm_main.c:721:
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#369: FILE: security/slim/slm_main.c:724:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) can't write lower "

WARNING:SPLIT_STRING: quoted string split across lines
#370: FILE: security/slim/slm_main.c:725:
+			"pid %d(%s p=%d-%s) can't write lower "
+			"secrecy sac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->sac_w'
#375: FILE: security/slim/slm_main.c:730:
+			? "GUARD" : slm_sac_str[parent_tsec->
+						sac_w],

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#415: FILE: security/slim/slm_main.c:765:
+			__FUNCTION__, ictr++);

CHECK:BRACES: braces {} should be used on all arms of this statement
#426: FILE: security/slim/slm_main.c:780:
+	if (parent_tsk)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#428: FILE: security/slim/slm_main.c:782:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#429: FILE: security/slim/slm_main.c:783:
+		printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#431: FILE: security/slim/slm_main.c:785:
+		       __FUNCTION__, current->pid);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#467: FILE: security/slim/slm_main.c:842:
+	if (nd) {		/* preferably use fullname */
 	    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#508: FILE: security/slim/slm_main.c:898:
+		dprintk(SLM_VERBOSE, "%s: parent_isec is null\n", __FUNCTION__);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#519: FILE: security/slim/slm_main.c:908:
 	if (!((cur_tsec->iac_wx >= parent_level->iac_level)
+	      || (parent_level->iac_level == SLM_IAC_EXEMPT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#520: FILE: security/slim/slm_main.c:909:
+	      || (parent_level->iac_level == SLM_IAC_EXEMPT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#522: FILE: security/slim/slm_main.c:911:
+		dprintk(SLM_INTEGRITY, "%s: prohibit current %s level "
+			"process writing into %s (%s level directory)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#523: FILE: security/slim/slm_main.c:912:
+			__FUNCTION__, slm_iac_str[cur_tsec->iac_wx],

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_isec->level.iac_level != SLM_IAC_NOTDEFINED'
#537: FILE: security/slim/slm_main.c:993:
+	if (parent_isec && (parent_isec->level.iac_level != SLM_IAC_NOTDEFINED)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#540: FILE: security/slim/slm_main.c:996:
+		dprintk(SLM_VERBOSE, "%s: level %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#552: FILE: security/slim/slm_main.c:1026:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#565: FILE: security/slim/slm_main.c:1088:
+		dprintk(SLM_VERBOSE, "%s:ppid %d (%s) %s - creating"
+			" lower integrity directory, than parent\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#566: FILE: security/slim/slm_main.c:1089:
+			__FUNCTION__, current->pid, current->comm,

WARNING:SPLIT_STRING: quoted string split across lines
#580: FILE: security/slim/slm_main.c:1115:
+		dprintk(SLM_BASE, "%s: prohibit rename of %s (low"
+			" integrity) into %s (higher level directory)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#581: FILE: security/slim/slm_main.c:1116:
+			__FUNCTION__, old_dentry->d_name.name,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#594: FILE: security/slim/slm_main.c:1138:
+		dprintk(SLM_VERBOSE, "%s: cur_tsec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: security/slim/slm_main.c:1146:
+	dprintk(SLM_VERBOSE, "%s: name %s value %s process:iac_r %s "
+		"iac_wx %s\n", __FUNCTION__, name, (char *)value,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#602: FILE: security/slim/slm_main.c:1146:
+		"iac_wx %s\n", __FUNCTION__, name, (char *)value,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#614: FILE: security/slim/slm_main.c:1201:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#626: FILE: security/slim/slm_main.c:1253:
+				"%s: ppid %d pid %d demoting "
+				"family %d type %d protocol %d kern %d"

WARNING:SPLIT_STRING: quoted string split across lines
#627: FILE: security/slim/slm_main.c:1254:
+				"family %d type %d protocol %d kern %d"
+				" to untrusted.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#627: FILE: security/slim/slm_main.c:1254:
+				" to untrusted.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#639: FILE: security/slim/slm_main.c:1284:
+		dprintk(SLM_VERBOSE, "%s: slm_isec is null\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#648: FILE: security/slim/slm_main.c:1292:
+				__FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#659: FILE: security/slim/slm_main.c:1349:
+		dprintk(SLM_VERBOSE, "ruid %d euid %d suid %d "
+			"cur: uid %d euid %d suid %d\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#665: FILE: security/slim/slm_main.c:1353:
 		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED)) {

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: security/slim/slm_main.c:1356:
+				"Integrity: pid %d iac_r %d "
+				" iac_wx %d remains UNTRUSTED\n",

WARNING:SPLIT_STRING: quoted string split across lines
#673: FILE: security/slim/slm_main.c:1361:
+			dprintk(SLM_INTEGRITY, "setting: pid %d iac_r %d "
+				" iac_wx %d to USER\n",

WARNING:SPLIT_STRING: quoted string split across lines
#682: FILE: security/slim/slm_main.c:1370:
+			dprintk(SLM_INTEGRITY, "setting: pid %d iac_r %d "
+				" iac_wx %d to SYSTEM\n",

CHECK:BRACES: Unbalanced braces around else statement
#690: FILE: security/slim/slm_main.c:1377:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#692: FILE: security/slim/slm_main.c:1379:
+			dprintk(SLM_INTEGRITY, "%s: pid %d iac_r %d "
+				" iac_wx %d \n", __FUNCTION__,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#692: FILE: security/slim/slm_main.c:1379:
+				" iac_wx %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#692: FILE: security/slim/slm_main.c:1379:
+				" iac_wx %d \n", __FUNCTION__,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#702: FILE: security/slim/slm_main.c:1389:
+	dprintk(SLM_BASE, "%s: %s \n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#702: FILE: security/slim/slm_main.c:1389:
+	dprintk(SLM_BASE, "%s: %s \n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#718: FILE: security/slim/slm_main.c:1432:
+				__FUNCTION__,

CHECK:BRACES: Unbalanced braces around else statement
#724: FILE: security/slim/slm_main.c:1438:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#727: FILE: security/slim/slm_main.c:1441:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s)"
+				" %s executing\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#728: FILE: security/slim/slm_main.c:1442:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#733: FILE: security/slim/slm_main.c:1447:
+				? "GUARD" : slm_iac_str[parent_tsec->
+							iac_wx],

WARNING:SPLIT_STRING: quoted string split across lines
#748: FILE: security/slim/slm_main.c:1462:
+				"%s: pid %d(%s %d-%s) %s executing, "
+				"demoting integrity to iac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#749: FILE: security/slim/slm_main.c:1463:
+				__FUNCTION__,

CHECK:BRACES: Unbalanced braces around else statement
#756: FILE: security/slim/slm_main.c:1470:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#759: FILE: security/slim/slm_main.c:1473:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s)"
+				" %s executing, demoting integrity to "

WARNING:SPLIT_STRING: quoted string split across lines
#760: FILE: security/slim/slm_main.c:1474:
+				" %s executing, demoting integrity to "
+				" iac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#761: FILE: security/slim/slm_main.c:1475:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#765: FILE: security/slim/slm_main.c:1479:
+				? "GUARD" : slm_iac_str[parent_tsec->
+							iac_wx],

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#784: FILE: security/slim/slm_main.c:1503:
 	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited)) {

WARNING:SPLIT_STRING: quoted string split across lines
#786: FILE: security/slim/slm_main.c:1505:
+		dprintk(SLM_INTEGRITY, "%s:pid %d %s prohibiting "
+			"script from being an unlimited guard\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#787: FILE: security/slim/slm_main.c:1506:
+			__FUNCTION__, current->pid, bprm->filename);

WARNING:SPLIT_STRING: quoted string split across lines
#793: FILE: security/slim/slm_main.c:1512:
+		"%s: ppid %d pid %d %s (integrity guard)"
+		"cur: r %s wx %s new: r %s wx %s %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#794: FILE: security/slim/slm_main.c:1513:
+		__FUNCTION__, parent_tsk->pid, current->pid,

WARNING:SPLIT_STRING: quoted string split across lines
#819: FILE: security/slim/slm_main.c:1556:
+				"%s: pid %d(%s %d-%s) %s "
+				" executing, promoting secrecy to sac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#820: FILE: security/slim/slm_main.c:1557:
+				__FUNCTION__, current->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#824: FILE: security/slim/slm_main.c:1561:
+				? "GUARD" : slm_sac_str[cur_tsec->
+							sac_rx],

CHECK:BRACES: Unbalanced braces around else statement
#827: FILE: security/slim/slm_main.c:1564:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#830: FILE: security/slim/slm_main.c:1567:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+				"executing, promoting secrecy to sac=%d-%s\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#830: FILE: security/slim/slm_main.c:1567:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+				"executing, promoting secrecy to sac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#831: FILE: security/slim/slm_main.c:1568:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#841: FILE: security/slim/slm_main.c:1578:
+				? "GUARD" : slm_sac_str[cur_tsec->
+							sac_rx],

WARNING:SPLIT_STRING: quoted string split across lines
#856: FILE: security/slim/slm_main.c:1601:
+		"%s: ppid %d pid %d %s (secrecy guard)"
+		"cur: rx %s w %s new: rx %s w %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#856: FILE: security/slim/slm_main.c:1601:
+		"cur: rx %s w %s new: rx %s w %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#872: FILE: security/slim/slm_main.c:1637:
+			__FUNCTION__, bprm->filename, bprm->interp);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#876: FILE: security/slim/slm_main.c:1641:
+				__FUNCTION__, bprm->filename);

CHECK:BRACES: Unbalanced braces around else statement
#879: FILE: security/slim/slm_main.c:1643:
+		} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#888: FILE: security/slim/slm_main.c:1652:
+		__FUNCTION__, bprm->filename, level.iac_level,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#899: FILE: security/slim/slm_main.c:1664:
+			__FUNCTION__, bprm->filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#904: FILE: security/slim/slm_main.c:1669:
+			__FUNCTION__, bprm->filename);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#912: FILE: security/slim/slm_main.c:1713:
+	dprintk(SLM_INTEGRITY, "%s: level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#912: FILE: security/slim/slm_main.c:1713:
+	dprintk(SLM_INTEGRITY, "%s: level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#935: FILE: security/slim/slm_main.c:1801:
+		__FUNCTION__, shp->id, mask,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#948: FILE: security/slim/slm_main.c:1849:
+			__FUNCTION__, slm_xattr_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#956: FILE: security/slim/slm_main.c:1856:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#962: FILE: security/slim/slm_main.c:1862:
+			"%s: Error registering debugfs\n", __FUNCTION__);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#965: FILE: security/slim/slm_main.c:1864:
		if (mod_reg_security(MY_NAME, &slm_security_ops)) {

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#965: FILE: security/slim/slm_main.c:1864:
		if (mod_reg_security(MY_NAME, &slm_security_ops)) {
+			dprintk(SLM_BASE,

WARNING:SPLIT_STRING: quoted string split across lines
#968: FILE: security/slim/slm_main.c:1867:
+				"%s: security hooks registration "
+				"failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#968: FILE: security/slim/slm_main.c:1867:
+				"failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#975: FILE: security/slim/slm_main.c:1873:
+	dprintk(SLM_BASE, "%s: registered security hooks\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#991: FILE: security/slim/slm_main.c:1885:
+				"%s: failure unregistering module "
+				"with primary module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#991: FILE: security/slim/slm_main.c:1885:
+				"with primary module.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#995: FILE: security/slim/slm_main.c:1889:
+			"%s: failure unregistering module "
+			"with the kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#995: FILE: security/slim/slm_main.c:1889:
+			"with the kernel\n", __FUNCTION__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#997: FILE: security/slim/slm_main.c:1891:
+	dprintk(SLM_BASE, "%s: completed \n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#997: FILE: security/slim/slm_main.c:1891:
+	dprintk(SLM_BASE, "%s: completed \n", __FUNCTION__);

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#1005: FILE: security/slim/slm_main.c:1900:
+module_param(slm_debug, uint, 1);
Permission bits should use 4 digit octal permissions (like 0700 or 0444).
Avoid using any other base like decimal.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: security/slim/slm_secfs.c:23:
+    *slim_verbose;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1031: FILE: security/slim/slm_secfs.c:60:
+static ssize_t slm_read_debug(struct file *file, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1032: FILE: security/slim/slm_secfs.c:61:
+			      size_t buflen, loff_t * ppos)

ERROR:SPACING: space required before the open parenthesis '('
#1041: FILE: security/slim/slm_secfs.c:70:
+	switch(type) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1065: FILE: security/slim/slm_secfs.c:94:
+static ssize_t slm_write_debug(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1066: FILE: security/slim/slm_secfs.c:95:
+			       size_t buflen, loff_t * ppos)

ERROR:SPACING: space required before the open parenthesis '('
#1074: FILE: security/slim/slm_secfs.c:103:
+	switch(type) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1097: FILE: security/slim/slm_secfs.c:126:
+static struct file_operations slm_debug_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: security/slim/slm_secfs.c:151:
+^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1116: FILE: security/slim/slm_secfs.c:152:
+	slim_integrity = debugfs_create_file("integrity", S_IRUSR | S_IRGRP,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1121: FILE: security/slim/slm_secfs.c:157:
+	slim_secrecy = debugfs_create_file("secrecy", S_IRUSR | S_IRGRP,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1126: FILE: security/slim/slm_secfs.c:162:
+	slim_verbose = debugfs_create_file("verbose", S_IRUSR | S_IRGRP,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057057.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 108 warnings, 23 checks, 1062 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057057.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
