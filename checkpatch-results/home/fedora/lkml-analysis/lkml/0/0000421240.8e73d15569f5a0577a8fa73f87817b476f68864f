WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -Naur linux-2.5.44.orig/drivers/Makefile linux-2.5.44.lkcd/drivers/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/dump/dump_base.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: drivers/dump/dump_base.c:50:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: drivers/dump/dump_base.c:145:
+ *     8:   Write out the dump header and all conventional/cached $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: drivers/dump/dump_base.c:146:
+ *^I    memory (RAM) pages in the system (kernel, user, free).  $

WARNING:TYPO_SPELLING: 'easer' may be misspelled - perhaps 'easier'?
#233: FILE: drivers/dump/dump_base.c:157:
+ *		it's easer to test things like non-conventional
   		     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: drivers/dump/dump_base.c:159:
+ *^I^IIf would be more consistent with dump_level being $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: drivers/dump/dump_base.c:160:
+ *^I^Ia bitmask. We might also consider changing the name $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: drivers/dump/dump_base.c:161:
+ *^I^Ito 'dump_passes' to make it more clear that the bitmask $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: drivers/dump/dump_base.c:163:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: drivers/dump/dump_base.c:168:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#284: FILE: drivers/dump/dump_base.c:208:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: drivers/dump/dump_base.c:215:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: drivers/dump/dump_base.c:216:
+ * Handle printing of 64-bit values  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: drivers/dump/dump_base.c:218:
+ * NOTE: on ia64 %llx is recommended for ia32. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: drivers/dump/dump_base.c:219:
+ *       on RedHat 7.2 ^I%llx work in user space but not in the kernel.$

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#301: FILE: drivers/dump/dump_base.c:225:
+#define PU64X "%Lx"

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#317: FILE: drivers/dump/dump_base.c:241:
+long dump_scheduler_enabled = 0;     /* Default: scheduler is disabled     */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#329: FILE: drivers/dump/dump_base.c:253:
+long dump_unreserved_mem = 0;      /* Save Pages even if it isn't reserved */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#330: FILE: drivers/dump/dump_base.c:254:
+long dump_unreferenced_mem = 0;    /* Save Pages even if page_count == 0   */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#331: FILE: drivers/dump/dump_base.c:255:
+long dump_nonconventional_mem = 0; /* Save non-conventional mem (firmware) */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#332: FILE: drivers/dump/dump_base.c:256:
+volatile int dump_started = 0;	   /* Indicated we are about to dump       */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#332: FILE: drivers/dump/dump_base.c:256:
+volatile int dump_started = 0;	   /* Indicated we are about to dump       */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#333: FILE: drivers/dump/dump_base.c:257:
+static struct dump_operations *dump_device_ops = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:INDENTED_LABEL: labels should not be indented
#338: FILE: drivers/dump/dump_base.c:262:
+	compress_type:	DUMP_COMPRESS_NONE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#339: FILE: drivers/dump/dump_base.c:263:
+	compress_func:	dump_compress_none,
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#339: FILE: drivers/dump/dump_base.c:263:
+	compress_func:	dump_compress_none,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/dump/dump_base.c:270:
+static int dump_ioctl(struct inode *i, struct file *f,
+	unsigned int cmd, unsigned long arg);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#348: FILE: drivers/dump/dump_base.c:272:
+static struct file_operations dump_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#349: FILE: drivers/dump/dump_base.c:273:
+	open:		dump_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#350: FILE: drivers/dump/dump_base.c:274:
+	release:	dump_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#350: FILE: drivers/dump/dump_base.c:274:
+	release:	dump_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#351: FILE: drivers/dump/dump_base.c:275:
+	ioctl:		dump_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#351: FILE: drivers/dump/dump_base.c:275:
+	ioctl:		dump_ioctl,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: drivers/dump/dump_base.c:289:
+static int dump_okay = FALSE;      ^I   /* can we dump out to disk?     */$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#373: FILE: drivers/dump/dump_base.c:297:
+extern int panic_timeout;          /* time before reboot                   */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: drivers/dump/dump_base.c:303:
+#if defined(__LITTLE_ENDIAN) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/dump/dump_base.c:332:
+dump_read_proc(char *page, char **start, off_t off,
+	int count, int *eof, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: drivers/dump/dump_base.c:338:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#415: FILE: drivers/dump/dump_base.c:339:
+	if (0 == strcmp(p->name, DUMP_LEVEL_NAME)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#418: FILE: drivers/dump/dump_base.c:342:
+	} else if (0 == strcmp(p->name, DUMP_FLAGS_NAME)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#421: FILE: drivers/dump/dump_base.c:345:
+	} else if (0 == strcmp(p->name, DUMP_COMPRESS_NAME)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#424: FILE: drivers/dump/dump_base.c:348:
+	} else if (0 == strcmp(p->name, DUMP_DEVICE_NAME)) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#428: FILE: drivers/dump/dump_base.c:352:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#433: FILE: drivers/dump/dump_base.c:357:
+		if (len <= 0) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#438: FILE: drivers/dump/dump_base.c:362:
+	return (len);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#455: FILE: drivers/dump/dump_base.c:379:
+	return (oldsize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: drivers/dump/dump_base.c:415:
+ *       block sizes, etc. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: drivers/dump/dump_base.c:416:
+ * ^I Writes DUMP_BUFFER_SIZE bytes in page buffer$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: drivers/dump/dump_base.c:418:
+ * Returns: number of bytes written or -ERRNO. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#501: FILE: drivers/dump/dump_base.c:425:
+	loff_t offset=0;
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: drivers/dump/dump_base.c:426:
+^I$

CHECK:SPACING: No space is necessary after a cast
#507: FILE: drivers/dump/dump_base.c:431:
+		offset = (loff_t) (*eof);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#513: FILE: drivers/dump/dump_base.c:437:
+		return (err1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: drivers/dump/dump_base.c:446:
+^I/* write to the dump device */ $

CHECK:SPACING: No space is necessary after a cast
#526: FILE: drivers/dump/dump_base.c:450:
+		*eof = (int) offset;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#529: FILE: drivers/dump/dump_base.c:453:
+		return (err);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#536: FILE: drivers/dump/dump_base.c:460:
+		return (err1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#541: FILE: drivers/dump/dump_base.c:465:
+	return (err);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#554: FILE: drivers/dump/dump_base.c:478:
+	dp.dp_address = dp.dp_size = 0x0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: drivers/dump/dump_base.c:488:
+	memcpy((void *)(dump_page_buf + *toffset),
+		(const void *)&dp, sizeof(dump_page_t));

WARNING:RETURN_VOID: void function return statements are not generally useful
#573: FILE: drivers/dump/dump_base.c:497:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#587: FILE: drivers/dump/dump_base.c:511:
+	if (PageInuse(p)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#592: FILE: drivers/dump/dump_base.c:516:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#599: FILE: drivers/dump/dump_base.c:523:
+	if (!PageInuse(p)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: drivers/dump/dump_base.c:528:
+	} else

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#608: FILE: drivers/dump/dump_base.c:532:
+long dump_add_page_debug = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#609: FILE: drivers/dump/dump_base.c:533:
+long dump_add_page_test_pattern = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: drivers/dump/dump_base.c:539:
+ * NB: page is a DUMP_PAGE_SIZE page, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: drivers/dump/dump_base.c:541:
+ * $

CHECK:SPACING: No space is necessary after a cast
#635: FILE: drivers/dump/dump_base.c:559:
+	p = (struct page *) &(mem_map[page_index]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mem_map[page_index]
#635: FILE: drivers/dump/dump_base.c:559:
+	p = (struct page *) &(mem_map[page_index]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#650: FILE: drivers/dump/dump_base.c:574:
+	else
[...]
+	if (!page_is_ram(page_index)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#650: FILE: drivers/dump/dump_base.c:574:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#653: FILE: drivers/dump/dump_base.c:577:
+	if (!page_is_ram(page_index)) {
[...]
+	else
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#654: FILE: drivers/dump/dump_base.c:578:
+		return (1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#656: FILE: drivers/dump/dump_base.c:580:
+	else
[...]
+	vaddr = page_address(p);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#656: FILE: drivers/dump/dump_base.c:580:
+	}
+	else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: drivers/dump/dump_base.c:597:
+^Idp.dp_byte_offset = dump_header.dh_num_bytes + DUMP_BUFFER_SIZE + $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#677: FILE: drivers/dump/dump_base.c:601:
+	switch(pass) {
+	    case 1:	break;
+	    case 2:	return(1); /* Already Dumped */
+	    case 3:	return(1); /* Already Dumped */
+	    case 4:	break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: drivers/dump/dump_base.c:601:
+	switch(pass) {

WARNING:TABSTOP: Statements should start on a tabstop
#678: FILE: drivers/dump/dump_base.c:602:
+	    case 1:	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#678: FILE: drivers/dump/dump_base.c:602:
+	    case 1:	break;

WARNING:TABSTOP: Statements should start on a tabstop
#679: FILE: drivers/dump/dump_base.c:603:
+	    case 2:	return(1); /* Already Dumped */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#679: FILE: drivers/dump/dump_base.c:603:
+	    case 2:	return(1); /* Already Dumped */

WARNING:TABSTOP: Statements should start on a tabstop
#680: FILE: drivers/dump/dump_base.c:604:
+	    case 3:	return(1); /* Already Dumped */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#680: FILE: drivers/dump/dump_base.c:604:
+	    case 3:	return(1); /* Already Dumped */

WARNING:TABSTOP: Statements should start on a tabstop
#681: FILE: drivers/dump/dump_base.c:605:
+	    case 4:	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#681: FILE: drivers/dump/dump_base.c:605:
+	    case 4:	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: drivers/dump/dump_base.c:609:
+ ^I * Selective dump:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#685: FILE: drivers/dump/dump_base.c:609:
+ ^I * Selective dump:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#686: FILE: drivers/dump/dump_base.c:610:
+^I *  ^ISome systems, have huge memories, NUMA for example, where$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: drivers/dump/dump_base.c:612:
+^I *^IThis is a simple 1st attempt at ordering the dump so the most $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#700: FILE: drivers/dump/dump_base.c:624:
+			break;
+		else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: drivers/dump/dump_base.c:626:
+^Icase 2: $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#705: FILE: drivers/dump/dump_base.c:629:
+			break;
+		else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#710: FILE: drivers/dump/dump_base.c:634:
+			break;
+		else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#715: FILE: drivers/dump/dump_base.c:639:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#721: FILE: drivers/dump/dump_base.c:645:
+		printk(KERN_ALERT "dump_add_page: !kern_addr_valid"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_add_page', this function's name, in a string
#721: FILE: drivers/dump/dump_base.c:645:
+		printk(KERN_ALERT "dump_add_page: !kern_addr_valid"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#722: FILE: drivers/dump/dump_base.c:646:
+		printk(KERN_ALERT "dump_add_page: !kern_addr_valid"
+				"(dp.dp_address: " PU64X "\n", dp.dp_address);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#723: FILE: drivers/dump/dump_base.c:647:
+		return(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#729: FILE: drivers/dump/dump_base.c:653:
+		printk(KERN_ALERT "dump_add_page(page_index:%lx, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_add_page', this function's name, in a string
#729: FILE: drivers/dump/dump_base.c:653:
+		printk(KERN_ALERT "dump_add_page(page_index:%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#730: FILE: drivers/dump/dump_base.c:654:
+		printk(KERN_ALERT "dump_add_page(page_index:%lx, "
+			"*toffset:%lx):\n", page_index, *toffset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: drivers/dump/dump_base.c:661:
+^Iif ((((unsigned long)vaddr < (unsigned long)current->thread_info + $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#737: FILE: drivers/dump/dump_base.c:661:
+	if ((((unsigned long)vaddr < (unsigned long)current->thread_info + 
[...]
+			size = DUMP_PAGE_SIZE;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#742: FILE: drivers/dump/dump_base.c:666:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#742: FILE: drivers/dump/dump_base.c:666:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: drivers/dump/dump_base.c:668:
+		size = dump_compress_func((char *)vaddr, DUMP_PAGE_SIZE,
+			(char *)dpcpage, DUMP_DPC_PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: drivers/dump/dump_base.c:683:
+	memcpy((void *)(dump_page_buf + *toffset), (const void *)&dp,
+		sizeof(dump_page_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: drivers/dump/dump_base.c:690:
+		memcpy((void *)(dump_page_buf + *toffset),
+			(const void *)dpcpage, size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/dump/dump_base.c:694:
+		DUMP_memcpy((void *)(dump_page_buf + *toffset),
+			(const void *)vaddr, size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: drivers/dump/dump_base.c:701:
+^I */^I$

CHECK:SPACING: No space is necessary after a cast
#779: FILE: drivers/dump/dump_base.c:703:
+		unsigned char num_pages = (char) (dump_header.dh_num_dump_pages

ERROR:CODE_INDENT: code indent should use tabs where possible
#780: FILE: drivers/dump/dump_base.c:704:
+^I^I^I       ^I& 0Xff);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#780: FILE: drivers/dump/dump_base.c:704:
+^I^I^I       ^I& 0Xff);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: drivers/dump/dump_base.c:709:
+^I^I^I*cp++ = num_pages;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#802: FILE: drivers/dump/dump_base.c:726:
+		printk(KERN_ALERT "dump_add_page: *toffset:%lx += size:%lx:\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_add_page', this function's name, in a string
#802: FILE: drivers/dump/dump_base.c:726:
+		printk(KERN_ALERT "dump_add_page: *toffset:%lx += size:%lx:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/dump/dump_base.c:727:
+		printk(KERN_ALERT "dump_add_page: *toffset:%lx += size:%lx:\n",
+			*toffset, size);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#809: FILE: drivers/dump/dump_base.c:733:
+	return (0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#824: FILE: drivers/dump/dump_base.c:748:
+		printk(KERN_ALERT "Dumping from interrupt handler !\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#825: FILE: drivers/dump/dump_base.c:749:
+		printk(KERN_ALERT "Uncertain scenario - but will try my best\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: drivers/dump/dump_base.c:750:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: drivers/dump/dump_base.c:751:
+^I^I * Must be an unrelated interrupt, not in the middle of io ! $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: drivers/dump/dump_base.c:752:
+^I^I * If we've panic'ed in the middle of io we should take $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: drivers/dump/dump_base.c:753:
+^I^I * another approach $

WARNING:RETURN_VOID: void function return statements are not generally useful
#848: FILE: drivers/dump/dump_base.c:772:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#867: FILE: drivers/dump/dump_base.c:791:
+	return;
+}

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#872: FILE: drivers/dump/dump_base.c:796:
+	static int i = 0;

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#874: FILE: drivers/dump/dump_base.c:798:
+	switch (++i%4) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#876: FILE: drivers/dump/dump_base.c:800:
+		printk("|\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#879: FILE: drivers/dump/dump_base.c:803:
+		printk("\\\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#882: FILE: drivers/dump/dump_base.c:806:
+		printk("-\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#885: FILE: drivers/dump/dump_base.c:809:
+		printk("/\b");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#905: FILE: drivers/dump/dump_base.c:829:
+	if ((sizeof(dump_header_t) +
[...]
+			DUMP_PRINTN("dump_configure_header(): combined "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_configure_header', this function's name, in a string
#907: FILE: drivers/dump/dump_base.c:831:
+			DUMP_PRINTN("dump_configure_header(): combined "

WARNING:SPLIT_STRING: quoted string split across lines
#908: FILE: drivers/dump/dump_base.c:832:
+			DUMP_PRINTN("dump_configure_header(): combined "
+				"headers larger than DUMP_BUFFER_SIZE!");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#909: FILE: drivers/dump/dump_base.c:833:
+			return (0);

CHECK:SPACING: No space is necessary after a cast
#920: FILE: drivers/dump/dump_base.c:844:
+	dump_header.dh_current_task = (unsigned long) current;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#936: FILE: drivers/dump/dump_base.c:860:
+^Imemcpy((void *)&(dump_header.dh_utsname_sysname), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_sysname
#936: FILE: drivers/dump/dump_base.c:860:
+	memcpy((void *)&(dump_header.dh_utsname_sysname), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: drivers/dump/dump_base.c:861:
+	memcpy((void *)&(dump_header.dh_utsname_sysname), 
+		(const void *)&(system_utsname.sysname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.sysname
#937: FILE: drivers/dump/dump_base.c:861:
+		(const void *)&(system_utsname.sysname), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: drivers/dump/dump_base.c:862:
+^Imemcpy((void *)&(dump_header.dh_utsname_nodename), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_nodename
#938: FILE: drivers/dump/dump_base.c:862:
+	memcpy((void *)&(dump_header.dh_utsname_nodename), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/dump/dump_base.c:863:
+	memcpy((void *)&(dump_header.dh_utsname_nodename), 
+		(const void *)&(system_utsname.nodename), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.nodename
#939: FILE: drivers/dump/dump_base.c:863:
+		(const void *)&(system_utsname.nodename), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#940: FILE: drivers/dump/dump_base.c:864:
+^Imemcpy((void *)&(dump_header.dh_utsname_release), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_release
#940: FILE: drivers/dump/dump_base.c:864:
+	memcpy((void *)&(dump_header.dh_utsname_release), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: drivers/dump/dump_base.c:865:
+	memcpy((void *)&(dump_header.dh_utsname_release), 
+		(const void *)&(system_utsname.release), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.release
#941: FILE: drivers/dump/dump_base.c:865:
+		(const void *)&(system_utsname.release), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: drivers/dump/dump_base.c:866:
+^Imemcpy((void *)&(dump_header.dh_utsname_version), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_version
#942: FILE: drivers/dump/dump_base.c:866:
+	memcpy((void *)&(dump_header.dh_utsname_version), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: drivers/dump/dump_base.c:867:
+	memcpy((void *)&(dump_header.dh_utsname_version), 
+		(const void *)&(system_utsname.version), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.version
#943: FILE: drivers/dump/dump_base.c:867:
+		(const void *)&(system_utsname.version), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: drivers/dump/dump_base.c:868:
+^Imemcpy((void *)&(dump_header.dh_utsname_machine), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_machine
#944: FILE: drivers/dump/dump_base.c:868:
+	memcpy((void *)&(dump_header.dh_utsname_machine), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: drivers/dump/dump_base.c:869:
+	memcpy((void *)&(dump_header.dh_utsname_machine), 
+		(const void *)&(system_utsname.machine), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.machine
#945: FILE: drivers/dump/dump_base.c:869:
+		(const void *)&(system_utsname.machine), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: drivers/dump/dump_base.c:870:
+^Imemcpy((void *)&(dump_header.dh_utsname_domainname), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_domainname
#946: FILE: drivers/dump/dump_base.c:870:
+	memcpy((void *)&(dump_header.dh_utsname_domainname), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#947: FILE: drivers/dump/dump_base.c:871:
+	memcpy((void *)&(dump_header.dh_utsname_domainname), 
+		(const void *)&(system_utsname.domainname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.domainname
#947: FILE: drivers/dump/dump_base.c:871:
+		(const void *)&(system_utsname.domainname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_panic_string
#950: FILE: drivers/dump/dump_base.c:874:
+		memcpy((void *)&(dump_header.dh_panic_string),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: drivers/dump/dump_base.c:875:
+		memcpy((void *)&(dump_header.dh_panic_string),
+			(const void *)panic_str, DUMP_PANIC_LEN);

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: drivers/dump/dump_base.c:878:
+        dump_header_asm.dha_magic_number = DUMP_ASM_MAGIC_NUMBER;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: drivers/dump/dump_base.c:878:
+        dump_header_asm.dha_magic_number = DUMP_ASM_MAGIC_NUMBER;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: drivers/dump/dump_base.c:879:
+        dump_header_asm.dha_version = DUMP_ASM_VERSION_NUMBER;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: drivers/dump/dump_base.c:879:
+        dump_header_asm.dha_version = DUMP_ASM_VERSION_NUMBER;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: drivers/dump/dump_base.c:880:
+        dump_header_asm.dha_header_size = sizeof(dump_header_asm_t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: drivers/dump/dump_base.c:880:
+        dump_header_asm.dha_header_size = sizeof(dump_header_asm_t);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header_asm.dha_regs
#960: FILE: drivers/dump/dump_base.c:884:
+		memcpy((void *)&(dump_header_asm.dha_regs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: drivers/dump/dump_base.c:885:
+		memcpy((void *)&(dump_header_asm.dha_regs),
+			(const void *)regs, sizeof(struct pt_regs));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#968: FILE: drivers/dump/dump_base.c:892:
+	return (1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: drivers/dump/dump_base.c:915:
+	memcpy(dump_page_buf, (const void *)&dump_header,
+		sizeof(dump_header_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/dump/dump_base.c:918:
+	memcpy((void *)(dump_page_buf + sizeof(dump_header_t)),
+		(const void *)&dump_header_asm, sizeof(dump_header_asm_t));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: drivers/dump/dump_base.c:923:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: drivers/dump/dump_base.c:924:
+^I * ALWAYS write out the dump header at DUMP_HEADER_OFFSET, $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1014: FILE: drivers/dump/dump_base.c:938:
+		return (0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/dump/dump_base.c:952:
+dump_write_mbank(int *dump_truncated, int pass, u64 mbank_start,
+		u64 mbank_end, unsigned long *buf_loc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: drivers/dump/dump_base.c:959:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: drivers/dump/dump_base.c:959:
+  $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1035: FILE: drivers/dump/dump_base.c:959:
+			mem_loc += DUMP_PAGE_SIZE) {
+  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: drivers/dump/dump_base.c:961:
+^I^Iif (dump_add_page((mem_loc >> DUMP_PAGE_SHIFT), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/dump/dump_base.c:962:
+		if (dump_add_page((mem_loc >> DUMP_PAGE_SHIFT), 
+			buf_loc, pass)) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1055: FILE: drivers/dump/dump_base.c:979:
+				return(0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1067: FILE: drivers/dump/dump_base.c:991:
+^I ^I* Update the header every once in a while -- this$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1067: FILE: drivers/dump/dump_base.c:991:
+^I ^I* Update the header every once in a while -- this$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1067: FILE: drivers/dump/dump_base.c:991:
+		/*
+	 	* Update the header every once in a while -- this

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1068: FILE: drivers/dump/dump_base.c:992:
+	 	* Update the header every once in a while -- this
+		 * _must_ be done before we write the overflow end of

WARNING:SPLIT_STRING: quoted string split across lines
#1082: FILE: drivers/dump/dump_base.c:1006:
+					DUMP_PRINTN("Dump header update "
+							"failed!");

WARNING:SPLIT_STRING: quoted string split across lines
#1086: FILE: drivers/dump/dump_base.c:1010:
+					DUMP_PRINTN("Dump header update "
+							"failed; bizarre");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1087: FILE: drivers/dump/dump_base.c:1011:
+					return (0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: drivers/dump/dump_base.c:1026:
+				memcpy((void *)dump_page_buf,
+					(const void *)(dump_page_buf +

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1113: FILE: drivers/dump/dump_base.c:1037:
+		if (*dump_truncated) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: drivers/dump/dump_base.c:1041:
+^IDUMP_PRINT(" ");^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1128: FILE: drivers/dump/dump_base.c:1052:
+ *^I 0: dump truncated^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: drivers/dump/dump_base.c:1064:
+	DUMP_PRINTN("Compression value is 0x%x, Writing dump header ",
+			dump_compress);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1150: FILE: drivers/dump/dump_base.c:1074:
+		return (0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1167: FILE: drivers/dump/dump_base.c:1091:
+		if ((pass == 2) && dump_unreserved_mem == 0)
+			 continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 2'
#1167: FILE: drivers/dump/dump_base.c:1091:
+		if ((pass == 2) && dump_unreserved_mem == 0)

WARNING:TABSTOP: Statements should start on a tabstop
#1168: FILE: drivers/dump/dump_base.c:1092:
+			 continue;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1169: FILE: drivers/dump/dump_base.c:1093:
+		if ((pass == 3) && dump_unreferenced_mem == 0)
+			 continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 3'
#1169: FILE: drivers/dump/dump_base.c:1093:
+		if ((pass == 3) && dump_unreferenced_mem == 0)

WARNING:TABSTOP: Statements should start on a tabstop
#1170: FILE: drivers/dump/dump_base.c:1094:
+			 continue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: drivers/dump/dump_base.c:1095:
+^I^Iif (pass == 4) { $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1172: FILE: drivers/dump/dump_base.c:1096:
+			if (dump_nonconventional_mem == 0) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1174: FILE: drivers/dump/dump_base.c:1098:
+			if (dump_mbanks == 1) break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: drivers/dump/dump_base.c:1099:
+^I^I} $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1177: FILE: drivers/dump/dump_base.c:1101:
+		switch(pass) {
+			case 1:	DUMP_PRINTN("Pass 1: Saving Kernel Pages: ");
[...]
+			case 2:	DUMP_PRINTN("Pass 2: Saving Remaining "
[...]
+			case 3:	DUMP_PRINTN("Pass 3: Saving Remaining "
[...]
+			case 4:	DUMP_PRINTN("Pass 4: Saving Unconventional "

ERROR:SPACING: space required before the open parenthesis '('
#1177: FILE: drivers/dump/dump_base.c:1101:
+		switch(pass) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1178: FILE: drivers/dump/dump_base.c:1102:
+			case 1:	DUMP_PRINTN("Pass 1: Saving Kernel Pages: ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1180: FILE: drivers/dump/dump_base.c:1104:
+			case 2:	DUMP_PRINTN("Pass 2: Saving Remaining "

WARNING:SPLIT_STRING: quoted string split across lines
#1181: FILE: drivers/dump/dump_base.c:1105:
+			case 2:	DUMP_PRINTN("Pass 2: Saving Remaining "
+						"Referenced Pages: ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1183: FILE: drivers/dump/dump_base.c:1107:
+			case 3:	DUMP_PRINTN("Pass 3: Saving Remaining "

WARNING:SPLIT_STRING: quoted string split across lines
#1184: FILE: drivers/dump/dump_base.c:1108:
+			case 3:	DUMP_PRINTN("Pass 3: Saving Remaining "
+						"Unreferenced Pages: ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1186: FILE: drivers/dump/dump_base.c:1110:
+			case 4:	DUMP_PRINTN("Pass 4: Saving Unconventional "

WARNING:SPLIT_STRING: quoted string split across lines
#1187: FILE: drivers/dump/dump_base.c:1111:
+			case 4:	DUMP_PRINTN("Pass 4: Saving Unconventional "
+						"Memory: ");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY'
#1195: FILE: drivers/dump/dump_base.c:1119:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass != 4'
#1195: FILE: drivers/dump/dump_base.c:1119:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1195: FILE: drivers/dump/dump_base.c:1119:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1196: FILE: drivers/dump/dump_base.c:1120:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY'
#1197: FILE: drivers/dump/dump_base.c:1121:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 4'
#1197: FILE: drivers/dump/dump_base.c:1121:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1197: FILE: drivers/dump/dump_base.c:1121:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1198: FILE: drivers/dump/dump_base.c:1122:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: drivers/dump/dump_base.c:1123:
+^I$

ERROR:SPACING: space required after that ',' (ctx:ExV)
#1201: FILE: drivers/dump/dump_base.c:1125:
+					,i, mem_bank_start, mem_bank_end);
 					^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1203: FILE: drivers/dump/dump_base.c:1127:
+			if ((retval = dump_write_mbank(&dump_truncated, pass,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: drivers/dump/dump_base.c:1128:
+			if ((retval = dump_write_mbank(&dump_truncated, pass,
+				mem_bank_start, mem_bank_end, &buf_loc)) <= 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: drivers/dump/dump_base.c:1138:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1232: FILE: drivers/dump/dump_base.c:1156:
+                DUMP_PRINTN("Final write of last of page buffer and "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: drivers/dump/dump_base.c:1156:
+                DUMP_PRINTN("Final write of last of page buffer and "$

WARNING:SPLIT_STRING: quoted string split across lines
#1233: FILE: drivers/dump/dump_base.c:1157:
+                DUMP_PRINTN("Final write of last of page buffer and "
+				"DUMP_DH_END failed!");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1234: FILE: drivers/dump/dump_base.c:1158:
+                return (-1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: drivers/dump/dump_base.c:1158:
+                return (-1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: drivers/dump/dump_base.c:1159:
+        } else if (n_bytes == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: drivers/dump/dump_base.c:1159:
+        } else if (n_bytes == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1237: FILE: drivers/dump/dump_base.c:1161:
+                return (0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: drivers/dump/dump_base.c:1161:
+                return (0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1237: FILE: drivers/dump/dump_base.c:1161:
+                return (0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1238: FILE: drivers/dump/dump_base.c:1162:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: drivers/dump/dump_base.c:1162:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1242: FILE: drivers/dump/dump_base.c:1166:
+^I * part of the page buffer, if it did we have to write out one last $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1250: FILE: drivers/dump/dump_base.c:1174:
+^I^I * Copy the dump page buffer remnants in the second $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: drivers/dump/dump_base.c:1178:
+		memcpy((void *)dump_page_buf,
+			(const void *)(dump_page_buf + DUMP_BUFFER_SIZE),

WARNING:SPLIT_STRING: quoted string split across lines
#1263: FILE: drivers/dump/dump_base.c:1187:
+			DUMP_PRINTN("Hit EOF writing spill over page with "
+					"DUMP_DH_END; very bad luck!\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1264: FILE: drivers/dump/dump_base.c:1188:
+			return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1271: FILE: drivers/dump/dump_base.c:1195:
+	return (1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: drivers/dump/dump_base.c:1203:
+ * $

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#1296: FILE: drivers/dump/dump_base.c:1220:
+	if (dump_okay == FALSE)

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: drivers/dump/dump_base.c:1223:
+^I/* $

ERROR:SPACING: space required before the open parenthesis '('
#1307: FILE: drivers/dump/dump_base.c:1231:
+	if(!dump_configure_header(panic_str, regs)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1319: FILE: drivers/dump/dump_base.c:1243:
+		notifier_call_chain(&dump_notifier_list, DUMP_BEGIN_NONDISRUPT,
+				&dump_device);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: drivers/dump/dump_base.c:1246:
+		notifier_call_chain(&dump_notifier_list, DUMP_BEGIN,
+				&dump_device);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1326: FILE: drivers/dump/dump_base.c:1250:
+^I * if dump device notifier indicated the scheduler needs to be $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1334: FILE: drivers/dump/dump_base.c:1258:
+        /*$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1339: FILE: drivers/dump/dump_base.c:1263:
+				DUMP_FLAGS_NONDISRUPT) ) {

WARNING:SPLIT_STRING: quoted string split across lines
#1341: FILE: drivers/dump/dump_base.c:1265:
+		DUMP_PRINTN("Non-Disruptive Dumps are not Supported by "
+			"Dump Device 0x%x\n", kdev_val(dump_device));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: drivers/dump/dump_base.c:1272:
+			DUMP_PRINTN("Dumping to device 0x%x on CPU %d ...",
+				kdev_val(dump_device), smp_processor_id());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1349: FILE: drivers/dump/dump_base.c:1273:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: drivers/dump/dump_base.c:1278:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: drivers/dump/dump_base.c:1280:
+^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1360: FILE: drivers/dump/dump_base.c:1284:
+				DUMP_PRINTF("Final dump header update "
+						"failed!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1362: FILE: drivers/dump/dump_base.c:1286:
+^I^I^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1369: FILE: drivers/dump/dump_base.c:1293:
+				DUMP_PRINTF("Dump Truncated (likely out of "
+						"space).\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1372: FILE: drivers/dump/dump_base.c:1296:
+^I^I^I^I^I^I"saved.\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#1372: FILE: drivers/dump/dump_base.c:1296:
+				DUMP_PRINTF("Dump Complete; %d dump pages "
+						"saved.\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1385: FILE: drivers/dump/dump_base.c:1309:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: drivers/dump/dump_base.c:1311:
+^I * Non-disruptive dumps have to be set up special $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1399: FILE: drivers/dump/dump_base.c:1323:
+	return (state);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around item->list
#1414: FILE: drivers/dump/dump_base.c:1338:
+	list_add(&(item->list), &dump_compress_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1418: FILE: drivers/dump/dump_base.c:1342:
+	DUMP_PRINTF("Registering dump compression type 0x%x\n",
+			item->compress_type);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->list
#1442: FILE: drivers/dump/dump_base.c:1366:
+			list_del(&(dc->list));

WARNING:SPLIT_STRING: quoted string split across lines
#1444: FILE: drivers/dump/dump_base.c:1368:
+			DUMP_PRINTN("De-registering dump compression type "
+					"0x%x\n", compression_type);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1469: FILE: drivers/dump/dump_base.c:1393:
+			return (0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1473: FILE: drivers/dump/dump_base.c:1397:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1474: FILE: drivers/dump/dump_base.c:1398:
+^I * nothing on the list -- return ENODATA to indicate an error $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1476: FILE: drivers/dump/dump_base.c:1400:
+^I * NB: $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dump_okay == TRUE'
#1506: FILE: drivers/dump/dump_base.c:1430:
+	if ((dump_okay == TRUE) && (dump_page_buf_0 != (void *)NULL))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1506: FILE: drivers/dump/dump_base.c:1430:
+	if ((dump_okay == TRUE) && (dump_page_buf_0 != (void *)NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1509: FILE: drivers/dump/dump_base.c:1433:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: drivers/dump/dump_base.c:1434:
+^I * Allocate buffer to be used for copying pages (only once ...) $

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#1520: FILE: drivers/dump/dump_base.c:1444:
+	 * a system page (PAGE_SIZE) boundry.
 	                             ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1521: FILE: drivers/dump/dump_base.c:1445:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: drivers/dump/dump_base.c:1447:
+^Idump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1523: FILE: drivers/dump/dump_base.c:1447:
+	dump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + 

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1523: FILE: drivers/dump/dump_base.c:1447:
+	dump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + 

CHECK:SPACING: No space is necessary after a cast
#1533: FILE: drivers/dump/dump_base.c:1457:
+	dump_page_addr = (unsigned long) dump_page_buf;

CHECK:SPACING: No space is necessary after a cast
#1535: FILE: drivers/dump/dump_base.c:1459:
+		dump_page_buf = (void *) PAGE_ALIGN(dump_page_addr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1572: FILE: drivers/dump/dump_base.c:1496:
+	return (0);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1594: FILE: drivers/dump/dump_base.c:1518:
+	switch (cmd) {
[...]
+		case DIOSDUMPDEV:
[...]
+		case DIOGDUMPDEV:
[...]
+		case DIOSDUMPLEVEL:
[...]
+		case DIOGDUMPLEVEL:
[...]
+		case DIOSDUMPFLAGS:
[...]
+		case DIOGDUMPFLAGS:
[...]
+		case DIOSDUMPCOMPRESS:
[...]
+		case DIOGDUMPCOMPRESS:

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1602: FILE: drivers/dump/dump_base.c:1526:
+			return (dump_open_kdev(to_kdev_t((dev_t)arg)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1621: FILE: drivers/dump/dump_base.c:1545:
+^I^I^I * We will consider reserved pages a initial proxy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1631: FILE: drivers/dump/dump_base.c:1555:
+^I^I^I * Using refcount > 1 as a proxy for kernel & user $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1679: FILE: drivers/dump/dump_base.c:1603:
+			return (dump_compress_init((int)arg));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1685: FILE: drivers/dump/dump_base.c:1609:
+
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1697: FILE: drivers/dump/dump_base.c:1621:
+	return (0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1714: FILE: drivers/dump/dump_base.c:1638:
+	if (!(dirent = create_proc_entry(name,
[...]
+			DUMP_PRINT("unable to initialize "

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1714: FILE: drivers/dump/dump_base.c:1638:
+	if (!(dirent = create_proc_entry(name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: drivers/dump/dump_base.c:1639:
+	if (!(dirent = create_proc_entry(name,
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1715: FILE: drivers/dump/dump_base.c:1639:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {
 		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1715: FILE: drivers/dump/dump_base.c:1639:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {
 		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1715: FILE: drivers/dump/dump_base.c:1639:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPLIT_STRING: quoted string split across lines
#1717: FILE: drivers/dump/dump_base.c:1641:
+			DUMP_PRINT("unable to initialize "
+				"/proc/%s/%s!\n", DUMP_ROOT_NAME, name);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1718: FILE: drivers/dump/dump_base.c:1642:
+		return (1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1724: FILE: drivers/dump/dump_base.c:1648:
+	return (0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1730: FILE: drivers/dump/dump_base.c:1654:
+ * $

WARNING:RETURN_VOID: void function return statements are not generally useful
#1786: FILE: drivers/dump/dump_base.c:1710:
+	return;
+}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1798: FILE: drivers/dump/dump_base.c:1722:
+	return (0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1818: FILE: drivers/dump/dump_base.c:1742:
+^Iint i; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1837: FILE: drivers/dump/dump_base.c:1761:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1838: FILE: drivers/dump/dump_base.c:1762:
+^I * CONFIG_DISCONTIGMEM and CONFIG_IA64 systems are responsible $

CHECK:SPACING: No space is necessary after a cast
#1843: FILE: drivers/dump/dump_base.c:1767:
+	dump_mbank[0].end  = (((u64) max_mapnr) << PAGE_SHIFT) - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1847: FILE: drivers/dump/dump_base.c:1771:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1849: FILE: drivers/dump/dump_base.c:1773:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1849: FILE: drivers/dump/dump_base.c:1773:
+ ^I *$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1878: FILE: drivers/dump/dump_base.c:1802:
+^I^IDUMP_PRINTF("mbank[%d]: type:%d, phys_addr" PU64X " ... " $

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1879: FILE: drivers/dump/dump_base.c:1803:
+			PU64X "\n" ,i, dump_mbank[i].type, dump_mbank[i].start,
 			           ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1879: FILE: drivers/dump/dump_base.c:1803:
+			PU64X "\n" ,i, dump_mbank[i].type, dump_mbank[i].start,
 			           ^

CHECK:SPACING: No space is necessary after a cast
#1883: FILE: drivers/dump/dump_base.c:1807:
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#1883: FILE: drivers/dump/dump_base.c:1807:
+			DUMP_PRINTF("oops, start is not DUMP_PAGE_SIZE:%x "
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1887: FILE: drivers/dump/dump_base.c:1811:
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#1887: FILE: drivers/dump/dump_base.c:1811:
+			DUMP_PRINTF("oops, end is not DUMP_PAGE_SIZE:%x "
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1890: FILE: drivers/dump/dump_base.c:1814:
+	return (0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1914: FILE: drivers/dump/dump_base.c:1838:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1916: FILE: drivers/dump/dump_base.c:1840:
+EXPORT_SYMBOL(dump_register_compression);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1917: FILE: drivers/dump/dump_base.c:1841:
+EXPORT_SYMBOL(dump_unregister_compression);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1918: FILE: drivers/dump/dump_base.c:1842:
+EXPORT_SYMBOL(dump_register_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1919: FILE: drivers/dump/dump_base.c:1843:
+EXPORT_SYMBOL(dump_unregister_device);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1922: FILE: drivers/dump/dump_base.c:1846:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1922: FILE: drivers/dump/dump_base.c:1846:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1922: FILE: drivers/dump/dump_base.c:1846:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1922: FILE: drivers/dump/dump_base.c:1846:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1930: FILE: drivers/dump/dump_base.c:1854:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1930: FILE: drivers/dump/dump_base.c:1854:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1930: FILE: drivers/dump/dump_base.c:1854:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1930: FILE: drivers/dump/dump_base.c:1854:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1941: FILE: drivers/dump/dump_blockdev.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1961: FILE: drivers/dump/dump_blockdev.c:21:
+kdev_t dump_dev;   ^I           /* the actual kdev_t device number      */$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1967: FILE: drivers/dump/dump_blockdev.c:27:
+struct block_device *dump_bdev = NULL;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1969: FILE: drivers/dump/dump_blockdev.c:29:
+volatile int bio_complete = 1;/* Indicates the completion of each bio request */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1970: FILE: drivers/dump/dump_blockdev.c:30:
+int dump_io_abort = 0;		   /* set by end_io routine during io error */

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1978: FILE: drivers/dump/dump_blockdev.c:38:
+	if (dump_bio)
+		kfree(dump_bio);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1987: FILE: drivers/dump/dump_blockdev.c:47:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2041: FILE: drivers/dump/dump_blockdev.c:101:
+^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#2042: FILE: drivers/dump/dump_blockdev.c:102:
+	if ((dump_page_buffer== (void *)NULL)) {
 	                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2050: FILE: drivers/dump/dump_blockdev.c:110:
+	if ((dump_bio = kmalloc(sizeof(struct bio), GFP_KERNEL)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dump_bio)...) over kmalloc(sizeof(struct bio)...)
#2050: FILE: drivers/dump/dump_blockdev.c:110:
+	if ((dump_bio = kmalloc(sizeof(struct bio), GFP_KERNEL)) == NULL) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2058: FILE: drivers/dump/dump_blockdev.c:118:
+^Iif ((bvec = kmalloc(sizeof(struct bio_vec) * $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2058: FILE: drivers/dump/dump_blockdev.c:118:
+	if ((bvec = kmalloc(sizeof(struct bio_vec) * 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bvec)...) over kmalloc(sizeof(struct bio_vec)...)
#2058: FILE: drivers/dump/dump_blockdev.c:118:
+	if ((bvec = kmalloc(sizeof(struct bio_vec) * 

CHECK:SPACING: No space is necessary after a cast
#2067: FILE: drivers/dump/dump_blockdev.c:127:
+	a = (unsigned long) dump_page_buffer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2069: FILE: drivers/dump/dump_blockdev.c:129:
+	for (i = 0; i < (DUMP_BUFFER_SIZE >> PAGE_SHIFT); i++, bvec++,
+			a += PAGE_SIZE) {

WARNING:SPLIT_STRING: quoted string split across lines
#2086: FILE: drivers/dump/dump_blockdev.c:146:
+	DUMP_PRINTN("dump device 0x%x opened; Ready to take a "
+			"core dump\n", kdev_val(dump_dev));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#2092: FILE: drivers/dump/dump_blockdev.c:152:
+err2:	if (dump_bdev) {
+		blkdev_put(dump_bdev, BDEV_RAW);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#2096: FILE: drivers/dump/dump_blockdev.c:156:
+err1:	if (dump_bdev) {
+		bdput(dump_bdev);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2111: FILE: drivers/dump/dump_blockdev.c:171:
+	return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2122: FILE: drivers/dump/dump_blockdev.c:182:
+	return (0);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2142: FILE: drivers/dump/dump_blockdev.c:202:
+	switch (cmd) {
+		case DIOSDUMPDEV:
[...]
+		case DIOSDUMPMEM:
[...]
+		default:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2145: FILE: drivers/dump/dump_blockdev.c:205:
+^I^I^Ibreak;^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2152: FILE: drivers/dump/dump_blockdev.c:212:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2167: FILE: drivers/dump/dump_blockdev.c:227:
+^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2178: FILE: drivers/dump/dump_blockdev.c:238:
+	return (0);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2185: FILE: drivers/dump/dump_blockdev.c:245:
+ * ^I Writes DUMP_BUFFER_SIZE bytes in page buffer$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2187: FILE: drivers/dump/dump_blockdev.c:247:
+ * Returns: number of bytes written or -ERRNO. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2198: FILE: drivers/dump/dump_blockdev.c:258:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2204: FILE: drivers/dump/dump_blockdev.c:264:
+^I/* $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2209: FILE: drivers/dump/dump_blockdev.c:269:
+		if (offset != NULL) *offset = 1;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "offset"
#2209: FILE: drivers/dump/dump_blockdev.c:269:
+		if (offset != NULL) *offset = 1;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2219: FILE: drivers/dump/dump_blockdev.c:279:
+		return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2248: FILE: drivers/dump/dump_blockdev.c:308:
+	return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2258: FILE: drivers/dump/dump_blockdev.c:318:
+	return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2276: FILE: drivers/dump/dump_blockdev.c:336:
+	return (1);

WARNING:INDENTED_LABEL: labels should not be indented
#2280: FILE: drivers/dump/dump_blockdev.c:340:
+	dump_open:		dev_dump_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2281: FILE: drivers/dump/dump_blockdev.c:341:
+	dump_release:	        dev_dump_release,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#2281: FILE: drivers/dump/dump_blockdev.c:341:
+	dump_release:	        dev_dump_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2282: FILE: drivers/dump/dump_blockdev.c:342:
+	dump_ioctl:		dev_dump_ioctl,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2282: FILE: drivers/dump/dump_blockdev.c:342:
+	dump_ioctl:		dev_dump_ioctl,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2283: FILE: drivers/dump/dump_blockdev.c:343:
+        dump_write:             dev_dump_write,$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2283: FILE: drivers/dump/dump_blockdev.c:343:
+        dump_write:             dev_dump_write,
                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#2283: FILE: drivers/dump/dump_blockdev.c:343:
+        dump_write:             dev_dump_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2284: FILE: drivers/dump/dump_blockdev.c:344:
+	dump_seek:              dev_dump_seek,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#2284: FILE: drivers/dump/dump_blockdev.c:344:
+	dump_seek:              dev_dump_seek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2285: FILE: drivers/dump/dump_blockdev.c:345:
+	dump_start:             dev_dump_start,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2285: FILE: drivers/dump/dump_blockdev.c:345:
+	dump_start:             dev_dump_start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2286: FILE: drivers/dump/dump_blockdev.c:346:
+        dump_end:               dev_dump_end,$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2286: FILE: drivers/dump/dump_blockdev.c:346:
+        dump_end:               dev_dump_end,
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#2286: FILE: drivers/dump/dump_blockdev.c:346:
+        dump_end:               dev_dump_end,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2287: FILE: drivers/dump/dump_blockdev.c:347:
+	dump_ready:             dev_dump_ready,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2287: FILE: drivers/dump/dump_blockdev.c:347:
+	dump_ready:             dev_dump_ready,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2292: FILE: drivers/dump/dump_blockdev.c:352:
+{        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2300: FILE: drivers/dump/dump_blockdev.c:360:
+^I^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2302: FILE: drivers/dump/dump_blockdev.c:362:
+	return (0);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#2319: FILE: drivers/dump/dump_blockdev.c:379:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2319: FILE: drivers/dump/dump_blockdev.c:379:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2319: FILE: drivers/dump/dump_blockdev.c:379:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2319: FILE: drivers/dump/dump_blockdev.c:379:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,4,16))

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#2327: FILE: drivers/dump/dump_blockdev.c:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2327: FILE: drivers/dump/dump_blockdev.c:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2327: FILE: drivers/dump/dump_blockdev.c:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2327: FILE: drivers/dump/dump_blockdev.c:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2337: FILE: drivers/dump/dump_i386.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2346: FILE: drivers/dump/dump_i386.c:10:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#2365: FILE: drivers/dump/dump_i386.c:29:
+#include <asm/processor.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2372: FILE: drivers/dump/dump_i386.c:36:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2376: FILE: drivers/dump/dump_i386.c:40:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2376: FILE: drivers/dump/dump_i386.c:40:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2376: FILE: drivers/dump/dump_i386.c:40:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2378: FILE: drivers/dump/dump_i386.c:42:
+		printk("vmalloc for dha_stacks failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2378: FILE: drivers/dump/dump_i386.c:42:
+	if (!ptr) {
+		printk("vmalloc for dha_stacks failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2389: FILE: drivers/dump/dump_i386.c:53:
+static int free_dha_stack(void) $

CHECK:SPACING: No space is necessary after a cast
#2389: FILE: drivers/dump/dump_i386.c:53:
+static int free_dha_stack(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2392: FILE: drivers/dump/dump_i386.c:56:
+^I^Ivfree((void *)dump_header_asm.dha_stack[0]);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2404: FILE: drivers/dump/dump_i386.c:68:
+static inline void $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu == dump_header_asm.dha_dumping_cpu'
#2408: FILE: drivers/dump/dump_i386.c:72:
+		if ((cpu == dump_header_asm.dha_dumping_cpu) &&
+			(0xffff & regs->xss) == __KERNEL_DS) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2409: FILE: drivers/dump/dump_i386.c:73:
+^I^I^I(0xffff & regs->xss) == __KERNEL_DS) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2409: FILE: drivers/dump/dump_i386.c:73:
+		if ((cpu == dump_header_asm.dha_dumping_cpu) &&
+			(0xffff & regs->xss) == __KERNEL_DS) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2411: FILE: drivers/dump/dump_i386.c:75:
+^I^Idump_header_asm.dha_smp_regs[cpu].esp = $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->esp
#2412: FILE: drivers/dump/dump_i386.c:76:
+				(unsigned long)&(regs->esp);

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#2414: FILE: drivers/dump/dump_i386.c:78:
+			:"=a"(dump_header_asm.dha_smp_regs[cpu].xss));
 			^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2427: FILE: drivers/dump/dump_i386.c:91:
+		memcpy((void *)dump_header_asm.dha_stack[cpu],
+				tsk->thread_info, THREAD_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2431: FILE: drivers/dump/dump_i386.c:95:
+	return;
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2435: FILE: drivers/dump/dump_i386.c:99:
+extern unsigned long irq_affinity[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2436: FILE: drivers/dump/dump_i386.c:100:
+extern void dump_send_ipi(void);

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#2439: FILE: drivers/dump/dump_i386.c:103:
+static int wait_for_dump_ipi = 1; /* always wait for ipi to to be handled */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2440: FILE: drivers/dump/dump_i386.c:104:
+extern void (*dump_trace_ptr)(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#2440: FILE: drivers/dump/dump_i386.c:104:
+extern void (*dump_trace_ptr)(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2445: FILE: drivers/dump/dump_i386.c:109:
+dump_ipi_handler(struct pt_regs *regs) $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2449: FILE: drivers/dump/dump_i386.c:113:
+	if (!dump_expect_ipi[cpu]) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2452: FILE: drivers/dump/dump_i386.c:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2465: FILE: drivers/dump/dump_i386.c:129:
+void $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2471: FILE: drivers/dump/dump_i386.c:135:
+		atomic_set(&waiting_for_dump_ipi, num_online_cpus()-1);
 		                                                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2472: FILE: drivers/dump/dump_i386.c:136:
+		for (i = 0; i < NR_CPUS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2474: FILE: drivers/dump/dump_i386.c:138:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2477: FILE: drivers/dump/dump_i386.c:141:
+^I^I/* may be we dont need to wait for NMI to be processed. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2478: FILE: drivers/dump/dump_i386.c:142:
+		/* may be we dont need to wait for NMI to be processed. 
+		   just write out the header at the end of dumping, if

WARNING:TYPO_SPELLING: 'untill' may be misspelled - perhaps 'until'?
#2479: FILE: drivers/dump/dump_i386.c:143:
+		   this IPI is not processed untill then, there probably
 		                             ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2480: FILE: drivers/dump/dump_i386.c:144:
+^I^I   is a problem and we just fail to capture state of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2481: FILE: drivers/dump/dump_i386.c:145:
+		   other cpus. */

ERROR:SPACING: space required before the open parenthesis '('
#2483: FILE: drivers/dump/dump_i386.c:147:
+			while(atomic_read(&waiting_for_dump_ipi))

WARNING:RETURN_VOID: void function return statements are not generally useful
#2489: FILE: drivers/dump/dump_i386.c:153:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_desc[i].handler"
#2503: FILE: drivers/dump/dump_i386.c:167:
+		if (irq_desc[i].handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_desc[i].handler->set_affinity"
#2506: FILE: drivers/dump/dump_i386.c:170:
+		if (irq_desc[i].handler->set_affinity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_desc[i].handler"
#2521: FILE: drivers/dump/dump_i386.c:185:
+		if (irq_desc[i].handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_desc[i].handler->set_affinity"
#2523: FILE: drivers/dump/dump_i386.c:187:
+		if (irq_desc[i].handler->set_affinity != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2528: FILE: drivers/dump/dump_i386.c:192:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2531: FILE: drivers/dump/dump_i386.c:195:
+ * We do this so that softirqs initiated for dump i/o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2535: FILE: drivers/dump/dump_i386.c:199:
+ * This is not quite legal of course, as it has the side $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2536: FILE: drivers/dump/dump_i386.c:200:
+ * effect of making all interrupts & softirqs triggered $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2537: FILE: drivers/dump/dump_i386.c:201:
+ * while dump is in progress complete before currently $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2538: FILE: drivers/dump/dump_i386.c:202:
+ * pending softirqs and the currently executing interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2539: FILE: drivers/dump/dump_i386.c:203:
+ * code. $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2612: FILE: drivers/dump/dump_i386.c:276:
+	return (1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2625: FILE: drivers/dump/dump_i386.c:289:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2638: FILE: drivers/dump/dump_i386.c:302:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2651: FILE: drivers/dump/dump_i386.c:315:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2656: FILE: include/asm-i386/dump.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2686: FILE: include/asm-i386/dump.h:31:
+typedef struct _dump_header_asm_s {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2687: FILE: include/asm-i386/dump.h:32:
+typedef struct _dump_header_asm_s {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2688: FILE: include/asm-i386/dump.h:33:
+        /* the dump magic number -- unique to verify dump is valid */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2689: FILE: include/asm-i386/dump.h:34:
+        uint64_t             dha_magic_number;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2689: FILE: include/asm-i386/dump.h:34:
+        uint64_t             dha_magic_number;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2689: FILE: include/asm-i386/dump.h:34:
+        uint64_t             dha_magic_number;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2691: FILE: include/asm-i386/dump.h:36:
+        /* the version number of this dump */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2692: FILE: include/asm-i386/dump.h:37:
+        uint32_t             dha_version;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2692: FILE: include/asm-i386/dump.h:37:
+        uint32_t             dha_version;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2692: FILE: include/asm-i386/dump.h:37:
+        uint32_t             dha_version;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2694: FILE: include/asm-i386/dump.h:39:
+        /* the size of this header (in case we can't read it) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2695: FILE: include/asm-i386/dump.h:40:
+        uint32_t             dha_header_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2695: FILE: include/asm-i386/dump.h:40:
+        uint32_t             dha_header_size;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2695: FILE: include/asm-i386/dump.h:40:
+        uint32_t             dha_header_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2698: FILE: include/asm-i386/dump.h:43:
+	uint32_t             dha_esp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2701: FILE: include/asm-i386/dump.h:46:
+	uint32_t             dha_eip;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2707: FILE: include/asm-i386/dump.h:52:
+	uint32_t	     dha_smp_num_cpus;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2708: FILE: include/asm-i386/dump.h:53:
+^Iuint32_t^I     dha_dumping_cpu;^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2708: FILE: include/asm-i386/dump.h:53:
+	uint32_t	     dha_dumping_cpu;	

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2710: FILE: include/asm-i386/dump.h:55:
+	uint32_t	     dha_smp_current_task[DUMP_MAX_NUM_CPUS];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2711: FILE: include/asm-i386/dump.h:56:
+	uint32_t	     dha_stack[DUMP_MAX_NUM_CPUS];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2712: FILE: include/asm-i386/dump.h:57:
+	uint32_t	     dha_stack_ptr[DUMP_MAX_NUM_CPUS];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2713: FILE: include/asm-i386/dump.h:58:
+} __attribute__((packed)) dump_header_asm_t;

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2726: FILE: include/asm-i386/dump.h:71:
+	__asm__ __volatile__("movw %%ss, %%ax;" :"=a"(regs->xss));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2727: FILE: include/asm-i386/dump.h:72:
+	__asm__ __volatile__("movw %%cs, %%ax;" :"=a"(regs->xcs));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2728: FILE: include/asm-i386/dump.h:73:
+	__asm__ __volatile__("movw %%ds, %%ax;" :"=a"(regs->xds));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2729: FILE: include/asm-i386/dump.h:74:
+	__asm__ __volatile__("movw %%es, %%ax;" :"=a"(regs->xes));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2730: FILE: include/asm-i386/dump.h:75:
+	__asm__ __volatile__("pushfl; popl %0" :"=m"(regs->eflags));
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2732: FILE: include/asm-i386/dump.h:77:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2733: FILE: include/asm-i386/dump.h:78:
+	
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2735: FILE: include/asm-i386/dump.h:80:
+extern volatile int dump_in_progress;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2741: FILE: include/asm-i386/dump.h:86:
+extern void dump_send_ipi(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2746: FILE: include/asm-i386/dump.h:91:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2754: FILE: include/linux/dump.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2788: FILE: include/linux/dump.h:35:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2812: FILE: include/linux/dump.h:59:
+/* $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2819: FILE: include/linux/dump.h:66:
+#define DUMP_PAGE_SHIFT ^IPAGE_SHIFT$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2829: FILE: include/linux/dump.h:76:
+/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2839: FILE: include/linux/dump.h:86:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2846: FILE: include/linux/dump.h:93:
+/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2873: FILE: include/linux/dump.h:120:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2911: FILE: include/linux/dump.h:158:
+#define DIOSDUMPMEM^I^I9^I/* set the dump buffer memory^I    */^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#2916: FILE: include/linux/dump.h:163:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#2916: FILE: include/linux/dump.h:163:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2916: FILE: include/linux/dump.h:163:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2917: FILE: include/linux/dump.h:164:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2917: FILE: include/linux/dump.h:164:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2917: FILE: include/linux/dump.h:164:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#2917: FILE: include/linux/dump.h:164:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2918: FILE: include/linux/dump.h:165:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2918: FILE: include/linux/dump.h:165:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2918: FILE: include/linux/dump.h:165:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2919: FILE: include/linux/dump.h:166:
+	int (*dump_open) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2920: FILE: include/linux/dump.h:167:
+	int (*dump_release) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2921: FILE: include/linux/dump.h:168:
+	int (*dump_start) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2921: FILE: include/linux/dump.h:168:
+	int (*dump_start) (unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2922: FILE: include/linux/dump.h:169:
+	int (*dump_end) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2922: FILE: include/linux/dump.h:169:
+	int (*dump_end) (unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2923: FILE: include/linux/dump.h:170:
+	int (*dump_ready) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2923: FILE: include/linux/dump.h:170:
+	int (*dump_ready) (unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2926: FILE: include/linux/dump.h:173:
+extern int dump_register_device(struct dump_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dump_operations *' should also have an identifier name
#2926: FILE: include/linux/dump.h:173:
+extern int dump_register_device(struct dump_operations *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2927: FILE: include/linux/dump.h:174:
+extern void dump_unregister_device(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2937: FILE: include/linux/dump.h:184:
+ *            dump.  $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2942: FILE: include/linux/dump.h:189:
+typedef struct _dump_header_s {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2944: FILE: include/linux/dump.h:191:
+	uint64_t             dh_magic_number;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2947: FILE: include/linux/dump.h:194:
+	uint32_t             dh_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2950: FILE: include/linux/dump.h:197:
+	uint32_t             dh_header_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2953: FILE: include/linux/dump.h:200:
+	uint32_t             dh_dump_level;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2955: FILE: include/linux/dump.h:202:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2957: FILE: include/linux/dump.h:204:
+^I * Store here the configurable system page size (4K, 8K, 16K, etc.) $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2959: FILE: include/linux/dump.h:206:
+	uint32_t             dh_page_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2962: FILE: include/linux/dump.h:209:
+	uint64_t             dh_memory_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2965: FILE: include/linux/dump.h:212:
+	uint64_t             dh_memory_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2968: FILE: include/linux/dump.h:215:
+	uint64_t             dh_memory_end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2972: FILE: include/linux/dump.h:219:
+	uint64_t             dh_num_bytes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2976: FILE: include/linux/dump.h:223:
+	uint32_t             dh_num_dump_pages;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2982: FILE: include/linux/dump.h:229:
+	struct {uint64_t tv_sec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2983: FILE: include/linux/dump.h:230:
+		uint64_t tv_usec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2998: FILE: include/linux/dump.h:245:
+	uint64_t             dh_current_task;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3001: FILE: include/linux/dump.h:248:
+	uint32_t             dh_dump_compress;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3004: FILE: include/linux/dump.h:251:
+	uint32_t             dh_dump_flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3007: FILE: include/linux/dump.h:254:
+	uint32_t             dh_dump_device;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3009: FILE: include/linux/dump.h:256:
+} __attribute__((packed)) dump_header_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3022: FILE: include/linux/dump.h:269:
+typedef struct _dump_page_s {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3023: FILE: include/linux/dump.h:270:
+typedef struct _dump_page_s {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3026: FILE: include/linux/dump.h:273:
+	uint64_t		dp_byte_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3029: FILE: include/linux/dump.h:276:
+	uint64_t		dp_page_index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3032: FILE: include/linux/dump.h:279:
+	uint64_t             dp_address;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3035: FILE: include/linux/dump.h:282:
+	uint32_t             dp_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3038: FILE: include/linux/dump.h:285:
+	uint32_t             dp_flags;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3039: FILE: include/linux/dump.h:286:
+} __attribute__((packed)) dump_page_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3046: FILE: include/linux/dump.h:293:
+typedef struct lkcdinfo_s {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3053: FILE: include/linux/dump.h:300:
+	uint64_t        page_mask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3054: FILE: include/linux/dump.h:301:
+	uint64_t        page_offset;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3067: FILE: include/linux/dump.h:314:
+typedef struct dump_compress_s {

ERROR:CODE_INDENT: code indent should use tabs where possible
#3072: FILE: include/linux/dump.h:319:
+        int compress_type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3072: FILE: include/linux/dump.h:319:
+        int compress_type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3075: FILE: include/linux/dump.h:322:
+        int (*compress_func)(char *, int, char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3079: FILE: include/linux/dump.h:326:
+extern void dump_register_compression(dump_compress_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dump_compress_t *' should also have an identifier name
#3079: FILE: include/linux/dump.h:326:
+extern void dump_register_compression(dump_compress_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3080: FILE: include/linux/dump.h:327:
+extern void dump_unregister_compression(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3080: FILE: include/linux/dump.h:327:
+extern void dump_unregister_compression(int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3091: FILE: include/linux/dump.h:338:
+typedef struct dump_mbank {

ERROR:CODE_INDENT: code indent should use tabs where possible
#3092: FILE: include/linux/dump.h:339:
+        u64 ^I^Istart;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3092: FILE: include/linux/dump.h:339:
+        u64 ^I^Istart;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3092: FILE: include/linux/dump.h:339:
+        u64 ^I^Istart;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3093: FILE: include/linux/dump.h:340:
+        u64 ^I^Iend;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3093: FILE: include/linux/dump.h:340:
+        u64 ^I^Iend;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3093: FILE: include/linux/dump.h:340:
+        u64 ^I^Iend;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3102: FILE: include/linux/dump.h:349:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3108: FILE: include/linux/dump.h:355:
+extern int register_dump_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#3108: FILE: include/linux/dump.h:355:
+extern int register_dump_notifier(struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3109: FILE: include/linux/dump.h:356:
+extern int unregister_dump_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#3109: FILE: include/linux/dump.h:356:
+extern int unregister_dump_notifier(struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3117: FILE: include/linux/dump.h:364:
+extern int dump_init(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3118: FILE: include/linux/dump.h:365:
+int dump_execute(char *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3118: FILE: include/linux/dump.h:365:
+int dump_execute(char *, struct pt_regs *);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3119: FILE: include/linux/dump.h:366:
+extern volatile int dump_in_progress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3120: FILE: include/linux/dump.h:367:
+extern volatile int dumping_cpu;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3121: FILE: include/linux/dump.h:368:
+extern int (*dump_function_ptr)(char *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3121: FILE: include/linux/dump.h:368:
+extern int (*dump_function_ptr)(char *, struct pt_regs *);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3122: FILE: include/linux/dump.h:369:
+extern volatile int dump_started;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3125: FILE: include/linux/dump.h:372:
+ * dump notifier callbacks to tune the dump driver for $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3134: FILE: include/linux/dump.h:381:
+extern void dump_scheduler_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3135: FILE: include/linux/dump.h:382:
+extern void dump_interrupts_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3136: FILE: include/linux/dump.h:383:
+extern void dump_nondisruptive_disable(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3138: FILE: include/linux/dump.h:385:
+static inline void dump(char * str, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3138: FILE: include/linux/dump.h:385:
+static inline void dump(char * str, struct pt_regs * regs)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3140: FILE: include/linux/dump.h:387:
+	if (dump_function_ptr) {
+		dump_function_ptr((char *)str, regs);
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3149: FILE: include/linux/dump.h:396:
+extern void ^I^I__dump_open(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3149: FILE: include/linux/dump.h:396:
+extern void 		__dump_open(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3150: FILE: include/linux/dump.h:397:
+extern void ^I^I__dump_cleanup(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3150: FILE: include/linux/dump.h:397:
+extern void 		__dump_cleanup(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3151: FILE: include/linux/dump.h:398:
+extern void ^I^I__dump_init(uint64_t);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3151: FILE: include/linux/dump.h:398:
+extern void 		__dump_init(uint64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint64_t' should also have an identifier name
#3151: FILE: include/linux/dump.h:398:
+extern void 		__dump_init(uint64_t);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3152: FILE: include/linux/dump.h:399:
+extern int ^I^I__dump_configure_header(struct pt_regs *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3152: FILE: include/linux/dump.h:399:
+extern int 		__dump_configure_header(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3152: FILE: include/linux/dump.h:399:
+extern int 		__dump_configure_header(struct pt_regs *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3153: FILE: include/linux/dump.h:400:
+extern unsigned int  ^I__dump_silence_system(unsigned int);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3153: FILE: include/linux/dump.h:400:
+extern unsigned int  	__dump_silence_system(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3153: FILE: include/linux/dump.h:400:
+extern unsigned int  	__dump_silence_system(unsigned int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3154: FILE: include/linux/dump.h:401:
+extern unsigned int  ^I__dump_resume_system(unsigned int);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3154: FILE: include/linux/dump.h:401:
+extern unsigned int  	__dump_resume_system(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3154: FILE: include/linux/dump.h:401:
+extern unsigned int  	__dump_resume_system(unsigned int);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3164: FILE: include/linux/dump.h:411:
+	printk("\n");							\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3169: FILE: include/linux/dump.h:416:
+	printk("%s: ", DUMP_PREFIX);					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3170: FILE: include/linux/dump.h:417:
+	printk (args);							\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3170: FILE: include/linux/dump.h:417:
+	printk (args);							\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3175: FILE: include/linux/dump.h:422:
+	printk("%s: ", DUMP_PREFIX);					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3176: FILE: include/linux/dump.h:423:
+	printk (args);							\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3176: FILE: include/linux/dump.h:423:
+	printk (args);							\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3183: FILE: include/linux/dump.h:430:
+	printk(args);							\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3187: FILE: include/linux/dump.h:434:
+#define KERNEL_VERSION(a,b,c) (((a) << 16) | ((b) << 8) | (c))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3187: FILE: include/linux/dump.h:434:
+#define KERNEL_VERSION(a,b,c) (((a) << 16) | ((b) << 8) | (c))
                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 249 errors, 216 warnings, 156 checks, 3135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
