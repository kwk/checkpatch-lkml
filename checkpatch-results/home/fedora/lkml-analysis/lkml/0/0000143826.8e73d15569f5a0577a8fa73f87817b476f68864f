ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: arch/alpha/mm/remap.c:47:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: arch/arm/mm/ioremap.c:77:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: arch/cris/mm/ioremap.c:55:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

WARNING:INDENTED_LABEL: labels should not be indented
#308: FILE: arch/ia64/mm/init.c:292:
+  out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: arch/m32r/mm/ioremap.c:70:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: arch/m68k/sun3x/dvma.c:119:
+			if((pte = pte_alloc_kernel(pmd, vaddr)) == NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#357: FILE: arch/m68k/sun3x/dvma.c:119:
+			if((pte = pte_alloc_kernel(pmd, vaddr)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: arch/mips/mm/ioremap.c:58:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: arch/parisc/kernel/pci-dma.c:117:
+		pte_t * pte = pte_alloc_kernel(pmd, vaddr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: arch/parisc/mm/ioremap.c:55:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#554: FILE: arch/s390/mm/ioremap.c:61:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#581: FILE: arch/sh/mm/ioremap.c:60:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: arch/sh64/mm/ioremap.c:82:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: arch/x86_64/mm/ioremap.c:63:
+		pte_t * pte = pte_alloc_kernel(pmd, address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: include/linux/mm.h:714:
+extern pte_t *FASTCALL(pte_alloc_kernel(pmd_t *pmd, unsigned long address));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#673: FILE: mm/memory.c:310:
+pte_t fastcall * pte_alloc_kernel(pmd_t *pmd, unsigned long address)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 1 warnings, 1 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
