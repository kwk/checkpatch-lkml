WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#100: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: kernel/relay.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#113: FILE: kernel/relay.c:9:
+ * Moved to kernel/relay.c by Paul Mundt, 2006.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: kernel/relay.c:28:
+	struct rchan_buf *buf = vma->vm_private_data;
+	buf->chan->cb->buf_unmapped(buf, vma->vm_file);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#165: FILE: kernel/relay.c:61:
+static struct vm_operations_struct relay_file_mmap_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#182: FILE: kernel/relay.c:78:
+	struct file *filp = vma->vm_file;
 	             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#192: FILE: kernel/relay.c:88:
+	buf->chan->cb->buf_mapped(buf, filp);
 	                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#246: FILE: kernel/relay.c:142:
+	struct rchan_buf *buf = kcalloc(1, sizeof(struct rchan_buf), GFP_KERNEL);
+	if (!buf)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#249: FILE: kernel/relay.c:145:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(size_t *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: kernel/relay.c:171:
+	struct rchan *chan = container_of(kref, struct rchan, kref);
+	kfree(chan);

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#301: FILE: kernel/relay.c:197:
+ *	Removes the file from the fileystem, which also frees the
   	                          ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: kernel/relay.c:204:
+	struct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);
+	buf->chan->cb->remove_buf_file(buf->dentry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: kernel/relay.c:229:
+	size_t ready = buf->subbufs_produced - buf->subbufs_consumed;
+	return (ready >= buf->chan->n_subbufs) ? 1 : 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: kernel/relay.c:245:
+static int subbuf_start_default_callback (struct rchan_buf *buf,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#364: FILE: kernel/relay.c:260:
+					struct file *filp)
 					             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: kernel/relay.c:268:
+					  struct file *filp)
 					               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: kernel/relay.c:312:
+	struct rchan_buf *buf = private;
+	wake_up_interruptible(&buf->read_wait);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#471: FILE: kernel/relay.c:367:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#501: FILE: kernel/relay.c:397:
+	dentry = chan->cb->create_buf_file(filename, parent, S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#612: FILE: kernel/relay.c:508:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#650: FILE: kernel/relay.c:546:
+		if (waitqueue_active(&buf->read_wait)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#700: FILE: kernel/relay.c:596:
+	if (cpu >= NR_CPUS || !chan->buf[cpu])

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#724: FILE: kernel/relay.c:620:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#732: FILE: kernel/relay.c:628:
+		printk(KERN_WARNING "relay: one or more items not logged "

WARNING:SPLIT_STRING: quoted string split across lines
#733: FILE: kernel/relay.c:629:
+		printk(KERN_WARNING "relay: one or more items not logged "
+		       "[item size (%Zd) > sub-buffer size (%Zd)]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#733: FILE: kernel/relay.c:629:
+		       "[item size (%Zd) > sub-buffer size (%Zd)]\n",

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#754: FILE: kernel/relay.c:650:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#766: FILE: kernel/relay.c:662:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#770: FILE: kernel/relay.c:666:
+static int relay_file_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: kernel/relay.c:669:
+	struct rchan_buf *buf = inode->u.generic_ip;
+	kref_get(&buf->kref);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#781: FILE: kernel/relay.c:677:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#786: FILE: kernel/relay.c:682:
+static int relay_file_mmap(struct file *filp, struct vm_area_struct *vma)
                                         ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: kernel/relay.c:685:
+	struct rchan_buf *buf = filp->private_data;
+	return relay_mmap_buf(buf, vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#794: FILE: kernel/relay.c:690:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#797: FILE: kernel/relay.c:693:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#799: FILE: kernel/relay.c:695:
+static unsigned int relay_file_poll(struct file *filp, poll_table *wait)
                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#808: FILE: kernel/relay.c:704:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#819: FILE: kernel/relay.c:715:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#824: FILE: kernel/relay.c:720:
+static int relay_file_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#827: FILE: kernel/relay.c:723:
+	struct rchan_buf *buf = filp->private_data;
+	kref_put(&buf->kref, relay_remove_buf);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf->offset == subbuf_size'
#851: FILE: kernel/relay.c:747:
+		if ((read_subbuf == buf->subbufs_produced % n_subbufs) &&
+		    (buf->offset == subbuf_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'produced > n_subbufs'
#873: FILE: kernel/relay.c:769:
+		if ((produced > n_subbufs) &&
+		    (produced + n_subbufs - consumed <= n_subbufs))

CHECK:BRACES: braces {} should be used on all arms of this statement
#914: FILE: kernel/relay.c:810:
+	if (read_subbuf == write_subbuf) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#917: FILE: kernel/relay.c:813:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#974: FILE: kernel/relay.c:870:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#982: FILE: kernel/relay.c:878:
+static ssize_t relay_file_read(struct file *filp,
                                             ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#994: FILE: kernel/relay.c:890:
+	if(!relay_file_read_avail(buf, *ppos))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1003: FILE: kernel/relay.c:899:
+	ret = count = min(count, avail);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1015: FILE: kernel/relay.c:911:
+struct file_operations relay_file_operations = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102830.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 43 warnings, 5 checks, 952 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102830.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
