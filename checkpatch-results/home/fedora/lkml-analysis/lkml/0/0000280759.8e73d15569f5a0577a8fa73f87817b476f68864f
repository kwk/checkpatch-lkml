WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .21074-linux-2.6.5/include/linux/smp.h .21074-linux-2.6.5.updated/include/linux/smp.h

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#73: FILE: include/linux/smp.h:77:
+extern int __on_one_cpu(unsigned cpu, void (*func)(void *info), void *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/smp.h:77:
+extern int __on_one_cpu(unsigned cpu, void (*func)(void *info), void *info);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#74: FILE: include/linux/smp.h:78:
+static inline int on_one_cpu(unsigned cpu,

CHECK:BRACES: braces {} should be used on all arms of this statement
#79: FILE: include/linux/smp.h:83:
+	if (cpu == get_cpu()) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#82: FILE: include/linux/smp.h:86:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#89: FILE: include/linux/smp.h:93:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: include/linux/smp.h:126:
+#define on_one_cpu(cpu,func,info)		({ func(info); 0; })
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: include/linux/smp.h:126:
+#define on_one_cpu(cpu,func,info)		({ func(info); 0; })
                            ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#120: FILE: kernel/sched.c:636:
+struct which_cpu
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#134: FILE: kernel/sched.c:650:
+int __on_one_cpu(unsigned cpu, void (*func)(void *info), void *info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: kernel/sched.c:653:
+	struct which_cpu which = { cpu, info };
+	return smp_call_function(maybe_on_cpu, &which, 1, 1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#187: FILE: arch/i386/kernel/cpuid.c:60:
+static inline int do_cpuid(int cpu, u32 reg, u32 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/i386/kernel/msr.c:99:
+  cmd->err = wrmsr_eio(cmd->reg, cmd->data[0], cmd->data[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/i386/kernel/msr.c:106:
+  cmd->err = rdmsr_eio(cmd->reg, &cmd->data[0], &cmd->data[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: arch/i386/kernel/msr.c:113:
+  cmd.reg = reg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: arch/i386/kernel/msr.c:114:
+  cmd.data[0] = eax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/i386/kernel/msr.c:115:
+  cmd.data[1] = edx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: arch/i386/kernel/msr.c:116:
+  cmd.err = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: arch/i386/kernel/msr.c:118:
+  on_one_cpu(cpu, __msr_wrmsr, &cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: arch/i386/kernel/msr.c:119:
+  return cmd.err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: arch/i386/kernel/msr.c:126:
+  cmd.reg = reg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: arch/i386/kernel/msr.c:127:
+  cmd.err = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: arch/i386/kernel/msr.c:129:
+  on_one_cpu(cpu, __msr_rdmsr, &cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/i386/kernel/msr.c:131:
+  *eax = cmd.data[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/i386/kernel/msr.c:132:
+  *edx = cmd.data[1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/i386/kernel/msr.c:133:
+  return cmd.err;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 19 warnings, 4 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
