WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
 - Part 3. Addition of the DECnet routing grabulator (does not depend on other

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: include/linux/proc_fs.h:167:
+static inline struct proc_dir_entry *proc_net_fops_create(const char *name,
+	mode_t mode, struct file_operations *fops)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#76: FILE: include/linux/proc_fs.h:167:
+	mode_t mode, struct file_operations *fops)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: include/linux/proc_fs.h:170:
+	struct proc_dir_entry *res = create_proc_entry(name, mode, proc_net);
+	if (res)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/proc_fs.h:183:
+#define proc_net_fops_create(name,mode,fops) do {} while(0)
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/proc_fs.h:183:
+#define proc_net_fops_create(name,mode,fops) do {} while(0)
                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: include/linux/proc_fs.h:183:
+#define proc_net_fops_create(name,mode,fops) do {} while(0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#103: FILE: include/linux/seq_file.h:63:
+int kfree_release(struct inode *, struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#103: FILE: include/linux/seq_file.h:63:
+int kfree_release(struct inode *, struct file *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 1 checks, 49 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
