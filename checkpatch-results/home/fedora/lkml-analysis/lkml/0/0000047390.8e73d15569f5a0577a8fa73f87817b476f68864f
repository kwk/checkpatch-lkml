WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
 * changed minimum allocation size to l1 cache line size (some arches require that)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/skbuff.h:330:
+extern void *avl_alloc(unsigned int size, gfp_t gfp_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/skbuff.h:331:
+extern void avl_free(void *ptr, unsigned int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/skbuff.h:332:
+extern int avl_init(void);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#82: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: net/core/alloc/avl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: net/core/alloc/avl.c:2:
+ * ^Iavl.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: net/core/alloc/avl.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: net/core/alloc/avl.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#113: FILE: net/core/alloc/avl.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#114: FILE: net/core/alloc/avl.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#133: FILE: net/core/alloc/avl.c:38:
+/*
+ * Get node pointer from address.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#144: FILE: net/core/alloc/avl.c:49:
+/*
+ * Set node pointer for page for given address.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#148: FILE: net/core/alloc/avl.c:53:
+	int nr_pages = 1<<order, i;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: net/core/alloc/avl.c:55:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#151: FILE: net/core/alloc/avl.c:56:
+	for (i=0; i<nr_pages; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#151: FILE: net/core/alloc/avl.c:56:
+	for (i=0; i<nr_pages; ++i) {
 	           ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#158: FILE: net/core/alloc/avl.c:63:
+/*
+ * Get allocation CPU from address.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#169: FILE: net/core/alloc/avl.c:74:
+/*
+ * Set allocation cpu for page for given address.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#173: FILE: net/core/alloc/avl.c:78:
+	int nr_pages = 1<<order, i;
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: net/core/alloc/avl.c:80:
+^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#176: FILE: net/core/alloc/avl.c:81:
+	for (i=0; i<nr_pages; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#176: FILE: net/core/alloc/avl.c:81:
+	for (i=0; i<nr_pages; ++i) {
 	           ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#183: FILE: net/core/alloc/avl.c:88:
+/*
+ * Convert pointer to node's value.

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: net/core/alloc/avl.c:94:
+	struct avl_node *node = avl_get_node_ptr((unsigned long)ptr);
+	return node->value;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#193: FILE: net/core/alloc/avl.c:98:
+/*
+ * Convert pointer into offset from start address of the contiguous chunk

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#198: FILE: net/core/alloc/avl.c:103:
+	return ((unsigned long)ptr - avl_ptr_to_value(ptr))/AVL_MIN_SIZE;
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: net/core/alloc/avl.c:107:
+ * Count number of bits set down (until first unset is met in a mask) $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#202: FILE: net/core/alloc/avl.c:107:
+/*
+ * Count number of bits set down (until first unset is met in a mask) 

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#211: FILE: net/core/alloc/avl.c:116:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#212: FILE: net/core/alloc/avl.c:117:
+	pos = pos%BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#215: FILE: net/core/alloc/avl.c:120:
+		m = (~0UL>>pos)<<pos;
 		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#215: FILE: net/core/alloc/avl.c:120:
+		m = (~0UL>>pos)<<pos;
 		               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: net/core/alloc/avl.c:142:
+ * Count number of bits set up (until first unset is met in a mask) $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#237: FILE: net/core/alloc/avl.c:142:
+/*
+ * Count number of bits set up (until first unset is met in a mask) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: net/core/alloc/avl.c:145:
+unsigned int avl_count_set_up(unsigned long *mask, unsigned int mask_num, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: net/core/alloc/avl.c:146:
+unsigned int avl_count_set_up(unsigned long *mask, unsigned int mask_num, 
+		unsigned int pos)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#246: FILE: net/core/alloc/avl.c:151:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#247: FILE: net/core/alloc/avl.c:152:
+	pos = pos%BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: net/core/alloc/avl.c:158:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#253: FILE: net/core/alloc/avl.c:158:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#253: FILE: net/core/alloc/avl.c:158:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#253: FILE: net/core/alloc/avl.c:158:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                                               ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#275: FILE: net/core/alloc/avl.c:180:
+/*
+ * Fill @num bits from position @pos up with bit value @bit in a @mask.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: net/core/alloc/avl.c:183:
+static void avl_fill_bits(unsigned long *mask, unsigned int mask_size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: net/core/alloc/avl.c:184:
+static void avl_fill_bits(unsigned long *mask, unsigned int mask_size, 
+		unsigned int pos, unsigned int num, unsigned int bit)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#283: FILE: net/core/alloc/avl.c:188:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#284: FILE: net/core/alloc/avl.c:189:
+	start = pos%BITS_PER_LONG;
 	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#287: FILE: net/core/alloc/avl.c:192:
+		unsigned long m = ((~0UL)>>start)<<start;
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#287: FILE: net/core/alloc/avl.c:192:
+		unsigned long m = ((~0UL)>>start)<<start;
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#290: FILE: net/core/alloc/avl.c:195:
+			unsigned long upper_bits = BITS_PER_LONG - (start+num);
 			                                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#292: FILE: net/core/alloc/avl.c:197:
+			m = (m<<upper_bits)>>upper_bits;
 			      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#292: FILE: net/core/alloc/avl.c:197:
+			m = (m<<upper_bits)>>upper_bits;
 			                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: net/core/alloc/avl.c:205:
+		if (start + num <= BITS_PER_LONG)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#302: FILE: net/core/alloc/avl.c:207:
+		else {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#311: FILE: net/core/alloc/avl.c:216:
+/*
+ * Add free chunk into array.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#319: FILE: net/core/alloc/avl.c:224:
+/*
+ * Update node's bitmask of free/used chunks.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: net/core/alloc/avl.c:225:
+ * If processed chunk size is bigger than requested one, $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#326: FILE: net/core/alloc/avl.c:231:
+	unsigned int num = AVL_ALIGN(size)/AVL_MIN_SIZE;
 	                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: net/core/alloc/avl.c:233:
+	BUG_ON(cpos < num - 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#332: FILE: net/core/alloc/avl.c:237:
+	if (cpos != num-1) {
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: net/core/alloc/avl.c:239:
+		void *ptr = c->ptr + size;
+		c = ptr;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#344: FILE: net/core/alloc/avl.c:249:
+/*
+ * Dereference free chunk into container and add it into list of free

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: net/core/alloc/avl.c:255:
+	unsigned int pos = AVL_ALIGN(size)/AVL_MIN_SIZE-1;
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#350: FILE: net/core/alloc/avl.c:255:
+	unsigned int pos = AVL_ALIGN(size)/AVL_MIN_SIZE-1;
 	                                               ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#362: FILE: net/core/alloc/avl.c:267:
+/*
+ * Dequeue first free chunk from the list.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#375: FILE: net/core/alloc/avl.c:280:
+/*
+ * Add new node entry int network allocator.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#382: FILE: net/core/alloc/avl.c:287:
+	idx = off = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: net/core/alloc/avl.c:288:
+	for (i=0; i<entry->avl_node_num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#383: FILE: net/core/alloc/avl.c:288:
+	for (i=0; i<entry->avl_node_num; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#395: FILE: net/core/alloc/avl.c:300:
+		avl_container_add((void *)node->value, (1<<entry->avl_node_order)<<PAGE_SHIFT, cpu);
 		                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#395: FILE: net/core/alloc/avl.c:300:
+		avl_container_add((void *)node->value, (1<<entry->avl_node_order)<<PAGE_SHIFT, cpu);
 		                                                                 ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#400: FILE: net/core/alloc/avl.c:305:
+/*
+ * Simple cache growing function - allocate as much as possible,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct avl_node_entry)...)
#409: FILE: net/core/alloc/avl.c:314:
+	entry = kzalloc(sizeof(struct avl_node_entry), gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#413: FILE: net/core/alloc/avl.c:318:
+	entry->avl_node_array = kzalloc(AVL_NODE_PAGES * sizeof(void *), gfp_mask);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#417: FILE: net/core/alloc/avl.c:322:
+	for (i=0; i<AVL_NODE_PAGES; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#417: FILE: net/core/alloc/avl.c:322:
+	for (i=0; i<AVL_NODE_PAGES; ++i) {
 	           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#425: FILE: net/core/alloc/avl.c:330:
+	idx = off = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: net/core/alloc/avl.c:332:
+	for (i=0; i<AVL_NODE_NUM; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#427: FILE: net/core/alloc/avl.c:332:
+	for (i=0; i<AVL_NODE_NUM; ++i) {
 	           ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#443: FILE: net/core/alloc/avl.c:348:
+		avl_fill_bits(node->mask, ARRAY_SIZE(node->mask), 0, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE, 1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#443: FILE: net/core/alloc/avl.c:348:
+		avl_fill_bits(node->mask, ARRAY_SIZE(node->mask), 0, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE, 1);
 		                                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#443: FILE: net/core/alloc/avl.c:348:
+		avl_fill_bits(node->mask, ARRAY_SIZE(node->mask), 0, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE, 1);
 		                                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#443: FILE: net/core/alloc/avl.c:348:
+		avl_fill_bits(node->mask, ARRAY_SIZE(node->mask), 0, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE, 1);
 		                                                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: net/core/alloc/avl.c:351:
+^Iulog("%s: entry: %p, node: %u, node_pages: %lu, node_num: %lu, order: %d, allocated: %d, container: %u, max_size: %u, min_size: %u, bits: %u.\n", $

WARNING:LONG_LINE_STRING: line length of 154 exceeds 100 columns
#446: FILE: net/core/alloc/avl.c:351:
+	ulog("%s: entry: %p, node: %u, node_pages: %lu, node_num: %lu, order: %d, allocated: %d, container: %u, max_size: %u, min_size: %u, bits: %u.\n", 

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: net/core/alloc/avl.c:352:
+^I^I__func__, entry, sizeof(struct avl_node), AVL_NODE_PAGES, AVL_NODE_NUM, order, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: net/core/alloc/avl.c:352:
+	ulog("%s: entry: %p, node: %u, node_pages: %lu, node_num: %lu, order: %d, allocated: %d, container: %u, max_size: %u, min_size: %u, bits: %u.\n", 
+		__func__, entry, sizeof(struct avl_node), AVL_NODE_PAGES, AVL_NODE_NUM, order, 

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#448: FILE: net/core/alloc/avl.c:353:
+		i, AVL_CONTAINER_ARRAY_SIZE, AVL_MAX_SIZE, AVL_MIN_SIZE, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#448: FILE: net/core/alloc/avl.c:353:
+		i, AVL_CONTAINER_ARRAY_SIZE, AVL_MAX_SIZE, AVL_MIN_SIZE, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE);
 		                                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#448: FILE: net/core/alloc/avl.c:353:
+		i, AVL_CONTAINER_ARRAY_SIZE, AVL_MAX_SIZE, AVL_MIN_SIZE, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE);
 		                                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#448: FILE: net/core/alloc/avl.c:353:
+		i, AVL_CONTAINER_ARRAY_SIZE, AVL_MAX_SIZE, AVL_MIN_SIZE, ((1<<order)<<PAGE_SHIFT)/AVL_MIN_SIZE);
 		                                                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#459: FILE: net/core/alloc/avl.c:364:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#459: FILE: net/core/alloc/avl.c:364:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	           ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#467: FILE: net/core/alloc/avl.c:372:
+/*
+ * Allocate memory region with given size and mode.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#482: FILE: net/core/alloc/avl.c:387:
+		/*
+		 * Print info about unsupported order so user could send a "bug report"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: net/core/alloc/avl.c:391:
+^I^I^Iprintk(KERN_INFO "%s: Failed to allocate %u bytes with %02x mode, order %u, max order %u.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#486: FILE: net/core/alloc/avl.c:391:
+			printk(KERN_INFO "%s: Failed to allocate %u bytes with %02x mode, order %u, max order %u.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: net/core/alloc/avl.c:392:
+			printk(KERN_INFO "%s: Failed to allocate %u bytes with %02x mode, order %u, max order %u.\n", 
+					__func__, size, gfp_mask, get_order(size), AVL_ORDER);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#496: FILE: net/core/alloc/avl.c:401:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#496: FILE: net/core/alloc/avl.c:401:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#496: FILE: net/core/alloc/avl.c:401:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	                        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#496: FILE: net/core/alloc/avl.c:401:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: net/core/alloc/avl.c:416:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: net/core/alloc/avl.c:425:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#521: FILE: net/core/alloc/avl.c:426:
+			
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: net/core/alloc/avl.c:428:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#528: FILE: net/core/alloc/avl.c:433:
+/*
+ * Remove free chunk from the list.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: net/core/alloc/avl.c:438:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#541: FILE: net/core/alloc/avl.c:446:
+/*
+ * Combine neighbour free chunks into the one with bigger size

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: net/core/alloc/avl.c:449:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, $

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#544: FILE: net/core/alloc/avl.c:449:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: net/core/alloc/avl.c:450:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, 
+		void *cur_ptr, unsigned int cur_bits, int cpu)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#551: FILE: net/core/alloc/avl.c:456:
+	lc = rc = c = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: net/core/alloc/avl.c:462:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#559: FILE: net/core/alloc/avl.c:464:
+		rc = avl_search_container(rp, rbits-1, cpu);
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: net/core/alloc/avl.c:466:
+^I^I^Iprintk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#561: FILE: net/core/alloc/avl.c:466:
+			printk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: net/core/alloc/avl.c:467:
+			printk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", 
+					node, cur_ptr, rp, rbits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: net/core/alloc/avl.c:468:
+			BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#572: FILE: net/core/alloc/avl.c:477:
+		lc = avl_search_container(lp, lbits-1, cpu);
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: net/core/alloc/avl.c:479:
+^I^I^Iprintk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#574: FILE: net/core/alloc/avl.c:479:
+			printk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: net/core/alloc/avl.c:480:
+			printk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", 
+					node, cur_ptr, lp, lbits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#576: FILE: net/core/alloc/avl.c:481:
+			BUG();

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#586: FILE: net/core/alloc/avl.c:491:
+/*
+ * Free memory region of given size.

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#587: FILE: net/core/alloc/avl.c:492:
+ * Must be called on the same CPU where allocation happend
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#593: FILE: net/core/alloc/avl.c:498:
+	unsigned int pos, idx, sbits = AVL_ALIGN(size)/AVL_MIN_SIZE;
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#602: FILE: net/core/alloc/avl.c:507:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#604: FILE: net/core/alloc/avl.c:509:
+	p = node->mask[idx] >> (pos%BITS_PER_LONG);
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: net/core/alloc/avl.c:510:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: net/core/alloc/avl.c:512:
+^I^Iprintk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#607: FILE: net/core/alloc/avl.c:512:
+		printk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: net/core/alloc/avl.c:513:
+		printk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", 
+				node, ptr, val, pos, idx, node->mask[idx], p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: net/core/alloc/avl.c:514:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#614: FILE: net/core/alloc/avl.c:519:
+	lp = rp = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#615: FILE: net/core/alloc/avl.c:520:
+	rbits = lbits = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#617: FILE: net/core/alloc/avl.c:522:
+	idx = (pos+sbits)/BITS_PER_LONG;
 	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#617: FILE: net/core/alloc/avl.c:522:
+	idx = (pos+sbits)/BITS_PER_LONG;
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: net/core/alloc/avl.c:523:
+	p = (pos+sbits)%BITS_PER_LONG;
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#618: FILE: net/core/alloc/avl.c:523:
+	p = (pos+sbits)%BITS_PER_LONG;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#621: FILE: net/core/alloc/avl.c:526:
+		lbits = avl_count_set_up(node->mask, ARRAY_SIZE(node->mask), pos+sbits);
 		                                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: net/core/alloc/avl.c:527:
+		if (lbits) {
+			lp = (void *)(val + (pos + sbits)*AVL_MIN_SIZE);
+		}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#623: FILE: net/core/alloc/avl.c:528:
+			lp = (void *)(val + (pos + sbits)*AVL_MIN_SIZE);
 			                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#628: FILE: net/core/alloc/avl.c:533:
+		idx = (pos-1)/BITS_PER_LONG;
 		          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#628: FILE: net/core/alloc/avl.c:533:
+		idx = (pos-1)/BITS_PER_LONG;
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#629: FILE: net/core/alloc/avl.c:534:
+		p = (pos-1)%BITS_PER_LONG;
 		        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#629: FILE: net/core/alloc/avl.c:534:
+		p = (pos-1)%BITS_PER_LONG;
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#631: FILE: net/core/alloc/avl.c:536:
+			rbits = avl_count_set_down(node->mask, pos-1);
 			                                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#632: FILE: net/core/alloc/avl.c:537:
+			if (rbits) {
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
+			}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#633: FILE: net/core/alloc/avl.c:538:
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
 				                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#633: FILE: net/core/alloc/avl.c:538:
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
 				                               ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#642: FILE: net/core/alloc/avl.c:547:
+/*
+ * Free memory region of given size.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: net/core/alloc/avl.c:548:
+ * If freeing CPU is not the same as allocation one, chunk will $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#671: FILE: net/core/alloc/avl.c:576:
+/*
+ * Free memory region of given size.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: net/core/alloc/avl.c:586:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#695: FILE: net/core/alloc/avl.c:600:
+/*
+ * Initialize per-cpu allocator data.

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#705: FILE: net/core/alloc/avl.c:610:
+	alloc->avl_container_array = kzalloc(sizeof(struct list_head) * AVL_CONTAINER_ARRAY_SIZE, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alloc->avl_container_array)...) over kzalloc(sizeof(struct list_head)...)
#705: FILE: net/core/alloc/avl.c:610:
+	alloc->avl_container_array = kzalloc(sizeof(struct list_head) * AVL_CONTAINER_ARRAY_SIZE, GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#709: FILE: net/core/alloc/avl.c:614:
+	for (i=0; i<AVL_CONTAINER_ARRAY_SIZE; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#709: FILE: net/core/alloc/avl.c:614:
+	for (i=0; i<AVL_CONTAINER_ARRAY_SIZE; ++i)
 	           ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#727: FILE: net/core/alloc/avl.c:632:
+/*
+ * Initialize network allocator.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#739: FILE: net/core/alloc/avl.c:644:
+	printk(KERN_INFO "Network tree allocator has been initialized.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#753: FILE: net/core/alloc/avl.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#754: FILE: net/core/alloc/avl.h:2:
+ * ^Iavl.h$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: net/core/alloc/avl.h:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: net/core/alloc/avl.h:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#770: FILE: net/core/alloc/avl.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#771: FILE: net/core/alloc/avl.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#784: FILE: net/core/alloc/avl.h:32:
+#define ulog(f, a...) printk(f, ##a)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#790: FILE: net/core/alloc/avl.h:38:
+/*
+ * Network tree allocator variables.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#794: FILE: net/core/alloc/avl.h:42:
+#define AVL_ALIGN(x) ^I^IALIGN(x, AVL_ALIGN_SIZE)$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#797: FILE: net/core/alloc/avl.h:45:
+#define AVL_BITS		3	/* Must cover maximum number of pages used for allocation pools */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#799: FILE: net/core/alloc/avl.h:47:
+#define AVL_NODES_ON_PAGE	(PAGE_SIZE/sizeof(struct avl_node))
                          	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#800: FILE: net/core/alloc/avl.h:48:
+#define AVL_NODE_NUM		(1UL<<AVL_BITS)
                     		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#800: FILE: net/core/alloc/avl.h:48:
+#define AVL_NODE_NUM		(1UL<<AVL_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#801: FILE: net/core/alloc/avl.h:49:
+#define AVL_NODE_PAGES		((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#801: FILE: net/core/alloc/avl.h:49:
+#define AVL_NODE_PAGES		((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       		                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#801: FILE: net/core/alloc/avl.h:49:
+#define AVL_NODE_PAGES		((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       		                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#804: FILE: net/core/alloc/avl.h:52:
+#define AVL_MAX_SIZE		((1<<AVL_ORDER) << PAGE_SHIFT)
                     		   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#806: FILE: net/core/alloc/avl.h:54:
+#define AVL_CONTAINER_ARRAY_SIZE	(AVL_MAX_SIZE/AVL_MIN_SIZE)
                                 	             ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#809: FILE: net/core/alloc/avl.h:57:
+/*
+ * Meta-information container for each contiguous block used in allocation.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#814: FILE: net/core/alloc/avl.h:62:
+struct avl_node
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#816: FILE: net/core/alloc/avl.h:64:
+	DECLARE_BITMAP(mask, AVL_MAX_SIZE/AVL_MIN_SIZE);
 	                                 ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#820: FILE: net/core/alloc/avl.h:68:
+/*
+ * Free chunks are dereferenced into this structure and placed into LIFO list.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#824: FILE: net/core/alloc/avl.h:72:
+struct avl_container
+{

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#830: FILE: net/core/alloc/avl.h:78:
+/*
+ * When freeing happens on different than allocation CPU,

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#836: FILE: net/core/alloc/avl.h:84:
+struct avl_free_list
+{

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#843: FILE: net/core/alloc/avl.h:91:
+/*
+ * Each array of nodes is places into dynamically grown list.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#850: FILE: net/core/alloc/avl.h:98:
+struct avl_node_entry
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#851: FILE: net/core/alloc/avl.h:99:
+^Iunsigned int ^I^Iavl_node_order, avl_node_num;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#852: FILE: net/core/alloc/avl.h:100:
+^Istruct avl_node ^I**avl_node_array;$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#856: FILE: net/core/alloc/avl.h:104:
+/*
+ * Main per-cpu allocator structure.

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#858: FILE: net/core/alloc/avl.h:106:
+ * @avl_free_list_head - single-linked list of objects, which were started to be freed on different CPU

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#862: FILE: net/core/alloc/avl.h:110:
+struct avl_allocator_data
+{

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#865: FILE: net/core/alloc/avl.h:113:
+	spinlock_t avl_free_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#868: FILE: net/core/alloc/avl.h:116:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047390.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 62 warnings, 85 checks, 830 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047390.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
