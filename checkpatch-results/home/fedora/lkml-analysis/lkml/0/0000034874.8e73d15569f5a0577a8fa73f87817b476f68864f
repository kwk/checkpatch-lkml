WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
We're getting a lot of crashes in the sysfs/kobject/device/bus/class code and

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#65: FILE: include/linux/device.h:62:
+extern int __must_check bus_register(struct bus_type * bus);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/device.h:62:
+extern int __must_check bus_register(struct bus_type * bus);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: include/linux/device.h:75:
+int __must_check bus_for_each_drv(struct bus_type *bus,
+		struct device_driver *start, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/device.h:89:
+extern int __must_check bus_create_file(struct bus_type *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bus_type *' should also have an identifier name
#87: FILE: include/linux/device.h:89:
+extern int __must_check bus_create_file(struct bus_type *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bus_attribute *' should also have an identifier name
#87: FILE: include/linux/device.h:89:
+extern int __must_check bus_create_file(struct bus_type *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: include/linux/device.h:112:
+extern int __must_check driver_register(struct device_driver * drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/device.h:112:
+extern int __must_check driver_register(struct device_driver * drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/device.h:130:
+extern int __must_check driver_create_file(struct device_driver *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_driver *' should also have an identifier name
#113: FILE: include/linux/device.h:130:
+extern int __must_check driver_create_file(struct device_driver *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_attribute *' should also have an identifier name
#113: FILE: include/linux/device.h:130:
+extern int __must_check driver_create_file(struct device_driver *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/linux/device.h:131:
+extern int __must_check driver_create_file(struct device_driver *,
+					struct driver_attribute *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: include/linux/device.h:134:
+extern int __must_check driver_for_each_device(struct device_driver * drv,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/device.h:134:
+extern int __must_check driver_for_each_device(struct device_driver * drv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: include/linux/device.h:135:
+extern int __must_check driver_for_each_device(struct device_driver * drv,
+		struct device *start, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/device.h:173:
+extern int __must_check class_register(struct class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#135: FILE: include/linux/device.h:173:
+extern int __must_check class_register(struct class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/device.h:186:
+extern int __must_check class_create_file(struct class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#144: FILE: include/linux/device.h:186:
+extern int __must_check class_create_file(struct class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct class_attribute *' should also have an identifier name
#144: FILE: include/linux/device.h:186:
+extern int __must_check class_create_file(struct class *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: include/linux/device.h:187:
+extern int __must_check class_create_file(struct class *,
+					const struct class_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/device.h:200:
+extern int __must_check class_device_create_file(struct class_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/linux/device.h:201:
+extern int __must_check class_device_create_file(struct class_device *,
 				    const struct class_device_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/device.h:260:
+extern int __must_check class_device_register(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/device.h:263:
+extern int __must_check class_device_add(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#167: FILE: include/linux/device.h:263:
+extern int __must_check class_device_add(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/device.h:273:
+extern int __must_check class_device_create_bin_file(struct class_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#176: FILE: include/linux/device.h:273:
+extern int __must_check class_device_create_bin_file(struct class_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bin_attribute *' should also have an identifier name
#176: FILE: include/linux/device.h:273:
+extern int __must_check class_device_create_bin_file(struct class_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/device.h:274:
+extern int __must_check class_device_create_bin_file(struct class_device *,
 					struct bin_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/device.h:288:
+extern int __must_check class_interface_register(struct class_interface *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_interface *' should also have an identifier name
#185: FILE: include/linux/device.h:288:
+extern int __must_check class_interface_register(struct class_interface *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/device.h:313:
+extern int __must_check device_create_file(struct device *device,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: include/linux/device.h:314:
+extern int __must_check device_create_file(struct device *device,
+					struct device_attribute * entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: include/linux/device.h:314:
+					struct device_attribute * entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: include/linux/device.h:387:
+extern int __must_check device_register(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/device.h:387:
+extern int __must_check device_register(struct device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: include/linux/device.h:390:
+extern int __must_check device_add(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/device.h:390:
+extern int __must_check device_add(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/device.h:392:
+extern int __must_check device_for_each_child(struct device *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#211: FILE: include/linux/device.h:392:
+extern int __must_check device_for_each_child(struct device *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#211: FILE: include/linux/device.h:392:
+extern int __must_check device_for_each_child(struct device *, void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: include/linux/device.h:393:
+extern int __must_check device_for_each_child(struct device *, void *,
 		     int (*fn)(struct device *, void *));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: include/linux/device.h:402:
+extern int  __must_check device_attach(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/linux/device.h:402:
+extern int  __must_check device_attach(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/device.h:440:
+extern int __must_check firmware_register(struct subsystem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subsystem *' should also have an identifier name
#229: FILE: include/linux/device.h:440:
+extern int __must_check firmware_register(struct subsystem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/kobject.h:75:
+extern int __must_check kobject_add(struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#250: FILE: include/linux/kobject.h:75:
+extern int __must_check kobject_add(struct kobject *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/kobject.h:78:
+extern int __must_check kobject_rename(struct kobject *, const char *new_name);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#254: FILE: include/linux/kobject.h:78:
+extern int __must_check kobject_rename(struct kobject *, const char *new_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/kobject.h:80:
+extern int __must_check kobject_register(struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#257: FILE: include/linux/kobject.h:80:
+extern int __must_check kobject_register(struct kobject *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: include/linux/kobject.h:132:
+extern int __must_check kset_add(struct kset * k);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/kobject.h:132:
+extern int __must_check kset_add(struct kset * k);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: include/linux/kobject.h:133:
+extern int __must_check kset_register(struct kset * k);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/kobject.h:133:
+extern int __must_check kset_register(struct kset * k);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/kobject.h:243:
+extern int __must_check subsystem_register(struct subsystem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subsystem *' should also have an identifier name
#277: FILE: include/linux/kobject.h:243:
+extern int __must_check subsystem_register(struct subsystem *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#286: FILE: include/linux/kobject.h:262:
+extern int __must_check subsys_create_file(struct subsystem * ,
                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/kobject.h:262:
+extern int __must_check subsys_create_file(struct subsystem * ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subsystem *' should also have an identifier name
#286: FILE: include/linux/kobject.h:262:
+extern int __must_check subsys_create_file(struct subsystem * ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subsys_attribute *' should also have an identifier name
#286: FILE: include/linux/kobject.h:262:
+extern int __must_check subsys_create_file(struct subsystem * ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: include/linux/kobject.h:263:
+extern int __must_check subsys_create_file(struct subsystem * ,
+					struct subsys_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#308: FILE: include/linux/pci.h:407:
+int __must_check pcibios_enable_device(struct pci_dev *, int mask);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#342: FILE: include/linux/pci.h:532:
+int __must_check pci_request_regions(struct pci_dev *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#342: FILE: include/linux/pci.h:532:
+int __must_check pci_request_regions(struct pci_dev *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#345: FILE: include/linux/pci.h:534:
+int __must_check pci_request_region(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#345: FILE: include/linux/pci.h:534:
+int __must_check pci_request_region(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#345: FILE: include/linux/pci.h:534:
+int __must_check pci_request_region(struct pci_dev *, int, const char *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: include/linux/pci.h:539:
+int __must_check pci_bus_alloc_resource(struct pci_bus *bus,
+			struct resource *res, resource_size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: include/linux/pci.h:543:
+			void (*alignf)(void *, struct resource *,
+				resource_size_t, resource_size_t),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_driver *' should also have an identifier name
#367: FILE: include/linux/pci.h:548:
+int __must_check __pci_register_driver(struct pci_driver *, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#367: FILE: include/linux/pci.h:548:
+int __must_check __pci_register_driver(struct pci_driver *, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#396: FILE: include/linux/sysfs.h:96:
+extern int __must_check

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#400: FILE: include/linux/sysfs.h:99:
+extern int __must_check

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#400: FILE: include/linux/sysfs.h:99:
+extern int __must_check

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#404: FILE: include/linux/sysfs.h:102:
+extern int __must_check

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#404: FILE: include/linux/sysfs.h:102:
+extern int __must_check

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: include/linux/sysfs.h:118:
+int __must_check sysfs_create_bin_file(struct kobject *kobj,
+					struct bin_attribute *attr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#427: FILE: include/linux/sysfs.h:121:
+int __must_check sysfs_create_group(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute_group *' should also have an identifier name
#427: FILE: include/linux/sysfs.h:121:
+int __must_check sysfs_create_group(struct kobject *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: include/linux/sysfs.h:122:
+int __must_check sysfs_create_group(struct kobject *,
+					const struct attribute_group *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 36 warnings, 38 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
