WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
this patch is taken from 2.4.24 Intel original patch for Embeded controlers.

WARNING:TYPO_SPELLING: 'Embeded' may be misspelled - perhaps 'Embedded'?
#35: 
this patch is taken from 2.4.24 Intel original patch for Embeded controlers.
                                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#42: 
Luká¹ Hejtmánek
   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: intel-agp.c:357:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#67: FILE: intel-agp.c:374:
+	u32 gtt_table_size = (1<<gtt_table_order)*PAGE_SIZE - 1;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#67: FILE: intel-agp.c:374:
+	u32 gtt_table_size = (1<<gtt_table_order)*PAGE_SIZE - 1;
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#75: FILE: intel-agp.c:389:
+	page_table_bus_address = INREG32(intel_i830_private.registers,I810_PGETBL_CTL) & 0xfffff000;
 	                                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#78: FILE: intel-agp.c:392:
+	if(!page_table_bus_address) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#80: FILE: intel-agp.c:394:
+		printk (KERN_INFO PFX "Creating new GTT table.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: intel-agp.c:394:
+		printk (KERN_INFO PFX "Creating new GTT table.\n");

CHECK:SPACING: No space is necessary after a cast
#82: FILE: intel-agp.c:396:
+		gtt_table = (char*) __get_free_pages(GFP_KERNEL, gtt_table_order);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#82: FILE: intel-agp.c:396:
+		gtt_table = (char*) __get_free_pages(GFP_KERNEL, gtt_table_order);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#86: FILE: intel-agp.c:400:
+				gtt_table_entry += PAGE_SIZE ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#108: FILE: intel-agp.c:557:
+	if (type == AGP_DCACHE_MEMORY) return(NULL);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: intel-agp.c:558:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: intel-agp.c:560:
+                unsigned long virt;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: intel-agp.c:560:
+                unsigned long virt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: intel-agp.c:561:
+                unsigned long order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: intel-agp.c:561:
+                unsigned long order;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: intel-agp.c:562:
+                int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: intel-agp.c:562:
+                int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: intel-agp.c:564:
+                /* The i830 requires a physical address to program$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: intel-agp.c:565:
+                 * it's mouse pointer into hardware. However the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: intel-agp.c:566:
+                 * Xserver still writes to it through the agp$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: intel-agp.c:567:
+                 * aperture$

WARNING:TYPO_SPELLING: 'canot' may be misspelled - perhaps 'cannot'?
#119: FILE: intel-agp.c:568:
+                 * NOTE: We canot use alloc_page() here because we may need
                             ^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: intel-agp.c:568:
+                 * NOTE: We canot use alloc_page() here because we may need$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: intel-agp.c:569:
+                 * several contiguous pages. We must therefore use$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: intel-agp.c:570:
+                 * __get_free_pages() for this case.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: intel-agp.c:571:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: intel-agp.c:573:
+                if (pg_count == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: intel-agp.c:573:
+                if (pg_count == 1) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#124: FILE: intel-agp.c:573:
+                if (pg_count == 1) {
[...]
+                } else if (pg_count == 8) {
[...]
+                } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: intel-agp.c:574:
+                        order = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: intel-agp.c:574:
+                        order = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: intel-agp.c:575:
+                } else if (pg_count == 8) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: intel-agp.c:575:
+                } else if (pg_count == 8) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: intel-agp.c:576:
+                        order = 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: intel-agp.c:576:
+                        order = 3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: intel-agp.c:577:
+                } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: intel-agp.c:577:
+                } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: intel-agp.c:578:
+                        return(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: intel-agp.c:578:
+                        return(NULL);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#129: FILE: intel-agp.c:578:
+                        return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: intel-agp.c:579:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: intel-agp.c:579:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: intel-agp.c:581:
+                nw = agp_create_memory(pg_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: intel-agp.c:581:
+                nw = agp_create_memory(pg_count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: intel-agp.c:582:
+                if (nw == NULL) return(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: intel-agp.c:582:
+                if (nw == NULL) return(NULL);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: intel-agp.c:582:
+                if (nw == NULL) return(NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nw"
#133: FILE: intel-agp.c:582:
+                if (nw == NULL) return(NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: intel-agp.c:584:
+                virt = __get_free_pages(GFP_KERNEL, order);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: intel-agp.c:584:
+                virt = __get_free_pages(GFP_KERNEL, order);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: intel-agp.c:585:
+                nw->physical = virt_to_phys((void *)virt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: intel-agp.c:585:
+                nw->physical = virt_to_phys((void *)virt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: intel-agp.c:586:
+                if (virt == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: intel-agp.c:586:
+                if (virt == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: intel-agp.c:587:
+                        /* free this structure */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: intel-agp.c:588:
+                        agp_free_memory(nw);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: intel-agp.c:588:
+                        agp_free_memory(nw);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: intel-agp.c:589:
+                        return(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: intel-agp.c:589:
+                        return(NULL);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#140: FILE: intel-agp.c:589:
+                        return(NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: intel-agp.c:590:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: intel-agp.c:590:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: intel-agp.c:591:
+                for(i=0; i<pg_count; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: intel-agp.c:591:
+                for(i=0; i<pg_count; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#142: FILE: intel-agp.c:591:
+                for(i=0; i<pg_count; i++) {
                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#142: FILE: intel-agp.c:591:
+                for(i=0; i<pg_count; i++) {
                           ^

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: intel-agp.c:591:
+                for(i=0; i<pg_count; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: intel-agp.c:592:
+                        /* CHECKME:  Is this right??? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: intel-agp.c:593:
+                        /* nw->memory[0] = virt_to_phys((void *) nw->memory[0]); */$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#145: FILE: intel-agp.c:594:
+                        nw->memory[i] = agp_bridge->driver->mask_memory(nw->physical + 4096*i, type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: intel-agp.c:594:
+                        nw->memory[i] = agp_bridge->driver->mask_memory(nw->physical + 4096*i, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: intel-agp.c:594:
+                        nw->memory[i] = agp_bridge->driver->mask_memory(nw->physical + 4096*i, type);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#145: FILE: intel-agp.c:594:
+                        nw->memory[i] = agp_bridge->driver->mask_memory(nw->physical + 4096*i, type);
                                                                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: intel-agp.c:595:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: intel-agp.c:595:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: intel-agp.c:596:
+                nw->page_count = pg_count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: intel-agp.c:596:
+                nw->page_count = pg_count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: intel-agp.c:597:
+                nw->num_scratch_pages = pg_count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: intel-agp.c:597:
+                nw->num_scratch_pages = pg_count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: intel-agp.c:599:
+                nw->type = AGP_PHYS_MEMORY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: intel-agp.c:599:
+                nw->type = AGP_PHYS_MEMORY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: intel-agp.c:600:
+                return(nw);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: intel-agp.c:600:
+                return(nw);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#151: FILE: intel-agp.c:600:
+                return(nw);

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: intel-agp.c:601:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: intel-agp.c:601:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: intel-agp.c:602:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: intel-agp.c:607:
+static void intel_i830_free_by_type(struct agp_memory * curr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: intel-agp.c:609:
+       agp_free_key(curr->key);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: intel-agp.c:610:
+       if (curr->type == AGP_PHYS_MEMORY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#161: FILE: intel-agp.c:610:
+       if (curr->type == AGP_PHYS_MEMORY) {
+               if (curr->page_count == 1) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: intel-agp.c:611:
+               if (curr->page_count == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: intel-agp.c:611:
+               if (curr->page_count == 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#162: FILE: intel-agp.c:611:
+               if (curr->page_count == 1) {
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 0);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#162: FILE: intel-agp.c:611:
+               if (curr->page_count == 1) {
[...]
+               } else if (curr->page_count == 8) {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: intel-agp.c:612:
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: intel-agp.c:612:
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: intel-agp.c:613:
+               } else if (curr->page_count == 8) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: intel-agp.c:613:
+               } else if (curr->page_count == 8) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#164: FILE: intel-agp.c:613:
+               } else if (curr->page_count == 8) {
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 3);

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: intel-agp.c:614:
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: intel-agp.c:614:
+                       free_pages((unsigned long)phys_to_virt(curr->memory[0] & 0xfffff000), 3);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: intel-agp.c:615:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: intel-agp.c:615:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: intel-agp.c:616:
+               vfree(curr->memory);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: intel-agp.c:616:
+               vfree(curr->memory);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: intel-agp.c:617:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: intel-agp.c:618:
+       kfree(curr);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280081.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 47 warnings, 6 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280081.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
