CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#119: FILE: fs/jbd/journal.c:1631:
+#define JBD_SLAB_INDEX(size)  (size >> 11)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: fs/jbd/journal.c:1642:
+	for (i=0; i<JBD_MAX_SLABS; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#130: FILE: fs/jbd/journal.c:1642:
+	for (i=0; i<JBD_MAX_SLABS; i++) {
 	           ^

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#132: FILE: fs/jbd/journal.c:1644:
+		if (jbd_slab[i])
+			kmem_cache_destroy(jbd_slab[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#141: FILE: fs/jbd/journal.c:1653:
+	BUG_ON(i >= JBD_MAX_SLABS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: fs/jbd/journal.c:1666:
+	jbd_slab[i] = kmem_cache_create(jbd_slab_names[i],
+				slab_size, slab_size, 0, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#156: FILE: fs/jbd/journal.c:1668:
+		printk(KERN_EMERG "JBD: no memory for jbd_slab cache\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: fs/jbd/journal.c:1674:
+void * jbd_slab_alloc(size_t size, gfp_t flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: fs/jbd/journal.c:1679:
+	BUG_ON(jbd_slab[idx] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!jbd_slab[idx]"
#167: FILE: fs/jbd/journal.c:1679:
+	BUG_ON(jbd_slab[idx] == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: fs/jbd/journal.c:1688:
+	BUG_ON(jbd_slab[idx] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!jbd_slab[idx]"
#176: FILE: fs/jbd/journal.c:1688:
+	BUG_ON(jbd_slab[idx] == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: fs/jbd/transaction.c:671:
+					jbd_slab_alloc(jh2bh(jh)->b_size,
+							 GFP_NOFS);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: include/linux/jbd.h:75:
+extern void * jbd_slab_alloc(size_t size, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/jbd.h:75:
+extern void * jbd_slab_alloc(size_t size, gfp_t flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/jbd.h:76:
+extern void jbd_slab_free(void *ptr, size_t size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 7 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
