WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#32: 
While I have this sneaking worry that md's persistant superblock may be
                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#58: FILE: drivers/md/md.c:55:
+#define PROC_BLOCK_SIZE (3*1024)     /* 4K page size, but our output routines
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: drivers/md/md.c:56:
+                                      * use some slack for overruns$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: drivers/md/md.c:57:
+                                      */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#62: FILE: drivers/md/md.c:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#82: FILE: drivers/md/md.c:1093:
+		printk("find_rdev_all failed for %s!\n", partition_name(newdev));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#93: FILE: drivers/md/md.c:1111:
+	if ((err = alloc_disk_sb(rdev))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#94: FILE: drivers/md/md.c:1112:
+		printk("alloc_disk_sb failed for %s!\n", partition_name(newdev));

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: drivers/md/md.c:1738:
+ ^Iif ((active=atomic_read(&mddev->active))>1) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: drivers/md/md.c:1738:
+ ^Iif ((active=atomic_read(&mddev->active))>1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: drivers/md/md.c:1738:
+ ^Iif ((active=atomic_read(&mddev->active))>1) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: drivers/md/md.c:1738:
+ 	if ((active=atomic_read(&mddev->active))>1) {
  	           ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#115: FILE: drivers/md/md.c:1738:
+ 	if ((active=atomic_read(&mddev->active))>1) {
  	                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#115: FILE: drivers/md/md.c:1738:
+ 	if ((active=atomic_read(&mddev->active))>1) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: drivers/md/md.c:1739:
+ ^I^Iprintk(STILL_IN_USE, mdidx(mddev), active);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: drivers/md/md.c:1739:
+ ^I^Iprintk(STILL_IN_USE, mdidx(mddev), active);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/md/md.c:1739:
+ ^I^Iprintk(STILL_IN_USE, mdidx(mddev), active);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: drivers/md/md.c:1739:
+ 		printk(STILL_IN_USE, mdidx(mddev), active);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/md/md.c:3054:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: drivers/md/md.c:3055:
+^Iif (count > PROC_BLOCK_SIZE) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 9)
#138: FILE: drivers/md/md.c:3055:
+	if (count > PROC_BLOCK_SIZE) 
+	 return -EOVERFLOW;

WARNING:TABSTOP: Statements should start on a tabstop
#139: FILE: drivers/md/md.c:3056:
+	 return -EOVERFLOW;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: drivers/md/md.c:3057:
+^I$

CHECK:SPACING: No space is necessary after a cast
#141: FILE: drivers/md/md.c:3058:
+	if (!(page=(char *) __get_free_page(GFP_KERNEL)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 9)
#141: FILE: drivers/md/md.c:3058:
+	if (!(page=(char *) __get_free_page(GFP_KERNEL)))
+	 return -ENOMEM;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#141: FILE: drivers/md/md.c:3058:
+	if (!(page=(char *) __get_free_page(GFP_KERNEL)))
 	          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#141: FILE: drivers/md/md.c:3058:
+	if (!(page=(char *) __get_free_page(GFP_KERNEL)))

WARNING:TABSTOP: Statements should start on a tabstop
#142: FILE: drivers/md/md.c:3059:
+	 return -ENOMEM;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/md/md.c:3060:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#146: FILE: drivers/md/md.c:3063:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#147: FILE: drivers/md/md.c:3064:
+	if (count > 0 && page[count-1]=='\n') {
 	                           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#147: FILE: drivers/md/md.c:3064:
+	if (count > 0 && page[count-1]=='\n') {
 	                              ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#147: FILE: drivers/md/md.c:3064:
+	if (count > 0 && page[count-1]=='\n') {
[...]
+	else return -EINVAL;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#148: FILE: drivers/md/md.c:3065:
+		page[count-1]='\0';
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#148: FILE: drivers/md/md.c:3065:
+		page[count-1]='\0';
 		             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#150: FILE: drivers/md/md.c:3067:
+	else return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#150: FILE: drivers/md/md.c:3067:
+	}
+	else return -EINVAL;

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 9)
#152: FILE: drivers/md/md.c:3069:
+	if (count<11)
+	 return -EINVAL;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#152: FILE: drivers/md/md.c:3069:
+	if (count<11)
 	         ^

WARNING:TABSTOP: Statements should start on a tabstop
#153: FILE: drivers/md/md.c:3070:
+	 return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/md/md.c:3072:
+	if (!strncmp("autorun ",page,8)) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/md/md.c:3072:
+	if (!strncmp("autorun ",page,8)) {
 	                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: drivers/md/md.c:3073:
+		char * devstr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: drivers/md/md.c:3074:
+		char * major, * minor;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#157: FILE: drivers/md/md.c:3074:
+		char * major, * minor;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#160: FILE: drivers/md/md.c:3077:
+		ptr=page+8;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: drivers/md/md.c:3077:
+		ptr=page+8;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#162: FILE: drivers/md/md.c:3079:
+		while ((devstr=strsep(&ptr," \n"))) {
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: drivers/md/md.c:3079:
+		while ((devstr=strsep(&ptr," \n"))) {
 		                          ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#162: FILE: drivers/md/md.c:3079:
+		while ((devstr=strsep(&ptr," \n"))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: drivers/md/md.c:3080:
+			printk("md: adding %s...\n",devstr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: drivers/md/md.c:3080:
+			printk("md: adding %s...\n",devstr);
 			                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#164: FILE: drivers/md/md.c:3081:
+			major=strsep(&devstr,":");
 			     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: drivers/md/md.c:3081:
+			major=strsep(&devstr,":");
 			                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#165: FILE: drivers/md/md.c:3082:
+			minor=strsep(&devstr,":");
 			     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: drivers/md/md.c:3082:
+			minor=strsep(&devstr,":");
 			                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#167: FILE: drivers/md/md.c:3084:
+			dev=MKDEV(simple_strtoul(major,NULL,0),
 			   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: drivers/md/md.c:3084:
+			dev=MKDEV(simple_strtoul(major,NULL,0),
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: drivers/md/md.c:3084:
+			dev=MKDEV(simple_strtoul(major,NULL,0),
 			                                   ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#167: FILE: drivers/md/md.c:3084:
+			dev=MKDEV(simple_strtoul(major,NULL,0),

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: drivers/md/md.c:3085:
+				  simple_strtoul(minor,NULL,0));
 				                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: drivers/md/md.c:3085:
+				  simple_strtoul(minor,NULL,0));
 				                           ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#168: FILE: drivers/md/md.c:3085:
+				  simple_strtoul(minor,NULL,0));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: drivers/md/md.c:3092:
+
+

CHECK:SPACING: No space is necessary after a cast
#176: FILE: drivers/md/md.c:3093:
+	free_page((ulong) page);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#195: FILE: drivers/md/md.c:3563:
+	p=create_proc_read_entry("mdstat", 0, NULL, md_status_read_proc, NULL);
 	 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#196: FILE: drivers/md/md.c:3564:
+	p->write_proc=md_status_write_proc;
 	             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 19 warnings, 9 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
