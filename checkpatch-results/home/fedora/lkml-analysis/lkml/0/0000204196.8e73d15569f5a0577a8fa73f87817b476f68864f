CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#46: 
; Copyright (C) 2003-2005 Herbert Pötzl <herbert@13thfloor.at>
                                   ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
diff -NurpP --minimal linux-2.6.11-rc5/fs/namei.c linux-2.6.11-rc5-bme0.06.1-nd0.01/fs/namei.c

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#72: FILE: fs/namei.c:1123:
+	int isdir, struct nameidata *nd)
 	                             ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/namei.c:1123:
+static inline int may_delete(struct inode *dir, struct dentry *victim,
+	int isdir, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#81: FILE: fs/namei.c:1132:
+	error = permission(dir,MAY_WRITE | MAY_EXEC, nd);
 	                                             ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: fs/namei.c:1132:
+	error = permission(dir,MAY_WRITE | MAY_EXEC, nd);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:1542:
+	int mode, dev_t dev, struct nameidata *nd)
 	                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: fs/namei.c:1542:
+int vfs_mknod(struct inode *dir, struct dentry *dentry,
+	int mode, dev_t dev, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#94: FILE: fs/namei.c:1544:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/namei.c:1594:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#113: FILE: fs/namei.c:1595:
+					new_decode_dev(dev), &nd);
 					                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: fs/namei.c:1595:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
+					new_decode_dev(dev), &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#117: FILE: fs/namei.c:1598:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#118: FILE: fs/namei.c:1599:
+					0, &nd);
 					    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/namei.c:1599:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
+					0, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/namei.c:1618:
+	int mode, struct nameidata *nd)
 	                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/namei.c:1618:
+int vfs_mkdir(struct inode *dir, struct dentry *dentry,
+	int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/namei.c:1620:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#140: FILE: fs/namei.c:1661:
+			error = vfs_mkdir(nd.dentry->d_inode, dentry,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: fs/namei.c:1662:
+				mode, &nd);
 				       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: fs/namei.c:1662:
+			error = vfs_mkdir(nd.dentry->d_inode, dentry,
+				mode, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: fs/namei.c:1707:
+	struct nameidata *nd)
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: fs/namei.c:1707:
+int vfs_rmdir(struct inode *dir, struct dentry *dentry,
+	struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/namei.c:1709:
+	int error = may_delete(dir, dentry, 1, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/namei.c:1771:
+		error = vfs_rmdir(nd.dentry->d_inode, dentry, &nd);
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/namei.c:1771:
+		error = vfs_rmdir(nd.dentry->d_inode, dentry, &nd);
 		                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/namei.c:1783:
+	struct nameidata *nd)
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: fs/namei.c:1783:
+int vfs_unlink(struct inode *dir, struct dentry *dentry,
+	struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#176: FILE: fs/namei.c:1785:
+	int error = may_delete(dir, dentry, 0, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: fs/namei.c:1847:
+		error = vfs_unlink(nd.dentry->d_inode, dentry, &nd);
 		                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: fs/namei.c:1847:
+		error = vfs_unlink(nd.dentry->d_inode, dentry, &nd);
 		                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#195: FILE: fs/namei.c:1867:
+	const char *oldname, int mode, struct nameidata *nd)
 	                                                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/namei.c:1867:
+int vfs_symlink(struct inode *dir, struct dentry *dentry,
+	const char *oldname, int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/namei.c:1869:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/namei.c:1911:
+			error = vfs_symlink(nd.dentry->d_inode, dentry,
 			                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/namei.c:1912:
+				from, S_IALLUGO, &nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: fs/namei.c:1912:
+			error = vfs_symlink(nd.dentry->d_inode, dentry,
+				from, S_IALLUGO, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/namei.c:1925:
+	struct dentry *new_dentry, struct nameidata *nd)
 	                                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: fs/namei.c:1925:
+int vfs_link(struct dentry *old_dentry, struct inode *dir,
+	struct dentry *new_dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#227: FILE: fs/namei.c:1933:
+	error = may_create(dir, new_dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/namei.c:1997:
+		error = vfs_link(old_nd.dentry, nd.dentry->d_inode,
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:1998:
+			new_dentry, &nd);
 			             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: fs/namei.c:1998:
+		error = vfs_link(old_nd.dentry, nd.dentry->d_inode,
+			new_dentry, &nd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: fs/nfsd/vfs.c:1401:
+			err = vfs_symlink(dentry->d_inode, dnew,
+				path_alloced, mode, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/nfsd/vfs.c:1406:
+		err = vfs_symlink(dentry->d_inode, dnew,
+			path, mode, NULL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#304: FILE: fs/nfsd/vfs.c:1623:
 		} else
[...]
+		err = vfs_unlink(dirp, rdentry, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: fs/reiserfs/xattr.c:837:
+	err = vfs_rmdir (root->d_inode, dir, NULL);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/fs.h:838:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#339: FILE: include/linux/fs.h:838:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#339: FILE: include/linux/fs.h:838:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#339: FILE: include/linux/fs.h:838:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#339: FILE: include/linux/fs.h:838:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#340: FILE: include/linux/fs.h:839:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#341: FILE: include/linux/fs.h:840:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/fs.h:841:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#342: FILE: include/linux/fs.h:841:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#342: FILE: include/linux/fs.h:841:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#342: FILE: include/linux/fs.h:841:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#342: FILE: include/linux/fs.h:841:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/fs.h:842:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#343: FILE: include/linux/fs.h:842:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#343: FILE: include/linux/fs.h:842:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#343: FILE: include/linux/fs.h:842:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/linux/fs.h:843:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#344: FILE: include/linux/fs.h:843:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#344: FILE: include/linux/fs.h:843:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#344: FILE: include/linux/fs.h:843:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#368: FILE: net/unix/af_unix.c:797:
+		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0, NULL);
 		                ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204196.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 56 warnings, 21 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204196.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
