WARNING:TYPO_SPELLING: 'priveleged' may be misspelled - perhaps 'privileged'?
#41: 
> > removed to prevent tampering with priveleged executables. Whilst I'm
                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
Good point. Both these problems are fixed in the following patch. Thank's for

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/read_write.c:309:
+				struct dentry *d = file->f_dentry;
+				if(d->d_inode->i_op && d->d_inode->i_op->

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: fs/read_write.c:309:
+				if(d->d_inode->i_op && d->d_inode->i_op->

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'd->d_inode->i_op->removexattr'
#87: FILE: fs/read_write.c:310:
+				if(d->d_inode->i_op && d->d_inode->i_op->
+								removexattr) {

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:SPACING: space required after that ',' (ctx:OxV)
#146: FILE: security/commoncap.c:115:
+	ssize_t (*bprm_getxattr)(struct dentry *,const char *,void *,size_t);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#146: FILE: security/commoncap.c:115:
+	ssize_t (*bprm_getxattr)(struct dentry *,const char *,void *,size_t);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#146: FILE: security/commoncap.c:115:
+	ssize_t (*bprm_getxattr)(struct dentry *,const char *,void *,size_t);
 	                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: security/commoncap.c:120:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: security/commoncap.c:143:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#167: FILE: security/commoncap.c:148:
+	if(!(bprm_dentry->d_inode->i_op &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: security/commoncap.c:149:
+	if(!(bprm_dentry->d_inode->i_op &&
+				bprm_dentry->d_inode->i_op->getxattr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: security/commoncap.c:152:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: security/commoncap.c:154:
+	ret = bprm_getxattr(bprm_dentry,XATTR_CAP_SET,&caps,sizeof(caps));
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#173: FILE: security/commoncap.c:154:
+	ret = bprm_getxattr(bprm_dentry,XATTR_CAP_SET,&caps,sizeof(caps));
 	                                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#173: FILE: security/commoncap.c:154:
+	ret = bprm_getxattr(bprm_dentry,XATTR_CAP_SET,&caps,sizeof(caps));
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: security/commoncap.c:154:
+	ret = bprm_getxattr(bprm_dentry,XATTR_CAP_SET,&caps,sizeof(caps));
 	                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#174: FILE: security/commoncap.c:155:
+	if(ret == sizeof(caps)) {

ERROR:SPACING: space required before the open parenthesis '('
#175: FILE: security/commoncap.c:156:
+		if(caps.version == _LINUX_CAPABILITY_VERSION) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: security/commoncap.c:159:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: security/commoncap.c:162:
+^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: security/commoncap.c:165:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#185: FILE: security/commoncap.c:166:
+			printk(KERN_WARNING "Warning: %s capability set has "

WARNING:SPLIT_STRING: quoted string split across lines
#186: FILE: security/commoncap.c:167:
+			printk(KERN_WARNING "Warning: %s capability set has "
+				"incorrect version %08X. Correct version "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: security/commoncap.c:168:
+				"is %08X\n",bprm->filename,caps.version,
 				           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: security/commoncap.c:168:
+				"is %08X\n",bprm->filename,caps.version,
 				                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#187: FILE: security/commoncap.c:168:
+				"incorrect version %08X. Correct version "
+				"is %08X\n",bprm->filename,caps.version,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 7 warnings, 2 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
