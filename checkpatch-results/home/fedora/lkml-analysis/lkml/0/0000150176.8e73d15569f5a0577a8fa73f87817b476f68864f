CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!read"
#69: FILE: fs/hppfs/hppfs_kern.c:228:
+	if (read == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: fs/hppfs/hppfs_kern.c:262:
+			printk("hppfs_read : read failed, errno = %d\n", -err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hppfs->contents"
#101: FILE: fs/hppfs/hppfs_kern.c:290:
+	if (hppfs->contents != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: fs/hppfs/hppfs_kern.c:305:
+	} else if(hppfs->host_fd != -1) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#114: FILE: fs/hppfs/hppfs_kern.c:307:
+		if (err < 0){

CHECK:BRACES: Unbalanced braces around else statement
#123: FILE: fs/hppfs/hppfs_kern.c:314:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!write"
#132: FILE: fs/hppfs/hppfs_kern.c:330:
+	if (write == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: fs/hppfs/hppfs_kern.c:394:
+		int err = 0;
+		while ((ret = read_proc(proc_file, data->contents,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: fs/hppfs/hppfs_kern.c:395:
+		while ((ret = read_proc(proc_file, data->contents,
+			     sizeof(data->contents), NULL, 0)) > 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: fs/hppfs/hppfs_kern.c:398:
+				printk("hppfs_get_data : failed to write out "

WARNING:SPLIT_STRING: quoted string split across lines
#176: FILE: fs/hppfs/hppfs_kern.c:399:
+				printk("hppfs_get_data : failed to write out "
+				       "%d bytes, err = %d\n", ret, -err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#194: FILE: fs/hppfs/hppfs_kern.c:413:
+		if (ret < 0) {
[...]
 		}
[...]

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: fs/hppfs/hppfs_kern.c:418:
+		else if(ret == 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#201: FILE: fs/hppfs/hppfs_kern.c:418:
 		}
+		else if(ret == 0)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: fs/hppfs/hppfs_kern.c:423:
+		if(ret < sizeof(data->contents))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: fs/hppfs/hppfs_kern.c:500:
+		else printk("hppfs_open : failed to open '%s', err = %d\n",

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#244: FILE: fs/hppfs/hppfs_kern.c:500:
+		else printk("hppfs_open : failed to open '%s', err = %d\n",

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_open', this function's name, in a string
#244: FILE: fs/hppfs/hppfs_kern.c:500:
+		else printk("hppfs_open : failed to open '%s', err = %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#252: FILE: fs/hppfs/hppfs_kern.c:507:
+		if (fd >= 0){

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: fs/hppfs/hppfs_kern.c:515:
 		else printk("hppfs_open : failed to open a socket in "
+			    "'%s', err = %d\n", host_file, -fd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!readdir"
#277: FILE: fs/hppfs/hppfs_kern.c:613:
+	if (readdir == NULL)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#286: FILE: fs/hppfs/hppfs_kern.c:681:
+	int (*readlink)(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#286: FILE: fs/hppfs/hppfs_kern.c:681:
+	int (*readlink)(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#286: FILE: fs/hppfs/hppfs_kern.c:681:
+	int (*readlink)(struct dentry *, char *, int);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!readlink"
#295: FILE: fs/hppfs/hppfs_kern.c:690:
+	if (readlink == NULL)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#305: FILE: fs/hppfs/hppfs_kern.c:704:
+	void * (*follow_link)(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#305: FILE: fs/hppfs/hppfs_kern.c:704:
+	void * (*follow_link)(struct dentry *, struct nameidata *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#318: FILE: fs/hppfs/hppfs_kern.c:716:
+	 * this check? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!follow_link"
#319: FILE: fs/hppfs/hppfs_kern.c:717:
+	if (follow_link == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#322: FILE: fs/hppfs/hppfs_kern.c:720:
+	ret = follow_link(proc_dentry, nd);
 	                               ^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150176.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 9 checks, 258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150176.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
