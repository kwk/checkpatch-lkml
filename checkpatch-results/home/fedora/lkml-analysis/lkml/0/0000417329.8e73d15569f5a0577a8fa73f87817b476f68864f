WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#2 - merge klibc.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#3 - move initrd to userspace

WARNING:TYPO_SPELLING: 'whereever' may be misspelled - perhaps 'wherever'?
#94: 
to grab the initrd image from bootmem [or whereever], but the vast 
                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#4 - move mounting root to userspace

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#N - to infinity... and beyond!

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
#1 - shared kinit

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#2 - klibc in the kernel tarball

WARNING:TYPO_SPELLING: 'Emporer' may be misspelled - perhaps 'Emperor'?
#163: 
this effort.  And thanks to our Emporer Penguin for giving me a break, 
                                ^^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#212: 
--- a/Makefile	Sat Nov  2 02:34:50 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#278: FILE: init/initramfs.c:1:
+#define __KERNEL_SYSCALLS__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: init/initramfs.c:47:
+	unsigned long tmp = ino + minor + (major << 3);
+	tmp += tmp >> 5;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: init/initramfs.c:54:
+	struct hash **p, *q;
+	for (p = head + hash(major, minor, ino); *p; p = &(*p)->next) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: init/initramfs.c:78:
+	struct hash **p, *q;
+	for (p = head; p < head + 32; p++) {

WARNING:MISPLACED_INIT: __initdata should be placed after mode
#367: FILE: init/initramfs.c:90:
+static __initdata mode_t mode;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after uid
#369: FILE: init/initramfs.c:92:
+static __initdata uid_t uid;

WARNING:MISPLACED_INIT: __initdata should be placed after gid
#370: FILE: init/initramfs.c:93:
+static __initdata gid_t gid;

WARNING:MISPLACED_INIT: __initdata should be placed after rdev
#371: FILE: init/initramfs.c:94:
+static __initdata dev_t rdev;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#382: FILE: init/initramfs.c:105:
+		parsed[i] = simple_strtoul(buf, NULL, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:CAMELCASE: Avoid CamelCase: <Start>
#399: FILE: init/initramfs.c:122:
+	Start,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Collect>
#400: FILE: init/initramfs.c:123:
+	Collect,

CHECK:CAMELCASE: Avoid CamelCase: <GotHeader>
#401: FILE: init/initramfs.c:124:
+	GotHeader,

CHECK:CAMELCASE: Avoid CamelCase: <SkipIt>
#402: FILE: init/initramfs.c:125:
+	SkipIt,

CHECK:CAMELCASE: Avoid CamelCase: <GotName>
#403: FILE: init/initramfs.c:126:
+	GotName,

CHECK:CAMELCASE: Avoid CamelCase: <CopyFile>
#404: FILE: init/initramfs.c:127:
+	CopyFile,

CHECK:CAMELCASE: Avoid CamelCase: <GotSymlink>
#405: FILE: init/initramfs.c:128:
+	GotSymlink,

CHECK:CAMELCASE: Avoid CamelCase: <Reset>
#406: FILE: init/initramfs.c:129:
+	Reset

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#410: FILE: init/initramfs.c:133:
+unsigned count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#413: FILE: init/initramfs.c:136:
+static inline void eat(unsigned n)

WARNING:MISPLACED_INIT: __initdata should be placed after remains
#423: FILE: init/initramfs.c:146:
+static __initdata int remains;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#426: FILE: init/initramfs.c:149:
+static void __init read_into(char *buf, unsigned size, enum state next)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#433: FILE: init/initramfs.c:156:
+		collect = collected = buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#450: FILE: init/initramfs.c:173:
+	unsigned n = remains;

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: init/initramfs.c:174:
+	unsigned n = remains;
+	if (count < n)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#456: FILE: init/initramfs.c:179:
+	if (remains -= n)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#467: FILE: init/initramfs.c:190:
+	if (name_len <= 0 || name_len > PATH_MAX)
[...]
+	else if (S_ISLNK(mode)) {
[...]
+	} else if (body_len && !S_ISREG(mode))
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#470: FILE: init/initramfs.c:193:
+		if (body_len > PATH_MAX)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#472: FILE: init/initramfs.c:195:
+		else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#473: FILE: init/initramfs.c:196:
+			collect = collected = symlink_buf;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#490: FILE: init/initramfs.c:213:
+		return 1;
+	} else {

ERROR:SPACING: space required before the open parenthesis '('
#499: FILE: init/initramfs.c:222:
+	while(count && *victim == '\0')

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: init/initramfs.c:233:
+		char *old = find_link(major, minor, ino, collected);
+		if (old)

WARNING:MISPLACED_INIT: __initdata should be placed after wfd
#516: FILE: init/initramfs.c:239:
+static __initdata int wfd;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#527: FILE: init/initramfs.c:250:
+	printk(KERN_INFO "-> %s\n", collected);

CHECK:BRACES: braces {} should be used on all arms of this statement
#528: FILE: init/initramfs.c:251:
+	if (S_ISREG(mode)) {
[...]
+	} else if (S_ISDIR(mode)) {
[...]
+	} else if (S_ISBLK(mode) || S_ISCHR(mode) ||
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#530: FILE: init/initramfs.c:253:
+			wfd = sys_open(collected, O_WRONLY|O_CREAT, mode);
 			                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#546: FILE: init/initramfs.c:269:
+	} else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#559: FILE: init/initramfs.c:282:
+		return 0;
+	} else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#588: FILE: init/initramfs.c:311:
+static int __init write_buffer(char *buf, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: init/initramfs.c:321:
+static void __init flush_buffer(char *buf, unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#601: FILE: init/initramfs.c:324:
+	int written;
+	while ((written = write_buffer(buf, len)) < len) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: init/initramfs.c:326:
+		char c = buf[written];
+		if (c == '0') {

CHECK:BRACES: braces {} should be used on all arms of this statement
#603: FILE: init/initramfs.c:326:
+		if (c == '0') {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#608: FILE: init/initramfs.c:331:
+		} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#620: FILE: init/initramfs.c:343:
+#define memzero(s, n)     memset ((s), 0, (n))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#620: FILE: init/initramfs.c:343:
+#define memzero(s, n)     memset ((s), 0, (n))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#623: FILE: init/initramfs.c:346:
+typedef unsigned char  uch;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#624: FILE: init/initramfs.c:347:
+typedef unsigned short ush;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#625: FILE: init/initramfs.c:348:
+typedef unsigned long  ulg;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#633: FILE: init/initramfs.c:356:
+static unsigned insize;  /* valid bytes in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#634: FILE: init/initramfs.c:357:
+static unsigned inptr;   /* index of next byte to be processed in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#635: FILE: init/initramfs.c:358:
+static unsigned outcnt;  /* bytes in output buffer */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: init/initramfs.c:362:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#641: FILE: init/initramfs.c:364:
+#define Assert(cond,msg)
                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Assert>
#641: FILE: init/initramfs.c:364:
+#define Assert(cond,msg)

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#642: FILE: init/initramfs.c:365:
+#define Trace(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracev>
#643: FILE: init/initramfs.c:366:
+#define Tracev(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#644: FILE: init/initramfs.c:367:
+#define Tracevv(x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: init/initramfs.c:368:
+#define Tracec(c,x)
                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracec>
#645: FILE: init/initramfs.c:368:
+#define Tracec(c,x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#646: FILE: init/initramfs.c:369:
+#define Tracecv(c,x)
                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#646: FILE: init/initramfs.c:369:
+#define Tracecv(c,x)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#672: FILE: init/initramfs.c:395:
+	unsigned n;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#686: FILE: init/initramfs.c:409:
+static void __init unpack_to_rootfs(char *buf, unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: init/initramfs.c:412:
+	int written;
+	header_buf = malloc(110);

WARNING:LINE_SPACING: Missing a blank line after declarations
#699: FILE: init/initramfs.c:422:
+		loff_t saved_offset = this_header;
+		if (*buf == '0' && !(this_header & 3)) {

CHECK:SPACING: No space is necessary after a cast
#737: FILE: init/initramfs.c:460:
+	unpack_to_rootfs((void *) &__initramfs_start,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#747: FILE: init/main.c:75:
+extern void populate_rootfs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#785: FILE: usr/gen_init_cpio.c:1:
+#include <stdio.h>

WARNING:SPLIT_STRING: quoted string split across lines
#825: FILE: usr/gen_init_cpio.c:41:
+	sprintf(s, "%s%08X%08X%08lX%08lX%08X%08lX"
+	       "%08X%08X%08X%08X%08X%08X%08X",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#829: FILE: usr/gen_init_cpio.c:45:
+		(long) 0,		/* uid */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long) 0' could be '0L'
#829: FILE: usr/gen_init_cpio.c:45:
+		(long) 0,		/* uid */

CHECK:SPACING: No space is necessary after a cast
#830: FILE: usr/gen_init_cpio.c:46:
+		(long) 0,		/* gid */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long) 0' could be '0L'
#830: FILE: usr/gen_init_cpio.c:46:
+		(long) 0,		/* gid */

CHECK:SPACING: No space is necessary after a cast
#832: FILE: usr/gen_init_cpio.c:48:
+		(long) 0,		/* mtime */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long) 0' could be '0L'
#832: FILE: usr/gen_init_cpio.c:48:
+		(long) 0,		/* mtime */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#855: FILE: usr/gen_init_cpio.c:71:
+	sprintf(s,"%s%08X%08X%08lX%08lX%08X%08lX"
 	         ^

WARNING:SPLIT_STRING: quoted string split across lines
#856: FILE: usr/gen_init_cpio.c:72:
+	sprintf(s,"%s%08X%08X%08lX%08lX%08X%08lX"
+	       "%08X%08X%08X%08X%08X%08X%08X",

CHECK:SPACING: No space is necessary after a cast
#860: FILE: usr/gen_init_cpio.c:76:
+		(long) uid,		/* uid */

CHECK:SPACING: No space is necessary after a cast
#861: FILE: usr/gen_init_cpio.c:77:
+		(long) gid,		/* gid */

CHECK:SPACING: No space is necessary after a cast
#863: FILE: usr/gen_init_cpio.c:79:
+		(long) mtime,		/* mtime */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: usr/gen_init_cpio.c:103:
+	sprintf(s,"%s%08X%08X%08lX%08lX%08X%08lX"
 	         ^

WARNING:SPLIT_STRING: quoted string split across lines
#888: FILE: usr/gen_init_cpio.c:104:
+	sprintf(s,"%s%08X%08X%08lX%08lX%08X%08lX"
+	       "%08X%08X%08X%08X%08X%08X%08X",

CHECK:SPACING: No space is necessary after a cast
#892: FILE: usr/gen_init_cpio.c:108:
+		(long) uid,		/* uid */

CHECK:SPACING: No space is necessary after a cast
#893: FILE: usr/gen_init_cpio.c:109:
+		(long) gid,		/* gid */

CHECK:SPACING: No space is necessary after a cast
#895: FILE: usr/gen_init_cpio.c:111:
+		(long) mtime,		/* mtime */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#907: FILE: usr/gen_init_cpio.c:123:
+int main (int argc, char *argv[])

CHECK:SPACING: No space is necessary after a cast
#918: FILE: usr/gen_init_cpio.c:134:
+	(void) argc;

CHECK:SPACING: No space is necessary after a cast
#919: FILE: usr/gen_init_cpio.c:135:
+	(void) argv;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 52 warnings, 36 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
