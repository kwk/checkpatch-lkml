WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#276: FILE: arch/s390/lib/string.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#277: FILE: arch/s390/lib/string.c:2:
+ *  arch/s390/lib/string.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#299: FILE: arch/s390/lib/string.c:24:
+		      : "+d" (r0), "+a" (s) :  : "cc" );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#300: FILE: arch/s390/lib/string.c:25:
+	return (char *) r0;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#310: FILE: arch/s390/lib/string.c:35:
+		      : "+d" (p), "+a" (s) : "d" (r0) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#311: FILE: arch/s390/lib/string.c:36:
+	return (char *) p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: arch/s390/lib/string.c:58:
+size_t strnlen(const char * s, size_t n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#354: FILE: arch/s390/lib/string.c:79:
+		      : "cc", "memory" );

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#370: FILE: arch/s390/lib/string.c:95:
+size_t strlcpy(char *dest, const char *src, size_t size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#375: FILE: arch/s390/lib/string.c:100:
+		size_t len = (ret >= size) ? size-1 : ret;
 		                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: arch/s390/lib/string.c:101:
+		size_t len = (ret >= size) ? size-1 : ret;
+		dest[len] = '\0';

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: arch/s390/lib/string.c:120:
+	size_t len = __strnend(src, n) - src;
+	__builtin_memset(dest + len, 0, n - len);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#419: FILE: arch/s390/lib/string.c:144:
+		      : "d" (r0), "0" (0UL) : "cc", "memory" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#492: FILE: arch/s390/lib/string.c:217:
+		      : : "cc" );

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#502: FILE: arch/s390/lib/string.c:227:
+char * strrchr(const char * s, int c)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#502: FILE: arch/s390/lib/string.c:227:
+char * strrchr(const char * s, int c)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: arch/s390/lib/string.c:229:
+       size_t len = __strend(s) - s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: arch/s390/lib/string.c:231:
+       if (len)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#506: FILE: arch/s390/lib/string.c:231:
+       if (len)
+	       do {

WARNING:TABSTOP: Statements should start on a tabstop
#507: FILE: arch/s390/lib/string.c:232:
+	       do {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#507: FILE: arch/s390/lib/string.c:232:
+	       do {
+		       if (s[len] == (char) c)

WARNING:TABSTOP: Statements should start on a tabstop
#508: FILE: arch/s390/lib/string.c:233:
+		       if (s[len] == (char) c)

CHECK:SPACING: No space is necessary after a cast
#508: FILE: arch/s390/lib/string.c:233:
+		       if (s[len] == (char) c)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#508: FILE: arch/s390/lib/string.c:233:
+		       if (s[len] == (char) c)
+			       return (char *) s + len;

WARNING:TABSTOP: Statements should start on a tabstop
#509: FILE: arch/s390/lib/string.c:234:
+			       return (char *) s + len;

CHECK:SPACING: No space is necessary after a cast
#509: FILE: arch/s390/lib/string.c:234:
+			       return (char *) s + len;

WARNING:TABSTOP: Statements should start on a tabstop
#510: FILE: arch/s390/lib/string.c:235:
+	       } while (--len > 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: arch/s390/lib/string.c:236:
+       return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: arch/s390/lib/string.c:245:
+char * strstr(const char * s1,const char * s2)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: arch/s390/lib/string.c:245:
+char * strstr(const char * s1,const char * s2)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: arch/s390/lib/string.c:245:
+char * strstr(const char * s1,const char * s2)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: arch/s390/lib/string.c:245:
+char * strstr(const char * s1,const char * s2)
                              ^

CHECK:SPACING: No space is necessary after a cast
#526: FILE: arch/s390/lib/string.c:251:
+		return (char *) s1;

CHECK:SPACING: No space is necessary after a cast
#529: FILE: arch/s390/lib/string.c:254:
+		register unsigned long r2 asm("2") = (unsigned long) s1;

CHECK:SPACING: No space is necessary after a cast
#530: FILE: arch/s390/lib/string.c:255:
+		register unsigned long r3 asm("3") = (unsigned long) l2;

CHECK:SPACING: No space is necessary after a cast
#531: FILE: arch/s390/lib/string.c:256:
+		register unsigned long r4 asm("4") = (unsigned long) s2;

CHECK:SPACING: No space is necessary after a cast
#532: FILE: arch/s390/lib/string.c:257:
+		register unsigned long r5 asm("5") = (unsigned long) l2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: arch/s390/lib/string.c:265:
+^I^I^I        "+a" (r4), "+a" (r5) : : "cc" );$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space prohibited before that close parenthesis ')'
#540: FILE: arch/s390/lib/string.c:265:
+			        "+a" (r4), "+a" (r5) : : "cc" );

CHECK:SPACING: No space is necessary after a cast
#542: FILE: arch/s390/lib/string.c:267:
+			return (char *) s1;

CHECK:SPACING: No space is necessary after a cast
#560: FILE: arch/s390/lib/string.c:285:
+	register int r0 asm("0") = (char) c;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#568: FILE: arch/s390/lib/string.c:293:
+		      : "+a" (ret), "+&a" (s) : "d" (r0) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#569: FILE: arch/s390/lib/string.c:294:
+	return (void *) ret;

CHECK:SPACING: No space is necessary after a cast
#581: FILE: arch/s390/lib/string.c:306:
+	register unsigned long r2 asm("2") = (unsigned long) cs;

CHECK:SPACING: No space is necessary after a cast
#582: FILE: arch/s390/lib/string.c:307:
+	register unsigned long r3 asm("3") = (unsigned long) n;

CHECK:SPACING: No space is necessary after a cast
#583: FILE: arch/s390/lib/string.c:308:
+	register unsigned long r4 asm("4") = (unsigned long) ct;

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/s390/lib/string.c:309:
+	register unsigned long r5 asm("5") = (unsigned long) n;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#592: FILE: arch/s390/lib/string.c:317:
+		      : : "cc" );

CHECK:SPACING: No space is necessary after a cast
#594: FILE: arch/s390/lib/string.c:319:
+		ret = *(char *) r2 - *(char *) r4;

CHECK:SPACING: No space is necessary after a cast
#610: FILE: arch/s390/lib/string.c:335:
+	register int r0 asm("0") = (char) c;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#615: FILE: arch/s390/lib/string.c:340:
+		      : "+a" (ret), "+&a" (s) : "d" (r0) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#616: FILE: arch/s390/lib/string.c:341:
+	return (void *) ret;

CHECK:SPACING: No space is necessary after a cast
#664: FILE: arch/s390/lib/string.c:389:
+	xs = (char *) s;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#677: FILE: arch/s390/lib/string.c:402:
+EXPORT_SYMBOL_NOVERS(strchr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#678: FILE: arch/s390/lib/string.c:403:
+EXPORT_SYMBOL_NOVERS(strnchr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#679: FILE: arch/s390/lib/string.c:404:
+EXPORT_SYMBOL_NOVERS(strncmp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#680: FILE: arch/s390/lib/string.c:405:
+EXPORT_SYMBOL_NOVERS(strpbrk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: include/asm-s390/string.h:37:
+extern int memcmp(const void *, const void *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#793: FILE: include/asm-s390/string.h:37:
+extern int memcmp(const void *, const void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#793: FILE: include/asm-s390/string.h:37:
+extern int memcmp(const void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#793: FILE: include/asm-s390/string.h:37:
+extern int memcmp(const void *, const void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#794: FILE: include/asm-s390/string.h:38:
+extern void *memcpy(void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#794: FILE: include/asm-s390/string.h:38:
+extern void *memcpy(void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#794: FILE: include/asm-s390/string.h:38:
+extern void *memcpy(void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#794: FILE: include/asm-s390/string.h:38:
+extern void *memcpy(void *, const void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#795: FILE: include/asm-s390/string.h:39:
+extern void *memset(void *, int, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#795: FILE: include/asm-s390/string.h:39:
+extern void *memset(void *, int, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#795: FILE: include/asm-s390/string.h:39:
+extern void *memset(void *, int, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#795: FILE: include/asm-s390/string.h:39:
+extern void *memset(void *, int, size_t);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#796: FILE: include/asm-s390/string.h:40:
+extern int strcmp(const char *,const char *);
                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#796: FILE: include/asm-s390/string.h:40:
+extern int strcmp(const char *,const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#796: FILE: include/asm-s390/string.h:40:
+extern int strcmp(const char *,const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#796: FILE: include/asm-s390/string.h:40:
+extern int strcmp(const char *,const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#797: FILE: include/asm-s390/string.h:41:
+extern size_t strlcat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#797: FILE: include/asm-s390/string.h:41:
+extern size_t strlcat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#797: FILE: include/asm-s390/string.h:41:
+extern size_t strlcat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#797: FILE: include/asm-s390/string.h:41:
+extern size_t strlcat(char *, const char *, size_t);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#798: FILE: include/asm-s390/string.h:42:
+extern size_t strlcpy(char *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#798: FILE: include/asm-s390/string.h:42:
+extern size_t strlcpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#798: FILE: include/asm-s390/string.h:42:
+extern size_t strlcpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#798: FILE: include/asm-s390/string.h:42:
+extern size_t strlcpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#798: FILE: include/asm-s390/string.h:42:
+extern size_t strlcpy(char *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: include/asm-s390/string.h:43:
+extern char *strncat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#799: FILE: include/asm-s390/string.h:43:
+extern char *strncat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#799: FILE: include/asm-s390/string.h:43:
+extern char *strncat(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#799: FILE: include/asm-s390/string.h:43:
+extern char *strncat(char *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#800: FILE: include/asm-s390/string.h:44:
+extern char *strncpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#800: FILE: include/asm-s390/string.h:44:
+extern char *strncpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#800: FILE: include/asm-s390/string.h:44:
+extern char *strncpy(char *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#800: FILE: include/asm-s390/string.h:44:
+extern char *strncpy(char *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: include/asm-s390/string.h:45:
+extern char *strrchr(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#801: FILE: include/asm-s390/string.h:45:
+extern char *strrchr(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#801: FILE: include/asm-s390/string.h:45:
+extern char *strrchr(const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#802: FILE: include/asm-s390/string.h:46:
+extern char *strstr(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#802: FILE: include/asm-s390/string.h:46:
+extern char *strstr(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#802: FILE: include/asm-s390/string.h:46:
+extern char *strstr(const char *, const char *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#831: FILE: include/asm-s390/string.h:59:
+static inline void *memchr(const void * s, int c, size_t n)

CHECK:SPACING: No space is necessary after a cast
#833: FILE: include/asm-s390/string.h:61:
+	register int r0 asm("0") = (char) c;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#842: FILE: include/asm-s390/string.h:69:
+		      : "+a" (ret), "+&a" (s) : "d" (r0) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#843: FILE: include/asm-s390/string.h:70:
+	return (void *) ret;

CHECK:SPACING: No space is necessary after a cast
#848: FILE: include/asm-s390/string.h:75:
+	register int r0 asm("0") = (char) c;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#853: FILE: include/asm-s390/string.h:80:
+		      : "+a" (ret), "+&a" (s) : "d" (r0) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#854: FILE: include/asm-s390/string.h:81:
+	return (void *) ret;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#868: FILE: include/asm-s390/string.h:95:
+		      : "d" (r0), "0" (0) : "cc", "memory" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#974: FILE: include/asm-s390/string.h:107:
+		      : "cc", "memory" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#986: FILE: include/asm-s390/string.h:118:
+		      : "+d" (r0), "+a" (tmp) :  : "cc" );

CHECK:SPACING: No space is necessary after a cast
#987: FILE: include/asm-s390/string.h:119:
+	return r0 - (unsigned long) s;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#990: FILE: include/asm-s390/string.h:122:
+static inline size_t strnlen(const char * s, size_t n)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#998: FILE: include/asm-s390/string.h:130:
+		      : "+a" (end), "+a" (tmp) : "d" (r0)  : "cc" );

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275597.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 47 warnings, 36 checks, 683 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275597.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
