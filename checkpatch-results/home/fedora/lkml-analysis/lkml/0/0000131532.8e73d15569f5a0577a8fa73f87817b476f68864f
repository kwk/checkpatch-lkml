WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/dma/Kconfig:7:
+config DMA_ENGINE
+	bool "Support for DMA engines"
+	---help---
+	  DMA engines offload copy operations from the CPU to dedicated
+	  hardware, allowing the copies to happen asynchronously.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: drivers/dma/Kconfig:13:
+config NET_DMA
+	bool "Use DMA engines in the network stack"
+	depends on DMA_ENGINE
+	---help---
+	  Say Y to enable the use of DMA engines in the network stack to
+	  offload receive copy-to-user operations, freeing CPU cycles.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: drivers/dma/Kconfig:20:
+config NET_DMA_EARLY
+	bool "Do early DMA copies"
+	depends on NET_DMA
+	---help---
+	  Enabling this will cause the network stack to start DMA copies
+	  earlier. This can improve throughput, but this is also a more
+	  invasive change, and can be unstable.
+
+#
+# 
+#
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: drivers/dma/Kconfig:29:
+# $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#83: FILE: drivers/dma/Kconfig:32:
+config DMA_TESTCLIENT
+	tristate "DMA test client"
+	depends on DMA_ENGINE
+	---help---
+	  The CB test client driver performs a DMA-assisted memcpy on module
+	  load, and prints the result when unloaded. It is pretty simple, but
+	  maybe someday this will grow up into an actually useful test client.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: drivers/dma/cb_list.h:1:
+/* Extra macros that build on <linux/list.h> */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#115: FILE: drivers/dma/cb_list.h:7:
+/* Provide some safty to list_add, which I find easy to swap the arguments to */
                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#117: FILE: drivers/dma/cb_list.h:9:
+#define list_add_entry(pos, head, member)      list_add(&pos->member, head)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#117: FILE: drivers/dma/cb_list.h:9:
+#define list_add_entry(pos, head, member)      list_add(&pos->member, head)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#118: FILE: drivers/dma/cb_list.h:10:
+#define list_add_entry_tail(pos, head, member) list_add_tail(&pos->member, head)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#118: FILE: drivers/dma/cb_list.h:10:
+#define list_add_entry_tail(pos, head, member) list_add_tail(&pos->member, head)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: drivers/dma/dmaengine.c:1:
+/*******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#128: FILE: drivers/dma/dmaengine.c:2:
+/*******************************************************************************
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: drivers/dma/dmaengine.c:3:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: drivers/dma/dmaengine.c:5:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/dma/dmaengine.c:6:
+  This program is free software; you can redistribute it and/or modify it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: drivers/dma/dmaengine.c:7:
+  under the terms of the GNU General Public License as published by the Free $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: drivers/dma/dmaengine.c:8:
+  Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/dma/dmaengine.c:10:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/dma/dmaengine.c:11:
+  This program is distributed in the hope that it will be useful, but WITHOUT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: drivers/dma/dmaengine.c:12:
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: drivers/dma/dmaengine.c:13:
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: drivers/dma/dmaengine.c:15:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/dma/dmaengine.c:17:
+  this program; if not, write to the Free Software Foundation, Inc., 59 $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: drivers/dma/dmaengine.c:17:
+  this program; if not, write to the Free Software Foundation, Inc., 59 $

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: drivers/dma/dmaengine.c:19:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: drivers/dma/dmaengine.c:22:
+  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#203: FILE: drivers/dma/dmaengine.c:77:
+	chan->min_copy_size = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#209: FILE: drivers/dma/dmaengine.c:83:
+	__ATTR(memcpy_count, S_IRUGO, show_memcpy_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#210: FILE: drivers/dma/dmaengine.c:84:
+	__ATTR(bytes_transferred, S_IRUGO, show_bytes_transferred, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#211: FILE: drivers/dma/dmaengine.c:85:
+	__ATTR(in_use, S_IRUGO, show_in_use, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#212: FILE: drivers/dma/dmaengine.c:86:
+	__ATTR(min_copy_size, S_IRUGO | S_IWUSR, show_min_hw_copy_size, store_min_hw_copy_size),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: drivers/dma/dmaengine.c:110:
+	BUG_ON(!client);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: drivers/dma/dmaengine.c:132:
+	BUG_ON(!chan);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#271: FILE: drivers/dma/dmaengine.c:145:
+	list_for_each_entry(client, &dma_client_list, global_node) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: drivers/dma/dmaengine.c:170:
+	BUG_ON(!event_callback);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#335: FILE: drivers/dma/dmaengine.c:209:
+	BUG_ON(!client);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#343: FILE: drivers/dma/dmaengine.c:217:
+dma_async_memcpy_buf_to_buf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#356: FILE: drivers/dma/dmaengine.c:230:
+dma_async_memcpy_buf_to_pg(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#370: FILE: drivers/dma/dmaengine.c:244:
+dma_async_memcpy_pg_to_pg(

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#392: FILE: drivers/dma/dmaengine.c:266:
+dma_async_memcpy_complete(struct dma_chan *chan, dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: drivers/dma/dmaengine.c:276:
+	struct dma_chan* chan;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/dma/dmaengine.c:293:
+		snprintf(chan->class_dev.class_id, BUS_ID_SIZE, "dma%dchan%d",
+			device->dev_id, chan->chan_id);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#429: FILE: drivers/dma/dmaengine.c:303:
+dma_async_device_unregister(struct dma_device* device)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: drivers/dma/dmaengine.c:307:
+	BUG_ON(!device);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#462: FILE: drivers/dma/dmaengine.c:336:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#484: FILE: drivers/dma/dmaengine.c:358:
+	BUG_ON(in_interrupt());

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#509: FILE: drivers/dma/dmaengine.c:383:
+EXPORT_SYMBOL(dma_async_client_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#510: FILE: drivers/dma/dmaengine.c:384:
+EXPORT_SYMBOL(dma_async_client_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#511: FILE: drivers/dma/dmaengine.c:385:
+EXPORT_SYMBOL(dma_async_client_chan_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#512: FILE: drivers/dma/dmaengine.c:386:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_buf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#513: FILE: drivers/dma/dmaengine.c:387:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#514: FILE: drivers/dma/dmaengine.c:388:
+EXPORT_SYMBOL(dma_async_memcpy_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#515: FILE: drivers/dma/dmaengine.c:389:
+EXPORT_SYMBOL(dma_async_memcpy_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#516: FILE: drivers/dma/dmaengine.c:390:
+EXPORT_SYMBOL(dma_async_memcpy_issue_pending);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#517: FILE: drivers/dma/dmaengine.c:391:
+EXPORT_SYMBOL(dma_async_device_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#518: FILE: drivers/dma/dmaengine.c:392:
+EXPORT_SYMBOL(dma_async_device_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#519: FILE: drivers/dma/dmaengine.c:393:
+EXPORT_SYMBOL(dma_async_wait_for_completion);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#527: FILE: include/linux/dmaengine.h:1:
+/*******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#528: FILE: include/linux/dmaengine.h:2:
+/*******************************************************************************
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: include/linux/dmaengine.h:3:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: include/linux/dmaengine.h:5:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: include/linux/dmaengine.h:6:
+  This program is free software; you can redistribute it and/or modify it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: include/linux/dmaengine.h:7:
+  under the terms of the GNU General Public License as published by the Free $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: include/linux/dmaengine.h:8:
+  Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: include/linux/dmaengine.h:10:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: include/linux/dmaengine.h:11:
+  This program is distributed in the hope that it will be useful, but WITHOUT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: include/linux/dmaengine.h:12:
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: include/linux/dmaengine.h:13:
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: include/linux/dmaengine.h:15:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: include/linux/dmaengine.h:17:
+  this program; if not, write to the Free Software Foundation, Inc., 59 $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#543: FILE: include/linux/dmaengine.h:17:
+  this program; if not, write to the Free Software Foundation, Inc., 59 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: include/linux/dmaengine.h:19:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: include/linux/dmaengine.h:22:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: include/linux/dmaengine.h:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#564: FILE: include/linux/dmaengine.h:38:
+ * enum dma_event_t - resource PNP/power managment events
                                          ^^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#606: FILE: include/linux/dmaengine.h:80:
+struct dma_chan
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#629: FILE: include/linux/dmaengine.h:103:
+typedef void (*dma_event_callback) (struct dma_client *client, struct dma_chan *chan, enum dma_event_t event);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#658: FILE: include/linux/dmaengine.h:132:
+struct dma_device {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: include/linux/dmaengine.h:143:
+	dma_cookie_t (*device_memcpy_buf_to_buf)(struct dma_chan *chan, void *dest,
+		void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: include/linux/dmaengine.h:145:
+	dma_cookie_t (*device_memcpy_buf_to_pg)(struct dma_chan *chan, struct page *page,
+		unsigned int offset, void *kdata, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: include/linux/dmaengine.h:147:
+	dma_cookie_t (*device_memcpy_pg_to_pg)(struct dma_chan *chan, struct page *dest_pg,
+		unsigned int dest_off, struct page *src_pg, unsigned int src_off,

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#676: FILE: include/linux/dmaengine.h:150:
+	enum dma_status_t (*device_memcpy_complete)(struct dma_chan *chan, dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#692: FILE: include/linux/dmaengine.h:166:
+dma_async_memcpy_buf_to_buf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#699: FILE: include/linux/dmaengine.h:173:
+dma_async_memcpy_buf_to_pg(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#707: FILE: include/linux/dmaengine.h:181:
+dma_async_memcpy_pg_to_pg(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dma_chan *' should also have an identifier name
#715: FILE: include/linux/dmaengine.h:189:
+void dma_async_memcpy_issue_pending(struct dma_chan *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#721: FILE: include/linux/dmaengine.h:195:
+dma_async_is_complete(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: include/linux/dmaengine.h:199:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#725: FILE: include/linux/dmaengine.h:199:
+	dma_cookie_t last_used) {
+	

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#727: FILE: include/linux/dmaengine.h:201:
+		if ((cookie <= last_complete) || (cookie > last_used))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#727: FILE: include/linux/dmaengine.h:201:
+		if ((cookie <= last_complete) || (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#730: FILE: include/linux/dmaengine.h:204:
+		if ((cookie <= last_complete) && (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#730: FILE: include/linux/dmaengine.h:204:
+		if ((cookie <= last_complete) && (cookie > last_used))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#737: FILE: include/linux/dmaengine.h:211:
+dma_async_memcpy_complete(struct dma_chan *chan, dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: include/linux/dmaengine.h:218:
+int dma_async_device_register(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#747: FILE: include/linux/dmaengine.h:221:
+void dma_async_device_unregister(

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#753: FILE: include/linux/dmaengine.h:227:
+struct dma_completion
+{

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#760: FILE: include/linux/dmaengine.h:234:
+#define DMA_COMPLETION_INITIALIZER(name, chan, cookie) \
+{	.chan = chan, \
+	.cookie = cookie, \
+	.status = DMA_IN_PROGRESS, \
+	.comp = COMPLETION_INITIALIZER((name).comp)	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#760: FILE: include/linux/dmaengine.h:234:
+#define DMA_COMPLETION_INITIALIZER(name, chan, cookie) \
+{	.chan = chan, \
+	.cookie = cookie, \
+	.status = DMA_IN_PROGRESS, \
+	.comp = COMPLETION_INITIALIZER((name).comp)	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#766: FILE: include/linux/dmaengine.h:240:
+#define DECLARE_DMA_COMPLETION(name, chan, cookie) \
+struct dma_completion name = DMA_COMPLETION_INITIALIZER(name, chan, cookie)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#774: FILE: include/linux/dmaengine.h:248:
+struct dma_page_list
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#781: FILE: include/linux/dmaengine.h:255:
+struct dma_locked_list
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#787: FILE: include/linux/dmaengine.h:261:
+void dma_unlock_iovec_pages(struct dma_locked_list* locked_list);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#789: FILE: include/linux/dmaengine.h:263:
+dma_skb_copy_datagram_iovec(struct dma_chan* chan, const struct sk_buff *skb, int offset,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000131532.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 41 warnings, 28 checks, 729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000131532.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
