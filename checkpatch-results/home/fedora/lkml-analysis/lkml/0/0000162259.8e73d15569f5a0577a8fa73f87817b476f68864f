WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
diff -ruNp 400-workthreads.patch-old/drivers/acpi/osl.c 400-workthreads.patch-new/drivers/acpi/osl.c

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#137: FILE: drivers/scsi/hosts.c:135:
+		shost->work_q = create_nofreeze_singlethread_workqueue(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/kthread.h:27:
+struct task_struct *__kthread_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: include/linux/kthread.h:30:
+				   va_list * args);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/linux/kthread.h:37:
+struct task_struct *kthread_nofreeze_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: include/linux/kthread.h:49:
+extern struct task_struct * kthread_run(int (*threadfn)(void *data),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/linux/kthread.h:49:
+extern struct task_struct * kthread_run(int (*threadfn)(void *data),

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: include/linux/kthread.h:53:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/kthread.h:53:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: include/linux/kthread.h:54:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),
+					void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: kernel/kthread.c:128:
+struct task_struct *__kthread_create(int (*threadfn)(void *data),
 				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: kernel/kthread.c:131:
+				   va_list * args)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: kernel/kthread.c:162:
+	struct task_struct * result;

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: kernel/kthread.c:165:
+	va_list args;
+	va_start(args, namefmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/kthread.c:174:
+struct task_struct *kthread_nofreeze_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: kernel/kthread.c:177:
+	struct task_struct * result;

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: kernel/kthread.c:180:
+	va_list args;
+	va_start(args, namefmt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#308: FILE: kernel/kthread.c:186:
+EXPORT_SYMBOL(kthread_nofreeze_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: kernel/kthread.c:197:
+struct task_struct * kthread_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: kernel/kthread.c:198:
+struct task_struct * kthread_run(int (*threadfn)(void *data),
+		void *data,

ERROR:SPACING: space required before the open parenthesis '('
#330: FILE: kernel/kthread.c:208:
+	if(!IS_ERR(__k))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#336: FILE: kernel/kthread.c:214:
+EXPORT_SYMBOL(kthread_run);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: kernel/kthread.c:216:
+struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: kernel/kthread.c:217:
+struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),
+		void *data,

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: kernel/kthread.c:227:
+	if(!IS_ERR(__k))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: kernel/workqueue.c:297:
+			p = kthread_nofreeze_create(worker_thread, cwq,
+					"%s", wq->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: kernel/workqueue.c:300:
+			p = kthread_create(worker_thread, cwq,
+					"%s", wq->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: kernel/workqueue.c:304:
+			p = kthread_nofreeze_create(worker_thread, cwq,
+					"%s/%d", wq->name, cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: kernel/workqueue.c:307:
+			p = kthread_create(worker_thread, cwq,
+					"%s/%d", wq->name, cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000162259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 5 warnings, 14 checks, 366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000162259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
