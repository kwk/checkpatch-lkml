WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#43: FILE: fs/ufs/balloc.c:42:
+void ufs_free_fragments (struct inode * inode, unsigned fragment, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#43: FILE: fs/ufs/balloc.c:42:
+void ufs_free_fragments (struct inode * inode, unsigned fragment, unsigned count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#43: FILE: fs/ufs/balloc.c:42:
+void ufs_free_fragments (struct inode * inode, unsigned fragment, unsigned count)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#43: FILE: fs/ufs/balloc.c:42:
+void ufs_free_fragments (struct inode * inode, unsigned fragment, unsigned count)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#53: FILE: fs/ufs/balloc.c:138:
+void ufs_free_blocks (struct inode * inode, unsigned fragment, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#53: FILE: fs/ufs/balloc.c:138:
+void ufs_free_blocks (struct inode * inode, unsigned fragment, unsigned count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#53: FILE: fs/ufs/balloc.c:138:
+void ufs_free_blocks (struct inode * inode, unsigned fragment, unsigned count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#53: FILE: fs/ufs/balloc.c:138:
+void ufs_free_blocks (struct inode * inode, unsigned fragment, unsigned count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: fs/ufs/balloc.c:227:
+static struct page * ufs_get_locked_page(struct address_space *mapping, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: fs/ufs/balloc.c:227:
+static struct page * ufs_get_locked_page(struct address_space *mapping, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/ufs/balloc.c:228:
+static struct page * ufs_get_locked_page(struct address_space *mapping, 
+				  unsigned long index)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: fs/ufs/balloc.c:235:
+^I^I^I^I       (filler_t*)mapping->a_ops->readpage, $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#70: FILE: fs/ufs/balloc.c:235:
+				       (filler_t*)mapping->a_ops->readpage, 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#73: FILE: fs/ufs/balloc.c:238:
+			printk(KERN_ERR "ufs_change_blocknr: "

WARNING:SPLIT_STRING: quoted string split across lines
#74: FILE: fs/ufs/balloc.c:239:
+			printk(KERN_ERR "ufs_change_blocknr: "
+			       "read_cache_page error: ino %lu, index: %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: fs/ufs/balloc.c:245:
+^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#85: FILE: fs/ufs/balloc.c:250:
+			printk(KERN_ERR "ufs_change_blocknr: "

WARNING:SPLIT_STRING: quoted string split across lines
#86: FILE: fs/ufs/balloc.c:251:
+			printk(KERN_ERR "ufs_change_blocknr: "
+			       "can not read page: ino %lu, index: %lu\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: fs/ufs/balloc.c:272:
+ * also we suppose that oldb...oldb+count-1 blocks $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: fs/ufs/balloc.c:278:
+static void ufs_change_blocknr(struct inode *inode, unsigned int count, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: fs/ufs/balloc.c:279:
+^I^I^I       unsigned int oldb, unsigned int newb, $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: fs/ufs/balloc.c:283:
+	sector_t baseblk = ((inode->i_size-1)>>inode->i_blkbits) + 1 - count;
 	                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#118: FILE: fs/ufs/balloc.c:283:
+	sector_t baseblk = ((inode->i_size-1)>>inode->i_blkbits) + 1 - count;
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: fs/ufs/balloc.c:292:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/ufs/balloc.c:292:
+      $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: fs/ufs/balloc.c:293:
+	BUG_ON(!PageLocked(locked_page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: fs/ufs/balloc.c:296:
+		index = (baseblk+i) >> (PAGE_CACHE_SHIFT - inode->i_blkbits);
 		                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#133: FILE: fs/ufs/balloc.c:298:
+		if (likely(cur_index != index)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/ufs/balloc.c:301:
+^I^I^I^Icontinue;^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: fs/ufs/balloc.c:302:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: fs/ufs/balloc.c:315:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/ufs/balloc.c:315:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/ufs/balloc.c:318:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/ufs/balloc.c:318:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: fs/ufs/balloc.c:325:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: fs/ufs/balloc.c:325:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/ufs/balloc.c:325:
+ ^I}$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: fs/ufs/balloc.c:329:
+unsigned ufs_new_fragments(struct inode * inode, __fs32 * p, unsigned fragment,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: fs/ufs/balloc.c:329:
+unsigned ufs_new_fragments(struct inode * inode, __fs32 * p, unsigned fragment,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: fs/ufs/balloc.c:329:
+unsigned ufs_new_fragments(struct inode * inode, __fs32 * p, unsigned fragment,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: fs/ufs/balloc.c:329:
+unsigned ufs_new_fragments(struct inode * inode, __fs32 * p, unsigned fragment,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: fs/ufs/balloc.c:330:
+			   unsigned goal, unsigned count, int * err, struct page *locked_page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: fs/ufs/balloc.c:330:
+			   unsigned goal, unsigned count, int * err, struct page *locked_page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: fs/ufs/balloc.c:330:
+			   unsigned goal, unsigned count, int * err, struct page *locked_page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: fs/ufs/balloc.c:335:
+	unsigned cgno, oldcount, newcount, tmp, request, result;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: fs/ufs/inode.c:178:
+^I^I^I^I^I     unsigned int required, int *err, int metadata, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/ufs/inode.c:237:
+^I^I^I^I^I^I fs32_to_cpu(sb, *p2), uspi->s_fpb - lastblockoff, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/ufs/inode.c:250:
+^I^I^I^I^I goal, required + blockoff, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/ufs/inode.c:258:
+^I^I^I^I^Ifs32_to_cpu(sb, *p), required +  (blockoff - lastblockoff), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: fs/ufs/inode.c:267:
+^I^Itmp = ufs_new_fragments(inode, p, fragment - blockoff, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: fs/ufs/inode.c:311:
+static struct buffer_head *ufs_block_getfrag(struct inode *inode, struct buffer_head *bh, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: fs/ufs/inode.c:312:
+^I^I^I^I^I     unsigned int fragment, unsigned int new_fragment, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: fs/ufs/inode.c:313:
+^I^I^I^I^I     unsigned int blocksize, int * err, int metadata, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: fs/ufs/inode.c:313:
+					     unsigned int blocksize, int * err, int metadata, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: fs/ufs/inode.c:359:
+^Itmp = ufs_new_fragments(inode, p, ufs_blknum(new_fragment), goal, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__fs32 *' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#317: FILE: include/linux/ufs_fs.h:879:
+extern unsigned ufs_new_fragments(struct inode *, __fs32 *, unsigned, unsigned, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#318: FILE: include/linux/ufs_fs.h:880:
+				  unsigned, int *, struct page *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 32 warnings, 7 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
