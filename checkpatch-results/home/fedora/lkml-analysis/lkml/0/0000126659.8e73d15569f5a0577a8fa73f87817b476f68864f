WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: drivers/isdn/gigaset/proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#63: FILE: drivers/isdn/gigaset/proc.c:16:
+ * Version: $Id: proc.c,v 1.5.2.8 2005/11/13 23:05:19 hjlipp Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#71: FILE: drivers/isdn/gigaset/proc.c:24:
+static struct proc_dir_entry *common_proc = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: No space is necessary after a cast
#75: FILE: drivers/isdn/gigaset/proc.c:28:
+	struct cardstate *cs = (struct cardstate *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: drivers/isdn/gigaset/proc.c:36:
+^I^I               NULL, value, NULL)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: drivers/isdn/gigaset/proc.c:36:
+	if (!gigaset_add_event(cs, &cs->at_state, EV_PROC_CIDMODE,
+		               NULL, value, NULL)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: drivers/isdn/gigaset/proc.c:55:
+                          int count, int *eof, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: drivers/isdn/gigaset/proc.c:55:
+                          int count, int *eof, void *data)$

WARNING:LONG_LINE_COMMENT: line length of 148 exceeds 100 columns
#111: FILE: drivers/isdn/gigaset/proc.c:64:
+	len += scnprintf(buf+len, count-len, "Device id         : %d\n", cs->myid); //FIXME spin_lock_irqsave? is the only problem corrupted output?

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: drivers/isdn/gigaset/proc.c:64:
+	len += scnprintf(buf+len, count-len, "Device id         : %d\n", cs->myid); //FIXME spin_lock_irqsave? is the only problem corrupted output?
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#111: FILE: drivers/isdn/gigaset/proc.c:64:
+	len += scnprintf(buf+len, count-len, "Device id         : %d\n", cs->myid); //FIXME spin_lock_irqsave? is the only problem corrupted output?
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: drivers/isdn/gigaset/proc.c:65:
+	len += scnprintf(buf+len, count-len, "Current mstate    : %d\n", atomic_read(&cs->mstate));
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#112: FILE: drivers/isdn/gigaset/proc.c:65:
+	len += scnprintf(buf+len, count-len, "Current mstate    : %d\n", atomic_read(&cs->mstate));
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: drivers/isdn/gigaset/proc.c:66:
+	len += scnprintf(buf+len, count-len, "Current mode      : %d\n", atomic_read(&cs->mode));
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#113: FILE: drivers/isdn/gigaset/proc.c:66:
+	len += scnprintf(buf+len, count-len, "Current mode      : %d\n", atomic_read(&cs->mode));
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: drivers/isdn/gigaset/proc.c:67:
+	len += scnprintf(buf+len, count-len, "DLE mode          : %d\n", cs->dle);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#114: FILE: drivers/isdn/gigaset/proc.c:67:
+	len += scnprintf(buf+len, count-len, "DLE mode          : %d\n", cs->dle);
 	                               ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#115: FILE: drivers/isdn/gigaset/proc.c:68:
+	len += scnprintf(buf+len, count-len, "connected         : %d\n", atomic_read(&cs->connected));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#115: FILE: drivers/isdn/gigaset/proc.c:68:
+	len += scnprintf(buf+len, count-len, "connected         : %d\n", atomic_read(&cs->connected));
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#115: FILE: drivers/isdn/gigaset/proc.c:68:
+	len += scnprintf(buf+len, count-len, "connected         : %d\n", atomic_read(&cs->connected));
 	                               ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#118: FILE: drivers/isdn/gigaset/proc.c:71:
+		len += scnprintf(buf+len, count-len, "Corrupt Packages  (%d): %d\n", i, cs->bcs[i].corrupted);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: drivers/isdn/gigaset/proc.c:71:
+		len += scnprintf(buf+len, count-len, "Corrupt Packages  (%d): %d\n", i, cs->bcs[i].corrupted);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: drivers/isdn/gigaset/proc.c:71:
+		len += scnprintf(buf+len, count-len, "Corrupt Packages  (%d): %d\n", i, cs->bcs[i].corrupted);
 		                               ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#119: FILE: drivers/isdn/gigaset/proc.c:72:
+		len += scnprintf(buf+len, count-len, "Trans. Up         (%d): %d\n", i, cs->bcs[i].trans_up);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: drivers/isdn/gigaset/proc.c:72:
+		len += scnprintf(buf+len, count-len, "Trans. Up         (%d): %d\n", i, cs->bcs[i].trans_up);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#119: FILE: drivers/isdn/gigaset/proc.c:72:
+		len += scnprintf(buf+len, count-len, "Trans. Up         (%d): %d\n", i, cs->bcs[i].trans_up);
 		                               ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#120: FILE: drivers/isdn/gigaset/proc.c:73:
+		len += scnprintf(buf+len, count-len, "Trans. Down       (%d): %d\n", i, cs->bcs[i].trans_down);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#120: FILE: drivers/isdn/gigaset/proc.c:73:
+		len += scnprintf(buf+len, count-len, "Trans. Down       (%d): %d\n", i, cs->bcs[i].trans_down);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#120: FILE: drivers/isdn/gigaset/proc.c:73:
+		len += scnprintf(buf+len, count-len, "Trans. Down       (%d): %d\n", i, cs->bcs[i].trans_down);
 		                               ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#121: FILE: drivers/isdn/gigaset/proc.c:74:
+		len += scnprintf(buf+len, count-len, "use count         (%d): %d\n", i, cs->bcs[i].use_count);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#121: FILE: drivers/isdn/gigaset/proc.c:74:
+		len += scnprintf(buf+len, count-len, "use count         (%d): %d\n", i, cs->bcs[i].use_count);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#121: FILE: drivers/isdn/gigaset/proc.c:74:
+		len += scnprintf(buf+len, count-len, "use count         (%d): %d\n", i, cs->bcs[i].use_count);
 		                               ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#122: FILE: drivers/isdn/gigaset/proc.c:75:
+		len += scnprintf(buf+len, count-len, "busy              (%d): %d\n", i, cs->bcs[i].busy);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: drivers/isdn/gigaset/proc.c:75:
+		len += scnprintf(buf+len, count-len, "busy              (%d): %d\n", i, cs->bcs[i].busy);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: drivers/isdn/gigaset/proc.c:75:
+		len += scnprintf(buf+len, count-len, "busy              (%d): %d\n", i, cs->bcs[i].busy);
 		                               ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#124: FILE: drivers/isdn/gigaset/proc.c:77:
+		len += scnprintf(buf+len, count-len, "Current CID       (%d): %d\n", i, cs->bcs[i].at_state.cid);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#124: FILE: drivers/isdn/gigaset/proc.c:77:
+		len += scnprintf(buf+len, count-len, "Current CID       (%d): %d\n", i, cs->bcs[i].at_state.cid);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: drivers/isdn/gigaset/proc.c:77:
+		len += scnprintf(buf+len, count-len, "Current CID       (%d): %d\n", i, cs->bcs[i].at_state.cid);
 		                               ^

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#125: FILE: drivers/isdn/gigaset/proc.c:78:
+		len += scnprintf(buf+len, count-len, "ZSAU state        (%d): %d\n", i, cs->bcs[i].at_state.int_var[VAR_ZSAU]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: drivers/isdn/gigaset/proc.c:78:
+		len += scnprintf(buf+len, count-len, "ZSAU state        (%d): %d\n", i, cs->bcs[i].at_state.int_var[VAR_ZSAU]);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: drivers/isdn/gigaset/proc.c:78:
+		len += scnprintf(buf+len, count-len, "ZSAU state        (%d): %d\n", i, cs->bcs[i].at_state.int_var[VAR_ZSAU]);
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: drivers/isdn/gigaset/proc.c:89:
+static int gigaset_read_proc_atomic(char *buf, char **start, off_t offset,
+				     int count, int *eof, void *data)

CHECK:SPACING: No space is necessary after a cast
#138: FILE: drivers/isdn/gigaset/proc.c:91:
+	struct proc_atomic *pi = (struct proc_atomic *) data;

CHECK:SPACING: No space is necessary after a cast
#149: FILE: drivers/isdn/gigaset/proc.c:102:
+	end = (off_t) count + offset;

CHECK:SPACING: No space is necessary after a cast
#153: FILE: drivers/isdn/gigaset/proc.c:106:
+		count = ((off_t) len > offset) ?

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/isdn/gigaset/proc.c:107:
+			(int) ((off_t) len - offset) : 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/isdn/gigaset/proc.c:118:
+                                     unsigned long count, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/isdn/gigaset/proc.c:118:
+                                     unsigned long count, void *data)$

CHECK:SPACING: No space is necessary after a cast
#167: FILE: drivers/isdn/gigaset/proc.c:120:
+	struct proc_atomic *pi = (struct proc_atomic *) data;

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#171: FILE: drivers/isdn/gigaset/proc.c:124:
+	long int tempval;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#175: FILE: drivers/isdn/gigaset/proc.c:128:
+	if (!(tempbuf = kmalloc(size, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#199: FILE: drivers/isdn/gigaset/proc.c:152:
+	if (tempval < (long) pi->min || tempval > (long) pi->max) {

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#222: FILE: drivers/isdn/gigaset/proc.c:175:
+static struct proc_atomic glob_proc_atomic[]=
                                             ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#223: FILE: drivers/isdn/gigaset/proc.c:176:
+static struct proc_atomic glob_proc_atomic[]=
+{        /* &variable, &callback, min, max, data */

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#257: FILE: drivers/isdn/gigaset/proc.c:210:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#270: FILE: drivers/isdn/gigaset/proc.c:223:
+ *                               /proc/driver/gigaset/DRIVERNAME/MINORNUMBER/CHANNEL/) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc_file"
#294: FILE: drivers/isdn/gigaset/proc.c:247:
+	if (proc_file != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc_file"
#305: FILE: drivers/isdn/gigaset/proc.c:258:
+	if (proc_file != NULL) {

CHECK:SPACING: No space is necessary after a cast
#316: FILE: drivers/isdn/gigaset/proc.c:269:
+	cs->proc_atomic[0].data           = (unsigned long) cs;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc_file"
#322: FILE: drivers/isdn/gigaset/proc.c:275:
+	if (proc_file != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: drivers/isdn/gigaset/proc.c:292:
+^I                              0644,                      /* rw-r--r-- */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: drivers/isdn/gigaset/proc.c:293:
+^I                              common_proc);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc_file"
#342: FILE: drivers/isdn/gigaset/proc.c:295:
+	if (proc_file != NULL) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126659.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 15 warnings, 39 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126659.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
