CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#244: FILE: fs/spufs/context.c:132:
+	if (ctx->state == SPU_STATE_RUNNABLE
+	    || ctx->state == SPU_STATE_LOCKED)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#381: FILE: fs/spufs/file.c:291:
+ * ^ISame as wait_event_interruptible(), except that here$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#386: FILE: fs/spufs/file.c:296:
+#define spufs_wait(wq, condition)					\
+({									\
+	int __ret = 0;							\
+	DEFINE_WAIT(__wait);						\
+	for (;;) {							\
+		prepare_to_wait(&(wq), &__wait, TASK_INTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			spu_release(ctx);				\
+			schedule();					\
+			spu_acquire(ctx);				\
+			continue;					\
+		}							\
+		__ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	finish_wait(&(wq), &__wait);					\
+	__ret;								\
+})

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#887: FILE: fs/spufs/sched.c:1:
+/* sched.c - SPU scheduler.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#909: FILE: fs/spufs/sched.c:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#910: FILE: fs/spufs/sched.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#927: FILE: fs/spufs/sched.c:41:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#928: FILE: fs/spufs/sched.c:42:
+#include <asm/mmu_context.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#933: FILE: fs/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#933: FILE: fs/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#933: FILE: fs/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                                                  ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#951: FILE: fs/spufs/sched.c:65:
+static struct spu_runqueue *spu_runqueues = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#965: FILE: fs/spufs/sched.c:79:
+	BUG_ON(rq->nr_idle <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#966: FILE: fs/spufs/sched.c:80:
+	BUG_ON(list_empty(&rq->idle_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#976: FILE: fs/spufs/sched.c:90:
+	BUG_ON(rq->nr_active <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#977: FILE: fs/spufs/sched.c:91:
+	BUG_ON(list_empty(&rq->active_list));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: fs/spufs/sched.c:114:
+		int best = sched_find_first_bit(rq->prio.bitmap);
+		if (best < MAX_PRIO) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1002: FILE: fs/spufs/sched.c:116:
+			wait_queue_head_t *wq = &rq->prio.waitq[best];
+			wake_up_interruptible_nr(wq, 1);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1018: FILE: fs/spufs/sched.c:132:
+		pr_debug("%s: pid=%d prio=%d\n", __FUNCTION__,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1025: FILE: fs/spufs/sched.c:139:
+	if (!waitqueue_active(wq))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1039: FILE: fs/spufs/sched.c:153:
+	pr_debug("%s: pid=%d SPU=%d\n", __FUNCTION__, current->pid,

WARNING:MEMORY_BARRIER: memory barrier without comment
#1050: FILE: fs/spufs/sched.c:164:
+	mb();

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1056: FILE: fs/spufs/sched.c:170:
+	pr_debug("%s: unbind pid=%d SPU=%d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1092: FILE: fs/spufs/sched.c:206:
+					 __FUNCTION__, spu->pid, spu->number);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1114: FILE: fs/spufs/sched.c:228:
+				/* Fall through. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1117: FILE: fs/spufs/sched.c:231:
+				break;
+			} else {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1120: FILE: fs/spufs/sched.c:234:
+				yield();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1121: FILE: fs/spufs/sched.c:235:
+				if (signal_pending(current)) {
+					return NULL;
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1130: FILE: fs/spufs/sched.c:244:
+				if ((spu = preempt_active(rq)) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'breifly' may be misspelled - perhaps 'briefly'?
#1189: FILE: fs/spufs/sched.c:303:
+ *	The rq->sem is breifly held (inside or outside a
   	               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->state == SPU_STATE_RUNNABLE'
#1229: FILE: fs/spufs/sched.c:343:
+	if ((ctx->state == SPU_STATE_RUNNABLE) &&
+	    (sched_find_first_bit(spu->rq->prio.bitmap) <= current->prio)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1231: FILE: fs/spufs/sched.c:345:
+		pr_debug("%s: yielding SPU %d\n", __FUNCTION__, spu->number);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1244: FILE: fs/spufs/sched.c:358:
+	rq = spu_runqueues = kmalloc(sizeof(struct spu_runqueue), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*spu_runqueues)...) over kmalloc(sizeof(struct spu_runqueue)...)
#1244: FILE: fs/spufs/sched.c:358:
+	rq = spu_runqueues = kmalloc(sizeof(struct spu_runqueue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1246: FILE: fs/spufs/sched.c:360:
+		printk(KERN_WARNING "%s: Unable to allocate runqueues.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1247: FILE: fs/spufs/sched.c:361:
+		       __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1267: FILE: fs/spufs/sched.c:381:
+		pr_debug("%s: adding SPU[%d]\n", __FUNCTION__, spu->number);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1272: FILE: fs/spufs/sched.c:386:
+		printk(KERN_WARNING "%s: No available SPUs.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1272: FILE: fs/spufs/sched.c:386:
+		printk(KERN_WARNING "%s: No available SPUs.\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1285: FILE: fs/spufs/sched.c:399:
+		printk(KERN_WARNING "%s: no runqueues!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1285: FILE: fs/spufs/sched.c:399:
+		printk(KERN_WARNING "%s: no runqueues!\n", __FUNCTION__);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1326: FILE: fs/spufs/spufs.h:59:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1326: FILE: fs/spufs/spufs.h:59:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1326: FILE: fs/spufs/spufs.h:59:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1327: FILE: fs/spufs/spufs.h:60:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1327: FILE: fs/spufs/spufs.h:60:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1327: FILE: fs/spufs/spufs.h:60:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1328: FILE: fs/spufs/spufs.h:61:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1328: FILE: fs/spufs/spufs.h:61:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1328: FILE: fs/spufs/spufs.h:61:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1329: FILE: fs/spufs/spufs.h:62:
+	int (*wbox_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1329: FILE: fs/spufs/spufs.h:62:
+	int (*wbox_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1330: FILE: fs/spufs/spufs.h:63:
+	 u32(*signal1_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1330: FILE: fs/spufs/spufs.h:63:
+	 u32(*signal1_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1330: FILE: fs/spufs/spufs.h:63:
+	 u32(*signal1_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1331: FILE: fs/spufs/spufs.h:64:
+	void (*signal1_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1331: FILE: fs/spufs/spufs.h:64:
+	void (*signal1_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1332: FILE: fs/spufs/spufs.h:65:
+	 u32(*signal2_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1332: FILE: fs/spufs/spufs.h:65:
+	 u32(*signal2_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1332: FILE: fs/spufs/spufs.h:65:
+	 u32(*signal2_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1333: FILE: fs/spufs/spufs.h:66:
+	void (*signal2_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1333: FILE: fs/spufs/spufs.h:66:
+	void (*signal2_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1334: FILE: fs/spufs/spufs.h:67:
+	void (*signal1_type_set) (struct spu_context * ctx, u64 val);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1334: FILE: fs/spufs/spufs.h:67:
+	void (*signal1_type_set) (struct spu_context * ctx, u64 val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1335: FILE: fs/spufs/spufs.h:68:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1335: FILE: fs/spufs/spufs.h:68:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1335: FILE: fs/spufs/spufs.h:68:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1336: FILE: fs/spufs/spufs.h:69:
+	void (*signal2_type_set) (struct spu_context * ctx, u64 val);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1336: FILE: fs/spufs/spufs.h:69:
+	void (*signal2_type_set) (struct spu_context * ctx, u64 val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1337: FILE: fs/spufs/spufs.h:70:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1337: FILE: fs/spufs/spufs.h:70:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1337: FILE: fs/spufs/spufs.h:70:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1338: FILE: fs/spufs/spufs.h:71:
+	 u32(*npc_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1338: FILE: fs/spufs/spufs.h:71:
+	 u32(*npc_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1338: FILE: fs/spufs/spufs.h:71:
+	 u32(*npc_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1339: FILE: fs/spufs/spufs.h:72:
+	void (*npc_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1339: FILE: fs/spufs/spufs.h:72:
+	void (*npc_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1340: FILE: fs/spufs/spufs.h:73:
+	 u32(*status_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1340: FILE: fs/spufs/spufs.h:73:
+	 u32(*status_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1340: FILE: fs/spufs/spufs.h:73:
+	 u32(*status_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1341: FILE: fs/spufs/spufs.h:74:
+	char*(*get_ls) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1341: FILE: fs/spufs/spufs.h:74:
+	char*(*get_ls) (struct spu_context * ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1414: FILE: fs/spufs/switch.c:2118:
+		panic("%s failed on SPU[%d] rc=%d.\n",
+		       __func__, spu->number, rc);

WARNING:SPACING: Unnecessary space before function pointer name
#1496: FILE: include/asm-ppc64/spu.h:137:
+	void (* wbox_callback)(struct spu *spu);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1496: FILE: include/asm-ppc64/spu.h:137:
+	void (* wbox_callback)(struct spu *spu);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#1497: FILE: include/asm-ppc64/spu.h:138:
+	void (* ibox_callback)(struct spu *spu);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1497: FILE: include/asm-ppc64/spu.h:138:
+	void (* ibox_callback)(struct spu *spu);
 	      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1516: FILE: fs/spufs/backing_ops.c:1:
+/* backing_ops.c - query/set operations on saved SPU context.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1535: FILE: fs/spufs/backing_ops.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1536: FILE: fs/spufs/backing_ops.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1551: FILE: fs/spufs/backing_ops.c:36:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1554: FILE: fs/spufs/backing_ops.c:39:
+#include <asm/mmu_context.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch0_cnt == 0'
#1573: FILE: fs/spufs/backing_ops.c:58:
+	if ((ch0_cnt == 0) && !(ch0_data & event) && (ch1_data & event)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1573: FILE: fs/spufs/backing_ops.c:58:
+	if ((ch0_cnt == 0) && !(ch0_data & event) && (ch1_data & event)) {
+		ctx->csa.spu_chnlcnt_RW[0] = 1;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1578: FILE: fs/spufs/backing_ops.c:63:
+static int spu_backing_mbox_read(struct spu_context *ctx, u32 * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1605: FILE: fs/spufs/backing_ops.c:90:
+static int spu_backing_ibox_read(struct spu_context *ctx, u32 * data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->csa.prob.mb_stat_R'
#1634: FILE: fs/spufs/backing_ops.c:119:
+	if ((ctx->csa.prob.mb_stat_R) & 0x00ff00) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1642: FILE: fs/spufs/backing_ops.c:127:
+		BUG_ON(avail != (4 - slot));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1650: FILE: fs/spufs/backing_ops.c:135:
+		/* make sure we get woken up by the interrupt when space
+		   becomes available */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1650: FILE: fs/spufs/backing_ops.c:135:
+		   becomes available */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1773: FILE: fs/spufs/hw_ops.c:1:
+/* hw_ops.c - query/set operations on active SPU context.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1789: FILE: fs/spufs/hw_ops.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1790: FILE: fs/spufs/hw_ops.c:18:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1805: FILE: fs/spufs/hw_ops.c:33:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1808: FILE: fs/spufs/hw_ops.c:36:
+#include <asm/mmu_context.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1811: FILE: fs/spufs/hw_ops.c:39:
+static int spu_hw_mbox_read(struct spu_context *ctx, u32 * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1833: FILE: fs/spufs/hw_ops.c:61:
+static int spu_hw_ibox_read(struct spu_context *ctx, u32 * data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1870: FILE: fs/spufs/hw_ops.c:98:
+		/* make sure we get woken up by the interrupt when space
+		   becomes available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1870: FILE: fs/spufs/hw_ops.c:98:
+		   becomes available */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1987: FILE: include/asm-ppc64/spu_csa.h:245:
+	spinlock_t register_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 66 warnings, 12 checks, 1825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
