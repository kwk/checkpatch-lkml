WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
diff -pur -X /home/devel/roman/nodiff linux-2.5.66-cdev3/drivers/char/misc.c linux-2.5.66-cdev4/drivers/char/misc.c

WARNING:CONST_STRUCT: struct file_operations should normally be const
#88: FILE: drivers/char/misc.c:104:
+	struct file_operations *fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: drivers/char/tty_io.c:2137:
+	if (error == -EBUSY && cdev->cd_fops == &tty_fops) {
[...]
+	} else if (error >= 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#301: FILE: drivers/char/tty_io.c:2141:
+		cdev->cd_data = major = kmalloc(sizeof(*major), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#308: FILE: drivers/char/tty_io.c:2148:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: drivers/char/tty_io.c:2190:
+		struct tty_driver *p;
+		p = list_entry(major->drivers.next, struct tty_driver, tty_drivers);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#391: FILE: drivers/usb/class/usblp.c:386:
+	usb_deregister_dev (usblp->minor);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: drivers/usb/class/usblp.c:933:
+	usb_deregister_dev (usblp->minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#463: FILE: drivers/usb/core/file.c:77:
+int usb_register_dev (struct file_operations *fops, int minor, int *start_minor)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#463: FILE: drivers/usb/core/file.c:77:
+int usb_register_dev (struct file_operations *fops, int minor, int *start_minor)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: drivers/usb/core/file.c:91:
+	dbg ("asking for 1 minors, starting at %d", minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: drivers/usb/core/file.c:129:
+void usb_deregister_dev (int minor)

CHECK:BRACES: braces {} should be used on all arms of this statement
#545: FILE: drivers/usb/core/file.c:137:
+	if (cdev->cd_fops) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#548: FILE: drivers/usb/core/file.c:140:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: drivers/usb/core/file.c:141:
+		printk("usb_deregister_dev: releasing invalid dev %d\n", minor);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usb_deregister_dev', this function's name, in a string
#549: FILE: drivers/usb/core/file.c:141:
+		printk("usb_deregister_dev: releasing invalid dev %d\n", minor);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#563: FILE: drivers/usb/image/mdc800.c:481:
+	retval = usb_register_dev (&mdc800_device_ops, MDC800_DEVICE_MINOR_BASE, &mdc800->minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#572: FILE: drivers/usb/image/mdc800.c:544:
+		usb_deregister_dev (mdc800->minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#622: FILE: drivers/usb/input/hiddev.c:705:
+		usb_deregister_dev (minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#634: FILE: drivers/usb/media/dabusb.c:734:
+	retval = usb_register_dev (&dabusb_fops, DABUSB_MINOR, &devnum);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#643: FILE: drivers/usb/media/dabusb.c:781:
+		usb_deregister_dev (s->devnum);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#655: FILE: drivers/usb/misc/auerswald.c:1959:
+	ret = usb_register_dev (&auerswald_fops, AUER_MINOR_BASE, &dtindex);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: drivers/usb/misc/auerswald.c:2098:
+	usb_deregister_dev (cp->dtindex);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#739: FILE: drivers/usb/usb-skeleton.c:523:
+	retval = usb_register_dev (&skel_fops, USB_SKEL_MINOR_BASE, &minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: drivers/usb/usb-skeleton.c:631:
+	usb_deregister_dev (minor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#757: FILE: drivers/usb/usb-skeleton.c:678:
+	usb_deregister_dev (minor);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#868: FILE: fs/proc/proc_tty.c:81:
+			len += sprintf(page+len, "%-20s /dev/%-8s %3d %7s %s\n",
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#871: FILE: fs/proc/proc_tty.c:84:
+			if (len+begin > off+count)
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#871: FILE: fs/proc/proc_tty.c:84:
+			if (len+begin > off+count)
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#873: FILE: fs/proc/proc_tty.c:86:
+			if (len+begin < off) {
 			       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#913: FILE: include/linux/usb.h:443:
+extern int usb_register_dev(struct file_operations *fops, int minor, int *start_minor);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#913: FILE: include/linux/usb.h:443:
+extern int usb_register_dev(struct file_operations *fops, int minor, int *start_minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#914: FILE: include/linux/usb.h:444:
+extern void usb_deregister_dev(int minor);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 22 warnings, 11 checks, 799 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
