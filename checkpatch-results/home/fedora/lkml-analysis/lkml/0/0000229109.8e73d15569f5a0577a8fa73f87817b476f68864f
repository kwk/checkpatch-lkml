ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: fs/fuse/fuse_i.h:128:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: fs/fuse/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: fs/fuse/file.c:2:
+/*
+    FUSE: Filesystem in Userspace

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#114: FILE: fs/fuse/file.c:13:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: fs/fuse/file.c:30:
+	/* If opening the root node, no lookup has been performed on
+	   it, so the attributes must be refreshed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#131: FILE: fs/fuse/file.c:30:
+	   it, so the attributes must be refreshed */

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/fuse/file.c:33:
+		int err = fuse_do_getattr(inode);
+		if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/fuse/file.c:34:
+^I^I ^Ireturn err;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: fs/fuse/file.c:34:
+^I^I ^Ireturn err;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ff)...) over kmalloc(sizeof(struct fuse_file)...)
#145: FILE: fs/fuse/file.c:44:
+	ff = kmalloc(sizeof(struct fuse_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#167: FILE: fs/fuse/file.c:66:
+	if (!err) {
+		invalidate_inode_pages(inode->i_mapping);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#174: FILE: fs/fuse/file.c:73:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: fs/fuse/file.c:73:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: fs/fuse/file.c:92:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/fuse/file.c:120:
+^I$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#237: FILE: fs/fuse/file.c:136:
+	if (err == -ENOSYS) {

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: fs/fuse/file.c:152:
+^I$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#271: FILE: fs/fuse/file.c:170:
+	if (err == -ENOSYS) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: fs/fuse/file.c:187:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: fs/fuse/file.c:191:
+^I$

CHECK:SPACING: No space is necessary after a cast
#321: FILE: fs/fuse/file.c:220:
+	pos = (loff_t) page->index << PAGE_CACHE_SHIFT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/fuse/file.c:224:
+^I^Iif (res < PAGE_CACHE_SIZE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: fs/fuse/file.c:244:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#363: FILE: fs/fuse/file.c:262:
+	if (!res) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#369: FILE: fs/fuse/file.c:268:
+	}
+	else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#374: FILE: fs/fuse/file.c:273:
+			struct page *page, unsigned offset, size_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: fs/fuse/file.c:285:
+^I$

CHECK:SPACING: No space is necessary after a cast
#387: FILE: fs/fuse/file.c:286:
+	pos = ((loff_t) page->index << PAGE_CACHE_SHIFT) + offset;

CHECK:BRACES: braces {} should be used on all arms of this statement
#392: FILE: fs/fuse/file.c:291:
+		if (res < count) {
[...]
+		} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: fs/fuse/file.c:292:
+			printk("fuse: short write\n");

CHECK:BRACES: Unbalanced braces around else statement
#395: FILE: fs/fuse/file.c:294:
+		} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: fs/fuse/file.c:304:
+			      unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: fs/fuse/file.c:304:
+			      unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#412: FILE: fs/fuse/file.c:311:
+			     unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#412: FILE: fs/fuse/file.c:311:
+			     unsigned offset, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/fuse/file.c:319:
+		loff_t pos = (page->index << PAGE_CACHE_SHIFT) + to;
+		if (pos > i_size_read(inode))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: fs/fuse/file.c:321:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#428: FILE: fs/fuse/file.c:327:
+
+	}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#432: FILE: fs/fuse/file.c:331:
+static struct file_operations fuse_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#443: FILE: fs/fuse/file.c:342:
+static struct address_space_operations fuse_file_aops  = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 19 warnings, 8 checks, 482 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
