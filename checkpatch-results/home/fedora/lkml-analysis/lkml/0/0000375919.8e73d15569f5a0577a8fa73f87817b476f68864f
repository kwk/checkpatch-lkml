ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#62: 
--- a/include/asm-i386/mmu_context.h	Wed Apr 23 17:03:35 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#70: FILE: include/asm-i386/mmu_context.h:48:
+		BUG_ON(cpu_tlbstate[cpu].active_mm != next);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#85: FILE: include/asm-i386/spinlock.h:73:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#86: FILE: include/asm-i386/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#86: FILE: include/asm-i386/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: include/asm-i386/spinlock.h:92:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#99: FILE: include/asm-i386/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#99: FILE: include/asm-i386/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: include/asm-i386/spinlock.h:173:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: include/asm-i386/spinlock.h:181:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#132: FILE: include/linux/aio.h:156:
+#define get_ioctx(kioctx)	do { BUG_ON(atomic_read(&(kioctx)->users) <= 0); atomic_inc(&(kioctx)->users); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#132: FILE: include/linux/aio.h:156:
+#define get_ioctx(kioctx)	do { BUG_ON(atomic_read(&(kioctx)->users) <= 0); atomic_inc(&(kioctx)->users); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kioctx' - possible side-effects?
#132: FILE: include/linux/aio.h:156:
+#define get_ioctx(kioctx)	do { BUG_ON(atomic_read(&(kioctx)->users) <= 0); atomic_inc(&(kioctx)->users); } while (0)

WARNING:LONG_LINE: line length of 170 exceeds 100 columns
#133: FILE: include/linux/aio.h:157:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else BUG_ON(atomic_read(&(kioctx)->users) < 0); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: include/linux/aio.h:157:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else BUG_ON(atomic_read(&(kioctx)->users) < 0); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kioctx' - possible side-effects?
#133: FILE: include/linux/aio.h:157:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else BUG_ON(atomic_read(&(kioctx)->users) < 0); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#146: FILE: include/linux/bio.h:245:
+	BUG_ON(addr & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: include/linux/buffer_head.h:125:
+		BUG_ON(!PagePrivate(page));			\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: include/linux/dcache.h:270:
+		BUG_ON(!atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: include/linux/highmem.h:64:
+	BUG_ON(offset + size > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: include/linux/netdevice.h:797:
+	BUG_ON(!test_bit(__LINK_STATE_RX_SCHED, &dev->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: include/linux/nfs_fs.h:263:
+	BUG_ON(cred && cred->cr_magic != RPCAUTH_CRED_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: include/linux/quotaops.h:47:
+	BUG_ON(!inode->i_sb);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: include/linux/quotaops.h:55:
+		BUG_ON(!inode->i_sb);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#250: FILE: include/linux/skbuff.h:795:
+#define SKB_PAGE_ASSERT(skb) BUG_ON(skb_shinfo(skb)->nr_frags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: include/linux/skbuff.h:796:
+#define SKB_FRAG_ASSERT(skb) BUG_ON(skb_shinfo(skb)->frag_list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: include/linux/skbuff.h:797:
+#define SKB_LINEAR_ASSERT(skb) BUG_ON(skb_is_nonlinear(skb))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#262: FILE: include/linux/skbuff.h:859:
+	BUG_ON(skb->len < skb->data_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: include/linux/skbuff.h:1121:
+	BUG_ON(in_irq());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#285: FILE: include/linux/smp_lock.h:52:
+	BUG_ON(current->lock_depth < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: include/net/irda/vlsi_ir.h:618:
+	BUG_ON((a & ~DMA_MASK_MSTRPAGE)>>24 != MSTRPAGE_VALUE);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#300: FILE: include/net/irda/vlsi_ir.h:618:
+	BUG_ON((a & ~DMA_MASK_MSTRPAGE)>>24 != MSTRPAGE_VALUE);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: include/net/sctp/sm.h:444:
+	BUG_ON(!sctp_add_cmd(seq, verb, obj));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: include/net/tcp.h:1364:
+			BUG_ON(sock_owned_by_user(sk));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: include/rxrpc/call.h:190:
+	BUG_ON(atomic_read(&call->usage)<=0);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#338: FILE: include/rxrpc/call.h:190:
+	BUG_ON(atomic_read(&call->usage)<=0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: include/rxrpc/connection.h:69:
+	BUG_ON(atomic_read(&conn->usage)<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#351: FILE: include/rxrpc/connection.h:69:
+	BUG_ON(atomic_read(&conn->usage)<0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#364: FILE: include/rxrpc/message.h:56:
+	BUG_ON(atomic_read(&msg->usage)<=0);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#364: FILE: include/rxrpc/message.h:56:
+	BUG_ON(atomic_read(&msg->usage)<=0);
 	                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: include/rxrpc/peer.h:72:
+	BUG_ON(atomic_read(&peer->usage)<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#377: FILE: include/rxrpc/peer.h:72:
+	BUG_ON(atomic_read(&peer->usage)<0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: include/rxrpc/transport.h:88:
+	BUG_ON(atomic_read(&trans->usage)<=0);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#390: FILE: include/rxrpc/transport.h:88:
+	BUG_ON(atomic_read(&trans->usage)<=0);
 	                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 35 warnings, 3 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
