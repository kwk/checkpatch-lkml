WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
>    > depmod: *** Unresolved symbols in /lib/modules/2.4.20-pre8/kernel/net/sunrpc/sunrpc.o

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#74: FILE: arch/sparc/kernel/sparc_ksyms.c:214:
+EXPORT_SYMBOL(kmap_atomic);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#75: FILE: arch/sparc/kernel/sparc_ksyms.c:215:
+EXPORT_SYMBOL(kunmap_atomic);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: arch/sparc/mm/highmem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: arch/sparc/mm/highmem.c:16:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: arch/sparc/mm/highmem.c:25:
+		BUG();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#141: FILE: arch/sparc/mm/highmem.c:45:
+	idx = type + KM_TYPE_NR*smp_processor_id();
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#145: FILE: arch/sparc/mm/highmem.c:49:
+#if 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: arch/sparc/mm/highmem.c:56:
+	if (!pte_none(*(kmap_pte+idx)))
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: arch/sparc/mm/highmem.c:57:
+		BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: arch/sparc/mm/highmem.c:59:
+	set_pte(kmap_pte+idx, mk_pte(page, kmap_prot));
 	                ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#157: FILE: arch/sparc/mm/highmem.c:61:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#163: FILE: arch/sparc/mm/highmem.c:67:
+	return (void*) vaddr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#163: FILE: arch/sparc/mm/highmem.c:67:
+	return (void*) vaddr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#168: FILE: arch/sparc/mm/highmem.c:72:
+	unsigned long vaddr = (unsigned long) kvaddr;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#169: FILE: arch/sparc/mm/highmem.c:73:
+	unsigned long idx = type + KM_TYPE_NR*smp_processor_id();
 	                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#175: FILE: arch/sparc/mm/highmem.c:79:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#178: FILE: arch/sparc/mm/highmem.c:82:
+#if 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: arch/sparc/mm/highmem.c:93:
+	pte_clear(kmap_pte+idx);
 	                  ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#191: FILE: arch/sparc/mm/highmem.c:95:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/asm-sparc/highmem.h:33:
+extern void *kmap_high(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/asm-sparc/highmem.h:34:
+extern void kunmap_high(struct page *page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429033.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 9 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429033.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
