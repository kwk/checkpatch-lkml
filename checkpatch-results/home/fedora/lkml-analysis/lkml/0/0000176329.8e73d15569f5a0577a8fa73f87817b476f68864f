WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> > current tree for testing. If there's no major issues on Monday, I'll re-

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#53: 
Description: Rework the soft-timer subsytem to use timerintervals (a new
                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#79: FILE: include/linux/jiffies.h:279:
+#if HZ <= NSEC_PER_SEC && !(NSEC_PER_SEC % HZ)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#81: FILE: include/linux/jiffies.h:281:
+#elif HZ > NSEC_PER_SEC && !(HZ % NSEC_PER_SEC)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#82: FILE: include/linux/jiffies.h:282:
+	return ((nsec_t)j + (HZ / NSEC_PER_SEC) - 1)/(HZ / NSEC_PER_SEC);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: include/linux/jiffies.h:317:
+	nsec_t temp;
+	if (n > jiffies_to_nsecs(MAX_JIFFY_OFFSET))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#109: FILE: include/linux/jiffies.h:319:
+#if HZ <= NSEC_PER_SEC && !(NSEC_PER_SEC % HZ)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#113: FILE: include/linux/jiffies.h:323:
+#elif HZ > NSEC_PER_SEC && !(HZ % NSEC_PER_SEC)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/sched.h:189:
+extern nsec_t FASTCALL(schedule_timeout_nsecs(nsec_t timeout_nsecs));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/sched.h:190:
+extern unsigned long FASTCALL(schedule_timeout_usecs(unsigned long timeout_usecs));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/sched.h:191:
+extern unsigned int FASTCALL(schedule_timeout_msecs(unsigned int timeout_msesc));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/timer.h:69:
+extern int __mod_timer(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/linux/timer.h:71:
+extern void add_timer(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/linux/timer.h:72:
+extern int set_timer_nsecs(struct timer_list *timer, nsec_t expires_nsecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/timer.h:73:
+extern void set_timer_on_nsecs(struct timer_list *timer, nsec_t expires_nsecs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: include/linux/timer.h:74:
+extern void set_timer_on_nsecs(struct timer_list *timer, nsec_t expires_nsecs,
+								int cpu);

CHECK:BIT_MACRO: Prefer using the BIT macro
#239: FILE: kernel/timer.c:67:
+#define TIMERINTERVAL_SIZE (1 << TIMERINTERVAL_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: kernel/timer.c:136:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#272: FILE: kernel/timer.c:141:
+ * propogate the carry and force a wrap when adding the 1.
    ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: kernel/timer.c:165:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: kernel/timer.c:200:
+	unsigned long relative_jiffies = abs_jiffies - jiffies;
+	return nsecs_to_timerintervals_ceiling(do_monotonic_clock() +

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#344: FILE: kernel/timer.c:211:
+#if 0

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#346: FILE: kernel/timer.c:213:
+		static int debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: kernel/timer.c:214:
+		static int debug = 0;
+		if(!((++debug)%10000)) {

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#347: FILE: kernel/timer.c:214:
+		if(!((++debug)%10000)) {
 		              ^

ERROR:SPACING: space required before the open parenthesis '('
#347: FILE: kernel/timer.c:214:
+		if(!((++debug)%10000)) {

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#348: FILE: kernel/timer.c:215:
+			printk("nacc: adding timer to expire at %llu nsecs, %lu tiu\n", timer->expires_nsecs, expires);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#348: FILE: kernel/timer.c:215:
+			printk("nacc: adding timer to expire at %llu nsecs, %lu tiu\n", timer->expires_nsecs, expires);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: kernel/timer.c:364:
+void add_timer(struct timer_list * timer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#429: FILE: kernel/timer.c:371:
+EXPORT_SYMBOL(add_timer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: kernel/timer.c:432:
+	BUG_ON(!timer->function);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#496: FILE: kernel/timer.c:446:
+EXPORT_SYMBOL_GPL(set_timer_nsecs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: kernel/timer.c:459:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: kernel/timer.c:459:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: kernel/timer.c:459:
+  ^Iunsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: kernel/timer.c:461:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#511: FILE: kernel/timer.c:461:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: kernel/timer.c:461:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: kernel/timer.c:461:
+  	BUG_ON(timer_pending(timer) || !timer->function);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#523: FILE: kernel/timer.c:473:
+EXPORT_SYMBOL_GPL(set_timer_on_nsecs);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#538: FILE: kernel/timer.c:625:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'N' may be better as '(N)' to avoid precedence issues
#538: FILE: kernel/timer.c:625:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: kernel/timer.c:635:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: kernel/timer.c:635:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: kernel/timer.c:635:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

CHECK:SPACING: No space is necessary after a cast
#659: FILE: kernel/timer.c:1373:
+	timer.data = (unsigned long) current;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#675: FILE: kernel/timer.c:1389:
+EXPORT_SYMBOL_GPL(schedule_timeout_nsecs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#719: FILE: kernel/timer.c:1433:
+EXPORT_SYMBOL_GPL(schedule_timeout_usecs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#763: FILE: kernel/timer.c:1477:
+EXPORT_SYMBOL_GPL(schedule_timeout_msecs);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 29 warnings, 13 checks, 677 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
