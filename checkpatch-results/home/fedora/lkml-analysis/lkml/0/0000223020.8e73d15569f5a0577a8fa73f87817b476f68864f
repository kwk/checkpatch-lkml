WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: include/linux/ltt-core.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#36: FILE: include/linux/ltt-core.h:2:
+ * linux/include/linux/ltt-core.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#69: FILE: include/linux/ltt-core.h:35:
+/* In the ltt root directory lives the trace control file, used for
+   kernel-user communication. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#69: FILE: include/linux/ltt-core.h:35:
+   kernel-user communication. */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#99: FILE: include/linux/ltt-core.h:65:
+struct ltt_channel_data
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#108: FILE: include/linux/ltt-core.h:74:
+struct ltt_trace_info
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#124: FILE: include/linux/ltt-core.h:90:
+struct ltt_tracer_status
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#131: FILE: include/linux/ltt-core.h:97:
+struct ltt_trace_struct
+{

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#161: FILE: include/linux/ltt-core.h:127:
+extern int ltt_set_trace_config(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/ltt-core.h:127:
+extern int ltt_set_trace_config(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#167: FILE: include/linux/ltt-core.h:133:
+extern void ltt_set_flight_recorder_config(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/ltt-core.h:133:
+extern void ltt_set_flight_recorder_config(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#169: FILE: include/linux/ltt-core.h:135:
+extern int ltt_get_trace_config(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/ltt-core.h:135:
+extern int ltt_get_trace_config(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#175: FILE: include/linux/ltt-core.h:141:
+extern int ltt_get_status(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/ltt-core.h:141:
+extern int ltt_get_status(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: include/linux/ltt-core.h:143:
+extern int ltt_create_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/ltt-core.h:143:
+extern int ltt_create_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#182: FILE: include/linux/ltt-core.h:148:
+extern int ltt_create_owned_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/ltt-core.h:148:
+extern int ltt_create_owned_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#188: FILE: include/linux/ltt-core.h:154:
+extern void ltt_destroy_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: include/linux/ltt-core.h:154:
+extern void ltt_destroy_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: include/linux/ltt-core.h:156:
+extern void ltt_destroy_owners_events(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/linux/ltt-core.h:156:
+extern void ltt_destroy_owners_events(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/ltt-core.h:158:
+extern void ltt_reregister_custom_events(void);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#193: FILE: include/linux/ltt-core.h:159:
+extern int ltt_log_std_formatted_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/ltt-core.h:159:
+extern int ltt_log_std_formatted_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#196: FILE: include/linux/ltt-core.h:162:
+extern int ltt_log_raw_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/ltt-core.h:162:
+extern int ltt_log_raw_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#200: FILE: include/linux/ltt-core.h:166:
+extern int _ltt_log_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/ltt-core.h:166:
+extern int _ltt_log_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#205: FILE: include/linux/ltt-core.h:171:
+extern int ltt_log_event(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/ltt-core.h:171:
+extern int ltt_log_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#208: FILE: include/linux/ltt-core.h:174:
+extern int ltt_valid_trace_handle(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/ltt-core.h:174:
+extern int ltt_valid_trace_handle(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#210: FILE: include/linux/ltt-core.h:176:
+extern int ltt_alloc_trace_handle(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/linux/ltt-core.h:176:
+extern int ltt_alloc_trace_handle(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#212: FILE: include/linux/ltt-core.h:178:
+extern int ltt_free_trace_handle(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/ltt-core.h:178:
+extern int ltt_free_trace_handle(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#214: FILE: include/linux/ltt-core.h:180:
+extern int ltt_free_daemon_handle(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/ltt-core.h:180:
+extern int ltt_free_daemon_handle(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#216: FILE: include/linux/ltt-core.h:182:
+extern void ltt_free_all_handles(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/linux/ltt-core.h:182:
+extern void ltt_free_all_handles(

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#217: FILE: include/linux/ltt-core.h:183:
+	struct task_struct*	task_ptr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: include/linux/ltt-core.h:184:
+extern int ltt_set_buffer_size(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/ltt-core.h:184:
+extern int ltt_set_buffer_size(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#222: FILE: include/linux/ltt-core.h:188:
+extern int ltt_set_n_buffers(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/ltt-core.h:188:
+extern int ltt_set_n_buffers(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#225: FILE: include/linux/ltt-core.h:191:
+extern int ltt_set_default_config(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/ltt-core.h:191:
+extern int ltt_set_default_config(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#227: FILE: include/linux/ltt-core.h:193:
+extern int ltt_syscall_active(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/ltt-core.h:193:
+extern int ltt_syscall_active(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#229: FILE: include/linux/ltt-core.h:195:
+extern void ltt_flight_pause(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/ltt-core.h:195:
+extern void ltt_flight_pause(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#231: FILE: include/linux/ltt-core.h:197:
+extern void ltt_flight_unpause(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/ltt-core.h:197:
+extern void ltt_flight_unpause(

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#244: FILE: include/linux/ltt-core.h:210:
+#define LTT_TRACER_FIRST_EVENT_SIZE   (sizeof(u8) + sizeof(u32) + sizeof(ltt_buffer_start) + sizeof(uint16_t))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#245: FILE: include/linux/ltt-core.h:211:
+#define LTT_TRACER_START_TRACE_EVENT_SIZE   (sizeof(u8) + sizeof(u32) + sizeof(ltt_trace_start) + sizeof(uint16_t))

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#255: FILE: include/linux/ltt-core.h:221:
+	LTT_TRACER_START = LTT_TRACER_MAGIC_NUMBER,	/* Start tracing events using the current configuration */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#257: FILE: include/linux/ltt-core.h:223:
+	LTT_TRACER_CONFIG_DEFAULT,			/* Set the tracer to the default configuration */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#258: FILE: include/linux/ltt-core.h:224:
+	LTT_TRACER_CONFIG_MEMORY_BUFFERS,		/* Set the memory buffers the daemon wants us to use */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#260: FILE: include/linux/ltt-core.h:226:
+	LTT_TRACER_CONFIG_DETAILS,			/* Record the details of the event, or not */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#261: FILE: include/linux/ltt-core.h:227:
+	LTT_TRACER_CONFIG_CPUID,			/* Record the CPUID associated with the event */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#264: FILE: include/linux/ltt-core.h:230:
+	LTT_TRACER_CONFIG_GID,				/* Trace the processes of a given group of users */

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#266: FILE: include/linux/ltt-core.h:232:
+	LTT_TRACER_CONFIG_SYSCALL_EIP_DEPTH,		/* Set the call depth at which the EIP should be fetched on syscall */

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#267: FILE: include/linux/ltt-core.h:233:
+	LTT_TRACER_CONFIG_SYSCALL_EIP_LOWER,		/* Set the lowerbound address from which EIP is recorded on syscall */

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#268: FILE: include/linux/ltt-core.h:234:
+	LTT_TRACER_CONFIG_SYSCALL_EIP_UPPER,		/* Set the upperbound address from which EIP is recorded on syscall */

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#269: FILE: include/linux/ltt-core.h:235:
+	LTT_TRACER_DATA_COMITTED,			/* The daemon has comitted the last trace */
 	                         			                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#276: FILE: include/linux/ltt-core.h:242:
+	LTT_TRACER_GET_BUFFER_CONTROL,			/* Get the buffer control data for the lockless schem*/

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#277: FILE: include/linux/ltt-core.h:243:
+	LTT_TRACER_CONFIG_N_MEMORY_BUFFERS,		/* Set the number of memory buffers the daemon wants us to use */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#280: FILE: include/linux/ltt-core.h:246:
+	LTT_TRACER_GET_ARCH_INFO,			/* Get information about the CPU configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#293: FILE: include/linux/ltt-core.h:259:
+#define LTT_TRACER_LOCKLESS_MIN_BUF_SIZE LTT_CUSTOM_EV_MAX_SIZE + 8192

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#302: FILE: include/linux/ltt-core.h:268:
+#define LTT_PERCPU_TIMER_FREQ  (HZ/10);
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#302: FILE: include/linux/ltt-core.h:268:
+#define LTT_PERCPU_TIMER_FREQ  (HZ/10);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#305: FILE: include/linux/ltt-core.h:271:
+#define waiting_for_cpu_async(trace_handle, cpu) (current_traces[trace_handle].relay_data[cpu].waiting_for_cpu_async)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#306: FILE: include/linux/ltt-core.h:272:
+#define trace_channel_handle(trace_handle, cpu) (current_traces[trace_handle].relay_data[cpu].channel_handle)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#307: FILE: include/linux/ltt-core.h:273:
+#define trace_channel_reader(trace_handle, cpu) (current_traces[trace_handle].relay_data[cpu].reader)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#313: FILE: include/linux/ltt-core.h:279:
+struct ltt_buf_control_info
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#328: FILE: include/linux/ltt-core.h:294:
+struct ltt_buffers_committed
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#335: FILE: include/linux/ltt-core.h:301:
+struct ltt_cpu_mmap_data
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#342: FILE: include/linux/ltt-core.h:308:
+struct ltt_arch_info
+{

WARNING:INLINE: plain inline is preferred over __inline__
#347: FILE: include/linux/ltt-core.h:313:
+extern __inline__ int ltt_set_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#360: FILE: include/linux/ltt-core.h:326:
+extern __inline__ int ltt_clear_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#373: FILE: include/linux/ltt-core.h:339:
+extern __inline__ int ltt_test_bit(int nr, void *addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#396: FILE: include/linux/ltt-core.h:362:
+	if((using_tsc == 1) && cpu_has_tsc)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: include/linux/ltt-core.h:362:
+	if((using_tsc == 1) && cpu_has_tsc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: include/linux/ltt-core.h:370:
+static inline int ltt_create_event(char	*event_type,
+		    char	*event_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: include/linux/ltt-core.h:378:
+static inline int ltt_create_owned_event(char		*event_type,
+			   char		*event_desc,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: include/linux/ltt-core.h:403:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: include/linux/ltt-events.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#473: FILE: include/linux/ltt-events.h:2:
+ * linux/include/linux/ltt-events.h

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#496: FILE: include/linux/ltt-events.h:25:
+#define LTT_PACKED_STRUCT __attribute__ ((packed))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#496: FILE: include/linux/ltt-events.h:25:
+#define LTT_PACKED_STRUCT __attribute__ ((packed))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#502: FILE: include/linux/ltt-events.h:31:
+static inline void ltt_ev(u8 event_id, void* data)

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#526: FILE: include/linux/ltt-events.h:55:
+	LTT_EV_BUFFER_START,	/* Mark the begining of a trace buffer */
 	                    	            ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#538: FILE: include/linux/ltt-events.h:67:
+typedef struct _ltt_trace_start {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#555: FILE: include/linux/ltt-events.h:84:
+typedef struct _ltt_syscall_entry {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#562: FILE: include/linux/ltt-events.h:91:
+typedef struct _ltt_trap_entry {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#564: FILE: include/linux/ltt-events.h:93:
+	u32 address;		/* Address where trap occured */
 	            		                      ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#569: FILE: include/linux/ltt-events.h:98:
+typedef struct _ltt_trap_entry {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#571: FILE: include/linux/ltt-events.h:100:
+	u32 address;		/* Address where trap occured */
 	            		                      ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#591: FILE: include/linux/ltt-events.h:120:
+typedef struct _ltt_irq_entry {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#612: FILE: include/linux/ltt-events.h:141:
+typedef struct _ltt_schedchange {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#617: FILE: include/linux/ltt-events.h:146:
+static inline void ltt_ev_schedchange(task_t * task_out, task_t * task_in)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#617: FILE: include/linux/ltt-events.h:146:
+static inline void ltt_ev_schedchange(task_t * task_out, task_t * task_in)

CHECK:SPACING: No space is necessary after a cast
#621: FILE: include/linux/ltt-events.h:150:
+	sched_event.out = (u32) task_out->pid;

CHECK:SPACING: No space is necessary after a cast
#622: FILE: include/linux/ltt-events.h:151:
+	sched_event.in = (u32) task_in;

CHECK:SPACING: No space is necessary after a cast
#623: FILE: include/linux/ltt-events.h:152:
+	sched_event.out_state = (u32) task_out->state;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#635: FILE: include/linux/ltt-events.h:164:
+};
+typedef struct _ltt_soft_irq {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#635: FILE: include/linux/ltt-events.h:164:
+typedef struct _ltt_soft_irq {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#652: FILE: include/linux/ltt-events.h:181:
+	LTT_EV_PROCESS_FORK,		/* A fork or clone occured */
 	                    		                   ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#653: FILE: include/linux/ltt-events.h:182:
+	LTT_EV_PROCESS_EXIT,		/* An exit occured */
 	                    		           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#654: FILE: include/linux/ltt-events.h:183:
+	LTT_EV_PROCESS_WAIT,		/* A wait occured */
 	                    		          ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#658: FILE: include/linux/ltt-events.h:187:
+};
+typedef struct _ltt_process {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#658: FILE: include/linux/ltt-events.h:187:
+typedef struct _ltt_process {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#673: FILE: include/linux/ltt-events.h:202:
+}
+static inline void ltt_ev_process_exit(u32 data1, u32 data2)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#681: FILE: include/linux/ltt-events.h:210:
+	/* Regardless of whether this trace statement is active or not, these
+	two function must be called, otherwise there will be inconsistencies

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#682: FILE: include/linux/ltt-events.h:211:
+	in the kernel's structures. */

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#693: FILE: include/linux/ltt-events.h:222:
+	LTT_EV_FILE_SYSTEM_EXEC,		/* An exec occured */
 	                        		           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#694: FILE: include/linux/ltt-events.h:223:
+	LTT_EV_FILE_SYSTEM_OPEN,		/* An open occured */
 	                        		           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#695: FILE: include/linux/ltt-events.h:224:
+	LTT_EV_FILE_SYSTEM_CLOSE,		/* A close occured */
 	                         		           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#696: FILE: include/linux/ltt-events.h:225:
+	LTT_EV_FILE_SYSTEM_READ,		/* A read occured */
 	                        		          ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#697: FILE: include/linux/ltt-events.h:226:
+	LTT_EV_FILE_SYSTEM_WRITE,		/* A write occured */
 	                         		           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#698: FILE: include/linux/ltt-events.h:227:
+	LTT_EV_FILE_SYSTEM_SEEK,		/* A seek occured */
 	                        		          ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#699: FILE: include/linux/ltt-events.h:228:
+	LTT_EV_FILE_SYSTEM_IOCTL,		/* An ioctl occured */
 	                         		            ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#700: FILE: include/linux/ltt-events.h:229:
+	LTT_EV_FILE_SYSTEM_SELECT,		/* A select occured */
 	                          		            ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#701: FILE: include/linux/ltt-events.h:230:
+	LTT_EV_FILE_SYSTEM_POLL			/* A poll occured */
 	                       			          ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#703: FILE: include/linux/ltt-events.h:232:
+};
+typedef struct _ltt_file_system {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#703: FILE: include/linux/ltt-events.h:232:
+typedef struct _ltt_file_system {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#709: FILE: include/linux/ltt-events.h:238:
+static inline void ltt_ev_file_system(u8 ev_id, u32 data1, u32 data2, const unsigned char *file_name)

CHECK:SPACING: No space is necessary after a cast
#716: FILE: include/linux/ltt-events.h:245:
+	fs_event.file_name = (char*) file_name;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#716: FILE: include/linux/ltt-events.h:245:
+	fs_event.file_name = (char*) file_name;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#727: FILE: include/linux/ltt-events.h:256:
+};
+typedef struct _ltt_timer {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#727: FILE: include/linux/ltt-events.h:256:
+typedef struct _ltt_timer {

WARNING:TYPO_SPELLING: 'Swaping' may be misspelled - perhaps 'Swapping'?
#749: FILE: include/linux/ltt-events.h:278:
+	LTT_EV_MEMORY_SWAP_IN,		/* Swaping pages in */
 	                      		   ^^^^^^^

WARNING:TYPO_SPELLING: 'Swaping' may be misspelled - perhaps 'Swapping'?
#750: FILE: include/linux/ltt-events.h:279:
+	LTT_EV_MEMORY_SWAP_OUT,		/* Swaping pages out */
 	                       		   ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#754: FILE: include/linux/ltt-events.h:283:
+};
+typedef struct _ltt_memory {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#754: FILE: include/linux/ltt-events.h:283:
+typedef struct _ltt_memory {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#770: FILE: include/linux/ltt-events.h:299:
+	LTT_EV_SOCKET_CALL = 1,	/* A socket call occured */
 	                       	                 ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#775: FILE: include/linux/ltt-events.h:304:
+};
+typedef struct _ltt_socket {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#775: FILE: include/linux/ltt-events.h:304:
+typedef struct _ltt_socket {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#793: FILE: include/linux/ltt-events.h:322:
+	LTT_EV_IPC_CALL = 1,	/* A System V IPC call occured */
 	                    	                       ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#798: FILE: include/linux/ltt-events.h:327:
+};
+typedef struct _ltt_ipc {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#798: FILE: include/linux/ltt-events.h:327:
+typedef struct _ltt_ipc {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#819: FILE: include/linux/ltt-events.h:348:
+};
+typedef struct _ltt_network {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#819: FILE: include/linux/ltt-events.h:348:
+typedef struct _ltt_network {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#834: FILE: include/linux/ltt-events.h:363:
+typedef struct _ltt_buffer_start {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#836: FILE: include/linux/ltt-events.h:365:
+^Iu32 tsc;   ^I^I/* TSC of this buffer, if applicable */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#841: FILE: include/linux/ltt-events.h:370:
+typedef struct _ltt_buffer_end {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#843: FILE: include/linux/ltt-events.h:372:
+^Iu32 tsc;   ^I^I/* TSC of this buffer, if applicable */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#848: FILE: include/linux/ltt-events.h:377:
+/* ***WARNING*** These structures should never be used as is, use the
+   provided custom event creation and logging functions. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#848: FILE: include/linux/ltt-events.h:377:
+   provided custom event creation and logging functions. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#849: FILE: include/linux/ltt-events.h:378:
+typedef struct _ltt_new_event {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#859: FILE: include/linux/ltt-events.h:388:
+typedef struct _ltt_custom {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#866: FILE: include/linux/ltt-events.h:395:
+typedef struct _ltt_change_mask {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#870: FILE: include/linux/ltt-events.h:399:
+
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#903: FILE: init/Kconfig:318:
+config LTT
+	bool "Linux Trace Toolkit support"
+	depends on RELAYFS_FS=y
+	default n
+	---help---
+	  It is possible for the kernel to log important events to a trace
+	  facility. Doing so, enables the use of the generated traces in order
+	  to reconstruct the dynamic behavior of the kernel, and hence the
+	  whole system.
+
+	  The tracing process contains 4 parts :
+	      1) The logging of events by key parts of the kernel.
+	      2) The tracer that keeps the events in a data buffer (uses
+	         relayfs).
+	      3) A trace daemon that interacts with the tracer and is
+	         notified every time there is a certain quantity of data to
+	         read from the tracer.
+	      4) A trace event data decoder that reads the accumulated data
+	         and formats it in a human-readable format.
+
+	  If you say Y, the first two components will be built into the kernel.
+	  Critical parts of the kernel will call upon the kernel tracing
+	  function. The data is then recorded by the tracer if a trace daemon
+	  is running in user-space and has issued a "start" command.
+
+	  In order to enable LTT support you must first select relayfs as
+	  built-in.
+
+	  For more information on kernel tracing, the trace daemon or the event
+	  decoder, please check the following address :
+	       http://www.opersys.com/ltt
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#958: FILE: MAINTAINERS:1368:
+P:	Karim Yaghmour
+M:	karim@opersys.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#960: FILE: MAINTAINERS:1370:
+W:	http://www.opersys.com/LTT
+L:	ltt-dev@listserv.shafik.org

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223020.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 78 warnings, 66 checks, 915 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223020.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
