WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#69: FILE: fs/ntfs/Makefile:9:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.1.25-WIP\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#155: FILE: fs/ntfs/attrib.c:101:
+		ctx_is_temporary = ctx_needs_reset = TRUE;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: fs/ntfs/attrib.c:113:
+		BUG_ON(IS_ERR(ctx->mrec));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: fs/ntfs/attrib.c:115:
+		BUG_ON(!a->non_resident);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/ntfs/attrib.c:132:
+		if (vcn >= allocated_size_vcn || (a->type == ni->type &&
+				a->name_length == ni->name_len &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#187: FILE: fs/ntfs/attrib.c:133:
+				!memcmp((u8*)a + le16_to_cpu(a->name_offset),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: fs/ntfs/attrib.c:138:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: fs/ntfs/attrib.c:164:
+		err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+				CASE_SENSITIVE, vcn, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: fs/ntfs/attrib.c:170:
+		BUG_ON(!ctx->attr->non_resident);

WARNING:TYPO_SPELLING: 'acomplished' may be misspelled - perhaps 'accomplished'?
#263: FILE: fs/ntfs/attrib.c:200:
+		 * is acomplished simply by copying the saved context back over
 		      ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <NInoAttrList>
#268: FILE: fs/ntfs/attrib.c:205:
+		if (NInoAttrList(base_ni)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: fs/ntfs/attrib.c:220:
+					BUG_ON(!ctx->mrec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: fs/ntfs/attrib.c:227:
+				if (old_ctx.base_ntfs_ino &&
+						old_ctx.ntfs_ino !=

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#293: FILE: fs/ntfs/attrib.c:230:
+					ctx->mrec = map_mft_record(

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#306: FILE: fs/ntfs/attrib.c:243:
+						if (PTR_ERR(ctx->mrec) ==

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#310: FILE: fs/ntfs/attrib.c:247:
+						} else

CHECK:BRACES: Unbalanced braces around else statement
#310: FILE: fs/ntfs/attrib.c:247:
+						} else

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'old_ctx.base_ntfs_ino'
#313: FILE: fs/ntfs/attrib.c:250:
+								old_ctx.
+								base_ntfs_ino;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#320: FILE: fs/ntfs/attrib.c:257:
+					old_ctx.attr = (ATTR_RECORD*)(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: fs/ntfs/attrib.c:257:
+					old_ctx.attr = (ATTR_RECORD*)(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#321: FILE: fs/ntfs/attrib.c:258:
+							(u8*)ctx->mrec +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#322: FILE: fs/ntfs/attrib.c:259:
+							((u8*)old_ctx.attr -

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#323: FILE: fs/ntfs/attrib.c:260:
+							(u8*)old_ctx.mrec));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: fs/ntfs/attrib.h:63:
+extern int ntfs_map_runlist_nolock(ntfs_inode *ni, VCN vcn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/ntfs/attrib.h:64:
+extern int ntfs_map_runlist_nolock(ntfs_inode *ni, VCN vcn,
+		ntfs_attr_search_ctx *ctx);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 11 checks, 326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
