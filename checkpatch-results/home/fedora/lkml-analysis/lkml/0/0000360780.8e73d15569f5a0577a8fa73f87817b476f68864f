WARNING:TYPO_SPELLING: 'definately' may be misspelled - perhaps 'definitely'?
#34: 
definately room for more improvements but I don't believe the existing 
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -urN linux-2.5.72/drivers/block/nbd.c linux-2.5.72-new/drivers/block/nbd.c

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#70: FILE: drivers/block/nbd.c:28:
+ * 01-12-6 Fix deadlock condition by making queue locks independant of
                                                         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#75: FILE: drivers/block/nbd.c:33:
+ *   network I/O into seperate kernel threads so request function no longer
                       ^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: drivers/block/nbd.c:86:
+#define atomic_exchange(x,ptr,size) __xchg((x),(ptr),(size))
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: drivers/block/nbd.c:86:
+#define atomic_exchange(x,ptr,size) __xchg((x),(ptr),(size))
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: drivers/block/nbd.c:86:
+#define atomic_exchange(x,ptr,size) __xchg((x),(ptr),(size))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: drivers/block/nbd.c:86:
+#define atomic_exchange(x,ptr,size) __xchg((x),(ptr),(size))
                                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: drivers/block/nbd.c:111:
+	if (debugflags & (flags)) printk(fmt); \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: drivers/block/nbd.c:111:
+	if (debugflags & (flags)) printk(fmt); \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#164: FILE: drivers/block/nbd.c:115:
+#define DEVICE_TO_MINOR(lo) ((int)((lo)-nbd_devs))
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: drivers/block/nbd.c:127:
+#  define request_queue_lock_save(q,flags) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: drivers/block/nbd.c:129:
+#  define request_queue_unlock_restore(q,flags) \
                                         ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#232: FILE: drivers/block/nbd.c:158:
+static uint32_t request_magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#233: FILE: drivers/block/nbd.c:159:
+static uint32_t reply_magic;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#245: FILE: drivers/block/nbd.c:170:
+static unsigned int debugflags = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#247: FILE: drivers/block/nbd.c:172:
+static char *initial_size = NULL;

WARNING:TYPO_SPELLING: 'recieve' may be misspelled - perhaps 'receive'?
#252: FILE: drivers/block/nbd.c:177:
+ * sock_xmit - send or recieve a packet.
                        ^^^^^^^

WARNING:TYPO_SPELLING: 'recieve' may be misspelled - perhaps 'receive'?
#253: FILE: drivers/block/nbd.c:178:
+ * @sock: the socket on which to send or recieve.
                                          ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/block/nbd.c:188:
+static int sock_xmit(struct socket *sock, int send, void *buf, int size,
+		int msg_flags)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#396: FILE: drivers/block/nbd.c:258:
+			minor, __FUNCTION__);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#403: FILE: drivers/block/nbd.c:265:
+			minor, __FUNCTION__, signaled? "signaled": "done");
 			                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#403: FILE: drivers/block/nbd.c:265:
+			minor, __FUNCTION__, signaled? "signaled": "done");
 			                                         ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#403: FILE: drivers/block/nbd.c:265:
+			minor, __FUNCTION__, signaled? "signaled": "done");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#408: FILE: drivers/block/nbd.c:268:
+	return signaled? 0: 1;
 	               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#408: FILE: drivers/block/nbd.c:268:
+	return signaled? 0: 1;
 	                  ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#417: FILE: drivers/block/nbd.c:274:
+ * @uptodate: 1 (true), or 0 (false) depending on if buffer sync'd with store.
     ^^^^^^^^

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#419: FILE: drivers/block/nbd.c:276:
+ * This function must be called with io_request_lock held & interupts disabled.
                                                             ^^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#421: FILE: drivers/block/nbd.c:278:
+static void request_end_while_locked(struct request *req, int uptodate)
                                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#423: FILE: drivers/block/nbd.c:280:
+	if (!end_that_request_first(req, uptodate, req->nr_sectors)) {
 	                                 ^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#423: FILE: drivers/block/nbd.c:280:
+	if (!end_that_request_first(req, uptodate, req->nr_sectors)) {
+		end_that_request_last(req);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/block/nbd.c:286:
+		dprintk(NBD_DEBUG_BLKDEV, "%s[%d]: released request (%p).\n",
+				current->comm, current->pid, req);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#431: FILE: drivers/block/nbd.c:288:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#431: FILE: drivers/block/nbd.c:288:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#433: FILE: drivers/block/nbd.c:290:
+		printk(KERN_ERR DEVICE_NAME ": null current pointer!!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/block/nbd.c:292:
+		dprintk(NBD_DEBUG_BLKDEV, "%s: released request (%p).\n",
+				DEVICE_NAME, req);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#443: FILE: drivers/block/nbd.c:299:
+ * @uptodate: 1 (true), or 0 (false) depending on if buffer sync'd with store.
     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#448: FILE: drivers/block/nbd.c:304:
+static void request_end(struct request *req, int uptodate)
                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#459: FILE: drivers/block/nbd.c:311:
+	request_end_while_locked(req, uptodate);
 	                              ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: drivers/block/nbd.c:336:
+	struct request *req = NULL;
+	spin_lock(&q->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: drivers/block/nbd.c:349:
+	struct request *req = NULL;
+	spin_lock(&q->lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: drivers/block/nbd.c:382:
+	int len;
+	spin_lock(&q->lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: drivers/block/nbd.c:429:
+static inline int sock_recv_bvec(struct socket *sock, struct bio_vec *bvec,
+		int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#686: FILE: drivers/block/nbd.c:443:
+		struct bio_vec *bvec;
+		bio_for_each_segment(bvec, bio, i) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: drivers/block/nbd.c:453:
+static inline int sock_send_bvec(struct socket *sock, struct bio_vec *bvec,
+		int flags)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#736: FILE: drivers/block/nbd.c:480:
+	int msg_eor = (sock->type == SOCK_SEQPACKET)? MSG_EOR: 0;
 	                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#736: FILE: drivers/block/nbd.c:480:
+	int msg_eor = (sock->type == SOCK_SEQPACKET)? MSG_EOR: 0;
 	                                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: drivers/block/nbd.c:489:
+		struct bio_vec *bvec;
+		bio_for_each_segment(bvec, bio, i) {

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#746: FILE: drivers/block/nbd.c:490:
+			flags = ((i + 1 < bio->bi_vcnt) || bio->bi_next)?
 			                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#747: FILE: drivers/block/nbd.c:491:
+				MSG_MORE: msg_eor;
 				        ^

WARNING:INDENTED_LABEL: labels should not be indented
#747: FILE: drivers/block/nbd.c:491:
+				MSG_MORE: msg_eor;

CHECK:SPACING: No space is necessary after a cast
#788: FILE: drivers/block/nbd.c:520:
+	request.from = cpu_to_be64( (u64) req->sector << 9);

ERROR:SPACING: space prohibited after that open parenthesis '('
#788: FILE: drivers/block/nbd.c:520:
+	request.from = cpu_to_be64( (u64) req->sector << 9);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: drivers/block/nbd.c:525:
+	result = sock_xmit(sock, 1, &request, sizeof(request),
+			(REQUEST_CMD(req) == WRITE)? MSG_MORE: 0);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#795: FILE: drivers/block/nbd.c:525:
+			(REQUEST_CMD(req) == WRITE)? MSG_MORE: 0);
 			                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#795: FILE: drivers/block/nbd.c:525:
+			(REQUEST_CMD(req) == WRITE)? MSG_MORE: 0);
 			                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#824: FILE: drivers/block/nbd.c:548:
+		printk(KERN_ERR "nb%d: error sending request %p (%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: drivers/block/nbd.c:549:
+		printk(KERN_ERR "nb%d: error sending request %p (%d).\n",
+				DEVICE_TO_MINOR(lo), req, result);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#828: FILE: drivers/block/nbd.c:551:
 	}
+	else if (result == 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#831: FILE: drivers/block/nbd.c:554:
+		printk("nb%d: write closed on request %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/block/nbd.c:555:
+		printk("nb%d: write closed on request %p\n",
+				DEVICE_TO_MINOR(lo), req);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#881: FILE: drivers/block/nbd.c:574:
+		printk(KERN_ERR "nb%d: error receiving reply (%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: drivers/block/nbd.c:575:
+		printk(KERN_ERR "nb%d: error receiving reply (%d).\n",
+				minor, result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#886: FILE: drivers/block/nbd.c:579:
+		printk("nb%d: read reply closed.\n", minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#891: FILE: drivers/block/nbd.c:584:
+		printk(KERN_ERR "nb%d: wrong reply magic.\n", minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/block/nbd.c:592:
+			dprintk(NBD_DEBUG_RX, "nb%d: unexpected reply %p\n",
+					minor, req);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#920: FILE: drivers/block/nbd.c:594:
 		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#920: FILE: drivers/block/nbd.c:594:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#923: FILE: drivers/block/nbd.c:597:
+			printk(KERN_ERR "nb%d: unexpected reply!\n", minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#939: FILE: drivers/block/nbd.c:603:
+		printk(KERN_ERR "nb%d: request %p, remote error (%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: drivers/block/nbd.c:604:
+		printk(KERN_ERR "nb%d: request %p, remote error (%d).\n",
+				minor, *req, lo->harderror);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#947: FILE: drivers/block/nbd.c:611:
+			printk(KERN_ERR "nb%d: request %p, error receiving data (%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: drivers/block/nbd.c:612:
+			printk(KERN_ERR "nb%d: request %p, error receiving data (%d).\n",
+					minor, *req, result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#950: FILE: drivers/block/nbd.c:614:
+			printk(KERN_ERR "nb%d: request %p, read data closed.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: drivers/block/nbd.c:615:
+			printk(KERN_ERR "nb%d: request %p, read data closed.\n",
+					minor, *req);

CHECK:BRACES: Unbalanced braces around else statement
#952: FILE: drivers/block/nbd.c:616:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: drivers/block/nbd.c:618:
+			dprintk(NBD_DEBUG_RX, "nb%d: request %p, received reply\n",
+					minor, *req);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1014: FILE: drivers/block/nbd.c:631:
+	}
+	else if (result == 0) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1085: FILE: drivers/block/nbd.c:669:
+	BUG_ON(atomic_read(&lo->semalock.count) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1088: FILE: drivers/block/nbd.c:672:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s called.\n",
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1088: FILE: drivers/block/nbd.c:672:
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: drivers/block/nbd.c:692:
+	BUG_ON(atomic_read(&lo->semalock.count) != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1139: FILE: drivers/block/nbd.c:694:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s called.\n", minor, __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: drivers/block/nbd.c:697:
+		dprintk(NBD_DEBUG_SESSION, "nb%d: %s: trying to connect\n",
+				minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1142: FILE: drivers/block/nbd.c:697:
+				minor, __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: drivers/block/nbd.c:707:
+		dprintk(NBD_DEBUG_SESSION, "nb%d: %s: connection established\n",
+				minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1152: FILE: drivers/block/nbd.c:707:
+				minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1162: FILE: drivers/block/nbd.c:716:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s: succeeded.\n", minor, __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: drivers/block/nbd.c:734:
+		dprintk(NBD_DEBUG_THREADS, "%s[%d]: SIGKILL unblocked.\n",
+				current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1216: FILE: drivers/block/nbd.c:754:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: started.\n",
+			current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: drivers/block/nbd.c:792:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: ending.\n",
+			current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: drivers/block/nbd.c:806:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: called %s (flags=%x)\n",
+			current->comm, current->pid, __FUNCTION__, lo->flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1268: FILE: drivers/block/nbd.c:806:
+			current->comm, current->pid, __FUNCTION__, lo->flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1295: FILE: drivers/block/nbd.c:833:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: started.\n",
+			current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1307: FILE: drivers/block/nbd.c:845:
+		dprintk(NBD_DEBUG_RX, "nb%d: received reply, req=%p\n",
+				DEVICE_TO_MINOR(lo), req);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1309: FILE: drivers/block/nbd.c:847:
+			request_end(req, req->errors? 0: 1);
 			                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1309: FILE: drivers/block/nbd.c:847:
+			request_end(req, req->errors? 0: 1);
 			                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1313: FILE: drivers/block/nbd.c:851:
+		printk("%s[%d]: signaled to exit (state=%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: drivers/block/nbd.c:852:
+		printk("%s[%d]: signaled to exit (state=%ld)\n",
+				current->comm, current->pid, current->state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: drivers/block/nbd.c:855:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: ending.\n",
+			current->comm, current->pid);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#1338: FILE: drivers/block/nbd.c:876:
+ * Invoked as a seperate kernel thread to process the transmit queue for
                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1360: FILE: drivers/block/nbd.c:898:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: started.\n",
+			current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: drivers/block/nbd.c:919:
+				dprintk(NBD_DEBUG_TX,
+						"nb%d: lost request %p???\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1388: FILE: drivers/block/nbd.c:926:
+		dprintk(NBD_DEBUG_TX, "nb%d: sent request %p(%s@%llu,%luB)\n",
+				minor, req,

CHECK:SPACING: No space is necessary after a cast
#1390: FILE: drivers/block/nbd.c:928:
+				(u64) req->sector << 9,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: drivers/block/nbd.c:940:
+		dprintk(NBD_DEBUG_TX, "nb%d: re-tx-queued request %p\n",
+				minor, req);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1407: FILE: drivers/block/nbd.c:945:
+		printk("%s[%d]: signaled to exit (state=%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: drivers/block/nbd.c:946:
+		printk("%s[%d]: signaled to exit (state=%ld)\n",
+				current->comm, current->pid, current->state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: drivers/block/nbd.c:949:
+	dprintk(NBD_DEBUG_THREADS, "%s[%d]: ending.\n",
+			current->comm, current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: drivers/block/nbd.c:968:
+	dprintk(NBD_DEBUG_THREADS, "nb%d: %s[%d] called %s.\n",
+			DEVICE_TO_MINOR(lo), current->comm, current->pid,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1431: FILE: drivers/block/nbd.c:969:
+			__FUNCTION__);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1444: FILE: drivers/block/nbd.c:982:
+	rv = kernel_thread(fn, lo, CLONE_FS|CLONE_FILES);
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: drivers/block/nbd.c:994:
+	dprintk(NBD_DEBUG_THREADS, "nb%d: %s[%d] called %s.\n",
+			DEVICE_TO_MINOR(lo), current->comm, current->pid,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1457: FILE: drivers/block/nbd.c:995:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1477: FILE: drivers/block/nbd.c:1015:
+			DEVICE_TO_MINOR(lo), __FUNCTION__, signaled);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1491: FILE: drivers/block/nbd.c:1029:
+		printk(DEVICE_NAME ": error creating socket: %d\n", rv);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1497: FILE: drivers/block/nbd.c:1035:
+		printk(DEVICE_NAME ": error connecting to 0x%X:%d (%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: drivers/block/nbd.c:1036:
+		printk(DEVICE_NAME ": error connecting to 0x%X:%d (%d).\n",
+				ntohl(sin->sin_addr.s_addr),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1514: FILE: drivers/block/nbd.c:1052:
+	rv = sock_xmit(sock, 0, svrinfo->initpwd, sizeof(svrinfo->initpwd),
+			MSG_WAITALL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1518: FILE: drivers/block/nbd.c:1056:
+		printk(DEVICE_NAME ": bad handshake: expecting \"%s\", got \"%.8s\"!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handshake', this function's name, in a string
#1518: FILE: drivers/block/nbd.c:1056:
+		printk(DEVICE_NAME ": bad handshake: expecting \"%s\", got \"%.8s\"!\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1519: FILE: drivers/block/nbd.c:1057:
+		printk(DEVICE_NAME ": bad handshake: expecting \"%s\", got \"%.8s\"!\n",
+				initpwd, svrinfo->initpwd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1525: FILE: drivers/block/nbd.c:1063:
+	rv = sock_xmit(sock, 0, svrinfo->magic, sizeof(svrinfo->magic),
+			MSG_WAITALL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1529: FILE: drivers/block/nbd.c:1067:
+		printk(DEVICE_NAME ": bad handshake: wrong magic (got 0x%llx)!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handshake', this function's name, in a string
#1529: FILE: drivers/block/nbd.c:1067:
+		printk(DEVICE_NAME ": bad handshake: wrong magic (got 0x%llx)!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1530: FILE: drivers/block/nbd.c:1068:
+		printk(DEVICE_NAME ": bad handshake: wrong magic (got 0x%llx)!\n",
+				*((u64 *)svrinfo->magic));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1536: FILE: drivers/block/nbd.c:1074:
+	rv = sock_xmit(sock, 0, &svrinfo->size, sizeof(svrinfo->size),
+			MSG_WAITALL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1540: FILE: drivers/block/nbd.c:1078:
+	printk(DEVICE_NAME ": server says size is %lld bytes.\n", svrinfo->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1544: FILE: drivers/block/nbd.c:1082:
+	rv = sock_xmit(sock, 0, svrinfo->zeros, sizeof(svrinfo->zeros),
+			MSG_WAITALL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1551: FILE: drivers/block/nbd.c:1089:
+	if (rv < 0) return rv;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1567: FILE: drivers/block/nbd.c:1105:
+	lo->closed = (RCV_SHUTDOWN|SEND_SHUTDOWN);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1571: FILE: drivers/block/nbd.c:1109:
+		struct sock *sk = sock->sk;
+		sock->sk = NULL;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1605: FILE: drivers/block/nbd.c:1143:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1605: FILE: drivers/block/nbd.c:1143:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1630: FILE: drivers/block/nbd.c:1168:
+	BUG_ON(lo->magic != LO_MAGIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1636: FILE: drivers/block/nbd.c:1174:
+	dprintk(NBD_DEBUG_IOCTL, "nb%d: %s called\n",
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1636: FILE: drivers/block/nbd.c:1174:
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1640: FILE: drivers/block/nbd.c:1178:
+			printk("nb%d: NBD_CLEAR_QUEUE ioctl invoked while RX active, upgrade tools!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1641: FILE: drivers/block/nbd.c:1179:
+			printk("nb%d: NBD_CLEAR_QUEUE ioctl invoked while RX active, upgrade tools!\n",
+					DEVICE_TO_MINOR(lo));

CHECK:BRACES: Unbalanced braces around else statement
#1642: FILE: drivers/block/nbd.c:1180:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1650: FILE: drivers/block/nbd.c:1188:
+			printk("nb%d: NBD_CLEAR_QUEUE ioctl invoked while TX active, upgrade tools!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1651: FILE: drivers/block/nbd.c:1189:
+			printk("nb%d: NBD_CLEAR_QUEUE ioctl invoked while TX active, upgrade tools!\n",
+					DEVICE_TO_MINOR(lo));

CHECK:BRACES: Unbalanced braces around else statement
#1652: FILE: drivers/block/nbd.c:1190:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1663: FILE: drivers/block/nbd.c:1201:
+		dprintk(NBD_DEBUG_IOCTL,
+				"nb%d: %s cleared %d requests.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1664: FILE: drivers/block/nbd.c:1202:
+				DEVICE_TO_MINOR(lo), __FUNCTION__, ncleared);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1669: FILE: drivers/block/nbd.c:1207:
+	if (lo->rx_thread.task || lo->tx_thread.task)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1671: FILE: drivers/block/nbd.c:1209:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1684: FILE: drivers/block/nbd.c:1222:
+	dprintk(NBD_DEBUG_IOCTL,
+			"nb%d: %s ended %d requests.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1685: FILE: drivers/block/nbd.c:1223:
+			DEVICE_TO_MINOR(lo), __FUNCTION__, ncleared);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1709: FILE: drivers/block/nbd.c:1247:
+		dprintk(NBD_DEBUG_SESSION,
+				"nb%d: %s moved %d requests from rx queue\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1710: FILE: drivers/block/nbd.c:1248:
+				DEVICE_TO_MINOR(lo), __FUNCTION__, rv);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1718: FILE: drivers/block/nbd.c:1256:
+	if (lo->closed != (RCV_SHUTDOWN|SEND_SHUTDOWN))
 	                               ^

WARNING:TYPO_SPELLING: 'sematics' may be misspelled - perhaps 'semantics'?
#1741: FILE: drivers/block/nbd.c:1279:
+ * This must implement old NBD_SET_SOCK sematics...
                                         ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1795: FILE: drivers/block/nbd.c:1333:
+	dprintk(NBD_DEBUG_IOCTL,
+			"nb%d: %s descriptor %d, returning %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1796: FILE: drivers/block/nbd.c:1334:
+			DEVICE_TO_MINOR(lo), __FUNCTION__, (int)arg, rv);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1836: FILE: drivers/block/nbd.c:1374:
+	lo->closed = (RCV_SHUTDOWN|SEND_SHUTDOWN);
 	                          ^

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#1869: FILE: drivers/block/nbd.c:1407:
+ * Note: This function is meant for backward compatability with oldstyle
                                              ^^^^^^^^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1880: FILE: drivers/block/nbd.c:1418:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s called.\n", minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1899: FILE: drivers/block/nbd.c:1437:
+		minor, __FUNCTION__, rv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1910: FILE: drivers/block/nbd.c:1448:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s called\n",
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1910: FILE: drivers/block/nbd.c:1448:
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1913: FILE: drivers/block/nbd.c:1451:
+	signaled_ss = signaled_tx = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1921: FILE: drivers/block/nbd.c:1459:
+		dprintk(NBD_DEBUG_SESSION, "nb%d: disabling restart\n",
+				DEVICE_TO_MINOR(lo));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1925: FILE: drivers/block/nbd.c:1463:
+	managed = lo->ss_thread.task? 1: 0;
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1925: FILE: drivers/block/nbd.c:1463:
+	managed = lo->ss_thread.task? 1: 0;
 	                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1938: FILE: drivers/block/nbd.c:1476:
+	if (managed) {
[...]
+	else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1941: FILE: drivers/block/nbd.c:1479:
+			DEVICE_TO_MINOR(lo), __FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1944: FILE: drivers/block/nbd.c:1482:
+	}
+	else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1955: FILE: drivers/block/nbd.c:1493:
+	dprintk(NBD_DEBUG_SESSION, "nb%d: %s returning %d\n",
+			DEVICE_TO_MINOR(lo), __FUNCTION__, rv);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1955: FILE: drivers/block/nbd.c:1493:
+			DEVICE_TO_MINOR(lo), __FUNCTION__, rv);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1975: FILE: drivers/block/nbd.c:1513:
+	dprintk(NBD_DEBUG_BLKDEV, DEVICE_NAME ": %s(%p) called\n",
+			__FUNCTION__, q);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1975: FILE: drivers/block/nbd.c:1513:
+			__FUNCTION__, q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1980: FILE: drivers/block/nbd.c:1518:
+		dprintk(NBD_DEBUG_BLKDEV, DEVICE_NAME ": got request (%p)\n",
+				req);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1986: FILE: drivers/block/nbd.c:1524:
+		BUG_ON(lo->magic != LO_MAGIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1988: FILE: drivers/block/nbd.c:1526:
+			printk(KERN_ERR DEVICE_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1995: FILE: drivers/block/nbd.c:1533:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2004: FILE: drivers/block/nbd.c:1542:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2010: FILE: drivers/block/nbd.c:1548:
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2016: FILE: drivers/block/nbd.c:1554:
+		dprintk(NBD_DEBUG_BLKDEV, "nb%d: enqueuing tx request (%p)\n",
+				minor, req);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2030: FILE: drivers/block/nbd.c:1568:
+	dprintk(NBD_DEBUG_BLKDEV, DEVICE_NAME ": %s(%p) returning\n",
+			__FUNCTION__, q);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2030: FILE: drivers/block/nbd.c:1568:
+			__FUNCTION__, q);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2032: FILE: drivers/block/nbd.c:1570:
+	return;
+}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2036: FILE: drivers/block/nbd.c:1574:
+#if 0

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2044: FILE: drivers/block/nbd.c:1582:
+				__FUNCTION__, bdev->bd_inode->i_size, size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2050: FILE: drivers/block/nbd.c:1588:
+				__FUNCTION__, bdev->bd_block_size, block_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2056: FILE: drivers/block/nbd.c:1594:
+				__FUNCTION__, bdev->bd_inode->i_blkbits,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2074: FILE: drivers/block/nbd.c:1612:
+	BUG_ON(lo->magic != LO_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2075: FILE: drivers/block/nbd.c:1613:
+	BUG_ON(file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#2075: FILE: drivers/block/nbd.c:1613:
+	BUG_ON(file == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2092: FILE: drivers/block/nbd.c:1630:
+			__FUNCTION__, inode, file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2097: FILE: drivers/block/nbd.c:1635:
+	dprintk(NBD_DEBUG_OPEN, "nb%d: %s[%d] called %s(%p,%p).\n",
+			minor, current->comm, current->pid,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2098: FILE: drivers/block/nbd.c:1636:
+			__FUNCTION__, inode, file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2112: FILE: drivers/block/nbd.c:1650:
+		dprintk(NBD_DEBUG_OPEN, "nb%d: %s: ready, refcnt=%d.\n",
+				minor, __FUNCTION__, atomic_read(&lo->refcnt));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2112: FILE: drivers/block/nbd.c:1650:
+				minor, __FUNCTION__, atomic_read(&lo->refcnt));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2117: FILE: drivers/block/nbd.c:1655:
+	dprintk(NBD_DEBUG_OPEN, "nb%d: %s: not ready.\n",
+			minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2117: FILE: drivers/block/nbd.c:1655:
+			minor, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2122: FILE: drivers/block/nbd.c:1660:
+				minor, __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2147: FILE: drivers/block/nbd.c:1685:
+		bd_set_size(inode->i_bdev, get_capacity(lo->disk) << 9,
+				NBD_BLKSIZE(lo));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2150: FILE: drivers/block/nbd.c:1688:
+	dprintk(NBD_DEBUG_OPEN, "nb%d: %s: returning %d.\n",
+			minor, __FUNCTION__, rv);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2150: FILE: drivers/block/nbd.c:1688:
+			minor, __FUNCTION__, rv);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2167: FILE: drivers/block/nbd.c:1705:
+		__FUNCTION__, inode, file);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#2172: FILE: drivers/block/nbd.c:1710:
+		printk(KERN_ALERT "nb%d: %s: refcount(%d) <= 0\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2173: FILE: drivers/block/nbd.c:1711:
+		printk(KERN_ALERT "nb%d: %s: refcount(%d) <= 0\n",
+				minor, __FUNCTION__, refcnt);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2173: FILE: drivers/block/nbd.c:1711:
+				minor, __FUNCTION__, refcnt);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2176: FILE: drivers/block/nbd.c:1714:
+		int running = 0;
+		spin_lock(&lo->lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2186: FILE: drivers/block/nbd.c:1724:
+			BUG_ON(nbd_qsys_len(&lo->rx_queue) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2187: FILE: drivers/block/nbd.c:1725:
+			BUG_ON(nbd_qsys_len(&lo->tx_queue) != 0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2191: FILE: drivers/block/nbd.c:1729:
+	}
+	else if (atomic_dec_and_test(&lo->refcnt)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2198: FILE: drivers/block/nbd.c:1736:
+^Idprintk(NBD_DEBUG_RELEASE, "nb%d: %s returning (refcnt %d)\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2199: FILE: drivers/block/nbd.c:1737:
+		minor, __FUNCTION__, atomic_read(&lo->refcnt));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2213: FILE: drivers/block/nbd.c:1751:
+	u64 oldsize;
+	oldsize = lo->bytesize;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2218: FILE: drivers/block/nbd.c:1756:
+	dprintk(NBD_DEBUG_IOCTL, "nb%d: %s: size now %llu\n",
+			DEVICE_TO_MINOR(lo), __FUNCTION__, size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2218: FILE: drivers/block/nbd.c:1756:
+			DEVICE_TO_MINOR(lo), __FUNCTION__, size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'arg < 512'
#2228: FILE: drivers/block/nbd.c:1766:
+	if ((arg & (arg - 1)) || (arg < 512) || (arg > PAGE_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'arg > PAGE_SIZE'
#2228: FILE: drivers/block/nbd.c:1766:
+	if ((arg & (arg - 1)) || (arg < 512) || (arg > PAGE_SIZE))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2281: FILE: drivers/block/nbd.c:1819:
+	printk(KERN_INFO "nb%d:", DEVICE_TO_MINOR(lo));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2282: FILE: drivers/block/nbd.c:1820:
+	printk(" refcnt=%d", atomic_read(&lo->refcnt));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2283: FILE: drivers/block/nbd.c:1821:
+	printk(" flags=0x%x", lo->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2284: FILE: drivers/block/nbd.c:1822:
+	printk(" harderror=%d", lo->harderror);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2285: FILE: drivers/block/nbd.c:1823:
+	printk(" q-loops=%llu", qhandler_loops);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2286: FILE: drivers/block/nbd.c:1824:
+	printk(" reqsin=%llu", requests_in);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2287: FILE: drivers/block/nbd.c:1825:
+	printk(" reqsout=%llu", requests_out);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2288: FILE: drivers/block/nbd.c:1826:
+	printk(" rx=%p(%d)", lo->rx_thread.task, lo->rx_queue.len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2289: FILE: drivers/block/nbd.c:1827:
+	printk(" tx=%p(%d)", lo->tx_thread.task, lo->tx_queue.len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2290: FILE: drivers/block/nbd.c:1828:
+	printk(" ss=%p", lo->ss_thread.task);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2291: FILE: drivers/block/nbd.c:1829:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2337: FILE: drivers/block/nbd.c:1875:
+	dprintk(NBD_DEBUG_IOCTL,
+			"nb%d: %s[%d] called %s: cmd=%s(0x%x) arg=%lu.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2338: FILE: drivers/block/nbd.c:1876:
+			minor, current->comm, current->pid, __FUNCTION__,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2349: FILE: drivers/block/nbd.c:1887:
+                return nbd_disconnect(lo);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2349: FILE: drivers/block/nbd.c:1887:
+                return nbd_disconnect(lo);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2358: FILE: drivers/block/nbd.c:1896:
+			struct sockaddr_in sin;
+			rv = copy_from_user(&sin, (void *)arg, sizeof(sin))?

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#2358: FILE: drivers/block/nbd.c:1896:
+			rv = copy_from_user(&sin, (void *)arg, sizeof(sin))?
 			                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2359: FILE: drivers/block/nbd.c:1897:
+				-EFAULT: nbd_set_sin(lo, &sin);
 				       ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#2363: FILE: drivers/block/nbd.c:1901:
+		rv = copy_to_user((void *)arg, &lo->sin, sizeof(lo->sin))?
 		                                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2364: FILE: drivers/block/nbd.c:1902:
+			-EFAULT: 0;
 			       ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2393: FILE: drivers/block/nbd.c:1931:
+			set_disk_ro(lo->disk, (arg & NBD_READ_ONLY)? 1: 0);
 			                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2393: FILE: drivers/block/nbd.c:1931:
+			set_disk_ro(lo->disk, (arg & NBD_READ_ONLY)? 1: 0);
 			                                              ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2410: FILE: drivers/block/nbd.c:1948:
+			minor, __FUNCTION__, cmd);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2417: FILE: drivers/block/nbd.c:1955:
+static struct block_device_operations nbd_fops =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2418: FILE: drivers/block/nbd.c:1956:
+static struct block_device_operations nbd_fops =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#2419: FILE: drivers/block/nbd.c:1957:
+	owner:			THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2420: FILE: drivers/block/nbd.c:1958:
+	open:			nbd_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#2420: FILE: drivers/block/nbd.c:1958:
+	open:			nbd_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2421: FILE: drivers/block/nbd.c:1959:
+	release:		nbd_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2421: FILE: drivers/block/nbd.c:1959:
+	release:		nbd_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2422: FILE: drivers/block/nbd.c:1960:
+	ioctl:			nbd_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2422: FILE: drivers/block/nbd.c:1960:
+	ioctl:			nbd_ioctl,

WARNING:TYPO_SPELLING: 'Interupted' may be misspelled - perhaps 'Interrupted'?
#2442: FILE: drivers/block/nbd.c:1980:
+		return "Interupted";
 		        ^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2461: FILE: drivers/block/nbd.c:1999:
+^I^I                        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2461: FILE: drivers/block/nbd.c:1999:
+static int nbd_debug_read_proc(char *page, char **start, off_t offset,
+		                        int count, int *eof, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2471: FILE: drivers/block/nbd.c:2009:
+static int nbd_debug_write_proc(struct file *file, const char *buffer,
+		unsigned long count, void *data)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#2477: FILE: drivers/block/nbd.c:2015:
+	if (sscanf(buffer, "%x", &newflags) != 1)
+		return -EINVAL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2479: FILE: drivers/block/nbd.c:2017:
+	printk(KERN_INFO DEVICE_NAME ": changing debugflags to 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2480: FILE: drivers/block/nbd.c:2018:
+	printk(KERN_INFO DEVICE_NAME ": changing debugflags to 0x%x\n",
+			newflags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2487: FILE: drivers/block/nbd.c:2025:
+^I^I                        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2487: FILE: drivers/block/nbd.c:2025:
+static int nbd_totals_read_proc(char *page, char **start, off_t offset,
+		                        int count, int *eof, void *data)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2499: FILE: drivers/block/nbd.c:2037:
+^I^I                        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2499: FILE: drivers/block/nbd.c:2037:
+static int nbd_device_read_proc(char *page, char **start, off_t offset,
+		                        int count, int *eof, void *data)

WARNING:CONST_STRUCT: struct proto_ops should normally be const
#2525: FILE: drivers/block/nbd.c:2063:
+		struct proto_ops *ops = sock->ops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2526: FILE: drivers/block/nbd.c:2064:
+		struct proto_ops *ops = sock->ops;
+		n = sizeof(sin);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2544: FILE: drivers/block/nbd.c:2082:
+	sspid = (lo->ss_thread.task)? lo->ss_thread.task->pid: 0;
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2544: FILE: drivers/block/nbd.c:2082:
+	sspid = (lo->ss_thread.task)? lo->ss_thread.task->pid: 0;
 	                                                     ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2545: FILE: drivers/block/nbd.c:2083:
+	rxpid = (lo->rx_thread.task)? lo->rx_thread.task->pid: 0;
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2545: FILE: drivers/block/nbd.c:2083:
+	rxpid = (lo->rx_thread.task)? lo->rx_thread.task->pid: 0;
 	                                                     ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2546: FILE: drivers/block/nbd.c:2084:
+	txpid = (lo->tx_thread.task)? lo->tx_thread.task->pid: 0;
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2546: FILE: drivers/block/nbd.c:2084:
+	txpid = (lo->tx_thread.task)? lo->tx_thread.task->pid: 0;
 	                                                     ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#2563: FILE: drivers/block/nbd.c:2101:
+static struct proc_dir_entry *proc_debug = NULL;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2567: FILE: drivers/block/nbd.c:2105:
+	proc_debug = create_proc_entry("debugflags", S_IFREG|S_IRUSR|S_IWUSR,
 	                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2567: FILE: drivers/block/nbd.c:2105:
+	proc_debug = create_proc_entry("debugflags", S_IFREG|S_IRUSR|S_IWUSR,
 	                                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#2567: FILE: drivers/block/nbd.c:2105:
+	proc_debug = create_proc_entry("debugflags", S_IFREG|S_IRUSR|S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2568: FILE: drivers/block/nbd.c:2106:
+	proc_debug = create_proc_entry("debugflags", S_IFREG|S_IRUSR|S_IWUSR,
+			proc_array);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2595: FILE: drivers/block/nbd.c:2133:
+	create_proc_read_entry("totals", 0, proc_array,
+			nbd_totals_read_proc, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2602: FILE: drivers/block/nbd.c:2140:
+		create_proc_read_entry(devname, 0, proc_array,
+				nbd_device_read_proc, nbd_devs + i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2624: FILE: drivers/block/nbd.c:2162:
+ * And here should be modules and kernel interface $

WARNING:LINE_SPACING: Missing a blank line after declarations
#2631: FILE: drivers/block/nbd.c:2169:
+	struct gendisk *disk = alloc_disk(1);
+	if (disk) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2633: FILE: drivers/block/nbd.c:2171:
+		int minor = DEVICE_TO_MINOR(dev);
+		disk->major = NBD_MAJOR;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2661: FILE: drivers/block/nbd.c:2199:
+	dev->closed = (RCV_SHUTDOWN|SEND_SHUTDOWN);
 	                           ^

WARNING:NAKED_SSCANF: unchecked sscanf return value
#2685: FILE: drivers/block/nbd.c:2223:
+		sscanf(s, "%hu", &port);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#2685: FILE: drivers/block/nbd.c:2223:
+		sscanf(s, "%hu", &port);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2696: FILE: drivers/block/nbd.c:2234:
+	maxi = sizeof(connects)/sizeof(char *);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2703: FILE: drivers/block/nbd.c:2241:
+		dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": connects[%d]=\"%s\"\n",
+				i, connects[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2707: FILE: drivers/block/nbd.c:2245:
+			printk(KERN_ERR "nb%d: bad connect \"%s\" (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2708: FILE: drivers/block/nbd.c:2246:
+			printk(KERN_ERR "nb%d: bad connect \"%s\" (%d)\n",
+					i, connects[i], result);

CHECK:BRACES: Unbalanced braces around else statement
#2709: FILE: drivers/block/nbd.c:2247:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2712: FILE: drivers/block/nbd.c:2250:
+			result = nbd_thread_start(lo, &lo->ss_thread,
+					session_loop);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2714: FILE: drivers/block/nbd.c:2252:
+				printk(KERN_ERR "nb%d: can't start session manager (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2715: FILE: drivers/block/nbd.c:2253:
+				printk(KERN_ERR "nb%d: can't start session manager (%d)\n",
+						i, result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2725: FILE: drivers/block/nbd.c:2263:
+	dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": initial_size=\"%s\"\n",
+			initial_size);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#2726: FILE: drivers/block/nbd.c:2264:
+	sscanf(initial_size, "%Lu", &initial_bytesize);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#2726: FILE: drivers/block/nbd.c:2264:
+	sscanf(initial_size, "%Lu", &initial_bytesize);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#2726: FILE: drivers/block/nbd.c:2264:
+	sscanf(initial_size, "%Lu", &initial_bytesize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2734: FILE: drivers/block/nbd.c:2272:
+		printk(KERN_CRIT DEVICE_NAME ": Size of nbd_request must be 28 bytes to work!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2738: FILE: drivers/block/nbd.c:2276:
+		printk(KERN_CRIT DEVICE_NAME ": Size of nbd_reply must be 16 bytes to work!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2743: FILE: drivers/block/nbd.c:2281:
+		printk(DEVICE_NAME ": Unable to get major number %d.\n", MAJOR_NR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2754: FILE: drivers/block/nbd.c:2292:
+	printk(KERN_INFO DEVICE_NAME ": registered at major %d\n", MAJOR_NR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2756: FILE: drivers/block/nbd.c:2294:
+	dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": debugflags=0x%x.\n",
+			debugflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2758: FILE: drivers/block/nbd.c:2296:
+	dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": default_port=%d.\n",
+			default_port);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2760: FILE: drivers/block/nbd.c:2298:
+	dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": initial_size=%llu.\n",
+			initial_bytesize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2762: FILE: drivers/block/nbd.c:2300:
+	dprintk(NBD_DEBUG_INIT, DEVICE_NAME ": initial_blksize_bits=%d.\n",
+			initial_blksize_bits);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2768: FILE: drivers/block/nbd.c:2306:
+	for (i = 0; i < MAX_NBD; i++) {
+		init_nbd_dev(nbd_devs + i);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2783: FILE: drivers/block/nbd.c:2321:
+	dprintk(NBD_DEBUG_EXIT,
+			"nb%d: %s %p: %d %d-%d ref#=%d q=%p q.e.ref#=%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2794: FILE: drivers/block/nbd.c:2332:
+	dprintk(NBD_DEBUG_EXIT, DEVICE_NAME ": %s called.\n", __FUNCTION__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2797: FILE: drivers/block/nbd.c:2335:
+		if (nbd_devs[i].sin.sin_addr.s_addr)
[...]
+		else if (nbd_devs[i].file && nbd_devs[i].sock) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2810: FILE: drivers/block/nbd.c:2348:
+		struct gendisk *disk;
+		for (minor = 0; minor < MAX_NBD; minor++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2823: FILE: drivers/block/nbd.c:2361:
+		printk(KERN_ERR DEVICE_NAME ": module cleanup failed!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2825: FILE: drivers/block/nbd.c:2363:
+		printk(KERN_INFO DEVICE_NAME ": module exiting.\n");

WARNING:TYPO_SPELLING: 'accomadate' may be misspelled - perhaps 'accommodate'?
#2861: FILE: include/linux/nbd.h:10:
+ *            type definitions, changed device structure to accomadate
                                                             ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2893: FILE: include/linux/nbd.h:23:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2893: FILE: include/linux/nbd.h:23:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2893: FILE: include/linux/nbd.h:23:
+                                                                                $

WARNING:CONSTANT_CONVERSION: __constant_be64_to_cpu should be be64_to_cpu
#2912: FILE: include/linux/nbd.h:41:
+#    define ntohll(x) __constant_be64_to_cpu(x)

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be64 should be cpu_to_be64
#2913: FILE: include/linux/nbd.h:42:
+#    define htonll(x) __constant_cpu_to_be64(x)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2921: FILE: include/linux/nbd.h:49:
+#define NBD_SET_SOCK		_IO( 0xab, 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2921: FILE: include/linux/nbd.h:49:
+#define NBD_SET_SOCK		_IO( 0xab, 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2922: FILE: include/linux/nbd.h:50:
+#define NBD_SET_BLKSIZE		_IO( 0xab, 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2922: FILE: include/linux/nbd.h:50:
+#define NBD_SET_BLKSIZE		_IO( 0xab, 1 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2923: FILE: include/linux/nbd.h:51:
+#define NBD_SET_SIZE		_IO( 0xab, 2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2923: FILE: include/linux/nbd.h:51:
+#define NBD_SET_SIZE		_IO( 0xab, 2 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2924: FILE: include/linux/nbd.h:52:
+#define NBD_DO_IT		_IO( 0xab, 3 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2924: FILE: include/linux/nbd.h:52:
+#define NBD_DO_IT		_IO( 0xab, 3 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2925: FILE: include/linux/nbd.h:53:
+#define NBD_CLEAR_SOCK		_IO( 0xab, 4 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2925: FILE: include/linux/nbd.h:53:
+#define NBD_CLEAR_SOCK		_IO( 0xab, 4 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2926: FILE: include/linux/nbd.h:54:
+#define NBD_CLEAR_QUE		_IO( 0xab, 5 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2926: FILE: include/linux/nbd.h:54:
+#define NBD_CLEAR_QUE		_IO( 0xab, 5 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2927: FILE: include/linux/nbd.h:55:
+#define NBD_PRINT_DEBUG		_IO( 0xab, 6 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2927: FILE: include/linux/nbd.h:55:
+#define NBD_PRINT_DEBUG		_IO( 0xab, 6 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2928: FILE: include/linux/nbd.h:56:
+#define NBD_SET_SIZE_BLOCKS	_IO( 0xab, 7 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2928: FILE: include/linux/nbd.h:56:
+#define NBD_SET_SIZE_BLOCKS	_IO( 0xab, 7 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2929: FILE: include/linux/nbd.h:57:
+#define NBD_DISCONNECT		_IO( 0xab, 8 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2929: FILE: include/linux/nbd.h:57:
+#define NBD_DISCONNECT		_IO( 0xab, 8 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2930: FILE: include/linux/nbd.h:58:
+#define NBD_SET_SIN		_IO( 0xab, 9 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2930: FILE: include/linux/nbd.h:58:
+#define NBD_SET_SIN		_IO( 0xab, 9 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2931: FILE: include/linux/nbd.h:59:
+#define NBD_CLR_SIN		_IO( 0xab, 10 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2931: FILE: include/linux/nbd.h:59:
+#define NBD_CLR_SIN		_IO( 0xab, 10 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2932: FILE: include/linux/nbd.h:60:
+#define NBD_GET_SIN		_IO( 0xab, 11 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2932: FILE: include/linux/nbd.h:60:
+#define NBD_GET_SIN		_IO( 0xab, 11 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2933: FILE: include/linux/nbd.h:61:
+#define NBD_SET_FLAGS		_IO( 0xab, 12 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2933: FILE: include/linux/nbd.h:61:
+#define NBD_SET_FLAGS		_IO( 0xab, 12 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#2934: FILE: include/linux/nbd.h:62:
+#define NBD_GET_FLAGS		_IO( 0xab, 13 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2934: FILE: include/linux/nbd.h:62:
+#define NBD_GET_FLAGS		_IO( 0xab, 13 )

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2965: FILE: include/linux/nbd.h:74:
+typedef struct nbd_protomagic { unsigned char bytes[8]; } nbd_protomagic_t

ERROR:CODE_INDENT: code indent should use tabs where possible
#2967: FILE: include/linux/nbd.h:76:
+        __attribute__ ((packed))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2967: FILE: include/linux/nbd.h:76:
+        __attribute__ ((packed))$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2967: FILE: include/linux/nbd.h:76:
+        __attribute__ ((packed))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2974: FILE: include/linux/nbd.h:80:
+typedef struct nbd_svr_info {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2977: FILE: include/linux/nbd.h:83:
+	uint64_t size;		/* Size in bytes of server storage */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2981: FILE: include/linux/nbd.h:87:
+	__attribute__ ((packed))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3002: FILE: include/linux/nbd.h:101:
+	uint32_t magic; /* NBD_REQUEST_MAGIC */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3003: FILE: include/linux/nbd.h:102:
+	uint32_t type;	/* == READ || == WRITE */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3005: FILE: include/linux/nbd.h:104:
+	uint64_t from;	/* in NBO */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3006: FILE: include/linux/nbd.h:105:
+	uint32_t len;	/* in NBO */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3012: FILE: include/linux/nbd.h:111:
+typedef struct nbd_request nbd_request_t;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3017: FILE: include/linux/nbd.h:114:
+	uint32_t magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3018: FILE: include/linux/nbd.h:115:
+	uint32_t error;		/* 0 = ok, else error	*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3022: FILE: include/linux/nbd.h:118:
+}
+#ifdef __GNUC__

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3023: FILE: include/linux/nbd.h:119:
+	__attribute__ ((packed))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3026: FILE: include/linux/nbd.h:122:
+typedef struct nbd_reply nbd_reply_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3079: FILE: include/linux/nbd.h:175:
+typedef struct nbd_device nbd_device_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3080: FILE: include/linux/nbd.h:176:
+typedef struct nbd_thread nbd_thread_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3081: FILE: include/linux/nbd.h:177:
+typedef struct nbd_qsys nbd_qsys_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3088: FILE: include/linux/nbd.h:184:
+^I^I$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3090: FILE: include/linux/nbd.h:186:
+	spinlock_t lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 87 errors, 158 warnings, 117 checks, 3077 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
