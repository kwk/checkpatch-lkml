WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
* When being min..low on free pages, free one more than you want to allocate.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#51: 
Skellefteå
         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: mm/page_alloc.c:249:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#95: FILE: mm/page_alloc.c:250:
 		switch (limit) {
+			case PAGES_MEMALLOC:
[...]
+			case PAGES_CRITICAL:
[...]
+			case PAGES_MIN_FREE:
[...]
+			case PAGES_NORMAL_FREE:
[...]
+			case PAGES_INACTIVE_TARGET:
[...]
+			case PAGES_HIGH_FREE:
[...]
+			case PAGES_HIGH:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#102: FILE: mm/page_alloc.c:257:
+				free_min = water_mark = z->pages_min / 4;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: mm/page_alloc.c:260:
+^I^I^I^Iprintk(KERN_ERR $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#106: FILE: mm/page_alloc.c:260:
+				printk(KERN_ERR 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: mm/page_alloc.c:281:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: mm/page_alloc.c:283:
+^I^Iif (z->free_pages < water_mark) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: mm/page_alloc.c:285:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: mm/page_alloc.c:286:
+		
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: mm/page_alloc.c:297:
+^I^I^Ipages_to_reclaim = 1 << order; /* pages to try to reclaim at free_pages $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#155: FILE: mm/page_alloc.c:297:
level */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#156: FILE: mm/page_alloc.c:298:
+			pages_to_reclaim = 1 << order; /* pages to try to reclaim at free_pages 
+			if (z->free_pages < z->pages_low)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#163: FILE: mm/page_alloc.c:305:
+			while (z->inactive_clean_pages &&
[...]
min */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: mm/page_alloc.c:307:
+^I^I^I^Ipages_to_reclaim--)) { /* note: lazy evaluation! decr. only when free > $

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#165: FILE: mm/page_alloc.c:307:
+				pages_to_reclaim--)) { /* note: lazy evaluation! decr. only when free > 

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: mm/page_alloc.c:308:
+				pages_to_reclaim--)) { /* note: lazy evaluation! decr. only when free > 
+				struct page *reclaim = reclaim_page(z);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: mm/page_alloc.c:314:
+^I^I^I^I^I^Iprintk(KERN_ERR "reclaim_pages failed but there are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: mm/page_alloc.c:320:
+^I^I^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#182: FILE: mm/page_alloc.c:322:
+		if (z->free_pages >= free_min)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#192: FILE: mm/page_alloc.c:334:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: mm/page_alloc.c:360:
+^I^Iprintk("%s; __alloc_pages(gfp=0x%x, order=%ld, ...)\n", current->comm, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: mm/page_alloc.c:360:
+		printk("%s; __alloc_pages(gfp=0x%x, order=%ld, ...)\n", current->comm, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: mm/page_alloc.c:361:
+		printk("%s; __alloc_pages(gfp=0x%x, order=%ld, ...)\n", current->comm, 
+		show_trace(NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: mm/page_alloc.c:363:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: mm/page_alloc.c:392:
+^Ipage = __alloc_pages_limit(zonelist, order, PAGES_INACTIVE_TARGET, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: mm/page_alloc.c:393:
+	page = __alloc_pages_limit(zonelist, order, PAGES_INACTIVE_TARGET, 
+	if (page)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: mm/page_alloc.c:406:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: mm/page_alloc.c:422:
+^Ipage = __alloc_pages_limit(zonelist, order, PAGES_NORMAL_FREE, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: mm/page_alloc.c:423:
+	page = __alloc_pages_limit(zonelist, order, PAGES_NORMAL_FREE, 
 	if (page)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: mm/page_alloc.c:426:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: mm/page_alloc.c:427:
+^I/* "all" zones has less than NORMAL free, i.e. our reclaiming in $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#326: FILE: mm/page_alloc.c:430:
+	if (waitqueue_active(&kreclaimd_wait)) {
+		wake_up_interruptible(&kreclaimd_wait);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: mm/page_alloc.c:450:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: mm/page_alloc.c:482:
+^I^Ipage = __alloc_pages_limit(zonelist, order, PAGES_MIN_FREE, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: mm/page_alloc.c:483:
+		page = __alloc_pages_limit(zonelist, order, PAGES_MIN_FREE, 
+		if (page)

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: mm/page_alloc.c:503:
+			int progress = try_to_free_pages(gfp_mask);
+			if (progress || (gfp_mask & __GFP_FS))

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: mm/page_alloc.c:526:
+ ^Ipage = __alloc_pages_limit(zonelist, order,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: mm/page_alloc.c:526:
+ ^Ipage = __alloc_pages_limit(zonelist, order,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: mm/page_alloc.c:526:
+ ^Ipage = __alloc_pages_limit(zonelist, order,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: mm/page_alloc.c:527:
+ ^I^I^I^I   current->flags & PF_MEMALLOC $

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: mm/page_alloc.c:527:
+ ^I^I^I^I   current->flags & PF_MEMALLOC $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#485: FILE: mm/page_alloc.c:527:
+ ^I^I^I^I   current->flags & PF_MEMALLOC $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/page_alloc.c:527:
+ 	page = __alloc_pages_limit(zonelist, order,
+ 				   current->flags & PF_MEMALLOC 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: mm/page_alloc.c:527:
+ ^I^I^I^I   current->flags & PF_MEMALLOC $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: mm/page_alloc.c:529:
+ ^I^I^I^I   direct_reclaim); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: mm/page_alloc.c:529:
+ ^I^I^I^I   direct_reclaim); $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#487: FILE: mm/page_alloc.c:529:
+ ^I^I^I^I   direct_reclaim); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: mm/page_alloc.c:529:
+ ^I^I^I^I   direct_reclaim); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: mm/page_alloc.c:530:
+ ^Iif (page)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#488: FILE: mm/page_alloc.c:530:
+ ^Iif (page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: mm/page_alloc.c:530:
+ ^Iif (page)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: mm/page_alloc.c:531:
+ ^I^Ireturn page;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#489: FILE: mm/page_alloc.c:531:
+ ^I^Ireturn page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: mm/page_alloc.c:531:
+ ^I^Ireturn page;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: mm/page_alloc.c:532:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: mm/page_alloc.c:532:
+  $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#495: FILE: mm/page_alloc.c:534:
+	printk(KERN_ERR

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515806.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 21 warnings, 14 checks, 429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515806.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
