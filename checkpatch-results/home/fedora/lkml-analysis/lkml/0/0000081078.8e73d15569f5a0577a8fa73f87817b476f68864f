WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#52: FILE: include/linux/mm.h:925:
+ * ^Iadd_active_range(nid, start, end)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/mm.h:933:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: include/linux/mm.h:934:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,
+					unsigned long max_dma32_pfn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/linux/mm.h:937:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: include/linux/mm.h:938:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,
+					unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/mm.h:939:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: include/linux/mm.h:940:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/mm.h:941:
+extern void remove_all_active_ranges(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/mm.h:942:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: include/linux/mm.h:943:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,
+						unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/mm.h:944:
+extern void get_pfn_range_for_nid(unsigned int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: include/linux/mm.h:945:
+extern void get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/mm.h:946:
+extern unsigned long find_min_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/mm.h:947:
+extern unsigned long find_max_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/mm.h:948:
+extern int early_pfn_to_nid(unsigned long pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/mm.h:949:
+extern void free_bootmem_with_active_regions(int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: include/linux/mm.h:950:
+extern void free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/mm.h:951:
+extern void sparse_memory_present_with_active_regions(int nid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: mm/page_alloc.c:98:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: mm/page_alloc.c:99:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: mm/page_alloc.c:100:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: mm/page_alloc.c:2203:
+	int i;
+	for (i = 0; early_node_map[i].end_pfn; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_pfn <= pfn'
#204: FILE: mm/page_alloc.c:2231:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < end_pfn'
#204: FILE: mm/page_alloc.c:2231:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#212: FILE: mm/page_alloc.c:2239:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#212: FILE: mm/page_alloc.c:2239:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: mm/page_alloc.c:2245:
+void __init free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: mm/page_alloc.c:2248:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: mm/page_alloc.c:2251:
+		unsigned long end_pfn = early_node_map[i].end_pfn;
+		if (early_node_map[i].start_pfn >= max_low_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: mm/page_alloc.c:2259:
+		free_bootmem_node(NODE_DATA(early_node_map[i].nid),
+				PFN_PHYS(early_node_map[i].start_pfn),

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: mm/page_alloc.c:2267:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: mm/page_alloc.c:2269:
+		memory_present(early_node_map[i].nid,
+				early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: mm/page_alloc.c:2274:
+void __init get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#259: FILE: mm/page_alloc.c:2286:
+		printk(KERN_WARNING "Node %u active with no memory\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/page_alloc.c:2292:
+unsigned long __init zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/page_alloc.c:2316:
+unsigned long __init __absent_pages_in_range(int nid,
+				unsigned long range_start_pfn,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#305: FILE: mm/page_alloc.c:2332:
+			i = next_active_region_index_in_nid(i, nid)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'cound' may be misspelled - perhaps 'could'?
#314: FILE: mm/page_alloc.c:2341:
+		/* Update the hole size cound and move on */
 		                        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: mm/page_alloc.c:2343:
+			BUG_ON(prev_end_pfn > start_pfn);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: mm/page_alloc.c:2353:
+unsigned long __init absent_pages_in_range(unsigned long start_pfn,
+							unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: mm/page_alloc.c:2359:
+unsigned long __init zone_absent_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/page_alloc.c:2368:
+static inline unsigned long zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/page_alloc.c:2375:
+static inline unsigned long zone_absent_pages_in_node(int nid,
+						unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/page_alloc.c:2386:
+static void __init calculate_node_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#376: FILE: mm/page_alloc.c:2403:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: mm/page_alloc.c:2404:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
+							realtotalpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: mm/page_alloc.c:2509:
+void __init add_active_range(unsigned int nid, unsigned long start_pfn,
+						unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/page_alloc.c:2520:
+		if (start_pfn >= early_node_map[i].start_pfn &&
+				end_pfn <= early_node_map[i].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/page_alloc.c:2525:
+		if (start_pfn <= early_node_map[i].end_pfn &&
+				end_pfn > early_node_map[i].end_pfn) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: mm/page_alloc.c:2532:
+		if (start_pfn < early_node_map[i].end_pfn &&
+				end_pfn >= early_node_map[i].start_pfn) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#442: FILE: mm/page_alloc.c:2540:
+		printk(KERN_ERR "Too many memory regions, truncating\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: mm/page_alloc.c:2550:
+void __init shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init remove_all_active_ranges() should probably be void __init remove_all_active_ranges(void)
#465: FILE: mm/page_alloc.c:2563:
+void __init remove_all_active_ranges()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: mm/page_alloc.c:2587:
+	size_t num = 0;
+	while (early_node_map[num].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: mm/page_alloc.c:2591:
+	sort(early_node_map, num, sizeof(struct node_active_region),
+						cmp_node_active_region, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#505: FILE: mm/page_alloc.c:2603:
+	printk(KERN_WARNING "Could not find start_pfn for node %lu\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: mm/page_alloc.c:2624:
+void __init free_area_init_nodes(unsigned long arch_max_dma_pfn,
+				unsigned long arch_max_dma32_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: mm/page_alloc.c:2633:
+	memset(arch_zone_lowest_possible_pfn, 0,
+				sizeof(arch_zone_lowest_possible_pfn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: mm/page_alloc.c:2635:
+	memset(arch_zone_highest_possible_pfn, 0,
+				sizeof(arch_zone_highest_possible_pfn));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#546: FILE: mm/page_alloc.c:2644:
+			arch_zone_highest_possible_pfn[zone_index-1];
 			                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#554: FILE: mm/page_alloc.c:2652:
+		pg_data_t *pgdat = NODE_DATA(nid);
+		free_area_init_node(nid, pgdat, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: mm/page_alloc.c:2653:
+		free_area_init_node(nid, pgdat, NULL,
+				find_min_pfn_for_node(nid), NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 16 warnings, 45 checks, 506 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
