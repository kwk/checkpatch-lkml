WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
On Fri, Aug 06, 2004 at 06:23:23PM +0100, viro@parcelfarce.linux.theplanet.co.uk wrote:

WARNING:TYPO_SPELLING: 'filessytem' may be misspelled - perhaps 'filesystem'?
#39: 
> 	c) different subtrees of filessytem might be mounted there and
  	                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'metdata' may be misspelled - perhaps 'metadata'?
#63: 
patch, this patch is only about logging the fs metdata accesses into
                                               ^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#102: FILE: fs/proc/proc_misc.c:695:
+	entry = create_proc_entry("bootcache", S_IRUSR, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Unbalanced braces around else statement
#123: FILE: fs/namei.c:402:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: fs/namei.c:996:
+		if (!dentry) {
[...]
+				bootcache_new_entry(dentry);
[...]

CHECK:BRACES: Unbalanced braces around else statement
#141: FILE: fs/namei.c:1000:
+		} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#151: FILE: include/linux/proc_fs.h:118:
+extern struct file_operations proc_bootcache_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: fs/proc/bootcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#159: FILE: fs/proc/bootcache.c:2:
+ *  fs/proc/bootcache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/proc/bootcache.c:19:
+static struct page * bootcache_buf, * bootcache_d_path_page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#176: FILE: fs/proc/bootcache.c:19:
+static struct page * bootcache_buf, * bootcache_d_path_page;
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: fs/proc/bootcache.c:21:
+static struct vfsmount * bootcache_vfsmnt;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/proc/bootcache.c:25:
+static int bootcache_open(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/proc/bootcache.c:25:
+static int bootcache_open(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: fs/proc/bootcache.c:28:
+	struct page * page, * d_path_page;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#185: FILE: fs/proc/bootcache.c:28:
+	struct page * page, * d_path_page;
 	                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/proc/bootcache.c:63:
+static int bootcache_release(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/proc/bootcache.c:63:
+static int bootcache_release(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/proc/bootcache.c:65:
+	struct page * page = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: fs/proc/bootcache.c:81:
+static void bootcache_push(const char * str, unsigned int len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: fs/proc/bootcache.c:85:
+	BUG_ON(!bootcache_nr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: fs/proc/bootcache.c:96:
+	BUG_ON(old_len != len + len2);

CHECK:SPACING: No space is necessary after a cast
#255: FILE: fs/proc/bootcache.c:98:
+	memcpy((char *) page_address(bootcache_buf) + (bootcache_pos & ~PAGE_MASK), str, len);

CHECK:SPACING: No space is necessary after a cast
#260: FILE: fs/proc/bootcache.c:103:
+	memcpy((char *) page_address(bootcache_buf), str + len, len2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: fs/proc/bootcache.c:110:
+void fastcall bootcache_new_entry(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/proc/bootcache.c:112:
+	char * buf;

CHECK:SPACING: No space is necessary after a cast
#279: FILE: fs/proc/bootcache.c:122:
+	*((char *) page_address(bootcache_d_path_page) + PAGE_SIZE - 1) = '\n';

CHECK:SPACING: No space is necessary after a cast
#281: FILE: fs/proc/bootcache.c:124:
+	bootcache_push(buf, (char *) page_address(bootcache_d_path_page) + PAGE_SIZE - buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: fs/proc/bootcache.c:130:
+static ssize_t bootcache_read(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: fs/proc/bootcache.c:130:
+static ssize_t bootcache_read(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: fs/proc/bootcache.c:131:
+			      size_t count, loff_t * ppos)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#308: FILE: fs/proc/bootcache.c:151:
+		ret = wait_event_interruptible(bootcache_wait, ((bootcache_pos - pos) & ~PAGE_MASK));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: fs/proc/bootcache.c:166:
+	BUG_ON(old_len != len + len2);

CHECK:SPACING: No space is necessary after a cast
#326: FILE: fs/proc/bootcache.c:169:
+	ret = __copy_to_user(buf, (char *) page_address(bootcache_buf) + (pos & ~PAGE_MASK), len);

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: fs/proc/bootcache.c:170:
+	if (unlikely(ret)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#331: FILE: fs/proc/bootcache.c:174:
+	} else

CHECK:SPACING: No space is necessary after a cast
#335: FILE: fs/proc/bootcache.c:178:
+	ret = __copy_to_user(buf + len, (char *) page_address(bootcache_buf), len2);

CHECK:BRACES: braces {} should be used on all arms of this statement
#336: FILE: fs/proc/bootcache.c:179:
+	if (unlikely(ret)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#339: FILE: fs/proc/bootcache.c:182:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: fs/proc/bootcache.c:197:
+static unsigned int bootcache_poll(struct file * file, struct poll_table_struct * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: fs/proc/bootcache.c:197:
+static unsigned int bootcache_poll(struct file * file, struct poll_table_struct * wait)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#362: FILE: fs/proc/bootcache.c:205:
+struct file_operations proc_bootcache_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: include/linux/bootcache.h:1:
+#ifndef _BOOTCACHE_H

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: include/linux/bootcache.h:22:
+extern void FASTCALL(bootcache_new_entry(struct dentry * dentry));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#392: FILE: include/linux/bootcache.h:22:
+extern void FASTCALL(bootcache_new_entry(struct dentry * dentry));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 13 warnings, 14 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
