WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
exclusive access and/or wait until the device becomes available. Since bd_claim

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#77: FILE: fs/block_dev.c:457:
+	DEFINE_WAIT (wait);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: fs/block_dev.c:461:
+	prepare_to_wait (&bdev_wq, &wait, TASK_UNINTERRUPTIBLE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#85: FILE: fs/block_dev.c:464:
+	if (bdev->bd_holder == holder) {
[...]
+			res = -EBUSY;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev->bd_holder"
#90: FILE: fs/block_dev.c:468:
+	} else if (bdev->bd_holder != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: fs/block_dev.c:491:
+		spin_unlock (&bdev_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#114: FILE: fs/block_dev.c:496:
+	finish_wait (&bdev_wq, &wait);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: fs/block_dev.c:501:
+EXPORT_SYMBOL(__bd_claim);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#128: FILE: fs/block_dev.c:511:
+	wake_up_all (&bdev_wq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/block_dev.c:901:
+                                      void *holder, int bdflags)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/block_dev.c:901:
+                                      void *holder, int bdflags)$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#156: FILE: fs/block_dev.c:930:
+EXPORT_SYMBOL(__open_bdev_excl);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#168: FILE: fs/super.c:680:
+	bdev = __open_bdev_excl(dev_name, flags, fs_type, BD_EXCL|BD_WAIT);
 	                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/fs.h:1326:
+extern int __bd_claim(struct block_device *, void *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/fs.h:1347:
+extern struct block_device *__open_bdev_excl(const char *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#195: FILE: include/linux/fs.h:1347:
+extern struct block_device *__open_bdev_excl(const char *, int, void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#195: FILE: include/linux/fs.h:1347:
+extern struct block_device *__open_bdev_excl(const char *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#195: FILE: include/linux/fs.h:1347:
+extern struct block_device *__open_bdev_excl(const char *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#195: FILE: include/linux/fs.h:1347:
+extern struct block_device *__open_bdev_excl(const char *, int, void *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198880.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 13 warnings, 5 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198880.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
