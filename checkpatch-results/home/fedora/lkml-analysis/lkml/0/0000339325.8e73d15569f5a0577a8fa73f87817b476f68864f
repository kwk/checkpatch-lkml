WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -Naurp -X /home/rddunlap/doc/dontdiff-osdl linux-260-test4-pv/include/linux/parser.h linux-260-test4-fs/include/linux/parser.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/parser.h:1:
+struct match_token {

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#63: FILE: include/linux/parser.h:6:
+typedef struct match_token match_table_t[];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#67: FILE: include/linux/parser.h:10:
+typedef struct {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#74: FILE: include/linux/parser.h:17:
+int match_int(substring_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#75: FILE: include/linux/parser.h:18:
+int match_octal(substring_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#76: FILE: include/linux/parser.h:19:
+int match_hex(substring_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#77: FILE: include/linux/parser.h:20:
+void match_strcpy(char *, substring_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#77: FILE: include/linux/parser.h:20:
+void match_strcpy(char *, substring_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#78: FILE: include/linux/parser.h:21:
+char *match_strdup(substring_t *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: lib/parser.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#96: FILE: lib/parser.c:2:
+ * lib/parser.c - simple parser for mount, etc. options.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: lib/parser.c:22:
+	while(1) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#118: FILE: lib/parser.c:24:
+		int len = -1;
+		meta = strchr(p, '%');

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: lib/parser.c:28:
+		if (strncmp(p, s, meta-p))
 		                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#128: FILE: lib/parser.c:34:
+		if (isdigit(*p))
[...]
+		else if (*p == '%') {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#129: FILE: lib/parser.c:35:
+			len = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#140: FILE: lib/parser.c:46:
+		switch (*p++) {
+			case 's':
[...]
+			case 'd':
[...]
+			case 'u':
[...]
+			case 'o':
[...]
+			case 'x':
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#147: FILE: lib/parser.c:53:
+				simple_strtol(s, &args[argc].to, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#150: FILE: lib/parser.c:56:
+				simple_strtoul(s, &args[argc].to, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#153: FILE: lib/parser.c:59:
+				simple_strtoul(s, &args[argc].to, 8);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#156: FILE: lib/parser.c:62:
+				simple_strtoul(s, &args[argc].to, 16);

WARNING:INDENTED_LABEL: labels should not be indented
#157: FILE: lib/parser.c:63:
+			num:

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#185: FILE: lib/parser.c:91:
+	return simple_strtol(buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#194: FILE: lib/parser.c:100:
+	return simple_strtoul(buf, NULL, 8);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#203: FILE: lib/parser.c:109:
+	return simple_strtoul(buf, NULL, 16);

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: lib/parser.c:121:
+	char *p = kmalloc(s->to - s->from + 1, GFP_KERNEL);
+	if (p)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#220: FILE: lib/parser.c:126:
+EXPORT_SYMBOL(match_token);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#221: FILE: lib/parser.c:127:
+EXPORT_SYMBOL(match_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#222: FILE: lib/parser.c:128:
+EXPORT_SYMBOL(match_octal);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#223: FILE: lib/parser.c:129:
+EXPORT_SYMBOL(match_hex);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#224: FILE: lib/parser.c:130:
+EXPORT_SYMBOL(match_strcpy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#225: FILE: lib/parser.c:131:
+EXPORT_SYMBOL(match_strdup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 29 warnings, 2 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
