WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Andi, This stuff is very much common to x86 and x86_64. Shared code is split

WARNING:TYPO_SPELLING: 'Mutli' may be misspelled - perhaps 'Multi'?
#47: 
a) Cleanup and merge HT and Mutli Core detection code for x86 and x86_64
                            ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#149: FILE: arch/i386/kernel/cpu/common.c:446:
 void __devinit print_cpu_info(struct cpuinfo_x86 *c)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#177: FILE: arch/i386/kernel/cpu/intel.c:79:
 static void __devinit init_intel(struct cpuinfo_x86 *c)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#194: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:304:
 static void __devinit cache_shared_cpu_map_setup(unsigned int cpu, int index)

CHECK:BRACES: Unbalanced braces around else statement
#219: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:316:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#234: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:331:
+}
+static void __devinit cache_remove_shared_cpu_map(unsigned int cpu, int index)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#234: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:331:
+static void __devinit cache_remove_shared_cpu_map(unsigned int cpu, int index)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:338:
+^I^Isibling_leaf = CPUID4_INFO_IDX(sibling, index);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#267: FILE: arch/i386/kernel/cpu/intel_htmc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: arch/i386/kernel/cpu/intel_htmc.c:4:
+ *^I$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#278: FILE: arch/i386/kernel/cpu/intel_htmc.c:12:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: arch/i386/kernel/cpu/intel_htmc.c:14:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: arch/i386/kernel/cpu/intel_htmc.c:38:
+^Iu32 ^Ieax, ebx, ecx, edx;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: arch/i386/kernel/cpu/intel_htmc.c:39:
+^Iint ^Iindex_msb, core_bits;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: arch/i386/kernel/cpu/intel_htmc.c:40:
+^Iint ^Icpu = smp_processor_id();$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#318: FILE: arch/i386/kernel/cpu/intel_htmc.c:52:
+		printk(KERN_INFO  "CPU: Hyper-Threading is disabled\n");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#319: FILE: arch/i386/kernel/cpu/intel_htmc.c:53:
+	} else if (smp_num_siblings > 1 ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#320: FILE: arch/i386/kernel/cpu/intel_htmc.c:54:
+	} else if (smp_num_siblings > 1 ) {
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#321: FILE: arch/i386/kernel/cpu/intel_htmc.c:55:
+		if (smp_num_siblings > NR_CPUS) {

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#322: FILE: arch/i386/kernel/cpu/intel_htmc.c:56:
+			printk(KERN_WARNING "CPU: Unsupported number of the siblings %d", smp_num_siblings);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#322: FILE: arch/i386/kernel/cpu/intel_htmc.c:56:
+			printk(KERN_WARNING "CPU: Unsupported number of the siblings %d", smp_num_siblings);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#330: FILE: arch/i386/kernel/cpu/intel_htmc.c:64:
+		printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",

WARNING:SPACING: space prohibited before semicolon
#335: FILE: arch/i386/kernel/cpu/intel_htmc.c:69:
+		index_msb = get_count_order(smp_num_siblings) ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#343: FILE: arch/i386/kernel/cpu/intel_htmc.c:77:
+			printk(KERN_INFO  "CPU: Processor Core ID: %d\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#367: FILE: arch/i386/kernel/sibling-map.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: arch/i386/kernel/sibling-map.c:3:
+ * ^ISetup and Removal of various sibling maps$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: arch/i386/kernel/sibling-map.c:6:
+ *^ISuresh Siddha ^I^I: Merge x86 and x86_64 code with some fixes$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: arch/i386/kernel/sibling-map.c:30:
+^I^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#442: FILE: arch/i386/kernel/sibling-map.c:76:
+			if (cpus_weight(cpu_sibling_map[cpu]) == 1) {
[...]
+			} else if (i != cpu && !c[cpu].booted_cores)
[...]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#775: FILE: include/asm-i386/mach_apic.h:1:
+/* Magic for including machine specific mach_apic.h from C files,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: include/asm-i386/mach_apic.h:2:
+ * so that shared code between i386 and x86_64 can simply include $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#796: FILE: include/asm-i386/processor.h:109:
+extern int intel_num_cpu_cores(struct cpuinfo_x86 *c);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: include/asm-i386/smp.h:40:
+extern void set_cpu_sibling_map(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#807: FILE: include/asm-i386/smp.h:40:
+extern void set_cpu_sibling_map(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#808: FILE: include/asm-i386/smp.h:41:
+extern void remove_siblinginfo(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#808: FILE: include/asm-i386/smp.h:41:
+extern void remove_siblinginfo(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/asm-x86_64/processor.h:96:
+extern int intel_num_cpu_cores(struct cpuinfo_x86 *c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#844: FILE: include/asm-x86_64/processor.h:99:
+extern void detect_ht(struct cpuinfo_x86 *c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: include/asm-x86_64/smp.h:60:
+extern void set_cpu_sibling_map(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#859: FILE: include/asm-x86_64/smp.h:60:
+extern void set_cpu_sibling_map(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: include/asm-x86_64/smp.h:61:
+extern void remove_siblinginfo(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#860: FILE: include/asm-x86_64/smp.h:61:
+extern void remove_siblinginfo(int);

WARNING:INLINE: plain inline is preferred over __inline__
#872: FILE: include/linux/bitops.h:87:
+static __inline__ int get_count_order(unsigned int count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: include/linux/bitops.h:90:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144783.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 26 warnings, 13 checks, 727 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144783.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
