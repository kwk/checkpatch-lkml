WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
The patch below makes the spinlock.h headers in some of the include/asm-* folders more readable by removing redundant defines and simplifying the #ifdef logic a bit.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#35: FILE: include/asm-i386/spinlock.h:26:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 1, SPINLOCK_MAGIC }

CHECK:SPACING: No space is necessary after a cast
#38: FILE: include/asm-i386/spinlock.h:28:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 1

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#38: FILE: include/asm-i386/spinlock.h:28:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#95: FILE: include/asm-i386/spinlock.h:133:
+#define RW_LOCK_UNLOCKED (rwlock_t) { RW_LOCK_BIAS, RWLOCK_MAGIC }

CHECK:SPACING: No space is necessary after a cast
#98: FILE: include/asm-i386/spinlock.h:135:
+#define RW_LOCK_UNLOCKED (rwlock_t) RW_LOCK_BIAS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#98: FILE: include/asm-i386/spinlock.h:135:
+#define RW_LOCK_UNLOCKED (rwlock_t) RW_LOCK_BIAS

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#111: FILE: include/asm-i386/spinlock.h:171:
+#define _raw_read_unlock(rw) asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")
                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#111: FILE: include/asm-i386/spinlock.h:171:
+#define _raw_read_unlock(rw) asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#131: FILE: include/asm-ia64/spinlock.h:24:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#133: FILE: include/asm-ia64/spinlock.h:26:
+#define spin_is_locked(x) ((x)->lock != 0)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:SPACING: No space is necessary after a cast
#134: FILE: include/asm-ia64/spinlock.h:27:
+#define _raw_spin_unlock(x) do { barrier(); ((spinlock_t *) x)->lock = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#134: FILE: include/asm-ia64/spinlock.h:27:
+#define _raw_spin_unlock(x) do { barrier(); ((spinlock_t *) x)->lock = 0;} while (0)
                                                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: include/asm-ia64/spinlock.h:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: include/asm-ia64/spinlock.h:58:
+ register long result;       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: include/asm-ia64/spinlock.h:59:
+          \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: include/asm-ia64/spinlock.h:59:
+          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/asm-ia64/spinlock.h:60:
+ __asm__ __volatile__ (       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: include/asm-ia64/spinlock.h:61:
+  "mov ar.ccv=r0\n"      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: include/asm-ia64/spinlock.h:62:
+  ";;\n"        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: include/asm-ia64/spinlock.h:63:
+  "cmpxchg4.acq %0=[%2],%1,ar.ccv\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: include/asm-ia64/spinlock.h:64:
+  : "=r"(result) : "r"(1), "r"(&(x)->lock) : "ar.ccv", "memory"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/asm-ia64/spinlock.h:65:
+ (result == 0);        \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 1)
#219: FILE: include/asm-ia64/spinlock.h:105:
+do {         \
+ int tmp = 0;       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/asm-ia64/spinlock.h:106:
+ int tmp = 0;       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/asm-ia64/spinlock.h:107:
+ __asm__ __volatile__ ("1:\tfetchadd4.acq %0 = [%1], 1\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: include/asm-ia64/spinlock.h:108:
+         ";;\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: include/asm-ia64/spinlock.h:108:
+         ";;\n"     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: include/asm-ia64/spinlock.h:109:
+         "tbit.nz p6,p0 = %0, 31\n"  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: include/asm-ia64/spinlock.h:109:
+         "tbit.nz p6,p0 = %0, 31\n"  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: include/asm-ia64/spinlock.h:110:
+         "(p6) br.cond.sptk.few 2f\n"  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: include/asm-ia64/spinlock.h:110:
+         "(p6) br.cond.sptk.few 2f\n"  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: include/asm-ia64/spinlock.h:111:
+         ".section .text.lock,\"ax\"\n"  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: include/asm-ia64/spinlock.h:111:
+         ".section .text.lock,\"ax\"\n"  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: include/asm-ia64/spinlock.h:112:
+         "2:\tfetchadd4.rel %0 = [%1], -1\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: include/asm-ia64/spinlock.h:112:
+         "2:\tfetchadd4.rel %0 = [%1], -1\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: include/asm-ia64/spinlock.h:113:
+         ";;\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/asm-ia64/spinlock.h:113:
+         ";;\n"     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: include/asm-ia64/spinlock.h:114:
+         "3:\tld4.acq %0 = [%1]\n"   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/asm-ia64/spinlock.h:114:
+         "3:\tld4.acq %0 = [%1]\n"   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: include/asm-ia64/spinlock.h:115:
+         ";;\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/asm-ia64/spinlock.h:115:
+         ";;\n"     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: include/asm-ia64/spinlock.h:116:
+         "tbit.nz p6,p0 = %0, 31\n"  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/asm-ia64/spinlock.h:116:
+         "tbit.nz p6,p0 = %0, 31\n"  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: include/asm-ia64/spinlock.h:117:
+         "(p6) br.cond.sptk.few 3b\n"  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/asm-ia64/spinlock.h:117:
+         "(p6) br.cond.sptk.few 3b\n"  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: include/asm-ia64/spinlock.h:118:
+         "br.cond.sptk.few 1b\n"   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/asm-ia64/spinlock.h:118:
+         "br.cond.sptk.few 1b\n"   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: include/asm-ia64/spinlock.h:119:
+         ";;\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: include/asm-ia64/spinlock.h:119:
+         ";;\n"     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: include/asm-ia64/spinlock.h:120:
+         ".previous\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: include/asm-ia64/spinlock.h:120:
+         ".previous\n"    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: include/asm-ia64/spinlock.h:121:
+         : "=&r" (tmp)    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: include/asm-ia64/spinlock.h:121:
+         : "=&r" (tmp)    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: include/asm-ia64/spinlock.h:122:
+         : "r" (rw) : "p6", "memory");  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/asm-ia64/spinlock.h:122:
+         : "r" (rw) : "p6", "memory");  \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 1)
#247: FILE: include/asm-ia64/spinlock.h:126:
+do {        \
+ int tmp = 0;      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/asm-ia64/spinlock.h:127:
+ int tmp = 0;      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/asm-ia64/spinlock.h:128:
+ __asm__ __volatile__ ("fetchadd4.rel %0 = [%1], -1\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: include/asm-ia64/spinlock.h:129:
+         : "=r" (tmp)   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/asm-ia64/spinlock.h:129:
+         : "=r" (tmp)   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: include/asm-ia64/spinlock.h:130:
+         : "r" (rw)   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: include/asm-ia64/spinlock.h:130:
+         : "r" (rw)   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: include/asm-ia64/spinlock.h:131:
+         : "memory");   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: include/asm-ia64/spinlock.h:131:
+         : "memory");   \$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#272: FILE: include/asm-ia64/spinlock.h:134:
+#define _raw_write_lock(rw)      \
+do {         \
+  __asm__ __volatile__ (      \
+  "mov ar.ccv = r0\n"     \
+  "dep r29 = -1, r0, 31, 1\n"    \
+  ";;\n"       \
+  "1:\n"       \
+  "ld4 r2 = [%0]\n"     \
+  ";;\n"       \
+  "cmp4.eq p0,p7 = r0,r2\n"    \
+  "(p7) br.cond.spnt.few 1b \n"    \
+  "cmpxchg4.acq r2 = [%0], r29, ar.ccv\n"   \
+  ";;\n"       \
+  "cmp4.eq p0,p7 = r0, r2\n"    \
+  "(p7) br.cond.spnt.few 1b\n"    \
+  ";;\n"       \
+  :: "r"(rw) : "ar.ccv", "p7", "r2", "r29", "memory"); \
 } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#273: FILE: include/asm-ia64/spinlock.h:135:
+do {         \
+  __asm__ __volatile__ (      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/asm-ia64/spinlock.h:136:
+  __asm__ __volatile__ (      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/asm-ia64/spinlock.h:137:
+  "mov ar.ccv = r0\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/asm-ia64/spinlock.h:138:
+  "dep r29 = -1, r0, 31, 1\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/asm-ia64/spinlock.h:139:
+  ";;\n"       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: include/asm-ia64/spinlock.h:140:
+  "1:\n"       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/asm-ia64/spinlock.h:141:
+  "ld4 r2 = [%0]\n"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/asm-ia64/spinlock.h:142:
+  ";;\n"       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: include/asm-ia64/spinlock.h:143:
+  "cmp4.eq p0,p7 = r0,r2\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/asm-ia64/spinlock.h:144:
+  "(p7) br.cond.spnt.few 1b \n"    \$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#282: FILE: include/asm-ia64/spinlock.h:144:
+  "(p7) br.cond.spnt.few 1b \n"    \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/asm-ia64/spinlock.h:145:
+  "cmpxchg4.acq r2 = [%0], r29, ar.ccv\n"   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/asm-ia64/spinlock.h:146:
+  ";;\n"       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/asm-ia64/spinlock.h:147:
+  "cmp4.eq p0,p7 = r0, r2\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/asm-ia64/spinlock.h:148:
+  "(p7) br.cond.spnt.few 1b\n"    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/asm-ia64/spinlock.h:149:
+  ";;\n"       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/asm-ia64/spinlock.h:150:
+  :: "r"(rw) : "ar.ccv", "p7", "r2", "r29", "memory"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/asm-ia64/spinlock.h:156:
+ smp_mb__before_clear_bit();   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/asm-ia64/spinlock.h:157:
+ clear_bit(31, (x));    \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#312: FILE: include/asm-ppc/spinlock.h:21:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0, 0, 0 }

CHECK:SPACING: No space is necessary after a cast
#315: FILE: include/asm-ppc/spinlock.h:23:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#315: FILE: include/asm-ppc/spinlock.h:23:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#328: FILE: include/asm-ppc/spinlock.h:90:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

CHECK:SPACING: No space is necessary after a cast
#331: FILE: include/asm-ppc/spinlock.h:92:
+#define RW_LOCK_UNLOCKED (rwlock_t) 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#331: FILE: include/asm-ppc/spinlock.h:92:
+#define RW_LOCK_UNLOCKED (rwlock_t) 0

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: include/asm-ppc/spinlock.h:95:
+#define rwlock_init(lp)  do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#337: FILE: include/asm-ppc/spinlock.h:95:
+#define rwlock_init(lp)  do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#350: FILE: include/asm-sparc/spinlock.h:16:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#364: FILE: include/asm-sparc/spinlock.h:34:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#382: FILE: include/asm-x86_64/spinlock.h:26:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 1, SPINLOCK_MAGIC }

CHECK:SPACING: No space is necessary after a cast
#385: FILE: include/asm-x86_64/spinlock.h:28:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#385: FILE: include/asm-x86_64/spinlock.h:28:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) 1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#398: FILE: include/asm-x86_64/spinlock.h:119:
+#define RW_LOCK_UNLOCKED (rwlock_t) { RW_LOCK_BIAS, RWLOCK_MAGIC }

CHECK:SPACING: No space is necessary after a cast
#401: FILE: include/asm-x86_64/spinlock.h:121:
+#define RW_LOCK_UNLOCKED (rwlock_t) RW_LOCK_BIAS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#401: FILE: include/asm-x86_64/spinlock.h:121:
+#define RW_LOCK_UNLOCKED (rwlock_t) RW_LOCK_BIAS

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#414: FILE: include/asm-x86_64/spinlock.h:155:
+#define _raw_read_unlock(rw) asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")
                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#414: FILE: include/asm-x86_64/spinlock.h:155:
+#define _raw_read_unlock(rw) asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 57 warnings, 8 checks, 357 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
