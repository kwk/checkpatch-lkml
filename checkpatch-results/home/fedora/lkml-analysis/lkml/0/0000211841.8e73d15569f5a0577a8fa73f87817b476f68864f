WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
>>+#define I2C_ALGO_MV64XXX 0x170000       /* Marvell mv64xxx i2c ctlr     */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: drivers/i2c/busses/i2c-mv64xxx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#120: FILE: drivers/i2c/busses/i2c-mv64xxx.c:2:
+ * drivers/i2c/busses/i2c-mv64xxx.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: drivers/i2c/busses/i2c-mv64xxx.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#140: FILE: drivers/i2c/busses/i2c-mv64xxx.c:22:
+#include <asm/io.h>

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_fsm', this function's name, in a string
#158: FILE: drivers/i2c/busses/i2c-mv64xxx.c:40:
+	pr_debug("mv64xxx_i2c_fsm: ENTER--state: %d, status: 0x%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: drivers/i2c/busses/i2c-mv64xxx.c:41:
+	pr_debug("mv64xxx_i2c_fsm: ENTER--state: %d, status: 0x%x\n",
+		drv_data->state, status);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_fsm', this function's name, in a string
#169: FILE: drivers/i2c/busses/i2c-mv64xxx.c:51:
+		pr_debug("mv64xxx_i2c_fsm: EXIT--Entered when in IDLE state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_fsm', this function's name, in a string
#176: FILE: drivers/i2c/busses/i2c-mv64xxx.c:58:
+		pr_debug("mv64xxx_i2c_fsm: EXIT--Aborting\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#197: FILE: drivers/i2c/busses/i2c-mv64xxx.c:79:
+		/* FALLTHRU */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#206: FILE: drivers/i2c/busses/i2c-mv64xxx.c:88:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: drivers/i2c/busses/i2c-mv64xxx.c:88:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#220: FILE: drivers/i2c/busses/i2c-mv64xxx.c:102:
+		/* FALLTHRU */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#227: FILE: drivers/i2c/busses/i2c-mv64xxx.c:109:
+		/* FALLTHRU */

CHECK:BRACES: braces {} should be used on all arms of this statement
#229: FILE: drivers/i2c/busses/i2c-mv64xxx.c:111:
+		if (status != MV64XXX_I2C_STATUS_MAST_RD_DATA_ACK)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: drivers/i2c/busses/i2c-mv64xxx.c:113:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#256: FILE: drivers/i2c/busses/i2c-mv64xxx.c:138:
+		printk(KERN_ERR "mv64xxx_i2c_fsm: Ctlr Error -- "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_fsm', this function's name, in a string
#256: FILE: drivers/i2c/busses/i2c-mv64xxx.c:138:
+		printk(KERN_ERR "mv64xxx_i2c_fsm: Ctlr Error -- "

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: drivers/i2c/busses/i2c-mv64xxx.c:139:
+		printk(KERN_ERR "mv64xxx_i2c_fsm: Ctlr Error -- "
+			"state: 0x%x, status: 0x%x\n", drv_data->state, status);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#258: FILE: drivers/i2c/busses/i2c-mv64xxx.c:140:
+		printk(KERN_INFO "addr: 0x%x, flags: 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/i2c/busses/i2c-mv64xxx.c:141:
+		printk(KERN_INFO "addr: 0x%x, flags: 0x%x\n",
+			drv_data->msg->addr, drv_data->msg->flags);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_fsm', this function's name, in a string
#265: FILE: drivers/i2c/busses/i2c-mv64xxx.c:147:
+	pr_debug("mv64xxx_i2c_fsm: EXIT--action: %d, state: %d, rc: 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: drivers/i2c/busses/i2c-mv64xxx.c:148:
+	pr_debug("mv64xxx_i2c_fsm: EXIT--action: %d, state: %d, rc: 0x%x\n",
+		drv_data->action, drv_data->state, drv_data->rc);

WARNING:RETURN_VOID: void function return statements are not generally useful
#268: FILE: drivers/i2c/busses/i2c-mv64xxx.c:150:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_do_action', this function's name, in a string
#273: FILE: drivers/i2c/busses/i2c-mv64xxx.c:155:
+	pr_debug("mv64xxx_i2c_do_action: ENTER--action: %d, state: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#274: FILE: drivers/i2c/busses/i2c-mv64xxx.c:156:
+	pr_debug("mv64xxx_i2c_do_action: ENTER--action: %d, state: %d, "
+		"cntl: 0x%x\n", drv_data->action, drv_data->state,

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: drivers/i2c/busses/i2c-mv64xxx.c:159:
+	switch(drv_data->action) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: drivers/i2c/busses/i2c-mv64xxx.c:162:
+		writel(drv_data->cntl_bits,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/i2c/busses/i2c-mv64xxx.c:167:
+		writel(drv_data->cntl_bits | MV64XXX_I2C_REG_CONTROL_START,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/i2c/busses/i2c-mv64xxx.c:172:
+		writel(drv_data->addr1,
+			drv_data->reg_base + MV64XXX_I2C_REG_DATA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/i2c/busses/i2c-mv64xxx.c:174:
+		writel(drv_data->cntl_bits,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/i2c/busses/i2c-mv64xxx.c:179:
+		writel(drv_data->addr2,
+			drv_data->reg_base + MV64XXX_I2C_REG_DATA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/i2c/busses/i2c-mv64xxx.c:181:
+		writel(drv_data->cntl_bits,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/i2c/busses/i2c-mv64xxx.c:186:
+		writel(drv_data->msg->buf[drv_data->byte_posn++],
+			drv_data->reg_base + MV64XXX_I2C_REG_DATA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: drivers/i2c/busses/i2c-mv64xxx.c:188:
+		writel(drv_data->cntl_bits,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/i2c/busses/i2c-mv64xxx.c:195:
+		writel(drv_data->cntl_bits,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: drivers/i2c/busses/i2c-mv64xxx.c:203:
+		writel(drv_data->cntl_bits | MV64XXX_I2C_REG_CONTROL_STOP,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#328: FILE: drivers/i2c/busses/i2c-mv64xxx.c:210:
+		printk(KERN_ERR "mv64xxx_i2c_do_action: Invalid action: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_do_action', this function's name, in a string
#328: FILE: drivers/i2c/busses/i2c-mv64xxx.c:210:
+		printk(KERN_ERR "mv64xxx_i2c_do_action: Invalid action: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/i2c/busses/i2c-mv64xxx.c:211:
+		printk(KERN_ERR "mv64xxx_i2c_do_action: Invalid action: %d\n",
+			drv_data->action);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#331: FILE: drivers/i2c/busses/i2c-mv64xxx.c:213:
+		/* FALLTHRU */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/i2c/busses/i2c-mv64xxx.c:217:
+		writel(drv_data->cntl_bits | MV64XXX_I2C_REG_CONTROL_STOP,
+			drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mv64xxx_i2c_do_action', this function's name, in a string
#341: FILE: drivers/i2c/busses/i2c-mv64xxx.c:223:
+	pr_debug("mv64xxx_i2c_do_action: EXIT\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#343: FILE: drivers/i2c/busses/i2c-mv64xxx.c:225:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: drivers/i2c/busses/i2c-mv64xxx.c:257:
+mv64xxx_i2c_prepare_for_io(struct mv64xxx_i2c_data *drv_data,
+	struct i2c_msg *msg)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#396: FILE: drivers/i2c/busses/i2c-mv64xxx.c:278:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#396: FILE: drivers/i2c/busses/i2c-mv64xxx.c:278:
+	else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#402: FILE: drivers/i2c/busses/i2c-mv64xxx.c:284:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: drivers/i2c/busses/i2c-mv64xxx.c:293:
+	time_left = wait_event_interruptible_timeout(drv_data->waitq,
+		!drv_data->block, msecs_to_jiffies(drv_data->adapter.timeout));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#418: FILE: drivers/i2c/busses/i2c-mv64xxx.c:300:
+	}
+	else if (time_left < 0) { /* Interrupted/Error */

CHECK:BRACES: braces {} should be used on all arms of this statement
#423: FILE: drivers/i2c/busses/i2c-mv64xxx.c:305:
+	if (abort && drv_data->block) {
[...]
+	else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: drivers/i2c/busses/i2c-mv64xxx.c:310:
+		time_left = wait_event_timeout(drv_data->waitq,
+			!drv_data->block,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#433: FILE: drivers/i2c/busses/i2c-mv64xxx.c:315:
+			printk(KERN_WARNING "mv64xxx: I2C bus locked\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#436: FILE: drivers/i2c/busses/i2c-mv64xxx.c:318:
+	}
+	else

WARNING:RETURN_VOID: void function return statements are not generally useful
#440: FILE: drivers/i2c/busses/i2c-mv64xxx.c:322:
+	return;
+}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#457: FILE: drivers/i2c/busses/i2c-mv64xxx.c:339:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#457: FILE: drivers/i2c/busses/i2c-mv64xxx.c:339:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#464: FILE: drivers/i2c/busses/i2c-mv64xxx.c:346:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#464: FILE: drivers/i2c/busses/i2c-mv64xxx.c:346:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#487: FILE: drivers/i2c/busses/i2c-mv64xxx.c:369:
+	return I2C_FUNC_I2C |I2C_FUNC_10BIT_ADDR | I2C_FUNC_SMBUS_EMUL;
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#496: FILE: drivers/i2c/busses/i2c-mv64xxx.c:378:
+	for (i=0; i<num; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#496: FILE: drivers/i2c/busses/i2c-mv64xxx.c:378:
+	for (i=0; i<num; i++)
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#497: FILE: drivers/i2c/busses/i2c-mv64xxx.c:379:
+		if ((rc = mv64xxx_i2c_execute_msg(drv_data, &msgs[i])) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#517: FILE: drivers/i2c/busses/i2c-mv64xxx.c:399:
+static void __devinit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/i2c/busses/i2c-mv64xxx.c:404:
+	writel((((drv_data->freq_m & 0xf) << 3) | (drv_data->freq_n & 0x7)),
+		drv_data->reg_base + MV64XXX_I2C_REG_BAUD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: drivers/i2c/busses/i2c-mv64xxx.c:408:
+	writel(MV64XXX_I2C_REG_CONTROL_TWSIEN | MV64XXX_I2C_REG_CONTROL_STOP,
+		drv_data->reg_base + MV64XXX_I2C_REG_CONTROL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#529: FILE: drivers/i2c/busses/i2c-mv64xxx.c:411:
+	return;
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#531: FILE: drivers/i2c/busses/i2c-mv64xxx.c:413:
+static int __devinit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: drivers/i2c/busses/i2c-mv64xxx.c:415:
+mv64xxx_i2c_map_regs(struct platform_device *pd,
+	struct mv64xxx_i2c_data *drv_data)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#537: FILE: drivers/i2c/busses/i2c-mv64xxx.c:419:
+	if ((r = platform_get_resource(pd, IORESOURCE_MEM, 0)) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#537: FILE: drivers/i2c/busses/i2c-mv64xxx.c:419:
+	if ((r = platform_get_resource(pd, IORESOURCE_MEM, 0)) &&
[...]
+	else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/i2c/busses/i2c-mv64xxx.c:420:
+	if ((r = platform_get_resource(pd, IORESOURCE_MEM, 0)) &&
+		request_mem_region(r->start, MV64XXX_I2C_REG_BLOCK_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/i2c/busses/i2c-mv64xxx.c:421:
+		request_mem_region(r->start, MV64XXX_I2C_REG_BLOCK_SIZE,
+			drv_data->adapter.name)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#540: FILE: drivers/i2c/busses/i2c-mv64xxx.c:422:
+			drv_data->adapter.name)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: drivers/i2c/busses/i2c-mv64xxx.c:424:
+		drv_data->reg_base = ioremap(r->start,
+			MV64XXX_I2C_REG_BLOCK_SIZE);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#545: FILE: drivers/i2c/busses/i2c-mv64xxx.c:427:
+	}
+	else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#551: FILE: drivers/i2c/busses/i2c-mv64xxx.c:433:
+static void __devexit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: drivers/i2c/busses/i2c-mv64xxx.c:439:
+		release_mem_region(drv_data->reg_base_p,
+			MV64XXX_I2C_REG_BLOCK_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#563: FILE: drivers/i2c/busses/i2c-mv64xxx.c:445:
+	return;
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#565: FILE: drivers/i2c/busses/i2c-mv64xxx.c:447:
+static int __devinit

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pd->id == 0'
#573: FILE: drivers/i2c/busses/i2c-mv64xxx.c:455:
+	if ((pd->id == 0) && pdata) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#573: FILE: drivers/i2c/busses/i2c-mv64xxx.c:455:
+	if ((pd->id == 0) && pdata) {
[...]
+	else
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*drv_data)...) over kmalloc(sizeof(struct mv64xxx_i2c_data)...)
#574: FILE: drivers/i2c/busses/i2c-mv64xxx.c:456:
+		drv_data = kmalloc(sizeof(struct mv64xxx_i2c_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: drivers/i2c/busses/i2c-mv64xxx.c:485:
+		if (request_irq(drv_data->irq, mv64xxx_i2c_intr, 0,
+			MV64XXX_I2C_CTLR_NAME, drv_data)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#604: FILE: drivers/i2c/busses/i2c-mv64xxx.c:486:
+			MV64XXX_I2C_CTLR_NAME, drv_data)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#605: FILE: drivers/i2c/busses/i2c-mv64xxx.c:487:
+			printk(KERN_ERR "mv64xxx: Can't register intr handler "

WARNING:SPLIT_STRING: quoted string split across lines
#606: FILE: drivers/i2c/busses/i2c-mv64xxx.c:488:
+			printk(KERN_ERR "mv64xxx: Can't register intr handler "
+				"irq: %d\\n", drv_data->irq);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#612: FILE: drivers/i2c/busses/i2c-mv64xxx.c:494:
+		else if ((rc = i2c_add_adapter(&drv_data->adapter)) != 0) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#612: FILE: drivers/i2c/busses/i2c-mv64xxx.c:494:
+		}
+		else if ((rc = i2c_add_adapter(&drv_data->adapter)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#613: FILE: drivers/i2c/busses/i2c-mv64xxx.c:495:
+			printk(KERN_WARNING "mv64xxx: Can't add i2c adapter "

WARNING:SPLIT_STRING: quoted string split across lines
#614: FILE: drivers/i2c/busses/i2c-mv64xxx.c:496:
+			printk(KERN_WARNING "mv64xxx: Can't add i2c adapter "
+				"rc: %d\n", -rc);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#623: FILE: drivers/i2c/busses/i2c-mv64xxx.c:505:
+	}
+	else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#629: FILE: drivers/i2c/busses/i2c-mv64xxx.c:511:
+static int __devexit

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#650: FILE: drivers/i2c/busses/i2c-mv64xxx.c:532:
+static int __devinit

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#656: FILE: drivers/i2c/busses/i2c-mv64xxx.c:538:
+static void __devexit

WARNING:RETURN_VOID: void function return statements are not generally useful
#661: FILE: drivers/i2c/busses/i2c-mv64xxx.c:543:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#673: FILE: drivers/i2c/busses/i2c-mv64xxx.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#674: FILE: drivers/i2c/busses/i2c-mv64xxx.h:2:
+ * drivers/i2c/busses/i2c-mv64xxx.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: drivers/i2c/busses/i2c-mv64xxx.h:3:
+ * $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#766: FILE: drivers/i2c/busses/i2c-mv64xxx.h:94:
+	spinlock_t		lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000211841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 42 warnings, 41 checks, 716 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000211841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
