WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: drivers/powerop/Kconfig:7:
+config POWEROP
+	bool "PowerOP Platform Core Power Management"
+	help
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/powerop/Kconfig:11:
+config POWEROP_SYSFS
+	bool "  Enable PowerOP sysfs interface"
+	depends on POWEROP && SYSFS
+	help
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: drivers/powerop/powerop.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: drivers/powerop/powerop.c:27:
+^Ireturn powerop_driver && powerop_driver->set_point ? $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: drivers/powerop/powerop.c:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: drivers/powerop/powerop.c:35:
+^Ireturn powerop_driver && powerop_driver->get_point ? $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: drivers/powerop/powerop.c:39:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#131: FILE: drivers/powerop/powerop.c:40:
+EXPORT_SYMBOL_GPL(powerop_set_point);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: drivers/powerop/powerop.c:41:
+EXPORT_SYMBOL_GPL(powerop_get_point);

WARNING:RETURN_VOID: void function return statements are not generally useful
#140: FILE: drivers/powerop/powerop.c:49:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: drivers/powerop/powerop.c:53:
+        struct attribute        attr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: drivers/powerop/powerop.c:53:
+        struct attribute        attr;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: drivers/powerop/powerop.c:57:
+	struct powerop_param_attribute,attr)
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: drivers/powerop/powerop.c:60:
+powerop_param_attr_show(struct kobject * kobj, struct attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: drivers/powerop/powerop.c:60:
+powerop_param_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: drivers/powerop/powerop.c:61:
+			char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: drivers/powerop/powerop.c:63:
+	struct powerop_param_attribute * param_attr = to_param_attr(attr);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#158: FILE: drivers/powerop/powerop.c:67:
+	if ((ret = powerop_get_point(&point)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: drivers/powerop/powerop.c:73:
+powerop_param_attr_store(struct kobject * kobj, struct attribute * attr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/powerop/powerop.c:73:
+powerop_param_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/powerop/powerop.c:73:
+powerop_param_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: drivers/powerop/powerop.c:74:
+			 const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: drivers/powerop/powerop.c:76:
+	struct powerop_param_attribute * param_attr = to_param_attr(attr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: drivers/powerop/powerop.c:81:
+^Ifor (i = 0; i < powerop_driver->nr_params; i++) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: drivers/powerop/powerop.c:83:
+			point.param[i] = simple_strtol(buf,NULL,0);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: drivers/powerop/powerop.c:83:
+			point.param[i] = simple_strtol(buf,NULL,0);
 			                                       ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#174: FILE: drivers/powerop/powerop.c:83:
+			point.param[i] = simple_strtol(buf,NULL,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#178: FILE: drivers/powerop/powerop.c:87:
+	if ((ret = powerop_set_point(&point)) == 0)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#184: FILE: drivers/powerop/powerop.c:93:
+static struct sysfs_ops powerop_param_attr_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: drivers/powerop/powerop.c:107:
+        int error, i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/powerop/powerop.c:107:
+        int error, i;$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#200: FILE: drivers/powerop/powerop.c:109:
+	if (! powerop_subsys_init)
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#207: FILE: drivers/powerop/powerop.c:116:
+	if ((error = kobject_register(&powerop_driver->kobj))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#208: FILE: drivers/powerop/powerop.c:117:
+		printk(KERN_ERR "kobject_register for PowerOP driver failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/powerop/powerop.c:122:
+^I^Iif (! (param_attr[i] = $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#213: FILE: drivers/powerop/powerop.c:122:
+		if (! (param_attr[i] = 
 		    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#213: FILE: drivers/powerop/powerop.c:122:
+		if (! (param_attr[i] = 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#216: FILE: drivers/powerop/powerop.c:125:
+			printk(KERN_ERR "PowerOP: kmalloc failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: drivers/powerop/powerop.c:129:
+^I^Imemset(param_attr[i], 0, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: drivers/powerop/powerop.c:132:
+^I^Iparam_attr[i]->attr.name = $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#226: FILE: drivers/powerop/powerop.c:135:
+		if ((error = sysfs_create_file(&powerop_driver->kobj,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#228: FILE: drivers/powerop/powerop.c:137:
+			printk(KERN_ERR "sysfs_create_file for PowerOP param failed.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: drivers/powerop/powerop.c:142:
+        return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/powerop/powerop.c:142:
+        return error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: drivers/powerop/powerop.c:147:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: drivers/powerop/powerop.c:147:
+        int error;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#240: FILE: drivers/powerop/powerop.c:149:
+	if ((error = subsystem_register(&powerop_subsys)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#241: FILE: drivers/powerop/powerop.c:150:
+		printk(KERN_ERR "PowerOP subsystem register failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: drivers/powerop/powerop.c:153:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: drivers/powerop/powerop.c:154:
+	
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#246: FILE: drivers/powerop/powerop.c:155:
+	if (! error && powerop_driver)
 	    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: drivers/powerop/powerop.c:158:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: drivers/powerop/powerop.c:159:
+        return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: drivers/powerop/powerop.c:159:
+        return error;$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#257: FILE: drivers/powerop/powerop.c:166:
+	if (! powerop_subsys_init || ! powerop_driver)
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#257: FILE: drivers/powerop/powerop.c:166:
+	if (! powerop_subsys_init || ! powerop_driver)
 	                             ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#304: FILE: drivers/powerop/powerop.c:213:
+	if (! powerop_driver) {
 	    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#304: FILE: drivers/powerop/powerop.c:213:
+	if (! powerop_driver) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#305: FILE: drivers/powerop/powerop.c:214:
+		printk(KERN_INFO "PowerOP registering driver %s.\n", p->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#306: FILE: drivers/powerop/powerop.c:215:
+		if ((error = powerop_driver_sysfs_register(p)))

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: drivers/powerop/powerop.c:220:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#317: FILE: drivers/powerop/powerop.c:226:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#321: FILE: drivers/powerop/powerop.c:230:
+		printk(KERN_INFO "PowerOP unregistering driver %s.\n", p->name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#327: FILE: drivers/powerop/powerop.c:236:
+EXPORT_SYMBOL_GPL(powerop_driver_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#328: FILE: drivers/powerop/powerop.c:237:
+EXPORT_SYMBOL_GPL(powerop_driver_unregister);

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: drivers/powerop/powerop.c:241:
+        return powerop_sysfs_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/powerop/powerop.c:241:
+        return powerop_sysfs_init();$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#350: FILE: include/linux/powerop.h:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 23 warnings, 7 checks, 315 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
