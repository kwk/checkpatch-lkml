WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
I have never been happy with the way slab cache shrinking worked.  This is an

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#1 avoids the need to create mappings for the slab pages by intercepting them

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#2 was done to avoid having 500,000 plus dentry/inodes on a lightly loaded

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#4 uses ends up using kmem_cache_shrink_nr to shrink caches.  For the 

WARNING:TYPO_SPELLING: 'wraped' may be misspelled - perhaps 'wrapped'?
#55: 
caches that require pruning this call gets wraped.  The calling sequence
                                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#57: 
get enought pages via a simple shrink.
    ^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# This is a BitKeeper generated patch for the following project:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	           ChangeSet	1.422   -> 1.432  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	         fs/buffer.c	1.63    -> 1.64   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	         fs/dcache.c	1.18    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	          fs/dquot.c	1.18    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	         mm/vmscan.c	1.60    -> 1.68   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	include/linux/slab.h	1.9     -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	include/linux/dcache.h	1.11    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	           mm/slab.c	1.16    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	          fs/inode.c	1.35    -> 1.41   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 02/05/10	ed@oscar.et.ca	1.423

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# Use the vm's page aging to tell us when we need to shrink the caches.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# The vm uses callbacks to tell the slabs caches its time to shrink.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# 02/05/10	ed@oscar.et.ca	1.424

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# Change the way process_shrinks is called so refill_invalid does not

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
# need to be changed.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# 02/05/11	ed@oscar.et.ca	1.426

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
# Simplify the scheme.  Use per cache callbacks instead of per family.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
# This lets us target specific caches instead of being generic.  We

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# still include a generic call (kmem_cache_reap) as a failsafe

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# before ooming.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
# 02/05/11	ed@oscar.et.ca	1.428

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
# Change factoring, removing changes from background_aging and putting

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# the kmem_call_shrinkers call in kswapd.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
# 02/05/11	ed@oscar.et.ca	1.429

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
# Base the number of pages a cache is shrunk on the number of pages the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
# vm sees in refill_inactive_zone instead of on a magic priority.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
# 02/05/12	ed@oscar.et.ca	1.430

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
# improve shrink methods for dcache, dquota and icache

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# 02/05/12	ed@oscar.et.ca	1.428.1.1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
# The icache is a slave of the dcache.  We will not reuse the inodes so

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
# lets clean them all.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
# 02/05/12	ed@oscar.et.ca	1.428.1.2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
# Only call shrink callback if we have seen a slab's worth of pages

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
# 02/05/13	ed@oscar.et.ca	1.428.1.3

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
# Andrew Morton pointed out that kernal pages are big (8M) and the 

WARNING:TYPO_SPELLING: 'kernal' may be misspelled - perhaps 'kernel'?
#114: 
# Andrew Morton pointed out that kernal pages are big (8M) and the 
                                 ^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
# hardware reference bit is working with these big pages.  This makes 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
# aging slabs on 4K pages a little more difficult.  Andrew suggested 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
# hooking into the kmem_cache_alloc process and set the bit(s) there.  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
# This changeset does this.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
# 02/05/16	ed@oscar.et.ca	1.428.1.6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# Improve aging for dcache, inode and dquota pages by setting the ref

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# bits in the various lookup/get code.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
# 02/05/16	ed@oscar.et.ca	1.428.1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
# Add another kmem_touch_page in getblk for buffer_heads.  Convert

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
# kmem_touch_page to a macro.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
# 02/05/17	ed@oscar.et.ca	1.432

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
# Use the number of slab pages that enter or are requeued in the 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
# inactive dirty list as the goal for the number of pages to shrink 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
# a slab cache.  Each cache can have its own shrink callback, though

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
# only caches that need 'pruning' require specialized functions.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#136: 
--- a/fs/buffer.c	Fri May 17 23:36:37 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: fs/dcache.c:541:
+ * more memory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#187: FILE: fs/dcache.c:562:
+		prune_dcache(dentry_stat.nr_unused/priority);
 		                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#188: FILE: fs/dcache.c:563:
+		count += kmem_cache_shrink_nr(cachep, pages-count);
 		                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/dcache.c:1278:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: fs/dcache.c:1280:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#241: FILE: fs/dquot.c:1035:
+		count += kmem_cache_shrink_nr(cachep, pages-count);
 		                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#291: FILE: fs/inode.c:728:
+		count += kmem_cache_shrink_nr(cachep, pages-count);
 		                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/linux/slab.h:61:
+extern void kmem_set_shrinker(kmem_cache_t *, shrinker_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#336: FILE: include/linux/slab.h:61:
+extern void kmem_set_shrinker(kmem_cache_t *, shrinker_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'shrinker_t' should also have an identifier name
#336: FILE: include/linux/slab.h:61:
+extern void kmem_set_shrinker(kmem_cache_t *, shrinker_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: include/linux/slab.h:62:
+extern int kmem_call_shrinkers(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#337: FILE: include/linux/slab.h:62:
+extern int kmem_call_shrinkers(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#337: FILE: include/linux/slab.h:62:
+extern int kmem_call_shrinkers(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: include/linux/slab.h:63:
+extern void kmem_count_page(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#338: FILE: include/linux/slab.h:63:
+extern void kmem_count_page(struct page *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr) ^I^ISetPageReferenced(virt_to_page(addr));$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#339: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr) 		SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_pages(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#342: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_pages(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#342: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_pages(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#342: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_pages(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#342: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_pages(kmem_cache_t *, int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/linux/slab.h:70:
+extern int shrink_dcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#345: FILE: include/linux/slab.h:70:
+extern int shrink_dcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#345: FILE: include/linux/slab.h:70:
+extern int shrink_dcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#345: FILE: include/linux/slab.h:70:
+extern int shrink_dcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#345: FILE: include/linux/slab.h:70:
+extern int shrink_dcache_memory(kmem_cache_t *, int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#348: FILE: include/linux/slab.h:73:
+extern int shrink_icache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#348: FILE: include/linux/slab.h:73:
+extern int shrink_icache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#348: FILE: include/linux/slab.h:73:
+extern int shrink_icache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#348: FILE: include/linux/slab.h:73:
+extern int shrink_icache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#348: FILE: include/linux/slab.h:73:
+extern int shrink_icache_memory(kmem_cache_t *, int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: include/linux/slab.h:76:
+extern int shrink_dqcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#351: FILE: include/linux/slab.h:76:
+extern int shrink_dqcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#351: FILE: include/linux/slab.h:76:
+extern int shrink_dqcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#351: FILE: include/linux/slab.h:76:
+extern int shrink_dqcache_memory(kmem_cache_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#351: FILE: include/linux/slab.h:76:
+extern int shrink_dqcache_memory(kmem_cache_t *, int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/linux/slab.h:78:
+extern int kmem_cache_shrink_nr(kmem_cache_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#353: FILE: include/linux/slab.h:78:
+extern int kmem_cache_shrink_nr(kmem_cache_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#353: FILE: include/linux/slab.h:78:
+extern int kmem_cache_shrink_nr(kmem_cache_t *, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: mm/slab.c:217:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: mm/slab.c:387:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: mm/slab.c:387:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: mm/slab.c:389:
+void kmem_set_shrinker(kmem_cache_t * cachep, shrinker_t theshrinker) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: mm/slab.c:389:
+void kmem_set_shrinker(kmem_cache_t * cachep, shrinker_t theshrinker) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: mm/slab.c:398:
+	kmem_cache_t *cachep = GET_PAGE_CACHE(page);
+	cachep->count++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: mm/slab.c:402:
+int kmem_call_shrinkers(int priority, int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: mm/slab.c:407:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: mm/slab.c:407:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: mm/slab.c:408:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: mm/slab.c:408:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: mm/slab.c:409:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: mm/slab.c:409:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: mm/slab.c:410:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: mm/slab.c:410:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: mm/slab.c:411:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: mm/slab.c:411:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: mm/slab.c:413:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: mm/slab.c:413:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#399: FILE: mm/slab.c:413:
+        list_for_each(p,&cache_chain) {
                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#399: FILE: mm/slab.c:413:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: mm/slab.c:414:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: mm/slab.c:414:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#401: FILE: mm/slab.c:415:
+		int pgs = (1<<cachep->gfporder);
 		            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: mm/slab.c:416:
+		int pgs = (1<<cachep->gfporder);
+		if (cachep->count >= pgs) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cachep->shrinker"
#403: FILE: mm/slab.c:417:
+			if (cachep->shrinker == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: mm/slab.c:418:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#405: FILE: mm/slab.c:419:
+			pgs = pgs*(cachep->count+pgs-1)/pgs;
 			         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: mm/slab.c:419:
+			pgs = pgs*(cachep->count+pgs-1)/pgs;
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#405: FILE: mm/slab.c:419:
+			pgs = pgs*(cachep->count+pgs-1)/pgs;
 			                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#405: FILE: mm/slab.c:419:
+			pgs = pgs*(cachep->count+pgs-1)/pgs;
 			                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: mm/slab.c:422:
+^I^I}^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: mm/slab.c:423:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: mm/slab.c:423:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: mm/slab.c:424:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: mm/slab.c:424:
+        up(&cache_chain_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: mm/slab.c:428:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: mm/slab.c:430:
+int kmem_shrink_pages(kmem_cache_t * cachep, int pages, int priority, int gfp_mask) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: mm/slab.c:430:
+int kmem_shrink_pages(kmem_cache_t * cachep, int pages, int priority, int gfp_mask) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: mm/slab.c:581:
+        if (!(cachep->flags & SLAB_NO_REAP)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: mm/slab.c:581:
+        if (!(cachep->flags & SLAB_NO_REAP)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: mm/slab.c:582:
+        ^Iunsigned long i = (1<<cachep->gfporder);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: mm/slab.c:582:
+        ^Iunsigned long i = (1<<cachep->gfporder);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: mm/slab.c:582:
+        ^Iunsigned long i = (1<<cachep->gfporder);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#443: FILE: mm/slab.c:582:
+        	unsigned long i = (1<<cachep->gfporder);
         	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: mm/slab.c:583:
+        ^Istruct page *page = virt_to_page(slabp->s_mem-slabp->colouroff);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: mm/slab.c:583:
+        ^Istruct page *page = virt_to_page(slabp->s_mem-slabp->colouroff);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: mm/slab.c:583:
+        ^Istruct page *page = virt_to_page(slabp->s_mem-slabp->colouroff);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#444: FILE: mm/slab.c:583:
+        	struct page *page = virt_to_page(slabp->s_mem-slabp->colouroff);
         	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: mm/slab.c:584:
+        ^Iwhile (i--) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: mm/slab.c:584:
+        ^Iwhile (i--) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: mm/slab.c:584:
+        	struct page *page = virt_to_page(slabp->s_mem-slabp->colouroff);
+        	while (i--) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: mm/slab.c:584:
+        ^Iwhile (i--) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: mm/slab.c:586:
+                ^Ipage++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: mm/slab.c:586:
+                ^Ipage++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: mm/slab.c:586:
+                ^Ipage++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: mm/slab.c:588:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: mm/slab.c:588:
+        }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: mm/slab.c:591:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#460: FILE: mm/slab.c:853:
+	cachep->shrinker = ( shrinker_t)(kmem_shrink_pages);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#511: FILE: mm/slab.c:1059:
+	ret = __kmem_cache_shrink_locked(cachep, pages>>cachep->gfporder);
 	                                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#540: FILE: mm/vmscan.c:106:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: mm/vmscan.c:251:
+		if (page_referenced(page) &&
+				(page_mapping_inuse(page) || PageSlab(page)) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#593: FILE: mm/vmscan.c:514:
+			if (PageSlab(page))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#595: FILE: mm/vmscan.c:516:
+			else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#596: FILE: mm/vmscan.c:517:
+				if (++nr_deactivated > target)
 				break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#606: FILE: mm/vmscan.c:534:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 129 warnings, 27 checks, 470 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
