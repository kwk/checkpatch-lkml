WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#55: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#76: FILE: mm/slab.c:258:
+	int (*ctor)(void *, kmem_cache_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#76: FILE: mm/slab.c:258:
+	int (*ctor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#76: FILE: mm/slab.c:258:
+	int (*ctor)(void *, kmem_cache_t *, unsigned long);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: mm/slab.c:1258:
+static int cache_init_objs (kmem_cache_t * cachep,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#102: FILE: mm/slab.c:1258:
+static int cache_init_objs (kmem_cache_t * cachep,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: mm/slab.c:1259:
+static int cache_init_objs (kmem_cache_t * cachep,
 			struct slab * slabp, unsigned long ctor_flags)

ERROR:SPACING: space required after that ';' (ctx:BxV)
#138: FILE: mm/slab.c:1308:
+		for (;i >= 0;i--) {
 		     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#138: FILE: mm/slab.c:1308:
+		for (;i >= 0;i--) {
 		            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#139: FILE: mm/slab.c:1309:
+			void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: mm/slab.c:1309:
+			void* objp = slabp->s_mem+cachep->objsize*i;
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#139: FILE: mm/slab.c:1309:
+			void* objp = slabp->s_mem+cachep->objsize*i;
 			                                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: mm/slab.c:1631:
+static void cache_return_obj (kmem_cache_t *cachep, void *objp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: mm/slab.c:1634:
+	unsigned long flags;
+	if (cachep->flags & SLAB_RED_ZONE) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: mm/slab.c:1639:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: mm/slab.c:1640:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#191: FILE: mm/slab.c:1642:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: ./fs/xfs/linux/xfs_super.c:365:
+STATIC int $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: ./fs/jfs/super.c:398:
+static int init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: ./fs/nfs/inode.c:1551:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: ./fs/nfs/inode.c:1551:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: ./fs/hfs/super.c:61:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: ./fs/hfs/super.c:61:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: ./fs/ufs/super.c:1017:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: ./fs/ufs/super.c:1017:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: ./fs/jffs2/super.c:49:
+static int jffs2_i_init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: ./fs/jffs2/super.c:49:
+static int jffs2_i_init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: ./fs/coda/inode.c:59:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: ./fs/coda/inode.c:59:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: ./fs/ext2/super.c:168:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: ./fs/ext2/super.c:168:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: ./fs/adfs/super.c:223:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: ./fs/adfs/super.c:223:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: ./fs/udf/super.c:130:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: ./fs/udf/super.c:130:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: ./fs/proc/inode.c:112:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: ./fs/proc/inode.c:112:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: ./fs/bfs/inode.c:229:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: ./fs/bfs/inode.c:229:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: ./fs/reiserfs/super.c:427:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: ./fs/reiserfs/super.c:427:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: ./fs/ncpfs/inode.c:59:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: ./fs/ncpfs/inode.c:59:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: ./fs/ntfs/super.c:1602:
+static int ntfs_big_inode_init_once(void *foo, kmem_cache_t *cachep,
 		unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: ./fs/hpfs/super.c:177:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: ./fs/hpfs/super.c:177:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#555: FILE: ./fs/fat/inode.c:675:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#555: FILE: ./fs/fat/inode.c:675:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: ./fs/ext3/super.c:467:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: ./fs/ext3/super.c:467:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#593: FILE: ./fs/smbfs/inode.c:67:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#593: FILE: ./fs/smbfs/inode.c:67:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: ./fs/isofs/inode.c:95:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: ./fs/isofs/inode.c:95:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: ./fs/efs/super.c:47:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: ./fs/efs/super.c:47:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#647: FILE: ./fs/affs/super.c:103:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#647: FILE: ./fs/affs/super.c:103:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: ./fs/romfs/inode.c:566:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: ./fs/romfs/inode.c:566:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: ./fs/minix/inode.c:68:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: ./fs/minix/inode.c:68:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: ./fs/qnx4/inode.c:523:
+static int init_once(void *foo, kmem_cache_t * cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: ./fs/qnx4/inode.c:524:
+static int init_once(void *foo, kmem_cache_t * cachep,
 		      unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#721: FILE: ./fs/befs/linuxvfs.c:296:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#721: FILE: ./fs/befs/linuxvfs.c:296:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: ./fs/cifs/cifsfs.c:299:
+static int $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#797: FILE: ./fs/block_dev.c:226:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#797: FILE: ./fs/block_dev.c:226:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: ./fs/char_dev.c:23:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: ./fs/char_dev.c:23:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: ./fs/inode.c:184:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: ./fs/inode.c:184:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: ./net/core/skbuff.c:229:
+static inline int skb_headerinit(void *p, kmem_cache_t *cache,
 				  unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#942: FILE: ./net/socket.c:300:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#942: FILE: ./net/socket.c:300:
+static int init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 9 warnings, 7 checks, 740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
