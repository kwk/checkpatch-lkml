WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#34: 
	in the system.  (i.e. systemcfg->processorcount isnt the desired
	                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#40: 
      - removed unneeded parms from get-system-parameter rtas_call.
                         ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
      - this should apply clean to latest linus tree.  (test-applied against

CHECK:CAMELCASE: Avoid CamelCase: <itLpNaca>
#104: FILE: arch/ppc64/kernel/LparData.c:127:
+EXPORT_SYMBOL(itLpNaca);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xItExtVpdPanel>
#111: FILE: arch/ppc64/kernel/LparData.c:134:
+EXPORT_SYMBOL(xItExtVpdPanel);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#145: FILE: arch/ppc64/kernel/lparcfg.c:41:
+void log_plpar_hcall_return(unsigned long rc,char * tag)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: arch/ppc64/kernel/lparcfg.c:41:
+void log_plpar_hcall_return(unsigned long rc,char * tag)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#147: FILE: arch/ppc64/kernel/lparcfg.c:43:
+	if (rc==0) /* success, return */
 	      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#151: FILE: arch/ppc64/kernel/lparcfg.c:47:
+		printk(KERN_INFO "plpar-hcall (%s) failed with hardware fault\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: arch/ppc64/kernel/lparcfg.c:47:
+		printk(KERN_INFO "plpar-hcall (%s) failed with hardware fault\n",tag);
 		                                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#153: FILE: arch/ppc64/kernel/lparcfg.c:49:
+		printk(KERN_INFO "plpar-hcall (%s) failed; function not allowed\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: arch/ppc64/kernel/lparcfg.c:49:
+		printk(KERN_INFO "plpar-hcall (%s) failed; function not allowed\n",tag);
 		                                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#155: FILE: arch/ppc64/kernel/lparcfg.c:51:
+		printk(KERN_INFO "plpar-hcall (%s) failed; not authorized to this function\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: arch/ppc64/kernel/lparcfg.c:51:
+		printk(KERN_INFO "plpar-hcall (%s) failed; not authorized to this function\n",tag);
 		                                                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#157: FILE: arch/ppc64/kernel/lparcfg.c:53:
+		printk(KERN_INFO "plpar-hcall (%s) failed; Bad parameter(s)\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: arch/ppc64/kernel/lparcfg.c:53:
+		printk(KERN_INFO "plpar-hcall (%s) failed; Bad parameter(s)\n",tag);
 		                                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#159: FILE: arch/ppc64/kernel/lparcfg.c:55:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: arch/ppc64/kernel/lparcfg.c:55:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);
 		                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: arch/ppc64/kernel/lparcfg.c:55:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);
 		                                                                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#161: FILE: arch/ppc64/kernel/lparcfg.c:57:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: arch/ppc64/kernel/lparcfg.c:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#249: FILE: arch/ppc64/kernel/lparcfg.c:67:
+extern unsigned char e2a(unsigned char);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#249: FILE: arch/ppc64/kernel/lparcfg.c:67:
+extern unsigned char e2a(unsigned char);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: arch/ppc64/kernel/lparcfg.c:72:
+static int lparcfg_data(struct seq_file *m,void *v)
                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#255: FILE: arch/ppc64/kernel/lparcfg.c:72:
+static int lparcfg_data(struct seq_file *m,void *v)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: arch/ppc64/kernel/lparcfg.c:81:
+	seq_printf(m, "serial_number=%c%c%c%c%c%c%c\n",
  		      e2a(xItExtVpdPanel.mfgID[2]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: arch/ppc64/kernel/lparcfg.c:90:
+	seq_printf(m, "system_type=%c%c%c%c\n",
  		      e2a(xItExtVpdPanel.machineType[0]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: arch/ppc64/kernel/lparcfg.c:99:
+	seq_printf(m, "system_active_processors=%d\n",
  		      (int)HvLpConfig_getSystemPhysicalProcessors());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: arch/ppc64/kernel/lparcfg.c:102:
+	seq_printf(m, "system_potential_processors=%d\n",
  		      (int)HvLpConfig_getSystemPhysicalProcessors());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: arch/ppc64/kernel/lparcfg.c:120:
+	seq_printf(m, "partition_max_entitled_capacity=%d\n",
  		      max_entitled_capacity);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#334: FILE: arch/ppc64/kernel/lparcfg.c:125:
+		seq_printf(m, "pool_capacity=%d\n", (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#334: FILE: arch/ppc64/kernel/lparcfg.c:125:
+		seq_printf(m, "pool_capacity=%d\n", (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));
 		                                                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getNumProcsInSharedPool>
#334: FILE: arch/ppc64/kernel/lparcfg.c:125:
+		seq_printf(m, "pool_capacity=%d\n", (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#357: FILE: arch/ppc64/kernel/lparcfg.c:159:
+static unsigned int h_get_ppp(unsigned long *entitled,unsigned long  *unallocated,unsigned long *aggregation,unsigned long *resource)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: arch/ppc64/kernel/lparcfg.c:159:
+static unsigned int h_get_ppp(unsigned long *entitled,unsigned long  *unallocated,unsigned long *aggregation,unsigned long *resource)
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: arch/ppc64/kernel/lparcfg.c:159:
+static unsigned int h_get_ppp(unsigned long *entitled,unsigned long  *unallocated,unsigned long *aggregation,unsigned long *resource)
                                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: arch/ppc64/kernel/lparcfg.c:159:
+static unsigned int h_get_ppp(unsigned long *entitled,unsigned long  *unallocated,unsigned long *aggregation,unsigned long *resource)
                                                                                                             ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#357: FILE: arch/ppc64/kernel/lparcfg.c:159:
+static unsigned int h_get_ppp(unsigned long *entitled,unsigned long  *unallocated,unsigned long *aggregation,unsigned long *resource)
  {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: arch/ppc64/kernel/lparcfg.c:164:
+	log_plpar_hcall_return(rc,"H_GET_PPP");
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: arch/ppc64/kernel/lparcfg.c:169:
+static void h_pic(unsigned long *pool_idle_time,unsigned long *num_procs)
                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	unsigned long dummy;
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#376: FILE: arch/ppc64/kernel/lparcfg.c:173:
+	rc = plpar_hcall(H_PIC,0,0,0,0,pool_idle_time,num_procs,&dummy);
 	                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: arch/ppc64/kernel/lparcfg.c:175:
+	log_plpar_hcall_return(rc,"H_PIC");
 	                         ^

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned long get_purr() should probably be unsigned long get_purr(void)
#386: FILE: arch/ppc64/kernel/lparcfg.c:183:
+static unsigned long get_purr()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#388: FILE: arch/ppc64/kernel/lparcfg.c:185:
+	unsigned long sum_purr=0;
 	                      ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#402: FILE: arch/ppc64/kernel/lparcfg.c:198:
+static void parse_system_parameter_string(struct seq_file *m)
  {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: arch/ppc64/kernel/lparcfg.c:202:
+	char * local_buffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: arch/ppc64/kernel/lparcfg.c:203:
+	char * local_buffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);
+	if (!local_buffer) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 		                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 		                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 		                                                                           ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+	if (!local_buffer) {
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#415: FILE: arch/ppc64/kernel/lparcfg.c:204:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: arch/ppc64/kernel/lparcfg.c:214:
+	memcpy(local_buffer,rtas_data_buf, SPLPAR_MAXLENGTH);
 	                   ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);
 		                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);
 		                                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);
 		                                                                                           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#435: FILE: arch/ppc64/kernel/lparcfg.c:218:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%lx)\n",__FILE__,__FUNCTION__,call_status);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#442: FILE: arch/ppc64/kernel/lparcfg.c:221:
+		int idx,w_idx;
 		       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: arch/ppc64/kernel/lparcfg.c:222:
+		char * workbuffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#444: FILE: arch/ppc64/kernel/lparcfg.c:223:
+		char * workbuffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);
+		if (!workbuffer) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                                           ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#445: FILE: arch/ppc64/kernel/lparcfg.c:224:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#450: FILE: arch/ppc64/kernel/lparcfg.c:229:
+		printk(KERN_INFO "success calling get-system-parameter \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#450: FILE: arch/ppc64/kernel/lparcfg.c:229:
+		printk(KERN_INFO "success calling get-system-parameter \n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#452: FILE: arch/ppc64/kernel/lparcfg.c:231:
+		splpar_strlen=local_buffer[0]*16+local_buffer[1];
 		             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#452: FILE: arch/ppc64/kernel/lparcfg.c:231:
+		splpar_strlen=local_buffer[0]*16+local_buffer[1];
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#452: FILE: arch/ppc64/kernel/lparcfg.c:231:
+		splpar_strlen=local_buffer[0]*16+local_buffer[1];
 		                                ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#453: FILE: arch/ppc64/kernel/lparcfg.c:232:
+		local_buffer+=2; /* step over strlen value */
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#456: FILE: arch/ppc64/kernel/lparcfg.c:235:
+		w_idx=0; idx=0;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#456: FILE: arch/ppc64/kernel/lparcfg.c:235:
+		w_idx=0; idx=0;
 		            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#457: FILE: arch/ppc64/kernel/lparcfg.c:236:
+		while ((*local_buffer) && (idx<splpar_strlen)) {
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#458: FILE: arch/ppc64/kernel/lparcfg.c:237:
+			workbuffer[w_idx++]=local_buffer[idx++];
 			                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#459: FILE: arch/ppc64/kernel/lparcfg.c:238:
+			if ((local_buffer[idx]==',')||(local_buffer[idx]=='\0')) {
 			                      ^

ERROR:SPACING: spaces required around that '||' (ctx:VxV)
#459: FILE: arch/ppc64/kernel/lparcfg.c:238:
+			if ((local_buffer[idx]==',')||(local_buffer[idx]=='\0')) {
 			                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#459: FILE: arch/ppc64/kernel/lparcfg.c:238:
+			if ((local_buffer[idx]==',')||(local_buffer[idx]=='\0')) {
 			                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#460: FILE: arch/ppc64/kernel/lparcfg.c:239:
+				workbuffer[w_idx]='\0';
 				                 ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#461: FILE: arch/ppc64/kernel/lparcfg.c:240:
+				if (w_idx) /* avoid the empty string */
+				{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: arch/ppc64/kernel/lparcfg.c:242:
+					seq_printf(m, "%s\n",workbuffer);
 					                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: arch/ppc64/kernel/lparcfg.c:246:
+				w_idx=0;
 				     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#468: FILE: arch/ppc64/kernel/lparcfg.c:247:
+			} else if (local_buffer[idx]=='=') {
 			                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#470: FILE: arch/ppc64/kernel/lparcfg.c:249:
+				/* code here to replace workbuffer contents
+				 with different keyword strings */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#470: FILE: arch/ppc64/kernel/lparcfg.c:249:
+				 with different keyword strings */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#471: FILE: arch/ppc64/kernel/lparcfg.c:250:
+				if (0==strcmp(workbuffer,"MaxEntCap")) {
 				     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: arch/ppc64/kernel/lparcfg.c:250:
+				if (0==strcmp(workbuffer,"MaxEntCap")) {
 				                        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#471: FILE: arch/ppc64/kernel/lparcfg.c:250:
+				if (0==strcmp(workbuffer,"MaxEntCap")) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: arch/ppc64/kernel/lparcfg.c:251:
+					strcpy(workbuffer,"partition_max_entitled_capacity\0");
 					                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#473: FILE: arch/ppc64/kernel/lparcfg.c:252:
+					w_idx=strlen(workbuffer);
 					     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#475: FILE: arch/ppc64/kernel/lparcfg.c:254:
+				if (0==strcmp(workbuffer,"MaxPlatProcs")) {
 				     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#475: FILE: arch/ppc64/kernel/lparcfg.c:254:
+				if (0==strcmp(workbuffer,"MaxPlatProcs")) {
 				                        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#475: FILE: arch/ppc64/kernel/lparcfg.c:254:
+				if (0==strcmp(workbuffer,"MaxPlatProcs")) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: arch/ppc64/kernel/lparcfg.c:255:
+					strcpy(workbuffer,"system_potential_processors\0");
 					                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#477: FILE: arch/ppc64/kernel/lparcfg.c:256:
+					w_idx=strlen(workbuffer);
 					     ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#482: FILE: arch/ppc64/kernel/lparcfg.c:261:
+		local_buffer-=2; /* back up over strlen value */
 		            ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#486: FILE: arch/ppc64/kernel/lparcfg.c:265:
+	return;
+}

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int lparcfg_count_active_processors() should probably be int lparcfg_count_active_processors(void)
#494: FILE: arch/ppc64/kernel/lparcfg.c:273:
+static int lparcfg_count_active_processors()

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#497: FILE: arch/ppc64/kernel/lparcfg.c:276:
+	int count=0;
 	         ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#499: FILE: arch/ppc64/kernel/lparcfg.c:278:
+		while ((cpus_dn = of_find_node_by_type(cpus_dn, "cpu"))) {
[...]
+		    printk(KERN_ERR "cpus_dn %p \n",cpus_dn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#501: FILE: arch/ppc64/kernel/lparcfg.c:280:
+		    printk(KERN_ERR "cpus_dn %p \n",cpus_dn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#501: FILE: arch/ppc64/kernel/lparcfg.c:280:
+		    printk(KERN_ERR "cpus_dn %p \n",cpus_dn);
 		                                   ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#501: FILE: arch/ppc64/kernel/lparcfg.c:280:
+		    printk(KERN_ERR "cpus_dn %p \n",cpus_dn);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#509: FILE: arch/ppc64/kernel/lparcfg.c:287:
+static int lparcfg_data(struct seq_file *m, void *v)
  {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#532: FILE: arch/ppc64/kernel/lparcfg.c:302:
+		if (lp_index_ptr) lp_index = *lp_index_ptr;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: arch/ppc64/kernel/lparcfg.c:306:
+	seq_printf(m,"%s %s \n",MODULE_NAME,MODULE_VERS);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: arch/ppc64/kernel/lparcfg.c:306:
+	seq_printf(m,"%s %s \n",MODULE_NAME,MODULE_VERS);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: arch/ppc64/kernel/lparcfg.c:306:
+	seq_printf(m,"%s %s \n",MODULE_NAME,MODULE_VERS);
 	                                   ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#546: FILE: arch/ppc64/kernel/lparcfg.c:306:
+	seq_printf(m,"%s %s \n",MODULE_NAME,MODULE_VERS);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: arch/ppc64/kernel/lparcfg.c:308:
+	seq_printf(m,"serial_number=%s\n", system_id);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#552: FILE: arch/ppc64/kernel/lparcfg.c:310:
+	seq_printf(m,"system_type=%s\n", model);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: arch/ppc64/kernel/lparcfg.c:312:
+	seq_printf(m,"partition_id=%d\n", (int)lp_index);
 	            ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#563: FILE: arch/ppc64/kernel/lparcfg.c:317:
+	if (lrdrp == NULL) {
[...]
  	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lrdrp"
#563: FILE: arch/ppc64/kernel/lparcfg.c:317:
+	if (lrdrp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: arch/ppc64/kernel/lparcfg.c:324:
+		unsigned long h_entitled,h_unallocated,h_aggregation,h_resource;
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: arch/ppc64/kernel/lparcfg.c:324:
+		unsigned long h_entitled,h_unallocated,h_aggregation,h_resource;
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: arch/ppc64/kernel/lparcfg.c:324:
+		unsigned long h_entitled,h_unallocated,h_aggregation,h_resource;
 		                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#573: FILE: arch/ppc64/kernel/lparcfg.c:325:
+		unsigned long pool_idle_time,pool_procs;
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#598: FILE: arch/ppc64/kernel/lparcfg.c:335:
+		h_pic(&pool_idle_time,&pool_procs);
 		                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#598: FILE: arch/ppc64/kernel/lparcfg.c:335:
+		h_pic(&pool_idle_time,&pool_procs);
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: arch/ppc64/kernel/lparcfg.c:343:
+		seq_printf(m, "partition_entitled_capacity=%ld\n",
+			      h_entitled);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: arch/ppc64/kernel/lparcfg.c:346:
+		seq_printf(m, "pool=%ld\n",
+			      (h_aggregation >> 0*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#609: FILE: arch/ppc64/kernel/lparcfg.c:346:
+			      (h_aggregation >> 0*8) & 0xffff);
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: arch/ppc64/kernel/lparcfg.c:349:
+		seq_printf(m, "group=%ld\n",
+			      (h_aggregation >> 2*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#612: FILE: arch/ppc64/kernel/lparcfg.c:349:
+			      (h_aggregation >> 2*8) & 0xffff);
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: arch/ppc64/kernel/lparcfg.c:352:
+		seq_printf(m, "system_active_processors=%ld\n",
+			      (h_resource >> 0*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#615: FILE: arch/ppc64/kernel/lparcfg.c:352:
+			      (h_resource >> 0*8) & 0xffff);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: arch/ppc64/kernel/lparcfg.c:355:
+		seq_printf(m, "pool_capacity=%ld\n",
  			      (h_resource >> 2*8) & 0xffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: arch/ppc64/kernel/lparcfg.c:358:
+		seq_printf(m, "unallocated_capacity_weight=%ld\n",
+			      (h_resource >> 4*8) & 0xFF);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#639: FILE: arch/ppc64/kernel/lparcfg.c:358:
+			      (h_resource >> 4*8) & 0xFF);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: arch/ppc64/kernel/lparcfg.c:361:
+		seq_printf(m, "capacity_weight=%ld\n",
+			      (h_resource >> 5*8) & 0xFF);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#651: FILE: arch/ppc64/kernel/lparcfg.c:361:
+			      (h_resource >> 5*8) & 0xFF);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: arch/ppc64/kernel/lparcfg.c:364:
+		seq_printf(m, "capped=%ld\n",
+			      (h_resource >> 6*8) & 0x01);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#657: FILE: arch/ppc64/kernel/lparcfg.c:364:
+			      (h_resource >> 6*8) & 0x01);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: arch/ppc64/kernel/lparcfg.c:367:
+		seq_printf(m, "unallocated_capacity=%ld\n",
+			      h_unallocated);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: arch/ppc64/kernel/lparcfg.c:370:
+		seq_printf(m, "pool_idle_time=%ld\n",
+			      pool_idle_time);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: arch/ppc64/kernel/lparcfg.c:373:
+		seq_printf(m, "pool_num_procs=%ld\n",
+			      pool_procs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: arch/ppc64/kernel/lparcfg.c:376:
+		seq_printf(m, "purr=%ld\n",
+			      purr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: arch/ppc64/kernel/lparcfg.c:380:
+		seq_printf(m, "system_active_processors=%d\n",
+			      system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: arch/ppc64/kernel/lparcfg.c:383:
+		seq_printf(m, "system_potential_processors=%d\n",
+			      system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: arch/ppc64/kernel/lparcfg.c:386:
+		seq_printf(m, "partition_max_entitled_capacity=%d\n",
+			      100*system_active_processors);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#691: FILE: arch/ppc64/kernel/lparcfg.c:386:
+			      100*system_active_processors);
 			         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: arch/ppc64/kernel/lparcfg.c:389:
+		seq_printf(m, "partition_entitled_capacity=%d\n",
+			      system_active_processors*100);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#696: FILE: arch/ppc64/kernel/lparcfg.c:389:
+			      system_active_processors*100);
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: arch/ppc64/kernel/lparcfg.c:393:
+	seq_printf(m, "partition_active_processors=%d\n",
+			(int) lparcfg_count_active_processors());

CHECK:SPACING: No space is necessary after a cast
#700: FILE: arch/ppc64/kernel/lparcfg.c:393:
+			(int) lparcfg_count_active_processors());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: arch/ppc64/kernel/lparcfg.c:396:
+	seq_printf(m, "partition_potential_processors=%d\n",
+			system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: arch/ppc64/kernel/lparcfg.c:399:
+	seq_printf(m, "shared_processor_mode=%d\n",
+			paca[0].xLpPaca.xSharedProc);

CHECK:CAMELCASE: Avoid CamelCase: <xLpPaca>
#706: FILE: arch/ppc64/kernel/lparcfg.c:399:
+			paca[0].xLpPaca.xSharedProc);

CHECK:CAMELCASE: Avoid CamelCase: <xSharedProc>
#706: FILE: arch/ppc64/kernel/lparcfg.c:399:
+			paca[0].xLpPaca.xSharedProc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#761: FILE: arch/ppc64/kernel/lparcfg.c:500:
+	return single_open(file,lparcfg_data,NULL);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#761: FILE: arch/ppc64/kernel/lparcfg.c:500:
+	return single_open(file,lparcfg_data,NULL);
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#767: FILE: arch/ppc64/kernel/lparcfg.c:505:
+	read:		seq_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#767: FILE: arch/ppc64/kernel/lparcfg.c:505:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#769: FILE: arch/ppc64/kernel/lparcfg.c:507:
+	release:	single_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#769: FILE: arch/ppc64/kernel/lparcfg.c:507:
+	release:	single_release,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#781: FILE: arch/ppc64/kernel/viopath.c:104:
+extern unsigned char e2a(unsigned char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#781: FILE: arch/ppc64/kernel/viopath.c:104:
+extern unsigned char e2a(unsigned char);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#889: FILE: arch/ppc64/lib/e2a.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#890: FILE: arch/ppc64/lib/e2a.c:2:
+ *  arch/ppc64/lib/e2a.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#909: FILE: arch/ppc64/lib/e2a.c:21:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#910: FILE: arch/ppc64/lib/e2a.c:22:
+ * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#996: FILE: arch/ppc64/lib/e2a.c:108:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269821.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 88 errors, 45 warnings, 45 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269821.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
