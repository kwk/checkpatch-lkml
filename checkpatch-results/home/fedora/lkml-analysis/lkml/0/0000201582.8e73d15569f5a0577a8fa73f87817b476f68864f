CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#54: 
Sent: Freitag, 4. März 2005 20:24
                   ^

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Steve French'
#55: 
To: Steve French

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Jörn Engel; Luca Tettamanti; samba-technical; Linux Kernel Mailing'
#56: 
Cc: Jörn Engel; Luca Tettamanti; samba-technical; Linux Kernel Mailing

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#56: 
Cc: Jörn Engel; Luca Tettamanti; samba-technical; Linux Kernel Mailing
     ^

WARNING:TYPO_SPELLING: 'unnessesary' may be misspelled - perhaps 'unnecessary'?
#82: 
some unnessesary casts that can go the way of the Dodo (I believe Domen 
     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'interrested' may be misspelled - perhaps 'interested'?
#87: 
about whitespace changes only, but if you are interrested in such further 
                                              ^^^^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#98: FILE: fs/cifs/file.c:38:
filldir); /* BB removeme BB */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#127: FILE: fs/cifs/file.c:65:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#127: FILE: fs/cifs/file.c:65:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/cifs/file.c:66:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo,
 			if((pCifsFile->pfile == NULL)&& (pCifsFile->pid ==

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/cifs/file.c:66:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo,
current->tgid)){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#139: FILE: fs/cifs/file.c:74:
+		if (file->private_data != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#148: FILE: fs/cifs/file.c:80:
+				cERROR(1, ("could not find file instance for

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#164: FILE: fs/cifs/file.c:92:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode,
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#164: FILE: fs/cifs/file.c:92:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode,
 	                                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#164: FILE: fs/cifs/file.c:92:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode,
 	                                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#193: FILE: fs/cifs/file.c:152:
+	if (buf == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#217: FILE: fs/cifs/file.c:175:
+			pCifsFile->closePend = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#221: FILE: fs/cifs/file.c:178:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#221: FILE: fs/cifs/file.c:178:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#224: FILE: fs/cifs/file.c:180:
+			if (pCifsInode) {
[...]
first */

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#224: FILE: fs/cifs/file.c:180:
+			if (pCifsInode) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 0)
#252: FILE: fs/cifs/file.c:195:
+					if (buf) {
[...]
too? */

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#263: FILE: fs/cifs/file.c:201:
if(timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
+						if
(timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 
(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {
unchanged on server"));
+							cFYI(1, ("inode

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#270: FILE: fs/cifs/file.c:204:
+							cFYI(1, ("inode

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: fs/cifs/file.c:234:
+^I^I^Iif (oplock & CIFS_CREATE_ACTION) {           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#329: FILE: fs/cifs/file.c:262:
+static int cifs_relock_file(struct cifsFileInfo *cifsFile)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: fs/cifs/file.c:271:
+static int $

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#356: FILE: fs/cifs/file.c:294:
+	if (pCifsFile->invalidHandle == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#356: FILE: fs/cifs/file.c:294:
+	if (pCifsFile->invalidHandle == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#363: FILE: fs/cifs/file.c:300:
+	if (file->f_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#377: FILE: fs/cifs/file.c:313:
+	if (full_path == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#388: FILE: fs/cifs/file.c:344:
+/*	buf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);
+	if (!buf) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#452: FILE: fs/cifs/file.c:431:
+		if (pSMBFile->search_resume_name)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#469: FILE: fs/cifs/file.c:445:
+	if ((rc == 0) && CIFS_I(inode)->write_behind_rc)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <pCFileStruct>
#502: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#502: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#502: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/cifs/file.c:474:
+			cFYI(1, ("Closing uncompleted readdir with rc %d",
 			/* not much we can do if it fails anywway, ignore rc

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: fs/cifs/file.c:474:
+			cFYI(1, ("Closing uncompleted readdir with rc %d",
*/

CHECK:CAMELCASE: Avoid CamelCase: <pfLock>
#540: FILE: fs/cifs/file.c:497:
+int cifs_lock(struct file *file, int cmd, struct file_lock *pfLock)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#582: FILE: fs/cifs/file.c:615:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#587: FILE: fs/cifs/file.c:619:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#587: FILE: fs/cifs/file.c:619:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#598: FILE: fs/cifs/file.c:649:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#617: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#617: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#617: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: fs/cifs/file.c:666:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#680: FILE: fs/cifs/file.c:736:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#685: FILE: fs/cifs/file.c:740:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#685: FILE: fs/cifs/file.c:740:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#704: FILE: fs/cifs/file.c:756:
+	if (file->f_dentry->d_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#715: FILE: fs/cifs/file.c:770:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#734: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#734: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#734: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: fs/cifs/file.c:787:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#780: FILE: fs/cifs/file.c:845:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#780: FILE: fs/cifs/file.c:845:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to > PAGE_CACHE_SIZE'
#803: FILE: fs/cifs/file.c:874:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from > to'
#803: FILE: fs/cifs/file.c:874:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: fs/cifs/file.c:899:
+^I^Iif ((open_file->pfile) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#833: FILE: fs/cifs/file.c:899:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 
 			(open_file->pfile->f_flags & O_WRONLY))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: fs/cifs/file.c:900:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: fs/cifs/file.c:985:
+	cFYI(1, ("commit write for page %p up to position %lld for %d",
 	if (position > inode->i_size){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: fs/cifs/file.c:994:
+^I^I^I^Iif ((open_file->invalidHandle) && $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#965: FILE: fs/cifs/file.c:1026:
+		/* BB check if anything else missing out of ppw
+		   such as updating last write time */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#965: FILE: fs/cifs/file.c:1026:
+		   such as updating last write time */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#968: FILE: fs/cifs/file.c:1028:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#968: FILE: fs/cifs/file.c:1028:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: fs/cifs/file.c:1029:
+		rc = cifs_write(file, page_data+offset, to-offset,
                                         &position);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1034: FILE: fs/cifs/file.c:1097:
+	/* Rather than do the steps manually:
+	   lock the inode for writing

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1041: FILE: fs/cifs/file.c:1103:
+	   filemapfdatawrite appears easier for the time being */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1046: FILE: fs/cifs/file.c:1106:
+	if (rc == 0) /* reset wb rc if we were able to write out dirty pages
*/

CHECK:CAMELCASE: Avoid CamelCase: <pSMBr>
#1077: FILE: fs/cifs/file.c:1128:
+	struct smb_com_read_rsp *pSMBr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: fs/cifs/file.c:1148:
+		current_read_size = min_t(const int, read_size - total_read,
 		rc = -EAGAIN;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1137: FILE: fs/cifs/file.c:1221:
+	if ((file->f_flags & O_ACCMODE) == O_WRONLY) {
+		cFYI(1, ("attempting read on write only file instance"));
 	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: fs/cifs/file.c:1228:
+		current_read_size = min_t(const int, read_size - total_read,
 		rc = -EAGAIN;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1230: FILE: fs/cifs/file.c:1313:
+		if (PAGE_CACHE_SIZE > bytes_read) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#1274: FILE: fs/cifs/file.c:1362:
+	for(i = 0; i < num_pages; ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1281: FILE: fs/cifs/file.c:1367:
+		if (list_empty(page_list)) {
 			break;
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1299: FILE: fs/cifs/file.c:1384:
+		if (contig_pages + i >  num_pages) {
 			contig_pages = num_pages - i;
 		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: fs/cifs/file.c:1393:
+		read_size = min_t(const unsigned int, read_size,
 

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#1331: FILE: fs/cifs/file.c:1408:
+			if (rc== -EAGAIN) {
 			      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1365: FILE: fs/cifs/file.c:1453:
+^I^I^I^Ibytes_read, offset)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1395: FILE: fs/cifs/file.c:1481:
+static int $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1428: FILE: fs/cifs/file.c:1529:
+	cFYI(1, ("readpage %p at offset %d 0x%x\n", page, (int)offset,
 

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#1439: FILE: fs/cifs/file.c:1545:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1439: FILE: fs/cifs/file.c:1545:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsInode"
#1447: FILE: fs/cifs/file.c:1552:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#1456: FILE: fs/cifs/file.c:1559:
+		if (open_file == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1467: FILE: fs/cifs/file.c:1566:
+^I^Iif ((open_file->pfile) && $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1467: FILE: fs/cifs/file.c:1566:
+		if ((open_file->pfile) && 
[...]
 			 rc = FALSE;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#1467: FILE: fs/cifs/file.c:1566:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 
+		   (open_file->pfile->f_flags & O_WRONLY))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1468: FILE: fs/cifs/file.c:1567:
+^I^I   ((open_file->pfile->f_flags & O_RDWR) || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: fs/cifs/file.c:1567:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#1475: FILE: fs/cifs/file.c:1572:
+		if (tmp->next == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1488: FILE: fs/cifs/file.c:1581:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pfindData>
#1488: FILE: fs/cifs/file.c:1581:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1500: FILE: fs/cifs/file.c:1603:
+		   or retrieve from NTFS stream extended attribute */

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#1501: FILE: fs/cifs/file.c:1604:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#1501: FILE: fs/cifs/file.c:1604:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1585: FILE: fs/cifs/file.c:1803:
+static void $

CHECK:CAMELCASE: Avoid CamelCase: <Unicode>
#1587: FILE: fs/cifs/file.c:1805:
+		 unsigned int len, int Unicode, struct nls_table *nls_tab)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1597: FILE: fs/cifs/file.c:1816:
+^Iif (Unicode) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1608: FILE: fs/cifs/file.c:1825:
+		cERROR(1, ("failed new resume key allocate, length %d",
 				  cifsFile->resume_name_length));

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strtoUCS>
#1614: FILE: fs/cifs/file.c:1829:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1615: FILE: fs/cifs/file.c:1830:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,
 			filename, len, nls_tab);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1641: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1641: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1641: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {
 		return -ENOMEM;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1641: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1641: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1656: FILE: fs/cifs/file.c:1864:
+	if (rc) {
[...]
,pfindData->FileName));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1663: FILE: fs/cifs/file.c:1868:
+		cFYI(1, ("Error %d on filldir of %s", rc,
 	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1672: FILE: fs/cifs/file.c:1874:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pUnixFindData>
#1672: FILE: fs/cifs/file.c:1874:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1682: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1682: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1682: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1682: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1699: FILE: fs/cifs/file.c:1900:
+	if (rc) {
[...]
,pUnixFindData->FileName));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1706: FILE: fs/cifs/file.c:1904:
+		cFYI(1, ("Error %d on filldir of %s", rc,
 	}

CHECK:CAMELCASE: Avoid CamelCase: <experimEnabled>
#1723: FILE: fs/cifs/file.c:1931:
+	if (!experimEnabled)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#1731: FILE: fs/cifs/file.c:1938:
+	if (file->f_dentry == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSMaxBufSize>
#1740: FILE: fs/cifs/file.c:1946:
+	if (bufsize > CIFSMaxBufSize) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1749: FILE: fs/cifs/file.c:1953:
+	if (data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#1758: FILE: fs/cifs/file.c:1962:
+	if (full_path == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#1794: FILE: fs/cifs/file.c:2015:
+			if (file->private_data == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: fs/cifs/file.c:2018:
+					kmalloc(sizeof(struct cifsFileInfo),
 			if (file->private_data) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1808: FILE: fs/cifs/file.c:2033:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1808: FILE: fs/cifs/file.c:2033:
+ $

CHECK:SPACING: No space is necessary after a cast
#1809: FILE: fs/cifs/file.c:2034:
+				(FILE_DIRECTORY_INFO *)((char *) pfindData +

CHECK:CAMELCASE: Avoid CamelCase: <lastFindData>
#1817: FILE: fs/cifs/file.c:2037:
+			if ((char *)lastFindData > (char *)pfindData +

CHECK:CAMELCASE: Avoid CamelCase: <Illegal>
#1839: FILE: fs/cifs/file.c:2048:
+					cFYI(1, ("Illegal resume file name

ERROR:SPACING: space required before the open parenthesis '('
#1866: FILE: fs/cifs/file.c:2066:
+					for(i = 0;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1873: FILE: fs/cifs/file.c:2069:
+						if (i > bufsize - 64)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1903: FILE: fs/cifs/file.c:2086:
+				cFYI(1, ("Last file: %s with name %d bytes
 				                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1903: FILE: fs/cifs/file.c:2086:
+				cFYI(1, ("Last file: %s with name %d bytes
 				                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1903: FILE: fs/cifs/file.c:2086:
+				cFYI(1, ("Last file: %s with name %d bytes
 				                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Last>
#1903: FILE: fs/cifs/file.c:2086:
+				cFYI(1, ("Last file: %s with name %d bytes

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1908: FILE: fs/cifs/file.c:2089:
+				if (cifsFile->search_resume_name == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1969: FILE: fs/cifs/file.c:2210:
+			cFYI(1, ("Count: %d  End: %d ",
 			      le16_to_cpu(findNextParms.SearchCount),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1979: FILE: fs/cifs/file.c:2218:
+ bufsize) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1983: FILE: fs/cifs/file.c:2220:
+ bufsize) {$

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2041: FILE: fs/cifs/file.c:2256:
+						for (i=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2041: FILE: fs/cifs/file.c:2256:
+						for (i=0;
 						      ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2048: FILE: fs/cifs/file.c:2259:
+							if (i > bufsize -

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2109: FILE: fs/cifs/file.c:2364:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2111: FILE: fs/cifs/file.c:2365:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#2122: FILE: fs/cifs/file.c:2391:
+	FreeXid(xid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2128: FILE: fs/cifs/file.c:2395:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2129: FILE: fs/cifs/file.c:2396:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2129: FILE: fs/cifs/file.c:2396:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2130: FILE: fs/cifs/file.c:2397:
+		   unsigned to)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2135: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2135: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2135: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to == PAGE_CACHE_SIZE'
#2144: FILE: fs/cifs/file.c:2412:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from == 0'
#2144: FILE: fs/cifs/file.c:2412:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 32 warnings, 103 checks, 1942 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
