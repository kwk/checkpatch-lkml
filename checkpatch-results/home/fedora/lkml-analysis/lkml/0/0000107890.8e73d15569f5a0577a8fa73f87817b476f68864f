WARNING:TYPO_SPELLING: 'exising' may be misspelled - perhaps 'existing'?
#27: 
simple ones which can be added to exising code with minimum disruption
                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#71: FILE: drivers/leds/leds.h:31:
+#define led_trigger_set_default(x) do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: drivers/leds/leds.h:32:
+#define led_trigger_set(x, y) do {} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#98: FILE: include/linux/leds.h:56:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#125: FILE: include/linux/leds.h:83:
+#define INIT_LED_TRIGGER(x)		static struct led_trigger *x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#125: FILE: include/linux/leds.h:83:
+#define INIT_LED_TRIGGER(x)		static struct led_trigger *x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#126: FILE: include/linux/leds.h:84:
+#define INIT_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#126: FILE: include/linux/leds.h:84:
+#define INIT_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: include/linux/leds.h:94:
+#define led_trigger_register_simple(x, y) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#137: FILE: include/linux/leds.h:95:
+#define led_trigger_unregister_simple(x) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: include/linux/leds.h:96:
+#define led_trigger_event(x, y) do {} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: drivers/leds/led-triggers.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: drivers/leds/led-triggers.c:66:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#266: FILE: drivers/leds/led-triggers.c:76:
+		len += sprintf(buf+len, "[none] ");
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#268: FILE: drivers/leds/led-triggers.c:78:
+		len += sprintf(buf+len, "none ");
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#273: FILE: drivers/leds/led-triggers.c:83:
+			len += sprintf(buf+len, "[%s] ", trig->name);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#275: FILE: drivers/leds/led-triggers.c:85:
+			len += sprintf(buf+len, "%s ", trig->name);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#280: FILE: drivers/leds/led-triggers.c:90:
+	len += sprintf(len+buf, "\n");
 	                  ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#314: FILE: drivers/leds/led-triggers.c:124:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: drivers/leds/led-triggers.c:169:
+		if (!led_cdev->trigger && led_cdev->default_trigger &&
+				!strcmp(led_cdev->default_trigger, trigger->name))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trigger)...) over kzalloc(sizeof(struct led_trigger)...)
#372: FILE: drivers/leds/led-triggers.c:182:
+	trigger = kzalloc(sizeof(struct led_trigger), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: drivers/leds/led-triggers.c:191:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#410: FILE: drivers/leds/led-triggers.c:220:
+EXPORT_SYMBOL_GPL(led_trigger_set_default);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#411: FILE: drivers/leds/led-triggers.c:221:
+EXPORT_SYMBOL_GPL(led_trigger_show);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: drivers/leds/led-triggers.c:222:
+EXPORT_SYMBOL_GPL(led_trigger_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#416: FILE: drivers/leds/led-triggers.c:226:
+EXPORT_SYMBOL_GPL(led_trigger_unregister);

WARNING:TYPO_SPELLING: 'Tigger' may be misspelled - perhaps 'Trigger'?
#418: FILE: drivers/leds/led-triggers.c:228:
+/* Simple LED Tigger Interface */
               ^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: drivers/leds/led-triggers.c:230:
+EXPORT_SYMBOL_GPL(led_trigger_unregister_simple);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#421: FILE: drivers/leds/led-triggers.c:231:
+EXPORT_SYMBOL_GPL(led_trigger_event);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 11 warnings, 13 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
