WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
strcpy(), strncpy(), strcat(), strncat(), memcpy(), memset(), copy_from_user()

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#61: 
The gcc patch for this is not yet commited to the mainline branch of gcc;
                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#77: 
Signed-Off-By: Arjan van de Ven <arjan@infradead.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:LINE_SPACING: Please don't use multiple blank lines
#86: FILE: include/asm-i386/string.h:26:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: include/asm-i386/string.h:31:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: include/asm-i386/string.h:33:
+extern inline char * strcpy(char * dest,const char *src)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: include/asm-i386/string.h:33:
+extern inline char * strcpy(char * dest,const char *src)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: include/asm-i386/string.h:33:
+extern inline char * strcpy(char * dest,const char *src)
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/asm-i386/string.h:47:
+extern inline char * strncpy(char * dest,const char *src,size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/asm-i386/string.h:47:
+extern inline char * strncpy(char * dest,const char *src,size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: include/asm-i386/string.h:47:
+extern inline char * strncpy(char * dest,const char *src,size_t count)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: include/asm-i386/string.h:47:
+extern inline char * strncpy(char * dest,const char *src,size_t count)
                                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: include/asm-i386/string.h:66:
+extern inline char * strcat(char * dest,const char * src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: include/asm-i386/string.h:66:
+extern inline char * strcat(char * dest,const char * src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: include/asm-i386/string.h:66:
+extern inline char * strcat(char * dest,const char * src)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#112: FILE: include/asm-i386/string.h:66:
+extern inline char * strcat(char * dest,const char * src)
                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: include/asm-i386/string.h:83:
+extern inline char * strncat(char * dest,const char * src,size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: include/asm-i386/string.h:83:
+extern inline char * strncat(char * dest,const char * src,size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: include/asm-i386/string.h:83:
+extern inline char * strncat(char * dest,const char * src,size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/asm-i386/string.h:83:
+extern inline char * strncat(char * dest,const char * src,size_t count)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/asm-i386/string.h:83:
+extern inline char * strncat(char * dest,const char * src,size_t count)
                                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: include/asm-i386/uaccess.h:536:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/asm-i386/uaccess.h:538:
+unsigned long __must_check copy_to_user(void __user *to,
+				const void *from, unsigned long n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/asm-i386/uaccess.h:542:
+extern void __chk_fail(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: include/asm-i386/uaccess.h:544:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: include/asm-i386/uaccess.h:546:
+ * with the same name for the actual work. The easiest way to do this is to make $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/asm-i386/uaccess.h:547:
+ * an alias of the real function and just call this alias from the inline. $

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#164: FILE: include/asm-i386/uaccess.h:549:
+extern int __c_f_u_alias(void *to, const void __user *from, unsigned long __nbytes) __asm__ ("" "copy_from_user");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#164: FILE: include/asm-i386/uaccess.h:549:
+extern int __c_f_u_alias(void *to, const void __user *from, unsigned long __nbytes) __asm__ ("" "copy_from_user");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/asm-i386/uaccess.h:549:
+extern int __c_f_u_alias(void *to, const void __user *from, unsigned long __nbytes) __asm__ ("" "copy_from_user");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: include/asm-i386/uaccess.h:551:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: include/asm-i386/uaccess.h:552:
+extern unsigned long __always_inline __must_check $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#167: FILE: include/asm-i386/uaccess.h:552:
+extern unsigned long __always_inline __must_check 

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#168: FILE: include/asm-i386/uaccess.h:553:
+copy_from_user (void *to, const void __user *from, unsigned long __nbytes)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: include/asm-i386/uaccess.h:555:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: include/asm-i386/uaccess.h:556:
+ ^I * if we know the size of "to" then we can validate that we don't overrun the buffer.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: include/asm-i386/uaccess.h:556:
+ ^I * if we know the size of "to" then we can validate that we don't overrun the buffer.$

WARNING:TYPO_SPELLING: 'compiletime' may be misspelled - perhaps 'compile time'?
#172: FILE: include/asm-i386/uaccess.h:557:
+	 * note that if __nbytes is known at compiletime this check is nicely optimized out
 	                                     ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: include/asm-i386/uaccess.h:558:
+         */$

CHECK:SPACING: No space is necessary after a cast
#174: FILE: include/asm-i386/uaccess.h:559:
+	if (__bos0 (to) != (size_t) -1 && __nbytes > __bos0 (to))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: include/asm-i386/uaccess.h:559:
+	if (__bos0 (to) != (size_t) -1 && __nbytes > __bos0 (to))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: include/asm-i386/uaccess.h:559:
+	if (__bos0 (to) != (size_t) -1 && __nbytes > __bos0 (to))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#176: FILE: include/asm-i386/uaccess.h:561:
+	return __c_f_u_alias (to, from, __nbytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: include/asm-i386/uaccess.h:567:
+unsigned long __must_check copy_from_user(void *to,
+				const void __user *from, unsigned long n);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#186: FILE: include/asm-i386/uaccess.h:571:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/asm-ppc/uaccess.h:333:
+extern void __chk_fail(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: include/asm-ppc/uaccess.h:338:
+^I/* $

WARNING:TYPO_SPELLING: 'compiletime' may be misspelled - perhaps 'compile time'?
#202: FILE: include/asm-ppc/uaccess.h:340:
+	 * note that if __nbytes is known at compiletime this check is nicely optimized out
 	                                     ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: include/asm-ppc/uaccess.h:341:
+         */$

CHECK:SPACING: No space is necessary after a cast
#204: FILE: include/asm-ppc/uaccess.h:342:
+	if (__bos0 (to) != (size_t) -1 && size > __bos0 (to))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: include/asm-ppc/uaccess.h:342:
+	if (__bos0 (to) != (size_t) -1 && size > __bos0 (to))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: include/asm-ppc/uaccess.h:342:
+	if (__bos0 (to) != (size_t) -1 && size > __bos0 (to))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: include/linux/compiler-gcc3.h:33:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: include/linux/compiler-gcc3.h:34:
+#if  defined(__GNUC_RH_RELEASE__) && __GNUC_MINOR__ >= 4 && __GNUC_PATCHLEVEL__ >=2 $

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#218: FILE: include/linux/compiler-gcc3.h:34:
+#if  defined(__GNUC_RH_RELEASE__) && __GNUC_MINOR__ >= 4 && __GNUC_PATCHLEVEL__ >=2 
                                                                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#219: FILE: include/linux/compiler-gcc3.h:35:
+#define __bos(ptr) __builtin_object_size (ptr, 1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#219: FILE: include/linux/compiler-gcc3.h:35:
+#define __bos(ptr) __builtin_object_size (ptr, 1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#220: FILE: include/linux/compiler-gcc3.h:36:
+#define __bos0(ptr) __builtin_object_size (ptr, 0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#220: FILE: include/linux/compiler-gcc3.h:36:
+#define __bos0(ptr) __builtin_object_size (ptr, 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: include/linux/compiler-gcc4.h:18:
+#define __bos(ptr) __builtin_object_size (ptr, 1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#230: FILE: include/linux/compiler-gcc4.h:18:
+#define __bos(ptr) __builtin_object_size (ptr, 1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: include/linux/compiler-gcc4.h:19:
+#define __bos0(ptr) __builtin_object_size (ptr, 0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#231: FILE: include/linux/compiler-gcc4.h:19:
+#define __bos0(ptr) __builtin_object_size (ptr, 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: include/linux/compiler.h:166:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/slab.h:76:
+extern __attribute__((malloc)) void *__kmalloc(size_t, unsigned int __nocast); $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __malloc over __attribute__((malloc))
#258: FILE: include/linux/slab.h:76:
+extern __attribute__((malloc)) void *__kmalloc(size_t, unsigned int __nocast); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: include/linux/slab.h:78:
+static inline __attribute__((malloc)) void *kmalloc(size_t size, unsigned int __nocast flags) $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __malloc over __attribute__((malloc))
#261: FILE: include/linux/slab.h:78:
+static inline __attribute__((malloc)) void *kmalloc(size_t size, unsigned int __nocast flags) 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: include/linux/string.h:91:
 
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#282: FILE: include/linux/string.h:101:
+#define strcpy(dest, src) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strcpy_chk (dest, src, __bos (dest))                   \
+   : __strcpy_ichk (dest, src))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#282: FILE: include/linux/string.h:101:
+#define strcpy(dest, src) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strcpy_chk (dest, src, __bos (dest))                   \
+   : __strcpy_ichk (dest, src))

CHECK:SPACING: No space is necessary after a cast
#283: FILE: include/linux/string.h:102:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/linux/string.h:102:
+  ((__bos (dest) != (size_t) -1)                                        \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: include/linux/string.h:102:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/linux/string.h:103:
+   ? __builtin___strcpy_chk (dest, src, __bos (dest))                   \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: include/linux/string.h:103:
+   ? __builtin___strcpy_chk (dest, src, __bos (dest))                   \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: include/linux/string.h:103:
+   ? __builtin___strcpy_chk (dest, src, __bos (dest))                   \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/linux/string.h:104:
+   : __strcpy_ichk (dest, src))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#285: FILE: include/linux/string.h:104:
+   : __strcpy_ichk (dest, src))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: include/linux/string.h:106:
+__strcpy_ichk (char * __dest, const char * __src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: include/linux/string.h:106:
+__strcpy_ichk (char * __dest, const char * __src)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#287: FILE: include/linux/string.h:106:
+__strcpy_ichk (char * __dest, const char * __src)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/linux/string.h:108:
+  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: include/linux/string.h:108:
+  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: include/linux/string.h:108:
+  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#294: FILE: include/linux/string.h:113:
+#define strncpy(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \
+   : __strncpy_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#294: FILE: include/linux/string.h:113:
+#define strncpy(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \
+   : __strncpy_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#294: FILE: include/linux/string.h:113:
+#define strncpy(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \
+   : __strncpy_ichk (dest, src, len))

CHECK:SPACING: No space is necessary after a cast
#295: FILE: include/linux/string.h:114:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: include/linux/string.h:114:
+  ((__bos (dest) != (size_t) -1)                                        \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: include/linux/string.h:114:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/linux/string.h:115:
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: include/linux/string.h:115:
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: include/linux/string.h:115:
+   ? __builtin___strncpy_chk (dest, src, len, __bos (dest))             \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: include/linux/string.h:116:
+   : __strncpy_ichk (dest, src, len))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#297: FILE: include/linux/string.h:116:
+   : __strncpy_ichk (dest, src, len))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: include/linux/string.h:118:
+__strncpy_ichk (char * __dest, const char * __src, size_t __len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: include/linux/string.h:118:
+__strncpy_ichk (char * __dest, const char * __src, size_t __len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: include/linux/string.h:118:
+__strncpy_ichk (char * __dest, const char * __src, size_t __len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: include/linux/string.h:120:
+  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#301: FILE: include/linux/string.h:120:
+  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#301: FILE: include/linux/string.h:120:
+  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#306: FILE: include/linux/string.h:125:
+#define strcat(dest, src) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strcat_chk (dest, src, __bos (dest))                   \
+   : __strcat_ichk (dest, src))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#306: FILE: include/linux/string.h:125:
+#define strcat(dest, src) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strcat_chk (dest, src, __bos (dest))                   \
+   : __strcat_ichk (dest, src))

CHECK:SPACING: No space is necessary after a cast
#307: FILE: include/linux/string.h:126:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: include/linux/string.h:126:
+  ((__bos (dest) != (size_t) -1)                                        \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#307: FILE: include/linux/string.h:126:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: include/linux/string.h:127:
+   ? __builtin___strcat_chk (dest, src, __bos (dest))                   \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: include/linux/string.h:127:
+   ? __builtin___strcat_chk (dest, src, __bos (dest))                   \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: include/linux/string.h:127:
+   ? __builtin___strcat_chk (dest, src, __bos (dest))                   \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: include/linux/string.h:128:
+   : __strcat_ichk (dest, src))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: include/linux/string.h:128:
+   : __strcat_ichk (dest, src))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: include/linux/string.h:130:
+__strcat_ichk (char * __dest, const char * __src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: include/linux/string.h:130:
+__strcat_ichk (char * __dest, const char * __src)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: include/linux/string.h:130:
+__strcat_ichk (char * __dest, const char * __src)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: include/linux/string.h:132:
+  return __builtin___strcat_chk (__dest, __src, __bos (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#313: FILE: include/linux/string.h:132:
+  return __builtin___strcat_chk (__dest, __src, __bos (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#313: FILE: include/linux/string.h:132:
+  return __builtin___strcat_chk (__dest, __src, __bos (__dest));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#318: FILE: include/linux/string.h:137:
+#define strncat(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \
+   : __strncat_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#318: FILE: include/linux/string.h:137:
+#define strncat(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \
+   : __strncat_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#318: FILE: include/linux/string.h:137:
+#define strncat(dest, src, len) \
+  ((__bos (dest) != (size_t) -1)                                        \
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \
+   : __strncat_ichk (dest, src, len))

CHECK:SPACING: No space is necessary after a cast
#319: FILE: include/linux/string.h:138:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/linux/string.h:138:
+  ((__bos (dest) != (size_t) -1)                                        \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: include/linux/string.h:138:
+  ((__bos (dest) != (size_t) -1)                                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: include/linux/string.h:139:
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: include/linux/string.h:139:
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: include/linux/string.h:139:
+   ? __builtin___strncat_chk (dest, src, len, __bos (dest))             \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: include/linux/string.h:140:
+   : __strncat_ichk (dest, src, len))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#321: FILE: include/linux/string.h:140:
+   : __strncat_ichk (dest, src, len))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: include/linux/string.h:142:
+__strncat_ichk (char * __dest, const char * __src, size_t __len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: include/linux/string.h:142:
+__strncat_ichk (char * __dest, const char * __src, size_t __len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#323: FILE: include/linux/string.h:142:
+__strncat_ichk (char * __dest, const char * __src, size_t __len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: include/linux/string.h:144:
+  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: include/linux/string.h:144:
+  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: include/linux/string.h:144:
+  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#329: FILE: include/linux/string.h:148:
+#define memcpy(dest, src, len) \
+  ((__bos0 (dest) != (size_t) -1)                                       \
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \
+   : __memcpy_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#329: FILE: include/linux/string.h:148:
+#define memcpy(dest, src, len) \
+  ((__bos0 (dest) != (size_t) -1)                                       \
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \
+   : __memcpy_ichk (dest, src, len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#329: FILE: include/linux/string.h:148:
+#define memcpy(dest, src, len) \
+  ((__bos0 (dest) != (size_t) -1)                                       \
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \
+   : __memcpy_ichk (dest, src, len))

CHECK:SPACING: No space is necessary after a cast
#330: FILE: include/linux/string.h:149:
+  ((__bos0 (dest) != (size_t) -1)                                       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/linux/string.h:149:
+  ((__bos0 (dest) != (size_t) -1)                                       \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: include/linux/string.h:149:
+  ((__bos0 (dest) != (size_t) -1)                                       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/linux/string.h:150:
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#331: FILE: include/linux/string.h:150:
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#331: FILE: include/linux/string.h:150:
+   ? __builtin___memcpy_chk (dest, src, len, __bos0 (dest))             \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: include/linux/string.h:151:
+   : __memcpy_ichk (dest, src, len))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#332: FILE: include/linux/string.h:151:
+   : __memcpy_ichk (dest, src, len))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: include/linux/string.h:153:
+__memcpy_ichk (void * __dest, const void *__src, size_t __len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#334: FILE: include/linux/string.h:153:
+__memcpy_ichk (void * __dest, const void *__src, size_t __len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: include/linux/string.h:155:
+  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: include/linux/string.h:155:
+  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: include/linux/string.h:155:
+  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/string.h:161:
+extern void __warn_memset_zero_len(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#345: FILE: include/linux/string.h:164:
+#define memset(dest, ch, len) \
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \
+   : ((__bos0 (dest) != (size_t) -1)                                          \
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \
+      : __memset_ichk (dest, ch, len)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ch' - possible side-effects?
#345: FILE: include/linux/string.h:164:
+#define memset(dest, ch, len) \
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \
+   : ((__bos0 (dest) != (size_t) -1)                                          \
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \
+      : __memset_ichk (dest, ch, len)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#345: FILE: include/linux/string.h:164:
+#define memset(dest, ch, len) \
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \
+   : ((__bos0 (dest) != (size_t) -1)                                          \
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \
+      : __memset_ichk (dest, ch, len)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: include/linux/string.h:165:
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#346: FILE: include/linux/string.h:165:
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#346: FILE: include/linux/string.h:165:
+  (__builtin_constant_p (len) && (len) == 0 && (!__builtin_constant_p(ch) || ((ch)!=0)) \
                                                                                   ^

CHECK:SPACING: No space is necessary after a cast
#347: FILE: include/linux/string.h:166:
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: include/linux/string.h:166:
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: include/linux/string.h:166:
+   ? (__warn_memset_zero_len (), (void) (ch), (void) (len), (void *) (dest))  \

CHECK:SPACING: No space is necessary after a cast
#348: FILE: include/linux/string.h:167:
+   : ((__bos0 (dest) != (size_t) -1)                                          \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: include/linux/string.h:167:
+   : ((__bos0 (dest) != (size_t) -1)                                          \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: include/linux/string.h:167:
+   : ((__bos0 (dest) != (size_t) -1)                                          \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: include/linux/string.h:168:
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: include/linux/string.h:168:
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: include/linux/string.h:168:
+      ? __builtin___memset_chk (dest, ch, len, __bos0 (dest))                 \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: include/linux/string.h:169:
+      : __memset_ichk (dest, ch, len)))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: include/linux/string.h:169:
+      : __memset_ichk (dest, ch, len)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: include/linux/string.h:172:
+__memset_ichk (void *__dest, int __ch, size_t __len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/linux/string.h:174:
+  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: include/linux/string.h:174:
+  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: include/linux/string.h:174:
+  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: include/linux/string.h:177:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: include/linux/string.h:180:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#369: FILE: lib/fortify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#387: FILE: lib/fortify.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#388: FILE: lib/fortify.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: lib/fortify.c:28:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: lib/fortify.c:29:
+void __chk_fail(void) $

CHECK:SPACING: No space is necessary after a cast
#397: FILE: lib/fortify.c:29:
+void __chk_fail(void) 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#399: FILE: lib/fortify.c:31:
+	printk("** kernel buffer overflow detected via application %s ***\n", current->comm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: lib/fortify.c:32:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: lib/fortify.c:36:
+void * __memcpy_chk (void *dstpp, const void* srcpp, size_t len, size_t dstlen)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#404: FILE: lib/fortify.c:36:
+void * __memcpy_chk (void *dstpp, const void* srcpp, size_t len, size_t dstlen)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#404: FILE: lib/fortify.c:36:
+void * __memcpy_chk (void *dstpp, const void* srcpp, size_t len, size_t dstlen)

CHECK:SPACING: No space is necessary after a cast
#406: FILE: lib/fortify.c:38:
+	char *d = (char *) dstpp, *s = (char *) srcpp;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: lib/fortify.c:41:
+		__chk_fail ();

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: lib/fortify.c:43:
+        while (len--)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: lib/fortify.c:43:
+        while (len--)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: lib/fortify.c:44:
+                *d++ = *s++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: lib/fortify.c:44:
+                *d++ = *s++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: lib/fortify.c:46:
+        return d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: lib/fortify.c:46:
+        return d;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#417: FILE: lib/fortify.c:49:
+EXPORT_SYMBOL_GPL(__memcpy_chk);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#419: FILE: lib/fortify.c:51:
+void * __memset_chk (void *dst, const int c, size_t len, size_t dstlen)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: lib/fortify.c:51:
+void * __memset_chk (void *dst, const int c, size_t len, size_t dstlen)

CHECK:SPACING: No space is necessary after a cast
#421: FILE: lib/fortify.c:53:
+	char *d = (char *) dst;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#424: FILE: lib/fortify.c:56:
+		__chk_fail ();

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: lib/fortify.c:58:
+        while (len--)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: lib/fortify.c:58:
+        while (len--)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: lib/fortify.c:59:
+                *d++ = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: lib/fortify.c:59:
+                *d++ = c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: lib/fortify.c:61:
+        return d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: lib/fortify.c:61:
+        return d;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#432: FILE: lib/fortify.c:64:
+EXPORT_SYMBOL_GPL(__memset_chk);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#435: FILE: lib/fortify.c:67:
+char * __strcpy_chk (char *dest, const char *src, size_t destlen)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#435: FILE: lib/fortify.c:67:
+char * __strcpy_chk (char *dest, const char *src, size_t destlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: lib/fortify.c:69:
+  char c;$

CHECK:SPACING: No space is necessary after a cast
#438: FILE: lib/fortify.c:70:
+  char *s = (char *) src;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: lib/fortify.c:70:
+  char *s = (char *) src;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: lib/fortify.c:71:
+  const ptrdiff_t off = dest - s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: lib/fortify.c:73:
+  while (__builtin_expect (destlen >= 4, 0))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#441: FILE: lib/fortify.c:73:
+  while (__builtin_expect (destlen >= 4, 0))
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#441: FILE: lib/fortify.c:73:
+  while (__builtin_expect (destlen >= 4, 0))
+    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: lib/fortify.c:73:
+  while (__builtin_expect (destlen >= 4, 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: lib/fortify.c:74:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: lib/fortify.c:75:
+      c = s[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: lib/fortify.c:76:
+      s[off] = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: lib/fortify.c:77:
+      if (c == '\0')$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: lib/fortify.c:78:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: lib/fortify.c:78:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: lib/fortify.c:79:
+      c = s[1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: lib/fortify.c:80:
+      s[off + 1] = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: lib/fortify.c:81:
+      if (c == '\0')$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: lib/fortify.c:82:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: lib/fortify.c:82:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: lib/fortify.c:83:
+      c = s[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: lib/fortify.c:84:
+      s[off + 2] = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: lib/fortify.c:85:
+      if (c == '\0')$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: lib/fortify.c:86:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: lib/fortify.c:86:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: lib/fortify.c:87:
+      c = s[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: lib/fortify.c:88:
+      s[off + 3] = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: lib/fortify.c:89:
+      if (c == '\0')$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: lib/fortify.c:90:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: lib/fortify.c:90:
+        return dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: lib/fortify.c:91:
+      destlen -= 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: lib/fortify.c:92:
+      s += 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: lib/fortify.c:93:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: lib/fortify.c:95:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#463: FILE: lib/fortify.c:95:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#463: FILE: lib/fortify.c:95:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: lib/fortify.c:96:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: lib/fortify.c:97:
+      if (__builtin_expect (destlen-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#465: FILE: lib/fortify.c:97:
+      if (__builtin_expect (destlen-- == 0, 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: lib/fortify.c:98:
+        __chk_fail ();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: lib/fortify.c:98:
+        __chk_fail ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#466: FILE: lib/fortify.c:98:
+        __chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: lib/fortify.c:99:
+      c = *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: lib/fortify.c:100:
+      *(s++ + off) = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: lib/fortify.c:101:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: lib/fortify.c:102:
+  while (c != '\0');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: lib/fortify.c:104:
+  return dest;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#475: FILE: lib/fortify.c:107:
+EXPORT_SYMBOL_GPL(__strcpy_chk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#477: FILE: lib/fortify.c:109:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#478: FILE: lib/fortify.c:110:
+char * __strcat_chk (char *dest, const char *src, size_t destlen)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: lib/fortify.c:110:
+char * __strcat_chk (char *dest, const char *src, size_t destlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: lib/fortify.c:112:
+  char *s1 = dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: lib/fortify.c:113:
+  const char *s2 = src;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: lib/fortify.c:114:
+  char c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: lib/fortify.c:117:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#485: FILE: lib/fortify.c:117:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#485: FILE: lib/fortify.c:117:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: lib/fortify.c:118:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: lib/fortify.c:119:
+      if (__builtin_expect (destlen-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: lib/fortify.c:119:
+      if (__builtin_expect (destlen-- == 0, 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: lib/fortify.c:120:
+        __chk_fail ();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: lib/fortify.c:120:
+        __chk_fail ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: lib/fortify.c:120:
+        __chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: lib/fortify.c:121:
+      c = *s1++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: lib/fortify.c:122:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: lib/fortify.c:123:
+  while (c != '\0');$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#494: FILE: lib/fortify.c:126:
+  /* Make S1 point before the next character, so we can increment
+     it while memory is read (wins on pipelined cpus).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: lib/fortify.c:126:
+     it while memory is read (wins on pipelined cpus).  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: lib/fortify.c:127:
+  ++destlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: lib/fortify.c:128:
+  s1 -= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: lib/fortify.c:130:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#498: FILE: lib/fortify.c:130:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#498: FILE: lib/fortify.c:130:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: lib/fortify.c:131:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: lib/fortify.c:132:
+      if (__builtin_expect (destlen-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#500: FILE: lib/fortify.c:132:
+      if (__builtin_expect (destlen-- == 0, 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: lib/fortify.c:133:
+        __chk_fail ();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: lib/fortify.c:133:
+        __chk_fail ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: lib/fortify.c:133:
+        __chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: lib/fortify.c:134:
+      c = *s2++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: lib/fortify.c:135:
+      *++s1 = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: lib/fortify.c:136:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: lib/fortify.c:137:
+  while (c != '\0');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: lib/fortify.c:139:
+  return dest;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#510: FILE: lib/fortify.c:142:
+EXPORT_SYMBOL_GPL(__strcat_chk);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: lib/fortify.c:144:
+char * __strncat_chk (char *s1, const char *s2, size_t n, size_t s1len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: lib/fortify.c:144:
+char * __strncat_chk (char *s1, const char *s2, size_t n, size_t s1len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: lib/fortify.c:146:
+  char c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: lib/fortify.c:147:
+  char *s = s1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: lib/fortify.c:150:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#518: FILE: lib/fortify.c:150:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#518: FILE: lib/fortify.c:150:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: lib/fortify.c:151:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: lib/fortify.c:152:
+      if (__builtin_expect (s1len-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: lib/fortify.c:152:
+      if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#521: FILE: lib/fortify.c:153:
+	__chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: lib/fortify.c:154:
+      c = *s1++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: lib/fortify.c:155:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: lib/fortify.c:156:
+  while (c != '\0');$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#527: FILE: lib/fortify.c:159:
+  /* Make S1 point before next character, so we can increment
+     it while memory is read (wins on pipelined cpus).  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#527: FILE: lib/fortify.c:159:
+     it while memory is read (wins on pipelined cpus).  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: lib/fortify.c:160:
+  ++s1len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: lib/fortify.c:161:
+  s1 -= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: lib/fortify.c:163:
+  if (n >= 4)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#531: FILE: lib/fortify.c:163:
+  if (n >= 4)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#531: FILE: lib/fortify.c:163:
+  if (n >= 4)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: lib/fortify.c:164:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: lib/fortify.c:165:
+      size_t n4 = n >> 2;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#534: FILE: lib/fortify.c:166:
+      size_t n4 = n >> 2;
+      do

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: lib/fortify.c:166:
+      do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#534: FILE: lib/fortify.c:166:
+      do
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#534: FILE: lib/fortify.c:166:
+      do
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#536: FILE: lib/fortify.c:168:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#536: FILE: lib/fortify.c:168:
+	  if (__builtin_expect (s1len-- == 0, 0))
+	    __chk_fail ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: lib/fortify.c:168:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#537: FILE: lib/fortify.c:169:
+	    __chk_fail ();

WARNING:TABSTOP: Statements should start on a tabstop
#540: FILE: lib/fortify.c:172:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#540: FILE: lib/fortify.c:172:
+	  if (c == '\0')
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#541: FILE: lib/fortify.c:173:
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#542: FILE: lib/fortify.c:174:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#542: FILE: lib/fortify.c:174:
+	  if (__builtin_expect (s1len-- == 0, 0))
+	    __chk_fail ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#542: FILE: lib/fortify.c:174:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#543: FILE: lib/fortify.c:175:
+	    __chk_fail ();

WARNING:TABSTOP: Statements should start on a tabstop
#546: FILE: lib/fortify.c:178:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#546: FILE: lib/fortify.c:178:
+	  if (c == '\0')
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#547: FILE: lib/fortify.c:179:
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#548: FILE: lib/fortify.c:180:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#548: FILE: lib/fortify.c:180:
+	  if (__builtin_expect (s1len-- == 0, 0))
+	    __chk_fail ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#548: FILE: lib/fortify.c:180:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#549: FILE: lib/fortify.c:181:
+	    __chk_fail ();

WARNING:TABSTOP: Statements should start on a tabstop
#552: FILE: lib/fortify.c:184:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#552: FILE: lib/fortify.c:184:
+	  if (c == '\0')
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#553: FILE: lib/fortify.c:185:
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#554: FILE: lib/fortify.c:186:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#554: FILE: lib/fortify.c:186:
+	  if (__builtin_expect (s1len-- == 0, 0))
+	    __chk_fail ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: lib/fortify.c:186:
+	  if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#555: FILE: lib/fortify.c:187:
+	    __chk_fail ();

WARNING:TABSTOP: Statements should start on a tabstop
#558: FILE: lib/fortify.c:190:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#558: FILE: lib/fortify.c:190:
+	  if (c == '\0')
+	    return s;

WARNING:TABSTOP: Statements should start on a tabstop
#559: FILE: lib/fortify.c:191:
+	    return s;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: lib/fortify.c:193:
+      n &= 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: lib/fortify.c:194:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: lib/fortify.c:196:
+  while (n > 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#564: FILE: lib/fortify.c:196:
+  while (n > 0)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#564: FILE: lib/fortify.c:196:
+  while (n > 0)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: lib/fortify.c:197:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: lib/fortify.c:198:
+      if (__builtin_expect (s1len-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: lib/fortify.c:198:
+      if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#567: FILE: lib/fortify.c:199:
+	__chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: lib/fortify.c:200:
+      c = *s2++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: lib/fortify.c:201:
+      *++s1 = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: lib/fortify.c:202:
+      if (c == '\0')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: lib/fortify.c:204:
+      n--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: lib/fortify.c:205:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: lib/fortify.c:207:
+  if (c != '\0')$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#575: FILE: lib/fortify.c:207:
+  if (c != '\0')
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#575: FILE: lib/fortify.c:207:
+  if (c != '\0')
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: lib/fortify.c:208:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: lib/fortify.c:209:
+      if (__builtin_expect (s1len-- == 0, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#577: FILE: lib/fortify.c:209:
+      if (__builtin_expect (s1len-- == 0, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#578: FILE: lib/fortify.c:210:
+	__chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: lib/fortify.c:211:
+      *++s1 = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: lib/fortify.c:212:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: lib/fortify.c:214:
+  return s;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#585: FILE: lib/fortify.c:217:
+EXPORT_SYMBOL_GPL(__strncat_chk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: lib/fortify.c:219:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#588: FILE: lib/fortify.c:220:
+char * __strncpy_chk (char *s1, const char *s2, size_t n, size_t s1len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#588: FILE: lib/fortify.c:220:
+char * __strncpy_chk (char *s1, const char *s2, size_t n, size_t s1len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: lib/fortify.c:222:
+  char c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: lib/fortify.c:223:
+  char *s = s1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: lib/fortify.c:225:
+  if (__builtin_expect (s1len < n, 0))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#593: FILE: lib/fortify.c:225:
+  if (__builtin_expect (s1len < n, 0))
+    __chk_fail ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#593: FILE: lib/fortify.c:225:
+  if (__builtin_expect (s1len < n, 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: lib/fortify.c:226:
+    __chk_fail ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#594: FILE: lib/fortify.c:226:
+    __chk_fail ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: lib/fortify.c:228:
+  --s1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: lib/fortify.c:230:
+  if (n >= 4)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#598: FILE: lib/fortify.c:230:
+  if (n >= 4)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#598: FILE: lib/fortify.c:230:
+  if (n >= 4)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: lib/fortify.c:231:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: lib/fortify.c:232:
+      size_t n4 = n >> 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: lib/fortify.c:234:
+      for (;;)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#602: FILE: lib/fortify.c:234:
+      for (;;)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#602: FILE: lib/fortify.c:234:
+      for (;;)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#606: FILE: lib/fortify.c:238:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#606: FILE: lib/fortify.c:238:
+	  if (c == '\0')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#607: FILE: lib/fortify.c:239:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#610: FILE: lib/fortify.c:242:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#610: FILE: lib/fortify.c:242:
+	  if (c == '\0')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#611: FILE: lib/fortify.c:243:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#614: FILE: lib/fortify.c:246:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#614: FILE: lib/fortify.c:246:
+	  if (c == '\0')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#615: FILE: lib/fortify.c:247:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#618: FILE: lib/fortify.c:250:
+	  if (c == '\0')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#618: FILE: lib/fortify.c:250:
+	  if (c == '\0')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#619: FILE: lib/fortify.c:251:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#620: FILE: lib/fortify.c:252:
+	  if (--n4 == 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#620: FILE: lib/fortify.c:252:
+	  if (--n4 == 0)
+	    goto last_chars;

WARNING:TABSTOP: Statements should start on a tabstop
#621: FILE: lib/fortify.c:253:
+	    goto last_chars;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: lib/fortify.c:255:
+      n = n - (s1 - s) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: lib/fortify.c:256:
+      if (n == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: lib/fortify.c:258:
+      goto zero_fill;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: lib/fortify.c:259:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: lib/fortify.c:262:
+  n &= 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: lib/fortify.c:263:
+  if (n == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#631: FILE: lib/fortify.c:263:
+  if (n == 0)
+    return s;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: lib/fortify.c:264:
+    return s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: lib/fortify.c:266:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#634: FILE: lib/fortify.c:266:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#634: FILE: lib/fortify.c:266:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: lib/fortify.c:267:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: lib/fortify.c:268:
+      c = *s2++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: lib/fortify.c:269:
+      *++s1 = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: lib/fortify.c:270:
+      if (--n == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: lib/fortify.c:272:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: lib/fortify.c:273:
+  while (c != '\0');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: lib/fortify.c:276:
+  do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#644: FILE: lib/fortify.c:276:
+  do
+    *++s1 = '\0';

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: lib/fortify.c:277:
+    *++s1 = '\0';$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExO)
#645: FILE: lib/fortify.c:277:
+    *++s1 = '\0';
     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: lib/fortify.c:278:
+  while (--n > 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: lib/fortify.c:280:
+  return s;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#651: FILE: lib/fortify.c:283:
+EXPORT_SYMBOL_GPL(__strncpy_chk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: lib/fortify.c:285:
+
+

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#693: FILE: lib/string.c:69:
+char *  __attribute__((weak)) strcpy(char * dest,const char *src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#693: FILE: lib/string.c:69:
+char *  __attribute__((weak)) strcpy(char * dest,const char *src)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#693: FILE: lib/string.c:69:
+char *  __attribute__((weak)) strcpy(char * dest,const char *src)
                                                 ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#693: FILE: lib/string.c:69:
+char *  __attribute__((weak)) strcpy(char * dest,const char *src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#703: FILE: lib/string.c:95:
+char * __attribute__((weak)) strncpy(char * dest,const char *src,size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#703: FILE: lib/string.c:95:
+char * __attribute__((weak)) strncpy(char * dest,const char *src,size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#703: FILE: lib/string.c:95:
+char * __attribute__((weak)) strncpy(char * dest,const char *src,size_t count)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#703: FILE: lib/string.c:95:
+char * __attribute__((weak)) strncpy(char * dest,const char *src,size_t count)
                                                                 ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#703: FILE: lib/string.c:95:
+char * __attribute__((weak)) strncpy(char * dest,const char *src,size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: lib/string.c:142:
+char * __attribute__((weak)) strcat(char * dest, const char * src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: lib/string.c:142:
+char * __attribute__((weak)) strcat(char * dest, const char * src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: lib/string.c:142:
+char * __attribute__((weak)) strcat(char * dest, const char * src)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#712: FILE: lib/string.c:142:
+char * __attribute__((weak)) strcat(char * dest, const char * src)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#722: FILE: lib/string.c:167:
+char * __attribute__((weak)) strncat(char *dest, const char *src, size_t count)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#722: FILE: lib/string.c:167:
+char * __attribute__((weak)) strncat(char *dest, const char *src, size_t count)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 90 errors, 306 warnings, 50 checks, 605 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
