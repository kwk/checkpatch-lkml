WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -ur linux-2.5.67-cdev4/drivers/scsi/sg.c linux-2.5.67-cdev5/drivers/scsi/sg.c

CHECK:CAMELCASE: Avoid CamelCase: <Sg_fd>
#77: FILE: drivers/scsi/sg.c:219:
+static Sg_fd *sg_add_sfp(struct char_device *cdev);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: drivers/scsi/sg.c:249:
+	SCSI_LOG_TIMEOUT(3, printk("sg_open: dev=%lx, flags=0x%x\n", inode->i_cdev->cd_dev, flags));

WARNING:INDENTED_LABEL: labels should not be indented
#153: FILE: drivers/scsi/sg.c:298:
+      error_free:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: drivers/scsi/sg.c:312:
+	SCSI_LOG_TIMEOUT(3, printk("sg_release: %s\n", sdp->cdev->cd_name));

CHECK:SPACING: No space is necessary after a cast
#172: FILE: drivers/scsi/sg.c:339:
+				   sdp->cdev->cd_name, (int) count));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#181: FILE: drivers/scsi/sg.c:492:
+				   sdp->cdev->cd_name, (int) count));

CHECK:SPACING: No space is necessary after a cast
#198: FILE: drivers/scsi/sg.c:730:
+				   sdp->cdev->cd_name, (int) cmd_in));

CHECK:SPACING: No space is necessary after a cast
#207: FILE: drivers/scsi/sg.c:1033:
+				   sdp->cdev->cd_name, (int) res));

CHECK:SPACING: No space is necessary after a cast
#225: FILE: drivers/scsi/sg.c:1239:
+		sdp->cdev->cd_name, srp->header.pack_id, (int) SRpnt->sr_result));

CHECK:CAMELCASE: Avoid CamelCase: <SRpnt>
#225: FILE: drivers/scsi/sg.c:1239:
+		sdp->cdev->cd_name, srp->header.pack_id, (int) SRpnt->sr_result));

CHECK:BRACES: braces {} should be used on all arms of this statement
#255: FILE: drivers/scsi/sg.c:1337:
+	if (k < SG_MINORS) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#258: FILE: drivers/scsi/sg.c:1340:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Sg_device>
#318: FILE: drivers/scsi/sg.c:1351:
+	sdp = kmalloc(sizeof(Sg_device), GFP_KERNEL);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#403: FILE: drivers/scsi/sg.c:1454:
+			SCSI_LOG_TIMEOUT(3, printk("sg_detach: dev=%s, dirty\n", sdp->cdev->cd_name));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: drivers/scsi/sg.c:1454:
+			SCSI_LOG_TIMEOUT(3, printk("sg_detach: dev=%s, dirty\n", sdp->cdev->cd_name));

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#404: FILE: drivers/scsi/sg.c:1455:
+			if (NULL == sdp->headfp)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: drivers/scsi/sg.c:1458:
+			SCSI_LOG_TIMEOUT(3, printk("sg_detach: dev=%s\n", sdp->cdev->cd_name));

CHECK:SPACING: No space is necessary after a cast
#475: FILE: drivers/scsi/sg.c:2408:
+		sg_page_free((char *) sfp, sizeof (Sg_fd));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#475: FILE: drivers/scsi/sg.c:2408:
+		sg_page_free((char *) sfp, sizeof (Sg_fd));

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#593: FILE: drivers/scsi/sg.c:2868:
+		if (NULL == scsidp) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: drivers/scsi/sg.c:2875:
+			PRINT_PROC(" >>> device=%s ",
+				sdp->cdev->cd_name);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#613: FILE: drivers/scsi/sg.c:2888:
+		if (0 == sg_proc_debug_helper(buffer, len, begin,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#635: FILE: drivers/scsi/sg.c:2912:
+		if ((scsidp = sdp->device) && !sdp->detached)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#661: FILE: drivers/scsi/sg.c:2959:
+		if ((scsidp = sdp->device) && !sdp->detached)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#701: FILE: fs/char_dev.c:151:
+int add_chrdev(struct char_device *cdev, struct file_operations *fops)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#741: FILE: fs/char_dev.c:335:
+	sprintf(buffer, "%s(%ld,%ld)", cdev->cd_name ? cdev->cd_name : "unknown-char", major(dev), minor(dev));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#752: FILE: include/linux/fs.h:1075:
+extern struct char_device *alloc_chrdev(dev_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#752: FILE: include/linux/fs.h:1075:
+extern struct char_device *alloc_chrdev(dev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#753: FILE: include/linux/fs.h:1076:
+extern int add_chrdev(struct char_device *, struct file_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct char_device *' should also have an identifier name
#753: FILE: include/linux/fs.h:1076:
+extern int add_chrdev(struct char_device *, struct file_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_operations *' should also have an identifier name
#753: FILE: include/linux/fs.h:1076:
+extern int add_chrdev(struct char_device *, struct file_operations *);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#753: FILE: include/linux/fs.h:1076:
+extern int add_chrdev(struct char_device *, struct file_operations *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/fs.h:1077:
+extern void unlink_chrdev(struct char_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct char_device *' should also have an identifier name
#754: FILE: include/linux/fs.h:1077:
+extern void unlink_chrdev(struct char_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#755: FILE: include/linux/fs.h:1078:
+extern void del_chrdev(struct char_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct char_device *' should also have an identifier name
#755: FILE: include/linux/fs.h:1078:
+extern void del_chrdev(struct char_device *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 19 warnings, 16 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
