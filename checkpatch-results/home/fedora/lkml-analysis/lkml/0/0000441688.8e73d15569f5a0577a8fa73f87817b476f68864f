WARNING:TYPO_SPELLING: 'iwll' may be misspelled - perhaps 'will'?
#29: 
went in.  This iwll soon be available through bk, but I thought I'd 
               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	           ChangeSet	1.582.2.80 -> 1.582.2.81

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#	include/linux/nvram.h	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#	drivers/char/nvram.c	1.9     -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	drivers/char/Makefile	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	Documentation/Configure.help	1.110   -> 1.111  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	               (new)	        -> 1.2     include/linux/cobalt-nvram.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# 02/08/02	th122948@scl3.sfbay.sun.com	1.582.2.81

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# Add Cobalt Networks support to nvram driver

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# export nvram interfaces

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# general cleanup of nvram driver

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# protect nvram state with a lock

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# fix nvram O_EXCL hack to actually work

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#72: 
--- a/Documentation/Configure.help	Mon Aug  5 18:55:26 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#118: FILE: drivers/char/nvram.c:14:
+ * size of this file is dependant on the controller.  The usual size is 114,
                         ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: drivers/char/nvram.c:33:
+ * ^I1.2^IErik Gilling: Cobalt Networks support$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/char/nvram.c:34:
+ * ^I^ITim Hockin: general cleanup, Cobalt support$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#168: FILE: drivers/char/nvram.c:73:
+#define NVRAM_BYTES		(128-NVRAM_FIRST_BYTE)
                    		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#180: FILE: drivers/char/nvram.c:85:
+#define NVRAM_BYTES		(128-NVRAM_FIRST_BYTE)
                    		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: drivers/char/nvram.c:155:
+ * NVRAM_FIRST_BYTE offset.  Pass them offsets into NVRAM as if you did not $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: drivers/char/nvram.c:334:
+^I^I/* just set checksum, contents unchanged (maybe useful after $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#440: FILE: drivers/char/nvram.c:335:
+		 * checksum garbaged somehow...) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: drivers/char/nvram.c:423:
+#define PRINT_PROC(fmt,args...)					\
                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#524: FILE: drivers/char/nvram.c:507:
+	expect = __nvram_read_byte(PC_CKS_LOC)<<8 |
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#525: FILE: drivers/char/nvram.c:508:
+	    __nvram_read_byte(PC_CKS_LOC+1);
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#566: FILE: drivers/char/nvram.c:614:
+		if ((i == COBT_CMOS_CHECKSUM) || (i == (COBT_CMOS_CHECKSUM+1)))
 		                                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == COBT_CMOS_CHECKSUM'
#566: FILE: drivers/char/nvram.c:614:
+		if ((i == COBT_CMOS_CHECKSUM) || (i == (COBT_CMOS_CHECKSUM+1)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#572: FILE: drivers/char/nvram.c:620:
+	    __nvram_read_byte(COBT_CMOS_CHECKSUM+1);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#582: FILE: drivers/char/nvram.c:630:
+		if ((i == COBT_CMOS_CHECKSUM) || (i == (COBT_CMOS_CHECKSUM+1)))
 		                                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == COBT_CMOS_CHECKSUM'
#582: FILE: drivers/char/nvram.c:630:
+		if ((i == COBT_CMOS_CHECKSUM) || (i == (COBT_CMOS_CHECKSUM+1)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#589: FILE: drivers/char/nvram.c:637:
+	__nvram_write_byte(sum & 0xff, COBT_CMOS_CHECKSUM+1);
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/char/nvram.c:643:
+static int cobalt_proc_infos(unsigned char *nvram, char *buffer, int *len,
+	off_t *begin, off_t offset, int size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: drivers/char/nvram.c:658:
+^Iflags = nvram[COBT_CMOS_FLAG_BYTE_0] << 8 $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: drivers/char/nvram.c:662:
+	PRINT_PROC("Console: %s\n",
+		flags & COBT_CMOS_CONSOLE_FLAG ?  "on": "off");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#614: FILE: drivers/char/nvram.c:662:
+		flags & COBT_CMOS_CONSOLE_FLAG ?  "on": "off");
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: drivers/char/nvram.c:665:
+	PRINT_PROC("Firmware Debug Messages: %s\n",
+		flags & COBT_CMOS_DEBUG_FLAG ? "on": "off");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#617: FILE: drivers/char/nvram.c:665:
+		flags & COBT_CMOS_DEBUG_FLAG ? "on": "off");
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: drivers/char/nvram.c:668:
+	PRINT_PROC("Auto Prompt: %s\n",
+		flags & COBT_CMOS_AUTO_PROMPT_FLAG ? "on": "off");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#620: FILE: drivers/char/nvram.c:668:
+		flags & COBT_CMOS_AUTO_PROMPT_FLAG ? "on": "off");
 		                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: drivers/char/nvram.c:671:
+	PRINT_PROC("Shutdown Status: %s\n",
+		flags & COBT_CMOS_CLEAN_BOOT_FLAG ? "clean": "dirty");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#623: FILE: drivers/char/nvram.c:671:
+		flags & COBT_CMOS_CLEAN_BOOT_FLAG ? "clean": "dirty");
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/char/nvram.c:674:
+	PRINT_PROC("Hardware Probe: %s\n",
+		flags & COBT_CMOS_HW_NOPROBE_FLAG ? "partial": "full");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#626: FILE: drivers/char/nvram.c:674:
+		flags & COBT_CMOS_HW_NOPROBE_FLAG ? "partial": "full");
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/char/nvram.c:677:
+	PRINT_PROC("System Fault: %sdetected\n",
+		flags & COBT_CMOS_SYSFAULT_FLAG ? "": "not ");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#629: FILE: drivers/char/nvram.c:677:
+		flags & COBT_CMOS_SYSFAULT_FLAG ? "": "not ");
 		                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/char/nvram.c:680:
+	PRINT_PROC("Panic on OOPS: %s\n",
+		flags & COBT_CMOS_OOPSPANIC_FLAG ? "yes": "no");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#632: FILE: drivers/char/nvram.c:680:
+		flags & COBT_CMOS_OOPSPANIC_FLAG ? "yes": "no");
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: drivers/char/nvram.c:683:
+	PRINT_PROC("Delayed Cache Initialization: %s\n",
+		flags & COBT_CMOS_DELAY_CACHE_FLAG ? "yes": "no");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#635: FILE: drivers/char/nvram.c:683:
+		flags & COBT_CMOS_DELAY_CACHE_FLAG ? "yes": "no");
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/char/nvram.c:686:
+	PRINT_PROC("Show Logo at Boot: %s\n",
+		flags & COBT_CMOS_NOLOGO_FLAG ? "no": "yes");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#638: FILE: drivers/char/nvram.c:686:
+		flags & COBT_CMOS_NOLOGO_FLAG ? "no": "yes");
 		                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/char/nvram.c:708:
+	PRINT_PROC("Primary Boot Device: %d:%d\n",
+		nvram[COBT_CMOS_BOOT_DEV0_MAJ],

ERROR:SPACING: space prohibited before that close parenthesis ')'
#661: FILE: drivers/char/nvram.c:709:
+		nvram[COBT_CMOS_BOOT_DEV0_MIN] );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: drivers/char/nvram.c:711:
+	PRINT_PROC("Secondary Boot Device: %d:%d\n",
+		nvram[COBT_CMOS_BOOT_DEV1_MAJ],

ERROR:SPACING: space prohibited before that close parenthesis ')'
#664: FILE: drivers/char/nvram.c:712:
+		nvram[COBT_CMOS_BOOT_DEV1_MIN] );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/char/nvram.c:714:
+	PRINT_PROC("Tertiary Boot Device: %d:%d\n",
+		nvram[COBT_CMOS_BOOT_DEV2_MAJ],

ERROR:SPACING: space prohibited before that close parenthesis ')'
#667: FILE: drivers/char/nvram.c:715:
+		nvram[COBT_CMOS_BOOT_DEV2_MIN] );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/char/nvram.c:718:
+	PRINT_PROC("Uptime: %d\n",
+		nvram[COBT_CMOS_UPTIME_0] << 24 |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: drivers/char/nvram.c:724:
+	PRINT_PROC("Boot Count: %d\n",
+		nvram[COBT_CMOS_BOOTCOUNT_0] << 24 |

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#682: FILE: drivers/char/nvram.c:730:
+	for (i=0 ; i<13 ; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#682: FILE: drivers/char/nvram.c:730:
+	for (i=0 ; i<13 ; i++) {
 	            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#682: FILE: drivers/char/nvram.c:730:
+	for (i=0 ; i<13 ; i++) {
+		sernum[i] = nvram[COBT_CMOS_SYS_SERNUM_0 + i];
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#688: FILE: drivers/char/nvram.c:736:
+	for (i=0 ; i<13 ; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#688: FILE: drivers/char/nvram.c:736:
+	for (i=0 ; i<13 ; i++) {
 	            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#688: FILE: drivers/char/nvram.c:736:
+	for (i=0 ; i<13 ; i++) {
+		checksum += sernum[i] ^ key[i];
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#694: FILE: drivers/char/nvram.c:742:
+	if (checksum != nvram[COBT_CMOS_SYS_SERNUM_CSUM]) {
+		PRINT_PROC(" (invalid checksum)");
+	}

WARNING:TYPO_SPELLING: 'Revison' may be misspelled - perhaps 'Revision'?
#699: FILE: drivers/char/nvram.c:747:
+	PRINT_PROC("Rom Revison: %d.%d.%d\n", nvram[COBT_CMOS_ROM_REV_MAJ],
 	                ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/char/nvram.c:748:
+	PRINT_PROC("Rom Revison: %d.%d.%d\n", nvram[COBT_CMOS_ROM_REV_MAJ],
+		nvram[COBT_CMOS_ROM_REV_MIN], nvram[COBT_CMOS_ROM_REV_REV]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: drivers/char/nvram.c:751:
+	PRINT_PROC("BTO Server: %d.%d.%d.%d", nvram[COBT_CMOS_BTO_IP_0],
+		nvram[COBT_CMOS_BTO_IP_1], nvram[COBT_CMOS_BTO_IP_2],

WARNING:BRACES: braces {} are not necessary for single statement blocks
#707: FILE: drivers/char/nvram.c:755:
+	if (bto_csum != nvram[COBT_CMOS_BTO_IP_CSUM]) {
+		PRINT_PROC(" (invalid checksum)");
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#713: FILE: drivers/char/nvram.c:761:
+	if (flags & COBT_CMOS_VERSION_FLAG
+	 && nvram[COBT_CMOS_VERSION] >= COBT_CMOS_VER_BTOCODE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: drivers/char/nvram.c:763:
+		PRINT_PROC("BTO Code: 0x%x\n",
+			nvram[COBT_CMOS_BTO_CODE_0] << 24 |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: drivers/char/nvram.c:786:
+	return (__nvram_read_byte(ATARI_CKS_LOC) == (~sum & 0xff) &&
+	    __nvram_read_byte(ATARI_CKS_LOC + 1) == (sum & 0xff));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#761: FILE: drivers/char/nvram.c:915:
+EXPORT_SYMBOL(__nvram_read_byte);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#762: FILE: drivers/char/nvram.c:916:
+EXPORT_SYMBOL(nvram_read_byte);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#763: FILE: drivers/char/nvram.c:917:
+EXPORT_SYMBOL(__nvram_write_byte);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#764: FILE: drivers/char/nvram.c:918:
+EXPORT_SYMBOL(nvram_write_byte);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#765: FILE: drivers/char/nvram.c:919:
+EXPORT_SYMBOL(__nvram_check_checksum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#766: FILE: drivers/char/nvram.c:920:
+EXPORT_SYMBOL(nvram_check_checksum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: drivers/char/nvram.c:921:
+EXPORT_SYMBOL(__nvram_set_checksum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#768: FILE: drivers/char/nvram.c:922:
+EXPORT_SYMBOL(nvram_set_checksum);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#773: FILE: include/linux/cobalt-nvram.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#774: FILE: include/linux/cobalt-nvram.h:2:
+ * $Id: cobalt-nvram.h,v 1.20 2001/10/17 23:16:55 thockin Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#897: FILE: include/linux/nvram.h:13:
+#define NVRAM_OFFSET(x)   ((x)-NVRAM_FIRST_BYTE)
                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/nvram.h:17:
+extern unsigned char __nvram_read_byte(int i);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#906: FILE: include/linux/nvram.h:18:
+extern unsigned char nvram_read_byte(int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: include/linux/nvram.h:19:
+extern void __nvram_write_byte(unsigned char c, int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: include/linux/nvram.h:20:
+extern void nvram_write_byte(unsigned char c, int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: include/linux/nvram.h:21:
+extern int __nvram_check_checksum(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: include/linux/nvram.h:22:
+extern int nvram_check_checksum(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#911: FILE: include/linux/nvram.h:23:
+extern void __nvram_set_checksum(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#912: FILE: include/linux/nvram.h:24:
+extern void nvram_set_checksum(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 42 warnings, 39 checks, 805 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
