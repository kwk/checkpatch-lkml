WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#96: FILE: include/linux/videodev.h:7:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: include/linux/videodev.h:12:
+ */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: include/linux/videodev.h:28:
+     ^Ichar name[32];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: include/linux/videodev.h:28:
+     ^Ichar name[32];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: include/linux/videodev.h:28:
+     ^Ichar name[32];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: include/linux/videodev.h:29:
+ ^Iint type;       /* v4l1 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: include/linux/videodev.h:29:
+ ^Iint type;       /* v4l1 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/linux/videodev.h:29:
+ ^Iint type;       /* v4l1 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: include/linux/videodev.h:30:
+ ^Iint type2;      /* v4l2 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: include/linux/videodev.h:30:
+ ^Iint type2;      /* v4l2 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/linux/videodev.h:30:
+ ^Iint type2;      /* v4l2 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: include/linux/videodev.h:34:
+ ^I/* new interface -- we will use file_operations directly$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: include/linux/videodev.h:34:
+ ^I/* new interface -- we will use file_operations directly$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: include/linux/videodev.h:34:
+ ^I/* new interface -- we will use file_operations directly$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: include/linux/videodev.h:35:
+ ^I * like soundcore does.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: include/linux/videodev.h:35:
+ ^I * like soundcore does.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: include/linux/videodev.h:36:
+ ^I * kernel_ioctl() will be called by video_generic_ioctl.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: include/linux/videodev.h:36:
+ ^I * kernel_ioctl() will be called by video_generic_ioctl.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: include/linux/videodev.h:37:
+ ^I * video_generic_ioctl() does the userspace copying of the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: include/linux/videodev.h:37:
+ ^I * video_generic_ioctl() does the userspace copying of the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: include/linux/videodev.h:38:
+ ^I * ioctl arguments */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/linux/videodev.h:38:
+ ^I * ioctl arguments */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: include/linux/videodev.h:38:
+ 	 * ioctl arguments */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: include/linux/videodev.h:39:
+ ^Istruct file_operations *fops;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: include/linux/videodev.h:39:
+ ^Istruct file_operations *fops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: include/linux/videodev.h:39:
+ ^Istruct file_operations *fops;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#139: FILE: include/linux/videodev.h:39:
+ 	struct file_operations *fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: include/linux/videodev.h:40:
+ ^Iint (*kernel_ioctl)(struct inode *inode, struct file *file,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: include/linux/videodev.h:40:
+ ^Iint (*kernel_ioctl)(struct inode *inode, struct file *file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: include/linux/videodev.h:40:
+ ^Iint (*kernel_ioctl)(struct inode *inode, struct file *file,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: include/linux/videodev.h:41:
+ ^I^I^I    unsigned int cmd, void *arg);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: include/linux/videodev.h:41:
+ ^I^I^I    unsigned int cmd, void *arg);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/videodev.h:41:
+ 	int (*kernel_ioctl)(struct inode *inode, struct file *file,
+ 			    unsigned int cmd, void *arg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: include/linux/videodev.h:41:
+ ^I^I^I    unsigned int cmd, void *arg);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#157: FILE: include/linux/videodev.h:59:
+extern struct video_device* video_devdata(struct file*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#157: FILE: include/linux/videodev.h:59:
+extern struct video_device* video_devdata(struct file*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/videodev.h:59:
+extern struct video_device* video_devdata(struct file*);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file*' should also have an identifier name
#157: FILE: include/linux/videodev.h:59:
+extern struct video_device* video_devdata(struct file*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/videodev.h:61:
+extern int video_exclusive_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/videodev.h:62:
+extern int video_exclusive_release(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/videodev.h:63:
+extern int video_generic_ioctl(struct inode *inode, struct file *file,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#248: FILE: drivers/media/video/videodev.c:63:
+struct video_device* video_devdata(struct file *file)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#269: FILE: drivers/media/video/videodev.c:76:
+	struct file_operations *old_fops;

ERROR:SPACING: space required before the open parenthesis '('
#289: FILE: drivers/media/video/videodev.c:97:
+	if(file->f_op->open)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: drivers/media/video/videodev.c:98:
+		err = file->f_op->open(inode,file);
 		                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vfl->kernel_ioctl"
#350: FILE: drivers/media/video/videodev.c:124:
+	if (vfl->kernel_ioctl == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: drivers/media/video/videodev.c:139:
+			mbuf = kmalloc(_IOC_SIZE(cmd),GFP_KERNEL);
 			                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#371: FILE: drivers/media/video/videodev.c:140:
+			if (NULL == mbuf)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: drivers/media/video/videodev.c:144:
+^I^I$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#407: FILE: drivers/media/video/videodev.c:170:
+	if (mbuf)
+		kfree(mbuf);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#430: FILE: drivers/media/video/videodev.c:183:
+	if (vfl->users) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: drivers/media/video/videodev.c:195:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#515: FILE: drivers/media/video/videodev.c:523:
+EXPORT_SYMBOL(video_generic_ioctl);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#516: FILE: drivers/media/video/videodev.c:524:
+EXPORT_SYMBOL(video_exclusive_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#517: FILE: drivers/media/video/videodev.c:525:
+EXPORT_SYMBOL(video_exclusive_release);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 29 warnings, 6 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
