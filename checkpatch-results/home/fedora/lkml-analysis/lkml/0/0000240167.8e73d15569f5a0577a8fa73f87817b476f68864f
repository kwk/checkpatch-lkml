WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/i2c/chips/lm87.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: drivers/i2c/chips/lm87.c:51:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#134: FILE: drivers/i2c/chips/lm87.c:52:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: drivers/i2c/chips/lm87.c:122:
+#define IN_FROM_REG(reg,scale)	(((reg) * (scale) + 96) / 192)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: drivers/i2c/chips/lm87.c:123:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#205: FILE: drivers/i2c/chips/lm87.c:123:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
+				 (val) * 192 >= (scale) * 255 ? 255 : \
+				 ((val) * 192 + (scale)/2) / (scale))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'scale' - possible side-effects?
#205: FILE: drivers/i2c/chips/lm87.c:123:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
+				 (val) * 192 >= (scale) * 255 ? 255 : \
+				 ((val) * 192 + (scale)/2) / (scale))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#207: FILE: drivers/i2c/chips/lm87.c:125:
+				 ((val) * 192 + (scale)/2) / (scale))
 				                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#210: FILE: drivers/i2c/chips/lm87.c:128:
+#define TEMP_TO_REG(val)	((val) <= -127500 ? -128 : \
+				 (val) >= 126500 ? 127 : \
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#212: FILE: drivers/i2c/chips/lm87.c:130:
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))
 				                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: drivers/i2c/chips/lm87.c:130:
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))
 				                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: drivers/i2c/chips/lm87.c:132:
+#define FAN_FROM_REG(reg,div)	((reg) == 255 || (reg) == 0 ? 0 : \
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: drivers/i2c/chips/lm87.c:132:
+#define FAN_FROM_REG(reg,div)	((reg) == 255 || (reg) == 0 ? 0 : \
+				 1350000 + (reg)*(div) / 2) / ((reg)*(div))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#214: FILE: drivers/i2c/chips/lm87.c:132:
+#define FAN_FROM_REG(reg,div)	((reg) == 255 || (reg) == 0 ? 0 : \
+				 1350000 + (reg)*(div) / 2) / ((reg)*(div))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'div' - possible side-effects?
#214: FILE: drivers/i2c/chips/lm87.c:132:
+#define FAN_FROM_REG(reg,div)	((reg) == 255 || (reg) == 0 ? 0 : \
+				 1350000 + (reg)*(div) / 2) / ((reg)*(div))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#215: FILE: drivers/i2c/chips/lm87.c:133:
+				 1350000 + (reg)*(div) / 2) / ((reg)*(div))
 				                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#215: FILE: drivers/i2c/chips/lm87.c:133:
+				 1350000 + (reg)*(div) / 2) / ((reg)*(div))
 				                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: drivers/i2c/chips/lm87.c:134:
+#define FAN_TO_REG(val,div)	((val)*(div) * 255 <= 1350000 ? 255 : \
                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#216: FILE: drivers/i2c/chips/lm87.c:134:
+#define FAN_TO_REG(val,div)	((val)*(div) * 255 <= 1350000 ? 255 : \
                            	      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#216: FILE: drivers/i2c/chips/lm87.c:134:
+#define FAN_TO_REG(val,div)	((val)*(div) * 255 <= 1350000 ? 255 : \
+				 (1350000 + (val)*(div) / 2) / ((val)*(div)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'div' - possible side-effects?
#216: FILE: drivers/i2c/chips/lm87.c:134:
+#define FAN_TO_REG(val,div)	((val)*(div) * 255 <= 1350000 ? 255 : \
+				 (1350000 + (val)*(div) / 2) / ((val)*(div)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#217: FILE: drivers/i2c/chips/lm87.c:135:
+				 (1350000 + (val)*(div) / 2) / ((val)*(div)))
 				                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#217: FILE: drivers/i2c/chips/lm87.c:135:
+				 (1350000 + (val)*(div) / 2) / ((val)*(div)))
 				                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#223: FILE: drivers/i2c/chips/lm87.c:141:
+#define AOUT_TO_REG(val)	((val) <= 0 ? 0 : \
+				 (val) >= 2500 ? 255 : \
+				 ((val) * 10 + 49) / 98)

CHECK:BIT_MACRO: Prefer using the BIT macro
#229: FILE: drivers/i2c/chips/lm87.c:147:
+#define CHAN_TEMP3		(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#230: FILE: drivers/i2c/chips/lm87.c:148:
+#define CHAN_VCC_5V		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#231: FILE: drivers/i2c/chips/lm87.c:149:
+#define CHAN_NO_VID		(1 << 8)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#309: FILE: drivers/i2c/chips/lm87.c:227:
+#define show_in(offset) \
+static ssize_t show_in##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in[offset], \
+		       data->in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_min[offset], \
+		       data->in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_max[offset], \
+		       data->in_scale[offset])); \
+} \
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, \
+		show_in##offset##_input, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#309: FILE: drivers/i2c/chips/lm87.c:227:
+#define show_in(offset) \
+static ssize_t show_in##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in[offset], \
+		       data->in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_min[offset], \
+		       data->in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_max[offset], \
+		       data->in_scale[offset])); \
+} \
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, \
+		show_in##offset##_input, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#328: FILE: drivers/i2c/chips/lm87.c:246:
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#343: FILE: drivers/i2c/chips/lm87.c:261:
+	long val = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: drivers/i2c/chips/lm87.c:262:
+	long val = simple_strtol(buf, NULL, 10);
+	data->in_min[nr] = IN_TO_REG(val, data->in_scale[nr]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#345: FILE: drivers/i2c/chips/lm87.c:263:
+	lm87_write_value(client, nr<6 ? LM87_REG_IN_MIN(nr) :
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#346: FILE: drivers/i2c/chips/lm87.c:264:
+			 LM87_REG_AIN_MIN(nr-6), data->in_min[nr]);
 			                    ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#353: FILE: drivers/i2c/chips/lm87.c:271:
+	long val = simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: drivers/i2c/chips/lm87.c:272:
+	long val = simple_strtol(buf, NULL, 10);
+	data->in_max[nr] = IN_TO_REG(val, data->in_scale[nr]);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#355: FILE: drivers/i2c/chips/lm87.c:273:
+	lm87_write_value(client, nr<6 ? LM87_REG_IN_MAX(nr) :
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#356: FILE: drivers/i2c/chips/lm87.c:274:
+			 LM87_REG_AIN_MAX(nr-6), data->in_max[nr]);
 			                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#359: FILE: drivers/i2c/chips/lm87.c:277:
+#define set_in(offset) \
+static ssize_t set_in##offset##_min(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_in_min(dev, buf, offset); \
+	return count; \
+} \
+static ssize_t set_in##offset##_max(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_in_max(dev, buf, offset); \
+	return count; \
+} \
+static DEVICE_ATTR(in##offset##_min, S_IRUGO | S_IWUSR, \
+		show_in##offset##_min, set_in##offset##_min); \
+static DEVICE_ATTR(in##offset##_max, S_IRUGO | S_IWUSR, \
+		show_in##offset##_max, set_in##offset##_max);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#359: FILE: drivers/i2c/chips/lm87.c:277:
+#define set_in(offset) \
+static ssize_t set_in##offset##_min(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_in_min(dev, buf, offset); \
+	return count; \
+} \
+static ssize_t set_in##offset##_max(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_in_max(dev, buf, offset); \
+	return count; \
+} \
+static DEVICE_ATTR(in##offset##_min, S_IRUGO | S_IWUSR, \
+		show_in##offset##_min, set_in##offset##_min); \
+static DEVICE_ATTR(in##offset##_max, S_IRUGO | S_IWUSR, \
+		show_in##offset##_max, set_in##offset##_max);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#372: FILE: drivers/i2c/chips/lm87.c:290:
+static DEVICE_ATTR(in##offset##_min, S_IRUGO | S_IWUSR, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#374: FILE: drivers/i2c/chips/lm87.c:292:
+static DEVICE_ATTR(in##offset##_max, S_IRUGO | S_IWUSR, \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#385: FILE: drivers/i2c/chips/lm87.c:303:
+#define show_temp(offset) \
+static ssize_t show_temp##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_low(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_low[offset-1])); \
+} \
+static ssize_t show_temp##offset##_high(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_high[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, \
+		show_temp##offset##_input, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#385: FILE: drivers/i2c/chips/lm87.c:303:
+#define show_temp(offset) \
+static ssize_t show_temp##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_low(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_low[offset-1])); \
+} \
+static ssize_t show_temp##offset##_high(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_high[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, \
+		show_temp##offset##_input, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#385: FILE: drivers/i2c/chips/lm87.c:303:
+#define show_temp(offset) \
+static ssize_t show_temp##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_low(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_low[offset-1])); \
+} \
+static ssize_t show_temp##offset##_high(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_high[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, \
+		show_temp##offset##_input, NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#389: FILE: drivers/i2c/chips/lm87.c:307:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#394: FILE: drivers/i2c/chips/lm87.c:312:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_low[offset-1])); \
 	                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#399: FILE: drivers/i2c/chips/lm87.c:317:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_high[offset-1])); \
 	                                                                ^

ERROR:SPACING: space required after that close brace '}'
#400: FILE: drivers/i2c/chips/lm87.c:318:
+}\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#401: FILE: drivers/i2c/chips/lm87.c:319:
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: drivers/i2c/chips/lm87.c:327:
+    struct i2c_client *client = to_i2c_client(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: drivers/i2c/chips/lm87.c:328:
+    struct lm87_data *data = i2c_get_clientdata(client);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/i2c/chips/lm87.c:329:
+    long val = simple_strtol(buf, NULL, 10);$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#411: FILE: drivers/i2c/chips/lm87.c:329:
+    long val = simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: drivers/i2c/chips/lm87.c:330:
+    long val = simple_strtol(buf, NULL, 10);
+    data->temp_low[nr] = TEMP_TO_REG(val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/i2c/chips/lm87.c:330:
+    data->temp_low[nr] = TEMP_TO_REG(val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/i2c/chips/lm87.c:331:
+    lm87_write_value(client, LM87_REG_TEMP_LOW[nr], data->temp_low[nr]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/i2c/chips/lm87.c:336:
+    struct i2c_client *client = to_i2c_client(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/i2c/chips/lm87.c:337:
+    struct lm87_data *data = i2c_get_clientdata(client);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: drivers/i2c/chips/lm87.c:338:
+    long val = simple_strtol(buf, NULL, 10);$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#420: FILE: drivers/i2c/chips/lm87.c:338:
+    long val = simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: drivers/i2c/chips/lm87.c:339:
+    long val = simple_strtol(buf, NULL, 10);
+    data->temp_high[nr] = TEMP_TO_REG(val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/i2c/chips/lm87.c:339:
+    data->temp_high[nr] = TEMP_TO_REG(val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/i2c/chips/lm87.c:340:
+    lm87_write_value(client, LM87_REG_TEMP_HIGH[nr], data->temp_high[nr]);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#425: FILE: drivers/i2c/chips/lm87.c:343:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_low(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_low(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_high(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_high(dev, buf, offset-1); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_max, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_high, set_temp##offset##_high); \
+static DEVICE_ATTR(temp##offset##_min, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_low, set_temp##offset##_low);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#425: FILE: drivers/i2c/chips/lm87.c:343:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_low(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_low(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_high(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_high(dev, buf, offset-1); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_max, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_high, set_temp##offset##_high); \
+static DEVICE_ATTR(temp##offset##_min, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_low, set_temp##offset##_low);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#425: FILE: drivers/i2c/chips/lm87.c:343:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_low(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_low(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_high(struct device *dev, \
+		const char *buf, size_t count) \
+{ \
+	set_temp_high(dev, buf, offset-1); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_max, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_high, set_temp##offset##_high); \
+static DEVICE_ATTR(temp##offset##_min, S_IRUGO | S_IWUSR, \
+		show_temp##offset##_low, set_temp##offset##_low);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#429: FILE: drivers/i2c/chips/lm87.c:347:
+	set_temp_low(dev, buf, offset-1); \
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: drivers/i2c/chips/lm87.c:353:
+	set_temp_high(dev, buf, offset-1); \
 	                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#438: FILE: drivers/i2c/chips/lm87.c:356:
+static DEVICE_ATTR(temp##offset##_max, S_IRUGO | S_IWUSR, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#440: FILE: drivers/i2c/chips/lm87.c:358:
+static DEVICE_ATTR(temp##offset##_min, S_IRUGO | S_IWUSR, \

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: drivers/i2c/chips/lm87.c:367:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_crit_int));

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: drivers/i2c/chips/lm87.c:373:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_crit_ext));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_crit_int' to 'temp1_crit_show'
#456: FILE: drivers/i2c/chips/lm87.c:374:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#458: FILE: drivers/i2c/chips/lm87.c:376:
+static DEVICE_ATTR(temp1_crit, S_IRUGO, show_temp_crit_int, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_crit_ext' to 'temp2_crit_show'
#459: FILE: drivers/i2c/chips/lm87.c:377:
+static DEVICE_ATTR(temp2_crit, S_IRUGO, show_temp_crit_ext, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#459: FILE: drivers/i2c/chips/lm87.c:377:
+static DEVICE_ATTR(temp2_crit, S_IRUGO, show_temp_crit_ext, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp_crit_ext' to 'temp3_crit_show'
#460: FILE: drivers/i2c/chips/lm87.c:378:
+static DEVICE_ATTR(temp3_crit, S_IRUGO, show_temp_crit_ext, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#460: FILE: drivers/i2c/chips/lm87.c:378:
+static DEVICE_ATTR(temp3_crit, S_IRUGO, show_temp_crit_ext, NULL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#462: FILE: drivers/i2c/chips/lm87.c:380:
+#define show_fan(offset) \
+static ssize_t show_fan##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan_min[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_div(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_DIV_FROM_REG(data->fan_div[offset-1])); \
+} \
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, \
+		show_fan##offset##_input, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#462: FILE: drivers/i2c/chips/lm87.c:380:
+#define show_fan(offset) \
+static ssize_t show_fan##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan_min[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_div(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_DIV_FROM_REG(data->fan_div[offset-1])); \
+} \
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, \
+		show_fan##offset##_input, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#462: FILE: drivers/i2c/chips/lm87.c:380:
+#define show_fan(offset) \
+static ssize_t show_fan##offset##_input(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan_min[offset-1], \
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
+} \
+static ssize_t show_fan##offset##_div(struct device *dev, char *buf) \
+{ \
+	struct lm87_data *data = lm87_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_DIV_FROM_REG(data->fan_div[offset-1])); \
+} \
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, \
+		show_fan##offset##_input, NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#466: FILE: drivers/i2c/chips/lm87.c:384:
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan[offset-1], \
 	                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#467: FILE: drivers/i2c/chips/lm87.c:385:
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
 		                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#472: FILE: drivers/i2c/chips/lm87.c:390:
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan_min[offset-1], \
 	                                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#473: FILE: drivers/i2c/chips/lm87.c:391:
+		       FAN_DIV_FROM_REG(data->fan_div[offset-1]))); \
 		                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#478: FILE: drivers/i2c/chips/lm87.c:396:
+	return sprintf(buf, "%d\n", FAN_DIV_FROM_REG(data->fan_div[offset-1])); \
 	                                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#480: FILE: drivers/i2c/chips/lm87.c:398:
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, \

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#489: FILE: drivers/i2c/chips/lm87.c:407:
+	long val = simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: drivers/i2c/chips/lm87.c:408:
+	long val = simple_strtol(buf, NULL, 10);
+	data->fan_min[nr] = FAN_TO_REG(val,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: drivers/i2c/chips/lm87.c:409:
+	data->fan_min[nr] = FAN_TO_REG(val,
+			    FAN_DIV_FROM_REG(data->fan_div[nr]));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#496: FILE: drivers/i2c/chips/lm87.c:414:
+/* Note: we save and restore the fan minimum here, because its value is
+   determined in part by the fan clock divider.  This follows the principle

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'suprise' may be misspelled - perhaps 'surprise'?
#497: FILE: drivers/i2c/chips/lm87.c:415:
+   of least suprise; the user doesn't expect the fan minimum to change just
             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#498: FILE: drivers/i2c/chips/lm87.c:416:
+   because the divider changed. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: drivers/i2c/chips/lm87.c:418:
+static ssize_t set_fan_div(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#504: FILE: drivers/i2c/chips/lm87.c:422:
+	long val = simple_strtol(buf, NULL, 10);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#510: FILE: drivers/i2c/chips/lm87.c:428:
+	case 1: data->fan_div[nr] = 0; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#511: FILE: drivers/i2c/chips/lm87.c:429:
+	case 2: data->fan_div[nr] = 1; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#512: FILE: drivers/i2c/chips/lm87.c:430:
+	case 4: data->fan_div[nr] = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#513: FILE: drivers/i2c/chips/lm87.c:431:
+	case 8: data->fan_div[nr] = 3; break;

WARNING:TABSTOP: Statements should start on a tabstop
#521: FILE: drivers/i2c/chips/lm87.c:439:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#524: FILE: drivers/i2c/chips/lm87.c:442:
+	    break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#534: FILE: drivers/i2c/chips/lm87.c:452:
+#define set_fan(offset) \
+static ssize_t set_fan##offset##_min(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	set_fan_min(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_fan##offset##_div(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	return set_fan_div(dev, buf, count, offset-1); \
+} \
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_min, set_fan##offset##_min); \
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_div, set_fan##offset##_div);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#534: FILE: drivers/i2c/chips/lm87.c:452:
+#define set_fan(offset) \
+static ssize_t set_fan##offset##_min(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	set_fan_min(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_fan##offset##_div(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	return set_fan_div(dev, buf, count, offset-1); \
+} \
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_min, set_fan##offset##_min); \
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_div, set_fan##offset##_div);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#534: FILE: drivers/i2c/chips/lm87.c:452:
+#define set_fan(offset) \
+static ssize_t set_fan##offset##_min(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	set_fan_min(dev, buf, offset-1); \
+	return count; \
+} \
+static ssize_t set_fan##offset##_div(struct device *dev, const char *buf, \
+		size_t count) \
+{ \
+	return set_fan_div(dev, buf, count, offset-1); \
+} \
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_min, set_fan##offset##_min); \
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_div, set_fan##offset##_div);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#538: FILE: drivers/i2c/chips/lm87.c:456:
+	set_fan_min(dev, buf, offset-1); \
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#544: FILE: drivers/i2c/chips/lm87.c:462:
+	return set_fan_div(dev, buf, count, offset-1); \
 	                                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#546: FILE: drivers/i2c/chips/lm87.c:464:
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#548: FILE: drivers/i2c/chips/lm87.c:466:
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR, \

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: drivers/i2c/chips/lm87.c:474:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", data->alarms);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#557: FILE: drivers/i2c/chips/lm87.c:475:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#558: FILE: drivers/i2c/chips/lm87.c:476:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: drivers/i2c/chips/lm87.c:481:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", vid_from_reg(data->vid, data->vrm));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vid' to 'cpu0_vid_show'
#564: FILE: drivers/i2c/chips/lm87.c:482:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#565: FILE: drivers/i2c/chips/lm87.c:483:
+static DEVICE_ATTR(cpu0_vid, S_IRUGO, show_vid, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#570: FILE: drivers/i2c/chips/lm87.c:488:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", data->vrm);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#572: FILE: drivers/i2c/chips/lm87.c:490:
+}
+static ssize_t set_vrm(struct device *dev, const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#576: FILE: drivers/i2c/chips/lm87.c:494:
+	struct lm87_data *data = i2c_get_clientdata(client);
+	data->vrm = simple_strtoul(buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#576: FILE: drivers/i2c/chips/lm87.c:494:
+	data->vrm = simple_strtoul(buf, NULL, 10);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vrm' to 'vrm_show' 'set_vrm' to 'vrm_store'
#578: FILE: drivers/i2c/chips/lm87.c:496:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#579: FILE: drivers/i2c/chips/lm87.c:497:
+static DEVICE_ATTR(vrm, S_IRUGO | S_IWUSR, show_vrm, set_vrm);

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: drivers/i2c/chips/lm87.c:502:
+	struct lm87_data *data = lm87_update_device(dev);
+	return sprintf(buf, "%d\n", AOUT_FROM_REG(data->aout));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#586: FILE: drivers/i2c/chips/lm87.c:504:
+}
+static ssize_t set_aout(struct device *dev, const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#590: FILE: drivers/i2c/chips/lm87.c:508:
+	long val = simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: drivers/i2c/chips/lm87.c:509:
+	long val = simple_strtol(buf, NULL, 10);
+	data->aout = AOUT_TO_REG(val);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_aout' to 'aout_output_show' 'set_aout' to 'aout_output_store'
#594: FILE: drivers/i2c/chips/lm87.c:512:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#595: FILE: drivers/i2c/chips/lm87.c:513:
+static DEVICE_ATTR(aout_output, S_IRUGO | S_IWUSR, show_aout, set_aout);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#621: FILE: drivers/i2c/chips/lm87.c:539:
+	if (!(data = kmalloc(sizeof(struct lm87_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct lm87_data)...)
#621: FILE: drivers/i2c/chips/lm87.c:539:
+	if (!(data = kmalloc(sizeof(struct lm87_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#628: FILE: drivers/i2c/chips/lm87.c:546:
+	/* The common I2C client data is placed right before the
+	   LM87-specific data. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#628: FILE: drivers/i2c/chips/lm87.c:546:
+	   LM87-specific data. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#645: FILE: drivers/i2c/chips/lm87.c:563:
+		if (rev < 0x01 || rev > 0x08
+		 || (lm87_read_value(new_client, LM87_REG_CONFIG) & 0x80)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#646: FILE: drivers/i2c/chips/lm87.c:564:
+		 || (lm87_read_value(new_client, LM87_REG_CONFIG) & 0x80)
+		 || lm87_read_value(new_client, LM87_REG_COMPANY_ID) != 0x02) {

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#655: FILE: drivers/i2c/chips/lm87.c:573:
+	strlcpy(new_client->name, "lm87", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#661: FILE: drivers/i2c/chips/lm87.c:579:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#790: FILE: drivers/i2c/chips/lm87.c:708:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#792: FILE: drivers/i2c/chips/lm87.c:710:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#808: FILE: drivers/i2c/chips/lm87.c:726:
+	if (jiffies - data->last_updated > HZ
+	  || jiffies < data->last_updated

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#808: FILE: drivers/i2c/chips/lm87.c:726:
+	  || jiffies < data->last_updated

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#809: FILE: drivers/i2c/chips/lm87.c:727:
+	  || jiffies < data->last_updated
+	  || !data->valid) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: drivers/i2c/chips/lm87.c:736:
+			data->in[i] = lm87_read_value(client,
+				      LM87_REG_IN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: drivers/i2c/chips/lm87.c:738:
+			data->in_min[i] = lm87_read_value(client,
+					  LM87_REG_IN_MIN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: drivers/i2c/chips/lm87.c:740:
+			data->in_max[i] = lm87_read_value(client,
+					  LM87_REG_IN_MAX(i));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#827: FILE: drivers/i2c/chips/lm87.c:745:
+				data->in[6+i] = lm87_read_value(client,
 				          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: drivers/i2c/chips/lm87.c:746:
+				data->in[6+i] = lm87_read_value(client,
+						LM87_REG_AIN(i));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: drivers/i2c/chips/lm87.c:747:
+				data->in_max[6+i] = lm87_read_value(client,
 				              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: drivers/i2c/chips/lm87.c:748:
+				data->in_max[6+i] = lm87_read_value(client,
+						    LM87_REG_AIN_MAX(i));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#831: FILE: drivers/i2c/chips/lm87.c:749:
+				data->in_min[6+i] = lm87_read_value(client,
 				              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/i2c/chips/lm87.c:750:
+				data->in_min[6+i] = lm87_read_value(client,
+						    LM87_REG_AIN_MIN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/i2c/chips/lm87.c:754:
+				data->fan[i] = lm87_read_value(client,
+					       LM87_REG_FAN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#838: FILE: drivers/i2c/chips/lm87.c:756:
+				data->fan_min[i] = lm87_read_value(client,
+						   LM87_REG_FAN_MIN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/i2c/chips/lm87.c:763:
+			data->temp[i] = lm87_read_value(client,
+					LM87_REG_TEMP[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: drivers/i2c/chips/lm87.c:765:
+			data->temp_high[i] = lm87_read_value(client,
+					     LM87_REG_TEMP_HIGH[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/i2c/chips/lm87.c:767:
+			data->temp_low[i] = lm87_read_value(client,
+					    LM87_REG_TEMP_LOW[i]);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 71 warnings, 66 checks, 838 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
