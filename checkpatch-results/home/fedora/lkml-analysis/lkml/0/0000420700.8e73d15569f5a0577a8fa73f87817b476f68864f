WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -ur linux.orig/arch/i386/kernel/i386_ksyms.c linux/arch/i386/kernel/i386_ksyms.c

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#51: FILE: arch/i386/kernel/i386_ksyms.c:93:
+EXPORT_SYMBOL(request_nmi);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#52: FILE: arch/i386/kernel/i386_ksyms.c:94:
+EXPORT_SYMBOL(release_nmi);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#64: FILE: arch/i386/kernel/irq.c:134:
+extern void nmi_append_user_names(struct seq_file *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#73: FILE: arch/i386/kernel/irq.c:171:
+	seq_printf(p, "                ");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#93: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#96: FILE: arch/i386/kernel/nmi.c:109:
+static struct nmi_handler nmi_watchdog_handler =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: arch/i386/kernel/nmi.c:367:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: arch/i386/kernel/nmi.c:367:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: arch/i386/kernel/nmi.c:367:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

WARNING:TYPO_SPELLING: 'somes' may be misspelled - perhaps 'some'?
#149: FILE: arch/i386/kernel/traps.c:491:
+   when an NMI from an otherwise unidentifiable source somes in.  If
                                                        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#149: FILE: arch/i386/kernel/traps.c:491:
+/* A list of handlers for NMIs.  This list will be called in order
+   when an NMI from an otherwise unidentifiable source somes in.  If

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: arch/i386/kernel/traps.c:498:
+   goes to zero to return and allow the user to free that data. */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#157: FILE: arch/i386/kernel/traps.c:499:
+static volatile struct nmi_handler *nmi_handler_list = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#157: FILE: arch/i386/kernel/traps.c:499:
+static volatile struct nmi_handler *nmi_handler_list = NULL;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#161: FILE: arch/i386/kernel/traps.c:503:
+static inline volatile struct nmi_handler *find_nmi_handler(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#161: FILE: arch/i386/kernel/traps.c:503:
+static inline volatile struct nmi_handler *find_nmi_handler(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#162: FILE: arch/i386/kernel/traps.c:504:
+	volatile struct nmi_handler *handler,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#163: FILE: arch/i386/kernel/traps.c:505:
+	struct nmi_handler volatile **rprev)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#165: FILE: arch/i386/kernel/traps.c:507:
+	volatile struct nmi_handler *curr, *prev;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#170: FILE: arch/i386/kernel/traps.c:512:
+		if (curr == handler) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#185: FILE: arch/i386/kernel/traps.c:527:
+	volatile struct nmi_handler *curr;

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EBUSY)
#192: FILE: arch/i386/kernel/traps.c:534:
+		return EBUSY;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!curr'
#196: FILE: arch/i386/kernel/traps.c:538:
+	if ((!curr) || (curr->priority < handler->priority)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr->priority < handler->priority'
#196: FILE: arch/i386/kernel/traps.c:538:
+	if ((!curr) || (curr->priority < handler->priority)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around curr->next
#203: FILE: arch/i386/kernel/traps.c:545:
+		xchg(&(curr->next), handler);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#212: FILE: arch/i386/kernel/traps.c:554:
+	volatile struct nmi_handler *curr, *prev;

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: arch/i386/kernel/traps.c:563:
+                   assume the write operation here is atomic. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#221: FILE: arch/i386/kernel/traps.c:563:
+		/* If it was found, remove it from the list.  We
+                   assume the write operation here is atomic. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#221: FILE: arch/i386/kernel/traps.c:563:
+                   assume the write operation here is atomic. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around prev->next
#223: FILE: arch/i386/kernel/traps.c:565:
+			xchg(&(prev->next), curr->next);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#228: FILE: arch/i386/kernel/traps.c:570:
+		/* If some other part of the kernel is handling an
+		   NMI, we make sure that we don't release the handler

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#230: FILE: arch/i386/kernel/traps.c:572:
+		   until it has finished handling the NMI. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: arch/i386/kernel/traps.c:579:
+static int call_nmi_handlers(struct pt_regs * regs)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#239: FILE: arch/i386/kernel/traps.c:581:
+	volatile struct nmi_handler *curr, *next;

WARNING:MEMORY_BARRIER: memory barrier without comment
#244: FILE: arch/i386/kernel/traps.c:586:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#261: FILE: arch/i386/kernel/traps.c:603:
+	smp_mb();

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#268: FILE: arch/i386/kernel/traps.c:610:
+	volatile struct nmi_handler *curr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#269: FILE: arch/i386/kernel/traps.c:611:
+	volatile struct nmi_handler *curr;
+	spin_lock(&nmi_handler_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: include/asm-i386/irq.h:31:
 
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#323: FILE: include/asm-i386/irq.h:35:
+struct nmi_handler
+{

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#329: FILE: include/asm-i386/irq.h:41:
+	volatile struct nmi_handler *next;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#344: FILE: include/asm-i386/irq.h:56:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 29 warnings, 7 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
