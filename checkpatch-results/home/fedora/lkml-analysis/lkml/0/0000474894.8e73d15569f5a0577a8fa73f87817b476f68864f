WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#50: 
ported to other archs. Of course, the arch dependant functions in this
                                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
diff -urN 2.4.18-ac3/arch/i386/kernel/Makefile 2.4.18-ac3-exceptions/arch/i=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: arch/i386/kernel/Makefile:17:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: arch/i386/kernel/exception.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#91: FILE: arch/i386/kernel/exception.S:2:
+ *   linux/arch/i386/kernel/exception.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: include/asm-i386/exception.h:1:
+#ifndef _I386_EXCEPTION_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: include/linux/exception.h:1:
+#ifndef _LINUX_EXCEPTION_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#232: FILE: include/linux/exception.h:5:
+ * linux/include/linux/exception.h

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#251: FILE: include/linux/exception.h:23:
+	struct exception_arch_struct arch;  /* arch dependant stuff */
 	                                            ^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#258: FILE: include/linux/exception.h:30:
+typedef struct exception_struct except_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/exception.h:34:
+extern long try_exception(struct exception_struct **current_frame, struct =

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#264: FILE: include/linux/exception.h:35:
+extern void throw_exception(struct exception_struct *current_frame, unsign=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/linux/exception.h:35:
+extern void throw_exception(struct exception_struct *current_frame, unsign=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#274: FILE: include/linux/exception.h:43:
+#define catch(_type_, _dec_) catch__cur_frame(current->exception, _type_, =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#279: FILE: include/linux/exception.h:47:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cur_frame_' - possible side-effects?
#292: FILE: include/linux/exception.h:60:
+#define catch__cur_frame(_cur_frame_, _type_, _dec_) \
+        else { \
+		struct exception_struct *_this_frame_ =3D _cur_frame_; \
+		_type_ _dec_ =3D (_type_)_this_frame_->value; \
+		_exception_.caught =3D 1; \
+		_cur_frame_ =3D _this_frame_->prev; {=20

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_type_' - possible side-effects?
#292: FILE: include/linux/exception.h:60:
+#define catch__cur_frame(_cur_frame_, _type_, _dec_) \
+        else { \
+		struct exception_struct *_this_frame_ =3D _cur_frame_; \
+		_type_ _dec_ =3D (_type_)_this_frame_->value; \
+		_exception_.caught =3D 1; \
+		_cur_frame_ =3D _this_frame_->prev; {=20

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: include/linux/exception.h:61:
+        else { \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: include/linux/exception.h:61:
+        else { \$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#294: FILE: include/linux/exception.h:62:
+		struct exception_struct *_this_frame_ =3D _cur_frame_; \
 		                                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: include/linux/exception.h:63:
+		_type_ _dec_ =3D (_type_)_this_frame_->value; \

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#295: FILE: include/linux/exception.h:63:
+		_type_ _dec_ =3D (_type_)_this_frame_->value; \
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#296: FILE: include/linux/exception.h:64:
+		_exception_.caught =3D 1; \
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#297: FILE: include/linux/exception.h:65:
+		_cur_frame_ =3D _this_frame_->prev; {=20
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#297: FILE: include/linux/exception.h:65:
+		_cur_frame_ =3D _this_frame_->prev; {=20
 		                                     ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#310: FILE: include/linux/exception.h:78:
+#define yrt__cur_frame(_cur_frame_) } }; \
+	if (!_exception_.caught) \
+		_cur_frame_ =3D (_cur_frame_)->prev;  \
+}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cur_frame_' - possible side-effects?
#310: FILE: include/linux/exception.h:78:
+#define yrt__cur_frame(_cur_frame_) } }; \
+	if (!_exception_.caught) \
+		_cur_frame_ =3D (_cur_frame_)->prev;  \
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#312: FILE: include/linux/exception.h:80:
+		_cur_frame_ =3D (_cur_frame_)->prev;  \

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#312: FILE: include/linux/exception.h:80:
+		_cur_frame_ =3D (_cur_frame_)->prev;  \
 		            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474894.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 12 warnings, 6 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474894.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
