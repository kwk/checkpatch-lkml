WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#89: 
diff -urpN mm1-2.5.59/arch/i386/kernel/apic.c cpu-2.5.59-1/arch/i386/kernel/apic.c

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#97: FILE: arch/i386/kernel/apic.c:1141:
+	bitmap_clear(phys_cpu_present_map.mask, NR_CPUS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: arch/i386/kernel/io_apic.c:198:
+static void set_ioapic_affinity (unsigned int irq, cpumask_t mask)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#135: FILE: arch/i386/kernel/io_apic.c:208:
+	__DO_ACTION(1, = regval, )

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#154: FILE: arch/i386/kernel/io_apic.c:233:
+extern cpumask_t irq_affinity [NR_IRQS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#154: FILE: arch/i386/kernel/io_apic.c:233:
+extern cpumask_t irq_affinity [NR_IRQS];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#155: FILE: arch/i386/kernel/io_apic.c:234:
+cpumask_t __cacheline_aligned irq_balance_mask [NR_IRQS];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#191: FILE: arch/i386/kernel/io_apic.c:448:
+	if (any_online_cpu(tmp) >= NR_CPUS) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#222: FILE: arch/i386/kernel/io_apic.c:512:
+		bitmap_clear(irq_balance_mask[irq].mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#234: FILE: arch/i386/kernel/io_apic.c:529:
+		bitmap_clear(irq_balance_mask[i].mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#246: FILE: arch/i386/kernel/io_apic.c:550:
+	bitmap_shift_right(tmp.mask, cpu_online_map.mask, 2, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#252: FILE: arch/i386/kernel/io_apic.c:555:
+	if (smp_num_siblings > 1 && any_online_cpu(tmp) < NR_CPUS)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#261: FILE: arch/i386/kernel/io_apic.c:594:
+static void set_ioapic_affinity (unsigned int irq, cpumask_t mask);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#267: FILE: arch/i386/kernel/io_apic.c:599:
+	if (unlikely(any_online_cpu(irq_balance_mask[irq]) < NR_CPUS)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#270: FILE: arch/i386/kernel/io_apic.c:601:
+		bitmap_clear(irq_balance_mask[irq].mask, NR_CPUS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/kernel/irq.c:796:
+#define HEX_DIGITS (2*sizeof(cpumask_t))
                      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#336: FILE: arch/i386/kernel/irq.c:828:
+		bitmap_shift_left(value.mask, value.mask, 4, NR_CPUS);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#348: FILE: arch/i386/kernel/irq.c:842:
+cpumask_t irq_affinity [NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#348: FILE: arch/i386/kernel/irq.c:842:
+cpumask_t irq_affinity [NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };
                                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#359: FILE: arch/i386/kernel/irq.c:852:
+		int j = sprintf (page, "%08lx\n", irq_affinity[(long)data].mask[k]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: arch/i386/kernel/irq.c:853:
+		int j = sprintf (page, "%08lx\n", irq_affinity[(long)data].mask[k]);
+		len  += j;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: arch/i386/kernel/ldt.c:62:
+			cpumask_t tmp = CPU_MASK_NONE;
+			preempt_disable();

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#492: FILE: arch/i386/kernel/smp.c:240:
+static volatile cpumask_t flush_cpumask;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: arch/i386/kernel/smp.c:341:
+static void flush_tlb_others(cpumask_t cpumask, struct mm_struct *mm,
 						unsigned long va)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#545: FILE: arch/i386/kernel/smp.c:351:
+	BUG_ON(any_online_cpu(cpumask) >= NR_CPUS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#545: FILE: arch/i386/kernel/smp.c:351:
+	BUG_ON(any_online_cpu(cpumask) >= NR_CPUS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: arch/i386/kernel/smp.c:354:
+	BUG_ON(!cpus_equal(cpumask, tmp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: arch/i386/kernel/smp.c:355:
+	BUG_ON(cpu_isset(smp_processor_id(), cpumask));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#550: FILE: arch/i386/kernel/smp.c:356:
+	BUG_ON(!mm);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 68)
#571: FILE: arch/i386/kernel/smp.c:379:
+	while (any_online_cpu(flush_cpumask) < NR_CPUS)
 		/* nothing. lockup detection does not belong here */;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#571: FILE: arch/i386/kernel/smp.c:379:
+	while (any_online_cpu(flush_cpumask) < NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#589: FILE: arch/i386/kernel/smp.c:397:
+	if (any_online_cpu(cpu_mask) < NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#611: FILE: arch/i386/kernel/smp.c:416:
+	if (any_online_cpu(cpu_mask) < NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#634: FILE: arch/i386/kernel/smp.c:438:
+	if (any_online_cpu(cpu_mask) < NR_CPUS)

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: arch/i386/kernel/smp.c:473:
+	cpumask_t cpumask = CPU_MASK_NONE;
+	cpu_set(cpu, cpumask);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#671: FILE: arch/i386/kernel/smpboot.c:67:
+static volatile cpumask_t cpu_callin_map;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#672: FILE: arch/i386/kernel/smpboot.c:68:
+volatile cpumask_t cpu_callout_map;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#746: FILE: arch/i386/kernel/smpboot.c:504:
+volatile cpumask_t node_2_cpu_mask[MAX_NR_NODES] = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#746: FILE: arch/i386/kernel/smpboot.c:504:
+volatile cpumask_t node_2_cpu_mask[MAX_NR_NODES] = 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#747: FILE: arch/i386/kernel/smpboot.c:505:
+volatile cpumask_t node_2_cpu_mask[MAX_NR_NODES] = 
+				{ [0 ... MAX_NR_NODES-1] = CPU_MASK_NONE };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#747: FILE: arch/i386/kernel/smpboot.c:505:
+				{ [0 ... MAX_NR_NODES-1] = CPU_MASK_NONE };
 				                     ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#817: FILE: arch/i386/kernel/smpboot.c:982:
+		bitmap_clear(phys_cpu_present_map.mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#836: FILE: arch/i386/kernel/smpboot.c:1009:
+		bitmap_clear(phys_cpu_present_map.mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#846: FILE: arch/i386/kernel/smpboot.c:1023:
+		bitmap_clear(phys_cpu_present_map.mask, NR_CPUS);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#864: FILE: arch/i386/kernel/smpboot.c:1101:
+			if (!cpu_isset(cpu, cpu_callout_map)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#874: FILE: arch/i386/kernel/smpboot.c:1137:
 void __devinit smp_prepare_boot_cpu(void)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#882: FILE: arch/i386/kernel/smpboot.c:1143:
 int __devinit __cpu_up(unsigned int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: drivers/base/node.c:35:
+	int k, len = 0;
+	for (k = 0; k < CPU_ARRAY_SIZE; ++k) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#917: FILE: drivers/base/node.c:36:
+        ^Iint j = sprintf(buf,"%lx\n",node_dev->cpumap.mask[k]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#917: FILE: drivers/base/node.c:36:
+        ^Iint j = sprintf(buf,"%lx\n",node_dev->cpumap.mask[k]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: drivers/base/node.c:36:
+        ^Iint j = sprintf(buf,"%lx\n",node_dev->cpumap.mask[k]);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#917: FILE: drivers/base/node.c:36:
+        	int j = sprintf(buf,"%lx\n",node_dev->cpumap.mask[k]);
         	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#917: FILE: drivers/base/node.c:36:
+        	int j = sprintf(buf,"%lx\n",node_dev->cpumap.mask[k]);
         	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#954: FILE: include/asm-i386/mach-numaq/mach_apic.h:47:
+	cpumask_t mask;
+	cpu_set(0, mask);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#974: FILE: include/asm-i386/mach-numaq/mach_apic.h:82:
+	cpu_set(cpu + 4*node, mask);
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#999: FILE: include/asm-i386/mach-numaq/mach_ipi.h:14:
+	cpumask_t mask = cpu_online_map;
+	cpu_clear(smp_processor_id(), mask);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1002: FILE: include/asm-i386/mach-numaq/mach_ipi.h:16:
+	if (any_online_cpu(mask) < NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1031: FILE: include/asm-i386/mmu_context.h:52:
+		BUG_ON(cpu_tlbstate[cpu].active_mm != next);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1075: FILE: include/asm-i386/smp.h:59:
+extern volatile cpumask_t cpu_callout_map;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1095: FILE: include/asm-i386/smp.h:66:
+	return bitmap_weight((unsigned long *)cpu_callout_map.mask, NR_CPUS);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1122: FILE: include/asm-i386/topology.h:35:
+extern volatile cpumask_t node_2_cpu_mask[];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1141: FILE: include/asm-i386/topology.h:61:
+	cpumask_t mask = __node_to_cpu_mask(node);
+	return first_cpu(mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1149: FILE: include/linux/bitmap.h:1:
+#ifndef __LINUX_BITMAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/linux/bitmap.h:8:
+#define DECLARE_BITMAP(name,bits) \
                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1157: FILE: include/linux/bitmap.h:9:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1157: FILE: include/linux/bitmap.h:9:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1157: FILE: include/linux/bitmap.h:9:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1158: FILE: include/linux/bitmap.h:10:
+#define CLEAR_BITMAP(name,bits) \
                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1159: FILE: include/linux/bitmap.h:11:
+	memset(name, 0, ((bits)+BITS_PER_LONG-1)/8)
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1159: FILE: include/linux/bitmap.h:11:
+	memset(name, 0, ((bits)+BITS_PER_LONG-1)/8)
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1159: FILE: include/linux/bitmap.h:11:
+	memset(name, 0, ((bits)+BITS_PER_LONG-1)/8)
 	                                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1164: FILE: include/linux/bitmap.h:16:
+	int k;
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1164: FILE: include/linux/bitmap.h:16:
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1169: FILE: include/linux/bitmap.h:21:
+		return (bitmap[k+1] & (~0UL >> (bits % BITS_PER_LONG))) == 0;
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1177: FILE: include/linux/bitmap.h:29:
+	int k;
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1177: FILE: include/linux/bitmap.h:29:
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1182: FILE: include/linux/bitmap.h:34:
+		return (~bitmap[k+1] & (~0UL >> (bits % BITS_PER_LONG))) == 0;
 		                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1190: FILE: include/linux/bitmap.h:42:
+	int k;
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1190: FILE: include/linux/bitmap.h:42:
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1196: FILE: include/linux/bitmap.h:48:
+		unsigned long mask = ~0UL >> (bits % BITS_PER_LONG);
+		return (bitmap1[k+1] & mask) == (bitmap2[k+1] & mask);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1196: FILE: include/linux/bitmap.h:48:
+		return (bitmap1[k+1] & mask) == (bitmap2[k+1] & mask);
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1196: FILE: include/linux/bitmap.h:48:
+		return (bitmap1[k+1] & mask) == (bitmap2[k+1] & mask);
 		                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1205: FILE: include/linux/bitmap.h:57:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1205: FILE: include/linux/bitmap.h:57:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1205: FILE: include/linux/bitmap.h:57:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1216: FILE: include/linux/bitmap.h:68:
+	memset(bitmap, 0xf, (bits+BITS_PER_LONG/8-1)/8);
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1216: FILE: include/linux/bitmap.h:68:
+	memset(bitmap, 0xf, (bits+BITS_PER_LONG/8-1)/8);
 	                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1216: FILE: include/linux/bitmap.h:68:
+	memset(bitmap, 0xf, (bits+BITS_PER_LONG/8-1)/8);
 	                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1216: FILE: include/linux/bitmap.h:68:
+	memset(bitmap, 0xf, (bits+BITS_PER_LONG/8-1)/8);
 	                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1221: FILE: include/linux/bitmap.h:73:
+	memcpy(dst, src, (bits+BITS_PER_LONG/8-1)/8);
 	                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1221: FILE: include/linux/bitmap.h:73:
+	memcpy(dst, src, (bits+BITS_PER_LONG/8-1)/8);
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1221: FILE: include/linux/bitmap.h:73:
+	memcpy(dst, src, (bits+BITS_PER_LONG/8-1)/8);
 	                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1221: FILE: include/linux/bitmap.h:73:
+	memcpy(dst, src, (bits+BITS_PER_LONG/8-1)/8);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1224: FILE: include/linux/bitmap.h:76:
+static inline void bitmap_shift_left(unsigned long *,unsigned long *,int,int);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1224: FILE: include/linux/bitmap.h:76:
+static inline void bitmap_shift_left(unsigned long *,unsigned long *,int,int);
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1224: FILE: include/linux/bitmap.h:76:
+static inline void bitmap_shift_left(unsigned long *,unsigned long *,int,int);
                                                                         ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1249: FILE: include/linux/bitmap.h:101:
+static inline void bitmap_and(unsigned long *dst, unsigned long *bitmap1, unsigned long *bitmap2, int bits)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1253: FILE: include/linux/bitmap.h:105:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1253: FILE: include/linux/bitmap.h:105:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1253: FILE: include/linux/bitmap.h:105:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                      ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1257: FILE: include/linux/bitmap.h:109:
+static inline void bitmap_or(unsigned long *dst, unsigned long *bitmap1, unsigned long *bitmap2, int bits)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: include/linux/bitmap.h:113:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1261: FILE: include/linux/bitmap.h:113:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1261: FILE: include/linux/bitmap.h:113:
+	for (k = 0; k < (bits+BITS_PER_LONG-1)/BITS_PER_LONG; ++k)
 	                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1270: FILE: include/linux/bitmap.h:122:
+	for (k = 0; k < bits/BITS_PER_LONG; ++k)
 	                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1284: FILE: include/linux/bitmap.h:136:
+	for (k = 0; k < bits/32; ++k)
 	                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1301: FILE: include/linux/cpumask.h:1:
+#ifndef __LINUX_CPUMASK_H

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1306: FILE: include/linux/cpumask.h:6:
+#define CPU_ARRAY_SIZE		((NR_CPUS + BITS_PER_LONG - 1)/BITS_PER_LONG)
                       		                              ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1309: FILE: include/linux/cpumask.h:9:
+struct cpumask
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1310: FILE: include/linux/cpumask.h:10:
+	unsigned long mask[(NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG];
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1310: FILE: include/linux/cpumask.h:10:
+	unsigned long mask[(NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG];
 	                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1310: FILE: include/linux/cpumask.h:10:
+	unsigned long mask[(NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG];
 	                                            ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1313: FILE: include/linux/cpumask.h:13:
+typedef struct cpumask cpumask_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1326: FILE: include/linux/cpumask.h:26:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1326: FILE: include/linux/cpumask.h:26:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1326: FILE: include/linux/cpumask.h:26:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                                	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1327: FILE: include/linux/cpumask.h:27:
+#define cpus_or(dst,src1,src2)	bitmap_or((dst).mask, (src1).mask, (src2).mask, NR_CPUS)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1327: FILE: include/linux/cpumask.h:27:
+#define cpus_or(dst,src1,src2)	bitmap_or((dst).mask, (src1).mask, (src2).mask, NR_CPUS)
                         ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1336: FILE: include/linux/cpumask.h:36:
+	while (cpu < NR_CPUS && !cpu_online(cpu));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1340: FILE: include/linux/cpumask.h:40:
+#define for_each_cpu(cpu, map)						\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#1340: FILE: include/linux/cpumask.h:40:
+#define for_each_cpu(cpu, map)						\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1341: FILE: include/linux/cpumask.h:41:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))
 	                                                            ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1341: FILE: include/linux/cpumask.h:41:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1342: FILE: include/linux/cpumask.h:42:
+#define for_each_online_cpu(cpu, map)					\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#1342: FILE: include/linux/cpumask.h:42:
+#define for_each_online_cpu(cpu, map)					\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1343: FILE: include/linux/cpumask.h:43:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))
 	                                                                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1343: FILE: include/linux/cpumask.h:43:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1348: FILE: include/linux/cpumask.h:48:
+#define CPU_MASK_ALL	{ {[0 ... CPU_ARRAY_SIZE-1] = ~0UL} }
                     	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1349: FILE: include/linux/cpumask.h:49:
+#define CPU_MASK_NONE	{ {[0 ... CPU_ARRAY_SIZE-1] =  0UL} }
                      	                        ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1396: FILE: include/linux/rcupdate.h:70:
+^Icpumask_t^Ircu_cpu_mask; ^I/* CPUs that need to switch in order  */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1435: FILE: include/linux/sched.h:447:
+extern void set_cpus_allowed(task_t *p, cpumask_t new_mask);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1467: FILE: kernel/fork.c:238:
+	bitmap_clear(mm->cpu_vm_mask.mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1528: FILE: kernel/rcupdate.c:109:
+	    (any_online_cpu(rcu_ctrlblk.rcu_cpu_mask) < NR_CPUS)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1537: FILE: kernel/rcupdate.c:124:
+	if (!cpu_isset(cpu, rcu_ctrlblk.rcu_cpu_mask)) {
 		return;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1554: FILE: kernel/rcupdate.c:148:
+	if (any_online_cpu(rcu_ctrlblk.rcu_cpu_mask) < NR_CPUS) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1623: FILE: kernel/sched.c:794:
+			cpumask_t node_mask = __node_to_cpu_mask(node);
+			cpu_set(this_cpu, node_mask);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1642: FILE: kernel/sched.c:840:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this_cpu, int idle, int *imbalance, cpumask_t cpumask)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1680: FILE: kernel/sched.c:1823:
+	if (any_online_cpu(new_mask) >= NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1718: FILE: kernel/sched.c:2237:
+	BUG_ON(any_online_cpu(new_mask) >= NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1718: FILE: kernel/sched.c:2237:
+	BUG_ON(any_online_cpu(new_mask) >= NR_CPUS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1765: FILE: kernel/sched.c:2322:
+			cpumask_t tmp;
+			cpus_and(tmp, p->cpus_allowed, cpu_online_map);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1791: FILE: kernel/softirq.c:312:
+	BUG_ON(smp_processor_id() != cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000398623.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 71 warnings, 48 checks, 1520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000398623.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
