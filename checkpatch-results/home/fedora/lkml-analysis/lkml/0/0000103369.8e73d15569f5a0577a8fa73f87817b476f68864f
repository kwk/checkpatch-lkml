WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch makes the add_key(), request_key and keyctl() syscalls deal

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#38: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'error' - possible side-effects?
#59: FILE: security/keys/keyctl.c:24:
+#define key_get_type_from_user(type, _type, error)		\
+do {								\
+	ret = strncpy_from_user(type, _type, sizeof(type));	\
+	if (ret < 0)						\
+		goto error;					\
+								\
+	if (ret == 0 || ret > sizeof(type) - 1) {		\
+		ret = -EINVAL;					\
+		goto error;					\
+	}							\
+								\
+	ret = -EPERM;						\
+	if (type[0] == '.')					\
+		goto error;					\
+								\
+	type[31] = '\0';					\
+} while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#59: FILE: security/keys/keyctl.c:24:
+#define key_get_type_from_user(type, _type, error)		\
+do {								\
+	ret = strncpy_from_user(type, _type, sizeof(type));	\
+	if (ret < 0)						\
+		goto error;					\
+								\
+	if (ret == 0 || ret > sizeof(type) - 1) {		\
+		ret = -EINVAL;					\
+		goto error;					\
+	}							\
+								\
+	ret = -EPERM;						\
+	if (type[0] == '.')					\
+		goto error;					\
+								\
+	type[31] = '\0';					\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#75: FILE: security/keys/keyctl.c:40:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#77: FILE: security/keys/keyctl.c:42:
+#define key_get_description_from_user(desc, _desc, dlen, error, error2)	\
+do {									\
+	ret = -EFAULT;							\
+	dlen = strnlen_user(_desc, PAGE_SIZE);				\
+	if (dlen <= 0)							\
+		goto error;						\
+									\
+	ret = -EINVAL;							\
+	if (dlen > PAGE_SIZE)						\
+		goto error;						\
+									\
+	ret = -ENOMEM;							\
+	desc = kmalloc(dlen, GFP_KERNEL);				\
+	if (!desc)							\
+		goto error;						\
+									\
+	ret = -EFAULT;							\
+	if (copy_from_user(desc, _desc, dlen - 1) != 0)			\
+		goto error2;						\
+									\
+	desc[dlen - 1] = '\0';						\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_desc' - possible side-effects?
#77: FILE: security/keys/keyctl.c:42:
+#define key_get_description_from_user(desc, _desc, dlen, error, error2)	\
+do {									\
+	ret = -EFAULT;							\
+	dlen = strnlen_user(_desc, PAGE_SIZE);				\
+	if (dlen <= 0)							\
+		goto error;						\
+									\
+	ret = -EINVAL;							\
+	if (dlen > PAGE_SIZE)						\
+		goto error;						\
+									\
+	ret = -ENOMEM;							\
+	desc = kmalloc(dlen, GFP_KERNEL);				\
+	if (!desc)							\
+		goto error;						\
+									\
+	ret = -EFAULT;							\
+	if (copy_from_user(desc, _desc, dlen - 1) != 0)			\
+		goto error2;						\
+									\
+	desc[dlen - 1] = '\0';						\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dlen' - possible side-effects?
#77: FILE: security/keys/keyctl.c:42:
+#define key_get_description_from_user(desc, _desc, dlen, error, error2)	\
+do {									\
+	ret = -EFAULT;							\
+	dlen = strnlen_user(_desc, PAGE_SIZE);				\
+	if (dlen <= 0)							\
+		goto error;						\
+									\
+	ret = -EINVAL;							\
+	if (dlen > PAGE_SIZE)						\
+		goto error;						\
+									\
+	ret = -ENOMEM;							\
+	desc = kmalloc(dlen, GFP_KERNEL);				\
+	if (!desc)							\
+		goto error;						\
+									\
+	ret = -EFAULT;							\
+	if (copy_from_user(desc, _desc, dlen - 1) != 0)			\
+		goto error2;						\
+									\
+	desc[dlen - 1] = '\0';						\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'error' - possible side-effects?
#77: FILE: security/keys/keyctl.c:42:
+#define key_get_description_from_user(desc, _desc, dlen, error, error2)	\
+do {									\
+	ret = -EFAULT;							\
+	dlen = strnlen_user(_desc, PAGE_SIZE);				\
+	if (dlen <= 0)							\
+		goto error;						\
+									\
+	ret = -EINVAL;							\
+	if (dlen > PAGE_SIZE)						\
+		goto error;						\
+									\
+	ret = -ENOMEM;							\
+	desc = kmalloc(dlen, GFP_KERNEL);				\
+	if (!desc)							\
+		goto error;						\
+									\
+	ret = -EFAULT;							\
+	if (copy_from_user(desc, _desc, dlen - 1) != 0)			\
+		goto error2;						\
+									\
+	desc[dlen - 1] = '\0';						\
+} while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#77: FILE: security/keys/keyctl.c:42:
+#define key_get_description_from_user(desc, _desc, dlen, error, error2)	\
+do {									\
+	ret = -EFAULT;							\
+	dlen = strnlen_user(_desc, PAGE_SIZE);				\
+	if (dlen <= 0)							\
+		goto error;						\
+									\
+	ret = -EINVAL;							\
+	if (dlen > PAGE_SIZE)						\
+		goto error;						\
+									\
+	ret = -ENOMEM;							\
+	desc = kmalloc(dlen, GFP_KERNEL);				\
+	if (!desc)							\
+		goto error;						\
+									\
+	ret = -EFAULT;							\
+	if (copy_from_user(desc, _desc, dlen - 1) != 0)			\
+		goto error2;						\
+									\
+	desc[dlen - 1] = '\0';						\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: security/keys/keyctl.c:63:
+} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 5 checks, 214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
