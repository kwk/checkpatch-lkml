WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -uNr 2.4.0-shm_vm_locked-truncate/include/linux/fs.h 2.4.0-shm_vm_locked-truncate-rw/include/linux/fs.h

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#45: FILE: include/linux/fs.h:1201:
 }
+extern void remove_suid(struct inode *inode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: include/linux/fs.h:1201:
+extern void remove_suid(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#53: FILE: include/linux/fs.h:1249:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#53: FILE: include/linux/fs.h:1249:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: include/linux/fs.h:1249:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#66: FILE: include/linux/mm.h:203:
+					if (waitqueue_active(&(page)->wait)) \

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#79: FILE: mm/filemap.c:1215:
+int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: mm/filemap.c:1215:
+int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size)

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#115: FILE: mm/shmem.c:42:
+static struct vm_operations_struct shmem_vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#159: FILE: mm/shmem.c:213:
+	if (IS_ERR(entry))	/* this had been allocted on page allocation */
 	                  	                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: mm/shmem.c:238:
+static struct page * shmem_getpage_locked(struct inode * inode, unsigned long idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: mm/shmem.c:238:
+static struct page * shmem_getpage_locked(struct inode * inode, unsigned long idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#184: FILE: mm/shmem.c:242:
+	struct page * page;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#198: FILE: mm/shmem.c:245:
+	page = find_lock_page(mapping, idx);;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: mm/shmem.c:296:
+	spin_unlock (&inode->i_sb->u.shmem_sb.stat_lock);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: mm/shmem.c:307:
+static int shmem_getpage(struct inode * inode, unsigned long idx, struct page **ptr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: mm/shmem.c:309:
+	struct address_space * mapping = inode->i_mapping;

CHECK:SPACING: No space is necessary after a cast
#263: FILE: mm/shmem.c:313:
+	if (inode->i_size < (loff_t) idx * PAGE_CACHE_SIZE)

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#268: FILE: mm/shmem.c:318:
+		if (Page_Uptodate(*ptr))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: mm/shmem.c:323:
+	down (&inode->i_sem);

CHECK:SPACING: No space is necessary after a cast
#275: FILE: mm/shmem.c:325:
+	if (inode->i_size < (loff_t) idx * PAGE_CACHE_SIZE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: mm/shmem.c:328:
+	if (IS_ERR (*ptr))

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#280: FILE: mm/shmem.c:330:
+	UnlockPage(*ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#281: FILE: mm/shmem.c:331:
+	up (&inode->i_sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: mm/shmem.c:334:
+	up (&inode->i_sem);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: mm/shmem.c:345:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: mm/shmem.c:345:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: mm/shmem.c:347:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: mm/shmem.c:349:
+	struct inode * inode = vma->vm_file->f_dentry->d_inode;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: mm/shmem.c:420:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: mm/shmem.c:420:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: mm/shmem.c:420:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: mm/shmem.c:422:
+^Istruct inode^I*inode = file->f_dentry->d_inode; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: mm/shmem.c:430:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#375: FILE: mm/shmem.c:467:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#387: FILE: mm/shmem.c:479:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#401: FILE: mm/shmem.c:493:
+		{ volatile unsigned char dummy;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: mm/shmem.c:495:
+			__get_user(dummy, buf+bytes-1);
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#403: FILE: mm/shmem.c:495:
+			__get_user(dummy, buf+bytes-1);
 			                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#412: FILE: mm/shmem.c:504:
+		if (!PageLocked(page)) {
+			PAGE_BUG(page);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#418: FILE: mm/shmem.c:510:
+		status = copy_from_user(kaddr+offset, buf, bytes);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: mm/shmem.c:521:
+^I^I^Iif (pos > inode->i_size) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: mm/shmem.c:523:
+                        if (inode->u.shmem_i.max_index < index)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: mm/shmem.c:523:
+                        if (inode->u.shmem_i.max_index < index)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: mm/shmem.c:524:
+                                inode->u.shmem_i.max_index = index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: mm/shmem.c:524:
+                                inode->u.shmem_i.max_index = index;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#434: FILE: mm/shmem.c:526:
+
+		}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#458: FILE: mm/shmem.c:550:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)
                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: mm/shmem.c:550:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: mm/shmem.c:550:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#484: FILE: mm/shmem.c:576:
+		if ((desc->error = shmem_getpage(inode, index, &page)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping->i_mmap_shared"
#487: FILE: mm/shmem.c:579:
+		if (mapping->i_mmap_shared != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: mm/shmem.c:596:
+^I$

CHECK:SPACING: No space is necessary after a cast
#508: FILE: mm/shmem.c:600:
+	*ppos = ((loff_t) index << PAGE_CACHE_SHIFT) + offset;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#512: FILE: mm/shmem.c:604:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)
                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: mm/shmem.c:604:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: mm/shmem.c:604:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#527: FILE: mm/shmem.c:619:
+			do_shmem_file_read(filp, ppos, &desc);
 			                   ^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#556: FILE: mm/shmem.c:903:
+	mmap:	shmem_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#557: FILE: mm/shmem.c:904:
+	read:	shmem_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#557: FILE: mm/shmem.c:904:
+	read:	shmem_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#558: FILE: mm/shmem.c:905:
+	write:	shmem_file_write
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#558: FILE: mm/shmem.c:905:
+	write:	shmem_file_write

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#571: FILE: mm/shmem.c:936:
+static struct vm_operations_struct shmem_vm_ops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000556171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 23 warnings, 16 checks, 514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000556171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
