WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#164: FILE: arch/ppc/kernel/entry.S:240:
+	andi.	r0,r9,(_TIF_SYSCALL_TRACE|_TIF_SIGPENDING|_TIF_NEED_RESCHED|_TIF_NEED_RESCHED_DELAYED)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#349: FILE: arch/ppc/kernel/smp-tbsync.c:84:
 static int __devinit

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: arch/ppc/kernel/idle.c:66:
+		BUG_ON(raw_irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: arch/ppc/mm/fault.c:96:
+int notrace do_page_fault(struct pt_regs *regs, unsigned long address,
 		  unsigned long error_code)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: arch/ppc/platforms/pal4_setup.c:84:
+        raw_local_irq_disable();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: arch/ppc/platforms/pal4_setup.c:84:
+        raw_local_irq_disable();$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1418: FILE: include/asm-ppc/thread_info.h:87:
+#define _TIF_NEED_RESCHED_DELAYED (1<<TIF_NEED_RESCHED_DELAYED)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#1418: FILE: include/asm-ppc/thread_info.h:87:
+#define _TIF_NEED_RESCHED_DELAYED (1<<TIF_NEED_RESCHED_DELAYED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#1438: FILE: include/asm-ppc/hw_irq.h:17:
+#define __raw_irqs_disabled_flags(flags)	((flags & MSR_EE) == 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1477: FILE: include/asm-ppc/hw_irq.h:50:
+#define __RAW_LOCAL_ILLEGAL_MASK        (1 << 17)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#1480: FILE: include/asm-ppc/hw_irq.h:53:
+#define __raw_local_irq_save(flags)	__raw_local_irq_save_ptr(&flags)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1543: FILE: kernel/latency.c:2089:
+	if (!(entry = create_proc_entry(PROCNAME_PML, 0644, NULL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1543: FILE: kernel/latency.c:2089:
+	if (!(entry = create_proc_entry(PROCNAME_PML, 0644, NULL)))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1544: FILE: kernel/latency.c:2090:
+		printk("latency_init(): can't create %s\n", PROCNAME_PML);

CHECK:BRACES: Unbalanced braces around else statement
#1545: FILE: kernel/latency.c:2091:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1552: FILE: kernel/latency.c:2098:
+	if (!(entry = create_proc_entry(PROCNAME_PT, 0644, NULL)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1552: FILE: kernel/latency.c:2098:
+	if (!(entry = create_proc_entry(PROCNAME_PT, 0644, NULL)))
[...]
+	else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1553: FILE: kernel/latency.c:2099:
+		printk("latency_init(): can't create %s\n", PROCNAME_PT);

CHECK:BRACES: Unbalanced braces around else statement
#1554: FILE: kernel/latency.c:2100:
+	else {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1570: FILE: kernel/softirq.c:460:
+	printk("ksoftirqd started: %s 0x%x policy %d prio %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ksoftirqd', this function's name, in a string
#1570: FILE: kernel/softirq.c:460:
+	printk("ksoftirqd started: %s 0x%x policy %d prio %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1571: FILE: kernel/softirq.c:461:
+	printk("ksoftirqd started: %s 0x%x policy %d prio %d\n",
+		current->comm, current, current->policy, current->prio);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1593: FILE: kernel/timer.c:409:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1598: FILE: kernel/timer.c:414:
+		return (1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 68 warnings, 12 checks, 1188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
