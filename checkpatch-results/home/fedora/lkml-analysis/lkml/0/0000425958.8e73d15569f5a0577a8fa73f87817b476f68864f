WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	           ChangeSet	1.776   -> 1.777  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	drivers/ide/ide-taskfile.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	drivers/ide/Config.in	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	   drivers/ide/ide.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	 include/linux/ide.h	1.21    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	drivers/ide/ide-disk.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#	drivers/ide/ide-dma.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#	drivers/ide/Makefile	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#	drivers/ide/ide-probe.c	1.17    -> 1.18   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#	drivers/ide/Config.help	1.27    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#	               (new)	        -> 1.1     drivers/ide/ide-tcq.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# 02/10/07	axboe@burns.home.kernel.dk	1.777

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# Tagged command queueing for IDE, 2.5.40-BK

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#52: 
--- a/drivers/ide/Config.help	Mon Oct  7 12:02:43 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#71: FILE: drivers/ide/Config.help:274:
+  and 32 is valid, with 32 being the maxium that the hardware supports.
                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: drivers/ide/ide-disk.c:400:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#190: FILE: drivers/ide/ide-disk.c:436:
+				rq_data_dir(rq)==READ?"read":"writ",
 				               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#190: FILE: drivers/ide/ide-disk.c:436:
+				rq_data_dir(rq)==READ?"read":"writ",
 				                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#190: FILE: drivers/ide/ide-disk.c:436:
+				rq_data_dir(rq)==READ?"read":"writ",
 				                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#199: FILE: drivers/ide/ide-disk.c:460:
+			printk("%s: %sing: LBAsect=%ld, sectors=%d, "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#203: FILE: drivers/ide/ide-disk.c:462:
+				drive->name,rq_data_dir(rq)==READ?"read":"writ",
 				           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#203: FILE: drivers/ide/ide-disk.c:462:
+				drive->name,rq_data_dir(rq)==READ?"read":"writ",
 				                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#203: FILE: drivers/ide/ide-disk.c:462:
+				drive->name,rq_data_dir(rq)==READ?"read":"writ",
 				                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#203: FILE: drivers/ide/ide-disk.c:462:
+				drive->name,rq_data_dir(rq)==READ?"read":"writ",
 				                                        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#240: FILE: drivers/ide/ide-disk.c:500:
+			drive->name, rq_data_dir(rq)==READ?"read":"writ", cyl,
 			                            ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#240: FILE: drivers/ide/ide-disk.c:500:
+			drive->name, rq_data_dir(rq)==READ?"read":"writ", cyl,
 			                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#240: FILE: drivers/ide/ide-disk.c:500:
+			drive->name, rq_data_dir(rq)==READ?"read":"writ", cyl,
 			                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#278: FILE: drivers/ide/ide-disk.c:618:
+			BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == READ'
#290: FILE: drivers/ide/ide-disk.c:640:
+	if ((cmd == READ) && drive->using_tcq)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#309: FILE: drivers/ide/ide-disk.c:684:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <tfRegister>
#310: FILE: drivers/ide/ide-disk.c:685:
+		args.tfRegister[IDE_FEATURE_OFFSET] = sectors;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#312: FILE: drivers/ide/ide-disk.c:687:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#324: FILE: drivers/ide/ide-disk.c:722:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#327: FILE: drivers/ide/ide-disk.c:725:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <hobRegister>
#342: FILE: drivers/ide/ide-disk.c:769:
+		args.hobRegister[IDE_FEATURE_OFFSET_HOB] = sectors >> 8;

CHECK:SPACING: No space is necessary after a cast
#366: FILE: drivers/ide/ide-disk.c:1396:
+	ide_drive_t	*drive = (ide_drive_t *) data;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: drivers/ide/ide-disk.c:1409:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: drivers/ide/ide-disk.c:1409:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: drivers/ide/ide-disk.c:1410:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: drivers/ide/ide-disk.c:1410:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: drivers/ide/ide-disk.c:1411:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: drivers/ide/ide-disk.c:1411:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: drivers/ide/ide-disk.c:1412:
+	len += sprintf(out+len, "Current depth:\t\t%d\n", ata_pending_commands(drive));
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#383: FILE: drivers/ide/ide-disk.c:1413:
+	len += sprintf(out+len, "Active tags:\t\t[ ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: drivers/ide/ide-disk.c:1420:
+		len += sprintf(out+len, "%d, ", i);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: drivers/ide/ide-disk.c:1423:
+	len += sprintf(out+len, "]\n");
 	                  ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#395: FILE: drivers/ide/ide-disk.c:1425:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: drivers/ide/ide-disk.c:1425:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);
 	                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#398: FILE: drivers/ide/ide-disk.c:1428:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#398: FILE: drivers/ide/ide-disk.c:1428:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#400: FILE: drivers/ide/ide-disk.c:1430:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", HWIF(drive)->dma ? "" : "not ");
 	                  ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#415: FILE: drivers/ide/ide-disk.c:1445:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#415: FILE: drivers/ide/ide-disk.c:1445:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },
 	        		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#415: FILE: drivers/ide/ide-disk.c:1445:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 287 exceeds 100 columns
#463: FILE: drivers/ide/ide-disk.c:1662:
+	ide_add_setting(drive,	"using_tcq",		SETTING_RW,					HDIO_GET_QDMA,		HDIO_SET_QDMA,		TYPE_BYTE,	0,	IDE_MAX_TAG,			1,		1,		&drive->using_tcq,		set_using_tcq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#541: FILE: drivers/ide/ide-dma.c:546:
+EXPORT_SYMBOL(ide_start_dma);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#543: FILE: drivers/ide/ide-dma.c:548:
+int __ide_dma_read (ide_drive_t *drive /*, struct request *rq */)

WARNING:MEMORY_BARRIER: memory barrier without comment
#643: FILE: drivers/ide/ide-dma.c:629:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#652: FILE: drivers/ide/ide-dma.c:654:
+	wmb();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#752: FILE: drivers/ide/ide-tcq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#765: FILE: drivers/ide/ide-tcq.c:14:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#766: FILE: drivers/ide/ide-tcq.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#779: FILE: drivers/ide/ide-tcq.c:28:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#780: FILE: drivers/ide/ide-tcq.c:29:
+#include <asm/delay.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#806: FILE: drivers/ide/ide-tcq.c:55:
+ide_startstop_t ide_service(ide_drive_t *drive);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#843: FILE: drivers/ide/ide-tcq.c:92:
+			printk("%s: NOP Auto-poll enabled\n",HWIF(drive)->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#843: FILE: drivers/ide/ide-tcq.c:92:
+			printk("%s: NOP Auto-poll enabled\n",HWIF(drive)->name);
 			                                    ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#863: FILE: drivers/ide/ide-tcq.c:112:
+	printk("%s: invalidating tag queue (%d commands)\n", drive->name, ata_pending_commands(drive));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#863: FILE: drivers/ide/ide-tcq.c:112:
+	printk("%s: invalidating tag queue (%d commands)\n", drive->name, ata_pending_commands(drive));

CHECK:SPACING: No space is necessary after a cast
#897: FILE: drivers/ide/ide-tcq.c:146:
+	ide_drive_t *drive = (ide_drive_t *) data;

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#902: FILE: drivers/ide/ide-tcq.c:151:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt\n", hwgroup->rq ? "completion" : "service");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#902: FILE: drivers/ide/ide-tcq.c:151:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt\n", hwgroup->rq ? "completion" : "service");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#902: FILE: drivers/ide/ide-tcq.c:151:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt\n", hwgroup->rq ? "completion" : "service");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#907: FILE: drivers/ide/ide-tcq.c:156:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#907: FILE: drivers/ide/ide-tcq.c:156:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#908: FILE: drivers/ide/ide-tcq.c:157:
+	if (hwgroup->handler == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: drivers/ide/ide-tcq.c:158:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#909: FILE: drivers/ide/ide-tcq.c:158:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

CHECK:SPACING: No space is necessary after a cast
#935: FILE: drivers/ide/ide-tcq.c:184:
+	hwgroup->timer.data = (unsigned long) hwgroup->drive;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#954: FILE: drivers/ide/ide-tcq.c:203:
+int ide_tcq_wait_altstat(ide_drive_t *drive, byte *stat, byte busy_mask)
                                                   ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#970: FILE: drivers/ide/ide-tcq.c:219:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1004: FILE: drivers/ide/ide-tcq.c:253:
+		udelay(10);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1015: FILE: drivers/ide/ide-tcq.c:264:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1015: FILE: drivers/ide/ide-tcq.c:264:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1038: FILE: drivers/ide/ide-tcq.c:287:
+		printk("%s: release in service\n", drive->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1044: FILE: drivers/ide/ide-tcq.c:293:
+	TCQ_PRINTK("ide_service: stat %x, feat %x\n", stat, feat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1048: FILE: drivers/ide/ide-tcq.c:297:
+	if ((rq = blk_queue_find_tag(&drive->queue, tag))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1056: FILE: drivers/ide/ide-tcq.c:305:
+		TCQ_PRINTK("ide_service: starting command, stat=%x\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1061: FILE: drivers/ide/ide-tcq.c:310:
+	printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1061: FILE: drivers/ide/ide-tcq.c:310:
+	printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_check_service', this function's name, in a string
#1071: FILE: drivers/ide/ide-tcq.c:320:
+	TCQ_PRINTK("%s: ide_check_service\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1101: FILE: drivers/ide/ide-tcq.c:350:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1101: FILE: drivers/ide/ide-tcq.c:350:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1101: FILE: drivers/ide/ide-tcq.c:350:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);
 		                                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: drivers/ide/ide-tcq.c:357:
+		printk("%s: bad DMA status (dma_stat=%x)\n", drive->name, dma_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_complete', this function's name, in a string
#1110: FILE: drivers/ide/ide-tcq.c:359:
+	TCQ_PRINTK("ide_dmaq_complete: ending %p, tag %d\n", rq, rq->tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1135: FILE: drivers/ide/ide-tcq.c:384:
+	TCQ_PRINTK("ide_dmaq_intr: stat=%x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1142: FILE: drivers/ide/ide-tcq.c:391:
+		TCQ_PRINTK("ide_dmaq_intr: completion\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1150: FILE: drivers/ide/ide-tcq.c:399:
+		TCQ_PRINTK("ide_dmaq_intr: SERV (stat=%x)\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1154: FILE: drivers/ide/ide-tcq.c:403:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1154: FILE: drivers/ide/ide-tcq.c:403:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1219: FILE: drivers/ide/ide-tcq.c:468:
+		printk("%s: failed to enable write cache\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1233: FILE: drivers/ide/ide-tcq.c:482:
+		printk("%s: disabling release interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1247: FILE: drivers/ide/ide-tcq.c:496:
+		printk("%s: enabling service interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1272: FILE: drivers/ide/ide-tcq.c:521:
+			printk("%s: TCQ disabled\n", drive->name);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1294: FILE: drivers/ide/ide-tcq.c:543:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1294: FILE: drivers/ide/ide-tcq.c:543:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1311: FILE: drivers/ide/ide-tcq.c:560:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1329: FILE: drivers/ide/ide-tcq.c:578:
+		udelay(10);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1340: FILE: drivers/ide/ide-tcq.c:589:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1342: FILE: drivers/ide/ide-tcq.c:591:
+		printk("ide-tcq; can't toggle tcq feature on busy drive\n");

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1352: FILE: drivers/ide/ide-tcq.c:601:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1354: FILE: drivers/ide/ide-tcq.c:603:
+		printk("ide-tcq; can't toggle tcq feature on busy drive\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1380: FILE: drivers/ide/ide-tcq.c:629:
+		printk("%s: alt stat timeout\n", drive->name);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1425: FILE: drivers/ide/ide-tcq.c:674:
+	if (drive->addressing == 1)
+		 command = WIN_READDMA_QUEUED_EXT;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1435: FILE: drivers/ide/ide-tcq.c:684:
+	if (drive->addressing == 1)
+		 command = WIN_WRITEDMA_QUEUED_EXT;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1451: FILE: drivers/ide/ide-tcq.c:700:
+		printk("queued_rw: hwgroup not busy\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1454: FILE: drivers/ide/ide-tcq.c:703:
+		printk("timeout waiting for data phase\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1503: FILE: drivers/ide/ide.c:1135:
+			printk("ide: huh? queue was plugged!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1532: FILE: drivers/ide/ide.c:1408:
+		printk("ide: unexpected interrupt\n");

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1561: FILE: include/linux/ide.h:687:
+typedef enum {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1642: FILE: include/linux/ide.h:1051:
+	unsigned dma;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1660: FILE: include/linux/ide.h:1685:
+extern int ide_start_dma(ide_hwif_t *, ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_hwif_t *' should also have an identifier name
#1660: FILE: include/linux/ide.h:1685:
+extern int ide_start_dma(ide_hwif_t *, ide_drive_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1660: FILE: include/linux/ide.h:1685:
+extern int ide_start_dma(ide_hwif_t *, ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1660: FILE: include/linux/ide.h:1685:
+extern int ide_start_dma(ide_hwif_t *, ide_drive_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1669: FILE: include/linux/ide.h:1707:
+extern int __ide_dma_queued_on(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1670: FILE: include/linux/ide.h:1708:
+extern int __ide_dma_queued_off(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1671: FILE: include/linux/ide.h:1709:
+extern ide_startstop_t __ide_dma_queued_read(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1672: FILE: include/linux/ide.h:1710:
+extern ide_startstop_t __ide_dma_queued_write(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1673: FILE: include/linux/ide.h:1711:
+extern ide_startstop_t __ide_dma_queued_start(ide_drive_t *drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 88 warnings, 39 checks, 1591 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
