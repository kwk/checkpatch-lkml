WARNING:TYPO_SPELLING: 'mutliple' may be misspelled - perhaps 'multiple'?
#15: 
Subject: [PATCH rev2 1/4] dmaengine: enable mutliple clients and operations
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#125: FILE: drivers/dma/dmaengine.c:145:
+	__ATTR(xor_count, S_IRUGO, show_xor_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#127: FILE: drivers/dma/dmaengine.c:147:
+	__ATTR(bytes_xor, S_IRUGO, show_bytes_xor, NULL),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/dma/dmaengine.c:176:
+static struct dma_chan *dma_client_chan_alloc(struct dma_client *client,
+	struct dma_req *req)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: drivers/dma/dmaengine.c:207:
+			if ((req->exclusive && !list_empty(&chan->peers)) ||
+				chan->exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: drivers/dma/dmaengine.c:238:
+				list_add_tail_rcu(&chan_ref->req_node,
+						&req->channels);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/dma/dmaengine.c:291:
+static void dma_client_chan_free(struct dma_client *client,
+				struct dma_chan_client_ref *chan_ref)

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: drivers/dma/dmaengine.c:335:
+			struct dma_req *req = &client->req[i];
+			while (req->chans_desired > atomic_read(&req->chan_count)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: drivers/dma/dmaengine.c:341:
+^I^I                                       chan,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: drivers/dma/dmaengine.c:342:
+^I^I                                       DMA_RESOURCE_ADDED);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: drivers/dma/dmaengine.c:347:
+^I^I^I^I                  struct dma_chan_client_ref,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/dma/dmaengine.c:347:
+				chan_ref = list_entry(req->channels.next,
+				                  struct dma_chan_client_ref,

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: drivers/dma/dmaengine.c:348:
+^I^I^I^I                  req_node);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: drivers/dma/dmaengine.c:354:
+^I^I^I^I                       chan_ref->chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: drivers/dma/dmaengine.c:355:
+^I^I^I^I                       DMA_RESOURCE_REMOVED);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/dma/dmaengine.c:434:
+int dma_async_client_chan_request(struct dma_client *client,
+			unsigned int number, unsigned int mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: drivers/dma/dmaengine.c:441:
+		struct dma_req *req = &client->req[i];
+		if (req->cap_mask == mask) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: drivers/dma/dmaengine.c:452:
+			struct dma_req *req = &client->req[i];
+			if (!req->chans_desired) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#513: FILE: drivers/dma/dmaengine.c:571:
+						client->event_callback(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/dma/dmaengine.c:600:
+dma_cookie_t dma_async_xor_pgs_to_pg_err(struct dma_chan *chan,
+	struct page *dest_pg, unsigned int dest_off, struct page *src_pgs,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#567: FILE: drivers/dma/dmaengine.c:614:
+EXPORT_SYMBOL_GPL(dma_async_client_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#568: FILE: drivers/dma/dmaengine.c:615:
+EXPORT_SYMBOL_GPL(dma_async_client_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#569: FILE: drivers/dma/dmaengine.c:616:
+EXPORT_SYMBOL_GPL(dma_async_client_chan_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#570: FILE: drivers/dma/dmaengine.c:617:
+EXPORT_SYMBOL_GPL(dma_async_memcpy_buf_to_buf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#571: FILE: drivers/dma/dmaengine.c:618:
+EXPORT_SYMBOL_GPL(dma_async_memcpy_buf_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#572: FILE: drivers/dma/dmaengine.c:619:
+EXPORT_SYMBOL_GPL(dma_async_memcpy_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#573: FILE: drivers/dma/dmaengine.c:620:
+EXPORT_SYMBOL_GPL(dma_async_xor_pgs_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#574: FILE: drivers/dma/dmaengine.c:621:
+EXPORT_SYMBOL_GPL(dma_async_operation_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#575: FILE: drivers/dma/dmaengine.c:622:
+EXPORT_SYMBOL_GPL(dma_async_issue_pending);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#576: FILE: drivers/dma/dmaengine.c:623:
+EXPORT_SYMBOL_GPL(dma_async_device_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#577: FILE: drivers/dma/dmaengine.c:624:
+EXPORT_SYMBOL_GPL(dma_async_device_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#578: FILE: drivers/dma/dmaengine.c:625:
+EXPORT_SYMBOL_GPL(dma_chan_cleanup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#579: FILE: drivers/dma/dmaengine.c:626:
+EXPORT_SYMBOL_GPL(dma_async_xor_pgs_to_pg_err);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#580: FILE: drivers/dma/dmaengine.c:627:
+EXPORT_SYMBOL_GPL(dma_async_chan_init);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#684: FILE: include/linux/dmaengine.h:124:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: include/linux/dmaengine.h:262:
+	dma_cookie_t (*device_xor_pgs_to_pg)(struct dma_chan *chan,
+			struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: include/linux/dmaengine.h:266:
+	enum dma_status (*device_operation_complete)(struct dma_chan *chan,
 			dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: include/linux/dmaengine.h:276:
+int dma_async_client_chan_request(struct dma_client *client,
+		unsigned int number, unsigned int mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: include/linux/dmaengine.h:279:
+dma_cookie_t dma_async_xor_pgs_to_pg_err(struct dma_chan *chan,
+	struct page *dest_pg, unsigned int dest_off, struct page *src_pgs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: include/linux/dmaengine.h:374:
+static inline dma_cookie_t dma_async_xor_pgs_to_pg(struct dma_chan *chan,
+	struct page *dest_pg, unsigned int dest_off, struct page **src_pgs,

WARNING:LINE_SPACING: Missing a blank line after declarations
#833: FILE: include/linux/dmaengine.h:378:
+	int cpu = get_cpu();
+	per_cpu_ptr(chan->local, cpu)->bytes_xor += len * src_cnt;

WARNING:LINE_SPACING: Missing a blank line after declarations
#865: FILE: include/linux/dmaengine.h:407:
+	struct dma_req *req;
+	for (i = 0; i < DMA_MAX_CHAN_TYPE_REQ; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: include/linux/dmaengine.h:428:
+static inline enum dma_status dma_async_operation_complete(struct dma_chan *chan,
 	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: net/ipv4/tcp.c:1437:
+		while (dma_async_operation_complete(tp->ucopy.dma_chan,
 		                                 tp->ucopy.dma_cookie, &done,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000053840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 22 warnings, 16 checks, 880 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000053840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
