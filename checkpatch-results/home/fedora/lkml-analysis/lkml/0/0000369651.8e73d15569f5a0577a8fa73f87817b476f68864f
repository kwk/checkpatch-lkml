WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#31: 
doesnt use rtnl because its register/unregister function dont
^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#35: 
here is the the atm_dev locking patch with the __module_get change:

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: include/linux/atmdev.h:414:
+static inline void atm_force_charge(struct atm_vcc *vcc,int truesize)
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: include/linux/atmdev.h:420:
+static inline void atm_return(struct atm_vcc *vcc,int truesize)
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/linux/atmdev.h:426:
+static inline int atm_may_send(struct atm_vcc *vcc,unsigned int size)
                                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/linux/atmdev.h:437:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#101: FILE: include/linux/atmdev.h:443:
+	    test_bit(ATM_DF_CLOSE,&dev->flags))
 	                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#101: FILE: include/linux/atmdev.h:443:
+	    test_bit(ATM_DF_CLOSE,&dev->flags))
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: include/linux/atmdev.h:447:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->ops'
#150: FILE: net/atm/resources.c:60:
+		if ((dev->ops) && (dev->number == number)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->number == number'
#150: FILE: net/atm/resources.c:60:
+		if ((dev->ops) && (dev->number == number)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#186: FILE: net/atm/resources.c:91:
+		if ((inuse = __atm_dev_lookup(number))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: net/atm/resources.c:147:
+        warning_time = jiffies;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: net/atm/resources.c:147:
+        warning_time = jiffies;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: net/atm/resources.c:148:
+        while (atomic_read(&dev->refcnt) != 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: net/atm/resources.c:148:
+        while (atomic_read(&dev->refcnt) != 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: net/atm/resources.c:149:
+                current->state = TASK_INTERRUPTIBLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: net/atm/resources.c:149:
+                current->state = TASK_INTERRUPTIBLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: net/atm/resources.c:150:
+                schedule_timeout(HZ / 4);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: net/atm/resources.c:150:
+                schedule_timeout(HZ / 4);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: net/atm/resources.c:151:
+                current->state = TASK_RUNNING;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: net/atm/resources.c:151:
+                current->state = TASK_RUNNING;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: net/atm/resources.c:152:
+                if ((jiffies - warning_time) > 10 * HZ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: net/atm/resources.c:152:
+                if ((jiffies - warning_time) > 10 * HZ) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: net/atm/resources.c:153:
+                        printk(KERN_EMERG "atm_dev_deregister: waiting for "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: net/atm/resources.c:153:
+                        printk(KERN_EMERG "atm_dev_deregister: waiting for "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#259: FILE: net/atm/resources.c:153:
+                        printk(KERN_EMERG "atm_dev_deregister: waiting for "

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: net/atm/resources.c:154:
+                               "dev %d to become free. Usage count = %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: net/atm/resources.c:154:
+                               "dev %d to become free. Usage count = %d\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#260: FILE: net/atm/resources.c:154:
+                        printk(KERN_EMERG "atm_dev_deregister: waiting for "
+                               "dev %d to become free. Usage count = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: net/atm/resources.c:155:
+                               dev->number, atomic_read(&dev->refcnt));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: net/atm/resources.c:155:
+                               dev->number, atomic_read(&dev->refcnt));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: net/atm/resources.c:156:
+                        warning_time = jiffies;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: net/atm/resources.c:156:
+                        warning_time = jiffies;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: net/atm/resources.c:157:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: net/atm/resources.c:157:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: net/atm/resources.c:158:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: net/atm/resources.c:158:
+        }$

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: net/atm/resources.c:198:
+	unsigned long flags;
+	if (vcc->dev) {

CHECK:BRACES: Unbalanced braces around else statement
#431: FILE: net/atm/common.c:301:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#435: FILE: net/atm/common.c:303:
+		if (return_val) atm_dev_release(dev);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/atm/common.c:342:
+			if (!atm_do_connect_dev(vcc,dev,vpi,vci))
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/atm/common.c:342:
+			if (!atm_do_connect_dev(vcc,dev,vpi,vci))
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: net/atm/common.c:342:
+			if (!atm_do_connect_dev(vcc,dev,vpi,vci))
 			                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#506: FILE: net/atm/common.c:847:
+	if (!(dev = atm_dev_lookup(number))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#674: FILE: net/atm/proc.c:87:
+	sprintf(strchr(buf,0), "\t[%d]", atomic_read(&dev->refcnt));
 	                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc->push == atm_clip_ops->clip_push'
#705: FILE: net/atm/proc.c:182:
+	if (clip_info && (vcc->push == atm_clip_ops->clip_push)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#710: FILE: net/atm/proc.c:187:
+		off += sprintf(buf+off,"CLIP, Itf:%s, Encap:",
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: net/atm/proc.c:187:
+		off += sprintf(buf+off,"CLIP, Itf:%s, Encap:",
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#713: FILE: net/atm/proc.c:190:
+			off += sprintf(buf+off,"LLC/SNAP");
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#713: FILE: net/atm/proc.c:190:
+			off += sprintf(buf+off,"LLC/SNAP");
 			                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#715: FILE: net/atm/proc.c:192:
+			off += sprintf(buf+off,"None");
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: net/atm/proc.c:192:
+			off += sprintf(buf+off,"None");
 			                      ^

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: net/atm/proc.c:313:
 		return sprintf(buf,"Itf Type    ESI/\"MAC\"addr "
+		    "AAL(TX,err,RX,err,drop) ...               [refcnt]\n");

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#756: FILE: net/atm/proc.c:347:
+#if defined(CONFIG_ATM_CLIP) || defined(CONFIG_ATM_CLIP_MODULE)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: net/atm/proc.c:357:
+				pvc_info(vcc,buf,clip_info);
 				            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: net/atm/proc.c:357:
+				pvc_info(vcc,buf,clip_info);
 				                ^

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#772: FILE: net/atm/proc.c:360:
+#if defined(CONFIG_ATM_CLIP) || defined(CONFIG_ATM_CLIP_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#781: FILE: net/atm/proc.c:369:
+#if defined(CONFIG_ATM_CLIP) || defined(CONFIG_ATM_CLIP_MODULE)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*walk)...) over kmalloc(sizeof(struct atm_dev_addr)...)
#1021: FILE: net/atm/addr.c:79:
+	*walk = kmalloc(sizeof(struct atm_dev_addr), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1110: FILE: net/atm/atm_misc.c:75:
+		err = check_ci(vcc,*vpi,*vci);
 		                  ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1110: FILE: net/atm/atm_misc.c:75:
+		err = check_ci(vcc,*vpi,*vci);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1110: FILE: net/atm/atm_misc.c:75:
+		err = check_ci(vcc,*vpi,*vci);
 		                       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1110: FILE: net/atm/atm_misc.c:75:
+		err = check_ci(vcc,*vpi,*vci);
 		                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1211: FILE: drivers/atm/atmtcp.c:366:
+	if (itf != -1) dev = atm_dev_lookup(itf);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1258: FILE: drivers/atm/he.c:358:
 		if (vcc->vci == vci && vcc->vpi == vpi
[...]
+				spin_unlock_irqrestore(&he_dev->atm_dev->lock, flags);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1260: FILE: drivers/atm/he.c:359:
 		if (vcc->vci == vci && vcc->vpi == vpi
+			&& vcc->qos.rxtp.traffic_class != ATM_NONE) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: drivers/atm/fore200e.c:1077:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1352: FILE: drivers/atm/fore200e.c:1080:
+    spin_lock_irqsave(&fore200e->atm_dev->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: drivers/atm/fore200e.c:1086:
+    spin_unlock_irqrestore(&fore200e->atm_dev->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: drivers/atm/fore200e.c:1357:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: drivers/atm/fore200e.c:1362:
+    spin_lock_irqsave(&vcc->dev->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: drivers/atm/fore200e.c:1387:
+    spin_unlock_irqrestore(&vcc->dev->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1389: FILE: drivers/atm/fore200e.c:2649:
+    unsigned long flags;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 29 warnings, 11 checks, 1290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
