CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/linux/rmap.h:70:
+static inline int make_page_exclusive(struct vm_area_struct *vma,
+					unsigned long addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: mm/memory.c:1391:
+		if (do_wp_page(mm, vma, address,
+				page_table, pmd, pte) == VM_FAULT_OOM)

WARNING:LINE_SPACING: Missing a blank line after declarations
#160: FILE: mm/mremap.c:86:
+	int move = 1;
+	if (pte_present(*src)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#183: FILE: mm/mremap.c:125:
+			if (!dst)
[...]
+			else if (!can_move_one_pte(src, new_addr))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#187: FILE: mm/mremap.c:129:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: mm/mremap.c:131:
+				pte_t pte;
+				pte = ptep_clear_flush(vma, old_addr, src);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: mm/mremap.c:156:
+		int ret = move_one_page(vma, old_addr+offset, new_addr+offset);
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: mm/mremap.c:156:
+		int ret = move_one_page(vma, old_addr+offset, new_addr+offset);
 		                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: mm/mremap.c:166:
+			ret = make_page_exclusive(vma, old_addr+offset);
 			                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#259: FILE: mm/mremap.c:223:
+		printk(KERN_WARNING "%s: mremap moved %d cows\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: mm/mremap.c:224:
+		printk(KERN_WARNING "%s: mremap moved %d cows\n",
+							current->comm, cows);

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: mm/rmap.c:472:
+	int move = 0;
+	if (page->mapcount == 1) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: mm/swapfile.c:469:
+static unsigned long unuse_pmd(struct vm_area_struct * vma, pmd_t *dir,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: mm/swapfile.c:470:
+static unsigned long unuse_pmd(struct vm_area_struct * vma, pmd_t *dir,
 	unsigned long address, unsigned long size, unsigned long offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: mm/swapfile.c:509:
+static unsigned long unuse_pgd(struct vm_area_struct * vma, pgd_t *dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mm/swapfile.c:510:
+static unsigned long unuse_pgd(struct vm_area_struct * vma, pgd_t *dir,
 	unsigned long address, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: mm/swapfile.c:534:
+		foundaddr = unuse_pmd(vma, pmd, address, end - address,
+						offset, entry, page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: mm/swapfile.c:544:
+static unsigned long unuse_vma(struct vm_area_struct * vma, pgd_t *pgdir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: mm/swapfile.c:545:
+static unsigned long unuse_vma(struct vm_area_struct * vma, pgd_t *pgdir,
 	swp_entry_t entry, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: mm/swapfile.c:554:
+		foundaddr = unuse_pgd(vma, pgdir, start, end - start,
+						entry, page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: mm/swapfile.c:577:
+			pgd_t * pgd = pgd_offset(mm, vma->vm_start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: mm/swapfile.c:578:
+			pgd_t * pgd = pgd_offset(mm, vma->vm_start);
+			foundaddr = unuse_vma(vma, pgd, entry, page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 13 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
