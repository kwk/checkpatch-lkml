WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
 (3) When request_key() is searching for a key to hand back to the caller, if

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#88: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:REPEATED_WORD: Possible repeated word: 'default'
#141: FILE: Documentation/keys.txt:620:
+     [1] The default default is: the thread keyring if there is one, otherwise

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: include/linux/key-ui.h:1:
+/* key-ui.h: key userspace interface stuff

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#246: FILE: include/linux/key-ui.h:106:
+	}
+	else if (key->gid != -1 &&

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#247: FILE: include/linux/key-ui.h:107:
+		 key->perm & KEY_GRP_ALL && (

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#254: FILE: include/linux/key-ui.h:114:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#254: FILE: include/linux/key-ui.h:114:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#262: FILE: include/linux/key-ui.h:122:
+
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/key-ui.h:124:
+extern struct key *lookup_user_key(struct task_struct *context,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/sched.h:599:
+extern struct group_info *groups_alloc(int gidsetsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/sched.h:600:
+extern void groups_free(struct group_info *group_info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/sched.h:601:
+extern int set_current_groups(struct group_info *group_info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/sched.h:602:
+extern int groups_search(struct group_info *group_info, gid_t grp);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#352: FILE: security/keys/internal.h:18:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#353: FILE: security/keys/internal.h:19:
+#define kenter(FMT, a...)	printk("==> %s("FMT")\n",__FUNCTION__ , ## a)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#353: FILE: security/keys/internal.h:19:
+#define kenter(FMT, a...)	printk("==> %s("FMT")\n",__FUNCTION__ , ## a)
                          	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#353: FILE: security/keys/internal.h:19:
+#define kenter(FMT, a...)	printk("==> %s("FMT")\n",__FUNCTION__ , ## a)
                          	                                      ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#353: FILE: security/keys/internal.h:19:
+#define kenter(FMT, a...)	printk("==> %s("FMT")\n",__FUNCTION__ , ## a)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: security/keys/internal.h:19:
+#define kenter(FMT, a...)	printk("==> %s("FMT")\n",__FUNCTION__ , ## a)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#354: FILE: security/keys/internal.h:20:
+#define kleave(FMT, a...)	printk("<== %s()"FMT"\n",__FUNCTION__ , ## a)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: security/keys/internal.h:20:
+#define kleave(FMT, a...)	printk("<== %s()"FMT"\n",__FUNCTION__ , ## a)
                          	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#354: FILE: security/keys/internal.h:20:
+#define kleave(FMT, a...)	printk("<== %s()"FMT"\n",__FUNCTION__ , ## a)
                          	                                      ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#354: FILE: security/keys/internal.h:20:
+#define kleave(FMT, a...)	printk("<== %s()"FMT"\n",__FUNCTION__ , ## a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#354: FILE: security/keys/internal.h:20:
+#define kleave(FMT, a...)	printk("<== %s()"FMT"\n",__FUNCTION__ , ## a)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: security/keys/internal.h:21:
+#define kdebug(FMT, a...)	printk(FMT"\n" , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#355: FILE: security/keys/internal.h:21:
+#define kdebug(FMT, a...)	printk(FMT"\n" , ## a)
                          	               ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#355: FILE: security/keys/internal.h:21:
+#define kdebug(FMT, a...)	printk(FMT"\n" , ## a)

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: security/keys/internal.h:23:
+#define kenter(FMT, a...)	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#358: FILE: security/keys/internal.h:24:
+#define kleave(FMT, a...)	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: security/keys/internal.h:25:
+#define kdebug(FMT, a...)	do {} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: security/keys/internal.h:79:
+extern struct key *keyring_search_instkey(struct key *keyring,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: security/keys/internal.h:90:
+extern struct key *search_process_keyrings(struct key_type *type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: security/keys/internal.h:98:
+extern int install_process_keyring(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: security/keys/internal.h:100:
+extern struct key *request_key_and_link(struct key_type *type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: security/keys/internal.h:115:
+extern struct key *request_key_auth_new(struct key *target,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: security/keys/internal.h:118:
+extern struct key *key_get_instantiation_authkey(key_serial_t target_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: security/keys/internal.h:139:
+extern long keyctl_set_reqkey_keyring(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#419: FILE: security/keys/internal.h:139:
+extern long keyctl_set_reqkey_keyring(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: security/keys/keyctl.c:214:
+ ^Ikey_put(key);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: security/keys/keyctl.c:214:
+ ^Ikey_put(key);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: security/keys/keyctl.c:214:
+ ^Ikey_put(key);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: security/keys/keyctl.c:484:
+		 * authorisation token handy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: security/keys/keyctl.c:490:
+^I^I^I^Iif (!IS_ERR(key))^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#780: FILE: security/keys/keyctl.c:856:
+	 * requesting task */

WARNING:INDENTED_LABEL: labels should not be indented
#876: FILE: security/keys/keyctl.c:948:
+	set:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1145: FILE: security/keys/process_keys.c:463:
+		 * also search the keyrings of the process mentioned there */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1150: FILE: security/keys/process_keys.c:468:
+		instkey = __keyring_search_one(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1214: FILE: security/keys/process_keys.c:517:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1376: FILE: security/keys/request_key_auth.c:1:
+/* request_key_auth.c: request key authorisation controlling key def

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1424: FILE: security/keys/request_key_auth.c:49:
+		 * request of another process */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1433: FILE: security/keys/request_key_auth.c:58:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1433: FILE: security/keys/request_key_auth.c:58:
+		else {

CHECK:SPACING: No space is necessary after a cast
#1439: FILE: security/keys/request_key_auth.c:64:
+		rka->target_key = key_get((struct key *) data);

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#1479: FILE: security/keys/request_key_auth.c:104:
+ * create a session keyring to be for the invokation of /sbin/request-key and
                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1549: FILE: security/keys/request_key_auth.c:174:
+	instkey = keyring_search_instkey(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1623: FILE: security/keys/request_key.c:74:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1623: FILE: security/keys/request_key.c:74:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1636: FILE: security/keys/request_key.c:96:
+	argv[i++] = (char *) callout_info;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1731: FILE: security/keys/request_key.c:322:
+			dest_keyring = key_get(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1750: FILE: security/keys/request_key.c:341:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1808: FILE: security/keys/request_key.c:391:
+^I^I^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 21 warnings, 26 checks, 1629 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
