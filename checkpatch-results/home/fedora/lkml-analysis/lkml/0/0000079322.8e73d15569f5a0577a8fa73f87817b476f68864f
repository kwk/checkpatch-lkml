WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#88: FILE: include/asm-i386/kprobes.h:29:
+#include <asm/cacheflush.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/asm-i386/kprobes.h:106:
+extern int uprobe_exceptions_notify(struct notifier_block *self,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/asm-i386/kprobes.h:107:
+extern int uprobe_exceptions_notify(struct notifier_block *self,
+						unsigned long val, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/asm-i386/kprobes.h:108:
+extern unsigned long get_segment_eip(struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: include/asm-i386/kprobes.h:109:
+extern unsigned long get_segment_eip(struct pt_regs *regs,
+						unsigned long *eip_limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/asm-i386/kprobes.h:110:
+extern int is_IF_modifier(kprobe_opcode_t opcode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/asm-i386/kprobes.h:112:
+extern pte_t *get_one_pte(unsigned long address);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#131: FILE: arch/i386/kernel/uprobes.c:33:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: arch/i386/kernel/uprobes.c:83:
+unsigned long __kprobes *find_stack_space_on_next_page(unsigned long stack_addr,
+			int size, struct vm_area_struct *vma)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#160: FILE: arch/i386/kernel/uprobes.c:94:
+				(unsigned long )addr, 1, 1, 0, &pg, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/i386/kernel/uprobes.c:98:
+	return (unsigned long *) addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/i386/kernel/uprobes.c:107:
+unsigned long __kprobes *find_stack_space_in_expanded_vma(int size,
+						struct vm_area_struct *vma)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#188: FILE: arch/i386/kernel/uprobes.c:122:
+				(unsigned long )addr, 1, 1, 0, &pg, NULL);

CHECK:SPACING: No space is necessary after a cast
#192: FILE: arch/i386/kernel/uprobes.c:126:
+	return (unsigned long *) addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: arch/i386/kernel/uprobes.c:134:
+unsigned long __kprobes *find_stack_space_on_curr_page(unsigned long stack_addr,
+								int size)

CHECK:SPACING: No space is necessary after a cast
#209: FILE: arch/i386/kernel/uprobes.c:143:
+	return (unsigned long *) page_addr;

WARNING:TYPO_SPELLING: 'availible' may be misspelled - perhaps 'available'?
#215: FILE: arch/i386/kernel/uprobes.c:149:
+ * space is availible, then expands the stack and returns the address of
             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: arch/i386/kernel/uprobes.c:191:
+void __kprobes replace_original_insn(struct uprobe *uprobe,
+				struct pt_regs *regs, kprobe_opcode_t opcode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: arch/i386/kernel/uprobes.c:197:
+	page = find_get_page(uprobe->inode->i_mapping,
+					uprobe->offset >> PAGE_CACHE_SHIFT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: arch/i386/kernel/uprobes.c:198:
+	BUG_ON(!page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: arch/i386/kernel/uprobes.c:221:
+static int __kprobes prepare_singlestep_uprobe(struct uprobe *uprobe,
+				struct uprobe_ctlblk *ucb, struct pt_regs *regs)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#354: FILE: arch/i386/kernel/uprobes.c:288:
+	if (!p) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: arch/i386/kernel/uprobes.c:364:
+static void __kprobes resume_execution_user(struct kprobe *p,
+		struct pt_regs *regs, struct uprobe_ctlblk *ucb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: arch/i386/kernel/uprobes.c:444:
+		replace_original_insn(current_uprobe, regs,
+						BREAKPOINT_INSTRUCTION);

ERROR:SPACING: space required before the open parenthesis '('
#540: FILE: arch/i386/kernel/uprobes.c:474:
+	switch(ucb->uprobe_status) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#545: FILE: arch/i386/kernel/uprobes.c:479:
+		/* Fall through and reset the current probe */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#569: FILE: arch/i386/kernel/uprobes.c:503:
+		return 1;
+		break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 19 checks, 551 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
