WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#13: 
Subject: [PATCH] IPv6: Don't Process ND Messages with Invalid Options
                                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#36: 
Linux happened to process invalid ND messages with invalid options
                                  ^^

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#38: 
 - length of ND options is 0
             ^^

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#39: 
 - length of ND options is not enough
             ^^

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#41: 
This patch parses/checks ND options before it changes state of
                         ^^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#71: FILE: net/ndisc.h:57:
+} __attribute__((__packed__));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: net/ndisc.h:71:
+extern struct nd_opt_hdr *ndisc_next_option(struct nd_opt_hdr *cur, struct nd_opt_hdr *end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#86: FILE: net/ndisc.h:72:
+extern struct ndisc_options *ndisc_parse_options(u8 *opt, int opt_len, struct ndisc_options *ndopts);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: net/ndisc.h:72:
+extern struct ndisc_options *ndisc_parse_options(u8 *opt, int opt_len, struct ndisc_options *ndopts);

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: ipv6/ndisc.c:161:
+	int type;
+	if (!cur || !end || cur >= end)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: ipv6/ndisc.c:166:
+	} while(cur < end && cur->nd_opt_type != type);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: ipv6/ndisc.c:180:
+		int l;
+		if (opt_len < sizeof(struct nd_opt_hdr))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ndisc_parse_options', this function's name, in a string
#137: FILE: ipv6/ndisc.c:192:
+					    "ndisc_parse_options(): duplicated ND6 option found: type=%d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#151: FILE: ipv6/ndisc.c:206:
+			 * to accomodate future extension to the protocol.
 			      ^^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ndisc_parse_options', this function's name, in a string
#154: FILE: ipv6/ndisc.c:209:
+				   "ndisc_parse_options(): ignored unsupported option; type=%d, len=%d\n",

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#223: FILE: ipv6/ndisc.c:627:
+				   "ICMP6 RA: invalid ND option, ignored.\n");
 				                      ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: ipv6/ndisc.c:714:
+	if (rt && (neigh = rt->rt6i_nexthop) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: ipv6/ndisc.c:717:
+		int lladdrlen;
+		if (ndopts.nd_opts_src_lladdr) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#240: FILE: ipv6/ndisc.c:718:
+			lladdr = (u8*)((ndopts.nd_opts_src_lladdr)+1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: ipv6/ndisc.c:718:
+			lladdr = (u8*)((ndopts.nd_opts_src_lladdr)+1);
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: ipv6/ndisc.c:732:
+		struct nd_opt_hdr *p;
+		for (p = ndopts.nd_opts_pi;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#260: FILE: ipv6/ndisc.c:735:
+			addrconf_prefix_rcv(skb->dev, (u8*)p, (p->nd_opt_len) << 3);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#276: FILE: ipv6/ndisc.c:742:
+		memcpy(&mtu, ((u8*)(ndopts.nd_opts_mtu+1))+2, sizeof(mtu));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#276: FILE: ipv6/ndisc.c:742:
+		memcpy(&mtu, ((u8*)(ndopts.nd_opts_mtu+1))+2, sizeof(mtu));
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#276: FILE: ipv6/ndisc.c:742:
+		memcpy(&mtu, ((u8*)(ndopts.nd_opts_mtu+1))+2, sizeof(mtu));
 		                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: ipv6/ndisc.c:761:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#355: FILE: ipv6/ndisc.c:832:
+	if (!ndisc_parse_options((u8*)(dest + 1), optlen, &ndopts)) {

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#358: FILE: ipv6/ndisc.c:835:
+				   "ICMP6 Redirect: invalid ND options, rejected.\n");
 				                            ^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#363: FILE: ipv6/ndisc.c:840:
+		lladdr = (u8*)(ndopts.nd_opts_tgt_lladdr + 1);

WARNING:TABSTOP: Statements should start on a tabstop
#428: FILE: ipv6/ndisc.c:1017:
+	    {

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#444: FILE: ipv6/ndisc.c:1038:
+				printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");
 				                                      ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#444: FILE: ipv6/ndisc.c:1038:
+				printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#449: FILE: ipv6/ndisc.c:1043:
+			lladdr = (u8*)(ndopts.nd_opts_src_lladdr + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#453: FILE: ipv6/ndisc.c:1047:
+					printk(KERN_WARNING "ICMP NS: bad lladdr length.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: ipv6/ndisc.c:1148:
+^I^I^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: ipv6/ndisc.c:1148:
 
+					

WARNING:TABSTOP: Statements should start on a tabstop
#484: FILE: ipv6/ndisc.c:1169:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#487: FILE: ipv6/ndisc.c:1172:
+	    {

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#503: FILE: ipv6/ndisc.c:1199:
+				printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");
 				                                      ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#503: FILE: ipv6/ndisc.c:1199:
+				printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#507: FILE: ipv6/ndisc.c:1203:
+			lladdr = (u8*)(ndopts.nd_opts_tgt_lladdr + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#511: FILE: ipv6/ndisc.c:1207:
+					printk(KERN_WARNING "NDISC NA: invalid lladdr length.\n");

WARNING:TABSTOP: Statements should start on a tabstop
#529: FILE: ipv6/ndisc.c:1254:
+	    }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 28 warnings, 6 checks, 443 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
