WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
diff -Naur linux-2.5.44.orig/drivers/dump/dump_gzip.c linux-2.5.44.lkcd/drivers/dump/dump_gzip.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#30: FILE: drivers/dump/dump_gzip.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#57: FILE: drivers/dump/dump_gzip.c:28:
+#define DUMP_PRINTN(format, args...) \
+	printk("%s: " format , DUMP_MODULE_NAME , ## args);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#58: FILE: drivers/dump/dump_gzip.c:29:
+	printk("%s: " format , DUMP_MODULE_NAME , ## args);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#58: FILE: drivers/dump/dump_gzip.c:29:
+	printk("%s: " format , DUMP_MODULE_NAME , ## args);
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#58: FILE: drivers/dump/dump_gzip.c:29:
+	printk("%s: " format , DUMP_MODULE_NAME , ## args);
 	                                        ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#59: FILE: drivers/dump/dump_gzip.c:30:
+#define DUMP_PRINT(format, args...) \
+	printk(format , ## args);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#60: FILE: drivers/dump/dump_gzip.c:31:
+	printk(format , ## args);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#60: FILE: drivers/dump/dump_gzip.c:31:
+	printk(format , ## args);
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: drivers/dump/dump_gzip.c:46:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: drivers/dump/dump_gzip.c:48:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#78: FILE: drivers/dump/dump_gzip.c:49:
+	if ((err = zlib_deflateInit(&dump_stream, Z_BEST_COMPRESSION)) != Z_OK) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateInit>
#78: FILE: drivers/dump/dump_gzip.c:49:
+	if ((err = zlib_deflateInit(&dump_stream, Z_BEST_COMPRESSION)) != Z_OK) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#80: FILE: drivers/dump/dump_gzip.c:51:
+		DUMP_PRINT("dump_compress_gzip(): zlib_deflateInit() "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#81: FILE: drivers/dump/dump_gzip.c:52:
+		DUMP_PRINT("dump_compress_gzip(): zlib_deflateInit() "
+			"failed (%d)!\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#82: FILE: drivers/dump/dump_gzip.c:53:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateEnd>
#97: FILE: drivers/dump/dump_gzip.c:68:
+		(void)zlib_deflateEnd(&dump_stream);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#98: FILE: drivers/dump/dump_gzip.c:69:
+		DUMP_PRINT("dump_compress_gzip():zlib_deflate() failed (%d)!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: drivers/dump/dump_gzip.c:70:
+		DUMP_PRINT("dump_compress_gzip():zlib_deflate() failed (%d)!\n",
+			err);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#100: FILE: drivers/dump/dump_gzip.c:71:
+		return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#104: FILE: drivers/dump/dump_gzip.c:75:
+	if ((err = zlib_deflateEnd(&dump_stream)) != Z_OK) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#105: FILE: drivers/dump/dump_gzip.c:76:
+		DUMP_PRINT("dump_compress_gzip(): zlib_deflateEnd() "

WARNING:SPLIT_STRING: quoted string split across lines
#106: FILE: drivers/dump/dump_gzip.c:77:
+		DUMP_PRINT("dump_compress_gzip(): zlib_deflateEnd() "
+			"failed (%d)!\n", err);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#110: FILE: drivers/dump/dump_gzip.c:81:
+	if (dump_stream.total_out >= oldsize) {
+		return (oldsize);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#111: FILE: drivers/dump/dump_gzip.c:82:
+		return (oldsize);

WARNING:INDENTED_LABEL: labels should not be indented
#118: FILE: drivers/dump/dump_gzip.c:89:
+	compress_type:	DUMP_COMPRESS_GZIP,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#119: FILE: drivers/dump/dump_gzip.c:90:
+	compress_func:	dump_compress_gzip,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#119: FILE: drivers/dump/dump_gzip.c:90:
+	compress_func:	dump_compress_gzip,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: drivers/dump/dump_gzip.c:103:
+		DUMP_PRINT("Failed to alloc %d bytes for deflate workspace\n",
+			zlib_deflate_workspacesize());

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#136: FILE: drivers/dump/dump_gzip.c:107:
+	return (0);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#155: FILE: drivers/dump/dump_gzip.c:126:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/dump/dump_gzip.c:126:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/dump/dump_gzip.c:126:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#155: FILE: drivers/dump/dump_gzip.c:126:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: drivers/dump/dump_rle.c:1:
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#197: FILE: drivers/dump/dump_rle.c:35:
+	wi = ri = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#201: FILE: drivers/dump/dump_rle.c:39:
+			cur_byte = value = old[ri];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#205: FILE: drivers/dump/dump_rle.c:43:
+				if (wi + 3 > oldsize) {
+					return oldsize;
+				}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#211: FILE: drivers/dump/dump_rle.c:49:
+				value = cur_byte = old[ri];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/dump/dump_rle.c:51:
+^I^I^I} else { $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#214: FILE: drivers/dump/dump_rle.c:52:
+				if ((cur_byte = old[ri]) == value) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#218: FILE: drivers/dump/dump_rle.c:56:
+						if (wi + 3 > oldsize) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#218: FILE: drivers/dump/dump_rle.c:56:
+						if (wi + 3 > oldsize) {
+							return oldsize;
+						}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#225: FILE: drivers/dump/dump_rle.c:63:
+						if (value == 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#226: FILE: drivers/dump/dump_rle.c:64:
+							if (wi + 3 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: drivers/dump/dump_rle.c:64:
+							if (wi + 3 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#232: FILE: drivers/dump/dump_rle.c:70:
+						} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#233: FILE: drivers/dump/dump_rle.c:71:
+							if (wi + 2 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#233: FILE: drivers/dump/dump_rle.c:71:
+							if (wi + 2 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#240: FILE: drivers/dump/dump_rle.c:78:
+						if (value == 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#241: FILE: drivers/dump/dump_rle.c:79:
+							if (wi + 2 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#241: FILE: drivers/dump/dump_rle.c:79:
+							if (wi + 2 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#246: FILE: drivers/dump/dump_rle.c:84:
+						} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#247: FILE: drivers/dump/dump_rle.c:85:
+							if (wi + 1 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#247: FILE: drivers/dump/dump_rle.c:85:
+							if (wi + 1 > oldsize) {
+								return oldsize;
+							}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#264: FILE: drivers/dump/dump_rle.c:102:
+
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#266: FILE: drivers/dump/dump_rle.c:104:
+		if (wi + 3 > oldsize) {
+			return oldsize;
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#300: FILE: drivers/dump/dump_rle.c:138:
+	return (wi);

WARNING:INDENTED_LABEL: labels should not be indented
#305: FILE: drivers/dump/dump_rle.c:143:
+	compress_type:	DUMP_COMPRESS_RLE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#306: FILE: drivers/dump/dump_rle.c:144:
+	compress_func:	dump_compress_rle,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#306: FILE: drivers/dump/dump_rle.c:144:
+	compress_func:	dump_compress_rle,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#317: FILE: drivers/dump/dump_rle.c:155:
+	return (0);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#335: FILE: drivers/dump/dump_rle.c:173:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: drivers/dump/dump_rle.c:173:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: drivers/dump/dump_rle.c:173:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#335: FILE: drivers/dump/dump_rle.c:173:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,16))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 37 warnings, 8 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
