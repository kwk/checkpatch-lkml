WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
The kernel makes a number of allocations that are either short-lived such as

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#69: FILE: arch/x86_64/kernel/e820.c:224:
+	printk("Nosave not set when anti-frag is enabled");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#104: FILE: fs/dcache.c:864:
+	dentry = kmem_cache_alloc(dentry_cache, GFP_KERNEL|__GFP_RECLAIMABLE);
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#117: FILE: fs/ext2/super.c:144:
+					SLAB_KERNEL|__GFP_RECLAIMABLE);
 					           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#129: FILE: fs/ext3/super.c:448:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_RECLAIMABLE);
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/jbd/journal.c:1739:
+	ret = kmem_cache_alloc(journal_head_cache,
+			set_migrateflags(GFP_NOFS, __GFP_RECLAIMABLE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/jbd/journal.c:1750:
+			ret = kmem_cache_alloc(journal_head_cache,
+					GFP_NOFS|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#152: FILE: fs/jbd/journal.c:1750:
+					GFP_NOFS|__GFP_RECLAIMABLE);
 					        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: fs/jbd/revoke.c:210:
+	journal->j_revoke_table[0] = kmem_cache_alloc(revoke_table_cache,
+					GFP_KERNEL|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#165: FILE: fs/jbd/revoke.c:210:
+					GFP_KERNEL|__GFP_RECLAIMABLE);
 					          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: fs/jbd/revoke.c:234:
+	journal->j_revoke_table[1] = kmem_cache_alloc(revoke_table_cache,
+					GFP_KERNEL|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#175: FILE: fs/jbd/revoke.c:234:
+					GFP_KERNEL|__GFP_RECLAIMABLE);
 					          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/ntfs/inode.c:328:
+	ni = kmem_cache_alloc(ntfs_big_inode_cache,
+					SLAB_NOFS|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#188: FILE: fs/ntfs/inode.c:328:
+					SLAB_NOFS|__GFP_RECLAIMABLE);
 					         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/ntfs/inode.c:354:
+	ni = kmem_cache_alloc(ntfs_inode_cache,
+					SLAB_NOFS|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#198: FILE: fs/ntfs/inode.c:354:
+					SLAB_NOFS|__GFP_RECLAIMABLE);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#210: FILE: fs/proc/base.c:487:
+	if (!(page = __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))
 	                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#210: FILE: fs/proc/base.c:487:
+	if (!(page = __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: fs/proc/base.c:597:
+	page = (char *)__get_free_page(GFP_USER|__GFP_RECLAIMABLE);
 	                                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: fs/proc/base.c:754:
+	page = (char*)__get_free_page(GFP_USER|__GFP_RECLAIMABLE);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#228: FILE: fs/proc/base.c:754:
+	page = (char*)__get_free_page(GFP_USER|__GFP_RECLAIMABLE);
 	                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#237: FILE: fs/proc/base.c:936:
+	char *tmp = (char*)__get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: fs/proc/base.c:936:
+	char *tmp = (char*)__get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE);
 	                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#247: FILE: fs/proc/base.c:1570:
+	if (!(page = __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))
 	                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#247: FILE: fs/proc/base.c:1570:
+	if (!(page = __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#256: FILE: fs/proc/base.c:1605:
+	page = (char*)__get_free_page(GFP_USER|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#256: FILE: fs/proc/base.c:1605:
+	page = (char*)__get_free_page(GFP_USER|__GFP_RECLAIMABLE);
 	                                      ^

CHECK:SPACING: No space is necessary after a cast
#268: FILE: fs/proc/generic.c:76:
+	if (!(page = (char*) __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#268: FILE: fs/proc/generic.c:76:
+	if (!(page = (char*) __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#268: FILE: fs/proc/generic.c:76:
+	if (!(page = (char*) __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))
 	                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#268: FILE: fs/proc/generic.c:76:
+	if (!(page = (char*) __get_free_page(GFP_KERNEL|__GFP_RECLAIMABLE)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: fs/reiserfs/super.c:500:
+^I^I    ^I^I^ISLAB_KERNEL|__GFP_RECLAIMABLE);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: fs/reiserfs/super.c:500:
+^I^I    ^I^I^ISLAB_KERNEL|__GFP_RECLAIMABLE);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: fs/reiserfs/super.c:500:
+		kmem_cache_alloc(reiserfs_inode_cachep,
+		    			SLAB_KERNEL|__GFP_RECLAIMABLE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: fs/reiserfs/super.c:500:
+		    			SLAB_KERNEL|__GFP_RECLAIMABLE);
 		    			           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#306: FILE: include/linux/gfp.h:60:
+			__GFP_RECLAIMABLE|__GFP_MOVABLE)
 			                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#309: FILE: include/linux/gfp.h:63:
+#define GFP_MOVABLE_MASK (__GFP_RECLAIMABLE|__GFP_MOVABLE)
                                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: include/linux/gfp.h:111:
+	BUG_ON((gfp & GFP_MOVABLE_MASK) == GFP_MOVABLE_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageReclaimable>
#400: FILE: include/linux/page-flags.h:238:
+#define __SetPageReclaimable(page)	do {} while (0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageReclaimable>
#401: FILE: include/linux/page-flags.h:239:
+#define __ClearPageReclaimable(page) do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageMovable>
#406: FILE: include/linux/page-flags.h:244:
+#define __SetPageMovable(page)	do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageMovable>
#407: FILE: include/linux/page-flags.h:245:
+#define __ClearPageMovable(page) do {} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: lib/radix-tree.c:97:
+	ret = kmem_cache_alloc(radix_tree_node_cachep,
+				set_migrateflags(gfp_mask, __GFP_RECLAIMABLE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: lib/radix-tree.c:142:
+		node = kmem_cache_alloc(radix_tree_node_cachep,
+				set_migrateflags(gfp_mask, __GFP_RECLAIMABLE));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#535: FILE: mm/page_alloc.c:745:
+			area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: mm/page_alloc.c:750:
+			page = list_entry(area->free_list[migratetype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: mm/page_alloc.c:758:
+			expand(zone, page, order, current_order, area,
+							start_migratetype);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: mm/page_alloc.c:763:
+				move_freepages_block(zone, page,
+							start_migratetype);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#601: FILE: mm/shmem.c:98:
+						PAGE_CACHE_SHIFT-PAGE_SHIFT);
 						                ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: mm/shmem.c:980:
+	page = alloc_page_vma(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#621: FILE: mm/shmem.c:1002:
+	return alloc_page(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016138.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 4 warnings, 39 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016138.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
