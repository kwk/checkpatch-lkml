WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch adds the core of the page clustering strategy. It works by grouping

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#49: FILE: include/linux/mmzone.h:31:
+#define for_each_migratetype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < MIGRATE_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#49: FILE: include/linux/mmzone.h:31:
+#define for_each_migratetype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < MIGRATE_TYPES; type++)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageMovable>
#77: FILE: include/linux/page-flags.h:260:
+#define __SetPageMovable(page)	__set_bit(PG_movable, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageMovable>
#78: FILE: include/linux/page-flags.h:261:
+#define __ClearPageMovable(page) __clear_bit(PG_movable, &(page)->flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: mm/page_alloc.c:453:
+	list_add(&page->lru,
+		&zone->free_area[order].free_list[get_page_migratetype(page)]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/page_alloc.c:653:
+static struct page *__rmqueue_fallback(struct zone *zone, int order,
+						int start_migratetype)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: mm/page_alloc.c:655:
+	struct free_area * area;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#177: FILE: mm/page_alloc.c:661:
+	for (current_order = MAX_ORDER-1; current_order >= order;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#179: FILE: mm/page_alloc.c:663:
+		area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: mm/page_alloc.c:668:
+		page = list_entry(area->free_list[migratetype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/page_alloc.c:694:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+						int migratetype)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#221: FILE: mm/page_alloc.c:702:
+		area = &(zone->free_area[current_order]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: mm/page_alloc.c:707:
+		page = list_entry(area->free_list[migratetype].next,
+					struct page, lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: mm/page_alloc.c:2142:
+	int order, t;
+	for_each_migratetype_order(order, t) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016145.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 2 warnings, 11 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016145.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
