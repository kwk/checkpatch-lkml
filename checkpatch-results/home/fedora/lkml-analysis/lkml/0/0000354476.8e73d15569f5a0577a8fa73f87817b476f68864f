WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#51: 
/usr/src/linux/arch/alpha/kernel/setup.c

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
diff -ruN NVIDIA_kernel-1.0-4363/Makefile NVIDIA_kernel-1.0-4363-2.5/Makefile

WARNING:TYPO_SPELLING: 'posesses' may be misspelled - perhaps 'possesses'?
#467: FILE: Makefile.kbuild:224:
+# Build the NVIDIA kernel module with KBUILD. Verify that the user posesses
                                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: Makefile.nvidia:5:
+DEFINES=-D__KERNEL__ -DMODULE -D_LOOSE_KERNEL_NAMES -DKBUILD_MODNAME="nvidia" -DNTRM -D_GNU_SOURCE -D_LOOSE_KERNEL_NAMES -D__KERNEL__ -DMODULE  -DNV_MAJOR_VERSION=1 -DNV_MINOR_VERSION=0 -DNV_PATCHLEVEL=4348  -DNV_UNIX   -DNV_LINUX   -DNV_INT64_OK   -DNVCPU_X86     $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: Makefile.nvidia:8:
+OBJECTS=nv.o os-agp.o os-interface.o os-registry.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: Makefile.nvidia:130:
+nvidia.o: cc-sanity-check $(LINUX_MODULE) $(RESMAN_KERNEL_MODULE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: Makefile.nvidia:133:
+$(VERSION_HDR): $

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#769: FILE: nv-linux.h:27:
+#if   LINUX_VERSION_CODE < KERNEL_VERSION(2, 3, 0)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#769: FILE: nv-linux.h:27:
+#if   LINUX_VERSION_CODE < KERNEL_VERSION(2, 3, 0)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#779: FILE: nv-linux.h:35:
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(2, 7, 0)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#779: FILE: nv-linux.h:35:
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(2, 7, 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#792: FILE: nv-linux.h:52:
+#if defined (MODVERSIONS) && !defined (KERNEL_2_5)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#792: FILE: nv-linux.h:52:
+#if defined (MODVERSIONS) && !defined (KERNEL_2_5)

CHECK:SPACING: No space is necessary after a cast
#846: FILE: nv-linux.h:128:
+#define GET_MODULE_SYMBOL(mod,sym)    (const void *) inter_module_get(sym)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: nv-linux.h:128:
+#define GET_MODULE_SYMBOL(mod,sym)    (const void *) inter_module_get(sym)
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#846: FILE: nv-linux.h:128:
+#define GET_MODULE_SYMBOL(mod,sym)    (const void *) inter_module_get(sym)

CHECK:SPACING: No space is necessary after a cast
#847: FILE: nv-linux.h:129:
+#define PUT_MODULE_SYMBOL(sym)        inter_module_put((char *) sym)

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#858: FILE: nv-linux.h:140:
+#  define NV_MAY_SLEEP()                (!in_interrupt() && !in_atomic())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: nv-linux.h:157:
+  typedef void irqreturn_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#875: FILE: nv-linux.h:157:
+  typedef void irqreturn_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: nv-linux.h:163:
+  typedef struct agp_kern_info agp_kern_info;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#881: FILE: nv-linux.h:163:
+  typedef struct agp_kern_info agp_kern_info;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: nv-linux.h:164:
+  typedef struct agp_memory agp_memory;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#882: FILE: nv-linux.h:164:
+  typedef struct agp_memory agp_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: nv-linux.h:166:
+  typedef void* devfs_handle_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#884: FILE: nv-linux.h:166:
+  typedef void* devfs_handle_t;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#884: FILE: nv-linux.h:166:
+  typedef void* devfs_handle_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: nv-linux.h:172:
+    devfs_handle_t __handle = NULL;                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: nv-linux.h:173:
+    devfs_mk_cdev(MKDEV(NV_MAJOR_DEVICE_NUMBER, _minor),            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: nv-linux.h:174:
+            S_IFCHR | S_IRUGO | S_IWUGO, _name);                    \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: nv-linux.h:174:
+            S_IFCHR | S_IRUGO | S_IWUGO, _name);                    \$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#892: FILE: nv-linux.h:174:
+            S_IFCHR | S_IRUGO | S_IWUGO, _name);                    \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: nv-linux.h:175:
+    __handle;                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: nv-linux.h:183:
+    devfs_handle_t __handle =                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: nv-linux.h:184:
+        devfs_register(NULL, _name, DEVFS_FL_DEFAULT,               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: nv-linux.h:184:
+        devfs_register(NULL, _name, DEVFS_FL_DEFAULT,               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#903: FILE: nv-linux.h:185:
+                NV_MAJOR_DEVICE_NUMBER, _minor,                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: nv-linux.h:185:
+                NV_MAJOR_DEVICE_NUMBER, _minor,                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: nv-linux.h:186:
+                S_IFCHR | S_IRUGO | S_IWUGO, &nv_fops, NULL);       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: nv-linux.h:186:
+                S_IFCHR | S_IRUGO | S_IWUGO, &nv_fops, NULL);       \$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#904: FILE: nv-linux.h:186:
+                S_IFCHR | S_IRUGO | S_IWUGO, &nv_fops, NULL);       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: nv-linux.h:187:
+    __handle;                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: nv-linux.h:188:
+ })$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#929: FILE: nv-linux.h:190:
+#define NV_DEVFS_REMOVE_DEVICE(i) devfs_unregister(nv_devfs_handles[i+1])
                                                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#929: FILE: nv-linux.h:190:
+#define NV_DEVFS_REMOVE_DEVICE(i) devfs_unregister(nv_devfs_handles[i+1])

ERROR:CODE_INDENT: code indent should use tabs where possible
#963: FILE: nv-linux.h:216:
+        pmd = pmd_offset_map(pgd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: nv-linux.h:216:
+        pmd = pmd_offset_map(pgd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: nv-linux.h:217:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: nv-linux.h:219:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#967: FILE: nv-linux.h:220:
+        pmd_unmap(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: nv-linux.h:220:
+        pmd_unmap(pmd); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: nv-linux.h:225:
+        pmd = pmd_offset(pgd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: nv-linux.h:225:
+        pmd = pmd_offset(pgd, address); \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#986: FILE: nv-linux.h:230:
+#define NV_PMD_PRESENT(pmd) \
+    ({ \
+        if (pmd) { \
+            if (pmd_none(*pmd)) { \
+                NV_PMD_UNMAP(pmd); pmd = NULL; \
+            } \
+        } pmd != NULL; \
+    })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: nv-linux.h:231:
+    ({ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#988: FILE: nv-linux.h:232:
+        if (pmd) { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: nv-linux.h:232:
+        if (pmd) { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#988: FILE: nv-linux.h:232:
+        if (pmd) { \
+            if (pmd_none(*pmd)) { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: nv-linux.h:233:
+            if (pmd_none(*pmd)) { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: nv-linux.h:233:
+            if (pmd_none(*pmd)) { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: nv-linux.h:234:
+                NV_PMD_UNMAP(pmd); pmd = NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: nv-linux.h:234:
+                NV_PMD_UNMAP(pmd); pmd = NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#991: FILE: nv-linux.h:235:
+            } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: nv-linux.h:235:
+            } \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: nv-linux.h:236:
+        } pmd != NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: nv-linux.h:236:
+        } pmd != NULL; \$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pmd"
#992: FILE: nv-linux.h:236:
+        } pmd != NULL; \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: nv-linux.h:237:
+    })$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#997: FILE: nv-linux.h:239:
+#if defined (pte_offset_atomic)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#998: FILE: nv-linux.h:240:
+#define NV_PTE_OFFSET(address, pmd, pte) \
+    { \
+        pte = pte_offset_atomic(pmd, address); \
+        NV_PMD_UNMAP(pmd); \
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: nv-linux.h:241:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: nv-linux.h:242:
+        pte = pte_offset_atomic(pmd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: nv-linux.h:242:
+        pte = pte_offset_atomic(pmd, address); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: nv-linux.h:243:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: nv-linux.h:243:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: nv-linux.h:244:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: nv-linux.h:246:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: nv-linux.h:247:
+        pte_kunmap(pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: nv-linux.h:247:
+        pte_kunmap(pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: nv-linux.h:248:
+    }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: nv-linux.h:249:
+#elif defined (pte_offset)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#1008: FILE: nv-linux.h:250:
+#define NV_PTE_OFFSET(address, pmd, pte) \
+    { \
+        pte = pte_offset(pmd, address); \
+        NV_PMD_UNMAP(pmd); \
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: nv-linux.h:251:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1010: FILE: nv-linux.h:252:
+        pte = pte_offset(pmd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: nv-linux.h:252:
+        pte = pte_offset(pmd, address); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1011: FILE: nv-linux.h:253:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: nv-linux.h:253:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: nv-linux.h:254:
+    }$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#1015: FILE: nv-linux.h:257:
+#define NV_PTE_OFFSET(address, pmd, pte) \
+    { \
+        pte = pte_offset_map(pmd, address); \
+        NV_PMD_UNMAP(pmd); \
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: nv-linux.h:258:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1017: FILE: nv-linux.h:259:
+        pte = pte_offset_map(pmd, address); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: nv-linux.h:259:
+        pte = pte_offset_map(pmd, address); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1018: FILE: nv-linux.h:260:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: nv-linux.h:260:
+        NV_PMD_UNMAP(pmd); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: nv-linux.h:261:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: nv-linux.h:263:
+    { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1022: FILE: nv-linux.h:264:
+        pte_unmap(pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: nv-linux.h:264:
+        pte_unmap(pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: nv-linux.h:265:
+    }$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#1029: FILE: nv-linux.h:268:
+#define NV_PTE_PRESENT(pte) \
+    ({ \
+        if (pte) { \
+            if (!pte_present(*pte)) { \
+                NV_PTE_UNMAP(pte); pte = NULL; \
+            } \
+        } pte != NULL; \
+    })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: nv-linux.h:269:
+    ({ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1031: FILE: nv-linux.h:270:
+        if (pte) { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: nv-linux.h:270:
+        if (pte) { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1031: FILE: nv-linux.h:270:
+        if (pte) { \
+            if (!pte_present(*pte)) { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1032: FILE: nv-linux.h:271:
+            if (!pte_present(*pte)) { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: nv-linux.h:271:
+            if (!pte_present(*pte)) { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1033: FILE: nv-linux.h:272:
+                NV_PTE_UNMAP(pte); pte = NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: nv-linux.h:272:
+                NV_PTE_UNMAP(pte); pte = NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1034: FILE: nv-linux.h:273:
+            } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: nv-linux.h:273:
+            } \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1035: FILE: nv-linux.h:274:
+        } pte != NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: nv-linux.h:274:
+        } pte != NULL; \$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pte"
#1035: FILE: nv-linux.h:274:
+        } pte != NULL; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: nv-linux.h:275:
+    })$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#1038: FILE: nv-linux.h:277:
+#define NV_PTE_VALUE(pte) \
+    ({ \
+        unsigned long __pte_value = pte_val(*pte); \
+        NV_PTE_UNMAP(pte); \
+        __pte_value; \
+    })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pte' may be better as '(pte)' to avoid precedence issues
#1038: FILE: nv-linux.h:277:
+#define NV_PTE_VALUE(pte) \
+    ({ \
+        unsigned long __pte_value = pte_val(*pte); \
+        NV_PTE_UNMAP(pte); \
+        __pte_value; \
+    })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: nv-linux.h:278:
+    ({ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: nv-linux.h:279:
+        unsigned long __pte_value = pte_val(*pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: nv-linux.h:279:
+        unsigned long __pte_value = pte_val(*pte); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: nv-linux.h:280:
+        NV_PTE_UNMAP(pte); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: nv-linux.h:280:
+        NV_PTE_UNMAP(pte); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: nv-linux.h:281:
+        __pte_value; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: nv-linux.h:281:
+        __pte_value; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: nv-linux.h:282:
+    })$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1045: FILE: nv-linux.h:284:
+#define NV_PAGE_ALIGN(addr)             ( ((addr) + PAGE_SIZE - 1) / PAGE_SIZE)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1046: FILE: nv-linux.h:285:
+#define NV_MASK_OFFSET(addr)            ( (addr) & (PAGE_SIZE - 1) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1046: FILE: nv-linux.h:285:
+#define NV_MASK_OFFSET(addr)            ( (addr) & (PAGE_SIZE - 1) )

ERROR:CODE_INDENT: code indent should use tabs where possible
#1055: FILE: nv-linux.h:342:
+        NV_SAVE_FLAGS(eflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: nv-linux.h:342:
+        NV_SAVE_FLAGS(eflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: nv-linux.h:401:
+    struct tasklet_struct tasklet;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: nv-linux.h:410:
+    wait_queue_head_t waitqueue;$

WARNING:MODULE_LICENSE: unknown module license "NVIDIA"
#1088: FILE: nv.c:19:
+MODULE_LICENSE("NVIDIA");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1112: FILE: nv.c:48:
+devfs_handle_t nv_devfs_handles[NV_MAX_DEVICES+1];
                                               ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1144: FILE: nv.c:111:
+irqreturn_t   nv_kern_isr(int, void *, struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1144: FILE: nv.c:111:
+irqreturn_t   nv_kern_isr(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1144: FILE: nv.c:111:
+irqreturn_t   nv_kern_isr(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1144: FILE: nv.c:111:
+irqreturn_t   nv_kern_isr(int, void *, struct pt_regs *);

WARNING:INDENTED_LABEL: labels should not be indented
#1152: FILE: nv.c:134:
+    owner:          THIS_MODULE,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: nv.c:289:
+            (virt_to_page(__va(*page_ptr)))->count,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: nv.c:289:
+            (virt_to_page(__va(*page_ptr)))->count,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: nv.c:290:
+            (virt_to_page(__va(*page_ptr)))->flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: nv.c:290:
+            (virt_to_page(__va(*page_ptr)))->flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1172: FILE: nv.c:361:
+        SetPageReserved(virt_to_page(__va(phys_addr)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: nv.c:361:
+        SetPageReserved(virt_to_page(__va(phys_addr)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1181: FILE: nv.c:374:
+        ClearPageReserved(virt_to_page(__va(*page_ptr)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: nv.c:374:
+        ClearPageReserved(virt_to_page(__va(*page_ptr)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: nv.c:394:
+        ClearPageReserved(virt_to_page(__va(*page_list)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: nv.c:394:
+        ClearPageReserved(virt_to_page(__va(*page_list)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: nv.c:711:
+    int i, rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: nv.c:714:
+    nv_num_devices = nvos_probe_devices();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: nv.c:716:
+    if (nv_num_devices == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1249: FILE: nv.c:730:
+        nv_printf(NV_DBG_ERRORS, "nvidia_init_module: register failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: nv.c:730:
+        nv_printf(NV_DBG_ERRORS, "nvidia_init_module: register failed\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nvidia_init_module', this function's name, in a string
#1249: FILE: nv.c:730:
+        nv_printf(NV_DBG_ERRORS, "nvidia_init_module: register failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1256: FILE: nv.c:736:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1257: FILE: nv.c:737:
+         * XXX This code isn't pretty, but neither is dealing with the$

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#1258: FILE: nv.c:738:
+         * various Linux devfs implemenation(s). While Linux APIs are
                                ^^^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: nv.c:738:
+         * various Linux devfs implemenation(s). While Linux APIs are$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1259: FILE: nv.c:739:
+         * known to be anything but stable and oftentimes anything but$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: nv.c:740:
+         * well designed, the devfs interface has been more painful to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1261: FILE: nv.c:741:
+         * deal with than most other APIs.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1262: FILE: nv.c:742:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1270: FILE: nv.c:745:
+        nv_devfs_handles[0] = NV_DEVFS_REGISTER("nvidiactl", 255);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: nv.c:745:
+        nv_devfs_handles[0] = NV_DEVFS_REGISTER("nvidiactl", 255);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1273: FILE: nv.c:747:
+        for (i = 0; i < nv_num_devices; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: nv.c:747:
+        for (i = 0; i < nv_num_devices; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1273: FILE: nv.c:747:
+        for (i = 0; i < nv_num_devices; i++) {
             sprintf(name, "nvidia%d", i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1279: FILE: nv.c:749:
+            nv_devfs_handles[i+1] = NV_DEVFS_REGISTER(name, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: nv.c:749:
+            nv_devfs_handles[i+1] = NV_DEVFS_REGISTER(name, i);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1279: FILE: nv.c:749:
+            nv_devfs_handles[i+1] = NV_DEVFS_REGISTER(name, i);
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: nv.c:754:
+    nv_printf(NV_DBG_INFO, "nvidia_init_module: major number %d\n", nv_major);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nvidia_init_module', this function's name, in a string
#1285: FILE: nv.c:754:
+    nv_printf(NV_DBG_INFO, "nvidia_init_module: major number %d\n", nv_major);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: nv.c:757:
+    for (i = 0; i < NV_MAX_DEVICES; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1296: FILE: nv.c:758:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1297: FILE: nv.c:759:
+         * We keep one tasklet per card to avoid latency issues with more$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1298: FILE: nv.c:760:
+         * than one device; no two instances of a single tasklet are ever$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1299: FILE: nv.c:761:
+         * executed concurrently.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: nv.c:762:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1301: FILE: nv.c:763:
+        atomic_set(&nv_linux_devices[i].tasklet.count, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1301: FILE: nv.c:763:
+        atomic_set(&nv_linux_devices[i].tasklet.count, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1303: FILE: nv.c:765:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1304: FILE: nv.c:766:
+         * Initialize the event queue for this device. This only needs to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1305: FILE: nv.c:767:
+         * happen once for every device.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1306: FILE: nv.c:768:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1307: FILE: nv.c:769:
+        init_waitqueue_head(&nv_linux_devices[i].waitqueue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: nv.c:769:
+        init_waitqueue_head(&nv_linux_devices[i].waitqueue);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1316: FILE: nv.c:777:
+        init_waitqueue_head(&nv_ctl_device.waitqueue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: nv.c:777:
+        init_waitqueue_head(&nv_ctl_device.waitqueue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1347: FILE: nv.c:821:
+    int rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: nv.c:826:
+    nv_printf(NV_DBG_INFO, "nvidia_exit_module\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nvidia_exit_module', this function's name, in a string
#1353: FILE: nv.c:826:
+    nv_printf(NV_DBG_INFO, "nvidia_exit_module\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: nv.c:853:
+                    "still have vm que at nvidia_exit_module(): 0x%x to 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: nv.c:853:
+                    "still have vm que at nvidia_exit_module(): 0x%x to 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1380: FILE: nv.c:866:
+        nv_printf(NV_DBG_ERRORS, "nvidia_exit_module: unregister nv failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: nv.c:866:
+        nv_printf(NV_DBG_ERRORS, "nvidia_exit_module: unregister nv failed\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1391: FILE: nv.c:872:
+        NV_DEVFS_REMOVE_CONTROL();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1391: FILE: nv.c:872:
+        NV_DEVFS_REMOVE_CONTROL();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1392: FILE: nv.c:873:
+        for (i = 0; i < nv_num_devices; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: nv.c:873:
+        for (i = 0; i < nv_num_devices; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1392: FILE: nv.c:873:
+        for (i = 0; i < nv_num_devices; i++)
+            NV_DEVFS_REMOVE_DEVICE(i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1393: FILE: nv.c:874:
+            NV_DEVFS_REMOVE_DEVICE(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: nv.c:874:
+            NV_DEVFS_REMOVE_DEVICE(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: nv.c:875:
+    } while (0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1408: FILE: nv.c:894:
+        vma->vm_start, vma->vm_end, NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1408: FILE: nv.c:894:
+        vma->vm_start, vma->vm_end, NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: nv.c:896:
+    if (NV_VMA_PRIVATE(vma))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1414: FILE: nv.c:898:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);$

CHECK:SPACING: No space is necessary after a cast
#1414: FILE: nv.c:898:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1414: FILE: nv.c:898:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1432: FILE: nv.c:913:
+        vma->vm_start, vma->vm_end, NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1432: FILE: nv.c:913:
+        vma->vm_start, vma->vm_end, NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1435: FILE: nv.c:915:
+    if (NV_VMA_PRIVATE(vma))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1438: FILE: nv.c:917:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);$

CHECK:SPACING: No space is necessary after a cast
#1438: FILE: nv.c:917:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1438: FILE: nv.c:917:
+        nv_alloc_t *at = (nv_alloc_t *) NV_VMA_PRIVATE(vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1447: FILE: nv.c:935:
+            NV_VMA_PRIVATE(vma) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1447: FILE: nv.c:935:
+            NV_VMA_PRIVATE(vma) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1471: FILE: nv.c:953:
+    at = NV_VMA_PRIVATE(vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1480: FILE: nv.c:992:
+        NV_VMA_PRIVATE(vma) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1480: FILE: nv.c:992:
+        NV_VMA_PRIVATE(vma) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1504: FILE: nv.c:1049:
+    if (NV_IS_CONTROL_DEVICE(inode->i_rdev))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1532: FILE: nv.c:1107:
+        nvl->tasklet.func = (void *) rm_isr_bh;$

CHECK:SPACING: No space is necessary after a cast
#1532: FILE: nv.c:1107:
+        nvl->tasklet.func = (void *) rm_isr_bh;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: nv.c:1107:
+        nvl->tasklet.func = (void *) rm_isr_bh;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1533: FILE: nv.c:1108:
+        nvl->tasklet.data = (unsigned long) nv->pdev;$

CHECK:SPACING: No space is necessary after a cast
#1533: FILE: nv.c:1108:
+        nvl->tasklet.data = (unsigned long) nv->pdev;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: nv.c:1108:
+        nvl->tasklet.data = (unsigned long) nv->pdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1534: FILE: nv.c:1109:
+        tasklet_enable(&nvl->tasklet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: nv.c:1109:
+        tasklet_enable(&nvl->tasklet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1551: FILE: nv.c:1141:
+    if (NV_IS_CONTROL_DEVICE(inode->i_rdev))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1567: FILE: nv.c:1151:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1568: FILE: nv.c:1152:
+         * The usage count for this device has dropped to zero, it can be shut$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1569: FILE: nv.c:1153:
+         * down safely; disable its interrupts.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1570: FILE: nv.c:1154:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: nv.c:1157:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1583: FILE: nv.c:1158:
+         * Disable this device's tasklet to make sure that no bottom half will$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1584: FILE: nv.c:1159:
+         * run with undefined device state.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1585: FILE: nv.c:1160:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1586: FILE: nv.c:1161:
+        tasklet_disable(&nvl->tasklet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1586: FILE: nv.c:1161:
+        tasklet_disable(&nvl->tasklet);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: nv.c:1163:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1591: FILE: nv.c:1164:
+         * Free the IRQ, which may block until all pending interrupt processing$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1592: FILE: nv.c:1165:
+         * has completed.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1593: FILE: nv.c:1166:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1624: FILE: nv.c:1212:
+        NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1624: FILE: nv.c:1212:
+        NV_VMA_OFFSET(vma));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: nv.c:1215:
+    if ((NV_MASK_OFFSET(NV_VMA_OFFSET(vma))) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1637: FILE: nv.c:1233:
+    if (IS_REG_OFFSET(nv, NV_VMA_OFFSET(vma), vma->vm_end - vma->vm_start))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1646: FILE: nv.c:1241:
+                             NV_VMA_OFFSET(vma),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1646: FILE: nv.c:1241:
+                             NV_VMA_OFFSET(vma),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1655: FILE: nv.c:1251:
+    else if (IS_FB_OFFSET(nv, NV_VMA_OFFSET(vma), vma->vm_end - vma->vm_start))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1664: FILE: nv.c:1260:
+                             NV_VMA_OFFSET(vma),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1664: FILE: nv.c:1260:
+                             NV_VMA_OFFSET(vma),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: nv.c:1270:
+    else if (IS_AGP_OFFSET(nv, NV_VMA_OFFSET(vma), vma->vm_end - vma->vm_start))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1677: FILE: nv.c:1273:
+        at = nvl_find_alloc(nvl, NV_VMA_OFFSET(vma), NV_ALLOC_TYPE_AGP);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: nv.c:1273:
+        at = nvl_find_alloc(nvl, NV_VMA_OFFSET(vma), NV_ALLOC_TYPE_AGP);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1686: FILE: nv.c:1291:
+        NV_VMA_PRIVATE(vma) = at;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1686: FILE: nv.c:1291:
+        NV_VMA_PRIVATE(vma) = at;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1695: FILE: nv.c:1314:
+    else // if (NV_VMA_OFFSET(vma) == NV_MMAP_ALLOCATION_OFFSET)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1702: FILE: nv.c:1320:
+        at = nvl_find_alloc(nvl, NV_VMA_OFFSET(vma), NV_ALLOC_TYPE_PCI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1702: FILE: nv.c:1320:
+        at = nvl_find_alloc(nvl, NV_VMA_OFFSET(vma), NV_ALLOC_TYPE_PCI);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1711: FILE: nv.c:1338:
+        NV_VMA_PRIVATE(vma) = at;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1711: FILE: nv.c:1338:
+        NV_VMA_PRIVATE(vma) = at;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1730: FILE: nv.c:1384:
+    poll_wait(file, &nvl->waitqueue, wait);$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1754: FILE: nv.c:1597:
+irqreturn_t nv_kern_isr(

ERROR:CODE_INDENT: code indent should use tabs where possible
#1764: FILE: nv.c:1611:
+        tasklet_schedule(&nvl->tasklet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: nv.c:1611:
+        tasklet_schedule(&nvl->tasklet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1767: FILE: nv.c:1614:
+    return IRQ_HANDLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1828: FILE: nv.c:1768:
+    poll_wait(file, &nvl->waitqueue, wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1837: FILE: nv.c:1798:
+    wake_up_interruptible(&nv_ctl_device.waitqueue);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1846: FILE: nv.c:1877:
+        len += sprintf(page+len, "%s\n", NV_PCI_DEVICE_NAME(dev));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1846: FILE: nv.c:1877:
+        len += sprintf(page+len, "%s\n", NV_PCI_DEVICE_NAME(dev));$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1846: FILE: nv.c:1877:
+        len += sprintf(page+len, "%s\n", NV_PCI_DEVICE_NAME(dev));
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1862: FILE: nv.c:2005:
+                /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1863: FILE: nv.c:2006:
+                 * XXX This routine should be more straight-forward; as it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1864: FILE: nv.c:2007:
+                 * is, it returns a pointer into the kernel linear mapping if$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1865: FILE: nv.c:2008:
+                 * the incoming address belongs to a vmalloc() allocation or$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1866: FILE: nv.c:2009:
+                 * the kernel logical mapping of the corresponding page if it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1867: FILE: nv.c:2010:
+                 * was allocated with alloc_pages(); third case below.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1868: FILE: nv.c:2011:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1873: FILE: nv.c:2016:
+                else if (!(at->flags & NV_ALLOC_TYPE_CONTIG))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1873: FILE: nv.c:2016:
+                else if (!(at->flags & NV_ALLOC_TYPE_CONTIG))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1873: FILE: nv.c:2016:
+                else if (!(at->flags & NV_ALLOC_TYPE_CONTIG))
+                {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1873: FILE: nv.c:2016:
+                else if (!(at->flags & NV_ALLOC_TYPE_CONTIG))
+                {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1873: FILE: nv.c:2016:
                 }
+                else if (!(at->flags & NV_ALLOC_TYPE_CONTIG))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1874: FILE: nv.c:2017:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1874: FILE: nv.c:2017:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1875: FILE: nv.c:2018:
+                    return __va((retaddr + offset));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1875: FILE: nv.c:2018:
+                    return __va((retaddr + offset));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1876: FILE: nv.c:2019:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1876: FILE: nv.c:2019:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1887: FILE: nv.c:2089:
+    pgd_t *pgd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1888: FILE: nv.c:2090:
+    pmd_t *pmd;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1889: FILE: nv.c:2091:
+    pte_t *pte; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1889: FILE: nv.c:2091:
+    pte_t *pte; $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 7)
#1896: FILE: nv.c:2103:
     if (address > VMALLOC_START)
+       pgd = pgd_offset_k(address);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1898: FILE: nv.c:2104:
+       pgd = pgd_offset_k(address);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 7)
#1899: FILE: nv.c:2105:
     else
+       pgd = pgd_offset(current->mm, address);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1901: FILE: nv.c:2106:
+       pgd = pgd_offset(current->mm, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1904: FILE: nv.c:2108:
+    if (!pgd || pgd_none(*pgd))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1909: FILE: nv.c:2111:
+    NV_PMD_OFFSET(address, pgd, pmd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1910: FILE: nv.c:2112:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1910: FILE: nv.c:2112:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1911: FILE: nv.c:2113:
+    if (!NV_PMD_PRESENT(pmd))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1915: FILE: nv.c:2116:
+    NV_PTE_OFFSET(address, pmd, pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1918: FILE: nv.c:2118:
+    if (!NV_PTE_PRESENT(pte))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1922: FILE: nv.c:2120:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1922: FILE: nv.c:2120:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1923: FILE: nv.c:2121:
+    return (NV_PTE_VALUE(pte) & KERN_PAGE_MASK) | NV_MASK_OFFSET(address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1932: FILE: nv.c:2488:
+    wake_up_interruptible(&nvl->waitqueue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1941: FILE: nv.c:2505:
+    wake_up_interruptible(&nvl->waitqueue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2072: FILE: os-agp.c:97:
+    if (drm_agp_p->acquire())$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2122: FILE: os-agp.c:122:
+    drm_agp_p->copy_info(&agpinfo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2124: FILE: os-agp.c:124:
+    if (drm_agp_p->copy_info(&agpinfo)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2125: FILE: os-agp.c:125:
+        drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2125: FILE: os-agp.c:125:
+        drm_agp_p->release();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2126: FILE: os-agp.c:126:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2126: FILE: os-agp.c:126:
+        inter_module_put("drm_agp");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2127: FILE: os-agp.c:127:
+        return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2127: FILE: os-agp.c:127:
+        return -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2140: FILE: os-agp.c:143:
+        drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2140: FILE: os-agp.c:143:
+        drm_agp_p->release();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2141: FILE: os-agp.c:144:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2141: FILE: os-agp.c:144:
+        inter_module_put("drm_agp");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2150: FILE: os-agp.c:159:
+        drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2150: FILE: os-agp.c:159:
+        drm_agp_p->release();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2151: FILE: os-agp.c:160:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2151: FILE: os-agp.c:160:
+        inter_module_put("drm_agp");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2160: FILE: os-agp.c:171:
+        drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2160: FILE: os-agp.c:171:
+        drm_agp_p->release();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2161: FILE: os-agp.c:172:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2161: FILE: os-agp.c:172:
+        inter_module_put("drm_agp");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2170: FILE: os-agp.c:183:
+        drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2170: FILE: os-agp.c:183:
+        drm_agp_p->release();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2171: FILE: os-agp.c:184:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2171: FILE: os-agp.c:184:
+        inter_module_put("drm_agp");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2192: FILE: os-agp.c:194:
+    drm_agp_p->enable(agpinfo.mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2213: FILE: os-agp.c:229:
+    drm_agp_p->release();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2230: FILE: os-agp.c:282:
+    ptr = drm_agp_p->allocate_memory(PageCount, AGP_NORMAL_MEMORY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2239: FILE: os-agp.c:290:
+    err = drm_agp_p->bind_memory(ptr, *Offset);$

CHECK:CAMELCASE: Avoid CamelCase: <Offset>
#2239: FILE: os-agp.c:290:
+    err = drm_agp_p->bind_memory(ptr, *Offset);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#2248: FILE: os-agp.c:307:
+        drm_agp_p->unbind_memory(ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2248: FILE: os-agp.c:307:
+        drm_agp_p->unbind_memory(ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2257: FILE: os-agp.c:322:
+    drm_agp_p->free_memory(ptr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2266: FILE: os-agp.c:361:
+        drm_agp_p->unbind_memory(agp_data->ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2266: FILE: os-agp.c:361:
+        drm_agp_p->unbind_memory(agp_data->ptr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2296: FILE: os-agp.c:450:
+        drm_agp_p->unbind_memory(ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2296: FILE: os-agp.c:450:
+        drm_agp_p->unbind_memory(ptr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2297: FILE: os-agp.c:451:
+        drm_agp_p->free_memory(ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2297: FILE: os-agp.c:451:
+        drm_agp_p->free_memory(ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2309: FILE: os-interface.c:59:
+    return NV_IS_SUSER();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2330: FILE: os-interface.c:294:
+        SetPageReserved(virt_to_page(va));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2330: FILE: os-interface.c:294:
+        SetPageReserved(virt_to_page(va));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2339: FILE: os-interface.c:318:
+        ClearPageReserved(virt_to_page(va));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2339: FILE: os-interface.c:318:
+        ClearPageReserved(virt_to_page(va));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2348: FILE: os-interface.c:424:
+    if (!NV_MAY_SLEEP()) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2348: FILE: os-interface.c:424:
+    if (!NV_MAY_SLEEP()) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2368: FILE: os-interface.c:706:
+    NV_SAVE_FLAGS(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2369: FILE: os-interface.c:707:
+    NV_CLI();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2376: FILE: os-interface.c:713:
+    NV_RESTORE_FLAGS(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2411: FILE: os-interface.c:866:
+    iounmap(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2420: FILE: os-interface.c:970:
+    return NV_SMP_NUM_CPUS;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2429: FILE: os-interface.c:1033:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2430: FILE: os-interface.c:1034:
+         * XXX The inter_module_* mechanism has been deprecated in Linux 2.5, a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2431: FILE: os-interface.c:1035:
+         * new mechanism is in place; this code will need to be updated at some$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2432: FILE: os-interface.c:1036:
+         * point.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2433: FILE: os-interface.c:1037:
+         */$

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_VideoMemoryTypeOverride>
#2475: FILE: os-registry.c:77:
+NV_MODULE_PARAMETER(NVreg_VideoMemoryTypeOverride);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_EnableVia4x>
#2484: FILE: os-registry.c:96:
+NV_MODULE_PARAMETER(NVreg_EnableVia4x);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_EnableALiAGP>
#2493: FILE: os-registry.c:119:
+NV_MODULE_PARAMETER(NVreg_EnableALiAGP);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_ReqAGPRate>
#2502: FILE: os-registry.c:149:
+NV_MODULE_PARAMETER(NVreg_ReqAGPRate);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_UpdateKernelAGP>
#2511: FILE: os-registry.c:178:
+NV_MODULE_PARAMETER(NVreg_UpdateKernelAGP);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_EnableAGPSBA>
#2520: FILE: os-registry.c:211:
+NV_MODULE_PARAMETER(NVreg_EnableAGPSBA);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_EnableAGPFW>
#2529: FILE: os-registry.c:235:
+NV_MODULE_PARAMETER(NVreg_EnableAGPFW);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_SoftEDIDs>
#2538: FILE: os-registry.c:254:
+NV_MODULE_PARAMETER(NVreg_SoftEDIDs);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_Mobile>
#2547: FILE: os-registry.c:278:
+NV_MODULE_PARAMETER(NVreg_Mobile);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_ResmanDebugLevel>
#2552: FILE: os-registry.c:282:
+NV_MODULE_PARAMETER(NVreg_ResmanDebugLevel);

CHECK:CAMELCASE: Avoid CamelCase: <NVreg_FlatPanelMode>
#2556: FILE: os-registry.c:285:
+NV_MODULE_PARAMETER(NVreg_FlatPanelMode);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354476.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 142 errors, 203 warnings, 33 checks, 2192 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354476.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
