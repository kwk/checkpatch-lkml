WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
http://www.kernel.org/pub/linux/kernel/people/jgarzik/patchkits/2.4/2.4.27-rc3-libata1.patch.bz2

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#141: 
--- a/drivers/scsi/ata_piix.c	2004-07-07 20:56:50 -04:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: drivers/scsi/ata_piix.c:68:
+static void piix_set_piomode (struct ata_port *ap, struct ata_device *adev);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: drivers/scsi/ata_piix.c:69:
+static void piix_set_dmamode (struct ata_port *ap, struct ata_device *adev);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#180: FILE: drivers/scsi/ata_piix.c:181:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#206: FILE: drivers/scsi/ata_piix.c:206:
+#if 0

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#232: FILE: drivers/scsi/ata_piix.c:379:
+static void piix_set_piomode (struct ata_port *ap, struct ata_device *adev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#253: FILE: drivers/scsi/ata_piix.c:431:
+static void piix_set_dmamode (struct ata_port *ap, struct ata_device *adev)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#264: FILE: drivers/scsi/ata_piix.c:464:
+		case XFER_MW_DMA_1:	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#277: FILE: drivers/scsi/ata_piix.c:473:
+		if (speed == XFER_UDMA_5) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#278: FILE: drivers/scsi/ata_piix.c:474:
+			pci_write_config_byte(dev, 0x55, (u8) reg55|w_flag);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#278: FILE: drivers/scsi/ata_piix.c:474:
+			pci_write_config_byte(dev, 0x55, (u8) reg55|w_flag);
 			                                           ^

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/scsi/ata_piix.c:476:
+			pci_write_config_byte(dev, 0x55, (u8) reg55 & ~w_flag);

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: drivers/scsi/ata_piix.c:480:
+		if (speed > XFER_UDMA_2) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: drivers/scsi/ata_piix.c:483:
+		} else

CHECK:SPACING: No space is necessary after a cast
#298: FILE: drivers/scsi/ata_piix.c:493:
+			pci_write_config_byte(dev, 0x55, (u8) reg55 & ~w_flag);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#337: FILE: drivers/scsi/libata-core.c:530:
+static const char * xfer_mode_str[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#337: FILE: drivers/scsi/libata-core.c:530:
+static const char * xfer_mode_str[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: drivers/scsi/libata-core.c:980:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#412: FILE: drivers/scsi/libata-core.c:980:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.command == ATA_CMD_ID_ATA'
#454: FILE: drivers/scsi/libata-core.c:1021:
+		if ((using_edd) && (qc->tf.command == ATA_CMD_ID_ATA)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#583: FILE: drivers/scsi/libata-core.c:1282:
+	printk(KERN_INFO "ata%u: dev %u configured for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/scsi/libata-core.c:1283:
+	printk(KERN_INFO "ata%u: dev %u configured for %s\n",
+		ap->id, dev->devno, xfer_mode_str[idx]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#596: FILE: drivers/scsi/libata-core.c:1295:
+		printk(KERN_WARNING "ata%u: no PIO support\n", ap->id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: drivers/scsi/libata-core.c:1307:
+		struct ata_device *dev = &ap->device[i];
+		if (ata_dev_present(dev)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#621: FILE: drivers/scsi/libata-core.c:1320:
+static void ata_host_set_dma(struct ata_port *ap, u8 xfer_mode,
+			    unsigned int xfer_shift)

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: drivers/scsi/libata-core.c:1326:
+		struct ata_device *dev = &ap->device[i];
+		if (ata_dev_present(dev)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#667: FILE: drivers/scsi/libata-core.c:1355:
+	xfer_mode = xfer_shift = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#743: FILE: drivers/scsi/libata-core.c:1661:
+	}
+	else if (shift == ATA_SHIFT_MWDMA) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#750: FILE: drivers/scsi/libata-core.c:1668:
+	}
+	else if (shift == ATA_SHIFT_PIO) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#757: FILE: drivers/scsi/libata-core.c:1675:
+			u16 tmp_mode = master->id[ATA_ID_PIO_MODES] & 0x03;
+			tmp_mode <<= 3;

WARNING:LINE_SPACING: Missing a blank line after declarations
#766: FILE: drivers/scsi/libata-core.c:1684:
+			u16 tmp_mode = slave->id[ATA_ID_PIO_MODES] & 0x03;
+			tmp_mode <<= 3;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#771: FILE: drivers/scsi/libata-core.c:1689:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#771: FILE: drivers/scsi/libata-core.c:1689:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#773: FILE: drivers/scsi/libata-core.c:1691:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#917: FILE: drivers/scsi/libata-core.c:1761:
+	BUG_ON(qc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#917: FILE: drivers/scsi/libata-core.c:1761:
+	BUG_ON(qc == NULL);

CHECK:SPACING: No space is necessary after a cast
#1037: FILE: drivers/scsi/libata-core.c:2128:
+		u16 *buf16 = (u16 *) buf;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qc"
#1063: FILE: drivers/scsi/libata-core.c:2154:
+	assert(qc != NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1066: FILE: drivers/scsi/libata-core.c:2157:
+	printk(KERN_WARNING "ata%u: PIO error, drv_stat 0x%x\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: drivers/scsi/libata-core.c:2407:
+		struct completion *waiting = qc->waiting;
+		qc->waiting = NULL;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1182: FILE: drivers/scsi/libata-core.c:2985:
+		xfer_mode_mask =(ap->udma_mask << ATA_SHIFT_UDMA) |
 		               ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1311: FILE: drivers/scsi/sata_promise.c:274:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1359: FILE: drivers/scsi/sata_promise.c:318:
+		printk(KERN_ERR "ata%u: command timeout\n", ap->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1404: FILE: drivers/scsi/sata_promise.c:468:
+	WARN_ON (tf->protocol == ATA_PROT_DMA ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1413: FILE: drivers/scsi/sata_promise.c:476:
+	WARN_ON (tf->protocol == ATA_PROT_DMA ||

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1424: FILE: drivers/scsi/sata_promise.c:531:
+	msleep(10);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1687: FILE: drivers/scsi/sata_sx4.c:679:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1752: FILE: drivers/scsi/sata_sx4.c:867:
+		printk(KERN_ERR "ata%u: command timeout\n", ap->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1763: FILE: drivers/scsi/sata_sx4.c:887:
+	WARN_ON (tf->protocol == ATA_PROT_DMA ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1773: FILE: drivers/scsi/sata_sx4.c:895:
+	WARN_ON (tf->protocol == ATA_PROT_DMA ||

WARNING:SPACING: Unnecessary space before function pointer arguments
#1930: FILE: include/linux/libata.h:315:
+	void (*set_piomode) (struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1930: FILE: include/linux/libata.h:315:
+	void (*set_piomode) (struct ata_port *, struct ata_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1930: FILE: include/linux/libata.h:315:
+	void (*set_piomode) (struct ata_port *, struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1931: FILE: include/linux/libata.h:316:
+	void (*set_dmamode) (struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1931: FILE: include/linux/libata.h:316:
+	void (*set_dmamode) (struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1931: FILE: include/linux/libata.h:316:
+	void (*set_dmamode) (struct ata_port *, struct ata_device *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269524.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 35 warnings, 15 checks, 1680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269524.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
