WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/rdstate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#65: FILE: fs/unionfs/rdstate.c:23:
+ * of the second structure which is a filldir_node. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#70: FILE: fs/unionfs/rdstate.c:28:
+ * preserve kmalloc space. */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#78: FILE: fs/unionfs/rdstate.c:36:
+	return (unionfs_filldir_cachep ? 0 : -ENOMEM);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#84: FILE: fs/unionfs/rdstate.c:42:
+	if (unionfs_filldir_cachep)
+		kmem_cache_destroy(unionfs_filldir_cachep);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#109: FILE: fs/unionfs/rdstate.c:67:
+		if (!(hidden_inode = unionfs_lower_inode_idx(inode, bindex)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: fs/unionfs/rdstate.c:81:
+	BUG_ON(sizeof(loff_t) != (sizeof(unsigned int) + sizeof(unsigned int)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: fs/unionfs/rdstate.c:82:
+	BUG_ON(UNIONFS_F(file)->rdstate != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdstate"
#124: FILE: fs/unionfs/rdstate.c:82:
+	BUG_ON(UNIONFS_F(file)->rdstate != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: fs/unionfs/rdstate.c:86:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around state->list[i]
#214: FILE: fs/unionfs/rdstate.c:172:
+		struct list_head *head = &(state->list[i]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: fs/unionfs/rdstate.c:196:
+	BUG_ON(namelen <= 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdstate->list[index]
#243: FILE: fs/unionfs/rdstate.c:201:
+	head = &(rdstate->list[index]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#250: FILE: fs/unionfs/rdstate.c:208:
+			 * entry to the list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: fs/unionfs/rdstate.c:212:
+			 * system is corrupted. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#256: FILE: fs/unionfs/rdstate.c:214:
+				printk(KERN_DEBUG "Possible I/O error "

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: fs/unionfs/rdstate.c:215:
+				printk(KERN_DEBUG "Possible I/O error "
+					"unionfs_filldir: a file is duplicated "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#258: FILE: fs/unionfs/rdstate.c:216:
+					"unionfs_filldir: a file is duplicated "
+					"in the same branch %d: %s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: fs/unionfs/rdstate.c:244:
+	BUG_ON(namelen <= 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdstate->list[index]
#290: FILE: fs/unionfs/rdstate.c:248:
+	head = &(rdstate->list[index]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#304: FILE: fs/unionfs/rdstate.c:262:
+	if (namelen < DNAME_INLINE_LEN_MIN)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: fs/unionfs/rdstate.c:264:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new->file_list
#320: FILE: fs/unionfs/rdstate.c:278:
+	list_add(&(new->file_list), head);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 7 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
