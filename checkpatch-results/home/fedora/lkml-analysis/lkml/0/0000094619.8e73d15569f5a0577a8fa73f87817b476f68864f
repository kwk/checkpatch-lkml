WARNING:TYPO_SPELLING: 'arbitary' may be misspelled - perhaps 'arbitrary'?
#25: 
is fairly arbitary and due to the message length limit on the list.
          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#40: FILE: drivers/char/rio/cmdblk.h:51:
+	int (*PreFuncP) (unsigned long, struct CmdBlk *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PreFuncP>
#40: FILE: drivers/char/rio/cmdblk.h:51:
+	int (*PreFuncP) (unsigned long, struct CmdBlk *);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlk>
#40: FILE: drivers/char/rio/cmdblk.h:51:
+	int (*PreFuncP) (unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#40: FILE: drivers/char/rio/cmdblk.h:51:
+	int (*PreFuncP) (unsigned long, struct CmdBlk *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#40: FILE: drivers/char/rio/cmdblk.h:51:
+	int (*PreFuncP) (unsigned long, struct CmdBlk *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#44: FILE: drivers/char/rio/cmdblk.h:54:
+	int (*PostFuncP) (unsigned long, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <PostFuncP>
#44: FILE: drivers/char/rio/cmdblk.h:54:
+	int (*PostFuncP) (unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#44: FILE: drivers/char/rio/cmdblk.h:54:
+	int (*PostFuncP) (unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#44: FILE: drivers/char/rio/cmdblk.h:54:
+	int (*PostFuncP) (unsigned long, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeHOST>
#56: FILE: drivers/char/rio/func.h:46:
+int RIOBootCodeHOST(struct rio_info *, struct DownLoad *);

CHECK:CAMELCASE: Avoid CamelCase: <DownLoad>
#56: FILE: drivers/char/rio/func.h:46:
+int RIOBootCodeHOST(struct rio_info *, struct DownLoad *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#56: FILE: drivers/char/rio/func.h:46:
+int RIOBootCodeHOST(struct rio_info *, struct DownLoad *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct DownLoad *' should also have an identifier name
#56: FILE: drivers/char/rio/func.h:46:
+int RIOBootCodeHOST(struct rio_info *, struct DownLoad *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootRup>
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct PKT *' should also have an identifier name
#63: FILE: drivers/char/rio/func.h:49:
+int RIOBootRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootOk>
#64: FILE: drivers/char/rio/func.h:50:
+int RIOBootOk(struct rio_info *, struct Host *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#64: FILE: drivers/char/rio/func.h:50:
+int RIOBootOk(struct rio_info *, struct Host *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#64: FILE: drivers/char/rio/func.h:50:
+int RIOBootOk(struct rio_info *, struct Host *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#64: FILE: drivers/char/rio/func.h:50:
+int RIOBootOk(struct rio_info *, struct Host *, unsigned long);

CHECK:CAMELCASE: Avoid CamelCase: <RIORtaBound>
#65: FILE: drivers/char/rio/func.h:51:
+int RIORtaBound(struct rio_info *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#65: FILE: drivers/char/rio/func.h:51:
+int RIORtaBound(struct rio_info *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#65: FILE: drivers/char/rio/func.h:51:
+int RIORtaBound(struct rio_info *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <FillSlot>
#66: FILE: drivers/char/rio/func.h:52:
+void FillSlot(int, int, unsigned int, struct Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#66: FILE: drivers/char/rio/func.h:52:
+void FillSlot(int, int, unsigned int, struct Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#66: FILE: drivers/char/rio/func.h:52:
+void FillSlot(int, int, unsigned int, struct Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#66: FILE: drivers/char/rio/func.h:52:
+void FillSlot(int, int, unsigned int, struct Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#66: FILE: drivers/char/rio/func.h:52:
+void FillSlot(int, int, unsigned int, struct Host *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOCommandRta>
#74: FILE: drivers/char/rio/func.h:57:
+int RIOCommandRta(struct rio_info *, unsigned long, int (*func) (struct Host *, struct Map *));

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#74: FILE: drivers/char/rio/func.h:57:
+int RIOCommandRta(struct rio_info *, unsigned long, int (*func) (struct Host *, struct Map *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#74: FILE: drivers/char/rio/func.h:57:
+int RIOCommandRta(struct rio_info *, unsigned long, int (*func) (struct Host *, struct Map *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#74: FILE: drivers/char/rio/func.h:57:
+int RIOCommandRta(struct rio_info *, unsigned long, int (*func) (struct Host *, struct Map *));

CHECK:CAMELCASE: Avoid CamelCase: <RIOIdentifyRta>
#75: FILE: drivers/char/rio/func.h:58:
+int RIOIdentifyRta(struct rio_info *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#75: FILE: drivers/char/rio/func.h:58:
+int RIOIdentifyRta(struct rio_info *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#75: FILE: drivers/char/rio/func.h:58:
+int RIOIdentifyRta(struct rio_info *, void *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOKillNeighbour>
#76: FILE: drivers/char/rio/func.h:59:
+int RIOKillNeighbour(struct rio_info *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#76: FILE: drivers/char/rio/func.h:59:
+int RIOKillNeighbour(struct rio_info *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#76: FILE: drivers/char/rio/func.h:59:
+int RIOKillNeighbour(struct rio_info *, void *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOQueueCmdBlk>
#82: FILE: drivers/char/rio/func.h:64:
+int RIOQueueCmdBlk(struct Host *, unsigned int, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#82: FILE: drivers/char/rio/func.h:64:
+int RIOQueueCmdBlk(struct Host *, unsigned int, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#82: FILE: drivers/char/rio/func.h:64:
+int RIOQueueCmdBlk(struct Host *, unsigned int, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#82: FILE: drivers/char/rio/func.h:64:
+int RIOQueueCmdBlk(struct Host *, unsigned int, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOWFlushMark>
#88: FILE: drivers/char/rio/func.h:66:
+int RIOWFlushMark(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#88: FILE: drivers/char/rio/func.h:66:
+int RIOWFlushMark(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#88: FILE: drivers/char/rio/func.h:66:
+int RIOWFlushMark(unsigned long, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <RIORFlushEnable>
#89: FILE: drivers/char/rio/func.h:67:
+int RIORFlushEnable(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#89: FILE: drivers/char/rio/func.h:67:
+int RIORFlushEnable(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#89: FILE: drivers/char/rio/func.h:67:
+int RIORFlushEnable(unsigned long, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOUnUse>
#90: FILE: drivers/char/rio/func.h:68:
+int RIOUnUse(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#90: FILE: drivers/char/rio/func.h:68:
+int RIOUnUse(unsigned long, struct CmdBlk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct CmdBlk *' should also have an identifier name
#90: FILE: drivers/char/rio/func.h:68:
+int RIOUnUse(unsigned long, struct CmdBlk *);

CHECK:CAMELCASE: Avoid CamelCase: <ShowPacket>
#91: FILE: drivers/char/rio/func.h:69:
+void ShowPacket(unsigned int, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#91: FILE: drivers/char/rio/func.h:69:
+void ShowPacket(unsigned int, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct PKT *' should also have an identifier name
#91: FILE: drivers/char/rio/func.h:69:
+void ShowPacket(unsigned int, struct PKT *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#97: FILE: drivers/char/rio/func.h:73:
+int RIOPreemptiveCmd(struct rio_info *, struct Port *, unsigned char);

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#97: FILE: drivers/char/rio/func.h:73:
+int RIOPreemptiveCmd(struct rio_info *, struct Port *, unsigned char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#97: FILE: drivers/char/rio/func.h:73:
+int RIOPreemptiveCmd(struct rio_info *, struct Port *, unsigned char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Port *' should also have an identifier name
#97: FILE: drivers/char/rio/func.h:73:
+int RIOPreemptiveCmd(struct rio_info *, struct Port *, unsigned char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#97: FILE: drivers/char/rio/func.h:73:
+int RIOPreemptiveCmd(struct rio_info *, struct Port *, unsigned char);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBoardTest>
#106: FILE: drivers/char/rio/func.h:82:
+int RIOBoardTest(paddr_t, caddr_t, unsigned char, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'paddr_t' should also have an identifier name
#106: FILE: drivers/char/rio/func.h:82:
+int RIOBoardTest(paddr_t, caddr_t, unsigned char, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'caddr_t' should also have an identifier name
#106: FILE: drivers/char/rio/func.h:82:
+int RIOBoardTest(paddr_t, caddr_t, unsigned char, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#106: FILE: drivers/char/rio/func.h:82:
+int RIOBoardTest(paddr_t, caddr_t, unsigned char, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#106: FILE: drivers/char/rio/func.h:82:
+int RIOBoardTest(paddr_t, caddr_t, unsigned char, int);

CHECK:CAMELCASE: Avoid CamelCase: <RIODefaultName>
#110: FILE: drivers/char/rio/func.h:85:
+int RIODefaultName(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#110: FILE: drivers/char/rio/func.h:85:
+int RIODefaultName(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#110: FILE: drivers/char/rio/func.h:85:
+int RIODefaultName(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#110: FILE: drivers/char/rio/func.h:85:
+int RIODefaultName(struct rio_info *, struct Host *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHostReset>
#115: FILE: drivers/char/rio/func.h:89:
+void RIOHostReset(unsigned int, struct DpRam *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#115: FILE: drivers/char/rio/func.h:89:
+void RIOHostReset(unsigned int, struct DpRam *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#115: FILE: drivers/char/rio/func.h:89:
+void RIOHostReset(unsigned int, struct DpRam *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct DpRam *' should also have an identifier name
#115: FILE: drivers/char/rio/func.h:89:
+void RIOHostReset(unsigned int, struct DpRam *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#115: FILE: drivers/char/rio/func.h:89:
+void RIOHostReset(unsigned int, struct DpRam *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#121: FILE: drivers/char/rio/func.h:94:
+int riotproc(struct rio_info *, struct ttystatics *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttystatics *' should also have an identifier name
#121: FILE: drivers/char/rio/func.h:94:
+int riotproc(struct rio_info *, struct ttystatics *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#121: FILE: drivers/char/rio/func.h:94:
+int riotproc(struct rio_info *, struct ttystatics *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#121: FILE: drivers/char/rio/func.h:94:
+int riotproc(struct rio_info *, struct ttystatics *, int, int);

CHECK:CAMELCASE: Avoid CamelCase: <RIORouteRup>
#132: FILE: drivers/char/rio/func.h:108:
+int RIORouteRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#132: FILE: drivers/char/rio/func.h:108:
+int RIORouteRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#132: FILE: drivers/char/rio/func.h:108:
+int RIORouteRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#132: FILE: drivers/char/rio/func.h:108:
+int RIORouteRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct PKT *' should also have an identifier name
#132: FILE: drivers/char/rio/func.h:108:
+int RIORouteRup(struct rio_info *, unsigned int, struct Host *, struct PKT *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOFixPhbs>
#133: FILE: drivers/char/rio/func.h:109:
+void RIOFixPhbs(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#133: FILE: drivers/char/rio/func.h:109:
+void RIOFixPhbs(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#133: FILE: drivers/char/rio/func.h:109:
+void RIOFixPhbs(struct rio_info *, struct Host *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#133: FILE: drivers/char/rio/func.h:109:
+void RIOFixPhbs(struct rio_info *, struct Host *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <GetUnitType>
#134: FILE: drivers/char/rio/func.h:110:
+unsigned int GetUnitType(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#134: FILE: drivers/char/rio/func.h:110:
+unsigned int GetUnitType(unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOFindFreeID>
#137: FILE: drivers/char/rio/func.h:112:
+int RIOFindFreeID(struct rio_info *, struct Host *, unsigned int *, unsigned int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#137: FILE: drivers/char/rio/func.h:112:
+int RIOFindFreeID(struct rio_info *, struct Host *, unsigned int *, unsigned int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Host *' should also have an identifier name
#137: FILE: drivers/char/rio/func.h:112:
+int RIOFindFreeID(struct rio_info *, struct Host *, unsigned int *, unsigned int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int *' should also have an identifier name
#137: FILE: drivers/char/rio/func.h:112:
+int RIOFindFreeID(struct rio_info *, struct Host *, unsigned int *, unsigned int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int *' should also have an identifier name
#137: FILE: drivers/char/rio/func.h:112:
+int RIOFindFreeID(struct rio_info *, struct Host *, unsigned int *, unsigned int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#145: FILE: drivers/char/rio/func.h:119:
+int riotioctl(struct rio_info *, struct tty_struct *, int, caddr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tty_struct *' should also have an identifier name
#145: FILE: drivers/char/rio/func.h:119:
+int riotioctl(struct rio_info *, struct tty_struct *, int, caddr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#145: FILE: drivers/char/rio/func.h:119:
+int riotioctl(struct rio_info *, struct tty_struct *, int, caddr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'caddr_t' should also have an identifier name
#145: FILE: drivers/char/rio/func.h:119:
+int riotioctl(struct rio_info *, struct tty_struct *, int, caddr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_info *' should also have an identifier name
#154: FILE: drivers/char/rio/func.h:133:
+int rio_uninstall(struct rio_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: drivers/char/rio/func.h:145:
+extern void rio_copy_to_card(void *to, void *from, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#174: FILE: drivers/char/rio/riocmd.c:45:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))
                                                                                                               ^^^^

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

CHECK:CAMELCASE: Avoid CamelCase: <RtaUnique>
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#183: FILE: drivers/char/rio/riocmd.c:147:
+int RIOCommandRta(struct rio_info *p, unsigned long RtaUnique, int (*func) (struct Host * HostP, struct Map * MapP))

CHECK:CAMELCASE: Avoid CamelCase: <Rta>
#196: FILE: drivers/char/rio/riocmd.c:157:
+		unsigned int Rta;

CHECK:SPACING: No space is necessary after a cast
#205: FILE: drivers/char/rio/riocmd.c:174:
+					if (MapP->Topology[Link].Unit <= (u8) MAX_RUP) {

CHECK:CAMELCASE: Avoid CamelCase: <Topology>
#205: FILE: drivers/char/rio/riocmd.c:174:
+					if (MapP->Topology[Link].Unit <= (u8) MAX_RUP) {

CHECK:CAMELCASE: Avoid CamelCase: <Link>
#205: FILE: drivers/char/rio/riocmd.c:174:
+					if (MapP->Topology[Link].Unit <= (u8) MAX_RUP) {

CHECK:CAMELCASE: Avoid CamelCase: <Unit>
#205: FILE: drivers/char/rio/riocmd.c:174:
+					if (MapP->Topology[Link].Unit <= (u8) MAX_RUP) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#214: FILE: drivers/char/rio/riocmd.c:188:
+int RIOIdentifyRta(struct rio_info *p, void * arg)

CHECK:CAMELCASE: Avoid CamelCase: <IdRta>
#220: FILE: drivers/char/rio/riocmd.c:192:
+	if (copy_from_user(&IdRta, arg, sizeof(IdRta))) {

CHECK:SPACING: No space is necessary after a cast
#237: FILE: drivers/char/rio/riocmd.c:215:
+					if (MapP->Topology[Link].Unit <= (u8) MAX_RUP) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: drivers/char/rio/riocmd.c:253:
+int RIOKillNeighbour(struct rio_info *p, void * arg)

CHECK:CAMELCASE: Avoid CamelCase: <KillUnit>
#255: FILE: drivers/char/rio/riocmd.c:262:
+	if (copy_from_user(&KillUnit, arg, sizeof(KillUnit))) {

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#264: FILE: drivers/char/rio/riocmd.c:348:
+	struct Port *PortP;

CHECK:CAMELCASE: Avoid CamelCase: <SysPort>
#276: FILE: drivers/char/rio/riocmd.c:383:
+	unsigned short SysPort;

CHECK:CAMELCASE: Avoid CamelCase: <ReportedModemStatus>
#277: FILE: drivers/char/rio/riocmd.c:384:
+	unsigned short ReportedModemStatus;

CHECK:CAMELCASE: Avoid CamelCase: <subCommand>
#279: FILE: drivers/char/rio/riocmd.c:386:
+	unsigned short subCommand;

CHECK:SPACING: No space is necessary after a cast
#288: FILE: drivers/char/rio/riocmd.c:399:
+	rup = readb(&PktCmdP->PhbNum) / (unsigned short) PORTS_PER_RTA;

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#288: FILE: drivers/char/rio/riocmd.c:399:
+	rup = readb(&PktCmdP->PhbNum) / (unsigned short) PORTS_PER_RTA;

CHECK:CAMELCASE: Avoid CamelCase: <PhbNum>
#288: FILE: drivers/char/rio/riocmd.c:399:
+	rup = readb(&PktCmdP->PhbNum) / (unsigned short) PORTS_PER_RTA;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#291: FILE: drivers/char/rio/riocmd.c:401:
+	SysPort = UnixRupP->BaseSysPort + (readb(&PktCmdP->PhbNum) % (unsigned short) PORTS_PER_RTA);

CHECK:SPACING: No space is necessary after a cast
#291: FILE: drivers/char/rio/riocmd.c:401:
+	SysPort = UnixRupP->BaseSysPort + (readb(&PktCmdP->PhbNum) % (unsigned short) PORTS_PER_RTA);

CHECK:CAMELCASE: Avoid CamelCase: <UnixRupP>
#291: FILE: drivers/char/rio/riocmd.c:401:
+	SysPort = UnixRupP->BaseSysPort + (readb(&PktCmdP->PhbNum) % (unsigned short) PORTS_PER_RTA);

CHECK:CAMELCASE: Avoid CamelCase: <BaseSysPort>
#291: FILE: drivers/char/rio/riocmd.c:401:
+	SysPort = UnixRupP->BaseSysPort + (readb(&PktCmdP->PhbNum) % (unsigned short) PORTS_PER_RTA);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#298: FILE: drivers/char/rio/riocmd.c:407:
+		rio_dprintk(RIO_DEBUG_CMD, "CONTROL information: Host number %Zd, name ``%s''\n", HostP - p->RIOHosts, HostP->Name);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#298: FILE: drivers/char/rio/riocmd.c:407:
+		rio_dprintk(RIO_DEBUG_CMD, "CONTROL information: Host number %Zd, name ``%s''\n", HostP - p->RIOHosts, HostP->Name);

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#298: FILE: drivers/char/rio/riocmd.c:407:
+		rio_dprintk(RIO_DEBUG_CMD, "CONTROL information: Host number %Zd, name ``%s''\n", HostP - p->RIOHosts, HostP->Name);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#298: FILE: drivers/char/rio/riocmd.c:407:
+		rio_dprintk(RIO_DEBUG_CMD, "CONTROL information: Host number %Zd, name ``%s''\n", HostP - p->RIOHosts, HostP->Name);

CHECK:SPACING: No space is necessary after a cast
#302: FILE: drivers/char/rio/riocmd.c:410:
+		if (Rup >= (unsigned short) MAX_RUP) {

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#302: FILE: drivers/char/rio/riocmd.c:410:
+		if (Rup >= (unsigned short) MAX_RUP) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#302: FILE: drivers/char/rio/riocmd.c:410:
+		if (Rup >= (unsigned short) MAX_RUP) {
[...]
 		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#311: FILE: drivers/char/rio/riocmd.c:425:
+	switch (readb(&PktCmdP->Command)) {

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#320: FILE: drivers/char/rio/riocmd.c:438:
+		rio_dprintk(RIO_DEBUG_CMD, "Command complete on phb %d host %Zd\n", readb(&PktCmdP->PhbNum), HostP - p->RIOHosts);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#320: FILE: drivers/char/rio/riocmd.c:438:
+		rio_dprintk(RIO_DEBUG_CMD, "Command complete on phb %d host %Zd\n", readb(&PktCmdP->PhbNum), HostP - p->RIOHosts);

CHECK:CAMELCASE: Avoid CamelCase: <SubCommand>
#323: FILE: drivers/char/rio/riocmd.c:440:
+		switch (readb(&PktCmdP->SubCommand)) {

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#326: FILE: drivers/char/rio/riocmd.c:442:
+			rio_dprintk(RIO_DEBUG_CMD, "Memory dump cmd (0x%x) from addr 0x%x\n", readb(&PktCmdP->SubCommand), readw(&PktCmdP->SubAddr));

CHECK:CAMELCASE: Avoid CamelCase: <SubAddr>
#326: FILE: drivers/char/rio/riocmd.c:442:
+			rio_dprintk(RIO_DEBUG_CMD, "Memory dump cmd (0x%x) from addr 0x%x\n", readb(&PktCmdP->SubCommand), readw(&PktCmdP->SubAddr));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#331: FILE: drivers/char/rio/riocmd.c:445:
+			rio_dprintk(RIO_DEBUG_CMD, "Read register (0x%x)\n", readw(&PktCmdP->SubAddr));

CHECK:CAMELCASE: Avoid CamelCase: <CdRegister>
#332: FILE: drivers/char/rio/riocmd.c:446:
+			p->CdRegister = (readb(&PktCmdP->ModemStatus) & MSVR1_HOST);

CHECK:CAMELCASE: Avoid CamelCase: <ModemStatus>
#332: FILE: drivers/char/rio/riocmd.c:446:
+			p->CdRegister = (readb(&PktCmdP->ModemStatus) & MSVR1_HOST);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#342: FILE: drivers/char/rio/riocmd.c:454:
+		rio_dprintk(RIO_DEBUG_CMD, "New status is 0x%x was 0x%x\n", readb(&PktCmdP->PortStatus), PortP->PortState);

CHECK:CAMELCASE: Avoid CamelCase: <PortStatus>
#342: FILE: drivers/char/rio/riocmd.c:454:
+		rio_dprintk(RIO_DEBUG_CMD, "New status is 0x%x was 0x%x\n", readb(&PktCmdP->PortStatus), PortP->PortState);

CHECK:CAMELCASE: Avoid CamelCase: <PortState>
#342: FILE: drivers/char/rio/riocmd.c:454:
+		rio_dprintk(RIO_DEBUG_CMD, "New status is 0x%x was 0x%x\n", readb(&PktCmdP->PortStatus), PortP->PortState);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#384: FILE: drivers/char/rio/riocmd.c:537:
+		rio_dprintk(RIO_DEBUG_CMD, "Unknown command %d on CMD_RUP of host %Zd\n", readb(&PktCmdP->Command), HostP - p->RIOHosts);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#384: FILE: drivers/char/rio/riocmd.c:537:
+		rio_dprintk(RIO_DEBUG_CMD, "Unknown command %d on CMD_RUP of host %Zd\n", readb(&PktCmdP->Command), HostP - p->RIOHosts);

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#393: FILE: drivers/char/rio/riocmd.c:564:
+	CmdBlkP = (struct CmdBlk *)kmalloc(sizeof(struct CmdBlk), GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#393: FILE: drivers/char/rio/riocmd.c:564:
+	CmdBlkP = (struct CmdBlk *)kmalloc(sizeof(struct CmdBlk), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*CmdBlkP)...) over kmalloc(sizeof(struct CmdBlk)...)
#393: FILE: drivers/char/rio/riocmd.c:564:
+	CmdBlkP = (struct CmdBlk *)kmalloc(sizeof(struct CmdBlk), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#415: FILE: drivers/char/rio/riocmd.c:588:
+	if (Rup >= (unsigned short) (MAX_RUP + LINKS_PER_UNIT)) {

WARNING:LONG_LINE: line length of 209 exceeds 100 columns
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'UnixRupP->CmdsWaitingP == NULL'
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)
 																	     : TRUE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'UnixRupP->CmdPendingP == NULL'
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)
 																	     : TRUE)) {

CHECK:CAMELCASE: Avoid CamelCase: <CmdsWaitingP>
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <CmdPendingP>
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <PreArg>
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UnixRupP->CmdsWaitingP"
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UnixRupP->CmdPendingP"
#424: FILE: drivers/char/rio/riocmd.c:602:
+	if ((UnixRupP->CmdsWaitingP == NULL) && (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE) && (CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <Base>
#448: FILE: drivers/char/rio/riocmd.c:636:
+	rio_dprintk(RIO_DEBUG_CMD, "First try to queue cmdblk 0x%p at 0x%p\n", CmdBlkP, Base);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#455: FILE: drivers/char/rio/riocmd.c:641:
+		rio_dprintk(RIO_DEBUG_CMD, "Now try to queue cmd cmdblk 0x%p at 0x%p\n", CmdBlkP, Base);

CHECK:CAMELCASE: Avoid CamelCase: <UnixRup>
#470: FILE: drivers/char/rio/riocmd.c:662:
+	struct UnixRup *UnixRupP;

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#486: FILE: drivers/char/rio/riocmd.c:684:
+			PacketP = (PKT *) RIO_PTR(HostP->Caddr, readw(&UnixRupP->RupP->rxpkt));

CHECK:CAMELCASE: Avoid CamelCase: <Caddr>
#486: FILE: drivers/char/rio/riocmd.c:684:
+			PacketP = (PKT *) RIO_PTR(HostP->Caddr, readw(&UnixRupP->RupP->rxpkt));

WARNING:LONG_LINE: line length of 169 exceeds 100 columns
#494: FILE: drivers/char/rio/riocmd.c:690:
+				rio_dprintk(RIO_DEBUG_CMD, "Incoming Boot %s packet '%x'\n", readb(&PacketP->len) & 0x80 ? "Command" : "Data", readb(&PacketP->data[0]));

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#503: FILE: drivers/char/rio/riocmd.c:705:
+					rio_dprintk(RIO_DEBUG_CMD, "Memdump from 0x%x complete\n", *(unsigned short *) & (PacketP->data[6]));

CHECK:SPACING: No space is necessary after a cast
#503: FILE: drivers/char/rio/riocmd.c:705:
+					rio_dprintk(RIO_DEBUG_CMD, "Memdump from 0x%x complete\n", *(unsigned short *) & (PacketP->data[6]));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#503: FILE: drivers/char/rio/riocmd.c:705:
+					rio_dprintk(RIO_DEBUG_CMD, "Memdump from 0x%x complete\n", *(unsigned short *) & (PacketP->data[6]));
 					                                                                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around PacketP->data[6]
#503: FILE: drivers/char/rio/riocmd.c:705:
+					rio_dprintk(RIO_DEBUG_CMD, "Memdump from 0x%x complete\n", *(unsigned short *) & (PacketP->data[6]));

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#512: FILE: drivers/char/rio/riocmd.c:718:
+				rio_dprintk(RIO_DEBUG_CMD, "Unknown RUP %d\n", readb(&PacketP->dest_port));

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#527: FILE: drivers/char/rio/riocmd.c:731:
+					writew(PHB_HANDSHAKE_SET | PHB_HANDSHAKE_RESET, &UnixRupP->RupP->handshake);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#554: FILE: drivers/char/rio/riocmd.c:779:
+		    (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UnixRupP->CmdPendingP"
#554: FILE: drivers/char/rio/riocmd.c:779:
+		    (UnixRupP->CmdPendingP == NULL) && (readw(&UnixRupP->RupP->txcontrol) == TX_RUP_INACTIVE)) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#562: FILE: drivers/char/rio/riocmd.c:786:
+				rio_dprintk(RIO_DEBUG_CMD, "Not ready to start command 0x%p\n", CmdBlkP);

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#565: FILE: drivers/char/rio/riocmd.c:788:
+				rio_dprintk(RIO_DEBUG_CMD, "Start new command 0x%p Cmd byte is 0x%x\n", CmdBlkP, CmdBlkP->Packet.data[0]);

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#565: FILE: drivers/char/rio/riocmd.c:788:
+				rio_dprintk(RIO_DEBUG_CMD, "Start new command 0x%p Cmd byte is 0x%x\n", CmdBlkP, CmdBlkP->Packet.data[0]);

CHECK:CAMELCASE: Avoid CamelCase: <iPortP>
#583: FILE: drivers/char/rio/riocmd.c:819:
+int RIOWFlushMark(unsigned long iPortP, struct CmdBlk *CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <PhbP>
#601: FILE: drivers/char/rio/riocmd.c:845:
+	if (readw(&PortP->PhbP->handshake) == PHB_HANDSHAKE_SET) {

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#624: FILE: drivers/char/rio/riocmd.c:887:
+	writew(1, &PortP->HostP->ParmMapP->tx_intr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: drivers/char/rio/rio.h:189:
+#define	RIO_PTR(C,O) (((unsigned char *)(C))+(0xFFFF&(O)))
        	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#637: FILE: drivers/char/rio/rio.h:189:
+#define	RIO_PTR(C,O) (((unsigned char *)(C))+(0xFFFF&(O)))
        	                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#637: FILE: drivers/char/rio/rio.h:189:
+#define	RIO_PTR(C,O) (((unsigned char *)(C))+(0xFFFF&(O)))
        	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/char/rio/rio.h:190:
+#define	RIO_OFF(C,O) ((long)(O)-(long)(C))
        	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#638: FILE: drivers/char/rio/rio.h:190:
+#define	RIO_OFF(C,O) ((long)(O)-(long)(C))
        	                       ^

CHECK:CAMELCASE: Avoid CamelCase: <RIOAssignAT>
#666: FILE: drivers/char/rio/rioinit.c:100:
+int RIOAssignAT(struct rio_info *p, int	Base, caddr_t	virtAddr, int mode)

CHECK:CAMELCASE: Avoid CamelCase: <virtAddr>
#666: FILE: drivers/char/rio/rioinit.c:100:
+int RIOAssignAT(struct rio_info *p, int	Base, caddr_t	virtAddr, int mode)

CHECK:CAMELCASE: Avoid CamelCase: <DpRevision>
#675: FILE: drivers/char/rio/rioinit.c:120:
+	if (readb(&cardp->DpRevision) == 01)

CHECK:CAMELCASE: Avoid CamelCase: <RIONumHosts>
#680: FILE: drivers/char/rio/rioinit.c:124:
+	p->RIOHosts[p->RIONumHosts].Copy = rio_copy_to_card;

CHECK:CAMELCASE: Avoid CamelCase: <Copy>
#680: FILE: drivers/char/rio/rioinit.c:124:
+	p->RIOHosts[p->RIONumHosts].Copy = rio_copy_to_card;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: drivers/char/rio/rioinit.c:128:
+^Iwriteb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#694: FILE: drivers/char/rio/rioinit.c:128:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#694: FILE: drivers/char/rio/rioinit.c:128:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 
 	                                                                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#694: FILE: drivers/char/rio/rioinit.c:128:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: drivers/char/rio/rioinit.c:129:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 
+		&p->RIOHosts[p->RIONumHosts].Control);

CHECK:CAMELCASE: Avoid CamelCase: <Control>
#695: FILE: drivers/char/rio/rioinit.c:129:
+		&p->RIOHosts[p->RIONumHosts].Control);

CHECK:CAMELCASE: Avoid CamelCase: <ResetInt>
#696: FILE: drivers/char/rio/rioinit.c:130:
+	writeb(0xFF, &p->RIOHosts[p->RIONumHosts].ResetInt);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#697: FILE: drivers/char/rio/rioinit.c:131:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: drivers/char/rio/rioinit.c:132:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE,
+		&p->RIOHosts[p->RIONumHosts].Control);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#705: FILE: drivers/char/rio/rioinit.c:135:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[0])&0xFF)<<0)|
 		                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#705: FILE: drivers/char/rio/rioinit.c:135:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[0])&0xFF)<<0)|
 		                                                     ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#705: FILE: drivers/char/rio/rioinit.c:135:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[0])&0xFF)<<0)|
 		                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <Unique>
#705: FILE: drivers/char/rio/rioinit.c:135:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[0])&0xFF)<<0)|

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#706: FILE: drivers/char/rio/rioinit.c:136:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[1])&0xFF)<<8)|
 		                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#706: FILE: drivers/char/rio/rioinit.c:136:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[1])&0xFF)<<8)|
 		                                                     ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#706: FILE: drivers/char/rio/rioinit.c:136:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[1])&0xFF)<<8)|
 		                                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#707: FILE: drivers/char/rio/rioinit.c:137:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[2])&0xFF)<<16)|
 		                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: drivers/char/rio/rioinit.c:137:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[2])&0xFF)<<16)|
 		                                                     ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#707: FILE: drivers/char/rio/rioinit.c:137:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[2])&0xFF)<<16)|
 		                                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#708: FILE: drivers/char/rio/rioinit.c:138:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[3])&0xFF)<<24);
 		                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#708: FILE: drivers/char/rio/rioinit.c:138:
+		((readb(&p->RIOHosts[p->RIONumHosts].Unique[3])&0xFF)<<24);
 		                                                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: drivers/char/rio/rioinit.c:167:
+	rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Reset host type=%d, DpRam=0x%p, slot=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: drivers/char/rio/rioinit.c:168:
+	rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Reset host type=%d, DpRam=0x%p, slot=%d\n",
+			type, DpRam, slot);

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#752: FILE: drivers/char/rio/rioinit.c:196:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Memory: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#752: FILE: drivers/char/rio/rioinit.c:196:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Memory: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: drivers/char/rio/rioinit.c:197:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Memory: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",
+				ram[0], size[0], ram[1], size[1], ram[2], size[2]);

WARNING:LONG_LINE_STRING: line length of 106 exceeds 100 columns
#758: FILE: drivers/char/rio/rioinit.c:199:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#758: FILE: drivers/char/rio/rioinit.c:199:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: drivers/char/rio/rioinit.c:200:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x), 0x%p(0x%x)\n",
+				ram[0], size[0], ram[1], size[1], ram[2], size[2], ram[3], size[3]);

CHECK:CAMELCASE: Avoid CamelCase: <RIOScrub>
#773: FILE: drivers/char/rio/rioinit.c:235:
+static int RIOScrub(int op, BYTE *ram, int size)

WARNING:LONG_LINE: line length of 174 exceeds 100 columns
#787: FILE: drivers/char/rio/rioinit.c:263:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Pre Check 1: BYTE at offset 0x%x should have been=%x, was=%x\n", off, oldbyte, readb(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#787: FILE: drivers/char/rio/rioinit.c:263:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Pre Check 1: BYTE at offset 0x%x should have been=%x, was=%x\n", off, oldbyte, readb(ram + off));

WARNING:LONG_LINE: line length of 170 exceeds 100 columns
#796: FILE: drivers/char/rio/rioinit.c:269:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: WORD at offset 0x%x should have been=%x, was=%x\n",off,oldword, readw(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#796: FILE: drivers/char/rio/rioinit.c:269:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: WORD at offset 0x%x should have been=%x, was=%x\n",off,oldword, readw(ram + off));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: drivers/char/rio/rioinit.c:269:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: WORD at offset 0x%x should have been=%x, was=%x\n",off,oldword, readw(ram + off));
 				                                                                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: drivers/char/rio/rioinit.c:269:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: WORD at offset 0x%x should have been=%x, was=%x\n",off,oldword, readw(ram + off));
 				                                                                                                              ^

WARNING:LONG_LINE: line length of 192 exceeds 100 columns
#797: FILE: drivers/char/rio/rioinit.c:270:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#797: FILE: drivers/char/rio/rioinit.c:270:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#797: FILE: drivers/char/rio/rioinit.c:270:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 				                                                                                                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#797: FILE: drivers/char/rio/rioinit.c:270:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 				                                                                                                                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#797: FILE: drivers/char/rio/rioinit.c:270:
+				rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Pre Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 				                                                                                                                                                           ^

WARNING:LONG_LINE: line length of 166 exceeds 100 columns
#808: FILE: drivers/char/rio/rioinit.c:285:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Pre Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off, oldbyte, readb(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#808: FILE: drivers/char/rio/rioinit.c:285:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Pre Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off, oldbyte, readb(ram + off));

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#816: FILE: drivers/char/rio/rioinit.c:290:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Inv Check: BYTE at offset 0x%x should have been=%x, was=%x\n", off, invbyte, readb(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#816: FILE: drivers/char/rio/rioinit.c:290:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Byte Inv Check: BYTE at offset 0x%x should have been=%x, was=%x\n", off, invbyte, readb(ram + off));

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#828: FILE: drivers/char/rio/rioinit.c:304:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: WORD at offset 0x%x should have been=%x, was=%x\n", off, invword, readw(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#828: FILE: drivers/char/rio/rioinit.c:304:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: WORD at offset 0x%x should have been=%x, was=%x\n", off, invword, readw(ram + off));

WARNING:LONG_LINE: line length of 184 exceeds 100 columns
#829: FILE: drivers/char/rio/rioinit.c:305:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#829: FILE: drivers/char/rio/rioinit.c:305:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: drivers/char/rio/rioinit.c:305:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 			                                                                                                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: drivers/char/rio/rioinit.c:305:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 			                                                                                                                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: drivers/char/rio/rioinit.c:305:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Word Inv Check: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram+off+1));
 			                                                                                                                                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#838: FILE: drivers/char/rio/rioinit.c:310:
+		if ( readw(ram + off) != newword ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#838: FILE: drivers/char/rio/rioinit.c:310:
+		if ( readw(ram + off) != newword ) {

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#839: FILE: drivers/char/rio/rioinit.c:311:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 1: WORD at offset 0x%x should have been=%x, was=%x\n", off, newword, readw(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: drivers/char/rio/rioinit.c:311:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 1: WORD at offset 0x%x should have been=%x, was=%x\n", off, newword, readw(ram + off));

WARNING:LONG_LINE: line length of 191 exceeds 100 columns
#840: FILE: drivers/char/rio/rioinit.c:312:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#840: FILE: drivers/char/rio/rioinit.c:312:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#840: FILE: drivers/char/rio/rioinit.c:312:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));
 			                                                                                                                                             ^

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#851: FILE: drivers/char/rio/rioinit.c:324:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Byte Check: BYTE at offset 0x%x should have been=%x, was=%x\n", off, newbyte, readb(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#851: FILE: drivers/char/rio/rioinit.c:324:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Byte Check: BYTE at offset 0x%x should have been=%x, was=%x\n", off, newbyte, readb(ram + off));

ERROR:SPACING: space prohibited before that close parenthesis ')'
#860: FILE: drivers/char/rio/rioinit.c:330:
+		if (readw(ram + off) != newword ) {

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#861: FILE: drivers/char/rio/rioinit.c:331:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 2: WORD at offset 0x%x should have been=%x, was=%x\n", off, newword, readw(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#861: FILE: drivers/char/rio/rioinit.c:331:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 2: WORD at offset 0x%x should have been=%x, was=%x\n", off, newword, readw(ram + off));

WARNING:LONG_LINE: line length of 191 exceeds 100 columns
#862: FILE: drivers/char/rio/rioinit.c:332:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 2: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#862: FILE: drivers/char/rio/rioinit.c:332:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 2: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#862: FILE: drivers/char/rio/rioinit.c:332:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Post Word Check 2: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));
 			                                                                                                                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#873: FILE: drivers/char/rio/rioinit.c:344:
+		writeb(newbyte, &ram[off+1]);
 		                        ^

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#881: FILE: drivers/char/rio/rioinit.c:349:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 1: WORD at offset 0x%x should have been=%x, was=%x\n", off, swapword, readw(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: drivers/char/rio/rioinit.c:349:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 1: WORD at offset 0x%x should have been=%x, was=%x\n", off, swapword, readw(ram + off));

WARNING:LONG_LINE: line length of 190 exceeds 100 columns
#882: FILE: drivers/char/rio/rioinit.c:350:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: drivers/char/rio/rioinit.c:350:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#882: FILE: drivers/char/rio/rioinit.c:350:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 1: BYTE at offset 0x%x is %x BYTE at offset 0x%x is %x\n", off, readb(ram + off), off+1, readb(ram + off + 1));
 			                                                                                                                                            ^

WARNING:LONG_LINE: line length of 166 exceeds 100 columns
#893: FILE: drivers/char/rio/rioinit.c:358:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off, newbyte, readb(ram + off));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#893: FILE: drivers/char/rio/rioinit.c:358:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off, newbyte, readb(ram + off));

WARNING:LONG_LINE: line length of 172 exceeds 100 columns
#899: FILE: drivers/char/rio/rioinit.c:362:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off+1, invbyte, readb(ram + off + 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#899: FILE: drivers/char/rio/rioinit.c:362:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off+1, invbyte, readb(ram + off + 1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#899: FILE: drivers/char/rio/rioinit.c:362:
+			rio_dprintk (RIO_DEBUG_INIT, "RIO-init: SwapWord Check 2: BYTE at offset 0x%x should have been=%x, was=%x\n", off+1, invbyte, readb(ram + off + 1));
 			                                                                                                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <UnitId>
#914: FILE: drivers/char/rio/rioinit.c:371:
+int RIODefaultName(struct rio_info *p, struct Host *HostP, unsigned int	UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <Mapping>
#917: FILE: drivers/char/rio/rioinit.c:373:
+	memcpy(HostP->Mapping[UnitId].Name, "UNKNOWN RTA X-XX", 17);

CHECK:CAMELCASE: Avoid CamelCase: <rioVersion>
#927: FILE: drivers/char/rio/rioinit.c:391:
+struct rioVersion *RIOVersid(void)

CHECK:CAMELCASE: Avoid CamelCase: <RIOVersid>
#927: FILE: drivers/char/rio/rioinit.c:391:
+struct rioVersion *RIOVersid(void)

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#940: FILE: drivers/char/rio/rioinit.c:401:
+void RIOHostReset(unsigned int Type, struct DpRam *DpRamP, unsigned int Slot)

CHECK:CAMELCASE: Avoid CamelCase: <DpRamP>
#940: FILE: drivers/char/rio/rioinit.c:401:
+void RIOHostReset(unsigned int Type, struct DpRam *DpRamP, unsigned int Slot)

CHECK:CAMELCASE: Avoid CamelCase: <Slot>
#940: FILE: drivers/char/rio/rioinit.c:401:
+void RIOHostReset(unsigned int Type, struct DpRam *DpRamP, unsigned int Slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#956: FILE: drivers/char/rio/rioinit.c:409:
+		rio_dprintk (RIO_DEBUG_INIT, " (RIO_AT)\n");

CHECK:CAMELCASE: Avoid CamelCase: <DpControl>
#958: FILE: drivers/char/rio/rioinit.c:411:
+			SLOW_LINKS | SLOW_AT_BUS, &DpRamP->DpControl);

CHECK:CAMELCASE: Avoid CamelCase: <DpResetTpu>
#959: FILE: drivers/char/rio/rioinit.c:412:
+		writeb(0xFF, &DpRamP->DpResetTpu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: drivers/char/rio/rioinit.c:415:
+^I^Iwriteb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | INTERRUPT_DISABLE | $

CHECK:CAMELCASE: Avoid CamelCase: <DpResetInt>
#979: FILE: drivers/char/rio/rioinit.c:423:
+		writeb(0xFF, &DpRamP->DpResetInt);

CHECK:CAMELCASE: Avoid CamelCase: <RIOTxEnable>
#996: FILE: drivers/char/rio/riointr.c:104:
+void RIOTxEnable(char *en)

CHECK:CAMELCASE: Avoid CamelCase: <RIOServiceHost>
#1009: FILE: drivers/char/rio/riointr.c:189:
+void RIOServiceHost(struct rio_info *p, struct Host *HostP, int From)

CHECK:CAMELCASE: Avoid CamelCase: <From>
#1009: FILE: drivers/char/rio/riointr.c:189:
+void RIOServiceHost(struct rio_info *p, struct Host *HostP, int From)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1024: FILE: drivers/char/rio/riointr.c:205:
+		rio_dprintk(RIO_DEBUG_INTR, "rio: RUP interrupt on host %Zd\n", HostP - p->RIOHosts);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1024: FILE: drivers/char/rio/riointr.c:205:
+		rio_dprintk(RIO_DEBUG_INTR, "rio: RUP interrupt on host %Zd\n", HostP - p->RIOHosts);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1038: FILE: drivers/char/rio/riointr.c:216:
+		rio_dprintk(RIO_DEBUG_INTR, "rio: RX interrupt on host %Zd\n", HostP - p->RIOHosts);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1047: FILE: drivers/char/rio/riointr.c:277:
+			if (!can_remove_receive(&PacketP, PortP) && (readw(&PortP->PhbP->handshake) == PHB_HANDSHAKE_SET)) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1054: FILE: drivers/char/rio/riointr.c:283:
+				writew(PHB_HANDSHAKE_SET | PHB_HANDSHAKE_RESET, &PortP->PhbP->handshake);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1070: FILE: drivers/char/rio/riointr.c:296:
+		rio_dprintk(RIO_DEBUG_INTR, "rio: TX interrupt on host %Zd\n", HostP - p->RIOHosts);

CHECK:SPACING: No space is necessary after a cast
#1082: FILE: drivers/char/rio/riointr.c:447:
+					p = PortP->HostPort % (u16) PORTS_PER_RTA;

CHECK:CAMELCASE: Avoid CamelCase: <HostPort>
#1082: FILE: drivers/char/rio/riointr.c:447:
+					p = PortP->HostPort % (u16) PORTS_PER_RTA;

CHECK:CAMELCASE: Avoid CamelCase: <WflushFlag>
#1114: FILE: drivers/char/rio/riointr.c:468:
+					writeb('0' + PortP->WflushFlag, &PacketP->data[9]);

CHECK:CAMELCASE: Avoid CamelCase: <RIOReceive>
#1139: FILE: drivers/char/rio/riointr.c:531:
+static void RIOReceive(struct rio_info *p, struct Port *PortP)

CHECK:CAMELCASE: Avoid CamelCase: <transCount>
#1143: FILE: drivers/char/rio/riointr.c:534:
+	unsigned short transCount;

CHECK:CAMELCASE: Avoid CamelCase: <DataCnt>
#1147: FILE: drivers/char/rio/riointr.c:536:
+	register unsigned int DataCnt;

CHECK:SPACING: No space is necessary after a cast
#1171: FILE: drivers/char/rio/riointr.c:635:
+			ptr = (unsigned char *) PacketP->data + PortP->RxDataStart;

CHECK:CAMELCASE: Avoid CamelCase: <RxDataStart>
#1171: FILE: drivers/char/rio/riointr.c:635:
+			ptr = (unsigned char *) PacketP->data + PortP->RxDataStart;

CHECK:SPACING: No space is necessary after a cast
#1429: FILE: drivers/char/rio/rio_linux.c:300:
+		rio_dprintk(RIO_DEBUG_PARAM, "%08lx ", (unsigned long) addr + i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1502: FILE: drivers/char/rio/rio_linux.c:427:
+		printk(KERN_ERR "Recursive interrupt! (host %p/irq%d)\n", ptr, HostP->Ivec);

CHECK:CAMELCASE: Avoid CamelCase: <Ivec>
#1502: FILE: drivers/char/rio/rio_linux.c:427:
+		printk(KERN_ERR "Recursive interrupt! (host %p/irq%d)\n", ptr, HostP->Ivec);

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#1518: FILE: drivers/char/rio/rio_linux.c:856:
+	rio_dprintk(RIO_DEBUG_INIT, "getting : %Zd %Zd %Zd %Zd %Zd bytes\n", RI_SZ, RIO_HOSTS * HOST_SZ, RIO_PORTS * PORT_SZ, RIO_PORTS * TMIO_SZ, RIO_PORTS * TMIO_SZ);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1518: FILE: drivers/char/rio/rio_linux.c:856:
+	rio_dprintk(RIO_DEBUG_INIT, "getting : %Zd %Zd %Zd %Zd %Zd bytes\n", RI_SZ, RIO_HOSTS * HOST_SZ, RIO_PORTS * PORT_SZ, RIO_PORTS * TMIO_SZ, RIO_PORTS * TMIO_SZ);

WARNING:LONG_LINE: line length of 220 exceeds 100 columns
#1569: FILE: drivers/char/rio/rio_linux.c:1043:
+			    ((readb(&p->RIOHosts[p->RIONumHosts].Unique[1]) & 0xFF) << 8) | ((readb(&p->RIOHosts[p->RIONumHosts].Unique[2]) & 0xFF) << 16) | ((readb(&p->RIOHosts[p->RIONumHosts].Unique[3]) & 0xFF) << 24);

WARNING:LONG_LINE: line length of 220 exceeds 100 columns
#1592: FILE: drivers/char/rio/rio_linux.c:1095:
+			    ((readb(&p->RIOHosts[p->RIONumHosts].Unique[1]) & 0xFF) << 8) | ((readb(&p->RIOHosts[p->RIONumHosts].Unique[2]) & 0xFF) << 16) | ((readb(&p->RIOHosts[p->RIONumHosts].Unique[3]) & 0xFF) << 24);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1603: FILE: drivers/char/rio/rio_linux.c:1120:
+                                         * -- YES! this is now a normal copy. Only the$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1603: FILE: drivers/char/rio/rio_linux.c:1120:
+		hp->Copy = rio_copy_to_card;	/* AT card PCI???? - PVDL
+                                         * -- YES! this is now a normal copy. Only the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 149 warnings, 147 checks, 1260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
