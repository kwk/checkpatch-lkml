WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: include/linux/debug_locks.h:1:
+#ifndef __LINUX_DEBUG_LOCKING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/debug_locks.h:10:
+extern int debug_locks_off(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#138: FILE: include/linux/debug_locks.h:17:
+#define _RET_IP_		(unsigned long)__builtin_return_address(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/linux/debug_locks.h:39:
+  extern void locking_selftest(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/debug_locks.h:39:
+  extern void locking_selftest(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockname' may be better as '(lockname)' to avoid precedence issues
#233: FILE: include/linux/mutex-debug.h:10:
+#define __DEBUG_MUTEX_INITIALIZER(lockname)				\
+	, .magic = &lockname

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#237: FILE: include/linux/mutex-debug.h:13:
+#define mutex_init(sem)		__mutex_init(sem, __FILE__":"#sem)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: kernel/mutex-debug.c:45:
+	printk(" [%p] {%s}\n", lock, lock->dep_map.name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: kernel/mutex-debug.c:47:
+	printk(" [%p]\n", lock);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#645: FILE: kernel/mutex-debug.c:130:
+	if (lockblk && check_deadlock(lockblk, depth+1, ti)) {
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#824: FILE: kernel/mutex-debug.h:24:
+extern void debug_mutex_lock_common(struct mutex *lock,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#949: FILE: kernel/mutex.c:83:
+void inline fastcall __sched mutex_lock(struct mutex *lock)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#966: FILE: kernel/mutex.c:120:
+static void fastcall noinline __sched

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#978: FILE: kernel/mutex.c:132:
+EXPORT_SYMBOL(mutex_unlock_non_nested);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#980: FILE: kernel/mutex.c:134:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1040: FILE: kernel/mutex.c:222:
+EXPORT_SYMBOL_GPL(mutex_lock_nested);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1088: FILE: kernel/mutex.c:276:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1547: FILE: kernel/rtmutex-debug.h:18:
+extern void debug_rt_mutex_lock(struct rt_mutex *lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1780: FILE: kernel/sched.c:3168:
+	DEBUG_WARN_ON((preempt_count() & PREEMPT_MASK) >= PREEMPT_MASK-10);
 	                                                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val < PREEMPT_MASK'
#1795: FILE: kernel/sched.c:3182:
+	if (DEBUG_WARN_ON((val < PREEMPT_MASK) &&
+			!(preempt_count() & PREEMPT_MASK)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1796: FILE: kernel/sched.c:3183:
+	if (DEBUG_WARN_ON((val < PREEMPT_MASK) &&
+			!(preempt_count() & PREEMPT_MASK)))

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1840: FILE: lib/Kconfig.debug:150:
+config DEBUG_MUTEX_DEADLOCKS
+	bool "Detect mutex related deadlocks"
+	default y
+	depends on DEBUG_MUTEXES
+	help
+	 This feature will automatically detect and report mutex related
+	 deadlocks, as they happen.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1868: FILE: lib/debug_locks.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1869: FILE: lib/debug_locks.c:2:
+ * lib/debug_locks.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1955: FILE: lib/spinlock_debug.c:25:
+	printk(KERN_EMERG "BUG: spinlock %s on CPU#%d, %s/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1956: FILE: lib/spinlock_debug.c:26:
+	printk(KERN_EMERG "BUG: spinlock %s on CPU#%d, %s/%d\n",
+		msg, raw_smp_processor_id(),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1958: FILE: lib/spinlock_debug.c:28:
+	printk(KERN_EMERG " lock: %p, .magic: %08x, .owner: %s/%d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1959: FILE: lib/spinlock_debug.c:29:
+	printk(KERN_EMERG " lock: %p, .magic: %08x, .owner: %s/%d, "
+			".owner_cpu: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1995: FILE: lib/spinlock_debug.c:122:
+	printk(KERN_EMERG "BUG: rwlock %s on CPU#%d, %s/%d, %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1996: FILE: lib/spinlock_debug.c:123:
+	printk(KERN_EMERG "BUG: rwlock %s on CPU#%d, %s/%d, %p\n",
+		msg, raw_smp_processor_id(), current->comm,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 13 warnings, 14 checks, 1714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
