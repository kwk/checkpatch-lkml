WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > ago were done in the kernel, POSIX message queue passing is not doable in

ERROR:SPACING: space required after that ',' (ctx:VxO)
#95: FILE: include/asm-alpha/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#95: FILE: include/asm-alpha/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#106: FILE: include/asm-arm/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#106: FILE: include/asm-arm/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#117: FILE: include/asm-i386/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#117: FILE: include/asm-i386/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#128: FILE: include/asm-ia64/siginfo.h:116:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#128: FILE: include/asm-ia64/siginfo.h:116:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#139: FILE: include/asm-m68k/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#139: FILE: include/asm-m68k/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#150: FILE: include/asm-mips/siginfo.h:128:
+#define SI_MESGQ __SI_CODE(__SI_RT,-4)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#150: FILE: include/asm-mips/siginfo.h:128:
+#define SI_MESGQ __SI_CODE(__SI_RT,-4)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#161: FILE: include/asm-mips64/siginfo.h:128:
+#define SI_MESGQ __SI_CODE(__SI_RT,-4)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#161: FILE: include/asm-mips64/siginfo.h:128:
+#define SI_MESGQ __SI_CODE(__SI_RT,-4)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#172: FILE: include/asm-ppc/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#172: FILE: include/asm-ppc/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#183: FILE: include/asm-sh/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#183: FILE: include/asm-sh/siginfo.h:107:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#194: FILE: include/asm-sparc/siginfo.h:112:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#194: FILE: include/asm-sparc/siginfo.h:112:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#205: FILE: include/asm-sparc64/siginfo.h:172:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#205: FILE: include/asm-sparc64/siginfo.h:172:
+#define SI_MESGQ __SI_CODE(__SI_RT,-3)	/* sent by real time mesq state change */
                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: ipc/msg.c:51:
+static struct super_block * msg_sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#290: FILE: ipc/msg.c:53:
+static struct super_block *msg_read_super(struct super_block *,void *, int);
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#295: FILE: ipc/msg.c:58:
+static int msg_create(struct inode *,struct dentry *,int);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#295: FILE: ipc/msg.c:58:
+static int msg_create(struct inode *,struct dentry *,int);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#296: FILE: ipc/msg.c:59:
+static struct dentry *msg_lookup(struct inode *,struct dentry *);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#297: FILE: ipc/msg.c:60:
+static int msg_unlink(struct inode *,struct dentry *);
                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#307: FILE: ipc/msg.c:70:
+/* FIXME: Support poll on mq
+static unsigned int msg_poll(struct file *, poll_table *);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: ipc/msg.c:72:
+static ssize_t msg_send (struct inode *, struct file *, const char *, size_t, long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: ipc/msg.c:73:
+static ssize_t msg_receive (struct inode *, struct file *, char *, size_t, long *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: ipc/msg.c:74:
+static int msg_flush (struct file *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#312: FILE: ipc/msg.c:75:
+static int msg_release (struct inode *, struct file *);

WARNING:INDENTED_LABEL: labels should not be indented
#317: FILE: ipc/msg.c:80:
+	read_inode:	msg_read_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#318: FILE: ipc/msg.c:81:
+	delete_inode:	msg_delete,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#318: FILE: ipc/msg.c:81:
+	delete_inode:	msg_delete,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#319: FILE: ipc/msg.c:82:
+	put_super:	msg_put_super,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#319: FILE: ipc/msg.c:82:
+	put_super:	msg_put_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#320: FILE: ipc/msg.c:83:
+	statfs:		msg_statfs,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#320: FILE: ipc/msg.c:83:
+	statfs:		msg_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#321: FILE: ipc/msg.c:84:
+	remount_fs:	msg_remount_fs,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#321: FILE: ipc/msg.c:84:
+	remount_fs:	msg_remount_fs,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#324: FILE: ipc/msg.c:87:
+static struct file_operations msg_root_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#325: FILE: ipc/msg.c:88:
+	readdir:	msg_readdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#326: FILE: ipc/msg.c:89:
+	ioctl:		msg_root_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#326: FILE: ipc/msg.c:89:
+	ioctl:		msg_root_ioctl,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#329: FILE: ipc/msg.c:92:
+static struct inode_operations msg_root_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#330: FILE: ipc/msg.c:93:
+	create:		msg_create,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#331: FILE: ipc/msg.c:94:
+	lookup:		msg_lookup,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#331: FILE: ipc/msg.c:94:
+	lookup:		msg_lookup,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#332: FILE: ipc/msg.c:95:
+	unlink:		msg_unlink,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#332: FILE: ipc/msg.c:95:
+	unlink:		msg_unlink,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#335: FILE: ipc/msg.c:98:
+static struct file_operations msg_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#336: FILE: ipc/msg.c:99:
+	read:		msg_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#337: FILE: ipc/msg.c:100:
+	write:		msg_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#337: FILE: ipc/msg.c:100:
+	write:		msg_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#338: FILE: ipc/msg.c:101:
+	ioctl:		msg_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#338: FILE: ipc/msg.c:101:
+	ioctl:		msg_ioctl,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#340: FILE: ipc/msg.c:103:
+/* FIXME: Support poll on mq *
+	poll:		msg_poll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#342: FILE: ipc/msg.c:105:
+	flush:		msg_flush,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#342: FILE: ipc/msg.c:105:
+	flush:		msg_flush,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#343: FILE: ipc/msg.c:106:
+	release:	msg_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#343: FILE: ipc/msg.c:106:
+	release:	msg_release,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#346: FILE: ipc/msg.c:109:
+static struct inode_operations msg_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#347: FILE: ipc/msg.c:110:
+	setattr:	msg_setattr,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#377: FILE: ipc/msg.c:162:
+	int q_signo;			/* signal to be sent if empty queue with no waiting
+					   receivers should be sent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#377: FILE: ipc/msg.c:162:
+					   receivers should be sent */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#394: FILE: ipc/msg.c:179:
 };
+static LIST_HEAD(mq_open_links);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#404: FILE: ipc/msg.c:194:
+#define msg_get(id)	((struct msg_queue*)ipc_get(&msg_ids,id))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: ipc/msg.c:194:
+#define msg_get(id)	((struct msg_queue*)ipc_get(&msg_ids,id))
                    	                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: ipc/msg.c:199:
+static int newque (key_t key, const char *name, int namelen, struct mq_attr *attr, int msgflg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: ipc/msg.c:209:
+	register_filesystem (&msg_fs_type);

ERROR:SPACING: space prohibited after that open parenthesis '('
#440: FILE: ipc/msg.c:228:
+	if ( options )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#440: FILE: ipc/msg.c:228:
+	if ( options )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: ipc/msg.c:229:
+		this_char = strtok(options,",");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#442: FILE: ipc/msg.c:230:
+	for ( ; this_char; this_char = strtok(NULL,",")) {
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#443: FILE: ipc/msg.c:231:
+		if ((value = strchr(this_char,'=')) != NULL)
 		                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: ipc/msg.c:231:
+		if ((value = strchr(this_char,'=')) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: ipc/msg.c:233:
+		if (!strcmp(this_char,"nr_blocks")) {
 		                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: ipc/msg.c:233:
+		if (!strcmp(this_char,"nr_blocks")) {
[...]
+		else if (!strcmp(this_char,"nr_inodes")) {
[...]
+		else if (!strcmp(this_char,"mode")) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#448: FILE: ipc/msg.c:236:
+			blocks = simple_strtoul(value,&value,0);
 			                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#448: FILE: ipc/msg.c:236:
+			blocks = simple_strtoul(value,&value,0);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: ipc/msg.c:236:
+			blocks = simple_strtoul(value,&value,0);
 			                                    ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#448: FILE: ipc/msg.c:236:
+			blocks = simple_strtoul(value,&value,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: ipc/msg.c:240:
+		else if (!strcmp(this_char,"nr_inodes")) {
 		                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#452: FILE: ipc/msg.c:240:
+		}
+		else if (!strcmp(this_char,"nr_inodes")) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#455: FILE: ipc/msg.c:243:
+			inodes = simple_strtoul(value,&value,0);
 			                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#455: FILE: ipc/msg.c:243:
+			inodes = simple_strtoul(value,&value,0);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: ipc/msg.c:243:
+			inodes = simple_strtoul(value,&value,0);
 			                                    ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#455: FILE: ipc/msg.c:243:
+			inodes = simple_strtoul(value,&value,0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#459: FILE: ipc/msg.c:247:
+		else if (!strcmp(this_char,"mode")) {
 		                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#459: FILE: ipc/msg.c:247:
+		}
+		else if (!strcmp(this_char,"mode")) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#462: FILE: ipc/msg.c:250:
+			mode = simple_strtoul(value,&value,8);
 			                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#462: FILE: ipc/msg.c:250:
+			mode = simple_strtoul(value,&value,8);
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: ipc/msg.c:250:
+			mode = simple_strtoul(value,&value,8);
 			                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#462: FILE: ipc/msg.c:250:
+			mode = simple_strtoul(value,&value,8);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#466: FILE: ipc/msg.c:254:
+		}
+		else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#470: FILE: ipc/msg.c:258:
+/* FIXME *
+	msg_ctlmni = inodes;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: ipc/msg.c:266:
+static struct super_block *msg_read_super(struct super_block *s,void *data, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#478: FILE: ipc/msg.c:266:
+static struct super_block *msg_read_super(struct super_block *s,void *data, 
                                                                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: ipc/msg.c:269:
+	struct inode * root_inode;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#484: FILE: ipc/msg.c:272:
+/* FIXME *
+	msg_ctlmnb = MSGMNB;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#487: FILE: ipc/msg.c:275:
+	msg_mode   = S_IRWXUGO | S_ISVTX;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: ipc/msg.c:276:
+	if (msg_parse_options (data)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: ipc/msg.c:277:
+		printk(KERN_ERR "msg fs invalid option\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#497: FILE: ipc/msg.c:285:
+	root_inode = iget (s, SEQ_MULTIPLIER);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#511: FILE: ipc/msg.c:299:
+	printk(KERN_ERR "msg_read_super: get root inode failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'msg_read_super', this function's name, in a string
#511: FILE: ipc/msg.c:299:
+	printk(KERN_ERR "msg_read_super: get root inode failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#512: FILE: ipc/msg.c:300:
+	iput(root_inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: ipc/msg.c:305:
+static int msg_remount_fs (struct super_block *sb, int *flags, char *data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: ipc/msg.c:307:
+	if (msg_parse_options (data))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#528: FILE: ipc/msg.c:316:
+	if (ipc_checkid(&msg_ids,&msq->q_perm,id))
 	                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#528: FILE: ipc/msg.c:316:
+	if (ipc_checkid(&msg_ids,&msq->q_perm,id))
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#528: FILE: ipc/msg.c:316:
+	if (ipc_checkid(&msg_ids,&msq->q_perm,id))
 	                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#539: FILE: ipc/msg.c:327:
+	for(i = 0; i <= msg_ids.max_id; i++) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#540: FILE: ipc/msg.c:328:
+		if (!(msq = msg_lock (i)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#540: FILE: ipc/msg.c:328:
+		if (!(msq = msg_lock (i)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#544: FILE: ipc/msg.c:332:
+	dput (sb->s_root);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#553: FILE: ipc/msg.c:341:
+	buf->f_bavail = buf->f_bfree = buf->f_blocks - (atomic_read(&msg_bytes) >> PAGE_SHIFT);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#560: FILE: ipc/msg.c:348:
+static void msg_read_inode(struct inode * inode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: ipc/msg.c:356:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#571: FILE: ipc/msg.c:358:
+		if (!(msq = msg_lock (id)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#571: FILE: ipc/msg.c:358:
+		if (!(msq = msg_lock (id)))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#573: FILE: ipc/msg.c:360:
+		inode->i_mode = (msq->q_flags & S_IRWXUGO) | S_IFIFO;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#580: FILE: ipc/msg.c:367:
+		msg_unlock (id);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#585: FILE: ipc/msg.c:372:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#591: FILE: ipc/msg.c:378:
+	inode->i_uid   = inode->i_gid = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#594: FILE: ipc/msg.c:381:
+static int msg_create (struct inode *dir, struct dentry *dent, int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: ipc/msg.c:395:
+		struct mq_link *l = list_entry(tmp, struct mq_link, link);
+		if (l->tsk == current) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#613: FILE: ipc/msg.c:400:
+	err = id = newque (IPC_PRIVATE, dent->d_name.name, dent->d_name.len, p, mode);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#613: FILE: ipc/msg.c:400:
+	err = id = newque (IPC_PRIVATE, dent->d_name.name, dent->d_name.len, p, mode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#618: FILE: ipc/msg.c:405:
+	inode = iget (msg_sb, id % SEQ_MULTIPLIER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#623: FILE: ipc/msg.c:410:
+	down (&inode->i_sem);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#624: FILE: ipc/msg.c:411:
+	inode->i_mode = (mode & S_IRWXUGO) | S_IFIFO;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#627: FILE: ipc/msg.c:414:
+	up (&inode->i_sem);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#634: FILE: ipc/msg.c:421:
+static int msg_readdir (struct file *filp, void *dirent, filldir_t filldir)
                                      ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#634: FILE: ipc/msg.c:421:
+static int msg_readdir (struct file *filp, void *dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: ipc/msg.c:423:
+	struct inode * inode = filp->f_dentry->d_inode;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#642: FILE: ipc/msg.c:429:
+	switch(nr)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#642: FILE: ipc/msg.c:429:
+	switch(nr)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#648: FILE: ipc/msg.c:435:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#653: FILE: ipc/msg.c:440:
+		/* fall through */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#656: FILE: ipc/msg.c:443:
+		for (; nr-2 <= msg_ids.max_id; nr++) {
 		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: ipc/msg.c:444:
+^I^I^Iif (!(msq = msg_get (nr-2))) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#657: FILE: ipc/msg.c:444:
+			if (!(msq = msg_get (nr-2))) 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#657: FILE: ipc/msg.c:444:
+			if (!(msq = msg_get (nr-2))) 
 			                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#657: FILE: ipc/msg.c:444:
+			if (!(msq = msg_get (nr-2))) 

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#662: FILE: ipc/msg.c:449:
+				break;;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#673: FILE: ipc/msg.c:460:
+static struct dentry *msg_lookup (struct inode *dir, struct dentry *dent)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#676: FILE: ipc/msg.c:463:
+	struct msg_queue* msq;

ERROR:SPACING: space required before the open parenthesis '('
#683: FILE: ipc/msg.c:470:
+	for(i = 0; i <= msg_ids.max_id; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#684: FILE: ipc/msg.c:471:
+		if (!(msq = msg_lock(i)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: ipc/msg.c:481:
+^I * prevent the reserved names as negative dentries. $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#698: FILE: ipc/msg.c:485:
+	    memcmp (MSG_FMT, dent->d_name.name, MSG_FMT_LEN - 8) == 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#711: FILE: ipc/msg.c:498:
+		d_add (dent, inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#712: FILE: ipc/msg.c:499:
+	up (&msg_ids.sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#716: FILE: ipc/msg.c:503:
+extern inline int msg_do_unlink (struct inode *dir, struct dentry *dent, int sysv)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#716: FILE: ipc/msg.c:503:
+extern inline int msg_do_unlink (struct inode *dir, struct dentry *dent, int sysv)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#718: FILE: ipc/msg.c:505:
+	struct inode * inode = dent->d_inode;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#721: FILE: ipc/msg.c:508:
+	down (&msg_ids.sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#722: FILE: ipc/msg.c:509:
+	if (!(msq = msg_lock (inode->i_ino)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_ino'
#722: FILE: ipc/msg.c:509:
+	if (!(msq = msg_lock (inode->i_ino)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#722: FILE: ipc/msg.c:509:
+	if (!(msq = msg_lock (inode->i_ino)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#723: FILE: ipc/msg.c:510:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#733: FILE: ipc/msg.c:520:
+			msg_unlock (inode->i_ino);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#734: FILE: ipc/msg.c:521:
+			up (&msg_ids.sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#740: FILE: ipc/msg.c:527:
+	msg_unlock (inode->i_ino);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: ipc/msg.c:528:
+	up (&msg_ids.sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: ipc/msg.c:535:
+	    memcmp (MSG_FMT, dent->d_name.name, MSG_FMT_LEN - 8) == 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#749: FILE: ipc/msg.c:536:
+		d_drop (dent);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#753: FILE: ipc/msg.c:540:
+static int msg_unlink (struct inode *dir, struct dentry *dent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#755: FILE: ipc/msg.c:542:
+	return msg_do_unlink (dir, dent, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#758: FILE: ipc/msg.c:545:
+static int msg_setattr (struct dentry *dentry, struct iattr *attr)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#771: FILE: ipc/msg.c:558:
+		if (!(msq = msg_lock(inode->i_ino)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: ipc/msg.c:559:
+			BUG();

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#774: FILE: ipc/msg.c:561:
+			msq->q_flags = (msq->q_flags & ~S_IRWXUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#775: FILE: ipc/msg.c:562:
+				| (S_IRWXUGO & attr->ia_mode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#781: FILE: ipc/msg.c:568:
+		msg_unlock (inode->i_ino);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#788: FILE: ipc/msg.c:575:
+static int msg_root_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)
                                                                ^^^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#788: FILE: ipc/msg.c:575:
+static int msg_root_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: ipc/msg.c:575:
+static int msg_root_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: ipc/msg.c:575:
+static int msg_root_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#788: FILE: ipc/msg.c:575:
+static int msg_root_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#810: FILE: ipc/msg.c:597:
+	/* FIXME: Shouldn't we check here whether mq_name is really a file within the msg filesystem?

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: ipc/msg.c:598:
+	/* FIXME: Shouldn't we check here whether mq_name is really a file within the msg filesystem?
+	   Otherwise people tracing the open(2) syscall might miss this place... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: ipc/msg.c:598:
+	   Otherwise people tracing the open(2) syscall might miss this place... */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#821: FILE: ipc/msg.c:608:
+static int msg_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)
                                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: ipc/msg.c:608:
+static int msg_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: ipc/msg.c:608:
+static int msg_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#821: FILE: ipc/msg.c:608:
+static int msg_ioctl (struct inode * inode, struct file * filp, unsigned int cmd, unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#831: FILE: ipc/msg.c:618:
+		struct mq_attr attr;
+		memset(&attr, 0, sizeof(attr));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#832: FILE: ipc/msg.c:619:
+		msq = msg_lock (inode->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#833: FILE: ipc/msg.c:620:
+		if (msq == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: ipc/msg.c:621:
+			BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: ipc/msg.c:626:
+		msg_unlock (inode->i_ino);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#853: FILE: ipc/msg.c:640:
+		ret = msg_send (inode, filp, sr.mq_buf, sr.mq_len, sr.mq_type);
 		                       ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#853: FILE: ipc/msg.c:640:
+		ret = msg_send (inode, filp, sr.mq_buf, sr.mq_len, sr.mq_type);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#862: FILE: ipc/msg.c:649:
+		ret = msg_receive (inode, filp, sr.mq_buf, sr.mq_len, &sr.mq_type);
 		                          ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#862: FILE: ipc/msg.c:649:
+		ret = msg_receive (inode, filp, sr.mq_buf, sr.mq_len, &sr.mq_type);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: ipc/msg.c:650:
+		if (!ret && put_user (sr.mq_type, &((struct mq_sndrcv *)arg)->mq_type))

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: ipc/msg.c:656:
+		struct msg_queue *msg;
+		ret = -EFAULT;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#878: FILE: ipc/msg.c:665:
+		if (!msg) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#878: FILE: ipc/msg.c:665:
+		if (!msg) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#880: FILE: ipc/msg.c:667:
+		if (msg->q_signo)
[...]
+		else if (sev.sigev_notify == SIGEV_SIGNAL) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#885: FILE: ipc/msg.c:672:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#896: FILE: ipc/msg.c:683:
+static ssize_t msg_write(struct file * file, const char * buf, size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#896: FILE: ipc/msg.c:683:
+static ssize_t msg_write(struct file * file, const char * buf, size_t count, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#899: FILE: ipc/msg.c:686:
+	int ret = msg_send(file->f_dentry->d_inode, file, buf, count, MQ_DEFAULT_TYPE);
+	return ret ?: count;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#902: FILE: ipc/msg.c:689:
+static ssize_t msg_read(struct file * file, char * buf, size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#902: FILE: ipc/msg.c:689:
+static ssize_t msg_read(struct file * file, char * buf, size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#907: FILE: ipc/msg.c:694:
+static int msg_release (struct inode *ino, struct file *filp)
                                                         ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#907: FILE: ipc/msg.c:694:
+static int msg_release (struct inode *ino, struct file *filp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: ipc/msg.c:697:
+	struct msg_queue *msq = msg_lock(ino->i_ino);
+	if (!msq) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#910: FILE: ipc/msg.c:697:
+	if (!msq) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#910: FILE: ipc/msg.c:697:
+	if (!msq) BUG();

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#917: FILE: ipc/msg.c:704:
+static int msg_flush (struct file *filp)
                                    ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#917: FILE: ipc/msg.c:704:
+static int msg_flush (struct file *filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#919: FILE: ipc/msg.c:706:
+	return msg_release(filp->f_dentry->d_inode, filp);
 	                                            ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#922: FILE: ipc/msg.c:709:
+static int newque (key_t key, const char *name, int namelen, struct mq_attr *attr, int msgflg)

CHECK:SPACING: No space is necessary after a cast
#929: FILE: ipc/msg.c:716:
+	msq = (struct msg_queue *) kmalloc (sizeof (*msq) + namelen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#929: FILE: ipc/msg.c:716:
+	msq = (struct msg_queue *) kmalloc (sizeof (*msq) + namelen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#929: FILE: ipc/msg.c:716:
+	msq = (struct msg_queue *) kmalloc (sizeof (*msq) + namelen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#929: FILE: ipc/msg.c:716:
+	msq = (struct msg_queue *) kmalloc (sizeof (*msq) + namelen, GFP_KERNEL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#938: FILE: ipc/msg.c:724:
+	msq->q_flags = (msgflg & S_IRWXUGO);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#950: FILE: ipc/msg.c:735:
+	msq->id = bid = msg_buildid(id, msq->q_perm.seq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#972: FILE: ipc/msg.c:756:
+static void msg_delete (struct inode *ino)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#979: FILE: ipc/msg.c:763:
+	if(msq==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#979: FILE: ipc/msg.c:763:
+	if(msq==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#979: FILE: ipc/msg.c:763:
+	if(msq==NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: ipc/msg.c:764:
+		BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#992: FILE: ipc/msg.c:776:
+	char name[MSG_FMT_LEN+1];
 	                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#996: FILE: ipc/msg.c:780:
+	if (msq == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#999: FILE: ipc/msg.c:783:
+	if (msg_checkid (msq, msqid)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1005: FILE: ipc/msg.c:789:
+	sprintf (name, MSG_FMT, id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: ipc/msg.c:801:
+		struct inode *inode = dir->d_inode;
+		down(&inode->i_zombie);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1034: FILE: ipc/msg.c:824:
+static struct msg_msg* load_msg(const char * src, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1034: FILE: ipc/msg.c:824:
+static struct msg_msg* load_msg(const char * src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1043: FILE: ipc/msg.c:876:
+static int store_msg(void* dest, struct msg_msg* msg, size_t len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1043: FILE: ipc/msg.c:876:
+static int store_msg(void* dest, struct msg_msg* msg, size_t len)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1094: FILE: ipc/msg.c:1157:
+			err = msg_checkid(msq,msqid);
 			                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1103: FILE: ipc/msg.c:1167:
+		tbuf.msg_perm.mode &= S_IRWXUGO;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1147: FILE: ipc/msg.c:1290:
+static int msg_do_send (struct msg_queue **msqp, int msqid,

ERROR:SPACING: space required before the open parenthesis '('
#1152: FILE: ipc/msg.c:1295:
+	if(msgsz + msq->q_cbytes > msq->q_qbytes ||

ERROR:SPACING: space required before the open parenthesis '('
#1156: FILE: ipc/msg.c:1299:
+		if(nowait)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1165: FILE: ipc/msg.c:1308:
+		if(msq==NULL)
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#1165: FILE: ipc/msg.c:1308:
+		if(msq==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#1165: FILE: ipc/msg.c:1308:
+		if(msq==NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1168: FILE: ipc/msg.c:1311:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1174: FILE: ipc/msg.c:1317:
+	if(!pipelined_send(msq,msg)) {
 	                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1174: FILE: ipc/msg.c:1317:
+	if(!pipelined_send(msq,msg)) {

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1175: FILE: ipc/msg.c:1318:
+		/* noone is waiting for this message, enqueue it */
 		   ^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1176: FILE: ipc/msg.c:1319:
+		list_add_tail(&msg->m_list,&msq->q_messages);
 		                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1176: FILE: ipc/msg.c:1319:
+		list_add_tail(&msg->m_list,&msq->q_messages);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1179: FILE: ipc/msg.c:1322:
+		atomic_add(msgsz,&msg_bytes);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1179: FILE: ipc/msg.c:1322:
+		atomic_add(msgsz,&msg_bytes);
 		                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1184: FILE: ipc/msg.c:1327:
+			siginfo_t si;
+			read_lock(&tasklist_lock);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1206: FILE: ipc/msg.c:1349:
+static ssize_t msg_send (struct inode *ino, struct file *filp, const char *mtext, size_t msgsz, long mtype)
                                                          ^^^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1206: FILE: ipc/msg.c:1349:
+static ssize_t msg_send (struct inode *ino, struct file *filp, const char *mtext, size_t msgsz, long mtype)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1206: FILE: ipc/msg.c:1349:
+static ssize_t msg_send (struct inode *ino, struct file *filp, const char *mtext, size_t msgsz, long mtype)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: ipc/msg.c:1354:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1215: FILE: ipc/msg.c:1358:
+	if (!msq) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1215: FILE: ipc/msg.c:1358:
+	if (!msq) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1219: FILE: ipc/msg.c:1362:
+	if (err) return err;

ERROR:SPACING: space required before the open parenthesis '('
#1222: FILE: ipc/msg.c:1365:
+	if(IS_ERR(msg))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1229: FILE: ipc/msg.c:1372:
+	if (!msq) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1229: FILE: ipc/msg.c:1372:
+	if (!msq) BUG();

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1233: FILE: ipc/msg.c:1376:
+		if (msq->q_flags & MSG_SYSV && ipcperms(&msq->q_perm, S_IWUGO))

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1262: FILE: ipc/msg.c:1415:
+		err= -EIDRM;
 		   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1263: FILE: ipc/msg.c:1416:
+		if (msg_checkid(msq,msqid))
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#1269: FILE: ipc/msg.c:1419:
+		err=-EACCES;
 		   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1269: FILE: ipc/msg.c:1419:
+		err=-EACCES;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: ipc/msg.c:1420:
+^I^Iif (ipcperms(&msq->q_perm, S_IWUGO)) $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1270: FILE: ipc/msg.c:1420:
+		if (ipcperms(&msq->q_perm, S_IWUGO)) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1326: FILE: ipc/msg.c:1455:
+msg_do_receive (struct msg_queue *msq, int *msqidp, size_t msgsz,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1335: FILE: ipc/msg.c:1464:
+		if (msq->q_flags & MSG_SYSV && ipcperms (&msq->q_perm, S_IRUGO))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1335: FILE: ipc/msg.c:1464:
+		if (msq->q_flags & MSG_SYSV && ipcperms (&msq->q_perm, S_IRUGO))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1341: FILE: ipc/msg.c:1470:
+			msg = list_entry(tmp,struct msg_msg,m_list);
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1341: FILE: ipc/msg.c:1470:
+			msg = list_entry(tmp,struct msg_msg,m_list);
 			                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#1342: FILE: ipc/msg.c:1471:
+			if(testmsg(msg, msgtyp, mode)) {

ERROR:SPACING: space required before the open parenthesis '('
#1344: FILE: ipc/msg.c:1473:
+				if(mode == SEARCH_LESSEQUAL && msg->m_type != 1)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msgsz < msg->m_ts'
#1353: FILE: ipc/msg.c:1482:
+			if ((msgsz < msg->m_ts) && !(msgflg & MSG_NOERROR))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1360: FILE: ipc/msg.c:1489:
+			atomic_sub(msg->m_ts,&msg_bytes);
 			                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1360: FILE: ipc/msg.c:1489:
+			atomic_sub(msg->m_ts,&msg_bytes);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1362: FILE: ipc/msg.c:1491:
+			ss_wakeup(&msq->q_senders,0);
 			                         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1365: FILE: ipc/msg.c:1494:
+			return msg;
+		} else {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1372: FILE: ipc/msg.c:1501:
+			list_add_tail(&msr_d.r_list,&msq->q_receivers);
 			                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1372: FILE: ipc/msg.c:1501:
+			list_add_tail(&msr_d.r_list,&msq->q_receivers);
 			                            ^

ERROR:SPACING: space required before the open parenthesis '('
#1376: FILE: ipc/msg.c:1505:
+			if(msgflg & MSG_NOERROR)

CHECK:SPACING: No space is necessary after a cast
#1387: FILE: ipc/msg.c:1516:
+			msg = (struct msg_msg*) msr_d.r_msg;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1387: FILE: ipc/msg.c:1516:
+			msg = (struct msg_msg*) msr_d.r_msg;

ERROR:SPACING: space required before the open parenthesis '('
#1388: FILE: ipc/msg.c:1517:
+			if(!IS_ERR(msg))

ERROR:SPACING: space required before the open parenthesis '('
#1392: FILE: ipc/msg.c:1521:
+			if(t == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t"
#1392: FILE: ipc/msg.c:1521:
+			if(t == NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1394: FILE: ipc/msg.c:1523:
+			msg = (struct msg_msg*)msr_d.r_msg;

ERROR:SPACING: space required before the open parenthesis '('
#1395: FILE: ipc/msg.c:1524:
+			if(!IS_ERR(msg)) {

ERROR:SPACING: space required before the open parenthesis '('
#1403: FILE: ipc/msg.c:1532:
+			if(PTR_ERR(msg) == -EAGAIN) {

ERROR:SPACING: space required before the open parenthesis '('
#1404: FILE: ipc/msg.c:1533:
+				if(msqid == -1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1405: FILE: ipc/msg.c:1534:
+					BUG();

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1409: FILE: ipc/msg.c:1538:
+					return ERR_PTR(-EINTR);
+				else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1417: FILE: ipc/msg.c:1546:
+static int msg_receive (struct inode *ino, struct file *filp, char *mtext,
                                                         ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1417: FILE: ipc/msg.c:1546:
+static int msg_receive (struct inode *ino, struct file *filp, char *mtext,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1431: FILE: ipc/msg.c:1560:
+	if (!msq) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1431: FILE: ipc/msg.c:1560:
+	if (!msq) BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1437: FILE: ipc/msg.c:1566:
+	msg = msg_do_receive (msq, &msqid, msgsz, msgtyp, mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1439: FILE: ipc/msg.c:1568:
+	if (!IS_ERR (msg)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1452: FILE: ipc/msg.c:1581:
+	case -ENOMSG: err = -EAGAIN; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1453: FILE: ipc/msg.c:1582:
+	case -E2BIG: err = -EMSGSIZE; break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1476: FILE: ipc/msg.c:1598:
+	msq = msg_lock (msqid);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1477: FILE: ipc/msg.c:1599:
+	if (msq==NULL)
 	       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#1477: FILE: ipc/msg.c:1599:
+	if (msq==NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1500: FILE: ipc/msg.c:1603:
+		msg_unlock (msqid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1519: FILE: ipc/msg.c:1606:
+	msg = msg_do_receive (msq, &msqid, msgsz, msgtyp, mode, msgflg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1520: FILE: ipc/msg.c:1607:
+	if (!IS_ERR (msg)) {

WARNING:LONG_LINE_STRING: line length of 134 exceeds 100 columns
#1596: FILE: ipc/msg.c:1634:
+			len += sprintf(buffer + len, "%10d %10d  %4o  %10lu %10lu %5u %5u %5u %5u %5u %5u %10lu %10lu %10lu %.*s%s\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1600: FILE: ipc/msg.c:1637:
+				msq->q_flags & S_IRWXUGO,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 144 errors, 151 warnings, 22 checks, 1474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
