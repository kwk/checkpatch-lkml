WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
and from the userspace stub for each address space change, we write a number

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: arch/um/include/tlb.h:41:
+^I^I^I     void *(*do_ops)(union mm_context *, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union mm_context *' should also have an identifier name
#57: FILE: arch/um/include/tlb.h:41:
+			     void *(*do_ops)(union mm_context *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct host_vm_op *' should also have an identifier name
#57: FILE: arch/um/include/tlb.h:41:
+			     void *(*do_ops)(union mm_context *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#57: FILE: arch/um/include/tlb.h:41:
+			     void *(*do_ops)(union mm_context *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#57: FILE: arch/um/include/tlb.h:41:
+			     void *(*do_ops)(union mm_context *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#57: FILE: arch/um/include/tlb.h:41:
+			     void *(*do_ops)(union mm_context *, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: arch/um/kernel/skas/include/skas.h:27:
+extern void *map(struct mm_id * mm_idp, unsigned long virt, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: arch/um/kernel/skas/include/skas.h:27:
+extern void *map(struct mm_id * mm_idp, unsigned long virt, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: arch/um/kernel/skas/include/skas.h:27:
+extern void *map(struct mm_id * mm_idp, unsigned long virt, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: arch/um/kernel/skas/include/skas.h:28:
+^I^I unsigned long len, int r, int w, int x, int phys_fd, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: arch/um/kernel/skas/include/skas.h:30:
+extern void *unmap(struct mm_id * mm_idp, void *addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: arch/um/kernel/skas/include/skas.h:30:
+extern void *unmap(struct mm_id * mm_idp, void *addr, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: arch/um/kernel/skas/include/skas.h:30:
+extern void *unmap(struct mm_id * mm_idp, void *addr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: arch/um/kernel/skas/include/skas.h:32:
+extern void *protect(struct mm_id * mm_idp, unsigned long addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: arch/um/kernel/skas/include/skas.h:32:
+extern void *protect(struct mm_id * mm_idp, unsigned long addr, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: arch/um/kernel/skas/include/skas.h:32:
+extern void *protect(struct mm_id * mm_idp, unsigned long addr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: arch/um/kernel/skas/include/skas.h:33:
+^I^I     unsigned long len, int r, int w, int x, int done, $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#118: FILE: arch/um/kernel/skas/mem_user.c:32:
+int single_count = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: arch/um/kernel/skas/mem_user.c:34:
+static long one_syscall_stub(struct mm_id * mm_idp, int syscall,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#130: FILE: arch/um/kernel/skas/mem_user.c:54:
+		printk("one_syscall_stub : PTRACE_SETREGS failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: arch/um/kernel/skas/mem_user.c:55:
+		printk("one_syscall_stub : PTRACE_SETREGS failed, "
+		       "errno = %d\n", n);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#132: FILE: arch/um/kernel/skas/mem_user.c:56:
+		return(n);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#137: FILE: arch/um/kernel/skas/mem_user.c:61:
+	return(*((unsigned long *) mm_idp->stack));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#140: FILE: arch/um/kernel/skas/mem_user.c:64:
+int multi_count = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#141: FILE: arch/um/kernel/skas/mem_user.c:65:
+int multi_op_count = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: arch/um/kernel/skas/mem_user.c:67:
+static long many_syscall_stub(struct mm_id * mm_idp, int syscall,

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: arch/um/kernel/skas/mem_user.c:70:
+        unsigned long regs[MAX_REG_NR], *stack;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/um/kernel/skas/mem_user.c:70:
+        unsigned long regs[MAX_REG_NR], *stack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: arch/um/kernel/skas/mem_user.c:71:
+        int n, pid = mm_idp->u.pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/um/kernel/skas/mem_user.c:71:
+        int n, pid = mm_idp->u.pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: arch/um/kernel/skas/mem_user.c:73:
+        stack = *addr_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/um/kernel/skas/mem_user.c:73:
+        stack = *addr_out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: arch/um/kernel/skas/mem_user.c:74:
+        if(stack == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: arch/um/kernel/skas/mem_user.c:74:
+        if(stack == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#150: FILE: arch/um/kernel/skas/mem_user.c:74:
+        if(stack == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack"
#150: FILE: arch/um/kernel/skas/mem_user.c:74:
+        if(stack == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: arch/um/kernel/skas/mem_user.c:75:
+                stack = (unsigned long *) current_stub_stack();$

CHECK:SPACING: No space is necessary after a cast
#151: FILE: arch/um/kernel/skas/mem_user.c:75:
+                stack = (unsigned long *) current_stub_stack();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: arch/um/kernel/skas/mem_user.c:75:
+                stack = (unsigned long *) current_stub_stack();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: arch/um/kernel/skas/mem_user.c:76:
+        *stack++ = syscall;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/um/kernel/skas/mem_user.c:76:
+        *stack++ = syscall;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/um/kernel/skas/mem_user.c:77:
+        *stack++ = args[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/um/kernel/skas/mem_user.c:77:
+        *stack++ = args[0];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/um/kernel/skas/mem_user.c:78:
+        *stack++ = args[1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/um/kernel/skas/mem_user.c:78:
+        *stack++ = args[1];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: arch/um/kernel/skas/mem_user.c:79:
+        *stack++ = args[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/um/kernel/skas/mem_user.c:79:
+        *stack++ = args[2];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/um/kernel/skas/mem_user.c:80:
+        *stack++ = args[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/um/kernel/skas/mem_user.c:80:
+        *stack++ = args[3];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: arch/um/kernel/skas/mem_user.c:81:
+        *stack++ = args[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/um/kernel/skas/mem_user.c:81:
+        *stack++ = args[4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/um/kernel/skas/mem_user.c:82:
+        *stack++ = args[5];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/um/kernel/skas/mem_user.c:82:
+        *stack++ = args[5];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: arch/um/kernel/skas/mem_user.c:83:
+        *stack = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/um/kernel/skas/mem_user.c:83:
+        *stack = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: arch/um/kernel/skas/mem_user.c:84:
+        multi_op_count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: arch/um/kernel/skas/mem_user.c:84:
+        multi_op_count++;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: arch/um/kernel/skas/mem_user.c:86:
+        if(!done && ((((unsigned long) stack) & ~PAGE_MASK) < $

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: arch/um/kernel/skas/mem_user.c:86:
+        if(!done && ((((unsigned long) stack) & ~PAGE_MASK) < $

CHECK:SPACING: No space is necessary after a cast
#162: FILE: arch/um/kernel/skas/mem_user.c:86:
+        if(!done && ((((unsigned long) stack) & ~PAGE_MASK) < 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/um/kernel/skas/mem_user.c:86:
+        if(!done && ((((unsigned long) stack) & ~PAGE_MASK) < $

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: arch/um/kernel/skas/mem_user.c:86:
+        if(!done && ((((unsigned long) stack) & ~PAGE_MASK) < 

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: arch/um/kernel/skas/mem_user.c:87:
+                     PAGE_SIZE - 8 * sizeof(long))){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/um/kernel/skas/mem_user.c:87:
+                     PAGE_SIZE - 8 * sizeof(long))){$

ERROR:SPACING: space required before the open brace '{'
#163: FILE: arch/um/kernel/skas/mem_user.c:87:
+                     PAGE_SIZE - 8 * sizeof(long))){

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: arch/um/kernel/skas/mem_user.c:88:
+                *addr_out = stack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/um/kernel/skas/mem_user.c:88:
+                *addr_out = stack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/um/kernel/skas/mem_user.c:89:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/um/kernel/skas/mem_user.c:89:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: arch/um/kernel/skas/mem_user.c:90:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/um/kernel/skas/mem_user.c:90:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/um/kernel/skas/mem_user.c:92:
+        multi_count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/um/kernel/skas/mem_user.c:92:
+        multi_count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/um/kernel/skas/mem_user.c:93:
+        get_safe_registers(regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/um/kernel/skas/mem_user.c:93:
+        get_safe_registers(regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: arch/um/kernel/skas/mem_user.c:94:
+        regs[REGS_IP_INDEX] = UML_CONFIG_STUB_CODE +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/um/kernel/skas/mem_user.c:94:
+        regs[REGS_IP_INDEX] = UML_CONFIG_STUB_CODE +$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: arch/um/kernel/skas/mem_user.c:95:
+                ((unsigned long) &batch_syscall_stub - $

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: arch/um/kernel/skas/mem_user.c:95:
+                ((unsigned long) &batch_syscall_stub - $

CHECK:SPACING: No space is necessary after a cast
#171: FILE: arch/um/kernel/skas/mem_user.c:95:
+                ((unsigned long) &batch_syscall_stub - 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/um/kernel/skas/mem_user.c:95:
+                ((unsigned long) &batch_syscall_stub - $

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/um/kernel/skas/mem_user.c:96:
+                 (unsigned long) &__syscall_stub_start);$

CHECK:SPACING: No space is necessary after a cast
#172: FILE: arch/um/kernel/skas/mem_user.c:96:
+                 (unsigned long) &__syscall_stub_start);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/um/kernel/skas/mem_user.c:96:
+                 (unsigned long) &__syscall_stub_start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: arch/um/kernel/skas/mem_user.c:97:
+        regs[REGS_SP_INDEX] = UML_CONFIG_STUB_DATA;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: arch/um/kernel/skas/mem_user.c:97:
+        regs[REGS_SP_INDEX] = UML_CONFIG_STUB_DATA;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: arch/um/kernel/skas/mem_user.c:99:
+        n = ptrace_setregs(pid, regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/um/kernel/skas/mem_user.c:99:
+        n = ptrace_setregs(pid, regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: arch/um/kernel/skas/mem_user.c:100:
+        if(n < 0){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/um/kernel/skas/mem_user.c:100:
+        if(n < 0){$

ERROR:SPACING: space required before the open brace '{'
#176: FILE: arch/um/kernel/skas/mem_user.c:100:
+        if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#176: FILE: arch/um/kernel/skas/mem_user.c:100:
+        if(n < 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: arch/um/kernel/skas/mem_user.c:101:
+                printk("many_syscall_stub : PTRACE_SETREGS failed, "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/um/kernel/skas/mem_user.c:101:
+                printk("many_syscall_stub : PTRACE_SETREGS failed, "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#177: FILE: arch/um/kernel/skas/mem_user.c:101:
+                printk("many_syscall_stub : PTRACE_SETREGS failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'many_syscall_stub', this function's name, in a string
#177: FILE: arch/um/kernel/skas/mem_user.c:101:
+                printk("many_syscall_stub : PTRACE_SETREGS failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: arch/um/kernel/skas/mem_user.c:106:
+        wait_stub_done(pid, 0, "many_syscall_stub");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/um/kernel/skas/mem_user.c:106:
+        wait_stub_done(pid, 0, "many_syscall_stub");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: arch/um/kernel/skas/mem_user.c:107:
+        stack = (unsigned long *) mm_idp->stack;$

CHECK:SPACING: No space is necessary after a cast
#184: FILE: arch/um/kernel/skas/mem_user.c:107:
+        stack = (unsigned long *) mm_idp->stack;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: arch/um/kernel/skas/mem_user.c:107:
+        stack = (unsigned long *) mm_idp->stack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: arch/um/kernel/skas/mem_user.c:109:
+        *addr_out = stack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: arch/um/kernel/skas/mem_user.c:109:
+        *addr_out = stack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: arch/um/kernel/skas/mem_user.c:110:
+        return(*stack);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/um/kernel/skas/mem_user.c:110:
+        return(*stack);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#187: FILE: arch/um/kernel/skas/mem_user.c:110:
+        return(*stack);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/um/kernel/skas/mem_user.c:112:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: arch/um/kernel/skas/mem_user.c:112:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: arch/um/kernel/skas/mem_user.c:113:
+static long run_syscall_stub(struct mm_id * mm_idp, int syscall,

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: arch/um/kernel/skas/mem_user.c:114:
+                             unsigned long *args, void **addr, int done)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/um/kernel/skas/mem_user.c:114:
+                             unsigned long *args, void **addr, int done)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: arch/um/kernel/skas/mem_user.c:116:
+        long res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/um/kernel/skas/mem_user.c:116:
+        long res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: arch/um/kernel/skas/mem_user.c:118:
+        if((*addr == NULL) && done)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/um/kernel/skas/mem_user.c:118:
+        if((*addr == NULL) && done)$

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: arch/um/kernel/skas/mem_user.c:118:
+        if((*addr == NULL) && done)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#196: FILE: arch/um/kernel/skas/mem_user.c:118:
+        if((*addr == NULL) && done)

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: arch/um/kernel/skas/mem_user.c:119:
+                res = one_syscall_stub(mm_idp, syscall, args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/um/kernel/skas/mem_user.c:119:
+                res = one_syscall_stub(mm_idp, syscall, args);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: arch/um/kernel/skas/mem_user.c:120:
+        else res = many_syscall_stub(mm_idp, syscall, args, done, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: arch/um/kernel/skas/mem_user.c:120:
+        else res = many_syscall_stub(mm_idp, syscall, args, done, addr);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#198: FILE: arch/um/kernel/skas/mem_user.c:120:
+        else res = many_syscall_stub(mm_idp, syscall, args, done, addr);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/um/kernel/skas/mem_user.c:122:
+        return res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/um/kernel/skas/mem_user.c:122:
+        return res;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: arch/um/kernel/skas/mem_user.c:125:
+void *map(struct mm_id * mm_idp, unsigned long virt, unsigned long len,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/um/kernel/skas/mem_user.c:126:
+          int r, int w, int x, int phys_fd, unsigned long long offset, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: arch/um/kernel/skas/mem_user.c:126:
+          int r, int w, int x, int phys_fd, unsigned long long offset, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/um/kernel/skas/mem_user.c:126:
+          int r, int w, int x, int phys_fd, unsigned long long offset, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: arch/um/kernel/skas/mem_user.c:127:
+          int done, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: arch/um/kernel/skas/mem_user.c:127:
+          int done, void *data)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: arch/um/kernel/skas/mem_user.c:168:
+void *unmap(struct mm_id * mm_idp, void *addr, unsigned long len, int done,

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: arch/um/kernel/skas/mem_user.c:169:
+            void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: arch/um/kernel/skas/mem_user.c:169:
+            void *data)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#257: FILE: arch/um/kernel/skas/mem_user.c:184:
+		if(n != sizeof(unmap))
+		  printk("unmap - proc_mm write returned %d\n", n);

ERROR:SPACING: space required before the open parenthesis '('
#257: FILE: arch/um/kernel/skas/mem_user.c:184:
+		if(n != sizeof(unmap))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: arch/um/kernel/skas/mem_user.c:185:
+		  printk("unmap - proc_mm write returned %d\n", n);

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/um/kernel/skas/mem_user.c:198:
+        return data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/um/kernel/skas/mem_user.c:198:
+        return data;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: arch/um/kernel/skas/mem_user.c:201:
+void *protect(struct mm_id * mm_idp, unsigned long addr, unsigned long len,

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: arch/um/kernel/skas/mem_user.c:202:
+              int r, int w, int x, int done, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: arch/um/kernel/skas/mem_user.c:202:
+              int r, int w, int x, int done, void *data)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: arch/um/kernel/skas/mem_user.c:228:
+                res = run_syscall_stub(mm_idp, __NR_mprotect, args,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/um/kernel/skas/mem_user.c:228:
+                res = run_syscall_stub(mm_idp, __NR_mprotect, args,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: arch/um/kernel/skas/mem_user.c:229:
+                                       &data, done);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: arch/um/kernel/skas/mem_user.c:229:
+                                       &data, done);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: arch/um/kernel/skas/mem_user.c:234:
+        return data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/um/kernel/skas/mem_user.c:234:
+        return data;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/um/kernel/skas/tlb.c:31:
+^I^I^Iflush = map(&mmu->skas.id, op->u.mmap.addr, $

CHECK:SPACING: No space is necessary after a cast
#328: FILE: arch/um/kernel/skas/tlb.c:37:
+			flush = unmap(&mmu->skas.id, (void *) op->u.munmap.addr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: arch/um/kernel/skas/tlb.c:42:
+^I^I^I^I^Iop->u.mprotect.len, op->u.mprotect.r, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: arch/um/kernel/skas/tlb.c:43:
+^I^I^I^I^Iop->u.mprotect.w, op->u.mprotect.x, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: arch/um/kernel/tlb.c:21:
+^I^I    void *(*do_ops)(union mm_context *, struct host_vm_op *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: arch/um/kernel/tlb.c:24:
+        __u64 offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: arch/um/kernel/tlb.c:24:
+        __u64 offset;$

ERROR:SPACING: space required before the open brace '{'
#369: FILE: arch/um/kernel/tlb.c:29:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#369: FILE: arch/um/kernel/tlb.c:29:
+	if(index != -1){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MMAP'
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&
+		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.r == r'
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&
+		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.w == w'
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&
+		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.x == x'
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&
+		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.fd == fd'
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&
+		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

ERROR:SPACING: space required before the open parenthesis '('
#371: FILE: arch/um/kernel/tlb.c:31:
+		if((last->type == MMAP) &&

ERROR:SPACING: space required before the open brace '{'
#375: FILE: arch/um/kernel/tlb.c:35:
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

ERROR:SPACING: space required before the open brace '{'
#381: FILE: arch/um/kernel/tlb.c:41:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#381: FILE: arch/um/kernel/tlb.c:41:
+	if(index == last_filled){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: arch/um/kernel/tlb.c:59:
+static int add_munmap(unsigned long addr, unsigned long len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: arch/um/kernel/tlb.c:60:
+^I^I      struct host_vm_op *ops, int index, int last_filled, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: arch/um/kernel/tlb.c:62:
+^I^I      void *(*do_ops)(union mm_context *, struct host_vm_op *, $

ERROR:SPACING: space required before the open brace '{'
#407: FILE: arch/um/kernel/tlb.c:67:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: arch/um/kernel/tlb.c:67:
+	if(index != -1){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MUNMAP'
#409: FILE: arch/um/kernel/tlb.c:69:
+		if((last->type == MUNMAP) &&
+		   (last->u.munmap.addr + last->u.mmap.len == addr)){

ERROR:SPACING: space required before the open parenthesis '('
#409: FILE: arch/um/kernel/tlb.c:69:
+		if((last->type == MUNMAP) &&

ERROR:SPACING: space required before the open brace '{'
#410: FILE: arch/um/kernel/tlb.c:70:
+		   (last->u.munmap.addr + last->u.mmap.len == addr)){

ERROR:SPACING: space required before the open brace '{'
#416: FILE: arch/um/kernel/tlb.c:76:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#416: FILE: arch/um/kernel/tlb.c:76:
+	if(index == last_filled){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: arch/um/kernel/tlb.c:88:
+static int add_mprotect(unsigned long addr, unsigned long len, int r, int w, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: arch/um/kernel/tlb.c:89:
+^I^I^Iint x, struct host_vm_op *ops, int index, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: arch/um/kernel/tlb.c:91:
+^I^I^Ivoid *(*do_ops)(union mm_context *, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/um/kernel/tlb.c:92:
+			void *(*do_ops)(union mm_context *, 
+				       struct host_vm_op *, int, int, void *))

ERROR:SPACING: space required before the open brace '{'
#436: FILE: arch/um/kernel/tlb.c:96:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#436: FILE: arch/um/kernel/tlb.c:96:
+	if(index != -1){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MPROTECT'
#438: FILE: arch/um/kernel/tlb.c:98:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.r == r'
#438: FILE: arch/um/kernel/tlb.c:98:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.w == w'
#438: FILE: arch/um/kernel/tlb.c:98:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.x == x'
#438: FILE: arch/um/kernel/tlb.c:98:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: arch/um/kernel/tlb.c:98:
+		if((last->type == MPROTECT) &&

ERROR:SPACING: space required before the open brace '{'
#441: FILE: arch/um/kernel/tlb.c:101:
+		   (last->u.mprotect.x == x)){

ERROR:SPACING: space required before the open brace '{'
#447: FILE: arch/um/kernel/tlb.c:107:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#447: FILE: arch/um/kernel/tlb.c:107:
+	if(index == last_filled){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: arch/um/kernel/tlb.c:126:
+^I^I      void *(*do_ops)(union mm_context *, struct host_vm_op *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: arch/um/kernel/tlb.c:136:
+        struct host_vm_op ops[1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/um/kernel/tlb.c:136:
+        struct host_vm_op ops[1];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: arch/um/kernel/tlb.c:137:
+        void *flush = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/um/kernel/tlb.c:137:
+        void *flush = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: arch/um/kernel/tlb.c:142:
+        ops[0].type = NONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: arch/um/kernel/tlb.c:142:
+        ops[0].type = NONE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: arch/um/kernel/tlb.c:152:
+                                                      &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/um/kernel/tlb.c:152:
+                                                      &flush, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: arch/um/kernel/tlb.c:167:
+                                                      &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: arch/um/kernel/tlb.c:167:
+                                                      &flush, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: arch/um/kernel/tlb.c:182:
+                                                      &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: arch/um/kernel/tlb.c:182:
+                                                      &flush, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: arch/um/kernel/tlb.c:205:
+                                                    &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/um/kernel/tlb.c:205:
+                                                    &flush, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: arch/um/kernel/tlb.c:208:
+                                                   &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/um/kernel/tlb.c:208:
+                                                   &flush, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: arch/um/kernel/tlb.c:213:
+                                                &flush, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: arch/um/kernel/tlb.c:213:
+                                                &flush, do_ops);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156361.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 117 errors, 69 warnings, 23 checks, 632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156361.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
