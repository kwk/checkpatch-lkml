ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: fs/Kconfig:61:
+^I  If you do not use a block device that is capable of using this, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#79: FILE: fs/ext2/ext2.h:150:
+extern struct file_operations ext2_xip_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#83: FILE: fs/ext2/ext2.h:154:
+extern struct address_space_operations ext2_aops_xip;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#94: FILE: fs/ext2/file.c:58:
+struct file_operations ext2_xip_file_operations = {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: fs/ext2/inode.c:602:
+		err = ext2_clear_xip_target (inode,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: fs/ext2/inode.c:603:
+		err = ext2_clear_xip_target (inode,
+			le32_to_cpu(chain[depth-1].key));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#133: FILE: fs/ext2/inode.c:603:
+			le32_to_cpu(chain[depth-1].key));
 			                       ^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#145: FILE: fs/ext2/inode.c:705:
+struct address_space_operations ext2_aops_xip = {

CHECK:CAMELCASE: Avoid CamelCase: <Opt_user_xattr>
#231: FILE: fs/ext2/super.c:261:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl, Opt_xip,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nouser_xattr>
#231: FILE: fs/ext2/super.c:261:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl, Opt_xip,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acl>
#231: FILE: fs/ext2/super.c:261:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl, Opt_xip,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noacl>
#231: FILE: fs/ext2/super.c:261:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl, Opt_xip,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xip>
#231: FILE: fs/ext2/super.c:261:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl, Opt_xip,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#249: FILE: fs/ext2/super.c:404:
+			set_opt (sbi->s_mount_opt, XIP);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: fs/ext2/super.c:406:
+			printk("EXT2 xip option not supported\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: fs/ext2/super.c:653:
+	ext2_xip_verify_sb(sb); /* see if bdev supports xip, unset
+				    EXT2_MOUNT_XIP if not */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: fs/ext2/super.c:653:
+				    EXT2_MOUNT_XIP if not */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'blocksize != PAGE_SIZE'
#271: FILE: fs/ext2/super.c:683:
+	if ((ext2_use_xip(sb)) && ((blocksize != PAGE_SIZE) ||
+				  (sb->s_blocksize != blocksize))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_blocksize != blocksize'
#271: FILE: fs/ext2/super.c:683:
+	if ((ext2_use_xip(sb)) && ((blocksize != PAGE_SIZE) ||
+				  (sb->s_blocksize != blocksize))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: fs/ext2/super.c:684:
+	if ((ext2_use_xip(sb)) && ((blocksize != PAGE_SIZE) ||
+				  (sb->s_blocksize != blocksize))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: fs/ext2/super.c:686:
+			printk("XIP: Unsupported blocksize\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: fs/ext2/super.c:950:
+^Iif (((sbi->s_mount_opt & EXT2_MOUNT_XIP) != $

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#296: FILE: fs/ext2/super.c:953:
+		ext2_warning(sb, __FUNCTION__, "busy inodes while remounting "\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#296: FILE: fs/ext2/super.c:953:
+		ext2_warning(sb, __FUNCTION__, "busy inodes while remounting "\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#305: FILE: fs/ext2/xip.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#306: FILE: fs/ext2/xip.c:2:
+ *  linux/fs/ext2/xip.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: fs/ext2/xip.c:19:
+	BUG_ON(!inode->i_sb->s_bdev->bd_disk->fops->direct_access);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: fs/ext2/xip.c:21:
+		->direct_access(inode->i_sb->s_bdev,sector,data);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: fs/ext2/xip.c:21:
+		->direct_access(inode->i_sb->s_bdev,sector,data);
 		                                          ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#328: FILE: fs/ext2/xip.c:24:
+int
+ext2_clear_xip_target(struct inode *inode, int block) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: fs/ext2/xip.c:26:
+	sector_t sector = block*(PAGE_SIZE/512);
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#330: FILE: fs/ext2/xip.c:26:
+	sector_t sector = block*(PAGE_SIZE/512);
 	                                  ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#337: FILE: fs/ext2/xip.c:33:
+	clear_page((void*)data);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: fs/ext2/xip.c:40:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_bdev == NULL'
#346: FILE: fs/ext2/xip.c:42:
+		if ((sb->s_bdev == NULL) ||
+			sb->s_bdev->bd_disk == NULL ||
+			sb->s_bdev->bd_disk->fops == NULL ||
+			sb->s_bdev->bd_disk->fops->direct_access == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_bdev"
#346: FILE: fs/ext2/xip.c:42:
+		if ((sb->s_bdev == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: fs/ext2/xip.c:43:
+		if ((sb->s_bdev == NULL) ||
+			sb->s_bdev->bd_disk == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_bdev->bd_disk"
#347: FILE: fs/ext2/xip.c:43:
+			sb->s_bdev->bd_disk == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_bdev->bd_disk->fops"
#348: FILE: fs/ext2/xip.c:44:
+			sb->s_bdev->bd_disk->fops == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_bdev->bd_disk->fops->direct_access"
#349: FILE: fs/ext2/xip.c:45:
+			sb->s_bdev->bd_disk->fops->direct_access == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#351: FILE: fs/ext2/xip.c:47:
+			ext2_warning(sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/ext2/xip.c:48:
+			ext2_warning(sb, __FUNCTION__,
+				"ignoring xip option - not supported by bdev");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: fs/ext2/xip.c:53:
+struct page* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: fs/ext2/xip.c:55:
+ext2_get_xip_page(struct address_space *mapping, sector_t blockno,
+		   int create)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#367: FILE: fs/ext2/xip.c:63:
+	rc = ext2_get_block(mapping->host, blockno/(PAGE_SIZE/512) , &tmp,
 	                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#367: FILE: fs/ext2/xip.c:63:
+	rc = ext2_get_block(mapping->host, blockno/(PAGE_SIZE/512) , &tmp,
 	                                                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#367: FILE: fs/ext2/xip.c:63:
+	rc = ext2_get_block(mapping->host, blockno/(PAGE_SIZE/512) , &tmp,
 	                                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/ext2/xip.c:64:
+	rc = ext2_get_block(mapping->host, blockno/(PAGE_SIZE/512) , &tmp,
+				create);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: fs/ext2/xip.c:69:
+		BUG_ON(create);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxO)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:WxO)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		                                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#378: FILE: fs/ext2/xip.c:74:
+		(mapping->host,tmp.b_blocknr*(PAGE_SIZE/512) ,&data);
 		                                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#389: FILE: fs/ext2/xip.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#390: FILE: fs/ext2/xip.h:2:
+ *  linux/fs/ext2/xip.h

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#397: FILE: fs/ext2/xip.h:9:
+extern void ext2_xip_verify_sb (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: fs/ext2/xip.h:9:
+extern void ext2_xip_verify_sb (struct super_block *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#398: FILE: fs/ext2/xip.h:10:
+extern int ext2_clear_xip_target (struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#398: FILE: fs/ext2/xip.h:10:
+extern int ext2_clear_xip_target (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#398: FILE: fs/ext2/xip.h:10:
+extern int ext2_clear_xip_target (struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#398: FILE: fs/ext2/xip.h:10:
+extern int ext2_clear_xip_target (struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#400: FILE: fs/ext2/xip.h:12:
+static inline int ext2_use_xip (struct super_block *sb)

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: fs/ext2/xip.h:15:
+	struct ext2_sb_info *sbi = EXT2_SB(sb);
+	return (sbi->s_mount_opt & EXT2_MOUNT_XIP);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#405: FILE: fs/ext2/xip.h:17:
+}
+struct page* ext2_get_xip_page (struct address_space *, sector_t, int);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#405: FILE: fs/ext2/xip.h:17:
+struct page* ext2_get_xip_page (struct address_space *, sector_t, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#405: FILE: fs/ext2/xip.h:17:
+struct page* ext2_get_xip_page (struct address_space *, sector_t, int);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#406: FILE: fs/ext2/xip.h:18:
+#define mapping_is_xip(map) unlikely(map->a_ops->get_xip_page)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 26 warnings, 29 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
