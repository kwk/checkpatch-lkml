WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#108: 
> isn't a very interesting problem (at least not since the 70's or earlier).

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: include/linux/loadcontrol.h:1:
+#ifndef _LINUX_LOADCONTROL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#139: FILE: include/linux/loadcontrol.h:4:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/loadcontrol.h:10:
+extern void loadcontrol(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/loadcontrol.h:11:
+extern void thrashing(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#146: FILE: include/linux/loadcontrol.h:11:
+extern void thrashing(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: include/linux/sched.h:586:
+extern int task_interactive(task_t * p);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/sched.h:586:
+extern int task_interactive(task_t * p);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/swap.h:177:
+extern int shrink_list(struct list_head *, unsigned int, int *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#177: FILE: include/linux/swap.h:177:
+extern int shrink_list(struct list_head *, unsigned int, int *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#177: FILE: include/linux/swap.h:177:
+extern int shrink_list(struct list_head *, unsigned int, int *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#177: FILE: include/linux/swap.h:177:
+extern int shrink_list(struct list_head *, unsigned int, int *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#177: FILE: include/linux/swap.h:177:
+extern int shrink_list(struct list_head *, unsigned int, int *, int *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: kernel/loadcontrol.c:1:
+#include <linux/mm.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#190: FILE: kernel/loadcontrol.c:6:
+void thrashing(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#190: FILE: kernel/loadcontrol.c:6:
+void thrashing(unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/loadcontrol.c:23:
+		prepare_to_wait_exclusive(&loadctrl_wq, &wait,
+				TASK_UNINTERRUPTIBLE);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void loadcontrol() should probably be void loadcontrol(void)
#219: FILE: kernel/loadcontrol.c:35:
+void loadcontrol()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#230: FILE: kernel/loadcontrol.c:46:
+	current->flags &= ~(PF_STUN|PF_YIELD|PF_MEMALLOC);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#230: FILE: kernel/loadcontrol.c:46:
+	current->flags &= ~(PF_STUN|PF_YIELD|PF_MEMALLOC);
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: kernel/loadcontrol.c:58:
+	unsigned int out = x;
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#242: FILE: kernel/loadcontrol.c:58:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                               ^

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#242: FILE: kernel/loadcontrol.c:58:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#242: FILE: kernel/loadcontrol.c:58:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)1' could be '1U'
#242: FILE: kernel/loadcontrol.c:58:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#243: FILE: kernel/loadcontrol.c:59:
+	if (x) out -= out >> 2;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#244: FILE: kernel/loadcontrol.c:60:
+	return (out ? out : 1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: kernel/loadcontrol.c:106:
+	if (cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_ADMIN) ||
+				p->uid == 0 || p->euid == 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: kernel/loadcontrol.c:125:
+static struct task_struct * pick_bad_process(int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: kernel/loadcontrol.c:134:
+			int points = badness(p, flags);
+			if (points > maxpoints) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#327: FILE: kernel/loadcontrol.c:143:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#338: FILE: kernel/loadcontrol.c:154:
+	p = pick_bad_process(PF_STUN|action);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#344: FILE: kernel/loadcontrol.c:160:
+	p->flags |= action|PF_MEMALLOC;
 	                  ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#382: FILE: kernel/sched.c:1469:
+static unsigned long stun_time(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: kernel/sched.c:1472:
+	int ql = atomic_read(&lctrl_waiting);
+	if (ql == 1)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#386: FILE: kernel/sched.c:1473:
+		ret = 5*HZ;
 		       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#388: FILE: kernel/sched.c:1475:
+		ret = 3*HZ;
 		       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#390: FILE: kernel/sched.c:1477:
+		ret = 2*HZ;
 		       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#392: FILE: kernel/sched.c:1479:
+		ret = 1*HZ;
 		       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#394: FILE: kernel/sched.c:1481:
+		ret = HZ/2;
 		        ^

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#405: FILE: kernel/sched.c:1515:
+	if (unlikely(waitqueue_active(&loadctrl_wq))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: kernel/sched.c:1518:
+		unsigned long wait = stun_time();
+		if (time_before(jiffies, prev_unstun + wait) && prev_unstun)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#451: FILE: arch/i386/kernel/signal.c:573:
+	if (current->flags & (PF_STUN|PF_YIELD)) {
 	                             ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319460.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 25 warnings, 17 checks, 307 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319460.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
