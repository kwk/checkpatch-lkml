WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	           ChangeSet	1.1414  -> 1.1415 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	drivers/serial/8250_pnp.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	drivers/pnp/interface.c	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	  drivers/pnp/base.h	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	  drivers/pnp/core.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	drivers/pnp/support.c	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	drivers/pnp/isapnp/core.c	1.36    -> 1.37   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	drivers/pnp/resource.c	1.13    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	drivers/pnp/quirks.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#	drivers/pnp/manager.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#	 include/linux/pnp.h	1.20    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# 03/06/18	ambx1@neo.rr.com	1.1415

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# [PNP] Resource Management Cleanups and Updates

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# This patch does the following...

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# 1.) changes struct pnp_resources to pnp_option for clarity

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# 2.) greatly cleans up resource option registration

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# 3.) removes some of the current conflict prevention code in

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# order to increase flexibility, (users will have more control)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# 4.) various manager cleanups, resulting code is more efficient

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# 5.) fixes the locking bugs many have reported (now uses a mutex)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# 6.) removes the conflict displaying interface

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#  - it is better to handle such things in user space

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# 7.) also many misc. cleanups

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#60: 
--- a/drivers/pnp/base.h	Wed Jun 18 23:02:24 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#148: FILE: drivers/pnp/interface.c:181:
+		switch (option->priority) {
+			case PNP_RES_PRIORITY_PREFERRED:
[...]
+			case PNP_RES_PRIORITY_ACCEPTABLE:
[...]
+			case PNP_RES_PRIORITY_FUNCTIONAL:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: drivers/pnp/interface.c:207:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: drivers/pnp/interface.c:211:
+	struct pnp_option * independent = dev->independent;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: drivers/pnp/interface.c:212:
+	struct pnp_option * dependent = dev->dependent;

ERROR:SPACING: space required before the open brace '{'
#206: FILE: drivers/pnp/interface.c:226:
+	while (dependent){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/pnp/interface.c:236:
+static DEVICE_ATTR(options,S_IRUGO,pnp_show_options,NULL);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/pnp/interface.c:236:
+static DEVICE_ATTR(options,S_IRUGO,pnp_show_options,NULL);
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/pnp/interface.c:236:
+static DEVICE_ATTR(options,S_IRUGO,pnp_show_options,NULL);
                                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#263: FILE: drivers/pnp/interface.c:236:
+static DEVICE_ATTR(options,S_IRUGO,pnp_show_options,NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#385: FILE: drivers/pnp/interface.c:317:
+	if (!strnicmp(buf,"fill",4)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#385: FILE: drivers/pnp/interface.c:317:
+	if (!strnicmp(buf,"fill",4)) {
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#449: FILE: drivers/pnp/interface.c:441:
+	device_create_file(&dev->dev,&dev_attr_options);
 	                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#449: FILE: drivers/pnp/interface.c:441:
+	device_create_file(&dev->dev,&dev_attr_options);
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: drivers/pnp/isapnp/core.c:474:
+static void __init isapnp_parse_irq_resource(struct pnp_option *option,
+					       int size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: drivers/pnp/isapnp/core.c:497:
+                                    ^I       int size)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#499: FILE: drivers/pnp/isapnp/core.c:497:
+                                    ^I       int size)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: drivers/pnp/isapnp/core.c:497:
+static void __init isapnp_parse_dma_resource(struct pnp_option *option,
+                                    	       int size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/pnp/isapnp/core.c:497:
+                                    ^I       int size)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: drivers/pnp/isapnp/core.c:517:
+static void __init isapnp_parse_port_resource(struct pnp_option *option,
+						int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#528: FILE: drivers/pnp/isapnp/core.c:531:
+	pnp_register_port_resource(option,port);
 	                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/pnp/isapnp/core.c:540:
+static void __init isapnp_parse_fixed_port_resource(struct pnp_option *option,
+						      int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: drivers/pnp/isapnp/core.c:553:
+	pnp_register_port_resource(option,port);
 	                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/pnp/isapnp/core.c:562:
+static void __init isapnp_parse_mem_resource(struct pnp_option *option,
+					       int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#568: FILE: drivers/pnp/isapnp/core.c:576:
+	pnp_register_mem_resource(option,mem);
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: drivers/pnp/isapnp/core.c:585:
+static void __init isapnp_parse_mem32_resource(struct pnp_option *option,
+						 int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#588: FILE: drivers/pnp/isapnp/core.c:599:
+	pnp_register_mem_resource(option,mem);
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: drivers/pnp/isapnp/core.c:607:
+static void __init isapnp_parse_fixed_mem32_resource(struct pnp_option *option,
+						       int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#607: FILE: drivers/pnp/isapnp/core.c:620:
+	pnp_register_mem_resource(option,mem);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#660: FILE: drivers/pnp/isapnp/core.c:675:
+				pnp_add_card_device(card,dev);
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: drivers/pnp/isapnp/core.c:711:
+			option = pnp_register_dependent_option(dev,priority);
 			                                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#863: FILE: drivers/pnp/isapnp/core.c:1009:
+			res->irq_resource[tmp].start = res->irq_resource[tmp].end = ret;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#870: FILE: drivers/pnp/isapnp/core.c:1016:
+			res->dma_resource[tmp].start = res->dma_resource[tmp].end = ret;

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1008: FILE: drivers/pnp/manager.c:85:
+	*end = *start + rule->size -1;
 	                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1037: FILE: drivers/pnp/manager.c:108:
+static int pnp_assign_irq(struct pnp_dev * dev, struct pnp_irq *rule, int idx)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1120: FILE: drivers/pnp/manager.c:139:
+		if(rule->map & (1<<xtab[i])) {
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#1120: FILE: drivers/pnp/manager.c:139:
+		if(rule->map & (1<<xtab[i])) {

ERROR:SPACING: space required before the open parenthesis '('
#1122: FILE: drivers/pnp/manager.c:141:
+			if(pnp_check_irq(dev, idx))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1448: FILE: drivers/pnp/manager.c:179:
+		if(rule->map & (1<<xtab[i])) {
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#1448: FILE: drivers/pnp/manager.c:179:
+		if(rule->map & (1<<xtab[i])) {

ERROR:SPACING: space required before the open parenthesis '('
#1450: FILE: drivers/pnp/manager.c:181:
+			if(pnp_check_dma(dev, idx))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1544: FILE: drivers/pnp/manager.c:229:
+static void pnp_clean_resources(struct pnp_resource_table * res)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1644: FILE: drivers/pnp/manager.c:313:
+	if (depnum) {
[...]
+	} else if (dev->dependent)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1647: FILE: drivers/pnp/manager.c:316:
+		int i;
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1647: FILE: drivers/pnp/manager.c:316:
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
 		      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1647: FILE: drivers/pnp/manager.c:316:
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1647: FILE: drivers/pnp/manager.c:316:
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
 		            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1647: FILE: drivers/pnp/manager.c:316:
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1647: FILE: drivers/pnp/manager.c:316:
+		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
 		                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#1648: FILE: drivers/pnp/manager.c:317:
+			if(!dep)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1650: FILE: drivers/pnp/manager.c:319:
+		port =dep->port;
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#1751: FILE: drivers/pnp/manager.c:422:
+	if(!dev)

ERROR:SPACING: space required before the open parenthesis '('
#1754: FILE: drivers/pnp/manager.c:425:
+	if(!pnp_can_configure(dev)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1914: FILE: drivers/pnp/manager.c:536:
+EXPORT_SYMBOL(pnp_assign_resources);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1949: FILE: drivers/pnp/quirks.c:41:
+	for ( ; res ; res = res->next ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1961: FILE: drivers/pnp/quirks.c:67:
+	for ( ; res ; res = res->next ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1979: FILE: drivers/pnp/quirks.c:94:
+	for( ; res ; res = res->next ) {

ERROR:SPACING: space required before the open parenthesis '('
#1979: FILE: drivers/pnp/quirks.c:94:
+	for( ; res ; res = res->next ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2019: FILE: drivers/pnp/resource.c:25:
+						 * -1=off (:default), 0=off (set by user), 1=on */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2032: FILE: drivers/pnp/resource.c:37:
+static struct pnp_option * pnp_build_option(int priority)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2070: FILE: drivers/pnp/resource.c:53:
+struct pnp_option * pnp_register_independent_option(struct pnp_dev *dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2099: FILE: drivers/pnp/resource.c:68:
+struct pnp_option * pnp_register_dependent_option(struct pnp_dev *dev, int priority)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2118: FILE: drivers/pnp/resource.c:76:
+	if (dev->dependent) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2120: FILE: drivers/pnp/resource.c:78:
+		struct pnp_option *parent = dev->dependent;
+		while (parent->next)

CHECK:BRACES: Unbalanced braces around else statement
#2123: FILE: drivers/pnp/resource.c:81:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2309: FILE: drivers/pnp/resource.c:256:
+	 * device is active because it itself may be in use */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2371: FILE: drivers/pnp/resource.c:288:
+				if (ranged_conflict(port,end,tport,tend))
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2371: FILE: drivers/pnp/resource.c:288:
+				if (ranged_conflict(port,end,tport,tend))
 				                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2371: FILE: drivers/pnp/resource.c:288:
+				if (ranged_conflict(port,end,tport,tend))
 				                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2396: FILE: drivers/pnp/resource.c:310:
+	 * device is active because it itself may be in use */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2454: FILE: drivers/pnp/resource.c:342:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2454: FILE: drivers/pnp/resource.c:342:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2454: FILE: drivers/pnp/resource.c:342:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2510: FILE: drivers/pnp/resource.c:396:
+	 * device is active because it itself may be in use */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tdev->res.irq_resource[tmp].start == *irq'
#2549: FILE: drivers/pnp/resource.c:409:
+				if ((tdev->res.irq_resource[tmp].start == *irq))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#2549: FILE: drivers/pnp/resource.c:409:
+				if ((tdev->res.irq_resource[tmp].start == *irq))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2595: FILE: drivers/pnp/resource.c:449:
+	 * device is active because it itself may be in use */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tdev->res.dma_resource[tmp].start == *dma'
#2699: FILE: drivers/pnp/resource.c:462:
+				if ((tdev->res.dma_resource[tmp].start == *dma))

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#2699: FILE: drivers/pnp/resource.c:462:
+				if ((tdev->res.dma_resource[tmp].start == *dma))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2759: FILE: drivers/pnp/resource.c:472:
+EXPORT_SYMBOL(pnp_register_dependent_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2761: FILE: drivers/pnp/resource.c:474:
+EXPORT_SYMBOL(pnp_register_irq_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2762: FILE: drivers/pnp/resource.c:475:
+EXPORT_SYMBOL(pnp_register_dma_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2763: FILE: drivers/pnp/resource.c:476:
+EXPORT_SYMBOL(pnp_register_port_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2764: FILE: drivers/pnp/resource.c:477:
+EXPORT_SYMBOL(pnp_register_mem_resource);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2811: FILE: drivers/pnp/support.c:265:
+	pnp_register_mem_resource(option,mem);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2825: FILE: drivers/pnp/support.c:280:
+	pnp_register_mem_resource(option,mem);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2839: FILE: drivers/pnp/support.c:294:
+	pnp_register_mem_resource(option,mem);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2855: FILE: drivers/pnp/support.c:309:
+	pnp_register_irq_resource(option,irq);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2869: FILE: drivers/pnp/support.c:321:
+	pnp_register_dma_resource(option,dma);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2883: FILE: drivers/pnp/support.c:336:
+	pnp_register_port_resource(option,port);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2897: FILE: drivers/pnp/support.c:350:
+	pnp_register_port_resource(option,port);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2923: FILE: drivers/pnp/support.c:383:
+				possible_mem(p,len,option);
 				              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2923: FILE: drivers/pnp/support.c:383:
+				possible_mem(p,len,option);
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2931: FILE: drivers/pnp/support.c:390:
+				possible_mem32(p,len,option);
 				                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2931: FILE: drivers/pnp/support.c:390:
+				possible_mem32(p,len,option);
 				                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2939: FILE: drivers/pnp/support.c:397:
+				possible_fixed_mem32(p,len,option);
 				                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2939: FILE: drivers/pnp/support.c:397:
+				possible_fixed_mem32(p,len,option);
 				                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2948: FILE: drivers/pnp/support.c:418:
+			possible_irq(p,len,option);
 			              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2948: FILE: drivers/pnp/support.c:418:
+			possible_irq(p,len,option);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2956: FILE: drivers/pnp/support.c:425:
+			possible_dma(p,len,option);
 			              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2956: FILE: drivers/pnp/support.c:425:
+			possible_dma(p,len,option);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2987: FILE: drivers/pnp/support.c:450:
+			possible_port(p,len,option);
 			               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2987: FILE: drivers/pnp/support.c:450:
+			possible_port(p,len,option);
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2995: FILE: drivers/pnp/support.c:457:
+			possible_fixed_port(p,len,option);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2995: FILE: drivers/pnp/support.c:457:
+			possible_fixed_port(p,len,option);
 			                         ^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#3019: FILE: drivers/serial/8250_pnp.c:318:
 static char *modem_names[] __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3026: FILE: drivers/serial/8250_pnp.c:336:
+static int __devinit check_resources(struct pnp_option *option)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3029: FILE: drivers/serial/8250_pnp.c:339:
+	struct pnp_option *tmp;
+	if (!option)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3034: FILE: drivers/serial/8250_pnp.c:344:
+		struct pnp_port *port;
+		for (port = tmp->port; port; port = port->next)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->size == 8'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->min == 0x2f8'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->min == 0x3f8'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->min == 0x2e8'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->min == 0x8b0'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->min == 0x3e8'
#3035: FILE: drivers/serial/8250_pnp.c:345:
+			if ((port->size == 8) &&
+			    ((port->min == 0x2f8) ||
+			     (port->min == 0x3f8) ||
+			     (port->min == 0x2e8) ||
+#ifdef CONFIG_X86_PC9800
+			     (port->min == 0x8b0) ||
+#endif
+			     (port->min == 0x3e8)))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3057: FILE: drivers/serial/8250_pnp.c:370:
+static int __devinit serial_pnp_guess_board(struct pnp_dev *dev, int *flags)

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#3143: FILE: include/linux/pnp.h:193:
+	struct pnp_id	* id;	/* supported EISA IDs*/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3147: FILE: include/linux/pnp.h:197:
+	struct pnp_option * independent;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3148: FILE: include/linux/pnp.h:198:
+	struct pnp_option * dependent;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#3173: FILE: include/linux/pnp.h:263:
+#define pnp_can_configure(dev)	((!(dev)->active) && \
 				 ((dev)->capabilities & PNP_CONFIGURABLE))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3212: FILE: include/linux/pnp.h:397:
+struct pnp_option * pnp_register_independent_option(struct pnp_dev *dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3213: FILE: include/linux/pnp.h:398:
+struct pnp_option * pnp_register_dependent_option(struct pnp_dev *dev, int priority);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3241: FILE: include/linux/pnp.h:417:
+int compare_pnp_id(struct pnp_id * pos, const char * id);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3241: FILE: include/linux/pnp.h:417:
+int compare_pnp_id(struct pnp_id * pos, const char * id);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#3284: FILE: include/linux/pnp.h:445:
+static inline struct pnp_option * pnp_register_independent_option(struct pnp_dev *dev) { return NULL; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3284: FILE: include/linux/pnp.h:445:
+static inline struct pnp_option * pnp_register_independent_option(struct pnp_dev *dev) { return NULL; }

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#3285: FILE: include/linux/pnp.h:446:
+static inline struct pnp_option * pnp_register_dependent_option(struct pnp_dev *dev, int priority) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3285: FILE: include/linux/pnp.h:446:
+static inline struct pnp_option * pnp_register_dependent_option(struct pnp_dev *dev, int priority) { return NULL; }

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3286: FILE: include/linux/pnp.h:447:
+static inline int pnp_register_irq_resource(struct pnp_option *option, struct pnp_irq *data) { return -ENODEV; }

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3287: FILE: include/linux/pnp.h:448:
+static inline int pnp_register_dma_resource(struct pnp_option *option, struct pnp_dma *data) { return -ENODEV; }

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#3288: FILE: include/linux/pnp.h:449:
+static inline int pnp_register_port_resource(struct pnp_option *option, struct pnp_port *data) { return -ENODEV; }

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3289: FILE: include/linux/pnp.h:450:
+static inline int pnp_register_mem_resource(struct pnp_option *option, struct pnp_mem *data) { return -ENODEV; }

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#3297: FILE: include/linux/pnp.h:458:
+static inline void pnp_resource_change(struct resource *resource, unsigned long start, unsigned long size) { }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3308: FILE: include/linux/pnp.h:461:
+static inline int pnp_is_active(struct pnp_dev * dev) { return 0; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3312: FILE: include/linux/pnp.h:465:
+static inline int compare_pnp_id(struct pnp_id * pos, const char * id) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3312: FILE: include/linux/pnp.h:465:
+static inline int compare_pnp_id(struct pnp_id * pos, const char * id) { return -ENODEV; }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361330.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 81 errors, 64 warnings, 25 checks, 3136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361330.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
