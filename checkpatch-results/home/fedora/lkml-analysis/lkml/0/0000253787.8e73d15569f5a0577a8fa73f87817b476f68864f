WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: kernel/spinlock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#70: FILE: kernel/spinlock.c:14:
+#define __lockfunc fastcall __attribute__((section(".spinlock.text")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".spinlock.text") over __attribute__((section(".spinlock.text")))
#70: FILE: kernel/spinlock.c:14:
+#define __lockfunc fastcall __attribute__((section(".spinlock.text")))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: kernel/spinlock.c:66:
+EXPORT_SYMBOL(_write_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: include/linux/spinlock.h:29:
+        ".text.lock." __stringify(KBUILD_BASENAME)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: include/linux/spinlock.h:29:
+        ".text.lock." __stringify(KBUILD_BASENAME)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: include/linux/spinlock.h:32:
+        ".subsection 1\n\t"                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/spinlock.h:32:
+        ".subsection 1\n\t"                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: include/linux/spinlock.h:33:
+        extra                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/spinlock.h:33:
+        extra                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: include/linux/spinlock.h:34:
+        ".ifndef " LOCK_SECTION_NAME "\n\t"     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/linux/spinlock.h:34:
+        ".ifndef " LOCK_SECTION_NAME "\n\t"     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: include/linux/spinlock.h:35:
+        LOCK_SECTION_NAME ":\n\t"               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: include/linux/spinlock.h:35:
+        LOCK_SECTION_NAME ":\n\t"               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: include/linux/spinlock.h:36:
+        ".endif\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: include/linux/spinlock.h:36:
+        ".endif\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: include/linux/spinlock.h:39:
+        ".previous\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: include/linux/spinlock.h:39:
+        ".previous\n\t"$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#418: FILE: include/linux/spinlock.h:207:
+#define spin_unlock_wait(lock)	(void)(lock);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#418: FILE: include/linux/spinlock.h:207:
+#define spin_unlock_wait(lock)	(void)(lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: include/linux/spinlock.h:208:
+#define _raw_spin_unlock(lock) do { (void)(lock); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#419: FILE: include/linux/spinlock.h:208:
+#define _raw_spin_unlock(lock) do { (void)(lock); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#474: FILE: include/linux/spinlock.h:236:
+				1 : ({preempt_enable(); local_bh_enable(); 0;});})
 				                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#474: FILE: include/linux/spinlock.h:236:
+				1 : ({preempt_enable(); local_bh_enable(); 0;});})
 				                                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#690: FILE: include/linux/spinlock.h:409:
+extern void _metered_spin_lock   (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/linux/spinlock.h:409:
+extern void _metered_spin_lock   (spinlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#691: FILE: include/linux/spinlock.h:410:
+extern void _metered_spin_unlock (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/linux/spinlock.h:410:
+extern void _metered_spin_unlock (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/spinlock.h:411:
+extern int  _metered_spin_trylock(spinlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#693: FILE: include/linux/spinlock.h:412:
+extern void _metered_read_lock    (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: include/linux/spinlock.h:412:
+extern void _metered_read_lock    (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#694: FILE: include/linux/spinlock.h:413:
+extern void _metered_read_unlock  (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#694: FILE: include/linux/spinlock.h:413:
+extern void _metered_read_unlock  (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#695: FILE: include/linux/spinlock.h:414:
+extern void _metered_write_lock   (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: include/linux/spinlock.h:414:
+extern void _metered_write_lock   (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: include/linux/spinlock.h:415:
+extern void _metered_write_unlock (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#696: FILE: include/linux/spinlock.h:415:
+extern void _metered_write_unlock (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#697: FILE: include/linux/spinlock.h:416:
+extern int  _metered_write_trylock(rwlock_t *lock);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#723: FILE: include/linux/spinlock.h:442:
+#define spin_lock_irqsave(lock, flags)	flags = _spin_lock_irqsave(lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#724: FILE: include/linux/spinlock.h:443:
+#define read_lock_irqsave(lock, flags)	flags = _read_lock_irqsave(lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#725: FILE: include/linux/spinlock.h:444:
+#define write_lock_irqsave(lock, flags)	flags = _write_lock_irqsave(lock)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 18 warnings, 8 checks, 707 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
