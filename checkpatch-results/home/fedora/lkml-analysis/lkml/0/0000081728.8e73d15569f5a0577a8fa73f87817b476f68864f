WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Shailabh Nagar <nagar@watson.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#37: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

WARNING:TYPO_SPELLING: 'minimun' may be misspelled - perhaps 'minimum'?
#56: FILE: include/linux/res_group.h:58:
+	int min_shares; /* minimun fraction of parent's resources allowed */
 	                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: include/linux/res_group.h:68:
+^I^I * ^I^I^ISum of min_shares of children)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: kernel/res_group/shares.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: kernel/res_group/shares.c:39:
+	return ((share == SHARE_DONT_CARE) ||
+			(share == SHARE_UNSUPPORTED) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: kernel/res_group/shares.c:59:
+static inline void child_min_shares_changed(struct res_shares *parent,
+				   int child_cur_min_shares,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: kernel/res_group/shares.c:73:
+static inline void set_cur_max_shares(struct resource_group *parent,
+					struct res_controller *ctlr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'min_shares_increase > parent->unused_min_shares'
#182: FILE: kernel/res_group/shares.c:106:
+	if (parent &&
+	    ((is_share_quantitative(child->min_shares) &&
+	      (min_shares_increase > parent->unused_min_shares)) ||
+	     (is_share_quantitative(child->max_shares) &&
+	      (child->max_shares > parent->child_shares_divisor))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'child->max_shares > parent->child_shares_divisor'
#182: FILE: kernel/res_group/shares.c:106:
+	if (parent &&
+	    ((is_share_quantitative(child->min_shares) &&
+	      (min_shares_increase > parent->unused_min_shares)) ||
+	     (is_share_quantitative(child->max_shares) &&
+	      (child->max_shares > parent->child_shares_divisor))))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current_usage > child->child_shares_divisor'
#201: FILE: kernel/res_group/shares.c:125:
+	if (!is_share_quantitative(child->child_shares_divisor) ||
+			(current_usage > child->child_shares_divisor))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: kernel/res_group/shares.c:126:
+	if (!is_share_quantitative(child->child_shares_divisor) ||
+			(current_usage > child->child_shares_divisor))

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#207: FILE: kernel/res_group/shares.c:131:
+	 * enough to accomodate largest max_shares of any of my child
 	             ^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'child->min_shares > child->max_shares'
#213: FILE: kernel/res_group/shares.c:137:
+	if (is_share_quantitative(child->min_shares) &&
+			is_share_quantitative(child->max_shares) &&
+			(child->min_shares > child->max_shares))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: kernel/res_group/shares.c:138:
+	if (is_share_quantitative(child->min_shares) &&
+			is_share_quantitative(child->max_shares) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: kernel/res_group/shares.c:154:
+static int set_shares(const struct res_shares *new,
+		    struct res_shares *child_shares,

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: kernel/res_group/shares.c:155:
+    ^I^I    struct res_shares *parent_shares)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: kernel/res_group/shares.c:155:
+    ^I^I    struct res_shares *parent_shares)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: kernel/res_group/shares.c:155:
+    ^I^I    struct res_shares *parent_shares)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: kernel/res_group/shares.c:160:
+	BUG_ON(!new || !child_shares);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: kernel/res_group/shares.c:164:
+	if (did_share_change(new->child_shares_divisor) &&
+			change_supported(child_shares->child_shares_divisor))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: kernel/res_group/shares.c:167:
+	if (did_share_change(new->min_shares) &&
+			change_supported(child_shares->min_shares))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: kernel/res_group/shares.c:170:
+	if (did_share_change(new->max_shares) &&
+			change_supported(child_shares->max_shares))

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: kernel/res_group/shares.c:174:
+^I    ^I^I child_shares->unused_min_shares;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: kernel/res_group/shares.c:174:
+^I    ^I^I child_shares->unused_min_shares;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: kernel/res_group/shares.c:180:
+   ^I^I^I      min_shares_increase);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: kernel/res_group/shares.c:180:
+   ^I^I^I      min_shares_increase);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: kernel/res_group/shares.c:180:
+	rc = are_shares_valid(&final_shares, parent_shares, current_usage,
+   			      min_shares_increase);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: kernel/res_group/shares.c:180:
+   ^I^I^I      min_shares_increase);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: kernel/res_group/shares.c:192:
+int set_controller_shares(struct resource_group *rgroup,
+					struct res_controller *ctlr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/res_group/shares.c:220:
+	child_min_shares_changed(parent_shares, prev_min,
+				      shares->min_shares);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: kernel/res_group/shares.c:233:
+void set_shares_to_default(struct resource_group *rgroup,
+						struct res_controller *ctlr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: kernel/res_group/res_group.c:360:
+	BUG_ON(num_res_groups != 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#371: FILE: kernel/res_group/res_group.c:379:
+EXPORT_SYMBOL_GPL(res_group_teardown);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#381: FILE: include/linux/res_group_rc.h:78:
+static inline struct res_shares *get_controller_shares(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#399: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#399: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#399: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct res_shares *' should also have an identifier name
#399: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: kernel/res_group/local.h:16:
+extern int set_controller_shares(struct resource_group *,
+			struct res_controller *, const struct res_shares *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#402: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#402: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: kernel/res_group/local.h:19:
+extern void set_shares_to_default(struct resource_group *,
+						struct res_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: kernel/res_group/local.h:20:
+extern void res_group_teardown(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 22 warnings, 23 checks, 326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
