WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
host CPU to send data). On IA32 architechtures we could enable Write Combining

WARNING:TYPO_SPELLING: 'architechtures' may be misspelled - perhaps 'architectures'?
#32: 
host CPU to send data). On IA32 architechtures we could enable Write Combining
                                ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#ifdef __ia64__      

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#endif

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#60: 
arch/ia64/mm/ioremap.c) wich has a 'flags' input paramenter so that I can set
                        ^^^^

WARNING:TYPO_SPELLING: 'architechtures' may be misspelled - perhaps 'architectures'?
#61: 
the _PAGE_MA_WC attribute. I've taken a look on how other architechtures does
                                                          ^^^^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: arch/ia64/mm/ioremap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#111: FILE: arch/ia64/mm/ioremap.c:15:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: arch/ia64/mm/ioremap.c:18:
+static inline void remap_area_pte(pte_t * pte, unsigned long address, unsigned long size,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: arch/ia64/mm/ioremap.c:19:
+        unsigned long phys_addr, unsigned long flags)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: arch/ia64/mm/ioremap.c:19:
+static inline void remap_area_pte(pte_t * pte, unsigned long address, unsigned long size,
+        unsigned long phys_addr, unsigned long flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/ia64/mm/ioremap.c:19:
+        unsigned long phys_addr, unsigned long flags)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/ia64/mm/ioremap.c:21:
+        unsigned long end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/ia64/mm/ioremap.c:21:
+        unsigned long end;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: arch/ia64/mm/ioremap.c:23:
+        address &= ~PMD_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/ia64/mm/ioremap.c:23:
+        address &= ~PMD_MASK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: arch/ia64/mm/ioremap.c:24:
+        end = address + size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/ia64/mm/ioremap.c:24:
+        end = address + size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: arch/ia64/mm/ioremap.c:25:
+        if (end > PMD_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: arch/ia64/mm/ioremap.c:25:
+        if (end > PMD_SIZE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: arch/ia64/mm/ioremap.c:26:
+                end = PMD_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: arch/ia64/mm/ioremap.c:26:
+                end = PMD_SIZE;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: arch/ia64/mm/ioremap.c:28:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/ia64/mm/ioremap.c:29:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/ia64/mm/ioremap.c:29:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/ia64/mm/ioremap.c:30:
+                if (!pte_none(*pte)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/ia64/mm/ioremap.c:30:
+                if (!pte_none(*pte)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: arch/ia64/mm/ioremap.c:31:
+                        printk("remap_area_pte: page already exists\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/ia64/mm/ioremap.c:31:
+                        printk("remap_area_pte: page already exists\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#127: FILE: arch/ia64/mm/ioremap.c:31:
+                        printk("remap_area_pte: page already exists\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: arch/ia64/mm/ioremap.c:32:
+			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: arch/ia64/mm/ioremap.c:34:
+                set_pte(pte, mk_pte_phys(phys_addr, __pgprot(_PAGE_A | _PAGE_P | _PAGE_D |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/ia64/mm/ioremap.c:34:
+                set_pte(pte, mk_pte_phys(phys_addr, __pgprot(_PAGE_A | _PAGE_P | _PAGE_D |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: arch/ia64/mm/ioremap.c:36:
+                address += PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/ia64/mm/ioremap.c:36:
+                address += PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: arch/ia64/mm/ioremap.c:37:
+                phys_addr += PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/ia64/mm/ioremap.c:37:
+                phys_addr += PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: arch/ia64/mm/ioremap.c:38:
+                pte++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/ia64/mm/ioremap.c:38:
+                pte++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: arch/ia64/mm/ioremap.c:39:
+        } while (address && (address < end));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/ia64/mm/ioremap.c:39:
+        } while (address && (address < end));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: arch/ia64/mm/ioremap.c:42:
+static inline int remap_area_pmd(pmd_t * pmd, unsigned long address, unsigned long size,

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: arch/ia64/mm/ioremap.c:43:
+        unsigned long phys_addr, unsigned long flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/ia64/mm/ioremap.c:43:
+static inline int remap_area_pmd(pmd_t * pmd, unsigned long address, unsigned long size,
+        unsigned long phys_addr, unsigned long flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: arch/ia64/mm/ioremap.c:43:
+        unsigned long phys_addr, unsigned long flags)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: arch/ia64/mm/ioremap.c:53:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: arch/ia64/mm/ioremap.c:55:
+		pte_t * pte = pte_alloc(&init_mm, pmd, address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: arch/ia64/mm/ioremap.c:56:
+		pte_t * pte = pte_alloc(&init_mm, pmd, address);
+		if (!pte)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: arch/ia64/mm/ioremap.c:66:
+static int remap_area_pages(unsigned long address, unsigned long phys_addr,
+				 unsigned long size, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: arch/ia64/mm/ioremap.c:69:
+	pgd_t * dir;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: arch/ia64/mm/ioremap.c:76:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: arch/ia64/mm/ioremap.c:80:
+		pmd_t *pmd;
+		pmd = pmd_alloc(&init_mm, dir, address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: arch/ia64/mm/ioremap.c:85:
+		if (remap_area_pmd(pmd, address, end - address,
+					 phys_addr + address, flags))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: arch/ia64/mm/ioremap.c:109:
+void * __ia64_ioremap(unsigned long phys_addr, unsigned long size, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: arch/ia64/mm/ioremap.c:111:
+	void * addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: arch/ia64/mm/ioremap.c:112:
+	struct vm_struct * area;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#231: FILE: arch/ia64/mm/ioremap.c:135:
+	if (flags == 0)
+	   flags = _PAGE_MA_UC;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/ia64/mm/ioremap.c:137:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#238: FILE: arch/ia64/mm/ioremap.c:142:
+	return (void *) (offset + (char *)addr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#243: FILE: arch/ia64/mm/ioremap.c:147:
+	return vfree((void *) (PAGE_MASK & (unsigned long) addr));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: include/asm-ia64/io.h:389:
+extern void * __ia64_ioremap(unsigned long offset, unsigned long size, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/asm-ia64/io.h:389:
+extern void * __ia64_ioremap(unsigned long offset, unsigned long size, unsigned long flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/asm-ia64/io.h:390:
+extern void __ia64_iounmap(void *addr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 30 warnings, 9 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
