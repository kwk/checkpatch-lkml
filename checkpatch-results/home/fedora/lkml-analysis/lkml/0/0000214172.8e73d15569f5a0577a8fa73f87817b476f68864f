WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#88: FILE: MAINTAINERS:1324:
+P:	Randy Dunlap
+M:	ebiederm@xmission.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#92: FILE: MAINTAINERS:1328:
+W:	http://developer.osdl.org/rddunlap/kexec/
+L:	linux-kernel@vger.kernel.org

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: include/linux/kexec.h:1:
+#ifndef LINUX_KEXEC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#140: FILE: include/linux/kexec.h:38:
+typedef unsigned long kimage_entry_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: include/linux/kexec.h:87:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/kexec.h:90:
+extern NORET_TYPE void machine_kexec(struct kimage *image) ATTRIB_NORET;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/kexec.h:91:
+extern int machine_kexec_prepare(struct kimage *image);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/kexec.h:92:
+extern void machine_kexec_cleanup(struct kimage *image);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: include/linux/kexec.h:93:
+extern asmlinkage long sys_kexec_load(unsigned long entry, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: include/linux/kexec.h:97:
+extern asmlinkage long compat_sys_kexec_load(unsigned long entry, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/linux/kexec.h:101:
+extern struct page *kimage_alloc_control_pages(struct kimage *image, unsigned int order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/kexec.h:102:
+extern void crash_kexec(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: include/linux/kexec.h:109:
+/* These values match the ELF architecture values. $

ERROR:SPACING: space prohibited after that open parenthesis '('
#214: FILE: include/linux/kexec.h:112:
+#define KEXEC_ARCH_DEFAULT ( 0 << 16)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#215: FILE: include/linux/kexec.h:113:
+#define KEXEC_ARCH_386     ( 3 << 16)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/kexec.h:126:
+static inline void crash_kexec(void) { } $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/reboot.h:54:
+extern void machine_shutdown(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/reboot.h:55:
+extern void machine_crash_shutdown(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: include/linux/syscalls.h:162:
+asmlinkage long sys_kexec_load(unsigned long entry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: include/linux/syscalls.h:163:
+^Iunsigned long nr_segments, struct kexec_segment __user *segments, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: include/linux/syscalls.h:163:
+asmlinkage long sys_kexec_load(unsigned long entry, 
+	unsigned long nr_segments, struct kexec_segment __user *segments, 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#274: FILE: kernel/kexec.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#295: FILE: kernel/kexec.c:22:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#296: FILE: kernel/kexec.c:23:
+#include <asm/io.h>

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#323: FILE: kernel/kexec.c:50:
+ * The code for the transition from the current kernel to the
+ * the new kernel is placed in the control_code_buffer, whose size

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#354: FILE: kernel/kexec.c:81:
+static int kimage_is_destination_range(

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#356: FILE: kernel/kexec.c:83:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long dest);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: kernel/kexec.c:86:
+static int do_kimage_alloc(struct kimage **rimage, unsigned long entry,
+	unsigned long nr_segments, struct kexec_segment __user *segments)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#369: FILE: kernel/kexec.c:96:
+	if (!image) {
+		goto out;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#386: FILE: kernel/kexec.c:113:
+	/* Initialize the list of unuseable pages */
 	                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'addreses' may be misspelled - perhaps 'addresses'?
#403: FILE: kernel/kexec.c:130:
+	 * the destination addreses are page aligned.  Too many
 	                   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: kernel/kexec.c:139:
+		unsigned long mstart, mend;
+		mstart = image->segment[i].mem;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: kernel/kexec.c:146:
+^I$

WARNING:TYPO_SPELLING: 'alloed' may be misspelled - perhaps 'allowed'?
#421: FILE: kernel/kexec.c:148:
+	 * If we alloed overlapping destination addresses
 	         ^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#426: FILE: kernel/kexec.c:153:
+	for(i = 0; i < nr_segments; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: kernel/kexec.c:156:
+		unsigned long j;
+		mstart = image->segment[i].mem;

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: kernel/kexec.c:158:
+		for(j = 0; j < i; j++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: kernel/kexec.c:160:
+			unsigned long pstart, pend;
+			pstart = image->segment[j].mem;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: kernel/kexec.c:163:
+^I^I^Iif ((mend > pstart) && (mstart < pend)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mend > pstart'
#436: FILE: kernel/kexec.c:163:
+			if ((mend > pstart) && (mstart < pend)) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstart < pend'
#436: FILE: kernel/kexec.c:163:
+			if ((mend > pstart) && (mstart < pend)) 

ERROR:SPACING: space required before the open parenthesis '('
#447: FILE: kernel/kexec.c:174:
+	for(i = 0; i < nr_segments; i++) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: kernel/kexec.c:179:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#455: FILE: kernel/kexec.c:182:
+	if (result == 0) {
[...]
+	} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: kernel/kexec.c:188:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#462: FILE: kernel/kexec.c:189:
+	
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: kernel/kexec.c:192:
+static int kimage_normal_alloc(struct kimage **rimage, unsigned long entry,
+	unsigned long nr_segments, struct kexec_segment __user *segments)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#473: FILE: kernel/kexec.c:200:
+	if (result) {
+		goto out;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: kernel/kexec.c:212:
+	image->control_code_page = kimage_alloc_control_pages(image,
+		get_order(KEXEC_CONTROL_CODE_SIZE));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#487: FILE: kernel/kexec.c:214:
+		printk(KERN_ERR "Could not allocate control_code_buffer\n");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#493: FILE: kernel/kexec.c:220:
+	if (result == 0) {
[...]
+	} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: kernel/kexec.c:228:
+static int kimage_crash_alloc(struct kimage **rimage, unsigned long entry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: kernel/kexec.c:229:
+static int kimage_crash_alloc(struct kimage **rimage, unsigned long entry, 
+	unsigned long nr_segments, struct kexec_segment *segments)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry < crashk_res.start'
#510: FILE: kernel/kexec.c:237:
+	if ((entry < crashk_res.start) || (entry > crashk_res.end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry > crashk_res.end'
#510: FILE: kernel/kexec.c:237:
+	if ((entry < crashk_res.start) || (entry > crashk_res.end)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#517: FILE: kernel/kexec.c:244:
+	if (result) {
+		goto out;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: kernel/kexec.c:253:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: kernel/kexec.c:266:
+		unsigned long mstart, mend;
+		mstart = image->segment[i].mem;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstart < crashk_res.start'
#542: FILE: kernel/kexec.c:269:
+		if ((mstart < crashk_res.start) || (mend > crashk_res.end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mend > crashk_res.end'
#542: FILE: kernel/kexec.c:269:
+		if ((mstart < crashk_res.start) || (mend > crashk_res.end))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: kernel/kexec.c:273:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#546: FILE: kernel/kexec.c:273:
+
+	

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: kernel/kexec.c:281:
+	image->control_code_page = kimage_alloc_control_pages(image,
+		get_order(KEXEC_CONTROL_CODE_SIZE));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#556: FILE: kernel/kexec.c:283:
+		printk(KERN_ERR "Could not allocate control_code_buffer\n");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#562: FILE: kernel/kexec.c:289:
+	if (result == 0) {
[...]
+	} else {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#570: FILE: kernel/kexec.c:297:
+static int kimage_is_destination_range(

WARNING:LINE_SPACING: Missing a blank line after declarations
#577: FILE: kernel/kexec.c:304:
+		unsigned long mstart, mend;
+		mstart = image->segment[i].mem;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > mstart'
#579: FILE: kernel/kexec.c:306:
+		if ((end > mstart) && (start < mend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < mend'
#579: FILE: kernel/kexec.c:306:
+		if ((end > mstart) && (start < mend)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#579: FILE: kernel/kexec.c:306:
+		if ((end > mstart) && (start < mend)) {
+			return 1;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: kernel/kexec.c:316:
+	struct page *pages;
+	pages = alloc_pages(gfp_mask, order);

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: kernel/kexec.c:319:
+		unsigned int count, i;
+		pages->mapping = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: kernel/kexec.c:322:
+		for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#595: FILE: kernel/kexec.c:322:
+		for(i = 0; i < count; i++) {
+			SetPageReserved(pages + i);
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#605: FILE: kernel/kexec.c:332:
+	unsigned int order, count, i;
+	order = page->private;

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: kernel/kexec.c:334:
+	for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#607: FILE: kernel/kexec.c:334:
+	for(i = 0; i < count; i++) {
+		ClearPageReserved(page + i);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: kernel/kexec.c:343:
+	struct list_head *pos, *next;
+	list_for_each_safe(pos, next, list) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#626: FILE: kernel/kexec.c:353:
+static struct page *kimage_alloc_normal_control_pages(

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: kernel/kexec.c:381:
+		unsigned long pfn, epfn, addr, eaddr;
+		pages = kimage_alloc_pages(GFP_KERNEL, order);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#661: FILE: kernel/kexec.c:388:
+		if ((epfn >= (KEXEC_CONTROL_MEMORY_LIMIT >> PAGE_SHIFT)) ||
+			kimage_is_destination_range(image, addr, eaddr))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: kernel/kexec.c:389:
+		if ((epfn >= (KEXEC_CONTROL_MEMORY_LIMIT >> PAGE_SHIFT)) ||
+			kimage_is_destination_range(image, addr, eaddr))

ERROR:SPACING: space required before the open parenthesis '('
#667: FILE: kernel/kexec.c:394:
+	} while(!pages);

WARNING:TYPO_SPELLING: 'everyting' may be misspelled - perhaps 'everything'?
#682: FILE: kernel/kexec.c:409:
+	 * page allocations, and add everyting to image->dest_pages.
 	                             ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#689: FILE: kernel/kexec.c:416:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#691: FILE: kernel/kexec.c:418:
+static struct page *kimage_alloc_crash_control_pages(

WARNING:LINE_SPACING: Missing a blank line after declarations
#717: FILE: kernel/kexec.c:444:
+	struct page *pages;
+	pages = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#721: FILE: kernel/kexec.c:448:
+	while(hole_end <= crashk_res.end) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#723: FILE: kernel/kexec.c:450:
+		unsigned long i;
+		if (hole_end > KEXEC_CONTROL_MEMORY_LIMIT) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#723: FILE: kernel/kexec.c:450:
+		if (hole_end > KEXEC_CONTROL_MEMORY_LIMIT) {
+			break;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#726: FILE: kernel/kexec.c:453:
+		if (hole_end > crashk_res.end) {
+			break;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#730: FILE: kernel/kexec.c:457:
+		for(i = 0; i < image->nr_segments; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#732: FILE: kernel/kexec.c:459:
+			unsigned long mstart, mend;
+			mstart = image->segment[i].mem;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hole_end >= mstart'
#734: FILE: kernel/kexec.c:461:
+			if ((hole_end >= mstart) && (hole_start <= mend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hole_start <= mend'
#734: FILE: kernel/kexec.c:461:
+			if ((hole_end >= mstart) && (hole_start <= mend)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#747: FILE: kernel/kexec.c:474:
+	if (pages) {
+		image->control_page = hole_end;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: kernel/kexec.c:480:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#754: FILE: kernel/kexec.c:481:
+struct page *kimage_alloc_control_pages(

WARNING:LINE_SPACING: Missing a blank line after declarations
#758: FILE: kernel/kexec.c:485:
+	struct page *pages = NULL;
+	switch(image->type) {

ERROR:SPACING: space required before the open parenthesis '('
#758: FILE: kernel/kexec.c:485:
+	switch(image->type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: kernel/kexec.c:487:
+^I^Ipages = kimage_alloc_normal_control_pages(image, order); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: kernel/kexec.c:490:
+^I^Ipages = kimage_alloc_crash_control_pages(image, order); $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#771: FILE: kernel/kexec.c:498:
+	if (*image->entry != 0) {
+		image->entry++;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#777: FILE: kernel/kexec.c:504:
+		struct page *page;
+		page = kimage_alloc_page(image, GFP_KERNEL, KIMAGE_NO_DEST);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#778: FILE: kernel/kexec.c:505:
+		if (!page) {
+			return -ENOMEM;
+		}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#785: FILE: kernel/kexec.c:512:
+			ind_page + ((PAGE_SIZE/sizeof(kimage_entry_t)) - 1);
 			                      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#793: FILE: kernel/kexec.c:520:
+static int kimage_set_destination(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#800: FILE: kernel/kexec.c:527:
+	if (result == 0) {
+		image->destination = destination;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#806: FILE: kernel/kexec.c:533:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#813: FILE: kernel/kexec.c:540:
+	if (result == 0) {
+		image->destination += PAGE_SIZE;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: kernel/kexec.c:546:
+
+

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#825: FILE: kernel/kexec.c:552:
+	/* Walk through and free any unuseable pages I have cached */
 	                             ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#828: FILE: kernel/kexec.c:555:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#829: FILE: kernel/kexec.c:556:
+}
+static int kimage_terminate(struct kimage *image)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#831: FILE: kernel/kexec.c:558:
+	if (*image->entry != 0) {
+		image->entry++;
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'image' may be better as '(image)' to avoid precedence issues
#838: FILE: kernel/kexec.c:565:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#838: FILE: kernel/kexec.c:565:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#838: FILE: kernel/kexec.c:565:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#840: FILE: kernel/kexec.c:567:
+		ptr = (entry & IND_INDIRECTION)? \
 		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#841: FILE: kernel/kexec.c:568:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#841: FILE: kernel/kexec.c:568:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#862: FILE: kernel/kexec.c:589:
+			if (ind & IND_INDIRECTION) {
+				kimage_free_entry(ind);
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#870: FILE: kernel/kexec.c:597:
+		}
+		else if (entry & IND_SOURCE) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#875: FILE: kernel/kexec.c:602:
+	if (ind & IND_INDIRECTION) {
+		kimage_free_entry(ind);
+	}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#896: FILE: kernel/kexec.c:623:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#897: FILE: kernel/kexec.c:624:
+			if (page == destination) {
+				return ptr;
+			}

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#906: FILE: kernel/kexec.c:633:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long destination)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#946: FILE: kernel/kexec.c:673:
+		if (!page) {
+			return 0;
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#987: FILE: kernel/kexec.c:714:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#987: FILE: kernel/kexec.c:714:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: kernel/kexec.c:725:
+static int kimage_load_normal_segment(struct kimage *image,
+	struct kexec_segment *segment)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1012: FILE: kernel/kexec.c:739:
+	if (result < 0) {
+		goto out;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1015: FILE: kernel/kexec.c:742:
+	while(mbytes) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1019: FILE: kernel/kexec.c:746:
+		size_t uchunk, mchunk;
+		page = kimage_alloc_page(image, GFP_HIGHUSER, maddr);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1025: FILE: kernel/kexec.c:752:
+		if (result < 0) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1033: FILE: kernel/kexec.c:760:
+		if (mchunk > mbytes) {
+			mchunk = mbytes;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1037: FILE: kernel/kexec.c:764:
+		if (uchunk > ubytes) {
+			uchunk = ubytes;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: kernel/kexec.c:783:
+static int kimage_load_crash_segment(struct kimage *image,
+	struct kexec_segment *segment)

ERROR:SPACING: space required before the open parenthesis '('
#1072: FILE: kernel/kexec.c:799:
+	while(mbytes) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1076: FILE: kernel/kexec.c:803:
+		size_t uchunk, mchunk;
+		page = pfn_to_page(maddr >> PAGE_SHIFT);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1084: FILE: kernel/kexec.c:811:
+		if (mchunk > mbytes) {
+			mchunk = mbytes;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: kernel/kexec.c:836:
+static int kimage_load_segment(struct kimage *image,
+	struct kexec_segment *segment)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1112: FILE: kernel/kexec.c:839:
+	int result = -ENOMEM;
+	switch(image->type) {

ERROR:SPACING: space required before the open parenthesis '('
#1112: FILE: kernel/kexec.c:839:
+	switch(image->type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: kernel/kexec.c:841:
+^I^Iresult = kimage_load_normal_segment(image, segment); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: kernel/kexec.c:844:
+^I^Iresult = kimage_load_crash_segment(image, segment); $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1143: FILE: kernel/kexec.c:870:
+struct kimage *kexec_image = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1144: FILE: kernel/kexec.c:871:
+struct kimage *kexec_crash_image = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: kernel/kexec.c:872:
+/* $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1150: FILE: kernel/kexec.c:877:
+static int kexec_lock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: kernel/kexec.c:879:
+asmlinkage long sys_kexec_load(unsigned long entry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: kernel/kexec.c:880:
+^Iunsigned long nr_segments, struct kexec_segment __user *segments, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: kernel/kexec.c:880:
+asmlinkage long sys_kexec_load(unsigned long entry, 
+	unsigned long nr_segments, struct kexec_segment __user *segments, 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1172: FILE: kernel/kexec.c:899:
+	if (((flags & KEXEC_ARCH_MASK) != KEXEC_ARCH) &&
+		((flags & KEXEC_ARCH_MASK) != KEXEC_ARCH_DEFAULT)) 
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: kernel/kexec.c:900:
+^I^I((flags & KEXEC_ARCH_MASK) != KEXEC_ARCH_DEFAULT)) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1173: FILE: kernel/kexec.c:900:
+	if (((flags & KEXEC_ARCH_MASK) != KEXEC_ARCH) &&
+		((flags & KEXEC_ARCH_MASK) != KEXEC_ARCH_DEFAULT)) 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1196: FILE: kernel/kexec.c:923:
+	if (locked) {
+		return -EBUSY;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1200: FILE: kernel/kexec.c:927:
+	if (flags & KEXEC_ON_CRASH) {
+		dest_image = &kexec_crash_image;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1206: FILE: kernel/kexec.c:933:
+		if ((flags & KEXEC_ON_CRASH) == 0) {
+			result = kimage_normal_alloc(&image, entry, nr_segments, segments);
+		} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1208: FILE: kernel/kexec.c:935:
+^I^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1217: FILE: kernel/kexec.c:944:
+		if (result) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1221: FILE: kernel/kexec.c:948:
+		if (result) {
+			goto out;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#1224: FILE: kernel/kexec.c:951:
+		for(i = 0; i < nr_segments; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1226: FILE: kernel/kexec.c:953:
+			if (result) {
+				goto out;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1231: FILE: kernel/kexec.c:958:
+		if (result) {
+			goto out;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: kernel/kexec.c:973:
+asmlinkage long compat_sys_kexec_load(unsigned long entry,
+	unsigned long nr_segments, struct compat_kexec_segment __user *segments,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1256: FILE: kernel/kexec.c:983:
+	if ((flags & KEXEC_ARCH_MASK) == KEXEC_ARCH_DEFAULT) {
+		return -EINVAL;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1260: FILE: kernel/kexec.c:987:
+	if (nr_segments > KEXEC_SEGMENT_MAX) {
+		return -EINVAL;
+	}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1265: FILE: kernel/kexec.c:992:
+	for (i=0; i < nr_segments; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1267: FILE: kernel/kexec.c:994:
+		if (result) {
+			return -EFAULT;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1277: FILE: kernel/kexec.c:1004:
+		if (result) {
+			return -EFAULT;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1291: FILE: kernel/kexec.c:1018:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1293: FILE: kernel/kexec.c:1020:
+^I * running on one cpu from replacing the crash kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: kernel/kexec.c:1022:
+^I * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1359: FILE: kernel/sys.c:442:
+		struct kimage *image;
+		image = xchg(&kexec_image, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1367: FILE: kernel/sys.c:450:
+		printk(KERN_EMERG "Starting new kernel\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 74 warnings, 53 checks, 1282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
