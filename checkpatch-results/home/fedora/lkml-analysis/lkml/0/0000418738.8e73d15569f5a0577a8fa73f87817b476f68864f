Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#36: 
 fs/msdos/namei.c            |   53 +++++--------
    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
--- fat-2.5.44/fs/fat/Makefile~fat_kill_cvf	2002-10-24 00:14:05.000000000 +0900

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#197: FILE: fs/fat/cache.c:34:
+	if (!(bh = sb_bread(sb, b))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#198: FILE: fs/fat/cache.c:35:
+		printk(KERN_ERR "FAT: bread(block %d) in"

WARNING:SPLIT_STRING: quoted string split across lines
#199: FILE: fs/fat/cache.c:36:
+		printk(KERN_ERR "FAT: bread(block %d) in"
+		       " fat_access failed\n", b);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#209: FILE: fs/fat/cache.c:42:
+		if (!(bh2 = sb_bread(sb, b + 1))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#211: FILE: fs/fat/cache.c:44:
+			printk(KERN_ERR "FAT: bread(block %d) in"

WARNING:SPLIT_STRING: quoted string split across lines
#212: FILE: fs/fat/cache.c:45:
+			printk(KERN_ERR "FAT: bread(block %d) in"
+			       " fat_access failed\n", b + 1);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#229: FILE: fs/fat/cache.c:89:
+			if (!(c_bh = sb_bread(sb, b)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#234: FILE: fs/fat/cache.c:92:
+				if (!(c_bh2 = sb_bread(sb, b+1))) {
 				                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#234: FILE: fs/fat/cache.c:92:
+				if (!(c_bh2 = sb_bread(sb, b+1))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: fs/fat/cache.c:111:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#283: FILE: fs/fat/cache.c:215:
+				printk(KERN_ERR "FAT: cache corruption"

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: fs/fat/cache.c:216:
+				printk(KERN_ERR "FAT: cache corruption"
+				       " (ino %lu)\n", inode->i_ino);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#636: FILE: fs/fat/file.c:14:
+static ssize_t fat_file_write(struct file *filp, const char *buf, size_t count,
                                            ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#642: FILE: fs/fat/file.c:19:
+	read:		generic_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#642: FILE: fs/fat/file.c:19:
+	read:		generic_file_read,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#689: FILE: fs/fat/file.c:68:
+static ssize_t fat_file_write(struct file *filp, const char *buf, size_t count,
                                            ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#751: FILE: fs/fat/inode.c:303:
+			printk(KERN_INFO "FAT: conv option is obsolete, "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#760: FILE: fs/fat/inode.c:351:
+			printk(KERN_INFO "FAT: fat option is obsolete, "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#769: FILE: fs/fat/inode.c:359:
+			printk(KERN_INFO "FAT: blocksize option is obsolete, "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#795: FILE: fs/fat/inode.c:415:
+			printk(KERN_INFO "FAT: posix option is obsolete, "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#804: FILE: fs/fat/inode.c:440:
+			printk(KERN_ERR "FAT: Unrecognized mount option %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#861: FILE: fs/fat/inode.c:763:
+		printk(KERN_ERR "FAT: unable to read boot sector\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#869: FILE: fs/fat/inode.c:770:
+			printk(KERN_ERR "FAT: bogus number of reserved sectors\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#876: FILE: fs/fat/inode.c:776:
+			printk(KERN_ERR "FAT: bogus number of FAT structure\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#883: FILE: fs/fat/inode.c:782:
+			printk(KERN_ERR "FAT: bogus sectors-per-track value\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#890: FILE: fs/fat/inode.c:788:
+			printk(KERN_ERR "FAT: bogus number-of-heads value\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#898: FILE: fs/fat/inode.c:795:
+			printk(KERN_ERR "FAT: invalid media value (0x%02x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#908: FILE: fs/fat/inode.c:807:
+			printk(KERN_ERR "FAT: bogus logical sector size %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#917: FILE: fs/fat/inode.c:816:
+			printk(KERN_ERR "FAT: bogus cluster size %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#925: FILE: fs/fat/inode.c:823:
+		printk(KERN_ERR "FAT: logical sector size too small for device"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#934: FILE: fs/fat/inode.c:832:
+			printk(KERN_ERR "FAT: unable to set blocksize %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#941: FILE: fs/fat/inode.c:838:
+			printk(KERN_ERR "FAT: unable to read boot sector"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#950: FILE: fs/fat/inode.c:873:
+			printk(KERN_ERR "FAT: bread failed, FSINFO block"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#959: FILE: fs/fat/inode.c:881:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#969: FILE: fs/fat/inode.c:902:
+		printk(KERN_ERR "FAT: bogus directroy-entries per block\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#978: FILE: fs/fat/inode.c:933:
+			printk(KERN_ERR "FAT: invalid first entry of FAT "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1003: FILE: fs/fat/inode.c:947:
+			printk(KERN_ERR "FAT: codepage %s not found\n", buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1012: FILE: fs/fat/inode.c:959:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1022: FILE: fs/fat/inode.c:981:
+		printk(KERN_ERR "FAT: get root inode failed\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1079: FILE: fs/fat/inode.c:1165:
+	if (!(bh = sb_bread(sb, i_pos >> MSDOS_SB(sb)->dir_per_block_bits))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1125: FILE: fs/fat/misc.c:33:
+	printk(KERN_ERR "FAT: Filesystem panic (dev %s)\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1129: FILE: fs/fat/misc.c:36:
+		printk(KERN_ERR "    File system has been set read-only\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1141: FILE: fs/fat/misc.c:63:
+		printk(KERN_ERR "FAT bread failed in fat_clusters_flush\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_clusters_flush', this function's name, in a string
#1141: FILE: fs/fat/misc.c:63:
+		printk(KERN_ERR "FAT bread failed in fat_clusters_flush\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1149: FILE: fs/fat/misc.c:70:
+		printk(KERN_ERR "FAT: Did not find valid FSINFO signature.\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1169: FILE: fs/fat/misc.c:163:
+		printk (KERN_ERR "file_cluster badly computed!!! %d <> %ld\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1169: FILE: fs/fat/misc.c:163:
+		printk (KERN_ERR "file_cluster badly computed!!! %d <> %ld\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1195: FILE: fs/fat/misc.c:192:
+		if ((bh = sb_getblk(sb, sector))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#1207: FILE: fs/fat/misc.c:202:
+	if (res == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1229: FILE: fs/fat/misc.c:307:
+		printk(KERN_ERR "FAT: Directory bread(block %d) failed\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1239: FILE: fs/fat/misc.c:381:
+	if (!(bh = sb_bread(sb,sector)))
 	                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1239: FILE: fs/fat/misc.c:381:
+	if (!(bh = sb_bread(sb,sector)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1495: FILE: fs/vfat/namei.c:322:
+	res = fat_scan(dir,name,&bh,&de,&ino);
 	                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418738.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 42 warnings, 2 checks, 1222 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418738.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
