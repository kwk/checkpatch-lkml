CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#107: FILE: mm/slab.c:295:
+	spinlock_t list_lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#165: FILE: mm/slab.c:398:
+	void (*ctor) (void *, kmem_cache_t *, unsigned long);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#165: FILE: mm/slab.c:398:
+	void (*ctor) (void *, kmem_cache_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#165: FILE: mm/slab.c:398:
+	void (*ctor) (void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#165: FILE: mm/slab.c:398:
+	void (*ctor) (void *, kmem_cache_t *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#169: FILE: mm/slab.c:401:
+	void (*dtor) (void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#169: FILE: mm/slab.c:401:
+	void (*dtor) (void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#169: FILE: mm/slab.c:401:
+	void (*dtor) (void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#169: FILE: mm/slab.c:401:
+	void (*dtor) (void *, kmem_cache_t *, unsigned long);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: mm/slab.c:505:
+static int obj_dbghead(kmem_cache_t * cachep)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#225: FILE: mm/slab.c:510:
+static int obj_size(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: mm/slab.c:515:
+static unsigned long *dbg_redzone1(kmem_cache_t * cachep, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: mm/slab.c:521:
+static unsigned long *dbg_redzone2(kmem_cache_t * cachep, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: mm/slab.c:530:
+static void **dbg_userword(kmem_cache_t * cachep, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: mm/slab.c:540:
+static int obj_size(kmem_cache_t * cachep)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: mm/slab.c:621:
+    { {0, BOOT_CPUCACHE_ENTRIES, 1, 0} };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#286: FILE: mm/slab.c:621:
 static struct arraycache_init initarray_cache __initdata =
+    { {0, BOOT_CPUCACHE_ENTRIES, 1, 0} };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: mm/slab.c:623:
+    { {0, BOOT_CPUCACHE_ENTRIES, 1, 0} };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#289: FILE: mm/slab.c:623:
 static struct arraycache_init initarray_generic =
+    { {0, BOOT_CPUCACHE_ENTRIES, 1, 0} };

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: mm/slab.c:664:
+static void free_block(kmem_cache_t * cachep, void **objpp, int len, int node);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#328: FILE: mm/slab.c:665:
+static void enable_cpucache(kmem_cache_t * cachep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: mm/slab.c:667:
+static int __node_shrink(kmem_cache_t * cachep, int node);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: mm/slab.c:669:
+static inline struct array_cache *ac_data(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: mm/slab.c:707:
+			   int flags, size_t * left_over, unsigned int *num)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: mm/slab.c:735:
+static void __slab_error(const char *function, kmem_cache_t * cachep, char *msg)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#432: FILE: mm/slab.c:816:
 	for_each_node(i)
+	    kfree(ac_ptr[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#440: FILE: mm/slab.c:822:
+static inline void __drain_alien_cache(kmem_cache_t * cachep,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: mm/slab.c:835:
+static void drain_alien_cache(kmem_cache_t * cachep, struct kmem_list3 *l3)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#460: FILE: mm/slab.c:856:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#496: FILE: mm/slab.c:899:
+		   & array cache's */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: mm/slab.c:917:
+				   CPU_UP_CANCELLED by the cpucontrol lock */

WARNING:INDENTED_LABEL: labels should not be indented
#545: FILE: mm/slab.c:978:
+		      unlock_cache:

WARNING:INDENTED_LABEL: labels should not be indented
#554: FILE: mm/slab.c:987:
+      bad:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: mm/slab.c:997:
+static void init_list(kmem_cache_t * cachep, struct kmem_list3 *list,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#702: FILE: mm/slab.c:1179:
 		list_for_each_entry(cachep, &cache_chain, next)
+		    enable_cpucache(cachep);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#711: FILE: mm/slab.c:1205:
 	for_each_online_cpu(cpu)
+	    start_cpu_timer(cpu);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#722: FILE: mm/slab.c:1220:
+static void *kmem_getpages(kmem_cache_t * cachep, gfp_t flags, int nodeid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: mm/slab.c:1246:
+static void kmem_freepages(kmem_cache_t * cachep, void *addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#761: FILE: mm/slab.c:1278:
+static void store_stackinfo(kmem_cache_t * cachep, unsigned long *addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#803: FILE: mm/slab.c:1311:
+static void poison_obj(kmem_cache_t * cachep, void *addr, unsigned char val)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#820: FILE: mm/slab.c:1324:
+	for (i = 0; i < limit; i++) {
+		printk(" %02x", (unsigned char)data[offset + i]);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#821: FILE: mm/slab.c:1325:
+		printk(" %02x", (unsigned char)data[offset + i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#830: FILE: mm/slab.c:1333:
+static void print_objinfo(kmem_cache_t * cachep, void *objp, int lines)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#868: FILE: mm/slab.c:1362:
+static void check_poison_obj(kmem_cache_t * cachep, void *objp)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#891: FILE: mm/slab.c:1380:
+				printk(KERN_ERR

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#940: FILE: mm/slab.c:1428:
+static void slab_destroy(kmem_cache_t * cachep, struct slab *slabp)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#951: FILE: mm/slab.c:1440:
+			if ((cachep->objsize % PAGE_SIZE) == 0
+			    && OFF_SLAB(cachep))

WARNING:SPLIT_STRING: quoted string split across lines
#963: FILE: mm/slab.c:1453:
 				slab_error(cachep, "start of a freed object "
+					   "was overwritten");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#967: FILE: mm/slab.c:1456:
 				slab_error(cachep, "end of a freed object "
+					   "was overwritten");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#971: FILE: mm/slab.c:1459:
+			(cachep->dtor) (objp + obj_dbghead(cachep), cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#980: FILE: mm/slab.c:1466:
+			(cachep->dtor) (objp, cachep, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#998: FILE: mm/slab.c:1487:
+static inline void set_up_list3s(kmem_cache_t * cachep, int index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1018: FILE: mm/slab.c:1507:
+static inline size_t calculate_slab_order(kmem_cache_t * cachep, size_t size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1043: FILE: mm/slab.c:1599:
+		printk(KERN_ERR "%s: Early error in slab %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1044: FILE: mm/slab.c:1600:
+		       __FUNCTION__, name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: mm/slab.c:1601:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPLIT_STRING: quoted string split across lines
#1069: FILE: mm/slab.c:1638:
 		printk(KERN_ERR "%s: No con, but init state check "
+		       "requested - %s\n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1069: FILE: mm/slab.c:1638:
+		       "requested - %s\n", __FUNCTION__, name);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1083: FILE: mm/slab.c:1649:
+	if ((size < 4096
+	     || fls(size - 1) == fls(size - 1 + 3 * BYTES_PER_WORD)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1141: FILE: mm/slab.c:1733:
+	if (size >= malloc_sizes[INDEX_L3 + 1].cs_size
+	    && cachep->reallen > cache_line_size() && size < PAGE_SIZE) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cachep->nodelists[node]'
#1223: FILE: mm/slab.c:1846:
+					kmem_list3_init(cachep->
+							nodelists[node]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:INDENTED_LABEL: labels should not be indented
#1246: FILE: mm/slab.c:1866:
+      oops:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1263: FILE: mm/slab.c:1887:
+static void check_spinlock_acquired(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1272: FILE: mm/slab.c:1895:
+static inline void check_spinlock_acquired_node(kmem_cache_t * cachep, int node)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1282: FILE: mm/slab.c:1928:
+static void drain_array_locked(kmem_cache_t * cachep,

CHECK:SPACING: No space is necessary after a cast
#1288: FILE: mm/slab.c:1933:
+	kmem_cache_t *cachep = (kmem_cache_t *) arg;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1297: FILE: mm/slab.c:1945:
+static void drain_cpu_caches(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1315: FILE: mm/slab.c:1966:
+static int __node_shrink(kmem_cache_t * cachep, int node)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1330: FILE: mm/slab.c:1995:
+static int __cache_shrink(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1339: FILE: mm/slab.c:2021:
+int kmem_cache_shrink(kmem_cache_t * cachep)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1362: FILE: mm/slab.c:2079:
 	for_each_online_cpu(i)
+	    kfree(cachep->array[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1378: FILE: mm/slab.c:2100:
+static struct slab *alloc_slabmgmt(kmem_cache_t * cachep, void *objp,

CHECK:SPACING: No space is necessary after a cast
#1405: FILE: mm/slab.c:2123:
+	return (kmem_bufctl_t *) (slabp + 1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1410: FILE: mm/slab.c:2126:
+static void cache_init_objs(kmem_cache_t * cachep,

WARNING:SPLIT_STRING: quoted string split across lines
#1433: FILE: mm/slab.c:2156:
 				slab_error(cachep, "constructor overwrote the"
+					   " end of an object");

WARNING:SPLIT_STRING: quoted string split across lines
#1437: FILE: mm/slab.c:2159:
 				slab_error(cachep, "constructor overwrote the"
+					   " start of an object");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1442: FILE: mm/slab.c:2162:
+		if ((cachep->objsize % PAGE_SIZE) == 0 && OFF_SLAB(cachep)
+		    && cachep->flags & SLAB_POISON)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1458: FILE: mm/slab.c:2175:
+static void kmem_flagcheck(kmem_cache_t * cachep, gfp_t flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1467: FILE: mm/slab.c:2186:
+static void set_slab_attr(kmem_cache_t * cachep, struct slab *slabp, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1476: FILE: mm/slab.c:2205:
+static int cache_grow(kmem_cache_t * cachep, gfp_t flags, int nodeid)

WARNING:INDENTED_LABEL: labels should not be indented
#1504: FILE: mm/slab.c:2283:
+      opps1:

WARNING:INDENTED_LABEL: labels should not be indented
#1507: FILE: mm/slab.c:2285:
+      failed:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1518: FILE: mm/slab.c:2306:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1523: FILE: mm/slab.c:2310:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kfree_debugcheck', this function's name, in a string
#1523: FILE: mm/slab.c:2310:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: mm/slab.c:2316:
+static void *cache_free_debugcheck(kmem_cache_t * cachep, void *objp,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1542: FILE: mm/slab.c:2328:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1547: FILE: mm/slab.c:2332:
+		printk(KERN_ERR "%p is %s.\n", page_get_cache(page),

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1560: FILE: mm/slab.c:2340:
+		if (*dbg_redzone1(cachep, objp) != RED_ACTIVE
+		    || *dbg_redzone2(cachep, objp) != RED_ACTIVE) {

WARNING:SPLIT_STRING: quoted string split across lines
#1563: FILE: mm/slab.c:2343:
+				   "double free, or memory outside"
+				   " object was overwritten");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1564: FILE: mm/slab.c:2344:
+			printk(KERN_ERR

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1580: FILE: mm/slab.c:2358:
+	BUG_ON(objp != slabp->s_mem + objnr * cachep->objsize);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1614: FILE: mm/slab.c:2390:
+static void check_slabp(kmem_cache_t * cachep, struct slab *slabp)

WARNING:INDENTED_LABEL: labels should not be indented
#1632: FILE: mm/slab.c:2402:
+	      bad:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1633: FILE: mm/slab.c:2403:
+		printk(KERN_ERR

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1642: FILE: mm/slab.c:2411:
+			printk(" %02x", ((unsigned char *)slabp)[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1651: FILE: mm/slab.c:2423:
+static void *cache_alloc_refill(kmem_cache_t * cachep, gfp_t flags)

WARNING:INDENTED_LABEL: labels should not be indented
#1660: FILE: mm/slab.c:2431:
+      retry:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1670: FILE: mm/slab.c:2453:
+			       &(shared_array->entry[shared_array->avail]),

WARNING:INDENTED_LABEL: labels should not be indented
#1698: FILE: mm/slab.c:2502:
+      must_grow:

WARNING:INDENTED_LABEL: labels should not be indented
#1701: FILE: mm/slab.c:2504:
+      alloc_done:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1719: FILE: mm/slab.c:2524:
+cache_alloc_debugcheck_before(kmem_cache_t * cachep, gfp_t flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1730: FILE: mm/slab.c:2533:
+static void *cache_alloc_debugcheck_after(kmem_cache_t * cachep,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1756: FILE: mm/slab.c:2555:
+		if (*dbg_redzone1(cachep, objp) != RED_INACTIVE
+		    || *dbg_redzone2(cachep, objp) != RED_INACTIVE) {

WARNING:SPLIT_STRING: quoted string split across lines
#1759: FILE: mm/slab.c:2558:
+				   "double free, or memory outside"
+				   " object was overwritten");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1760: FILE: mm/slab.c:2559:
+			printk(KERN_ERR

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1786: FILE: mm/slab.c:2582:
+static inline void *____cache_alloc(kmem_cache_t * cachep, gfp_t flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1798: FILE: mm/slab.c:2600:
+static inline void *__cache_alloc(kmem_cache_t * cachep, gfp_t flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1820: FILE: mm/slab.c:2620:
+static void *__cache_alloc_node(kmem_cache_t * cachep, gfp_t flags, int nodeid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1891: FILE: mm/slab.c:2630:
+	BUG_ON(!l3);

WARNING:INDENTED_LABEL: labels should not be indented
#1893: FILE: mm/slab.c:2632:
+      retry:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1911: FILE: mm/slab.c:2650:
+	BUG_ON(slabp->inuse == cachep->num);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1926: FILE: mm/slab.c:2665:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#1935: FILE: mm/slab.c:2674:
+      must_grow:

WARNING:INDENTED_LABEL: labels should not be indented
#1943: FILE: mm/slab.c:2682:
+      done:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1952: FILE: mm/slab.c:2690:
+static void free_block(kmem_cache_t * cachep, void **objpp, int nr_objects,

WARNING:SPLIT_STRING: quoted string split across lines
#1962: FILE: mm/slab.c:2714:
 			printk(KERN_ERR "slab: double free detected in cache "
+			       "'%s', objp %p\n", cachep->name, objp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1971: FILE: mm/slab.c:2743:
+static void cache_flusharray(kmem_cache_t * cachep, struct array_cache *ac)

WARNING:INDENTED_LABEL: labels should not be indented
#1995: FILE: mm/slab.c:2770:
+      free_done:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2016: FILE: mm/slab.c:2802:
+static inline void __cache_free(kmem_cache_t * cachep, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2054: FILE: mm/slab.c:2861:
+void *kmem_cache_alloc(kmem_cache_t * cachep, gfp_t flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2067: FILE: mm/slab.c:2882:
+int fastcall kmem_ptr_validate(kmem_cache_t * cachep, void *ptr)

WARNING:INDENTED_LABEL: labels should not be indented
#2082: FILE: mm/slab.c:2906:
+      out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2091: FILE: mm/slab.c:2923:
+void *kmem_cache_alloc_node(kmem_cache_t * cachep, gfp_t flags, int nodeid)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2101: FILE: mm/slab.c:2933:
+		printk(KERN_WARNING

WARNING:INDENTED_LABEL: labels should not be indented
#2156: FILE: mm/slab.c:3043:
+      unwind_oom:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2173: FILE: mm/slab.c:3064:
+void kmem_cache_free(kmem_cache_t * cachep, void *objp)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2220: FILE: mm/slab.c:3131:
 	for_each_cpu(i)
+	    kfree(p->ptrs[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2230: FILE: mm/slab.c:3139:
+unsigned int kmem_cache_size(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2238: FILE: mm/slab.c:3146:
+const char *kmem_cache_name(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2249: FILE: mm/slab.c:3156:
+static int alloc_kmemlist(kmem_cache_t * cachep)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2259: FILE: mm/slab.c:3169:
+		if (!(new = alloc_arraycache(node, (cachep->shared *

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:INDENTED_LABEL: labels should not be indented
#2305: FILE: mm/slab.c:3206:
+      fail:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2316: FILE: mm/slab.c:3228:
+static int do_tune_cpucache(kmem_cache_t * cachep, int limit, int batchcount,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2348: FILE: mm/slab.c:3274:
+static void enable_cpucache(kmem_cache_t * cachep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2366: FILE: mm/slab.c:3326:
+static void drain_array_locked(kmem_cache_t * cachep,

WARNING:INDENTED_LABEL: labels should not be indented
#2441: FILE: mm/slab.c:3428:
+	      next_unlock:

WARNING:INDENTED_LABEL: labels should not be indented
#2444: FILE: mm/slab.c:3430:
+	      next:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2453: FILE: mm/slab.c:3465:
+static void *s_start(struct seq_file *m, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2462: FILE: mm/slab.c:3482:
+static void *s_next(struct seq_file *m, void *p, loff_t * pos)

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#2556: FILE: mm/slab.c:3575:
+				%4lu %4lu %4lu %4lu", allocs, high, grown, reaped, errors, max_freeable, node_allocs, node_frees);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2590: FILE: mm/slab.c:3622:
+ssize_t slabinfo_write(struct file *file, const char __user * buffer,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2591: FILE: mm/slab.c:3623:
+		       size_t count, loff_t * ppos)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 67 warnings, 12 checks, 2465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
