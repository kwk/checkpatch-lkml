WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#164: FILE: kernel/sched.c:3231:
 static void __devinit ingo_init_idle(task_t *idle, int cpu)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#177: FILE: kernel/scheduler.c:640:
+	if (list_empty(&p->children)) return NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#178: FILE: kernel/scheduler.c:641:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#178: FILE: kernel/scheduler.c:641:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                                     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#183: FILE: kernel/scheduler.c:646:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#183: FILE: kernel/scheduler.c:646:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#183: FILE: kernel/scheduler.c:646:
+	if (p->sibling.prev==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: kernel/scheduler.c:647:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: kernel/scheduler.c:647:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#189: FILE: kernel/scheduler.c:652:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#189: FILE: kernel/scheduler.c:652:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#189: FILE: kernel/scheduler.c:652:
+	if (p->sibling.next==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#190: FILE: kernel/scheduler.c:653:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#190: FILE: kernel/scheduler.c:653:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: kernel/scheduler.c:656:
+static void show_task(task_t * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: kernel/scheduler.c:659:
+	unsigned state;

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#198: FILE: kernel/scheduler.c:661:
+	static const char *stat_nam[] = { "R", "S", "D", "T", "t", "Z", "X" };

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#200: FILE: kernel/scheduler.c:663:
+	printk("%-13.13s ", p->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#203: FILE: kernel/scheduler.c:666:
+		printk(stat_nam[state]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: kernel/scheduler.c:668:
+		printk("?");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: kernel/scheduler.c:671:
+		printk(" running ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: kernel/scheduler.c:673:
+		printk(" %08lX ", thread_saved_pc(p));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: kernel/scheduler.c:676:
+		printk("  running task   ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: kernel/scheduler.c:678:
+		printk(" %016lx ", thread_saved_pc(p));

CHECK:SPACING: No space is necessary after a cast
#219: FILE: kernel/scheduler.c:682:
+		unsigned long * n = (unsigned long *) (p->thread_info+1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: kernel/scheduler.c:682:
+		unsigned long * n = (unsigned long *) (p->thread_info+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: kernel/scheduler.c:682:
+		unsigned long * n = (unsigned long *) (p->thread_info+1);
 		                                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: kernel/scheduler.c:683:
+		unsigned long * n = (unsigned long *) (p->thread_info+1);
+		while (!*n)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#222: FILE: kernel/scheduler.c:685:
+		free = (unsigned long) n - (unsigned long)(p->thread_info+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: kernel/scheduler.c:685:
+		free = (unsigned long) n - (unsigned long)(p->thread_info+1);
 		                                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: kernel/scheduler.c:688:
+	printk("%5lu %5d %6d ", free, p->pid, p->parent->pid);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#226: FILE: kernel/scheduler.c:689:
+	if ((relative = eldest_child(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#227: FILE: kernel/scheduler.c:690:
+		printk("%5d ", relative->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: kernel/scheduler.c:692:
+		printk("      ");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: kernel/scheduler.c:693:
+	if ((relative = younger_sibling(p)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: kernel/scheduler.c:694:
+		printk("%7d", relative->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: kernel/scheduler.c:696:
+		printk("       ");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#234: FILE: kernel/scheduler.c:697:
+	if ((relative = older_sibling(p)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: kernel/scheduler.c:698:
+		printk(" %5d", relative->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#237: FILE: kernel/scheduler.c:700:
+		printk("      ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: kernel/scheduler.c:702:
+		printk(" (L-TLB)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#241: FILE: kernel/scheduler.c:704:
+		printk(" (NOTLB)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#252: FILE: kernel/scheduler.c:715:
+	printk("\n"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#254: FILE: kernel/scheduler.c:717:
+	printk("  task             PC      pid father child younger older\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: kernel/scheduler.c:719:
+	printk("\n"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: kernel/scheduler.c:721:
+	printk("  task                 PC          pid father child younger older\n");

WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#264: FILE: kernel/scheduler.c:727:
+		 * console might take alot of time:
 		                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 25 warnings, 4 checks, 208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
