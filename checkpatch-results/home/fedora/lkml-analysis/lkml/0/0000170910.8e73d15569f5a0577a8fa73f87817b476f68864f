WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
diff -urpN linux-2.6.12.3.n/arch/ia64/kernel/ptrace.c linux-2.6.12.4.rot64/arch/ia64/kernel/ptrace.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: crypto/sha512.c:78:
+#define e0(x)       (ror64(x,28) ^ ror64(x,34) ^ ror64(x,39))
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: crypto/sha512.c:78:
+#define e0(x)       (ror64(x,28) ^ ror64(x,34) ^ ror64(x,39))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: crypto/sha512.c:78:
+#define e0(x)       (ror64(x,28) ^ ror64(x,34) ^ ror64(x,39))
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#94: FILE: crypto/sha512.c:78:
+#define e0(x)       (ror64(x,28) ^ ror64(x,34) ^ ror64(x,39))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: crypto/sha512.c:79:
+#define e1(x)       (ror64(x,14) ^ ror64(x,18) ^ ror64(x,41))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: crypto/sha512.c:79:
+#define e1(x)       (ror64(x,14) ^ ror64(x,18) ^ ror64(x,41))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: crypto/sha512.c:79:
+#define e1(x)       (ror64(x,14) ^ ror64(x,18) ^ ror64(x,41))
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#95: FILE: crypto/sha512.c:79:
+#define e1(x)       (ror64(x,14) ^ ror64(x,18) ^ ror64(x,41))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#96: FILE: crypto/sha512.c:80:
+#define s0(x)       (ror64(x, 1) ^ ror64(x, 8) ^ (x >> 7))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: crypto/sha512.c:81:
+#define s1(x)       (ror64(x,19) ^ ror64(x,61) ^ (x >> 6))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: crypto/sha512.c:81:
+#define s1(x)       (ror64(x,19) ^ ror64(x,61) ^ (x >> 6))
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#97: FILE: crypto/sha512.c:81:
+#define s1(x)       (ror64(x,19) ^ ror64(x,61) ^ (x >> 6))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#117: FILE: include/asm-i386/bitops.h:43:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#117: FILE: include/asm-i386/bitops.h:43:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#117: FILE: include/asm-i386/bitops.h:43:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: include/asm-i386/bitops.h:60:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#126: FILE: include/asm-i386/bitops.h:60:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#126: FILE: include/asm-i386/bitops.h:60:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: include/asm-i386/bitops.h:78:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#135: FILE: include/asm-i386/bitops.h:78:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#135: FILE: include/asm-i386/bitops.h:78:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: include/asm-i386/bitops.h:86:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#144: FILE: include/asm-i386/bitops.h:86:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#144: FILE: include/asm-i386/bitops.h:86:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: include/asm-i386/bitops.h:105:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#153: FILE: include/asm-i386/bitops.h:105:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#153: FILE: include/asm-i386/bitops.h:105:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: include/asm-i386/bitops.h:123:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#162: FILE: include/asm-i386/bitops.h:123:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#162: FILE: include/asm-i386/bitops.h:123:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: include/asm-i386/bitops.h:140:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#171: FILE: include/asm-i386/bitops.h:140:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#171: FILE: include/asm-i386/bitops.h:140:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: include/asm-i386/bitops.h:160:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#180: FILE: include/asm-i386/bitops.h:160:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#180: FILE: include/asm-i386/bitops.h:160:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: include/asm-i386/bitops.h:180:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#189: FILE: include/asm-i386/bitops.h:180:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#189: FILE: include/asm-i386/bitops.h:180:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#198: FILE: include/asm-i386/bitops.h:200:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#198: FILE: include/asm-i386/bitops.h:200:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#207: FILE: include/asm-i386/bitops.h:212:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#207: FILE: include/asm-i386/bitops.h:212:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#216: FILE: include/asm-i386/bitops.h:231:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#216: FILE: include/asm-i386/bitops.h:231:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#216: FILE: include/asm-i386/bitops.h:231:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#225: FILE: include/asm-i386/bitops.h:251:
+static __inline__ int constant_test_bit(int nr, const volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#225: FILE: include/asm-i386/bitops.h:251:
+static __inline__ int constant_test_bit(int nr, const volatile unsigned long *addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: include/asm-i386/bitops.h:256:
+static __inline__ int variable_test_bit(int nr, const volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#231: FILE: include/asm-i386/bitops.h:256:
+static __inline__ int variable_test_bit(int nr, const volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#231: FILE: include/asm-i386/bitops.h:256:
+static __inline__ int variable_test_bit(int nr, const volatile unsigned long * addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#240: FILE: include/asm-i386/bitops.h:282:
+static __inline__ int find_first_zero_bit(const unsigned long *addr, unsigned size)

WARNING:INLINE: plain inline is preferred over __inline__
#240: FILE: include/asm-i386/bitops.h:282:
+static __inline__ int find_first_zero_bit(const unsigned long *addr, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: include/asm-i386/bitops.h:322:
+static __inline__ int find_first_bit(const unsigned long *addr, unsigned size)

WARNING:INLINE: plain inline is preferred over __inline__
#249: FILE: include/asm-i386/bitops.h:322:
+static __inline__ int find_first_bit(const unsigned long *addr, unsigned size)

WARNING:INLINE: plain inline is preferred over __inline__
#258: FILE: include/asm-i386/bitops.h:356:
+static __inline__ unsigned long ffz(unsigned long word)

WARNING:INLINE: plain inline is preferred over __inline__
#267: FILE: include/asm-i386/bitops.h:370:
+static __inline__ unsigned long __ffs(unsigned long word)

WARNING:INLINE: plain inline is preferred over __inline__
#276: FILE: include/asm-i386/bitops.h:392:
+static __inline__ int sched_find_first_bit(const unsigned long *b)

WARNING:INLINE: plain inline is preferred over __inline__
#285: FILE: include/asm-i386/bitops.h:413:
+static __inline__ int ffs(int x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#309: FILE: include/asm-i386/bitops.h:450:
+#define constant_rol64(v,c) \
                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#309: FILE: include/asm-i386/bitops.h:450:
+#define constant_rol64(v,c) \
+	({						\
+	u64 vv = (v);					\
+	if(!(c&63)) {					\
+	} else if((c&63)==1) {				\
+		asm (					\
+		"	shldl	$1,%%edx,%%eax	\n"	\
+		"	rcll	$1,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	} else if((c&63)==63) {				\
+		asm (					\
+		"	shrdl	$1,%%edx,%%eax	\n"	\
+		"	rcrl	$1,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	} else if((c&63)<32) {				\
+		asm (					\
+		"	shldl	%3,%%edx,%%eax	\n"	\
+		"	shldl	%3,%2,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv), "r" (vv), "Ic" (c&63)	\
+		);					\
+	} else if((c&63)>32) {				\
+		asm (					\
+		"	shrdl	%3,%%edx,%%eax	\n"	\
+		"	shrdl	%3,%2,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv), "r" (vv), "Ic" (64-(c&63))	\
+		);					\
+	} else /* (c&63)==32 */ {			\
+		asm (					\
+		"	xchgl	%%edx,%%eax	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	}						\
+	vv;						\
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#309: FILE: include/asm-i386/bitops.h:450:
+#define constant_rol64(v,c) \
+	({						\
+	u64 vv = (v);					\
+	if(!(c&63)) {					\
+	} else if((c&63)==1) {				\
+		asm (					\
+		"	shldl	$1,%%edx,%%eax	\n"	\
+		"	rcll	$1,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	} else if((c&63)==63) {				\
+		asm (					\
+		"	shrdl	$1,%%edx,%%eax	\n"	\
+		"	rcrl	$1,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	} else if((c&63)<32) {				\
+		asm (					\
+		"	shldl	%3,%%edx,%%eax	\n"	\
+		"	shldl	%3,%2,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv), "r" (vv), "Ic" (c&63)	\
+		);					\
+	} else if((c&63)>32) {				\
+		asm (					\
+		"	shrdl	%3,%%edx,%%eax	\n"	\
+		"	shrdl	%3,%2,%%edx	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv), "r" (vv), "Ic" (64-(c&63))	\
+		);					\
+	} else /* (c&63)==32 */ {			\
+		asm (					\
+		"	xchgl	%%edx,%%eax	\n"	\
+		: "=&A" (vv)				\
+		: "0" (vv)				\
+		);					\
+	}						\
+	vv;						\
+	})

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#312: FILE: include/asm-i386/bitops.h:453:
+	if(!(c&63)) {					\
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#312: FILE: include/asm-i386/bitops.h:453:
+	if(!(c&63)) {					\

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: include/asm-i386/bitops.h:453:
+	if(!(c&63)) {					\
[...]
+	} else if((c&63)==1) {				\
[...]
+	} else if((c&63)==63) {				\
[...]
+	} else if((c&63)<32) {				\
[...]
+	} else if((c&63)>32) {				\
[...]
+	} else /* (c&63)==32 */ {			\
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#313: FILE: include/asm-i386/bitops.h:454:
+	} else if((c&63)==1) {				\
 	            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#313: FILE: include/asm-i386/bitops.h:454:
+	} else if((c&63)==1) {				\
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: include/asm-i386/bitops.h:454:
+	} else if((c&63)==1) {				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#315: FILE: include/asm-i386/bitops.h:456:
+		"	shldl	$1,%%edx,%%eax	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#316: FILE: include/asm-i386/bitops.h:457:
+		"	rcll	$1,%%edx	\n"	\

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#320: FILE: include/asm-i386/bitops.h:461:
+	} else if((c&63)==63) {				\
 	            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#320: FILE: include/asm-i386/bitops.h:461:
+	} else if((c&63)==63) {				\
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#320: FILE: include/asm-i386/bitops.h:461:
+	} else if((c&63)==63) {				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#322: FILE: include/asm-i386/bitops.h:463:
+		"	shrdl	$1,%%edx,%%eax	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#323: FILE: include/asm-i386/bitops.h:464:
+		"	rcrl	$1,%%edx	\n"	\

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#327: FILE: include/asm-i386/bitops.h:468:
+	} else if((c&63)<32) {				\
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#327: FILE: include/asm-i386/bitops.h:468:
+	} else if((c&63)<32) {				\
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: include/asm-i386/bitops.h:468:
+	} else if((c&63)<32) {				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#329: FILE: include/asm-i386/bitops.h:470:
+		"	shldl	%3,%%edx,%%eax	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#330: FILE: include/asm-i386/bitops.h:471:
+		"	shldl	%3,%2,%%edx	\n"	\

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#332: FILE: include/asm-i386/bitops.h:473:
+		: "0" (vv), "r" (vv), "Ic" (c&63)	\
 		                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#334: FILE: include/asm-i386/bitops.h:475:
+	} else if((c&63)>32) {				\
 	            ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#334: FILE: include/asm-i386/bitops.h:475:
+	} else if((c&63)>32) {				\
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#334: FILE: include/asm-i386/bitops.h:475:
+	} else if((c&63)>32) {				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#336: FILE: include/asm-i386/bitops.h:477:
+		"	shrdl	%3,%%edx,%%eax	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#337: FILE: include/asm-i386/bitops.h:478:
+		"	shrdl	%3,%2,%%edx	\n"	\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#339: FILE: include/asm-i386/bitops.h:480:
+		: "0" (vv), "r" (vv), "Ic" (64-(c&63))	\
 		                              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#339: FILE: include/asm-i386/bitops.h:480:
+		: "0" (vv), "r" (vv), "Ic" (64-(c&63))	\
 		                                 ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#343: FILE: include/asm-i386/bitops.h:484:
+		"	xchgl	%%edx,%%eax	\n"	\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#354: FILE: include/asm-i386/bitops.h:495:
+static __inline__ u64 rol64(u64 x,int num) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: include/asm-i386/bitops.h:495:
+static __inline__ u64 rol64(u64 x,int num) {
                                  ^

WARNING:INLINE: plain inline is preferred over __inline__
#354: FILE: include/asm-i386/bitops.h:495:
+static __inline__ u64 rol64(u64 x,int num) {

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: include/asm-i386/bitops.h:496:
+	if(__builtin_constant_p(num))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: include/asm-i386/bitops.h:497:
+		return constant_rol64(x,num);
 		                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#358: FILE: include/asm-i386/bitops.h:499:
+	return ((x<<num) | (x>>(64-num)));
 	          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#358: FILE: include/asm-i386/bitops.h:499:
+	return ((x<<num) | (x>>(64-num)));
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#358: FILE: include/asm-i386/bitops.h:499:
+	return ((x<<num) | (x>>(64-num)));
 	                          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#360: FILE: include/asm-i386/bitops.h:501:
+}
+static __inline__ u64 ror64(u64 x,int num) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#360: FILE: include/asm-i386/bitops.h:501:
+static __inline__ u64 ror64(u64 x,int num) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: include/asm-i386/bitops.h:501:
+static __inline__ u64 ror64(u64 x,int num) {
                                  ^

WARNING:INLINE: plain inline is preferred over __inline__
#360: FILE: include/asm-i386/bitops.h:501:
+static __inline__ u64 ror64(u64 x,int num) {

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: include/asm-i386/bitops.h:502:
+	if(__builtin_constant_p(num))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/asm-i386/bitops.h:503:
+		return constant_rol64(x,(64-num));
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#362: FILE: include/asm-i386/bitops.h:503:
+		return constant_rol64(x,(64-num));
 		                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#363: FILE: include/asm-i386/bitops.h:504:
+	return ((x>>num) | (x<<(64-num)));
 	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#363: FILE: include/asm-i386/bitops.h:504:
+	return ((x>>num) | (x<<(64-num)));
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#363: FILE: include/asm-i386/bitops.h:504:
+	return ((x>>num) | (x<<(64-num)));
 	                          ^

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_ROL64' is wrong - use Kconfig variables or standard guards instead
#366: FILE: include/asm-i386/bitops.h:507:
+#define ARCH_HAS_ROL64

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_ROR64' is wrong - use Kconfig variables or standard guards instead
#367: FILE: include/asm-i386/bitops.h:508:
+#define ARCH_HAS_ROR64

WARNING:INLINE: plain inline is preferred over __inline__
#399: FILE: include/linux/bitops.h:11:
+static __inline__ int generic_ffs(int x)

WARNING:INLINE: plain inline is preferred over __inline__
#408: FILE: include/linux/bitops.h:92:
+static __inline__ unsigned int generic_hweight32(unsigned int w)

WARNING:INLINE: plain inline is preferred over __inline__
#417: FILE: include/linux/bitops.h:101:
+static __inline__ unsigned int generic_hweight16(unsigned int w)

WARNING:INLINE: plain inline is preferred over __inline__
#426: FILE: include/linux/bitops.h:109:
+static __inline__ unsigned int generic_hweight8(unsigned int w)

WARNING:INLINE: plain inline is preferred over __inline__
#434: FILE: include/linux/bitops.h:116:
+static __inline__ unsigned long generic_hweight64(__u64 w)

WARNING:INLINE: plain inline is preferred over __inline__
#443: FILE: include/linux/bitops.h:132:
+static __inline__ unsigned long hweight_long(unsigned long w)

WARNING:INLINE: plain inline is preferred over __inline__
#452: FILE: include/linux/bitops.h:143:
+static __inline__ __u32 rol32(__u32 word, unsigned int shift)

WARNING:INLINE: plain inline is preferred over __inline__
#461: FILE: include/linux/bitops.h:154:
+static __inline__ __u32 ror32(__u32 word, unsigned int shift)

WARNING:INLINE: plain inline is preferred over __inline__
#473: FILE: include/linux/bitops.h:166:
+static __inline__ __u64 rol64(__u64 word, unsigned int shift)

WARNING:INLINE: plain inline is preferred over __inline__
#486: FILE: include/linux/bitops.h:179:
+static __inline__ __u64 ror64(__u64 word, unsigned int shift)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 58 warnings, 23 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
