WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#18: 
Port of the 0.8.50 xattr-mbcache patch to 2.5.  (Shrinker API, hch cleanups)

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#38: 
--- a/fs/Kconfig	Thu Oct 31 02:39:10 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: fs/mbcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#79: FILE: fs/mbcache.c:2:
+ * linux/fs/mbcache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: fs/mbcache.c:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#119: FILE: fs/mbcache.c:42:
+		printk(KERN_DEBUG f); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: fs/mbcache.c:43:
+		printk("\n"); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: fs/mbcache.c:46:
+		printk(KERN_ERR "assertion " #c " failed\n"); \

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: fs/mbcache.c:47:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: fs/mbcache.c:49:
+# define mb_debug(f...) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: fs/mbcache.c:50:
+# define mb_assert(c) do { } while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#130: FILE: fs/mbcache.c:53:
+		printk(KERN_ERR f); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#131: FILE: fs/mbcache.c:54:
+		printk("\n"); \

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: fs/mbcache.c:55:
+	} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: fs/mbcache.c:56:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#138: FILE: fs/mbcache.c:61:
+EXPORT_SYMBOL(mb_cache_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#139: FILE: fs/mbcache.c:62:
+EXPORT_SYMBOL(mb_cache_shrink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: fs/mbcache.c:63:
+EXPORT_SYMBOL(mb_cache_destroy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#141: FILE: fs/mbcache.c:64:
+EXPORT_SYMBOL(mb_cache_entry_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#142: FILE: fs/mbcache.c:65:
+EXPORT_SYMBOL(mb_cache_entry_insert);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#143: FILE: fs/mbcache.c:66:
+EXPORT_SYMBOL(mb_cache_entry_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#144: FILE: fs/mbcache.c:67:
+EXPORT_SYMBOL(mb_cache_entry_takeout);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#145: FILE: fs/mbcache.c:68:
+EXPORT_SYMBOL(mb_cache_entry_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#146: FILE: fs/mbcache.c:69:
+EXPORT_SYMBOL(mb_cache_entry_dup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#147: FILE: fs/mbcache.c:70:
+EXPORT_SYMBOL(mb_cache_entry_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#150: FILE: fs/mbcache.c:73:
+EXPORT_SYMBOL(mb_cache_entry_find_next);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#153: FILE: fs/mbcache.c:76:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: fs/mbcache.c:111:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: fs/mbcache.c:118:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: fs/mbcache.c:125:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: fs/mbcache.c:135:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#216: FILE: fs/mbcache.c:139:
+	for (n=0; n<mb_cache_indexes(cache); n++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#216: FILE: fs/mbcache.c:139:
+	for (n=0; n<mb_cache_indexes(cache); n++) {
 	           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: fs/mbcache.c:143:
+^I^I         &cache->c_indexes_hash[n][bucket]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: fs/mbcache.c:147:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: fs/mbcache.c:161:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: fs/mbcache.c:168:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#254: FILE: fs/mbcache.c:177:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#267: FILE: fs/mbcache.c:190:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: fs/mbcache.c:206:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/mbcache.c:230:
+		mb_debug("cache %s (%d)", cache->c_name,
+			  atomic_read(&cache->c_entry_count));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: fs/mbcache.c:261:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#360: FILE: fs/mbcache.c:283:
+	int m=0, n, bucket_count = 1 << bucket_bits;
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: fs/mbcache.c:286:
+	if(entry_size < sizeof(struct mb_cache_entry) +

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cache)...) over kmalloc(sizeof(struct mb_cache)...)
#367: FILE: fs/mbcache.c:290:
+	cache = kmalloc(sizeof(struct mb_cache) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: fs/mbcache.c:291:
+^I                indexes_count * sizeof(struct list_head), GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: fs/mbcache.c:307:
+^I                              GFP_KERNEL);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#387: FILE: fs/mbcache.c:310:
+	for (n=0; n<bucket_count; n++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#387: FILE: fs/mbcache.c:310:
+	for (n=0; n<bucket_count; n++)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#389: FILE: fs/mbcache.c:312:
+	for (m=0; m<indexes_count; m++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#389: FILE: fs/mbcache.c:312:
+	for (m=0; m<indexes_count; m++) {
 	           ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#390: FILE: fs/mbcache.c:313:
+		cache->c_indexes_hash[m] = kmalloc(bucket_count *
+		                                 sizeof(struct list_head),
+		                                 GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: fs/mbcache.c:314:
+^I^I                                 sizeof(struct list_head),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: fs/mbcache.c:315:
+^I^I                                 GFP_KERNEL);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#395: FILE: fs/mbcache.c:318:
+		for (n=0; n<bucket_count; n++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#395: FILE: fs/mbcache.c:318:
+		for (n=0; n<bucket_count; n++)
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: fs/mbcache.c:322:
+	cache->c_entry_cache = kmem_cache_create(name, entry_size, 0,
+		0 /*SLAB_POISON | SLAB_RED_ZONE*/, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#406: FILE: fs/mbcache.c:329:
+			printk(KERN_ERR "%s: already have a shrinker!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: fs/mbcache.c:330:
+			printk(KERN_ERR "%s: already have a shrinker!\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#407: FILE: fs/mbcache.c:330:
+					__FUNCTION__);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#421: FILE: fs/mbcache.c:344:
+		if (cache->c_block_hash)
+			kfree(cache->c_block_hash);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: fs/mbcache.c:350:
+
+

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#431: FILE: fs/mbcache.c:354:
+ * Removes all cache entires of a device from the cache. All cache entries
                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#466: FILE: fs/mbcache.c:389:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/mbcache.c:433:
+		mb_error("cache %s: %d orphaned entries",
+			  cache->c_name,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#516: FILE: fs/mbcache.c:439:
+	for (n=0; n < mb_cache_indexes(cache); n++)
 	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: fs/mbcache.c:446:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#548: FILE: fs/mbcache.c:471:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: fs/mbcache.c:496:
+^Ibucket =  hash_long((unsigned long)bdev + (block & 0xffffffff), $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#585: FILE: fs/mbcache.c:508:
+	for (n=0; n<mb_cache_indexes(cache); n++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#585: FILE: fs/mbcache.c:508:
+	for (n=0; n<mb_cache_indexes(cache); n++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#593: FILE: fs/mbcache.c:516:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: fs/mbcache.c:531:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: fs/mbcache.c:549:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: fs/mbcache.c:566:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: fs/mbcache.c:580:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#699: FILE: fs/mbcache.c:622:
+^I^I^I           e_indexes[index].o_list);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#711: FILE: fs/mbcache.c:634:
+
+

WARNING:TYPO_SPELLING: 'Additonal' may be misspelled - perhaps 'Additional'?
#716: FILE: fs/mbcache.c:639:
+ * an additional index. Additonal matches can be found with
                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'additonal' may be misspelled - perhaps 'additional'?
#720: FILE: fs/mbcache.c:643:
+ * @index: the number of the additonal index to search (0<=index<indexes_count)
                              ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#736: FILE: fs/mbcache.c:659:
+^I                           index, bdev, key);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: fs/mbcache.c:664:
+
+

WARNING:TYPO_SPELLING: 'atomatically' may be misspelled - perhaps 'automatically'?
#747: FILE: fs/mbcache.c:670:
+ * entry is atomatically released, so that mb_cache_entry_find_next() can
             ^^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#752: FILE: fs/mbcache.c:675:
+ * ^I...$

WARNING:TYPO_SPELLING: 'additonal' may be misspelled - perhaps 'additional'?
#757: FILE: fs/mbcache.c:680:
+ * @index: the number of the additonal index to search (0<=index<indexes_count)
                              ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: fs/mbcache.c:697:
+^I                           index, bdev, key);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#784: FILE: include/linux/mbcache.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#785: FILE: include/linux/mbcache.h:2:
+/*
+  File: linux/mbcache.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#796: FILE: include/linux/mbcache.h:13:
+	void (*free)(struct mb_cache_entry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_op *' should also have an identifier name
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#830: FILE: include/linux/mbcache.h:47:
+struct mb_cache * mb_cache_create(const char *, struct mb_cache_op *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache *' should also have an identifier name
#832: FILE: include/linux/mbcache.h:49:
+void mb_cache_shrink(struct mb_cache *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#832: FILE: include/linux/mbcache.h:49:
+void mb_cache_shrink(struct mb_cache *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache *' should also have an identifier name
#833: FILE: include/linux/mbcache.h:50:
+void mb_cache_destroy(struct mb_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache *' should also have an identifier name
#837: FILE: include/linux/mbcache.h:54:
+struct mb_cache_entry *mb_cache_entry_alloc(struct mb_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#838: FILE: include/linux/mbcache.h:55:
+int mb_cache_entry_insert(struct mb_cache_entry *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#838: FILE: include/linux/mbcache.h:55:
+int mb_cache_entry_insert(struct mb_cache_entry *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#838: FILE: include/linux/mbcache.h:55:
+int mb_cache_entry_insert(struct mb_cache_entry *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int[]' should also have an identifier name
#838: FILE: include/linux/mbcache.h:55:
+int mb_cache_entry_insert(struct mb_cache_entry *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#840: FILE: include/linux/mbcache.h:57:
+void mb_cache_entry_rehash(struct mb_cache_entry *, unsigned int[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int[]' should also have an identifier name
#840: FILE: include/linux/mbcache.h:57:
+void mb_cache_entry_rehash(struct mb_cache_entry *, unsigned int[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#841: FILE: include/linux/mbcache.h:58:
+void mb_cache_entry_release(struct mb_cache_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#842: FILE: include/linux/mbcache.h:59:
+void mb_cache_entry_takeout(struct mb_cache_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#843: FILE: include/linux/mbcache.h:60:
+void mb_cache_entry_free(struct mb_cache_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#844: FILE: include/linux/mbcache.h:61:
+struct mb_cache_entry *mb_cache_entry_dup(struct mb_cache_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache *' should also have an identifier name
#845: FILE: include/linux/mbcache.h:62:
+struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#845: FILE: include/linux/mbcache.h:62:
+struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#845: FILE: include/linux/mbcache.h:62:
+struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: include/linux/mbcache.h:67:
+^I^I^I^I^I^I struct block_device *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mb_cache_entry *' should also have an identifier name
#852: FILE: include/linux/mbcache.h:69:
+struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache_entry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#852: FILE: include/linux/mbcache.h:69:
+struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache_entry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#852: FILE: include/linux/mbcache.h:69:
+struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache_entry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#852: FILE: include/linux/mbcache.h:69:
+struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache_entry *, int,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: include/linux/mbcache.h:70:
+^I^I^I^I^I^Istruct block_device *, $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 58 warnings, 28 checks, 802 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
