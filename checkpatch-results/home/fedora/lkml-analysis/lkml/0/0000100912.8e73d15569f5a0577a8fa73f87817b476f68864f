WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/gfs2/locking/nolock/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: fs/gfs2/locking/nolock/main.c:37:
+	/* If there is a "jid=" in the hostdata, return that jid.
+	   Otherwise, return zero. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: fs/gfs2/locking/nolock/main.c:37:
+	   Otherwise, return zero. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#83: FILE: fs/gfs2/locking/nolock/main.c:40:
+	if (!c)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#85: FILE: fs/gfs2/locking/nolock/main.c:42:
+	else {

WARNING:NAKED_SSCANF: unchecked sscanf return value
#87: FILE: fs/gfs2/locking/nolock/main.c:44:
+		sscanf(c, "%u", &jid);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#87: FILE: fs/gfs2/locking/nolock/main.c:44:
+		sscanf(c, "%u", &jid);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*nl)...) over kmalloc(sizeof(struct nolock_lockspace)...)
#90: FILE: fs/gfs2/locking/nolock/main.c:47:
+	nl = kmalloc(sizeof(struct nolock_lockspace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: fs/gfs2/locking/nolock/main.c:71:
+	struct nolock_lockspace *nl = (struct nolock_lockspace *)lockspace;
+	kfree(nl);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'descripton' may be misspelled - perhaps 'description'?
#122: FILE: fs/gfs2/locking/nolock/main.c:79:
+ * nolock_get_lock - get a lm_lock_t given a descripton of the lock
                                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: fs/gfs2/locking/nolock/main.c:201:
+	int error;
+	lock_kernel();

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: fs/gfs2/locking/nolock/main.c:211:
+	int error;
+	lock_kernel();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: fs/gfs2/locking/nolock/main.c:249:
+		printk("lock_nolock: can't register protocol: %d\n", error);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: fs/gfs2/locking/nolock/main.c:253:
+	printk("Lock_Nolock (built %s %s) installed\n", __DATE__, __TIME__);

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#296: FILE: fs/gfs2/locking/nolock/main.c:253:
+	printk("Lock_Nolock (built %s %s) installed\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#296: FILE: fs/gfs2/locking/nolock/main.c:253:
+	printk("Lock_Nolock (built %s %s) installed\n", __DATE__, __TIME__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100912.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 11 warnings, 3 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100912.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
