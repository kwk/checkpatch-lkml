ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#37: 
--- a/drivers/pci/msi.c	Mon Feb  9 14:58:16 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: drivers/pci/msi.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: drivers/pci/msi.h:21:
+#define NR_HP_RESERVED_VECTORS ^I20$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#86: FILE: drivers/pci/msi.h:35:
+static inline int get_ioapic_vector(struct pci_dev *dev) { return -1;}
                                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: drivers/pci/msi.h:38:
+extern void restore_ioapic_irq_handler(int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: drivers/pci/msi.h:45:
+#define PCI_MSIX_FLAGS_ENABLE		(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: drivers/pci/msi.h:47:
+#define PCI_MSIX_FLAGS_BITMASK		(1 << 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#106: FILE: drivers/pci/msi.h:55:
+#define msi_control_reg(base)		(base + PCI_MSI_FLAGS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#107: FILE: drivers/pci/msi.h:56:
+#define msi_lower_address_reg(base)	(base + PCI_MSI_ADDRESS_LO)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#108: FILE: drivers/pci/msi.h:57:
+#define msi_upper_address_reg(base)	(base + PCI_MSI_ADDRESS_HI)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#109: FILE: drivers/pci/msi.h:58:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#109: FILE: drivers/pci/msi.h:58:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is64bit' may be better as '(is64bit)' to avoid precedence issues
#109: FILE: drivers/pci/msi.h:58:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: drivers/pci/msi.h:59:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: drivers/pci/msi.h:59:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )
 	                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#110: FILE: drivers/pci/msi.h:59:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#110: FILE: drivers/pci/msi.h:59:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#111: FILE: drivers/pci/msi.h:60:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#111: FILE: drivers/pci/msi.h:60:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is64bit' may be better as '(is64bit)' to avoid precedence issues
#111: FILE: drivers/pci/msi.h:60:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: drivers/pci/msi.h:61:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: drivers/pci/msi.h:61:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#112: FILE: drivers/pci/msi.h:61:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                                                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#112: FILE: drivers/pci/msi.h:61:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#113: FILE: drivers/pci/msi.h:62:
+#define msi_disable(control)		control &= ~PCI_MSI_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#113: FILE: drivers/pci/msi.h:62:
+#define msi_disable(control)		control &= ~PCI_MSI_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#114: FILE: drivers/pci/msi.h:63:
+#define multi_msi_capable(control) \
+	(1 << ((control & PCI_MSI_FLAGS_QMASK) >> 1))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#116: FILE: drivers/pci/msi.h:65:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#116: FILE: drivers/pci/msi.h:65:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#116: FILE: drivers/pci/msi.h:65:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#116: FILE: drivers/pci/msi.h:65:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#118: FILE: drivers/pci/msi.h:67:
+#define is_64bit_address(control)	(control & PCI_MSI_FLAGS_64BIT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#119: FILE: drivers/pci/msi.h:68:
+#define is_mask_bit_support(control)	(control & PCI_MSI_FLAGS_MASKBIT)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#120: FILE: drivers/pci/msi.h:69:
+#define msi_enable(control, num) multi_msi_enable(control, num); \
+	control |= PCI_MSI_FLAGS_ENABLE

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'control' - possible side-effects?
#120: FILE: drivers/pci/msi.h:69:
+#define msi_enable(control, num) multi_msi_enable(control, num); \
+	control |= PCI_MSI_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#124: FILE: drivers/pci/msi.h:73:
+#define msix_table_offset_reg(base)	(base + 0x04)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#125: FILE: drivers/pci/msi.h:74:
+#define msix_pba_offset_reg(base)	(base + 0x08)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: drivers/pci/msi.h:75:
+#define msix_enable(control)^I ^Icontrol |= PCI_MSIX_FLAGS_ENABLE$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#126: FILE: drivers/pci/msi.h:75:
+#define msix_enable(control)	 	control |= PCI_MSIX_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#126: FILE: drivers/pci/msi.h:75:
+#define msix_enable(control)	 	control |= PCI_MSIX_FLAGS_ENABLE

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: drivers/pci/msi.h:76:
+#define msix_disable(control)^I ^Icontrol &= ~PCI_MSIX_FLAGS_ENABLE$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#127: FILE: drivers/pci/msi.h:76:
+#define msix_disable(control)	 	control &= ~PCI_MSIX_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#127: FILE: drivers/pci/msi.h:76:
+#define msix_disable(control)	 	control &= ~PCI_MSIX_FLAGS_ENABLE

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: drivers/pci/msi.h:77:
+#define msix_table_size(control) ^I((control & PCI_MSIX_FLAGS_QSIZE)+1)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: drivers/pci/msi.h:77:
+#define msix_table_size(control) 	((control & PCI_MSIX_FLAGS_QSIZE)+1)
                                  	                                 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#128: FILE: drivers/pci/msi.h:77:
+#define msix_table_size(control) 	((control & PCI_MSIX_FLAGS_QSIZE)+1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/pci/msi.h:79:
+#define msix_unmask(address)^I ^I(address & ~PCI_MSIX_FLAGS_BITMASK)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#130: FILE: drivers/pci/msi.h:79:
+#define msix_unmask(address)	 	(address & ~PCI_MSIX_FLAGS_BITMASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#131: FILE: drivers/pci/msi.h:80:
+#define msix_mask(address)		(address | PCI_MSIX_FLAGS_BITMASK)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: drivers/pci/msi.h:81:
+#define msix_is_pending(address) ^I(address & PCI_MSIX_FLAGS_PENDMASK)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#132: FILE: drivers/pci/msi.h:81:
+#define msix_is_pending(address) 	(address & PCI_MSIX_FLAGS_PENDMASK)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: drivers/pci/msi.h:83:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#172: FILE: drivers/pci/msi.h:121:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: drivers/pci/msi.h:129:
+^I^I^I__u32^Iredirection_hint:  1;  ^I/*0: dedicated CPU$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#181: FILE: drivers/pci/msi.h:130:
+			__u32	redirection_hint:  1;  	/*0: dedicated CPU
+							  1: lowest priority */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: drivers/pci/msi.h:130:
+							  1: lowest priority */

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: drivers/pci/msi.h:132:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: drivers/pci/msi.h:132:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/pci/msi.h:132:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: drivers/pci/msi.h:134:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: drivers/pci/msi.h:134:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: drivers/pci/msi.h:134:
+ ^I^I^I__u32^Idest_id^I^I: 24;^I/* Destination ID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: drivers/pci/msi.h:136:
+^I^I^I__u32^Iredirection_hint:  1;  ^I/*0: dedicated CPU$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#188: FILE: drivers/pci/msi.h:137:
+			__u32	redirection_hint:  1;  	/*0: dedicated CPU
+							  1: lowest priority */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#188: FILE: drivers/pci/msi.h:137:
+							  1: lowest priority */

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: drivers/pci/msi.h:143:
+      ^I^I}u;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: drivers/pci/msi.h:143:
+      ^I^I}u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/pci/msi.h:143:
+      ^I^I}u;$

ERROR:SPACING: space required after that close brace '}'
#194: FILE: drivers/pci/msi.h:143:
+      		}u;

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: drivers/pci/msi.h:144:
+       ^I^I__u32  value;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: drivers/pci/msi.h:144:
+       ^I^I__u32  value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/pci/msi.h:144:
+       ^I^I__u32  value;$

ERROR:SPACING: space required after that close brace '}'
#196: FILE: drivers/pci/msi.h:145:
+	}lo_address;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: drivers/pci/msi.h:146:
+^I__u32 ^Ihi_address;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#198: FILE: drivers/pci/msi.h:147:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: drivers/pci/msi.h:151:
+^I^I__u8^Itype^I: 5; ^I/* {0: unused, 5h:MSI, 11h:MSI-X} */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: drivers/pci/msi.h:152:
+^I^I__u8^Imaskbit^I: 1; ^I/* mask-pending bit supported ?   */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: drivers/pci/msi.h:153:
+^I^I__u8^Ireserved: 2; ^I/* reserved^I^I^I  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: drivers/pci/msi.h:154:
+^I^I__u8^Ientry_nr;    ^I/* specific enabled entry ^I  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: drivers/pci/msi.h:156:
+^I^I__u8^Icurrent_cpu; ^I/* current destination cpu^I  */$

ERROR:SPACING: space required after that close brace '}'
#208: FILE: drivers/pci/msi.h:157:
+	}msi_attrib;

ERROR:SPACING: space required after that close brace '}'
#213: FILE: drivers/pci/msi.h:162:
+	}link;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 30 warnings, 34 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
