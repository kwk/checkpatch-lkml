WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#23: 
Dies ist eine mehrteilige Nachricht im MIME-Format.
     ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#75: FILE: ipc/msg.c:130:
+void free_msg(struct msg_msg* msg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#84: FILE: ipc/msg.c:142:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#84: FILE: ipc/msg.c:142:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#93: FILE: ipc/msg.c:194:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#93: FILE: ipc/msg.c:194:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: include/asm-i386/unistd.h:272:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: include/asm-i386/unistd.h:272:
+  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#149: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: include/linux/mqueue.h:4:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: include/linux/mqueue.h:6:
+#define MQ_PRIO_MAX ^I10000^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#156: FILE: include/linux/mqueue.h:8:
+typedef int mqd_t;		/* message queue descriptor */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: include/linux/mqueue.h:18:
+asmlinkage mqd_t sys_mq_open(const char *u_path, int oflag, mode_t mode,
+	struct mq_attr *u_attr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: include/linux/mqueue.h:21:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/mqueue.h:22:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, 
+	size_t msg_len, unsigned int msg_prio, struct timespec *utime);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: include/linux/mqueue.h:23:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: include/linux/mqueue.h:24:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, 
+	size_t msg_len, unsigned int *msg_prio, struct timespec *utime);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/linux/mqueue.h:26:
+asmlinkage int sys_mq_notify(mqd_t mqdes,
+	const struct sigevent *u_notification);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/mqueue.h:29:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr *u_mqstat,
+	struct mq_attr *u_omqstat);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#185: FILE: include/linux/mqueue.h:37:
+	spinlock_t lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: ipc/posixmsg.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#241: FILE: ipc/posixmsg.c:2:
+ *  linux/ipc/posixmsg.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#243: FILE: ipc/posixmsg.c:4:
+ *  Copyright 2002 Peter Wächtler <pwaechtler@mac.com>
                           ^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#269: FILE: ipc/posixmsg.c:30:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#273: FILE: ipc/posixmsg.c:34:
+extern int store_msg(void *dest, struct msg_msg *msg, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#274: FILE: ipc/posixmsg.c:35:
+extern struct msg_msg *load_msg(void *src, int len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#276: FILE: ipc/posixmsg.c:37:
+extern int msg_ctlmnb;		/* default max size of a message queue (all msgs sum up) */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#277: FILE: ipc/posixmsg.c:38:
+extern int msg_ctlmni;		/* max # of msg queue identifiers */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#278: FILE: ipc/posixmsg.c:39:
+extern int msg_ctlmax;		/* max size of one message (bytes) */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#281: FILE: ipc/posixmsg.c:42:
+static int mqueue_close(struct inode *inode, struct file *filp);
                                                           ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#287: FILE: ipc/posixmsg.c:48:
+static struct file_operations msg_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#292: FILE: ipc/posixmsg.c:53:
+};
+static struct inode_operations msg_dir_inode_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#292: FILE: ipc/posixmsg.c:53:
+static struct inode_operations msg_dir_inode_operations = {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#307: FILE: ipc/posixmsg.c:68:
+		return ERR_PTR(retval);;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#309: FILE: ipc/posixmsg.c:70:
+	queue->q_stime = queue->q_rtime = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#311: FILE: ipc/posixmsg.c:72:
+	queue->q_qbytes = queue->q_cbytes = queue->q_qnum = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#312: FILE: ipc/posixmsg.c:73:
+	queue->q_lspid = queue->q_lrpid = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#326: FILE: ipc/posixmsg.c:87:
+	if (inode) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#330: FILE: ipc/posixmsg.c:91:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: ipc/posixmsg.c:98:
+			if ((q = kmalloc(sizeof (*q), GFP_KERNEL))) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#337: FILE: ipc/posixmsg.c:98:
+			if ((q = kmalloc(sizeof (*q), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#340: FILE: ipc/posixmsg.c:101:
+					iput(inode);
 					^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#345: FILE: ipc/posixmsg.c:106:
+				iput(inode);
 				^^^^

CHECK:BRACES: Unbalanced braces around else statement
#358: FILE: ipc/posixmsg.c:119:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#364: FILE: ipc/posixmsg.c:125:
+#define get_mqueue(filp)\
                    ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'filp' - possible side-effects?
#364: FILE: ipc/posixmsg.c:125:
+#define get_mqueue(filp)\
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#365: FILE: ipc/posixmsg.c:126:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#365: FILE: ipc/posixmsg.c:126:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	                                                 ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#365: FILE: ipc/posixmsg.c:126:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	                                               ^

WARNING:INDENTED_LABEL: labels should not be indented
#379: FILE: ipc/posixmsg.c:140:
+      out_unlock:

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: ipc/posixmsg.c:149:
+	int rc;
+	spin_lock(&q->lock);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#399: FILE: ipc/posixmsg.c:160:
+mqueue_close(struct inode *inode, struct file *filp)
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#403: FILE: ipc/posixmsg.c:164:
+	if (!q || !filp)
 	           ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: ipc/posixmsg.c:169:
+	 * sys_getpid() returns the tgid if multithreaded */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: ipc/posixmsg.c:195:
+		struct msg_msg *msg = list_entry(tmp, struct msg_msg, m_list);
+		tmp = tmp->next;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mqueue_release', this function's name, in a string
#435: FILE: ipc/posixmsg.c:196:
+		pr_info("mqueue_release: freeing msg:%p\n", msg);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#447: FILE: ipc/posixmsg.c:208:
+mqueue_poll(struct file *filp, struct poll_table_struct *wait)
                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#449: FILE: ipc/posixmsg.c:210:
+	struct mqueue_ds *q = get_mqueue(filp);
 	                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#452: FILE: ipc/posixmsg.c:213:
+	poll_wait(filp, &q->wait_recv, wait);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#453: FILE: ipc/posixmsg.c:214:
+	poll_wait(filp, &q->wait_send, wait);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#469: FILE: ipc/posixmsg.c:230:
+	struct file *filp;
 	             ^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#474: FILE: ipc/posixmsg.c:235:
+	inode = get_msg_inode(msg_mnt->mnt_sb, S_IFIFO | (mode & S_IRWXUGO));

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#481: FILE: ipc/posixmsg.c:242:
+	if (u_attr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#482: FILE: ipc/posixmsg.c:243:
+		if (copy_from_user(&q->attr, u_attr, sizeof (struct mq_attr))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#487: FILE: ipc/posixmsg.c:248:
+		if (q->attr.mq_maxmsg <= 0
+		    || q->attr.mq_msgsize <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#488: FILE: ipc/posixmsg.c:249:
+		    || q->attr.mq_msgsize <= 0
+		    || q->attr.mq_maxmsg > MQ_MAXMSG

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#489: FILE: ipc/posixmsg.c:250:
+		    || q->attr.mq_maxmsg > MQ_MAXMSG
+		    || q->attr.mq_msgsize > msg_ctlmax) {

WARNING:SPACING: space prohibited before semicolon
#495: FILE: ipc/posixmsg.c:256:
+		q->attr.mq_msgsize = 1024 /*msg_ctlmax */ ;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#505: FILE: ipc/posixmsg.c:266:
+	if ((fd = get_unused_fd()) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#507: FILE: ipc/posixmsg.c:268:
+	if (!(filp = get_empty_filp()))
 	      ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#507: FILE: ipc/posixmsg.c:268:
+	if (!(filp = get_empty_filp()))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#527: FILE: ipc/posixmsg.c:288:
+	/* Now we map fd to filp, so userspace can access it */
 	                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#528: FILE: ipc/posixmsg.c:289:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#532: FILE: ipc/posixmsg.c:293:
+      out_filp:

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#533: FILE: ipc/posixmsg.c:294:
+	put_filp(filp);
 	         ^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#534: FILE: ipc/posixmsg.c:295:
+      out_fd:

WARNING:INDENTED_LABEL: labels should not be indented
#536: FILE: ipc/posixmsg.c:297:
+      out_inode:

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#538: FILE: ipc/posixmsg.c:299:
+	iput(inode);
 	^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#539: FILE: ipc/posixmsg.c:300:
+      out_ret:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: ipc/posixmsg.c:305:
+ *^Isys_mq_open^I-^Iopens a message queue associated with @u_name $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: ipc/posixmsg.c:314:
+sys_mq_open(const char *u_name, int oflag, mode_t mode, struct mq_attr * u_attr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#555: FILE: ipc/posixmsg.c:316:
+	struct file *filp;
 	             ^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#559: FILE: ipc/posixmsg.c:320:
+	static int oflag2acc[O_ACCMODE] =
+	    { MAY_READ, MAY_WRITE, MAY_READ | MAY_WRITE };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#562: FILE: ipc/posixmsg.c:323:
+	if (IS_ERR(this.name = getname(u_name)))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#574: FILE: ipc/posixmsg.c:335:
+			if (oflag & O_EXCL) {
[...]
+			} else {
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#590: FILE: ipc/posixmsg.c:351:
+		      open_existing:

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#598: FILE: ipc/posixmsg.c:359:
+					filp =
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#601: FILE: ipc/posixmsg.c:362:
+					if (IS_ERR(filp)) {
 					           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#602: FILE: ipc/posixmsg.c:363:
+						ret = PTR_ERR(filp);
 						              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#607: FILE: ipc/posixmsg.c:368:
+					fd_install(fd, filp);
 					               ^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#613: FILE: ipc/posixmsg.c:374:
+      out_dput:

WARNING:INDENTED_LABEL: labels should not be indented
#615: FILE: ipc/posixmsg.c:376:
+      out_ret:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: ipc/posixmsg.c:383:
+ *^Isys_mq_unlink^I-^Iremoves a message queue from the namespace $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: ipc/posixmsg.c:384:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: ipc/posixmsg.c:417:
+ *^Isys_mq_timedsend^I-^Isend a message to the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#677: FILE: ipc/posixmsg.c:438:
+	struct file *filp = mqueue_lookup(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#679: FILE: ipc/posixmsg.c:440:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#679: FILE: ipc/posixmsg.c:440:
+	if (!(q = get_mqueue(filp)))

CHECK:SPACING: No space is necessary after a cast
#683: FILE: ipc/posixmsg.c:444:
+	if ((unsigned int) msg_prio > (unsigned int) MQ_PRIO_MAX)

CHECK:BRACES: braces {} should be used on all arms of this statement
#696: FILE: ipc/posixmsg.c:457:
+	if (utime) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#697: FILE: ipc/posixmsg.c:458:
+		if (copy_from_user(&ts, utime, sizeof (ts)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#700: FILE: ipc/posixmsg.c:461:
+		if (ts.tv_nsec >= 1000000000L || ts.tv_nsec < 0
+		    || ts.tv_sec < 0)

CHECK:BRACES: Unbalanced braces around else statement
#704: FILE: ipc/posixmsg.c:465:
+	} else

CHECK:SPACING: No space is necessary after a cast
#707: FILE: ipc/posixmsg.c:468:
+	msg = load_msg((char *) msg_ptr, msg_len);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#731: FILE: ipc/posixmsg.c:492:
+	if (msg_prio > 0 && !list_empty(&queue->q_messages)) {
+

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#752: FILE: ipc/posixmsg.c:513:
+	if (waitqueue_active(&q->wait_recv)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#757: FILE: ipc/posixmsg.c:518:
+		 * empty to not empty */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#763: FILE: ipc/posixmsg.c:524:
+				err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: ipc/posixmsg.c:547:
+ *^Isys_mq_timedreceive^I-^Ireceive a message from the queue associated $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#797: FILE: ipc/posixmsg.c:558:
+		    unsigned int *msg_prio, struct timespec * utime)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#805: FILE: ipc/posixmsg.c:566:
+	struct file *filp = mqueue_lookup(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#807: FILE: ipc/posixmsg.c:568:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#807: FILE: ipc/posixmsg.c:568:
+	if (!(q = get_mqueue(filp)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#817: FILE: ipc/posixmsg.c:578:
+	if (utime) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#818: FILE: ipc/posixmsg.c:579:
+		if (copy_from_user(&ts, utime, sizeof (ts)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#821: FILE: ipc/posixmsg.c:582:
+		if (ts.tv_nsec >= 1000000000L || ts.tv_nsec < 0
+		    || ts.tv_sec < 0)

CHECK:BRACES: Unbalanced braces around else statement
#825: FILE: ipc/posixmsg.c:586:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#827: FILE: ipc/posixmsg.c:588:
+      wait_on_msg:

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#842: FILE: ipc/posixmsg.c:603:
+	if (!list_empty(&queue->q_messages)) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#862: FILE: ipc/posixmsg.c:623:
+		if ((err = store_msg(msg_ptr, msg, msg_len)) ||

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#868: FILE: ipc/posixmsg.c:629:
+		return msg_len;
+	} else {

WARNING:INDENTED_LABEL: labels should not be indented
#872: FILE: ipc/posixmsg.c:633:
+      out_unlock:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: ipc/posixmsg.c:639:
+ *^Isys_mq_notify^I-^Iset or remove a notification on the queue associated $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: ipc/posixmsg.c:642:
+ *^I@u_notification: pointer to struct sigevent $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#889: FILE: ipc/posixmsg.c:650:
+	struct file *filp = mqueue_lookup(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#890: FILE: ipc/posixmsg.c:651:
+	struct mqueue_ds *q = get_mqueue(filp);
 	                                 ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#895: FILE: ipc/posixmsg.c:656:
+	if (u_notification != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#897: FILE: ipc/posixmsg.c:658:
+		    (&notify, u_notification, sizeof (struct sigevent)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#903: FILE: ipc/posixmsg.c:664:
+	if (q->notify_pid == current->pid
+	    && (u_notification == NULL || notify.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#903: FILE: ipc/posixmsg.c:664:
+	    && (u_notification == NULL || notify.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#909: FILE: ipc/posixmsg.c:670:
+	} else if (u_notification != NULL) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#916: FILE: ipc/posixmsg.c:677:
+			err = -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: ipc/posixmsg.c:686:
+ *^Isys_mq_getattr^I-^Iget the attributes of the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#936: FILE: ipc/posixmsg.c:697:
+	struct file *filp = mqueue_lookup(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#938: FILE: ipc/posixmsg.c:699:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#938: FILE: ipc/posixmsg.c:699:
+	if (!(q = get_mqueue(filp)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#945: FILE: ipc/posixmsg.c:706:
+	if (copy_to_user(u_mqstat, &q->attr, sizeof (struct mq_attr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: ipc/posixmsg.c:713:
+ *^Isys_mq_setattr^I-^Iset the attributes of the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#965: FILE: ipc/posixmsg.c:726:
+	struct file *filp = mqueue_lookup(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#967: FILE: ipc/posixmsg.c:728:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#967: FILE: ipc/posixmsg.c:728:
+	if (!(q = get_mqueue(filp)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_omqstat"
#971: FILE: ipc/posixmsg.c:732:
+	if (u_omqstat != NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#975: FILE: ipc/posixmsg.c:736:
+		if (copy_to_user(u_omqstat, &q->attr, sizeof (struct mq_attr))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#980: FILE: ipc/posixmsg.c:741:
+	if (copy_from_user(&mqstat, u_mqstat, sizeof (struct mq_attr))) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1009: FILE: ipc/posixmsg.c:770:
+	root = get_msg_inode(sb, S_IFDIR | S_IRWXUGO | S_ISVTX);

WARNING:INDENTED_LABEL: labels should not be indented
#1018: FILE: ipc/posixmsg.c:779:
+      out_iput:

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1019: FILE: ipc/posixmsg.c:780:
+	iput(root);
 	^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#1020: FILE: ipc/posixmsg.c:781:
+      out:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1041: FILE: ipc/posixmsg.c:802:
+	if (IS_ERR(msg_mnt = kern_mount(&msg_fs_type)))

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1053: FILE: ipc/posixmsg.c:814:
+__initcall(mqueue_init);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: ipc/util.c:592:
+asmlinkage mqd_t sys_mq_open(const char *u_path, int oflag, mode_t mode,
+	struct mq_attr *u_attr)

CHECK:SPACING: No space is necessary after a cast
#1080: FILE: ipc/util.c:594:
+	return (mqd_t) -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1080: FILE: ipc/util.c:594:
+	return (mqd_t) -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1085: FILE: ipc/util.c:599:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1090: FILE: ipc/util.c:604:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: ipc/util.c:607:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1094: FILE: ipc/util.c:608:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, 
+	size_t msg_len, unsigned int msg_prio, struct timespec *utime)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1096: FILE: ipc/util.c:610:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: ipc/util.c:613:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: ipc/util.c:614:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, 
+	size_t msg_len, unsigned int *msg_prio, struct timespec *utime)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1102: FILE: ipc/util.c:616:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: ipc/util.c:620:
+asmlinkage int sys_mq_notify(mqd_t mqdes,
+	const struct sigevent *u_notification)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1108: FILE: ipc/util.c:622:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1113: FILE: ipc/util.c:627:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: ipc/util.c:631:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr *u_mqstat,
+	struct mq_attr *u_omqstat)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1119: FILE: ipc/util.c:633:
+	return -ENOSYS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 93 warnings, 40 checks, 1009 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
