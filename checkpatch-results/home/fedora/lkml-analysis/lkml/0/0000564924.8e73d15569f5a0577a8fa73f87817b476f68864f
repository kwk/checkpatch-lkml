WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#32: 
properly or investigate what happend,
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'inlcuded' may be misspelled - perhaps 'included'?
#53: 
happens than what's inlcuded in standard 2.2 kernels.
                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'becasue' may be misspelled - perhaps 'because'?
#99: 
 - if killable task is in TASK_UNINTERRUPTIBLE constantly [e.g. becasue
                                                                ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#113: 
diff -urw linux-2.2.18pre21/arch/i386/mm/Makefile linux/arch/i386/mm/Makefile

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: arch/i386/mm/fault.c:26:
+extern int oom_kill(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#144: FILE: arch/i386/mm/fault.c:296:
+			printk(KERN_ERR "Out of Memory: Killed process "

WARNING:SPLIT_STRING: quoted string split across lines
#145: FILE: arch/i386/mm/fault.c:297:
+			printk(KERN_ERR "Out of Memory: Killed process "
+				"%d (%s)\n", tsk->pid, tsk->comm);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#158: FILE: arch/i386/mm/fault.c:299:
+		} else {
[...]
 				tsk->policy |= SCHED_YIELD;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: include/linux/sysctl.h:125:
+	VM_PAGE_CLUSTER=10,	/* int: set number of pages to swap together */
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#175: FILE: include/linux/sysctl.h:126:
+	VM_ROOT_RESERVED=11	/* int: number of pages reserved for root */
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#188: FILE: ipc/shm.c:104:
+	if (!vm_enough_memory(numpages)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#189: FILE: ipc/shm.c:105:
+	if (!vm_enough_memory(numpages)
+	    || !(shp->shm_pages = (ulong *) vmalloc(numpages*sizeof(ulong)))) {

CHECK:SPACING: No space is necessary after a cast
#189: FILE: ipc/shm.c:105:
+	    || !(shp->shm_pages = (ulong *) vmalloc(numpages*sizeof(ulong)))) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#189: FILE: ipc/shm.c:105:
+	    || !(shp->shm_pages = (ulong *) vmalloc(numpages*sizeof(ulong)))) {
 	                                                    ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#189: FILE: ipc/shm.c:105:
+	    || !(shp->shm_pages = (ulong *) vmalloc(numpages*sizeof(ulong)))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: mm/mmap.c:878:
+        struct sysinfo i;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: mm/mmap.c:878:
+        struct sysinfo i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: mm/mmap.c:880:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: mm/mmap.c:882:
+         * via /proc/sys/vm/reserved. Default value is based on RAM size$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: mm/mmap.c:883:
+         *    - no reserved pages if RAM is less than 8MB$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: mm/mmap.c:884:
+         *    - 5MB should be enough on boxes w/ RAM > 100 MB$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: mm/mmap.c:885:
+         *    - otherwise reserve 5%$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: mm/mmap.c:887:
+        si_meminfo(&i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: mm/mmap.c:887:
+        si_meminfo(&i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: mm/mmap.c:888:
+        if (i.totalram < 8 * 1024 * 1024)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: mm/mmap.c:888:
+        if (i.totalram < 8 * 1024 * 1024)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: mm/mmap.c:889:
+                vm_reserved = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: mm/mmap.c:889:
+                vm_reserved = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: mm/mmap.c:890:
+        else if (i.totalram > 100 * 1024 * 1024)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: mm/mmap.c:890:
+        else if (i.totalram > 100 * 1024 * 1024)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: mm/mmap.c:891:
+                vm_reserved = 5 * 1024 * 1024 >> PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: mm/mmap.c:891:
+                vm_reserved = 5 * 1024 * 1024 >> PAGE_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: mm/mmap.c:892:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: mm/mmap.c:892:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: mm/mmap.c:893:
+                vm_reserved = (i.totalram >> PAGE_SHIFT) / 20;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: mm/mmap.c:893:
+                vm_reserved = (i.totalram >> PAGE_SHIFT) / 20;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: mm/oom_kill.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#262: FILE: mm/oom_kill.c:2:
+ *  linux/mm/oom_kill.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Claus' may be misspelled - perhaps 'Clause'?
#265: FILE: mm/oom_kill.c:5:
+ *	Thanks go out to Claus Fischer for some serious inspiration and
   	                 ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: mm/oom_kill.c:35:
+	unsigned int out = x;
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#295: FILE: mm/oom_kill.c:35:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                               ^

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#295: FILE: mm/oom_kill.c:35:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#295: FILE: mm/oom_kill.c:35:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)1' could be '1U'
#295: FILE: mm/oom_kill.c:35:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#296: FILE: mm/oom_kill.c:36:
+	if (x) out -= out >> 2;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#297: FILE: mm/oom_kill.c:37:
+	return (out ? out : 1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/oom_kill.c:83:
+	if (cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_ADMIN) ||
+				p->uid == 0 || p->euid == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#355: FILE: mm/oom_kill.c:95:
+	printk(KERN_DEBUG "OOMkill: task %d (%s) got %d points\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: mm/oom_kill.c:96:
+	printk(KERN_DEBUG "OOMkill: task %d (%s) got %d points\n",
+	p->pid, p->comm, points);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: mm/oom_kill.c:108:
+static struct task_struct * select_bad_process(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: mm/oom_kill.c:118:
+			int points = badness(p);
+			if (points > maxpoints) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#402: FILE: mm/oom_kill.c:142:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: mm/oom_kill.c:145:
+        /* Found nothing?!?! Either we hang forever, or we panic. */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#406: FILE: mm/oom_kill.c:146:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: mm/oom_kill.c:147:
+                panic("Out of memory and no killable processes...\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: mm/oom_kill.c:147:
+                panic("Out of memory and no killable processes...\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: mm/oom_kill.c:149:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: mm/oom_kill.c:150:
+         * We give our sacrificial lamb high priority and access to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: mm/oom_kill.c:151:
+         * all the memory it needs. That way it should be able to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: mm/oom_kill.c:152:
+         * exit() and clear out its resources quickly...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: mm/oom_kill.c:153:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: mm/oom_kill.c:154:
+        p->counter = 5 * HZ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: mm/oom_kill.c:154:
+        p->counter = 5 * HZ;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: mm/oom_kill.c:155:
+        p->flags |= PF_MEMALLOC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: mm/oom_kill.c:155:
+        p->flags |= PF_MEMALLOC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: mm/oom_kill.c:157:
+        if ((p->oom_kill_try++ > 10)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: mm/oom_kill.c:157:
+        if ((p->oom_kill_try++ > 10)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#417: FILE: mm/oom_kill.c:157:
+        if ((p->oom_kill_try++ > 10)
+		|| !(cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_RAWIO)))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#418: FILE: mm/oom_kill.c:158:
+        if ((p->oom_kill_try++ > 10)
+		|| !(cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_RAWIO)))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#422: FILE: mm/oom_kill.c:162:
+			return 1;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#423: FILE: mm/oom_kill.c:163:
+			printk(KERN_ERR "Out of Memory: Killed process "

WARNING:SPLIT_STRING: quoted string split across lines
#424: FILE: mm/oom_kill.c:164:
+			printk(KERN_ERR "Out of Memory: Killed process "
+				"%d (%s), saved process %d (%s)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#431: FILE: mm/oom_kill.c:171:
+			printk(KERN_ERR "Out of Memory: Terminating process "

WARNING:SPLIT_STRING: quoted string split across lines
#432: FILE: mm/oom_kill.c:172:
+			printk(KERN_ERR "Out of Memory: Terminating process "
+				"%d (%s)\n", p->pid, p->comm);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#434: FILE: mm/oom_kill.c:174:
+			printk(KERN_ERR "Out of Memory: Terminating process "

WARNING:SPLIT_STRING: quoted string split across lines
#435: FILE: mm/oom_kill.c:175:
+			printk(KERN_ERR "Out of Memory: Terminating process "
+				"%d (%s), saved process %d (%s).\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p != current'
#441: FILE: mm/oom_kill.c:181:
+	if ((p != current) || (p->oom_kill_try > 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->oom_kill_try > 1'
#441: FILE: mm/oom_kill.c:181:
+	if ((p != current) || (p->oom_kill_try > 1))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#484: FILE: mm/vmscan.c:430:
+	if (0 && !ret) {
+		printk("VM: do_try_to_free_pages failed for %s...\n", current->comm);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: mm/vmscan.c:431:
+		printk("VM: do_try_to_free_pages failed for %s...\n", current->comm);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 37 warnings, 10 checks, 339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
