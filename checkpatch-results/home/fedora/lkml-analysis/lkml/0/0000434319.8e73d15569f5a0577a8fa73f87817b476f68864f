WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
diff -urpNX dontdiff linux-2.5.33/fs/lockd/svclock.c linux-2.5.33-willy/fs/lockd/svclock.c

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#88: FILE: fs/lockd/svclock.c:526:
+	if ((error = posix_lock_file(&file->f_file, &lock->fl)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#185: FILE: fs/locks.c:679:
+	fl.fl_file = filp;
 	             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#192: FILE: fs/locks.c:686:
+		error = posix_lock_file(filp, &fl);
 		                        ^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#216: FILE: fs/locks.c:695:
+			if ((inode->i_mode & (S_ISGID | S_IXGRP)) == S_ISGID)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#237: FILE: fs/locks.c:712:
+static int flock_lock_file(struct file *filp, struct file_lock *new_fl)
                                         ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: fs/locks.c:752:
+		if (new_fl->fl_flags & FL_SLEEP) {
+			locks_insert_block(fl, new_fl);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#272: FILE: fs/locks.c:783:
+int posix_lock_file(struct file *filp, struct file_lock *request)
                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#457: FILE: fs/locks.c:1301:
+	error = security_ops->file_lock(filp, cmd);
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#465: FILE: fs/locks.c:1306:
+		error = flock_lock_file(filp, lock);
 		                        ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#480: FILE: fs/locks.c:1320:
+	if (error) {
 		locks_free_lock(lock);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#496: FILE: fs/locks.c:1430:
+	if (cmd == F_SETLKW) {
+		file_lock->fl_flags |= FL_SLEEP;
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#509: FILE: fs/locks.c:1462:
+		error = posix_lock_file(filp, file_lock);
 		                        ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == F_SETLK'
#510: FILE: fs/locks.c:1463:
+		if ((error != -EAGAIN) || (cmd == F_SETLK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/locks.c:1466:
+		error = wait_event_interruptible(file_lock->fl_wait,
+				!file_lock->fl_next);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#525: FILE: fs/locks.c:1477:
+	if (error) {
+		locks_free_lock(file_lock);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#535: FILE: fs/locks.c:1572:
+	if (cmd == F_SETLKW64) {
+		file_lock->fl_flags |= FL_SLEEP;
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#548: FILE: fs/locks.c:1604:
+		error = posix_lock_file(filp, file_lock);
 		                        ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == F_SETLK'
#549: FILE: fs/locks.c:1605:
+		if ((error != -EAGAIN) || (cmd == F_SETLK))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/locks.c:1608:
+		error = wait_event_interruptible(file_lock->fl_wait,
+				!file_lock->fl_next);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#565: FILE: fs/locks.c:1620:
+	if (error) {
+		locks_free_lock(file_lock);
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#576: FILE: fs/locks.c:1657:
+	posix_lock_file(filp, &lock);
 	                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#585: FILE: fs/locks.c:1711:
+posix_unblock_lock(struct file *filp, struct file_lock *waiter)
                                 ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: fs/locks.c:1713:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#599: FILE: fs/locks.c:1724:
+		posix_lock_file(filp, waiter);
 		                ^^^^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#638: FILE: fs/locks.c:1786:
+			out += sprintf(out, "%Ld EOF\n", fl->fl_start);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#640: FILE: fs/locks.c:1788:
+			out += sprintf(out, "%Ld %Ld\n", fl->fl_start,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#669: FILE: include/linux/fs.h:593:
+extern int posix_lock_file(struct file *, struct file_lock *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#669: FILE: include/linux/fs.h:593:
+extern int posix_lock_file(struct file *, struct file_lock *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#669: FILE: include/linux/fs.h:593:
+extern int posix_lock_file(struct file *, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: include/linux/fs.h:595:
+extern void posix_unblock_lock(struct file *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#672: FILE: include/linux/fs.h:595:
+extern void posix_unblock_lock(struct file *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#672: FILE: include/linux/fs.h:595:
+extern void posix_unblock_lock(struct file *, struct file_lock *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434319.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 25 warnings, 6 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434319.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
