WARNING:TYPO_SPELLING: 'criterias' may be misspelled - perhaps 'criteria'?
#69: 
criterias: process group, thread group id, user id, and group id.
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#73: 
axboe@apu:[.]s/block/hda/queue/iosched $ ls
                     ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#108: 
	axboe@apu:[.]s/block/hda/queue/iosched $ cat key_type 
	                     ^^^

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#136: 
basically no comments (reflecting that it was writting in one go, no
                                              ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: drivers/block/cfq-iosched.c:28:
+#define dprintk(fmt, args...) printk(KERN_ERR "cfq: " fmt, ##args)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#224: FILE: drivers/block/cfq-iosched.c:67:
+#define RQ_DATA(rq)		(rq)->elevator_private

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#230: FILE: drivers/block/cfq-iosched.c:73:
+#define RB_EMPTY(node)		((node)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#231: FILE: drivers/block/cfq-iosched.c:74:
+#define RB_CLEAR_COLOR(node)	(node)->rb_color = RB_NONE

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#232: FILE: drivers/block/cfq-iosched.c:75:
+#define RB_CLEAR(node)		do {	\
+	(node)->rb_parent = NULL;	\
+	RB_CLEAR_COLOR((node));		\
+	(node)->rb_right = NULL;	\
+	(node)->rb_left = NULL;		\
+} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#241: FILE: drivers/block/cfq-iosched.c:84:
+#define rq_rb_key(rq)		(rq)->sector

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#393: FILE: drivers/block/cfq-iosched.c:214:
+	switch (cfqd->key_type) {
+		case CFQ_KEY_PGID:
[...]
+		default:
+		case CFQ_KEY_TGID:
[...]
+		case CFQ_KEY_UID:
[...]
+		case CFQ_KEY_GID:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: drivers/block/cfq-iosched.c:249:
+	BUG_ON(!hlist_unhashed(&crq->hash));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: drivers/block/cfq-iosched.c:263:
+		BUG_ON(hlist_unhashed(&crq->hash));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!crq1"
#483: FILE: drivers/block/cfq-iosched.c:289:
+	if (crq1 == NULL || crq1 == crq2)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!crq2"
#485: FILE: drivers/block/cfq-iosched.c:291:
+	if (crq2 == NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#493: FILE: drivers/block/cfq-iosched.c:299:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: drivers/block/cfq-iosched.c:310:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#506: FILE: drivers/block/cfq-iosched.c:312:
+				distance = abs(s1 - rq->sector +rq->nr_sectors);
 				                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#510: FILE: drivers/block/cfq-iosched.c:316:
+				distance = abs(s2 - rq->sector +rq->nr_sectors);
 				                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#542: FILE: drivers/block/cfq-iosched.c:348:
+	if (!r1_wrap && r2_wrap)
[...]
+	else if (!r2_wrap && r1_wrap)
[...]
+	else if (r1_wrap && r2_wrap) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#555: FILE: drivers/block/cfq-iosched.c:361:
+	if (d1 < d2)
[...]
+	else if (d2 < d1)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#559: FILE: drivers/block/cfq-iosched.c:365:
+		return crq2;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#559: FILE: drivers/block/cfq-iosched.c:365:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#580: FILE: drivers/block/cfq-iosched.c:386:
+	if ((rbnext = rb_next(&last->rb_node)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#614: FILE: drivers/block/cfq-iosched.c:420:
+		if (cfqq->service_used > __cfqq->service_used)
[...]
+		else if (cfqq->service_used == __cfqq->service_used) {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#644: FILE: drivers/block/cfq-iosched.c:449:
+	BUG_ON(cfqq->on_rr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#668: FILE: drivers/block/cfq-iosched.c:473:
+	BUG_ON(!cfqd->busy_queues);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: drivers/block/cfq-iosched.c:487:
+		BUG_ON(!cfqq->queued[crq->is_sync]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#740: FILE: drivers/block/cfq-iosched.c:544:
+	if (!cfqq->on_rr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#743: FILE: drivers/block/cfq-iosched.c:547:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#936: FILE: drivers/block/cfq-iosched.c:765:
+	if ((crq = cfq_check_fifo(cfqq)) == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'queued < max_dispatch'
#997: FILE: drivers/block/cfq-iosched.c:814:
+	if ((queued < max_dispatch) && (busy_queues || first_round)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1080: FILE: drivers/block/cfq-iosched.c:892:
+		if ((crq = RQ_DATA(rq)) != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1103: FILE: drivers/block/cfq-iosched.c:914:
+	BUG_ON(!atomic_read(&cfqq->ref));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cfq_put_queue', this function's name, in a string
#1105: FILE: drivers/block/cfq-iosched.c:916:
+	dprintk("cfq_put_queue 0x%p, ref\n", atomic_read(&cfqq->ref));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1112: FILE: drivers/block/cfq-iosched.c:923:
+	BUG_ON(rb_first(&cfqq->sort_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1113: FILE: drivers/block/cfq-iosched.c:924:
+	BUG_ON(cfqq->on_rr);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1261: FILE: drivers/block/cfq-iosched.c:1059:
+	if ((cic = ioc->cic) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1264: FILE: drivers/block/cfq-iosched.c:1062:
+		if (cic == NULL)

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#1303: FILE: drivers/block/cfq-iosched.c:1101:
+		 * nope, process doesn't have a cic assoicated with this
 		                                    ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!__cic"
#1307: FILE: drivers/block/cfq-iosched.c:1105:
+		if (__cic == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1382: FILE: drivers/block/cfq-iosched.c:1167:
+		strncpy(cfqq->name, current->comm, sizeof(cfqq->name)-1);
 		                                                     ^

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1541: FILE: drivers/block/cfq-iosched.c:1329:
+	const int write = waitqueue_active(&rl->wait[WRITE]);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1542: FILE: drivers/block/cfq-iosched.c:1330:
+	const int read = waitqueue_active(&rl->wait[READ]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1566: FILE: drivers/block/cfq-iosched.c:1351:
+		BUG_ON(!hlist_unhashed(&crq->hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1587: FILE: drivers/block/cfq-iosched.c:1359:
+		BUG_ON(!cfqq->allocated[rw]);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1616: FILE: drivers/block/cfq-iosched.c:1386:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1618: FILE: drivers/block/cfq-iosched.c:1388:
+		printk("%s: got spare queue\n", current->comm);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1653: FILE: drivers/block/cfq-iosched.c:1416:
+		crq->service_start = crq->queue_start = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1654: FILE: drivers/block/cfq-iosched.c:1417:
+		crq->in_flight = crq->accounted = crq->is_sync = 0;

WARNING:TYPO_SPELLING: 'refences' may be misspelled - perhaps 'references'?
#1676: FILE: drivers/block/cfq-iosched.c:1439:
+	 * kill spare queue, getting it means we have two refences to it.
 	                                                  ^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->crq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1702: FILE: drivers/block/cfq-iosched.c:1469:
+	cfqd->crq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_MHASH_ENTRIES, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->cfq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1707: FILE: drivers/block/cfq-iosched.c:1473:
+	cfqd->cfq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_QHASH_ENTRIES, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1778: FILE: drivers/block/cfq-iosched.c:1540:
+	cfq_ioc_pool = kmem_cache_create("cfq_ioc_pool",
+			sizeof(struct cfq_io_context), 0, 0, NULL, NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1791: FILE: drivers/block/cfq-iosched.c:1576:
+	max_elapsed_dispatch = max_elapsed_crq = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1819: FILE: drivers/block/cfq-iosched.c:1604:
+			len += sprintf(page+len, "[%s] ", cfq_key_types[i]);
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1821: FILE: drivers/block/cfq-iosched.c:1606:
+			len += sprintf(page+len, "%s ", cfq_key_types[i]);
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1823: FILE: drivers/block/cfq-iosched.c:1608:
+	len += sprintf(page+len, "\n");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1836: FILE: drivers/block/cfq-iosched.c:1621:
+	len += sprintf(page+len, "key type: %s\n", cfq_key_types[cfqd->key_type]);
 	                   ^

CHECK:SPACING: No space is necessary after a cast
#1837: FILE: drivers/block/cfq-iosched.c:1622:
+	len += sprintf(page+len, "last sector: %Lu\n", (u64) cfqd->last_sector);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1837: FILE: drivers/block/cfq-iosched.c:1622:
+	len += sprintf(page+len, "last sector: %Lu\n", (u64) cfqd->last_sector);
 	                   ^

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1837: FILE: drivers/block/cfq-iosched.c:1622:
+	len += sprintf(page+len, "last sector: %Lu\n", (u64) cfqd->last_sector);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1838: FILE: drivers/block/cfq-iosched.c:1623:
+	len += sprintf(page+len, "max time in iosched: %lu\n", max_elapsed_dispatch);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1839: FILE: drivers/block/cfq-iosched.c:1624:
+	len += sprintf(page+len, "max completion time: %lu\n", max_elapsed_crq);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1841: FILE: drivers/block/cfq-iosched.c:1626:
+	len += sprintf(page+len, "Busy queue list:\n");
 	                   ^

WARNING:LONG_LINE: line length of 250 exceeds 100 columns
#1846: FILE: drivers/block/cfq-iosched.c:1631:
+		len += sprintf(page+len, "  cfqq: key=%lu alloc=%d/%d, queued=%d/%d, last_fifo=%lu, service_used=%lu\n", cfqq->key, cfqq->allocated[0], cfqq->allocated[1], cfqq->queued[0], cfqq->queued[1], cfqq->last_fifo_expire, cfqq->service_used);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1846: FILE: drivers/block/cfq-iosched.c:1631:
+		len += sprintf(page+len, "  cfqq: key=%lu alloc=%d/%d, queued=%d/%d, last_fifo=%lu, service_used=%lu\n", cfqq->key, cfqq->allocated[0], cfqq->allocated[1], cfqq->queued[0], cfqq->queued[1], cfqq->last_fifo_expire, cfqq->service_used);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1848: FILE: drivers/block/cfq-iosched.c:1633:
+	len += sprintf(page+len, "  busy queues total: %d\n", i);
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1850: FILE: drivers/block/cfq-iosched.c:1635:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1851: FILE: drivers/block/cfq-iosched.c:1636:
+	len += sprintf(page+len, "Empty queue list:\n");
 	                   ^

WARNING:LONG_LINE: line length of 250 exceeds 100 columns
#1856: FILE: drivers/block/cfq-iosched.c:1641:
+		len += sprintf(page+len, "  cfqq: key=%lu alloc=%d/%d, queued=%d/%d, last_fifo=%lu, service_used=%lu\n", cfqq->key, cfqq->allocated[0], cfqq->allocated[1], cfqq->queued[0], cfqq->queued[1], cfqq->last_fifo_expire, cfqq->service_used);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1856: FILE: drivers/block/cfq-iosched.c:1641:
+		len += sprintf(page+len, "  cfqq: key=%lu alloc=%d/%d, queued=%d/%d, last_fifo=%lu, service_used=%lu\n", cfqq->key, cfqq->allocated[0], cfqq->allocated[1], cfqq->queued[0], cfqq->queued[1], cfqq->last_fifo_expire, cfqq->service_used);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1858: FILE: drivers/block/cfq-iosched.c:1643:
+	len += sprintf(page+len, "  empty queues total: %d\n", i);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1860: FILE: drivers/block/cfq-iosched.c:1645:
+	len += sprintf(page+len, "Total queues: %d\n", queues);
 	                   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1888: FILE: drivers/block/cfq-iosched.c:1676:
 }
+STORE_FUNCTION(cfq_quantum_store, &cfqd->cfq_quantum, 1, UINT_MAX);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1904: FILE: drivers/block/cfq-iosched.c:1697:
 };
+static struct cfq_fs_entry cfq_tagged_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1905: FILE: drivers/block/cfq-iosched.c:1698:
+	.attr = {.name = "tagged", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1909: FILE: drivers/block/cfq-iosched.c:1702:
+};
+static struct cfq_fs_entry cfq_fifo_expire_r_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1910: FILE: drivers/block/cfq-iosched.c:1703:
+	.attr = {.name = "fifo_expire_sync", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1914: FILE: drivers/block/cfq-iosched.c:1707:
+};
+static struct cfq_fs_entry cfq_fifo_expire_w_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1915: FILE: drivers/block/cfq-iosched.c:1708:
+	.attr = {.name = "fifo_expire_async", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1919: FILE: drivers/block/cfq-iosched.c:1712:
+};
+static struct cfq_fs_entry cfq_fifo_batch_expire_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1920: FILE: drivers/block/cfq-iosched.c:1713:
+	.attr = {.name = "fifo_batch_expire", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1924: FILE: drivers/block/cfq-iosched.c:1717:
+};
+static struct cfq_fs_entry cfq_find_best_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1925: FILE: drivers/block/cfq-iosched.c:1718:
+	.attr = {.name = "find_best_crq", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1929: FILE: drivers/block/cfq-iosched.c:1722:
+};
+static struct cfq_fs_entry cfq_back_max_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1930: FILE: drivers/block/cfq-iosched.c:1723:
+	.attr = {.name = "back_seek_max", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1934: FILE: drivers/block/cfq-iosched.c:1727:
+};
+static struct cfq_fs_entry cfq_back_penalty_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1935: FILE: drivers/block/cfq-iosched.c:1728:
+	.attr = {.name = "back_seek_penalty", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1939: FILE: drivers/block/cfq-iosched.c:1732:
+};
+static struct cfq_fs_entry cfq_clear_elapsed_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1940: FILE: drivers/block/cfq-iosched.c:1733:
+	.attr = {.name = "clear_elapsed", .mode = S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1943: FILE: drivers/block/cfq-iosched.c:1736:
+};
+static struct cfq_fs_entry cfq_misc_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1944: FILE: drivers/block/cfq-iosched.c:1737:
+	.attr = {.name = "show_status", .mode = S_IRUGO },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1947: FILE: drivers/block/cfq-iosched.c:1740:
+};
+static struct cfq_fs_entry cfq_key_type_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1948: FILE: drivers/block/cfq-iosched.c:1741:
+	.attr = {.name = "key_type", .mode = S_IRUGO | S_IWUSR },

WARNING:MEMORY_BARRIER: memory barrier without comment
#2072: FILE: drivers/block/ll_rw_blk.c:1662:
+		smp_mb();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2093: FILE: drivers/block/ll_rw_blk.c:1693:
+	switch (elv_may_queue(q, rw)) {
+		case ELV_MQUEUE_NO:
[...]
+		case ELV_MQUEUE_MAY:
[...]
+		case ELV_MQUEUE_MUST:

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2113: FILE: drivers/block/ll_rw_blk.c:1714:
+#if 0

CHECK:BRACES: braces {} should be used on all arms of this statement
#2218: FILE: drivers/block/ll_rw_blk.c:3139:
+		if (!tsk->io_context)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2220: FILE: drivers/block/ll_rw_blk.c:3141:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2226: FILE: drivers/block/ll_rw_blk.c:3145:
+^I^I^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_io_context *' should also have an identifier name
#2245: FILE: include/linux/blkdev.h:57:
+	void (*dtor)(struct cfq_io_context *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_io_context *' should also have an identifier name
#2246: FILE: include/linux/blkdev.h:58:
+	void (*exit)(struct cfq_io_context *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2264: FILE: include/linux/blkdev.h:84:
+	spinlock_t lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 41 warnings, 51 checks, 2092 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
