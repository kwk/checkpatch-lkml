WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch makes ramfs able to support POSIX shared memory under !MMU

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#58: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/ramfs/file-mmu.c:1:
+/* file-mmu.c: ramfs MMU-based file operations

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#109: FILE: fs/ramfs/file-mmu.c:37:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#112: FILE: fs/ramfs/file-mmu.c:40:
+struct address_space_operations ramfs_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#118: FILE: fs/ramfs/file-mmu.c:46:
+struct file_operations ramfs_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#127: FILE: fs/ramfs/file-mmu.c:55:
+struct inode_operations ramfs_file_inode_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: fs/ramfs/file-nommu.c:1:
+/* file-nommu.c: no-MMU version of ramfs

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#158: FILE: fs/ramfs/file-nommu.c:25:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#163: FILE: fs/ramfs/file-nommu.c:30:
+struct address_space_operations ramfs_aops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#169: FILE: fs/ramfs/file-nommu.c:36:
+struct file_operations ramfs_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#179: FILE: fs/ramfs/file-nommu.c:46:
+struct inode_operations ramfs_file_inode_operations = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: fs/ramfs/file-nommu.c:62:
+	unsigned order;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#214: FILE: fs/ramfs/file-nommu.c:81:
+	 * request */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#282: FILE: fs/ramfs/file-nommu.c:149:
+		 * cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#299: FILE: fs/ramfs/file-nommu.c:166:
+	 * shared mmap */

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: fs/ramfs/file-nommu.c:205:
+		loff_t size = i_size_read(inode);
+		if (ia->ia_size != size) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#346: FILE: fs/ramfs/file-nommu.c:213:
+			ia->ia_valid |= ATTR_MTIME|ATTR_CTIME;
 			                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#389: FILE: fs/ramfs/file-nommu.c:256:
+	pages = kmalloc(lpages * sizeof(struct page *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#408: FILE: fs/ramfs/file-nommu.c:275:
+	ret = (unsigned long) page_address(pages[0]);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#477: FILE: fs/ramfs/internal.h:1:
+/* internal.h: ramfs internal definitions

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: fs/ramfs/internal.h:12:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#489: FILE: fs/ramfs/internal.h:13:
+extern struct address_space_operations ramfs_aops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#490: FILE: fs/ramfs/internal.h:14:
+extern struct file_operations ramfs_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#491: FILE: fs/ramfs/internal.h:15:
+extern struct inode_operations ramfs_file_inode_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: include/linux/ramfs.h:9:
+extern unsigned long ramfs_nommu_get_unmapped_area(struct file *file,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: include/linux/ramfs.h:15:
+extern int ramfs_nommu_mmap(struct file *file, struct vm_area_struct *vma);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 22 warnings, 5 checks, 433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
