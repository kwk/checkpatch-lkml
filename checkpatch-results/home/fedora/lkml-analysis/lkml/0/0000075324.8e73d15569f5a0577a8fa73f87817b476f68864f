WARNING:TYPO_SPELLING: 'shouldnt'' may be misspelled - perhaps 'shouldn't'?
#38: 
> should already run as 64bit - but that shouldnt' affect these files.
                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: arch/i386/boot/compressed/misc.c:88:
+extern unsigned char input_data[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#79: FILE: arch/i386/boot/compressed/misc.c:98:
+static void *memset(void *s, int c, unsigned n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#80: FILE: arch/i386/boot/compressed/misc.c:99:
+static void *memcpy(void *dest, const void *src, unsigned n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#90: FILE: arch/i386/boot/compressed/misc.c:203:
+static void* memset(void* s, int c, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#90: FILE: arch/i386/boot/compressed/misc.c:203:
+static void* memset(void* s, int c, unsigned n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#90: FILE: arch/i386/boot/compressed/misc.c:203:
+static void* memset(void* s, int c, unsigned n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#100: FILE: arch/i386/boot/compressed/misc.c:212:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#100: FILE: arch/i386/boot/compressed/misc.c:212:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#100: FILE: arch/i386/boot/compressed/misc.c:212:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#100: FILE: arch/i386/boot/compressed/misc.c:212:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#108: FILE: arch/i386/boot/compressed/misc.c:217:
+	for (i=0;i<n;i++) d[i] = s[i];
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#108: FILE: arch/i386/boot/compressed/misc.c:217:
+	for (i=0;i<n;i++) d[i] = s[i];
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#108: FILE: arch/i386/boot/compressed/misc.c:217:
+	for (i=0;i<n;i++) d[i] = s[i];
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#108: FILE: arch/i386/boot/compressed/misc.c:217:
+	for (i=0;i<n;i++) d[i] = s[i];
 	            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#108: FILE: arch/i386/boot/compressed/misc.c:217:
+	for (i=0;i<n;i++) d[i] = s[i];

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_STRING: line length of 117 exceeds 100 columns
#129: FILE: arch/i386/boot/compressed/misc.c:321:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#129: FILE: arch/i386/boot/compressed/misc.c:321:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");
 	                                                                    ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#129: FILE: arch/i386/boot/compressed/misc.c:321:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#129: FILE: arch/i386/boot/compressed/misc.c:321:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#132: FILE: arch/i386/boot/compressed/misc.c:323:
+	mv->low_buffer_start = output_data = (unsigned char *)LOW_BUFFER_START;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: arch/x86_64/boot/compressed/misc.c:84:
+#define RM_SCREEN_INFO (*(struct screen_info *)(real_mode+0))
                                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: arch/x86_64/boot/compressed/misc.c:96:
+static void *memset(void *s, int c, unsigned n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: arch/x86_64/boot/compressed/misc.c:97:
+static void *memcpy(void *dest, const void *src, unsigned n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: arch/x86_64/boot/compressed/misc.c:197:
+static void* memset(void* s, int c, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: arch/x86_64/boot/compressed/misc.c:197:
+static void* memset(void* s, int c, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: arch/x86_64/boot/compressed/misc.c:197:
+static void* memset(void* s, int c, unsigned n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: arch/x86_64/boot/compressed/misc.c:206:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#202: FILE: arch/x86_64/boot/compressed/misc.c:206:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#202: FILE: arch/x86_64/boot/compressed/misc.c:206:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#202: FILE: arch/x86_64/boot/compressed/misc.c:206:
+static void* memcpy(void* dest, const void* src, unsigned n)

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: arch/x86_64/boot/compressed/misc.c:281:
+	while(1);	/* Halt */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#211: FILE: arch/x86_64/boot/compressed/misc.c:281:
+	while(1);	/* Halt */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#219: FILE: arch/x86_64/boot/compressed/misc.c:287:
+	if (RM_EXT_MEM_K < 1024) error("Less than 2MB of memory");

WARNING:LONG_LINE_STRING: line length of 113 exceeds 100 columns
#222: FILE: arch/x86_64/boot/compressed/misc.c:289:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < 1024) error("Less than 2MB of memory");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#222: FILE: arch/x86_64/boot/compressed/misc.c:289:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < 1024) error("Less than 2MB of memory");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#222: FILE: arch/x86_64/boot/compressed/misc.c:289:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < 1024) error("Less than 2MB of memory");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#236: FILE: arch/x86_64/boot/compressed/misc.c:304:
+	if (RM_EXT_MEM_K < (3*1024)) error("Less than 4MB of memory");
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#236: FILE: arch/x86_64/boot/compressed/misc.c:304:
+	if (RM_EXT_MEM_K < (3*1024)) error("Less than 4MB of memory");

WARNING:LONG_LINE_STRING: line length of 117 exceeds 100 columns
#239: FILE: arch/x86_64/boot/compressed/misc.c:306:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#239: FILE: arch/x86_64/boot/compressed/misc.c:306:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");
 	                                                                    ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#239: FILE: arch/x86_64/boot/compressed/misc.c:306:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: arch/x86_64/boot/compressed/misc.c:306:
+	if ((RM_ALT_MEM_K > RM_EXT_MEM_K ? RM_ALT_MEM_K : RM_EXT_MEM_K) < (3*1024)) error("Less than 4MB of memory");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 16 warnings, 5 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
