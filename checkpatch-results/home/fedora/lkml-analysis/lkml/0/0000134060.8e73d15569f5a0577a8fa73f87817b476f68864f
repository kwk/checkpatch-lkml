WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
Adapting $subject to the actual topic, so other lkml readers can catch up ;)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: arch/i386/kernel/setup.c:1426:
+int apply_alternatives(void *start, void *end) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#106: FILE: arch/i386/kernel/setup.c:1429:
+	int diff, i, k, count=0;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: arch/i386/kernel/setup.c:1438:
+^I^IBUG_ON(a->replacementlen > a->instrlen); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: arch/i386/kernel/setup.c:1438:
+		BUG_ON(a->replacementlen > a->instrlen); 

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/i386/kernel/setup.c:1453:
+} $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#133: FILE: arch/i386/kernel/setup.c:1456:
+extern struct alt_instr __smp_alt_instructions[], __smp_alt_instructions_end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/kernel/setup.c:1458:
+void switch_alternatives_up(void) $

CHECK:SPACING: No space is necessary after a cast
#135: FILE: arch/i386/kernel/setup.c:1458:
+void switch_alternatives_up(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: arch/i386/kernel/setup.c:1459:
+{ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: arch/i386/kernel/setup.c:1465:
+	printk("%s: %d replacements\n", __FUNCTION__, n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#142: FILE: arch/i386/kernel/setup.c:1465:
+	printk("%s: %d replacements\n", __FUNCTION__, n);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: arch/i386/kernel/setup.c:1466:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: arch/i386/kernel/setup.c:1468:
+void switch_alternatives_smp(void) $

CHECK:SPACING: No space is necessary after a cast
#145: FILE: arch/i386/kernel/setup.c:1468:
+void switch_alternatives_smp(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: arch/i386/kernel/setup.c:1469:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: arch/i386/kernel/setup.c:1475:
+^Ifor (; a < end; a++) { $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: arch/i386/kernel/setup.c:1482:
+	printk("%s: %d replacements\n", __FUNCTION__, count);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#159: FILE: arch/i386/kernel/setup.c:1482:
+	printk("%s: %d replacements\n", __FUNCTION__, count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#169: FILE: arch/i386/kernel/setup.c:1490:
+	printk("%s: %d replacements\n", __FUNCTION__, n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#169: FILE: arch/i386/kernel/setup.c:1490:
+	printk("%s: %d replacements\n", __FUNCTION__, n);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#190: FILE: arch/i386/kernel/smpboot.c:1189:
+		if (1 == kicked)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/vmlinux.lds.S:76:
+  __smp_alt_instructions_end = .; $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#225: FILE: include/asm-i386/atomic.h:54:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#238: FILE: include/asm-i386/atomic.h:69:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#251: FILE: include/asm-i386/atomic.h:88:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#264: FILE: include/asm-i386/atomic.h:103:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#277: FILE: include/asm-i386/atomic.h:117:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#290: FILE: include/asm-i386/atomic.h:135:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#303: FILE: include/asm-i386/atomic.h:154:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#316: FILE: include/asm-i386/atomic.h:174:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#329: FILE: include/asm-i386/atomic.h:197:
+	alternative_smp_lock(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/asm-i386/atomic.h:224:
+: "r" (~(mask)),"m" (*addr) : "memory")
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/asm-i386/atomic.h:228:
+: "r" (mask),"m" (*(addr)) : "memory")
             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#359: FILE: include/asm-i386/cpufeature.h:73:
+#define X86_FEATURE_UP		(3*32+ 8) /* smp kernel running on up */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#359: FILE: include/asm-i386/cpufeature.h:73:
+#define X86_FEATURE_UP		(3*32+ 8) /* smp kernel running on up */
                       		     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#379: FILE: include/asm-i386/spinlock.h:56:
+	alternative_smp(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#390: FILE: include/asm-i386/spinlock.h:64:
+	alternative_smp(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#402: FILE: include/asm-i386/spinlock.h:186:
+	alternative_smp_lock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#411: FILE: include/asm-i386/spinlock.h:193:
+	alternative_smp_lock(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: include/asm-i386/system.h:333:
+#define alternative_smp(smpinstr, upinstr, args...) ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#425: FILE: include/asm-i386/system.h:333:
+#define alternative_smp(smpinstr, upinstr, args...) 	\
+	asm volatile ("661:\n\t" smpinstr "\n662:\n" 		     \
+		      ".section .smp_altinstructions,\"a\"\n"          \
+		      "  .align 4\n"				       \
+		      "  .long 661b\n"            /* label */          \
+		      "  .long 663f\n"		  /* new instruction */ 	\
+		      "  .byte 0x68\n"            /* X86_FEATURE_UP */    \
+		      "  .byte 662b-661b\n"       /* sourcelen */      \
+		      "  .byte 664f-663f\n"       /* replacementlen */ \
+		      ".previous\n"						\
+		      ".section .smp_altinstr_replacement,\"ax\"\n"    		\
+		      "663:\n\t" upinstr "\n"     /* replacement */    \
+		      "664:\n\t" smpinstr "\n"    /* original again */ \
+		      ".previous" : args)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'smpinstr' - possible side-effects?
#425: FILE: include/asm-i386/system.h:333:
+#define alternative_smp(smpinstr, upinstr, args...) 	\
+	asm volatile ("661:\n\t" smpinstr "\n662:\n" 		     \
+		      ".section .smp_altinstructions,\"a\"\n"          \
+		      "  .align 4\n"				       \
+		      "  .long 661b\n"            /* label */          \
+		      "  .long 663f\n"		  /* new instruction */ 	\
+		      "  .byte 0x68\n"            /* X86_FEATURE_UP */    \
+		      "  .byte 662b-661b\n"       /* sourcelen */      \
+		      "  .byte 664f-663f\n"       /* replacementlen */ \
+		      ".previous\n"						\
+		      ".section .smp_altinstr_replacement,\"ax\"\n"    		\
+		      "663:\n\t" upinstr "\n"     /* replacement */    \
+		      "664:\n\t" smpinstr "\n"    /* original again */ \
+		      ".previous" : args)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: include/asm-i386/system.h:334:
+^Iasm volatile ("661:\n\t" smpinstr "\n662:\n" ^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: include/asm-i386/system.h:338:
+^I^I      "  .long 663f\n"^I^I  /* new instruction */ ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: include/asm-i386/system.h:343:
+^I^I      ".section .smp_altinstr_replacement,\"ax\"\n"    ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: include/asm-i386/system.h:347:
+#define alternative_smp_lock(lockinstr, args...) ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#439: FILE: include/asm-i386/system.h:347:
+#define alternative_smp_lock(lockinstr, args...) 	\
+	asm volatile ("661:\n\tlock; " lockinstr "\n" 		     \
+		      ".section .smp_altinstructions,\"a\"\n"          \
+		      "  .align 4\n"				       \
+		      "  .long 661b\n"            /* label */          \
+		      "  .long 663f\n"		  /* new instruction */ 	\
+		      "  .byte 0x68\n"            /* X86_FEATURE_UP */    \
+		      "  .byte 1\n"               /* sourcelen */      \
+		      "  .byte 0\n"               /* replacementlen */ \
+		      ".previous\n"						\
+		      ".section .smp_altinstr_replacement,\"ax\"\n"    		\
+		      "663:\n"                    /* replacement */    \
+		      "664:\n\tlock\n"            /* original again */ \
+		      ".previous" : args)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: include/asm-i386/system.h:348:
+^Iasm volatile ("661:\n\tlock; " lockinstr "\n" ^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: include/asm-i386/system.h:352:
+^I^I      "  .long 663f\n"^I^I  /* new instruction */ ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: include/asm-i386/system.h:357:
+^I^I      ".section .smp_altinstr_replacement,\"ax\"\n"    ^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#454: FILE: include/asm-i386/system.h:362:
+#define alternative_smp(smpinstr, upinstr, args...) \
+	asm volatile (upinstr : args)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#456: FILE: include/asm-i386/system.h:364:
+#define alternative_smp_lock(lockinstr, args...) \
+	asm volatile (lockinstr : args)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 18 warnings, 18 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
