WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#33: 
This patch simply moves modpost-related files to a seperate subdirectory.
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: scripts/modpost/empty.c:1:
+/* empty file to figure out endianness / word size */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#414: FILE: scripts/modpost/file2alias.c:1:
+/* Simple code to turn various tables in an ELF file into alias definitions.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: scripts/modpost/file2alias.c:7:
+ *           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#431: FILE: scripts/modpost/file2alias.c:18:
+typedef Elf32_Addr     kernel_ulong_t;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Addr>
#431: FILE: scripts/modpost/file2alias.c:18:
+typedef Elf32_Addr     kernel_ulong_t;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#433: FILE: scripts/modpost/file2alias.c:20:
+typedef Elf64_Addr     kernel_ulong_t;

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Addr>
#433: FILE: scripts/modpost/file2alias.c:20:
+typedef Elf64_Addr     kernel_ulong_t;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Word>
#436: FILE: scripts/modpost/file2alias.c:23:
+typedef Elf32_Word     __u32;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Half>
#437: FILE: scripts/modpost/file2alias.c:24:
+typedef Elf32_Half     __u16;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: scripts/modpost/file2alias.c:28:
+ * even potentially has different endianness and word sizes, since $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: scripts/modpost/file2alias.c:29:
+ * we handle those differences explicitly below */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#445: FILE: scripts/modpost/file2alias.c:32:
+#define ADD(str, sep, cond, field)                              \
+do {                                                            \
+        strcat(str, sep);                                       \
+        if (cond)                                               \
+                sprintf(str + strlen(str),                      \
+                        sizeof(field) == 1 ? "%02X" :           \
+                        sizeof(field) == 2 ? "%04X" :           \
+                        sizeof(field) == 4 ? "%08X" : "",       \
+                        field);                                 \
+        else                                                    \
+                sprintf(str + strlen(str), "*");                \
+} while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: scripts/modpost/file2alias.c:34:
+        strcat(str, sep);                                       \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: scripts/modpost/file2alias.c:34:
+        strcat(str, sep);                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: scripts/modpost/file2alias.c:35:
+        if (cond)                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: scripts/modpost/file2alias.c:35:
+        if (cond)                                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: scripts/modpost/file2alias.c:36:
+                sprintf(str + strlen(str),                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: scripts/modpost/file2alias.c:36:
+                sprintf(str + strlen(str),                      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: scripts/modpost/file2alias.c:37:
+                        sizeof(field) == 1 ? "%02X" :           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: scripts/modpost/file2alias.c:37:
+                        sizeof(field) == 1 ? "%02X" :           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: scripts/modpost/file2alias.c:38:
+                        sizeof(field) == 2 ? "%04X" :           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: scripts/modpost/file2alias.c:38:
+                        sizeof(field) == 2 ? "%04X" :           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: scripts/modpost/file2alias.c:39:
+                        sizeof(field) == 4 ? "%08X" : "",       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: scripts/modpost/file2alias.c:39:
+                        sizeof(field) == 4 ? "%08X" : "",       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: scripts/modpost/file2alias.c:40:
+                        field);                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: scripts/modpost/file2alias.c:40:
+                        field);                                 \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: scripts/modpost/file2alias.c:41:
+        else                                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: scripts/modpost/file2alias.c:41:
+        else                                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: scripts/modpost/file2alias.c:42:
+                sprintf(str + strlen(str), "*");                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: scripts/modpost/file2alias.c:42:
+                sprintf(str + strlen(str), "*");                \$

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: scripts/modpost/file2alias.c:43:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#463: FILE: scripts/modpost/file2alias.c:50:
+	id->idVendor = TO_NATIVE(id->idVendor);

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#464: FILE: scripts/modpost/file2alias.c:51:
+	id->idProduct = TO_NATIVE(id->idProduct);

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_lo>
#465: FILE: scripts/modpost/file2alias.c:52:
+	id->bcdDevice_lo = TO_NATIVE(id->bcdDevice_lo);

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_hi>
#466: FILE: scripts/modpost/file2alias.c:53:
+	id->bcdDevice_hi = TO_NATIVE(id->bcdDevice_hi);

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#472: FILE: scripts/modpost/file2alias.c:59:
+	if (!(id->idVendor | id->bDeviceClass | id->bInterfaceClass))

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#472: FILE: scripts/modpost/file2alias.c:59:
+	if (!(id->idVendor | id->bDeviceClass | id->bInterfaceClass))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#476: FILE: scripts/modpost/file2alias.c:63:
+	ADD(alias, "v", id->match_flags&USB_DEVICE_ID_MATCH_VENDOR,
 	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#478: FILE: scripts/modpost/file2alias.c:65:
+	ADD(alias, "p", id->match_flags&USB_DEVICE_ID_MATCH_PRODUCT,
 	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#480: FILE: scripts/modpost/file2alias.c:67:
+	ADD(alias, "dl", id->match_flags&USB_DEVICE_ID_MATCH_DEV_LO,
 	                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#482: FILE: scripts/modpost/file2alias.c:69:
+	ADD(alias, "dh", id->match_flags&USB_DEVICE_ID_MATCH_DEV_HI,
 	                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#484: FILE: scripts/modpost/file2alias.c:71:
+	ADD(alias, "dc", id->match_flags&USB_DEVICE_ID_MATCH_DEV_CLASS,
 	                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#487: FILE: scripts/modpost/file2alias.c:74:
+	    id->match_flags&USB_DEVICE_ID_MATCH_DEV_SUBCLASS,
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceSubClass>
#488: FILE: scripts/modpost/file2alias.c:75:
+	    id->bDeviceSubClass);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#490: FILE: scripts/modpost/file2alias.c:77:
+	    id->match_flags&USB_DEVICE_ID_MATCH_DEV_PROTOCOL,
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceProtocol>
#491: FILE: scripts/modpost/file2alias.c:78:
+	    id->bDeviceProtocol);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#493: FILE: scripts/modpost/file2alias.c:80:
+	    id->match_flags&USB_DEVICE_ID_MATCH_INT_CLASS,
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#496: FILE: scripts/modpost/file2alias.c:83:
+	    id->match_flags&USB_DEVICE_ID_MATCH_INT_SUBCLASS,
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#497: FILE: scripts/modpost/file2alias.c:84:
+	    id->bInterfaceSubClass);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#499: FILE: scripts/modpost/file2alias.c:86:
+	    id->match_flags&USB_DEVICE_ID_MATCH_INT_PROTOCOL,
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#500: FILE: scripts/modpost/file2alias.c:87:
+	    id->bInterfaceProtocol);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#556: FILE: scripts/modpost/file2alias.c:143:
+	if ((baseclass_mask != 0 && baseclass_mask != 0xFF)
+	    || (subclass_mask != 0 && subclass_mask != 0xFF)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#557: FILE: scripts/modpost/file2alias.c:144:
+	    || (subclass_mask != 0 && subclass_mask != 0xFF)
+	    || (interface_mask != 0 && interface_mask != 0xFF)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: scripts/modpost/file2alias.c:157:
+/* looks like: "ccw:tNmNdtNdmN" */ $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#581: FILE: scripts/modpost/file2alias.c:168:
+	ADD(alias, "t", id->match_flags&CCW_DEVICE_ID_MATCH_CU_TYPE,
 	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#583: FILE: scripts/modpost/file2alias.c:170:
+	ADD(alias, "m", id->match_flags&CCW_DEVICE_ID_MATCH_CU_MODEL,
 	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#585: FILE: scripts/modpost/file2alias.c:172:
+	ADD(alias, "dt", id->match_flags&CCW_DEVICE_ID_MATCH_DEVICE_TYPE,
 	                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#587: FILE: scripts/modpost/file2alias.c:174:
+	ADD(alias, "dm", id->match_flags&CCW_DEVICE_ID_MATCH_DEVICE_TYPE,
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: scripts/modpost/file2alias.c:189:
+static int do_pnp_card_entry(const char *filename,
+			struct pnp_card_device_id *id, char *alias)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#608: FILE: scripts/modpost/file2alias.c:195:
+		if (! *id->devs[i].id)
 		    ^

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: scripts/modpost/file2alias.c:224:
+		fprintf(stderr, "*** Warning: %s ids %lu bad size "
+			"(each on %lu)\n", mod->name, size, id_size);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#643: FILE: scripts/modpost/file2alias.c:230:
+		if (do_entry(mod->name, symval+i, alias)) {
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#645: FILE: scripts/modpost/file2alias.c:232:
+			if (alias[strlen(alias)-1] != '*')
 			                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#655: FILE: scripts/modpost/file2alias.c:242:
+ * so we write into the mod->dev_table_buf buffer. */

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#657: FILE: scripts/modpost/file2alias.c:244:
+			Elf_Sym *sym, const char *symname)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#700: FILE: scripts/modpost/mk_elfconfig.c:1:
+#include <stdio.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: scripts/modpost/mk_elfconfig.c:9:
+^Iunsigned char ei[EI_NIDENT];^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#711: FILE: scripts/modpost/mk_elfconfig.c:12:
+	if (argc != 2) {
+		fprintf(stderr, "Error: no arch\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#743: FILE: scripts/modpost/mk_elfconfig.c:44:
+	if (sizeof(unsigned long) == 4) {
[...]
+	} else if (sizeof(unsigned long) == 8) {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: scripts/modpost/mk_elfconfig.c:60:
+^Ielse $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#769: FILE: scripts/modpost/modpost.c:1:
+/* Postprocess module symbol versions

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#786: FILE: scripts/modpost/modpost.c:18:
+int modversions = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#788: FILE: scripts/modpost/modpost.c:20:
+int have_vmlinux = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: scripts/modpost/modpost.c:77:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#851: FILE: scripts/modpost/modpost.c:83:
+	if ((s = strrchr(p, '.')) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#864: FILE: scripts/modpost/modpost.c:96:
+ * struct symbol is also used for lists of unresolved symbols */

WARNING:TYPO_SPELLING: 'agorithm' may be misspelled - perhaps 'algorithm'?
#878: FILE: scripts/modpost/modpost.c:110:
+/* This is based on the hash agorithm from gdbm, via tdb */
                              ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#881: FILE: scripts/modpost/modpost.c:113:
+	unsigned value;	/* Used to compute the hash value.  */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#882: FILE: scripts/modpost/modpost.c:114:
+	unsigned   i;	/* Used to cycle through random values. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: scripts/modpost/modpost.c:117:
+	for (value = 0x238F13AF * strlen(name), i=0; name[i]; i++)
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#886: FILE: scripts/modpost/modpost.c:118:
+		value = (value + (((unsigned char *)name)[i] << (i*5 % 24)));
 		                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#892: FILE: scripts/modpost/modpost.c:124:
+ * the list of unresolved symbols per module */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#914: FILE: scripts/modpost/modpost.c:146:
+	new = symbolhash[hash] = alloc_symbol(name, symbolhash[hash]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#931: FILE: scripts/modpost/modpost.c:163:
+	for (s = symbolhash[tdb_hash(name) % SYMBOL_HASH_SIZE]; s; s=s->next) {
 	                                                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#939: FILE: scripts/modpost/modpost.c:171:
+ * CRC, in this case just update the CRC */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#967: FILE: scripts/modpost/modpost.c:199:
+	map = mmap(NULL, *size, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
 	                                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#976: FILE: scripts/modpost/modpost.c:208:
+/*
+   Return a copy of the next line in a mmap'ed file.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#989: FILE: scripts/modpost/modpost.c:221:
+	for (; *pos < size ; (*pos)++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#1021: FILE: scripts/modpost/modpost.c:253:
+	Elf_Ehdr *hdr = info->hdr;

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1022: FILE: scripts/modpost/modpost.c:254:
+	Elf_Shdr *sechdrs;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1053: FILE: scripts/modpost/modpost.c:285:
+		const char *secstrings
+			= (void *)hdr + sechdrs[hdr->e_shstrndx].sh_offset;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1057: FILE: scripts/modpost/modpost.c:289:
+		if (strcmp(secstrings+sechdrs[i].sh_name, ".modinfo") == 0) {
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1065: FILE: scripts/modpost/modpost.c:297:
+^I^Iinfo->symtab_stop  = (void *)hdr + sechdrs[i].sh_offset $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: scripts/modpost/modpost.c:298:
+^I^I^I                         + sechdrs[i].sh_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: scripts/modpost/modpost.c:299:
+^I^Iinfo->strtab       = (void *)hdr + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1068: FILE: scripts/modpost/modpost.c:300:
+^I^I^I             sechdrs[sechdrs[i].sh_link].sh_offset;$

CHECK:SPACING: No space is necessary after a cast
#1111: FILE: scripts/modpost/modpost.c:343:
+			crc = (unsigned int) sym->st_value;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1135: FILE: scripts/modpost/modpost.c:367:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1157: FILE: scripts/modpost/modpost.c:389:
+	if ((myname = strrchr(modname, '/')))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: scripts/modpost/modpost.c:410:
+	 * unresolved symbols (since there'll be too many ;) */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1181: FILE: scripts/modpost/modpost.c:413:
+		unsigned int fake_crc = 0;
+		have_vmlinux = 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1183: FILE: scripts/modpost/modpost.c:415:
+		/* May not have this if !CONFIG_MODULE_UNLOAD: fake it.
+		   If it appears, we'll get the real CRC. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1183: FILE: scripts/modpost/modpost.c:415:
+		   If it appears, we'll get the real CRC. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1202: FILE: scripts/modpost/modpost.c:434:
+	 * important anyhow */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: scripts/modpost/modpost.c:439:
+		 * case module doesn't have its own. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1217: FILE: scripts/modpost/modpost.c:449:
+ * only update the later if anything changed */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1219: FILE: scripts/modpost/modpost.c:451:
+void __attribute__((format(printf, 2, 3)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: scripts/modpost/modpost.c:457:
+^I$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(\".gnu.linkonce.this_module\") over __attribute__((section(\".gnu.linkonce.this_module\")))
#1261: FILE: scripts/modpost/modpost.c:493:
+	buf_printf(b, "__attribute__((section(\".gnu.linkonce.this_module\"))) = {\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1282: FILE: scripts/modpost/modpost.c:514:
+				fprintf(stderr, "*** Warning: \"%s\" [%s.ko] "
+				"undefined!\n",	s->name, mod->name);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(\"__versions\") over __attribute__((section(\"__versions\")))
#1296: FILE: scripts/modpost/modpost.c:528:
+	buf_printf(b, "__attribute__((section(\"__versions\"))) = {\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1299: FILE: scripts/modpost/modpost.c:531:
+		if (!s->module) {
+			continue;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#1304: FILE: scripts/modpost/modpost.c:536:
+			fprintf(stderr, "*** Warning: \"%s\" [%s.ko] "
+				"has no CRC!\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1321: FILE: scripts/modpost/modpost.c:553:
+	for (m = modules; m; m = m->next) {
+		m->seen = is_vmlinux(m->name);
+	}

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(\".modinfo\") over __attribute__((section(\".modinfo\")))
#1328: FILE: scripts/modpost/modpost.c:560:
+	buf_printf(b, "__attribute__((section(\".modinfo\"))) =\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1397: FILE: scripts/modpost/modpost.c:629:
+        if (!file)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: scripts/modpost/modpost.c:629:
+        if (!file)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1406: FILE: scripts/modpost/modpost.c:638:
+		if (!(symname = strchr(line, '\t')))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1409: FILE: scripts/modpost/modpost.c:641:
+		if (!(modname = strchr(symname, '\t')))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1418: FILE: scripts/modpost/modpost.c:650:
+		if (!(mod = find_module(modname))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1442: FILE: scripts/modpost/modpost.c:674:
+		while (symbol) {
+			symbol = symbol->next;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: scripts/modpost/modpost.c:683:
+			buf_printf(&buf, "0x%08x\t%s\t%s\n", symbol->crc,
+				symbol->name, symbol->module->name);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1468: FILE: scripts/modpost/modpost.c:700:
+		switch(opt) {
+			case 'i':
[...]
+			case 'o':
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1468: FILE: scripts/modpost/modpost.c:700:
+		switch(opt) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1483: FILE: scripts/modpost/modpost.c:715:
+	while (optind < argc) {
+		read_symbols(argv[optind++]);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1512: FILE: scripts/modpost/modpost.h:1:
+#include <stdio.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1527: FILE: scripts/modpost/modpost.h:16:
+#define Elf_Ehdr    Elf32_Ehdr $

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#1527: FILE: scripts/modpost/modpost.h:16:
+#define Elf_Ehdr    Elf32_Ehdr 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1528: FILE: scripts/modpost/modpost.h:17:
+#define Elf_Shdr    Elf32_Shdr $

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#1528: FILE: scripts/modpost/modpost.h:17:
+#define Elf_Shdr    Elf32_Shdr 

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#1529: FILE: scripts/modpost/modpost.h:18:
+#define Elf_Sym     Elf32_Sym

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1535: FILE: scripts/modpost/modpost.h:24:
+#define Elf_Ehdr    Elf64_Ehdr $

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#1535: FILE: scripts/modpost/modpost.h:24:
+#define Elf_Ehdr    Elf64_Ehdr 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1536: FILE: scripts/modpost/modpost.h:25:
+#define Elf_Shdr    Elf64_Shdr $

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#1536: FILE: scripts/modpost/modpost.h:25:
+#define Elf_Shdr    Elf64_Shdr 

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#1537: FILE: scripts/modpost/modpost.h:26:
+#define Elf_Sym     Elf64_Sym

WARNING:LINE_SPACING: Missing a blank line after declarations
#1548: FILE: scripts/modpost/modpost.h:37:
+	unsigned int i;
+	for (i = 0; i < size; i++)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1549: FILE: scripts/modpost/modpost.h:38:
+		((unsigned char*)dest)[i] = ((unsigned char*)src)[size - i-1];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1549: FILE: scripts/modpost/modpost.h:38:
+		((unsigned char*)dest)[i] = ((unsigned char*)src)[size - i-1];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1549: FILE: scripts/modpost/modpost.h:38:
+		((unsigned char*)dest)[i] = ((unsigned char*)src)[size - i-1];
 		                                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1552: FILE: scripts/modpost/modpost.h:41:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1576: FILE: scripts/modpost/modpost.h:65:
+void __attribute__((format(printf, 2, 3)))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1613: FILE: scripts/modpost/modpost.h:102:
+char* get_next_line(unsigned long *pos, void *file, unsigned long size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1619: FILE: scripts/modpost/sumversion.c:1:
+#include <netinet/in.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1687: FILE: scripts/modpost/sumversion.c:69:
+	uint32_t hash[MD4_HASH_WORDS];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1688: FILE: scripts/modpost/sumversion.c:70:
+	uint32_t block[MD4_BLOCK_WORDS];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1689: FILE: scripts/modpost/sumversion.c:71:
+	uint64_t byte_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1692: FILE: scripts/modpost/sumversion.c:74:
+static inline uint32_t lshift(uint32_t x, unsigned int s)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1698: FILE: scripts/modpost/sumversion.c:80:
+static inline uint32_t F(uint32_t x, uint32_t y, uint32_t z)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1703: FILE: scripts/modpost/sumversion.c:85:
+static inline uint32_t G(uint32_t x, uint32_t y, uint32_t z)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1708: FILE: scripts/modpost/sumversion.c:90:
+static inline uint32_t H(uint32_t x, uint32_t y, uint32_t z)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))
                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#1713: FILE: scripts/modpost/sumversion.c:95:
+#define ROUND1(a,b,c,d,k,s) (a = lshift(a + F(b,c,d) + k, s))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))
                                                                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#1714: FILE: scripts/modpost/sumversion.c:96:
+#define ROUND2(a,b,c,d,k,s) (a = lshift(a + G(b,c,d) + k + (uint32_t)0x5A827999,s))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))
                                                                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#1715: FILE: scripts/modpost/sumversion.c:97:
+#define ROUND3(a,b,c,d,k,s) (a = lshift(a + H(b,c,d) + k + (uint32_t)0x6ED9EBA1,s))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1718: FILE: scripts/modpost/sumversion.c:100:
+static inline void le32_to_cpu_array(uint32_t *buf, unsigned int words)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1726: FILE: scripts/modpost/sumversion.c:108:
+static inline void cpu_to_le32_array(uint32_t *buf, unsigned int words)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1734: FILE: scripts/modpost/sumversion.c:116:
+static void md4_transform(uint32_t *hash, uint32_t const *in)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1736: FILE: scripts/modpost/sumversion.c:118:
+	uint32_t a, b, c, d;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1760: FILE: scripts/modpost/sumversion.c:142:
+	ROUND2(a, b, c, d,in[ 0], 3);
 	                 ^

ERROR:SPACING: space prohibited after that open square bracket '['
#1760: FILE: scripts/modpost/sumversion.c:142:
+	ROUND2(a, b, c, d,in[ 0], 3);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1777: FILE: scripts/modpost/sumversion.c:159:
+	ROUND3(a, b, c, d,in[ 0], 3);
 	                 ^

ERROR:SPACING: space prohibited after that open square bracket '['
#1777: FILE: scripts/modpost/sumversion.c:159:
+	ROUND3(a, b, c, d,in[ 0], 3);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1818: FILE: scripts/modpost/sumversion.c:200:
+	const uint32_t avail = sizeof(mctx->block) - (mctx->byte_count & 0x3f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1853: FILE: scripts/modpost/sumversion.c:235:
+		memset(p, 0x00, padding + sizeof (uint64_t));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1863: FILE: scripts/modpost/sumversion.c:245:
+^I                  sizeof(uint64_t)) / sizeof(uint32_t));$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1884: FILE: scripts/modpost/sumversion.c:266:
+		if (file[i] == '"' && file[i-1] != '\\')
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1895: FILE: scripts/modpost/sumversion.c:277:
+		if (file[i-1] == '*' && file[i] == '/')
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1913: FILE: scripts/modpost/sumversion.c:295:
+		if (file[i] == '\\' && (i+1 < len) && file[i+1] == '\n') {
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1913: FILE: scripts/modpost/sumversion.c:295:
+		if (file[i] == '\\' && (i+1 < len) && file[i+1] == '\n') {
 		                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1924: FILE: scripts/modpost/sumversion.c:306:
+			i += parse_string(file+i, len - i, md);
 			                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1929: FILE: scripts/modpost/sumversion.c:311:
+		if (file[i] == '/' && file[i+1] == '*') {
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1930: FILE: scripts/modpost/sumversion.c:312:
+			i += parse_comment(file+i, len - i);
 			                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1941: FILE: scripts/modpost/sumversion.c:323:
+ * figure out source file. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1972: FILE: scripts/modpost/sumversion.c:354:
+	/* There will be a line like so:
+		deps_drivers/net/dummy.o := \

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1982: FILE: scripts/modpost/sumversion.c:364:
+		char* p = line;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1983: FILE: scripts/modpost/sumversion.c:365:
+		char* p = line;
+		if (strncmp(line, "deps_", sizeof("deps_")-1) == 0) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1983: FILE: scripts/modpost/sumversion.c:365:
+		if (strncmp(line, "deps_", sizeof("deps_")-1) == 0) {
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1991: FILE: scripts/modpost/sumversion.c:373:
+		if ( *(p + strlen(p)-1) != '\\')
 		                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1991: FILE: scripts/modpost/sumversion.c:373:
+		if ( *(p + strlen(p)-1) != '\\')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#1994: FILE: scripts/modpost/sumversion.c:376:
+		while (*p) {
+                       if (isspace(*p)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1995: FILE: scripts/modpost/sumversion.c:377:
+                       if (isspace(*p)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1995: FILE: scripts/modpost/sumversion.c:377:
+                       if (isspace(*p)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 32)
#1995: FILE: scripts/modpost/sumversion.c:377:
+                       if (isspace(*p)) {
+				*p = '\0';

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2003: FILE: scripts/modpost/sumversion.c:385:
+		if ((strstr(line, dir)+strlen(dir)-1) == strrchr(line, '/')) {
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2003: FILE: scripts/modpost/sumversion.c:385:
+		if ((strstr(line, dir)+strlen(dir)-1) == strrchr(line, '/')) {
 		                                  ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2011: FILE: scripts/modpost/sumversion.c:393:
+
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2013: FILE: scripts/modpost/sumversion.c:395:
+
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2036: FILE: scripts/modpost/sumversion.c:418:
+	/* Source files for module are in .tmp_versions/modname.mod,
+	   after the first line. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2036: FILE: scripts/modpost/sumversion.c:418:
+	   after the first line. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2043: FILE: scripts/modpost/sumversion.c:425:
+	strcpy(filelist + strlen(filelist)-2, ".mod");
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2075: FILE: scripts/modpost/sumversion.c:457:
+	md4_final_ascii(&md, sum, 1 + strlen(sum+1));
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2100: FILE: scripts/modpost/sumversion.c:482:
+	if (write(fd, sum, strlen(sum)+1) != strlen(sum)+1) {
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2100: FILE: scripts/modpost/sumversion.c:482:
+	if (write(fd, sum, strlen(sum)+1) != strlen(sum)+1) {
 	                                                ^

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2113: FILE: scripts/modpost/sumversion.c:495:
+	if (strncmp(version, "$Revision", strlen("$Revision")) != 0)

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2120: FILE: scripts/modpost/sumversion.c:502:
+	 * $Revision$ or $Revision: */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2120: FILE: scripts/modpost/sumversion.c:502:
+	 * $Revision$ or $Revision: */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2121: FILE: scripts/modpost/sumversion.c:503:
+	len = strlen("$Revision");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2126: FILE: scripts/modpost/sumversion.c:508:
+	memmove(version, version+len, full_len-len);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2126: FILE: scripts/modpost/sumversion.c:508:
+	memmove(version, version+len, full_len-len);
 	                                      ^

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2149: FILE: scripts/modpost/sumversion.c:531:
+	/* RCS $Revision gets stripped out. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 64 warnings, 89 checks, 1734 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
