WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
--- linux-2.6.13-rc3.orig/security/Makefile	2005-06-17 14:48:29.000000000 -0500

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: security/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: security/inode.c:41:
+static ssize_t default_write_file(struct file *file, const char __user *buf,
+				   size_t count, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#112: FILE: security/inode.c:54:
+static struct file_operations default_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#128: FILE: security/inode.c:70:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: security/inode.c:92:
+static int mknod(struct inode *dir, struct dentry *dentry,
+			 int mode, dev_t dev)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#171: FILE: security/inode.c:113:
+	mode = (mode & (S_IRWXUGO | S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: security/inode.c:139:
+^I^I^I^I        int flags, const char *dev_name,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: security/inode.c:139:
+static struct super_block *get_sb(struct file_system_type *fs_type,
+				        int flags, const char *dev_name,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#223: FILE: security/inode.c:165:
+	if (!parent ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#224: FILE: security/inode.c:166:
+		if (mount && mount->mnt_sb) {
+			parent = mount->mnt_sb->s_root;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: security/inode.c:177:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: security/inode.c:182:
+	} else

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#253: FILE: security/inode.c:195:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'createing' may be misspelled - perhaps 'creating'?
#262: FILE: security/inode.c:204:
+ * wide range of flexibility in createing a file, or a directory (if you
                                 ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: security/inode.c:219:
+struct dentry *securityfs_create_file(const char *name, mode_t mode,
+				   struct dentry *parent, void *data,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#278: FILE: security/inode.c:220:
+				   struct file_operations *fops)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: security/inode.c:225:
+	pr_debug("securityfs: creating file '%s'\n",name);
 	                                           ^

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#315: FILE: security/inode.c:257:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#333: FILE: security/inode.c:275:
+				      S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: include/linux/security.h:1986:
+extern struct dentry *securityfs_create_file(const char *name, mode_t mode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#416: FILE: include/linux/security.h:1988:
+					     struct file_operations *fops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/linux/security.h:1989:
+extern struct dentry *securityfs_create_dir(const char *name, struct dentry *parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: include/linux/security.h:1990:
+extern void securityfs_remove(struct dentry *dentry);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 10 checks, 366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
