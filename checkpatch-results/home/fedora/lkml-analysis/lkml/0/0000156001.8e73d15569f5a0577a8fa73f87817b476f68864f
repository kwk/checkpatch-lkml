ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#65: FILE: ./arch/i386/Kconfig:749:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: ./arch/i386/Kconfig:750:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: ./arch/x86_64/Kconfig:242:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#97: FILE: ./arch/x86_64/Kconfig:252:
+config PTSHARE_PTE
+	bool "Bottom level table (PTE)"
+	depends on PTSHARE
+	default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#102: FILE: ./arch/x86_64/Kconfig:257:
+config PTSHARE_PMD
+	bool "Middle level table (PMD)"
+	depends on PTSHARE
+	default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#107: FILE: ./arch/x86_64/Kconfig:262:
+config PTSHARE_PUD
+	bool "Upper level table (PUD)"
+	depends on PTSHARE
+	default n
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#130: FILE: ./arch/x86_64/mm/fault.c:155:
+	pud =3D __pud_offset_k((pud_t *)pgd_page_kernel(*pgd), address);
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#139: FILE: ./arch/x86_64/mm/fault.c:262:
+	if (pud_none(*pud) || pud_page_kernel(*pud) !=3D =
 	                                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#139: FILE: ./arch/x86_64/mm/fault.c:262:
+	if (pud_none(*pud) || pud_page_kernel(*pud) !=3D =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#164: FILE: ./include/asm-x86_64/pgtable.h:309:
+#define pgd_page_kernel(pgd) ((unsigned long) __va((unsigned =

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#164: FILE: ./include/asm-x86_64/pgtable.h:309:
+#define pgd_page_kernel(pgd) ((unsigned long) __va((unsigned =

CHECK:SPACING: No space is necessary after a cast
#174: FILE: ./include/asm-x86_64/pgtable.h:317:
+#define pud_page_kernel(pud) ((unsigned long) __va(pud_val(pud) & =

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#174: FILE: ./include/asm-x86_64/pgtable.h:317:
+#define pud_page_kernel(pud) ((unsigned long) __va(pud_val(pud) & =

CHECK:SPACING: No space is necessary after a cast
#181: FILE: ./include/asm-x86_64/pgtable.h:321:
+#define pud_offset(pgd, address) ((pud_t *) pgd_page_kernel(*(pgd)) + =

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#181: FILE: ./include/asm-x86_64/pgtable.h:321:
+#define pud_offset(pgd, address) ((pud_t *) pgd_page_kernel(*(pgd)) + =

CHECK:SPACING: No space is necessary after a cast
#191: FILE: ./include/asm-x86_64/pgtable.h:335:
+#define pmd_offset(dir, address) ((pmd_t *) pud_page_kernel(*(dir)) + \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#199: FILE: ./include/linux/ptshare.h:1:
+#ifndef _LINUX_PTSHARE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#214: FILE: ./include/linux/ptshare.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#215: FILE: ./include/linux/ptshare.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, =$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#251: FILE: ./include/linux/ptshare.h:52:
+	if ((vma->vm_flags & (VM_SHARED|VM_WRITE)) =3D=3D VM_WRITE)
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#251: FILE: ./include/linux/ptshare.h:52:
+	if ((vma->vm_flags & (VM_SHARED|VM_WRITE)) =3D=3D VM_WRITE)
 	                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#251: FILE: ./include/linux/ptshare.h:52:
+	if ((vma->vm_flags & (VM_SHARED|VM_WRITE)) =3D=3D VM_WRITE)
 	                                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#251: FILE: ./include/linux/ptshare.h:52:
+	if ((vma->vm_flags & (VM_SHARED|VM_WRITE)) =3D=3D VM_WRITE)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#255: FILE: ./include/linux/ptshare.h:56:
+	/* If it's smaller than the smallest shareable unit, don't bother
+	   calling it shareable */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#255: FILE: ./include/linux/ptshare.h:56:
+	   calling it shareable */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#261: FILE: ./include/linux/ptshare.h:62:
+}
+extern void pt_unshare_range(struct mm_struct *mm,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: ./include/linux/ptshare.h:62:
+extern void pt_unshare_range(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#278: FILE: ./include/linux/ptshare.h:79:
+	page =3D pmd_page(pmdval);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#287: FILE: ./include/linux/ptshare.h:88:
+	page =3D pmd_page(pmdval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#290: FILE: ./include/linux/ptshare.h:91:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#297: FILE: ./include/linux/ptshare.h:98:
+	page =3D pmd_page(pmdval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#300: FILE: ./include/linux/ptshare.h:101:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#306: FILE: ./include/linux/ptshare.h:107:
+	unsigned long base =3D address & PMD_MASK;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#307: FILE: ./include/linux/ptshare.h:108:
+	unsigned long end =3D base + (PMD_SIZE-1);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#307: FILE: ./include/linux/ptshare.h:108:
+	unsigned long end =3D base + (PMD_SIZE-1);
 	                                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#309: FILE: ./include/linux/ptshare.h:110:
+		if ((vma->vm_start <=3D base) &&
[...]
+		return 1;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#309: FILE: ./include/linux/ptshare.h:110:
+		if ((vma->vm_start <=3D base) &&
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: ./include/linux/ptshare.h:111:
+		if ((vma->vm_start <=3D base) &&
+	    (vma->vm_end >=3D end))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#310: FILE: ./include/linux/ptshare.h:111:
+	    (vma->vm_end >=3D end))
 	                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#315: FILE: ./include/linux/ptshare.h:116:
+}
+extern pte_t * pt_share_pte(struct vm_area_struct *vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: ./include/linux/ptshare.h:116:
+extern pte_t * pt_share_pte(struct vm_area_struct *vma,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: ./include/linux/ptshare.h:116:
+extern pte_t * pt_share_pte(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: ./include/linux/ptshare.h:120:
+extern void pt_copy_pte(struct mm_struct *mm,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#328: FILE: ./include/linux/ptshare.h:129:
+}
+#define	pt_increment_pte(pmdval)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#332: FILE: ./include/linux/ptshare.h:133:
+#define	pt_share_pte(vma, address, pmd, mapping) pte_alloc_map(vma->vm_mm, =

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#332: FILE: ./include/linux/ptshare.h:133:
+#define	pt_share_pte(vma, address, pmd, mapping) pte_alloc_map(vma->vm_mm, =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#342: FILE: ./include/linux/ptshare.h:142:
+	page =3D pud_page(pudval);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#351: FILE: ./include/linux/ptshare.h:151:
+	page =3D pud_page(pudval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#354: FILE: ./include/linux/ptshare.h:154:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#361: FILE: ./include/linux/ptshare.h:161:
+	page =3D pud_page(pudval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#364: FILE: ./include/linux/ptshare.h:164:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#370: FILE: ./include/linux/ptshare.h:170:
+	unsigned long base =3D address & PUD_MASK;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#371: FILE: ./include/linux/ptshare.h:171:
+	unsigned long end =3D base + (PUD_SIZE-1);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#371: FILE: ./include/linux/ptshare.h:171:
+	unsigned long end =3D base + (PUD_SIZE-1);
 	                                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#373: FILE: ./include/linux/ptshare.h:173:
+		if ((vma->vm_start <=3D base) &&
[...]
+		return 1;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#373: FILE: ./include/linux/ptshare.h:173:
+		if ((vma->vm_start <=3D base) &&
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: ./include/linux/ptshare.h:174:
+		if ((vma->vm_start <=3D base) &&
+	    (vma->vm_end >=3D end))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#374: FILE: ./include/linux/ptshare.h:174:
+	    (vma->vm_end >=3D end))
 	                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#379: FILE: ./include/linux/ptshare.h:179:
+}
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#379: FILE: ./include/linux/ptshare.h:179:
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#379: FILE: ./include/linux/ptshare.h:179:
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: ./include/linux/ptshare.h:183:
+extern void pt_copy_pmd(struct mm_struct *mm,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#392: FILE: ./include/linux/ptshare.h:192:
+}
+#define	pt_increment_pmd(pudval)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#396: FILE: ./include/linux/ptshare.h:196:
+#define	pt_share_pmd(vma, address, pud, mapping) pmd_alloc(vma->vm_mm, =

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#396: FILE: ./include/linux/ptshare.h:196:
+#define	pt_share_pmd(vma, address, pud, mapping) pmd_alloc(vma->vm_mm, =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#406: FILE: ./include/linux/ptshare.h:205:
+	page =3D pgd_page(pgdval);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#415: FILE: ./include/linux/ptshare.h:214:
+	page =3D pgd_page(pgdval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#418: FILE: ./include/linux/ptshare.h:217:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#425: FILE: ./include/linux/ptshare.h:224:
+	page =3D pgd_page(pgdval);
 	     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#428: FILE: ./include/linux/ptshare.h:227:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#434: FILE: ./include/linux/ptshare.h:233:
+	unsigned long base =3D address & PGDIR_MASK;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#435: FILE: ./include/linux/ptshare.h:234:
+	unsigned long end =3D base + (PGDIR_SIZE-1);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: ./include/linux/ptshare.h:234:
+	unsigned long end =3D base + (PGDIR_SIZE-1);
 	                                        ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#437: FILE: ./include/linux/ptshare.h:236:
+		if ((vma->vm_start <=3D base) &&
[...]
+		return 1;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#437: FILE: ./include/linux/ptshare.h:236:
+		if ((vma->vm_start <=3D base) &&
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: ./include/linux/ptshare.h:237:
+		if ((vma->vm_start <=3D base) &&
+	    (vma->vm_end >=3D end))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#438: FILE: ./include/linux/ptshare.h:237:
+	    (vma->vm_end >=3D end))
 	                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#443: FILE: ./include/linux/ptshare.h:242:
+}
+extern pud_t * pt_share_pud(struct vm_area_struct *vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: ./include/linux/ptshare.h:242:
+extern pud_t * pt_share_pud(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: ./include/linux/ptshare.h:242:
+extern pud_t * pt_share_pud(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: ./include/linux/ptshare.h:246:
+extern void pt_copy_pud(struct mm_struct *mm,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#456: FILE: ./include/linux/ptshare.h:255:
+}
+#define	pt_increment_pud(pgdval)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#460: FILE: ./include/linux/ptshare.h:259:
+#define	pt_share_pud(vma, address, pgd, mapping) pud_alloc(vma->vm_mm, =

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#460: FILE: ./include/linux/ptshare.h:259:
+#define	pt_share_pud(vma, address, pgd, mapping) pud_alloc(vma->vm_mm, =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: ./include/linux/ptshare.h:263:
+extern pte_t *pt_share_hugepage(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: ./include/linux/ptshare.h:264:
+extern pte_t *pt_share_hugepage(struct mm_struct *mm,
+			       struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#468: FILE: ./include/linux/ptshare.h:266:
+extern void pt_unshare_huge_range(struct mm_struct *mm,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#521: FILE: ./mm/hugetlb.c:281:
+		dst_pte =3D pt_share_hugepage(dst, vma, addr);
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#538: FILE: ./mm/hugetlb.c:358:
+		pte_t *pte =3D pt_share_hugepage(mm, vma, addr);
 		           ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#541: FILE: ./mm/hugetlb.c:360:
 		if (!pte) {
+++ 2.6.13-shpt/./mm/memory.c	2005-08-30 13:14:46.000000000 -0500

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#560: FILE: ./mm/memory.c:117:
+	pmd_t pmdval=3D *pmd;
 	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#560: FILE: ./mm/memory.c:117:
+	pmd_t pmdval=3D *pmd;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#563: FILE: ./mm/memory.c:120:
+	share =3D pt_is_shared_pte(pmdval);
 	      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: ./mm/memory.c:121:
+  ^Ipmd_clear(pmd);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#564: FILE: ./mm/memory.c:121:
+  ^Ipmd_clear(pmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: ./mm/memory.c:121:
+  ^Ipmd_clear(pmd);$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#588: FILE: ./mm/memory.c:134:
+	pud_t pudval =3D *pud;
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#588: FILE: ./mm/memory.c:134:
+	pud_t pudval =3D *pud;
 	                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: ./mm/memory.c:135:
+  ^Iunsigned long next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: ./mm/memory.c:135:
+  ^Iunsigned long next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: ./mm/memory.c:135:
+  ^Iunsigned long next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: ./mm/memory.c:136:
+  ^Iunsigned long start;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: ./mm/memory.c:136:
+  ^Iunsigned long start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: ./mm/memory.c:136:
+  ^Iunsigned long start;$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#592: FILE: ./mm/memory.c:138:
+	int share;
+ =20

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: ./mm/memory.c:138:
+ =20$

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#592: FILE: ./mm/memory.c:138:
+ =20
  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#593: FILE: ./mm/memory.c:139:
+	share =3D pt_is_shared_pmd(pudval);
 	      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: ./mm/memory.c:140:
+  ^Istart =3D addr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#594: FILE: ./mm/memory.c:140:
+  ^Istart =3D addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: ./mm/memory.c:140:
+  ^Istart =3D addr;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#594: FILE: ./mm/memory.c:140:
+  	start =3D addr;
   	      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: ./mm/memory.c:141:
+  ^Ipmd =3D pmd_offset(pud, addr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#595: FILE: ./mm/memory.c:141:
+  ^Ipmd =3D pmd_offset(pud, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: ./mm/memory.c:141:
+  ^Ipmd =3D pmd_offset(pud, addr);$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#595: FILE: ./mm/memory.c:141:
+  	pmd =3D pmd_offset(pud, addr);
   	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#598: FILE: ./mm/memory.c:144:
+			next =3D pmd_addr_end(addr, end);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#602: FILE: ./mm/memory.c:148:
+		} while (pmd++, addr =3D next, addr !=3D end);
 		                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#602: FILE: ./mm/memory.c:148:
+		} while (pmd++, addr =3D next, addr !=3D end);
 		                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#623: FILE: ./mm/memory.c:175:
+	pgd_t pgdval =3D *pgd;
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#623: FILE: ./mm/memory.c:175:
+	pgd_t pgdval =3D *pgd;
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: ./mm/memory.c:179:
+	int share;
+	share =3D pt_is_shared_pud(pgdval);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#628: FILE: ./mm/memory.c:179:
+	share =3D pt_is_shared_pud(pgdval);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#639: FILE: ./mm/memory.c:184:
+			next =3D pud_addr_end(addr, end);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#643: FILE: ./mm/memory.c:188:
+		} while (pud++, addr =3D next, addr !=3D end);
 		                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#643: FILE: ./mm/memory.c:188:
+		} while (pud++, addr =3D next, addr !=3D end);
 		                                    ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#664: FILE: ./mm/memory.c:325:
+#if 0

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#745: FILE: ./mm/memory.c:540:
+	shareable =3D pt_shareable_vma(vma);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#809: FILE: ./mm/memory.c:2093:
+	struct address_space *mapping =3D NULL;
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#818: FILE: ./mm/memory.c:2102:
+		mapping =3D vma->vm_file->f_dentry->d_inode->i_mapping;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#828: FILE: ./mm/memory.c:2111:
+	pud =3D pt_share_pud(vma, address, pgd, mapping);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#833: FILE: ./mm/memory.c:2114:
+	pmd =3D pt_share_pmd(vma, address, pud, mapping);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#838: FILE: ./mm/memory.c:2117:
+	pte =3D pt_share_pte(vma, address, pmd, mapping);
 	    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#917: FILE: ./mm/mmap.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#929: FILE: ./mm/mmap.c:13:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#930: FILE: ./mm/mmap.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, =$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#943: FILE: ./mm/mmap.c:26:
+#include <asm/pgtable.h>

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#957: FILE: ./mm/mmap.c:40:
+	pmd =3D pmd_offset(pud, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#958: FILE: ./mm/mmap.c:41:
+	end =3D pud_addr_end(address, end);
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#959: FILE: ./mm/mmap.c:42:
+	while (address <=3D end) {
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#961: FILE: ./mm/mmap.c:44:
+			page =3D pmd_page(*pmd);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#964: FILE: ./mm/mmap.c:47:
+				printk(KERN_DEBUG "Unsharing pte page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#972: FILE: ./mm/mmap.c:55:
+		address +=3D PMD_SIZE;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#986: FILE: ./mm/mmap.c:69:
+	pud =3D pud_offset(pgd, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#987: FILE: ./mm/mmap.c:70:
+	end =3D pgd_addr_end(address, end);
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#988: FILE: ./mm/mmap.c:71:
+	while (address <=3D end) {
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#990: FILE: ./mm/mmap.c:73:
+			page =3D pud_page(*pud);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#993: FILE: ./mm/mmap.c:76:
+				printk(KERN_DEBUG "Unsharing pmd page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1003: FILE: ./mm/mmap.c:86:
+		address +=3D PUD_SIZE;
 		        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: ./mm/mmap.c:94:
+pt_unshare_pgd(struct mm_struct *mm,
+		 unsigned long address,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1018: FILE: ./mm/mmap.c:101:
+	pgd =3D pgd_offset(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#1020: FILE: ./mm/mmap.c:103:
+	while (address <=3D end) {
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1022: FILE: ./mm/mmap.c:105:
+			page =3D pgd_page(*pgd);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1025: FILE: ./mm/mmap.c:108:
+				printk(KERN_DEBUG "Unsharing pud page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1042: FILE: ./mm/mmap.c:125:
+		address +=3D PGDIR_SIZE;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1059: FILE: ./mm/mmap.c:142:
+	while ((svma =3D vma_prio_tree_next(svma, iter))) {
 	             ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1060: FILE: ./mm/mmap.c:143:
+		if ((svma !=3D vma) &&
 		          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1060: FILE: ./mm/mmap.c:143:
+		if ((svma !=3D vma) &&

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1061: FILE: ./mm/mmap.c:144:
+		    (vma->vm_flags =3D=3D svma->vm_flags) &&
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1061: FILE: ./mm/mmap.c:144:
+		    (vma->vm_flags =3D=3D svma->vm_flags) &&
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1062: FILE: ./mm/mmap.c:145:
+		    (vma->vm_start =3D=3D svma->vm_start) &&
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1062: FILE: ./mm/mmap.c:145:
+		    (vma->vm_start =3D=3D svma->vm_start) &&
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1063: FILE: ./mm/mmap.c:146:
+		    (vma->vm_end =3D=3D svma->vm_end) &&
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1063: FILE: ./mm/mmap.c:146:
+		    (vma->vm_end =3D=3D svma->vm_end) &&
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1064: FILE: ./mm/mmap.c:147:
+		    (vma->vm_pgoff =3D=3D svma->vm_pgoff))
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1064: FILE: ./mm/mmap.c:147:
+		    (vma->vm_pgoff =3D=3D svma->vm_pgoff))
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1079: FILE: ./mm/mmap.c:162:
+	struct vm_area_struct *svma =3D NULL;
 	                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1089: FILE: ./mm/mmap.c:172:
+		printk(KERN_DEBUG "Looking for shareable pte page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1095: FILE: ./mm/mmap.c:178:
+		while ((svma =3D next_shareable_vma(vma, svma, &iter))) {
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1096: FILE: ./mm/mmap.c:179:
+			spgd =3D pgd_offset(svma->vm_mm, address);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1100: FILE: ./mm/mmap.c:183:
+			spud =3D pud_offset(spgd, address);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1104: FILE: ./mm/mmap.c:187:
+			spmd =3D pmd_offset(spud, address);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1109: FILE: ./mm/mmap.c:192:
+			printk(KERN_DEBUG "Sharing pte page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1112: FILE: ./mm/mmap.c:195:
+			page =3D pmd_page(*spmd);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1117: FILE: ./mm/mmap.c:200:
+	pte =3D pte_alloc_map(vma->vm_mm, pmd, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1129: FILE: ./mm/mmap.c:212:
+	page =3D pmd_page(*src_pmd);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1144: FILE: ./mm/mmap.c:227:
+	struct vm_area_struct *svma =3D NULL;
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1149: FILE: ./mm/mmap.c:232:
+	if (pud_none(*pud) &&

ERROR:SPACING: spaces required around that '&&' (ctx:WxO)
#1150: FILE: ./mm/mmap.c:233:
+	    mapping &&=20
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1150: FILE: ./mm/mmap.c:233:
+	    mapping &&=20
 	              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1153: FILE: ./mm/mmap.c:236:
+		printk(KERN_DEBUG "Looking for shareable pmd page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1159: FILE: ./mm/mmap.c:242:
+		while ((svma =3D next_shareable_vma(vma, svma, &iter))) {
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1160: FILE: ./mm/mmap.c:243:
+			spgd =3D pgd_offset(svma->vm_mm, address);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1164: FILE: ./mm/mmap.c:247:
+			spud =3D pud_offset(spgd, address);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1169: FILE: ./mm/mmap.c:252:
+			printk(KERN_DEBUG "Sharing pmd page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1172: FILE: ./mm/mmap.c:255:
+			page =3D pud_page(*spud);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1177: FILE: ./mm/mmap.c:260:
+	pmd =3D pmd_alloc(vma->vm_mm, pud, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1189: FILE: ./mm/mmap.c:272:
+	page =3D pud_page(*src_pud);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1204: FILE: ./mm/mmap.c:287:
+	struct vm_area_struct *svma =3D NULL;
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1208: FILE: ./mm/mmap.c:291:
+	if (pgd_none(*pgd) &&

ERROR:SPACING: spaces required around that '&&' (ctx:WxO)
#1209: FILE: ./mm/mmap.c:292:
+	    mapping &&=20
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1209: FILE: ./mm/mmap.c:292:
+	    mapping &&=20
 	              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1212: FILE: ./mm/mmap.c:295:
+		printk(KERN_DEBUG "Looking for shareable pud page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1218: FILE: ./mm/mmap.c:301:
+		while ((svma =3D next_shareable_vma(vma, svma, &iter))) {
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1219: FILE: ./mm/mmap.c:302:
+			spgd =3D pgd_offset(svma->vm_mm, address);
 			     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1224: FILE: ./mm/mmap.c:307:
+			printk(KERN_DEBUG "Sharing pud page at address 0x%lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1227: FILE: ./mm/mmap.c:310:
+			page =3D pgd_page(*spgd);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1232: FILE: ./mm/mmap.c:315:
+	pud =3D pud_alloc(vma->vm_mm, pgd, address);
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1233: FILE: ./mm/mmap.c:316:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1244: FILE: ./mm/mmap.c:327:
+	page =3D pgd_page(*src_pgd);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1268: FILE: ./mm/mmap.c:351:
+	struct address_space *mapping =3D NULL;
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1271: FILE: ./mm/mmap.c:354:
+		mapping =3D vma->vm_file->f_dentry->d_inode->i_mapping;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1273: FILE: ./mm/mmap.c:356:
+	pgd =3D pgd_offset(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1275: FILE: ./mm/mmap.c:358:
+	pud =3D pt_share_pud(vma, address, pgd, mapping);
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1279: FILE: ./mm/mmap.c:362:
+	pte =3D (pte_t *)pt_share_pmd(vma, address, pud, mapping);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1279: FILE: ./mm/mmap.c:362:
+	pte =3D (pte_t *)pt_share_pmd(vma, address, pud, mapping);
 	    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 126 errors, 44 warnings, 36 checks, 1164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
