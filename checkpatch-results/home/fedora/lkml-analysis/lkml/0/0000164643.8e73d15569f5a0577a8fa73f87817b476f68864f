WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#25: 
It creates a new sysfs class "extint" which provides a number of read-write
                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'particuarly' may be misspelled - perhaps 'particularly'?
#58: FILE: Documentation/extint.txt:10:
+Some types of applications, particuarly realtime process-control or
                             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#91: FILE: Documentation/extint.txt:43:
+	/sys/class/extint/extint#/dev
 	           ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#100: FILE: Documentation/extint.txt:52:
+The "extint#" component of this path is determined by the extint driver
      ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#100: FILE: Documentation/extint.txt:52:
+The "extint#" component of this path is determined by the extint driver
                                                           ^^^^^^

WARNING:TYPO_SPELLING: 'dirctories' may be misspelled - perhaps 'directories'?
#103: FILE: Documentation/extint.txt:55:
+these dirctories per external interrupt device.
       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#107: FILE: Documentation/extint.txt:59:
+configured appropriately, udev will automatically create a /dev/extint#
                                                                 ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#173: FILE: Documentation/extint.txt:125:
+<linux/extint.h>, and the function prototypes contained therein.
        ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#190: FILE: Documentation/extint.txt:142:
+extint code.  This value can be retrieved or modified via
 ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#226: FILE: Documentation/extint.txt:178:
+driver may be present -- drivers are encouraged to include linux/extint.h
                                                                  ^^^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#366: FILE: Documentation/extint.txt:318:
+may be present -- drivers are encouraged to include linux/extint.h
                                                           ^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#420: FILE: Documentation/extint.txt:372:
+The second, and generally preferable method, is for the the

WARNING:TYPO_SPELLING: 'tieing' may be misspelled - perhaps 'tying'?
#454: FILE: Documentation/extint.txt:406:
+deleterious effects (i.e. tieing up a CPU spinning on a value).  This
                           ^^^^^^

WARNING:TYPO_SPELLING: 'architecht' may be misspelled - perhaps 'architect'?
#455: FILE: Documentation/extint.txt:407:
+gives the system architecht a tool to gain minimal-latency notification
                  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#465: FILE: Documentation/extint.txt:417:
+than the simple counter page, and are best provided by a seperate
                                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'EXTINT' may be misspelled - perhaps 'EXTINCT'?
#509: FILE: drivers/char/Kconfig:416:
+config EXTINT
        ^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#509: FILE: drivers/char/Kconfig:416:
+config EXTINT
+	tristate "Abstraction layer for external interrupt devices"
+	help
+	  This option provides an abstraction layer for external
+	  interrupt devices (such as SGI IOC3 and IOC4 IO controllers).
+	  If you have such a device, say Y. Otherwise, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#526: FILE: drivers/char/Makefile:85:
+obj-$(CONFIG_EXTINT) += extint.o
                         ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: drivers/char/extint.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#565: FILE: drivers/char/extint.c:31:
+#include <linux/extint.h>
                 ^^^^^^

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#616: FILE: drivers/char/extint.c:82:
+static struct vm_operations_struct extint_counter_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#620: FILE: drivers/char/extint.c:86:
+static int extint_counter_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#622: FILE: drivers/char/extint.c:88:
+	struct extint_device *ed = file_to_extint_device(filp);
 	                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#640: FILE: drivers/char/extint.c:106:
+static int extint_counter_release(struct inode *inode, struct file *filp)
                                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#642: FILE: drivers/char/extint.c:108:
+	struct extint_device *ed = file_to_extint_device(filp);
 	                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#653: FILE: drivers/char/extint.c:119:
+extint_counter_read(struct file *filp, char *buff, size_t count, loff_t * offp)
                                  ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: drivers/char/extint.c:119:
+extint_counter_read(struct file *filp, char *buff, size_t count, loff_t * offp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#655: FILE: drivers/char/extint.c:121:
+	struct extint_device *ed = file_to_extint_device(filp);
 	                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#668: FILE: drivers/char/extint.c:134:
+static int extint_counter_mmap(struct file *filp, struct vm_area_struct *vma)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#670: FILE: drivers/char/extint.c:136:
+	struct extint_device *ed = file_to_extint_device(filp);
 	                                                 ^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#672: FILE: drivers/char/extint.c:138:
+	if ((PAGE_SIZE != vma->vm_end - vma->vm_start) || (0 != vma->vm_pgoff))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#683: FILE: drivers/char/extint.c:149:
+extint_counter_poll(struct file *filp, struct poll_table_struct *wait)
                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#685: FILE: drivers/char/extint.c:151:
+	struct extint_device *ed = file_to_extint_device(filp);
 	                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#687: FILE: drivers/char/extint.c:153:
+	poll_wait(filp, &ed->counter_queue, wait);
 	          ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#696: FILE: drivers/char/extint.c:162:
+static struct file_operations extint_fops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#712: FILE: drivers/char/extint.c:178:
+		printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#713: FILE: drivers/char/extint.c:179:
+		       "%s: failed to allocate extint counter page.\n",
 		                               ^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#714: FILE: drivers/char/extint.c:180:
+		       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#727: FILE: drivers/char/extint.c:193:
+		printk(KERN_WARNING

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#729: FILE: drivers/char/extint.c:195:
+		       __FUNCTION__, MINOR(ed->devt));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#744: FILE: drivers/char/extint.c:210:
+	BUG_ON(waitqueue_active(&ed->counter_queue));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#744: FILE: drivers/char/extint.c:210:
+	BUG_ON(waitqueue_active(&ed->counter_queue));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#855: FILE: drivers/char/extint.c:321:
+	period = simple_strtoul(buf, &endp, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#860: FILE: drivers/char/extint.c:326:
+	if (likely(ed->props && ed->props->set_period)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#864: FILE: drivers/char/extint.c:330:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#941: FILE: drivers/char/extint.c:407:
+	BUG_ON(ed->state != EXTINT_DEAD);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#942: FILE: drivers/char/extint.c:408:
+	BUG_ON(!list_empty(&ed->callouts));

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#947: FILE: drivers/char/extint.c:413:
+	.name = "extint",
 	         ^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: drivers/char/extint.c:417:
+#define DECLARE_ATTR(_name,_mode,_show,_store)	\
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: drivers/char/extint.c:417:
+#define DECLARE_ATTR(_name,_mode,_show,_store)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: drivers/char/extint.c:417:
+#define DECLARE_ATTR(_name,_mode,_show,_store)	\
                                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#952: FILE: drivers/char/extint.c:418:
+{^I^I^I^I^I ^I\$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ed)...) over kmalloc(sizeof(struct extint_device)...)
#984: FILE: drivers/char/extint.c:450:
+	ed = kmalloc(sizeof(struct extint_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#1007: FILE: drivers/char/extint.c:473:
+	snprintf(ed->class_dev.class_id, BUS_ID_SIZE, "extint%d",
 	                                               ^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1048: FILE: drivers/char/extint.c:514:
+EXPORT_SYMBOL(extint_device_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: drivers/char/extint.c:526:
+	BUG_ON(!list_empty(&ed->callouts));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1078: FILE: drivers/char/extint.c:544:
+EXPORT_SYMBOL(extint_device_unregister);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1081: FILE: drivers/char/extint.c:547:
+struct extint_device *file_to_extint_device(const struct file *filp)
                                                                ^^^^

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#1083: FILE: drivers/char/extint.c:549:
+	/* Validate that this really is an extint device file */
 	                                   ^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1092: FILE: drivers/char/extint.c:558:
+EXPORT_SYMBOL(file_to_extint_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1132: FILE: drivers/char/extint.c:598:
+EXPORT_SYMBOL(extint_callout_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1150: FILE: drivers/char/extint.c:616:
+EXPORT_SYMBOL(extint_callout_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1172: FILE: drivers/char/extint.c:638:
+EXPORT_SYMBOL(extint_interrupt);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1178: FILE: drivers/char/extint.c:644:
+static int __devinit extint_init(void)

WARNING:TYPO_SPELLING: 'extint' may be misspelled - perhaps 'extinct'?
#1183: FILE: drivers/char/extint.c:649:
+	ret = alloc_chrdev_region(&firstdev, 0, EXTINT_NUMDEVS, "extint");
 	                                                         ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1185: FILE: drivers/char/extint.c:651:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1187: FILE: drivers/char/extint.c:653:
+		       "%s: failed to allocate external interrupt "
+		       "device numbers.\n", __FUNCTION__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1187: FILE: drivers/char/extint.c:653:
+		       "device numbers.\n", __FUNCTION__);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1195: FILE: drivers/char/extint.c:661:
+static void __devexit extint_exit(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1213: FILE: include/linux/extint.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1235: FILE: include/linux/extint.h:23:
+	ssize_t (*get_mode)(struct extint_device * ed, char *buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: include/linux/extint.h:24:
+	ssize_t (*set_mode)(struct extint_device * ed, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: include/linux/extint.h:25:
+	ssize_t (*set_mode)(struct extint_device * ed, const char *buf,
+			     size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1240: FILE: include/linux/extint.h:28:
+	ssize_t (*get_modelist)(struct extint_device * ed, char *buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1243: FILE: include/linux/extint.h:31:
+	unsigned long (*get_period)(struct extint_device * ed);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1244: FILE: include/linux/extint.h:32:
+	ssize_t (*set_period)(struct extint_device * ed, unsigned long period);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1250: FILE: include/linux/extint.h:38:
+	unsigned long (*get_quantum)(struct extint_device * ed);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: include/linux/extint.h:41:
+	ssize_t (*get_source)(struct extint_device * ed, char *buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1254: FILE: include/linux/extint.h:42:
+	ssize_t (*set_source)(struct extint_device * ed, const char *buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1258: FILE: include/linux/extint.h:46:
+	ssize_t (*get_sourcelist)(struct extint_device * ed, char *buf);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1277: FILE: include/linux/extint.h:65:
+	spinlock_t callouts_lock;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1291: FILE: include/linux/extint.h:79:
+	void* devdata;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1294: FILE: include/linux/extint.h:82:
+static inline void* extint_get_devdata(const struct extint_device *ed) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1294: FILE: include/linux/extint.h:82:
+static inline void* extint_get_devdata(const struct extint_device *ed) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1298: FILE: include/linux/extint.h:86:
+static inline void extint_set_devdata(struct extint_device *ed, void* devdata) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1298: FILE: include/linux/extint.h:86:
+static inline void extint_set_devdata(struct extint_device *ed, void* devdata) {

WARNING:SPACING: Unnecessary space before function pointer arguments
#1305: FILE: include/linux/extint.h:93:
+	void (*function) (void *);	/* Callout to invoke */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1305: FILE: include/linux/extint.h:93:
+	void (*function) (void *);	/* Callout to invoke */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1309: FILE: include/linux/extint.h:97:
+extern struct extint_device *extint_device_register(struct extint_properties

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1311: FILE: include/linux/extint.h:99:
+extern void extint_device_unregister(struct extint_device *ed);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1316: FILE: include/linux/extint.h:104:
+extern struct extint_device *file_to_extint_device(const struct file *filp);
                                                                       ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1316: FILE: include/linux/extint.h:104:
+extern struct extint_device *file_to_extint_device(const struct file *filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1317: FILE: include/linux/extint.h:105:
+extern int extint_callout_register(struct extint_device *ed,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1319: FILE: include/linux/extint.h:107:
+extern void extint_callout_unregister(struct extint_device *ed,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1325: FILE: include/linux/extint.h:113:
+extern void extint_interrupt(struct extint_device *ed);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 67 warnings, 11 checks, 1253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
