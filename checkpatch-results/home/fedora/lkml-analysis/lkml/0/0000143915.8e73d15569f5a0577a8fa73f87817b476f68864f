WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
> > I don't care either way since we will not be supporting non-intent based

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#83: 
 Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#109: FILE: fs/namei.c:323:
+ * @nd: pointer to nameidata
     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/namei.c:325:
+void release_open_intent(struct nameidata *nd)
                                            ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->intent.open.file->f_dentry"
#113: FILE: fs/namei.c:327:
+	if (nd->intent.open.file->f_dentry == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#127: FILE: fs/namei.c:1069:
+		struct nameidata *nd, int open_flags, int create_mode)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: fs/namei.c:1069:
+static int __path_lookup_intent_open(const char *name, unsigned int lookup_flags,
+		struct nameidata *nd, int open_flags, int create_mode)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#129: FILE: fs/namei.c:1071:
+	struct file *filp = get_empty_filp();
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#132: FILE: fs/namei.c:1074:
+	if (filp == NULL)
 	    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#132: FILE: fs/namei.c:1074:
+	if (filp == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#134: FILE: fs/namei.c:1076:
+	nd->intent.open.file = filp;
 	                       ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#137: FILE: fs/namei.c:1079:
+	err = path_lookup(name, lookup_flags|LOOKUP_OPEN, nd);
 	                                                  ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#137: FILE: fs/namei.c:1079:
+	err = path_lookup(name, lookup_flags|LOOKUP_OPEN, nd);
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: fs/namei.c:1080:
+	if (IS_ERR(nd->intent.open.file)) {
[...]
+	} else if (err != 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: fs/namei.c:1083:
+			path_release(nd);
 			             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#144: FILE: fs/namei.c:1086:
+		release_open_intent(nd);
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#152: FILE: fs/namei.c:1094:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#156: FILE: fs/namei.c:1098:
+		struct nameidata *nd, int open_flags)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/namei.c:1098:
+int path_lookup_open(const char *name, unsigned int lookup_flags,
+		struct nameidata *nd, int open_flags)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#158: FILE: fs/namei.c:1100:
+	return __path_lookup_intent_open(name, lookup_flags, nd,
 	                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#166: FILE: fs/namei.c:1108:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#171: FILE: fs/namei.c:1113:
+		struct nameidata *nd, int open_flags, int create_mode)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: fs/namei.c:1113:
+int path_lookup_create(const char *name, unsigned int lookup_flags,
+		struct nameidata *nd, int open_flags, int create_mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/namei.c:1115:
+	return __path_lookup_intent_open(name, lookup_flags|LOOKUP_CREATE, nd,
 	                                                                   ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: fs/namei.c:1115:
+	return __path_lookup_intent_open(name, lookup_flags|LOOKUP_CREATE, nd,
 	                                                   ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#178: FILE: fs/namei.c:1120:
+		struct nameidata *nd, int open_flags)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/namei.c:1120:
+int __user_path_lookup_open(const char __user *name, unsigned int lookup_flags,
+		struct nameidata *nd, int open_flags)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#184: FILE: fs/namei.c:1126:
+		err = __path_lookup_intent_open(tmp, lookup_flags, nd, open_flags, 0);
 		                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#223: FILE: fs/namei.c:1516:
+		error = path_lookup_open(pathname, lookup_flags(flag), nd, flag);
 		                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namei.c:1525:
+	error = path_lookup_create(pathname, LOOKUP_PARENT, nd, flag, mode);
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#241: FILE: fs/namei.c:1601:
+		release_open_intent(nd);
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#255: FILE: fs/exec.c:129:
+	error = __user_path_lookup_open(library, LOOKUP_FOLLOW, &nd, FMODE_READ);
 	                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/exec.c:141:
+	file = nameidata_to_filp(&nd, O_RDONLY);
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/exec.c:169:
+	release_open_intent(&nd);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#282: FILE: fs/exec.c:493:
+	err = path_lookup_open(name, LOOKUP_FOLLOW, &nd, FMODE_READ);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#291: FILE: fs/exec.c:506:
+				file = nameidata_to_filp(&nd, O_RDONLY);
 				                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#299: FILE: fs/exec.c:518:
+		release_open_intent(&nd);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: include/linux/namei.h:69:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags, struct nameidata *nd, int open_flags);
                                                                                                  ^^

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#319: FILE: include/linux/namei.h:69:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags, struct nameidata *nd, int open_flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#319: FILE: include/linux/namei.h:69:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags, struct nameidata *nd, int open_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/namei.h:69:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags, struct nameidata *nd, int open_flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#319: FILE: include/linux/namei.h:69:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags, struct nameidata *nd, int open_flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#320: FILE: include/linux/namei.h:70:
+extern int path_lookup_open(const char *, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#320: FILE: include/linux/namei.h:70:
+extern int path_lookup_open(const char *, unsigned lookup_flags, struct nameidata *, int open_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/namei.h:70:
+extern int path_lookup_open(const char *, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#320: FILE: include/linux/namei.h:70:
+extern int path_lookup_open(const char *, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#320: FILE: include/linux/namei.h:70:
+extern int path_lookup_open(const char *, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#321: FILE: include/linux/namei.h:71:
+extern struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,
                                                               ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/namei.h:71:
+extern struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: include/linux/namei.h:72:
+extern struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,
+		int (*open)(struct inode *, struct file *));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#323: FILE: include/linux/namei.h:73:
+extern struct file *nameidata_to_filp(struct nameidata *nd, int flags);
                                                         ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/namei.h:73:
+extern struct file *nameidata_to_filp(struct nameidata *nd, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/namei.h:74:
+extern void release_open_intent(struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#324: FILE: include/linux/namei.h:74:
+extern void release_open_intent(struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#380: FILE: fs/open.c:828:
+		return nameidata_to_filp(&nd, flags);
 		                          ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#388: FILE: fs/open.c:835:
+ * lookup_instantiate_filp - instantiates the open intent filp
                                                           ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#389: FILE: fs/open.c:836:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#402: FILE: fs/open.c:849:
+struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,
                                                        ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: fs/open.c:850:
+struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,
+		int (*open)(struct inode *, struct file *))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#416: FILE: fs/open.c:863:
+	release_open_intent(nd);
 	                    ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#423: FILE: fs/open.c:870:
+ * nameidata_to_filp - convert a nameidata to an open filp.
                                                       ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: fs/open.c:871:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#429: FILE: fs/open.c:876:
+struct file *nameidata_to_filp(struct nameidata *nd, int flags)
                                                  ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#431: FILE: fs/open.c:878:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#433: FILE: fs/open.c:880:
+	/* Pick up the filp from the open intent */
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#434: FILE: fs/open.c:881:
+	filp = nd->intent.open.file;
 	^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp->f_dentry"
#436: FILE: fs/open.c:883:
+	if (filp->f_dentry == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#437: FILE: fs/open.c:884:
+		filp = __dentry_open(nd->dentry, nd->mnt, flags, filp, NULL);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#437: FILE: fs/open.c:884:
+		filp = __dentry_open(nd->dentry, nd->mnt, flags, filp, NULL);
 		                                                 ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#439: FILE: fs/open.c:886:
+		path_release(nd);
 		             ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#440: FILE: fs/open.c:887:
+	return filp;
 	       ^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143915.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 54 warnings, 17 checks, 330 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143915.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
