CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: arch/um/include/os.h:235:
+extern void os_usr1_signal(int on);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: arch/um/include/os.h:277:
+extern int is_skas_winch(int pid, int fd, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: arch/um/include/os.h:278:
+extern int start_userspace(unsigned long stub_stack);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: arch/um/include/os.h:279:
+extern int copy_context_skas0(unsigned long stack, int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: arch/um/include/os.h:280:
+extern void userspace(union uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: arch/um/include/os.h:281:
+extern void map_stub_pages(int fd, unsigned long code,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: arch/um/include/os.h:283:
+extern void new_thread(void *stack, void **switch_buf_ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: arch/um/include/os.h:284:
+extern void new_thread(void *stack, void **switch_buf_ptr,
+			 void **fork_buf_ptr, void (*handler)(int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: arch/um/include/os.h:285:
+extern void thread_wait(void *sw, void *fb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: arch/um/include/os.h:286:
+extern void switch_threads(void *me, void *next);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: arch/um/include/os.h:287:
+extern int start_idle_thread(void *stack, void *switch_buf_ptr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: arch/um/include/os.h:289:
+extern void initial_thread_cb_skas(void (*proc)(void *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: arch/um/include/os.h:290:
+extern void initial_thread_cb_skas(void (*proc)(void *),
+				 void *arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: arch/um/include/os.h:291:
+extern void halt_skas(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: arch/um/include/os.h:292:
+extern void reboot_skas(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#145: FILE: arch/um/kernel/skas/process_kern.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: arch/um/kernel/skas/process_kern.c:100:
+		     unsigned long stack_top, struct task_struct * p,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#238: FILE: arch/um/os-Linux/skas/process.c:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: arch/um/os-Linux/skas/process.c:40:
+	if(pid != os_getpgrp())

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#281: FILE: arch/um/os-Linux/skas/process.c:44:
+	return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: arch/um/os-Linux/skas/process.c:47:
+void wait_stub_done(int pid, int sig, char * fname)

ERROR:SPACING: space prohibited after that open parenthesis '('
#289: FILE: arch/um/os-Linux/skas/process.c:52:
+		if ( sig != -1 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#289: FILE: arch/um/os-Linux/skas/process.c:52:
+		if ( sig != -1 ) {

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: arch/um/os-Linux/skas/process.c:54:
+			if(err)

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: arch/um/os-Linux/skas/process.c:61:
+	} while((n >= 0) && WIFSTOPPED(status) &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: arch/um/os-Linux/skas/process.c:62:
+^I        ((WSTOPSIG(status) == SIGVTALRM) ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n < 0'
#305: FILE: arch/um/os-Linux/skas/process.c:68:
+	if((n < 0) || !WIFSTOPPED(status) ||
+	   (WSTOPSIG(status) != SIGUSR1 && WSTOPSIG(status) != SIGTRAP)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: arch/um/os-Linux/skas/process.c:68:
+	if((n < 0) || !WIFSTOPPED(status) ||

ERROR:SPACING: space required before the open brace '{'
#306: FILE: arch/um/os-Linux/skas/process.c:69:
+	   (WSTOPSIG(status) != SIGUSR1 && WSTOPSIG(status) != SIGTRAP)){

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: arch/um/os-Linux/skas/process.c:72:
+		if(ptrace(PTRACE_GETREGS, pid, 0, regs) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: arch/um/os-Linux/skas/process.c:73:
+			printk("Failed to get registers from stub, "

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: arch/um/os-Linux/skas/process.c:74:
+			printk("Failed to get registers from stub, "
+			       "errno = %d\n", errno);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#312: FILE: arch/um/os-Linux/skas/process.c:75:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: arch/um/os-Linux/skas/process.c:78:
+			printk("Stub registers -\n");

ERROR:SPACING: space required before the open parenthesis '('
#316: FILE: arch/um/os-Linux/skas/process.c:79:
+			for(i = 0; i < HOST_FRAME_SIZE; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: arch/um/os-Linux/skas/process.c:80:
+				printk("\t%d - %lx\n", i, regs[i]);

WARNING:SPLIT_STRING: quoted string split across lines
#320: FILE: arch/um/os-Linux/skas/process.c:83:
+		panic("%s : failed to wait for SIGUSR1/SIGTRAP, "
+		      "pid = %d, n = %d, errno = %d, status = 0x%x\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: arch/um/os-Linux/skas/process.c:90:
+void get_skas_faultinfo(int pid, struct faultinfo * fi)

ERROR:SPACING: space required before the open brace '{'
#331: FILE: arch/um/os-Linux/skas/process.c:94:
+	if(ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: arch/um/os-Linux/skas/process.c:94:
+	if(ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: arch/um/os-Linux/skas/process.c:96:
+		if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_skas_faultinfo', this function's name, in a string
#334: FILE: arch/um/os-Linux/skas/process.c:97:
+			panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#335: FILE: arch/um/os-Linux/skas/process.c:98:
+			panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "
+			      "errno = %d\n", errno);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#343: FILE: arch/um/os-Linux/skas/process.c:106:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: arch/um/os-Linux/skas/process.c:106:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: arch/um/os-Linux/skas/process.c:116:
+static void handle_segv(int pid, union uml_pt_regs * regs)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#367: FILE: arch/um/os-Linux/skas/process.c:130:
+	if (!local_using_sysemu)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#371: FILE: arch/um/os-Linux/skas/process.c:134:
+		if(err < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_trap', this function's name, in a string
#372: FILE: arch/um/os-Linux/skas/process.c:135:
+			panic("handle_trap - nullifying syscall failed errno = %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#376: FILE: arch/um/os-Linux/skas/process.c:139:
+		if(err < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_trap', this function's name, in a string
#377: FILE: arch/um/os-Linux/skas/process.c:140:
+			panic("handle_trap - continuing to end of syscall failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#378: FILE: arch/um/os-Linux/skas/process.c:141:
+			panic("handle_trap - continuing to end of syscall failed, "
+			      "errno = %d\n", errno);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err < 0'
#381: FILE: arch/um/os-Linux/skas/process.c:144:
+		if((err < 0) || !WIFSTOPPED(status) ||
+		   (WSTOPSIG(status) != SIGTRAP + 0x80))

ERROR:SPACING: space required before the open parenthesis '('
#381: FILE: arch/um/os-Linux/skas/process.c:144:
+		if((err < 0) || !WIFSTOPPED(status) ||

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_trap', this function's name, in a string
#383: FILE: arch/um/os-Linux/skas/process.c:146:
+			panic("handle_trap - failed to wait at end of syscall, "

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: arch/um/os-Linux/skas/process.c:147:
+			panic("handle_trap - failed to wait at end of syscall, "
+			      "errno = %d, status = %d\n", errno, status);

ERROR:SPACING: space required before the open brace '{'
#403: FILE: arch/um/os-Linux/skas/process.c:166:
+	if(!proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: arch/um/os-Linux/skas/process.c:166:
+	if(!proc_mm){

CHECK:SPACING: No space is necessary after a cast
#407: FILE: arch/um/os-Linux/skas/process.c:170:
+		addr = mmap64((void *) UML_CONFIG_STUB_CODE, page_size(),

ERROR:SPACING: space required before the open brace '{'
#410: FILE: arch/um/os-Linux/skas/process.c:173:
+		if(addr == MAP_FAILED){

ERROR:SPACING: space required before the open parenthesis '('
#410: FILE: arch/um/os-Linux/skas/process.c:173:
+		if(addr == MAP_FAILED){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: arch/um/os-Linux/skas/process.c:174:
+			printk("mapping stub code failed, errno = %d\n",

ERROR:SPACING: space required before the open brace '{'
#416: FILE: arch/um/os-Linux/skas/process.c:179:
+		if(stack != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#416: FILE: arch/um/os-Linux/skas/process.c:179:
+		if(stack != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stack"
#416: FILE: arch/um/os-Linux/skas/process.c:179:
+		if(stack != NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: arch/um/os-Linux/skas/process.c:182:
+			__u64 offset;
+			fd = phys_mapping(to_phys(stack), &offset);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#420: FILE: arch/um/os-Linux/skas/process.c:183:
+			addr = mmap((void *) UML_CONFIG_STUB_DATA, page_size(),

ERROR:SPACING: space required before the open brace '{'
#423: FILE: arch/um/os-Linux/skas/process.c:186:
+			if(addr == MAP_FAILED){

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: arch/um/os-Linux/skas/process.c:186:
+			if(addr == MAP_FAILED){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: arch/um/os-Linux/skas/process.c:187:
+				printk("mapping stub stack failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#425: FILE: arch/um/os-Linux/skas/process.c:188:
+				printk("mapping stub stack failed, "
+				       "errno = %d\n", errno);

ERROR:SPACING: space required before the open brace '{'
#430: FILE: arch/um/os-Linux/skas/process.c:193:
+	if(!ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#430: FILE: arch/um/os-Linux/skas/process.c:193:
+	if(!ptrace_faultinfo){

CHECK:SPACING: No space is necessary after a cast
#432: FILE: arch/um/os-Linux/skas/process.c:195:
+				  (unsigned long) stub_segv_handler -

CHECK:SPACING: No space is necessary after a cast
#433: FILE: arch/um/os-Linux/skas/process.c:196:
+				  (unsigned long) &__syscall_stub_start;

CHECK:SPACING: No space is necessary after a cast
#435: FILE: arch/um/os-Linux/skas/process.c:198:
+		set_sigstack((void *) UML_CONFIG_STUB_DATA, page_size());

CHECK:SPACING: No space is necessary after a cast
#436: FILE: arch/um/os-Linux/skas/process.c:199:
+		set_handler(SIGSEGV, (void *) v, SA_ONSTACK,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#442: FILE: arch/um/os-Linux/skas/process.c:205:
+	return(0);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#446: FILE: arch/um/os-Linux/skas/process.c:209:
+#undef NR_CPUS

ERROR:SPACING: space prohibited after that open parenthesis '('
#456: FILE: arch/um/os-Linux/skas/process.c:219:
+	if ( stub_code_fd == -1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#456: FILE: arch/um/os-Linux/skas/process.c:219:
+	if ( stub_code_fd == -1 )

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: arch/um/os-Linux/skas/process.c:225:
+	if(stack == MAP_FAILED)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#463: FILE: arch/um/os-Linux/skas/process.c:226:
+		panic("start_userspace : mmap failed, errno = %d", errno);

CHECK:SPACING: No space is necessary after a cast
#464: FILE: arch/um/os-Linux/skas/process.c:227:
+	sp = (unsigned long) stack + PAGE_SIZE - sizeof(void *);

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: arch/um/os-Linux/skas/process.c:230:
+	if(proc_mm) flags |= CLONE_VM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#467: FILE: arch/um/os-Linux/skas/process.c:230:
+	if(proc_mm) flags |= CLONE_VM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#468: FILE: arch/um/os-Linux/skas/process.c:231:
+	pid = clone(userspace_tramp, (void *) sp, flags, (void *) stub_stack);

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: arch/um/os-Linux/skas/process.c:232:
+	if(pid < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#470: FILE: arch/um/os-Linux/skas/process.c:233:
+		panic("start_userspace : clone failed, errno = %d", errno);

ERROR:SPACING: space required before the open parenthesis '('
#474: FILE: arch/um/os-Linux/skas/process.c:237:
+		if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#475: FILE: arch/um/os-Linux/skas/process.c:238:
+			panic("start_userspace : wait failed, errno = %d",

ERROR:SPACING: space required before the open parenthesis '('
#477: FILE: arch/um/os-Linux/skas/process.c:240:
+	} while(WIFSTOPPED(status) && (WSTOPSIG(status) == SIGVTALRM));

ERROR:SPACING: space required before the open parenthesis '('
#479: FILE: arch/um/os-Linux/skas/process.c:242:
+	if(!WIFSTOPPED(status) || (WSTOPSIG(status) != SIGSTOP))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#480: FILE: arch/um/os-Linux/skas/process.c:243:
+		panic("start_userspace : expected SIGSTOP, got status = %d",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#484: FILE: arch/um/os-Linux/skas/process.c:247:
+		panic("start_userspace : PTRACE_OLDSETOPTIONS failed, errno=%d\n",

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: arch/um/os-Linux/skas/process.c:250:
+	if(munmap(stack, PAGE_SIZE) < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#488: FILE: arch/um/os-Linux/skas/process.c:251:
+		panic("start_userspace : munmap failed, errno = %d\n", errno);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#490: FILE: arch/um/os-Linux/skas/process.c:253:
+	return(pid);

ERROR:SPACING: space required before the open brace '{'
#498: FILE: arch/um/os-Linux/skas/process.c:261:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: arch/um/os-Linux/skas/process.c:261:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#507: FILE: arch/um/os-Linux/skas/process.c:270:
+		if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'userspace', this function's name, in a string
#508: FILE: arch/um/os-Linux/skas/process.c:271:
+			panic("userspace - could not resume userspace process, "

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: arch/um/os-Linux/skas/process.c:272:
+			panic("userspace - could not resume userspace process, "
+			      "pid=%d, ptrace operation = %d, errno = %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#513: FILE: arch/um/os-Linux/skas/process.c:276:
+		if(err < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'userspace', this function's name, in a string
#514: FILE: arch/um/os-Linux/skas/process.c:277:
+			panic("userspace - waitpid failed, errno = %d\n",

ERROR:SPACING: space required before the open brace '{'
#521: FILE: arch/um/os-Linux/skas/process.c:284:
+		if(WIFSTOPPED(status)){

ERROR:SPACING: space required before the open parenthesis '('
#521: FILE: arch/um/os-Linux/skas/process.c:284:
+		if(WIFSTOPPED(status)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: arch/um/os-Linux/skas/process.c:285:
+^I^I  ^Iswitch(WSTOPSIG(status)){$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: arch/um/os-Linux/skas/process.c:285:
+^I^I  ^Iswitch(WSTOPSIG(status)){$

ERROR:SPACING: space required before the open brace '{'
#522: FILE: arch/um/os-Linux/skas/process.c:285:
+		  	switch(WSTOPSIG(status)){

ERROR:SPACING: space required before the open parenthesis '('
#522: FILE: arch/um/os-Linux/skas/process.c:285:
+		  	switch(WSTOPSIG(status)){

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: arch/um/os-Linux/skas/process.c:287:
+				if(PTRACE_FULL_FAULTINFO || !ptrace_faultinfo)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#526: FILE: arch/um/os-Linux/skas/process.c:289:
+				else handle_segv(pid, regs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: arch/um/os-Linux/skas/process.c:292:
+^I^I^I        handle_trap(pid, regs, local_using_sysemu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: arch/um/os-Linux/skas/process.c:306:
+^I^I^I        printk("userspace - child stopped with signal "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: arch/um/os-Linux/skas/process.c:306:
+			        printk("userspace - child stopped with signal "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'userspace', this function's name, in a string
#543: FILE: arch/um/os-Linux/skas/process.c:306:
+			        printk("userspace - child stopped with signal "

WARNING:SPLIT_STRING: quoted string split across lines
#544: FILE: arch/um/os-Linux/skas/process.c:307:
+			        printk("userspace - child stopped with signal "
+				       "%d\n", WSTOPSIG(status));

WARNING:INDENTED_LABEL: labels should not be indented
#546: FILE: arch/um/os-Linux/skas/process.c:309:
+		    again:

ERROR:SPACING: space required before the open parenthesis '('
#551: FILE: arch/um/os-Linux/skas/process.c:314:
+			if(PT_SYSCALL_NR_OFFSET != PT_SYSCALL_RET_OFFSET)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#556: FILE: arch/um/os-Linux/skas/process.c:319:
+}
+#define INIT_JMP_NEW_THREAD 0

CHECK:SPACING: No space is necessary after a cast
#567: FILE: arch/um/os-Linux/skas/process.c:330:
+	struct stub_data *data = (struct stub_data *) current_stack;

CHECK:SPACING: No space is necessary after a cast
#568: FILE: arch/um/os-Linux/skas/process.c:331:
+	struct stub_data *child_data = (struct stub_data *) new_stack;

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/um/os-Linux/skas/process.c:341:
+^I^I^I^I^I            { { 0, 1000000 / hz() },$

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/um/os-Linux/skas/process.c:347:
+				(unsigned long) stub_clone_handler -

CHECK:SPACING: No space is necessary after a cast
#585: FILE: arch/um/os-Linux/skas/process.c:348:
+				(unsigned long) &__syscall_stub_start;

ERROR:SPACING: space required before the open parenthesis '('
#592: FILE: arch/um/os-Linux/skas/process.c:355:
+	if(err < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_context_skas0', this function's name, in a string
#593: FILE: arch/um/os-Linux/skas/process.c:356:
+		panic("copy_context_skas0 : PTRACE_SETREGS failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#594: FILE: arch/um/os-Linux/skas/process.c:357:
+		panic("copy_context_skas0 : PTRACE_SETREGS failed, "
+		      "pid = %d, errno = %d\n", pid, errno);

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: arch/um/os-Linux/skas/process.c:368:
+	if(pid < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_context_skas0', this function's name, in a string
#606: FILE: arch/um/os-Linux/skas/process.c:369:
+		panic("copy_context_skas0 - stub-parent reports error %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_context_skas0', this function's name, in a string
#614: FILE: arch/um/os-Linux/skas/process.c:377:
+		panic("copy_context_skas0 - stub-child reports error %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_context_skas0', this function's name, in a string
#619: FILE: arch/um/os-Linux/skas/process.c:382:
+		panic("copy_context_skas0 : PTRACE_OLDSETOPTIONS failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#620: FILE: arch/um/os-Linux/skas/process.c:383:
+		panic("copy_context_skas0 : PTRACE_OLDSETOPTIONS failed, "
+		      "errno = %d\n", errno);

WARNING:TYPO_SPELLING: 'availabl' may be misspelled - perhaps 'available'?
#627: FILE: arch/um/os-Linux/skas/process.c:390:
+ * availabl. Opening /proc/mm creates a new mm_context, which lacks
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#638: FILE: arch/um/os-Linux/skas/process.c:401:
+				      .u         =
+				      { .mmap    =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#639: FILE: arch/um/os-Linux/skas/process.c:402:
+				      { .mmap    =
+					{ .addr    = code,

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: arch/um/os-Linux/skas/process.c:410:
+	if(n != sizeof(mmop))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_stub_pages', this function's name, in a string
#648: FILE: arch/um/os-Linux/skas/process.c:411:
+		panic("map_stub_pages : /proc/mm map for code failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: arch/um/os-Linux/skas/process.c:412:
+		panic("map_stub_pages : /proc/mm map for code failed, "
+		      "err = %d\n", -n);

ERROR:SPACING: space prohibited after that open parenthesis '('
#651: FILE: arch/um/os-Linux/skas/process.c:414:
+	if ( stack ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#651: FILE: arch/um/os-Linux/skas/process.c:414:
+	if ( stack ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: arch/um/os-Linux/skas/process.c:417:
+		int map_fd = phys_mapping(to_phys((void *)stack), &map_offset);
+		mmop = ((struct proc_mm_op)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#657: FILE: arch/um/os-Linux/skas/process.c:420:
+				  .u         =
+				  { .mmap    =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#658: FILE: arch/um/os-Linux/skas/process.c:421:
+				  { .mmap    =
+				    { .addr    = data,

ERROR:SPACING: space required before the open parenthesis '('
#666: FILE: arch/um/os-Linux/skas/process.c:429:
+		if(n != sizeof(mmop))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_stub_pages', this function's name, in a string
#667: FILE: arch/um/os-Linux/skas/process.c:430:
+			panic("map_stub_pages : /proc/mm map for data failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: arch/um/os-Linux/skas/process.c:431:
+			panic("map_stub_pages : /proc/mm map for data failed, "
+			      "err = %d\n", -n);

ERROR:SPACING: space required before the open parenthesis '('
#691: FILE: arch/um/os-Linux/skas/process.c:454:
+	if(sigsetjmp(fork_buf, 1) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#705: FILE: arch/um/os-Linux/skas/process.c:468:
+	if(sigsetjmp(buf, 1) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#714: FILE: arch/um/os-Linux/skas/process.c:477:
+	if(sigsetjmp(my_buf, 1) == 0)

CHECK:SPACING: No space is necessary after a cast
#730: FILE: arch/um/os-Linux/skas/process.c:493:
+	set_handler(SIGWINCH, (__sighandler_t) sig_handler,

ERROR:SPACING: space required before the open brace '{'
#736: FILE: arch/um/os-Linux/skas/process.c:499:
+	switch(n){

ERROR:SPACING: space required before the open parenthesis '('
#736: FILE: arch/um/os-Linux/skas/process.c:499:
+	switch(n){

CHECK:SPACING: No space is necessary after a cast
#738: FILE: arch/um/os-Linux/skas/process.c:501:
+		new_thread_proc((void *) stack, new_thread_handler);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#749: FILE: arch/um/os-Linux/skas/process.c:512:
+		return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#752: FILE: arch/um/os-Linux/skas/process.c:515:
+		return(1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_idle_thread', this function's name, in a string
#754: FILE: arch/um/os-Linux/skas/process.c:517:
+		panic("Bad sigsetjmp return in start_idle_thread - %d\n", n);

ERROR:SPACING: space required before the open parenthesis '('
#768: FILE: arch/um/os-Linux/skas/process.c:531:
+	if(sigsetjmp(here, 1) == 0)

ERROR:SPACING: space required before the open brace '{'
#794: FILE: arch/um/os-Linux/skas/process.c:557:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#794: FILE: arch/um/os-Linux/skas/process.c:557:
+	if(proc_mm){

CHECK:BRACES: braces {} should be used on all arms of this statement
#794: FILE: arch/um/os-Linux/skas/process.c:557:
+	if(proc_mm){
[...]
+	else userspace_pid[0] = mm_idp->u.pid;
[...]

ERROR:SPACING: space required before the open parenthesis '('
#797: FILE: arch/um/os-Linux/skas/process.c:560:
+		if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'switch_mm_skas', this function's name, in a string
#798: FILE: arch/um/os-Linux/skas/process.c:561:
+			panic("switch_mm_skas - PTRACE_SWITCH_MM failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#799: FILE: arch/um/os-Linux/skas/process.c:562:
+			panic("switch_mm_skas - PTRACE_SWITCH_MM failed, "
+			      "errno = %d\n", errno);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#801: FILE: arch/um/os-Linux/skas/process.c:564:
+	else userspace_pid[0] = mm_idp->u.pid;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#801: FILE: arch/um/os-Linux/skas/process.c:564:
+	}
+	else userspace_pid[0] = mm_idp->u.pid;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 83 errors, 48 warnings, 36 checks, 717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
