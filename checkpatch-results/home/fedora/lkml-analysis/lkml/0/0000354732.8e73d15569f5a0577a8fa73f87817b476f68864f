WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -uNrp linux-2.4.21.0/include/asm-i386/smp.h linux-2.4.21-wq.51/include/asm-i386/smp.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#55: FILE: include/asm-i386/smp.h:86:
+#define cpu_online(cpu) (cpu_online_map & (1<<(cpu)))
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: include/linux/workqueue.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#79: FILE: include/linux/workqueue.h:16:
+	void (*func)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#85: FILE: include/linux/workqueue.h:22:
+#define __WORK_INITIALIZER(n, f, d) {				\
+        .entry	= { &(n).entry, &(n).entry },			\
+	.func = (f),						\
+	.data = (d),						\
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: include/linux/workqueue.h:23:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/linux/workqueue.h:23:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#91: FILE: include/linux/workqueue.h:28:
+#define DECLARE_WORK(n, f, d)					\
+	struct work_struct n = __WORK_INITIALIZER(n, f, d)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#97: FILE: include/linux/workqueue.h:34:
+#define PREPARE_WORK(_work, _func, _data)			\
+	do {							\
+		(_work)->func = _func;				\
+		(_work)->data = _data;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#106: FILE: include/linux/workqueue.h:43:
+#define INIT_WORK(_work, _func, _data)				\
+	do {							\
+		INIT_LIST_HEAD(&(_work)->entry);		\
+		(_work)->pending = 0;				\
+		PREPARE_WORK((_work), (_func), (_data));	\
+		init_timer(&(_work)->timer);			\
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/workqueue.h:51:
+extern struct workqueue_struct *create_workqueue(const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/workqueue.h:52:
+extern void destroy_workqueue(struct workqueue_struct *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/workqueue.h:54:
+extern int FASTCALL(queue_work(struct workqueue_struct *wq, struct work_struct *work));

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#118: FILE: include/linux/workqueue.h:55:
+extern int FASTCALL(queue_delayed_work(struct workqueue_struct *wq, struct work_struct *work, unsigned long delay));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/workqueue.h:55:
+extern int FASTCALL(queue_delayed_work(struct workqueue_struct *wq, struct work_struct *work, unsigned long delay));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/workqueue.h:56:
+extern void FASTCALL(flush_workqueue(struct workqueue_struct *wq));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/workqueue.h:58:
+extern int FASTCALL(schedule_work(struct work_struct *work));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/workqueue.h:59:
+extern int FASTCALL(schedule_delayed_work(struct work_struct *work, unsigned long delay));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/workqueue.h:60:
+extern void flush_scheduled_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/workqueue.h:62:
+extern void init_workqueues(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#181: FILE: kernel/workqueue.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#182: FILE: kernel/workqueue.c:2:
+ * linux/kernel/workqueue.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#213: FILE: kernel/workqueue.c:33:
+struct cpu_workqueue_struct {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#214: FILE: kernel/workqueue.c:34:
+	spinlock_t lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: kernel/workqueue.c:69:
+		BUG_ON(!list_empty(&work->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: kernel/workqueue.c:106:
+		BUG_ON(timer_pending(timer));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: kernel/workqueue.c:107:
+		BUG_ON(!list_empty(&work->entry));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#316: FILE: kernel/workqueue.c:136:
+		struct work_struct *work = list_entry(cwq->worklist.next, struct work_struct, entry);

WARNING:SPACING: Unnecessary space before function pointer arguments
#317: FILE: kernel/workqueue.c:137:
+		void (*f) (void *) = work->func;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: kernel/workqueue.c:143:
+		BUG_ON(work->wq_data != cwq);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#339: FILE: kernel/workqueue.c:159:
+typedef struct startup_s {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 61)
#388: FILE: kernel/workqueue.c:208:
+			while (waitpid(-1, NULL, __WALL|WNOHANG) > 0)
+				/* SIGCHLD - auto-reaping */ ;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#388: FILE: kernel/workqueue.c:208:
+			while (waitpid(-1, NULL, __WALL|WNOHANG) > 0)
 			                               ^

WARNING:SPACING: space prohibited before semicolon
#389: FILE: kernel/workqueue.c:209:
+				/* SIGCHLD - auto-reaping */ ;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#418: FILE: kernel/workqueue.c:238:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: kernel/workqueue.c:271:
+	BUG_ON(strlen(name) > 10);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#458: FILE: kernel/workqueue.c:278:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/workqueue.c:294:
+		ret = kernel_thread(worker_thread, &startup,
+						CLONE_FS | CLONE_FILES);

CHECK:BRACES: braces {} should be used on all arms of this statement
#475: FILE: kernel/workqueue.c:295:
+		if (ret < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#477: FILE: kernel/workqueue.c:297:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: kernel/workqueue.c:299:
+			BUG_ON(!cwq->thread);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#499: FILE: kernel/workqueue.c:319:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: kernel/workqueue.c:357:
+	BUG_ON(!keventd_wq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#540: FILE: kernel/workqueue.c:360:
+EXPORT_SYMBOL_GPL(create_workqueue);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#541: FILE: kernel/workqueue.c:361:
+EXPORT_SYMBOL_GPL(queue_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#542: FILE: kernel/workqueue.c:362:
+EXPORT_SYMBOL_GPL(queue_delayed_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#543: FILE: kernel/workqueue.c:363:
+EXPORT_SYMBOL_GPL(flush_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#544: FILE: kernel/workqueue.c:364:
+EXPORT_SYMBOL_GPL(destroy_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#546: FILE: kernel/workqueue.c:366:
+EXPORT_SYMBOL(schedule_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#547: FILE: kernel/workqueue.c:367:
+EXPORT_SYMBOL(schedule_delayed_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#548: FILE: kernel/workqueue.c:368:
+EXPORT_SYMBOL(flush_scheduled_work);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354732.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 30 warnings, 20 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354732.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
