WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
With 2, 4 and 8 tiobench threads, throughput is increased as well, which was

WARNING:BAD_SIGN_OFF: Use a single space after To:
#47: 
to:

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: ''
#47: 
to:

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#81: 
because they were already partially uptodate from an earlier sub-page
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: fs/mpage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#103: FILE: fs/mpage.c:2:
+ * fs/mpage.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#144: FILE: fs/mpage.c:43:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#153: FILE: fs/mpage.c:52:
+		if (uptodate) {
 		    ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: fs/mpage.c:74:
+mpage_alloc(struct block_device *bdev,
+		sector_t first_sector, int nr_vecs, int gfp_flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: fs/mpage.c:125:
+ * ^I12 0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: fs/mpage.c:128:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#238: FILE: fs/mpage.c:137:
+do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: fs/mpage.c:138:
+do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
+			sector_t *last_block_in_bio, get_block_t get_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: fs/mpage.c:141:
+	const unsigned blkbits = inode->i_blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#243: FILE: fs/mpage.c:142:
+	const unsigned blocks_per_page = PAGE_CACHE_SIZE >> blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#244: FILE: fs/mpage.c:143:
+	const unsigned blocksize = 1 << blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: fs/mpage.c:148:
+	unsigned page_block;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#250: FILE: fs/mpage.c:149:
+	unsigned first_hole = blocks_per_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/mpage.c:172:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#278: FILE: fs/mpage.c:177:
+		if (page_block && blocks[page_block-1] != bh.b_blocknr-1)
 		                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#278: FILE: fs/mpage.c:177:
+		if (page_block && blocks[page_block-1] != bh.b_blocknr-1)
 		                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: fs/mpage.c:185:
+		memset(kmap(page) + (first_hole << blkbits), 0,
+				PAGE_CACHE_SIZE - (first_hole << blkbits));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/mpage.c:199:
+	if (bio && (bio->bi_idx == bio->bi_vcnt ||
+			*last_block_in_bio != blocks[0] - 1))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#303: FILE: fs/mpage.c:202:
+	if (bio == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#304: FILE: fs/mpage.c:203:
+		unsigned nr_bvecs = MPAGE_BIO_MAX_SIZE / PAGE_CACHE_SIZE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: fs/mpage.c:208:
+		bio = mpage_alloc(bdev, blocks[0] << (blkbits - 9),
+					nr_bvecs, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#310: FILE: fs/mpage.c:209:
+		if (bio == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'first_hole != blocks_per_page'
#319: FILE: fs/mpage.c:218:
+	if (buffer_boundary(&bh) || (first_hole != blocks_per_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: fs/mpage.c:234:
+mpage_readpages(struct address_space *mapping, struct list_head *pages,
+				unsigned nr_pages, get_block_t get_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#335: FILE: fs/mpage.c:234:
+				unsigned nr_pages, get_block_t get_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#338: FILE: fs/mpage.c:237:
+	unsigned page_idx;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: fs/mpage.c:247:
+			bio = do_mpage_readpage(bio, page,
+					nr_pages - page_idx,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: fs/mpage.c:251:
+	BUG_ON(!list_empty(pages));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/mpage.c:267:
+	bio = do_mpage_readpage(bio, page, 1,
+			&last_block_in_bio, get_block);

CHECK:CAMELCASE: Avoid CamelCase: <Boundary>
#409: FILE: include/linux/buffer_head.h:110:
+BUFFER_FNS(Boundary, boundary)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: fs/ext2/inode.c:178:
+static int ext2_block_to_path(struct inode *inode,
+			long i_block, int offsets[4], int *boundary)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/ext2/inode.c:593:
+ext2_readpages(struct address_space *mapping,
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#510: FILE: fs/ext2/inode.c:593:
+		struct list_head *pages, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: fs/ext2/inode.c:600:
+ext2_prepare_write(struct file *file, struct page *page,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: fs/ext2/inode.c:600:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: fs/ext2/inode.c:600:
+			unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: fs/ext2/inode.c:612:
+ext2_direct_IO(int rw, struct inode *inode, struct kiobuf *iobuf,
+			unsigned long blocknr, int blocksize)

WARNING:INDENTED_LABEL: labels should not be indented
#551: FILE: fs/ext2/inode.c:632:
+	readpage:		ext2_readpage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#552: FILE: fs/ext2/inode.c:633:
+	readpages:		ext2_readpages,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#552: FILE: fs/ext2/inode.c:633:
+	readpages:		ext2_readpages,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#553: FILE: fs/ext2/inode.c:634:
+	writepage:		ext2_writepage,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#553: FILE: fs/ext2/inode.c:634:
+	writepage:		ext2_writepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#554: FILE: fs/ext2/inode.c:635:
+	sync_page:		block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#554: FILE: fs/ext2/inode.c:635:
+	sync_page:		block_sync_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#555: FILE: fs/ext2/inode.c:636:
+	prepare_write:		ext2_prepare_write,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#555: FILE: fs/ext2/inode.c:636:
+	prepare_write:		ext2_prepare_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#556: FILE: fs/ext2/inode.c:637:
+	commit_write:		generic_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#556: FILE: fs/ext2/inode.c:637:
+	commit_write:		generic_commit_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#557: FILE: fs/ext2/inode.c:638:
+	bmap:			ext2_bmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#557: FILE: fs/ext2/inode.c:638:
+	bmap:			ext2_bmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#558: FILE: fs/ext2/inode.c:639:
+	direct_IO:		ext2_direct_IO,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#558: FILE: fs/ext2/inode.c:639:
+	direct_IO:		ext2_direct_IO,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#559: FILE: fs/ext2/inode.c:640:
+	writeback_mapping:	ext2_writeback_mapping,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#559: FILE: fs/ext2/inode.c:640:
+	writeback_mapping:	ext2_writeback_mapping,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#560: FILE: fs/ext2/inode.c:641:
+	vm_writeback:		generic_vm_writeback,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#560: FILE: fs/ext2/inode.c:641:
+	vm_writeback:		generic_vm_writeback,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#576: FILE: include/linux/mpage.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#577: FILE: include/linux/mpage.h:2:
+ * include/linux/mpage.h

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: include/linux/mpage.h:14:
+int mpage_readpages(struct address_space *mapping, struct list_head *pages,
+				unsigned nr_pages, get_block_t get_block);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#589: FILE: include/linux/mpage.h:14:
+				unsigned nr_pages, get_block_t get_block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: include/linux/fs.h:294:
+	int (*readpages)(struct address_space *mapping,
+			struct list_head *pages, unsigned nr_pages);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: include/linux/fs.h:294:
+			struct list_head *pages, unsigned nr_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/readahead.c:36:
+read_pages(struct address_space *mapping,
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#611: FILE: mm/readahead.c:36:
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#613: FILE: mm/readahead.c:38:
+	unsigned page_idx;

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: mm/readahead.c:45:
+		struct page *page = list_entry(pages->prev, struct page, list);
+		list_del(&page->list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#654: FILE: mm/readahead.c:172:
+	BUG_ON(!list_empty(&page_pool));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 39 warnings, 21 checks, 542 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
