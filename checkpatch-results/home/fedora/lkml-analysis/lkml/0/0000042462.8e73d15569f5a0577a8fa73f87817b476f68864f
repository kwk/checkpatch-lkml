WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
3- RelayFS modifications to apply some enhancements (may eventually be merged

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#52: 
--- a/Documentation/ioctl-number.txt

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: include/linux/relay.h:68:
+^Istruct file_operations *fops; ^I/* file operations */$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#93: FILE: include/linux/relay.h:68:
+	struct file_operations *fops; 	/* file operations */

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: include/linux/relay.h:69:
+^Ivoid *client_data; ^I^I/* client data associated with the$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#95: FILE: include/linux/relay.h:70:
+	void *client_data; 		/* client data associated with the
+					   client callbacks */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/linux/relay.h:70:
+					   client callbacks */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#96: FILE: include/linux/relay.h:71:
+	void (*free_client_data_cb)(void*); /* Callback function to free the

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#96: FILE: include/linux/relay.h:71:
+	void (*free_client_data_cb)(void*); /* Callback function to free the

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: include/linux/relay.h:72:
+	void (*free_client_data_cb)(void*); /* Callback function to free the
+					       client data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#97: FILE: include/linux/relay.h:72:
+					       client data */

WARNING:SPACING: Unnecessary space before function pointer arguments
#125: FILE: include/linux/relay.h:116:
+	void (*deliver) (struct rchan_buf *buf,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#126: FILE: include/linux/relay.h:117:
+			 unsigned subbuf_idx,

WARNING:REPEATED_WORD: Possible repeated word: 'channel'
#148: FILE: include/linux/relay.h:183:
+	 * @buf: the channel channel buffer

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/linux/relay.h:190:
+	void (*buf_full)(struct rchan_buf *buf,
+			unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: include/linux/relay.h:190:
+			unsigned subbuf_idx,

WARNING:REPEATED_WORD: Possible repeated word: 'channel'
#160: FILE: include/linux/relay.h:195:
+	 * @buf: the channel channel buffer

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: include/linux/relay.h:202:
+	void (*buf_unfull)(struct rchan_buf *buf,
+			unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: include/linux/relay.h:202:
+			unsigned subbuf_idx,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#181: FILE: include/linux/relay.h:218:
+			 struct file_operations *fops,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#183: FILE: include/linux/relay.h:220:
+			 void (*free_client_data_cb)(void*));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/relay.h:232:
+extern struct dentry *relayfs_create_dir(const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/relay.h:234:
+extern int relayfs_remove_dir(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/relay.h:235:
+extern struct dentry *relayfs_create_file(const char *name,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#197: FILE: include/linux/relay.h:238:
+					  struct file_operations *fops,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/relay.h:240:
+extern int relayfs_remove_file(struct dentry *dentry);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: include/linux/relay.h:242:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#223: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: fs/relayfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#254: FILE: fs/relayfs/inode.c:27:
+static struct vfsmount *		relayfs_mount;

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: fs/relayfs/inode.c:37:
+ ^I^I^I^I       struct file_operations *fops,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: fs/relayfs/inode.c:37:
+ ^I^I^I^I       struct file_operations *fops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: fs/relayfs/inode.c:37:
+ ^I^I^I^I       struct file_operations *fops,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#264: FILE: fs/relayfs/inode.c:37:
+ 				       struct file_operations *fops,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#279: FILE: fs/relayfs/inode.c:52:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#310: FILE: fs/relayfs/inode.c:83:
+ *	Creates a file or directory with the specifed permissions.
   	                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#315: FILE: fs/relayfs/inode.c:88:
+					   struct file_operations *fops,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: fs/relayfs/inode.c:95:
+	BUG_ON(!name || !(S_ISREG(mode) || S_ISDIR(mode)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#326: FILE: fs/relayfs/inode.c:99:
+		printk(KERN_ERR "Couldn't mount relayfs: errcode %d\n", error);

WARNING:TYPO_SPELLING: 'specied' may be misspelled - perhaps 'specified'?
#378: FILE: fs/relayfs/inode.c:151:
+ *	@mode: mode, if not specied the default perms are used
   	                    ^^^^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#389: FILE: fs/relayfs/inode.c:162:
+				   struct file_operations *fops,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: fs/relayfs/inode.c:165:
+	BUG_ON(!fops);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#395: FILE: fs/relayfs/inode.c:168:
+		mode = S_IRUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#412: FILE: fs/relayfs/inode.c:185:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#413: FILE: fs/relayfs/inode.c:186:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
+	return relayfs_create_entry(name, parent, mode, NULL, NULL);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#482: FILE: fs/relayfs/inode.c:255:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#486: FILE: fs/relayfs/inode.c:259:
+static int relay_file_open(struct inode *inode, struct file *filp)
                                                              ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: fs/relayfs/inode.c:263:
+	if(!atomic_dec_and_test(&buf->open_count)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: fs/relayfs/inode.c:267:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#503: FILE: fs/relayfs/inode.c:276:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#508: FILE: fs/relayfs/inode.c:281:
+static int relay_file_mmap(struct file *filp, struct vm_area_struct *vma)
                                         ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: fs/relayfs/inode.c:284:
+	struct rchan_buf *buf = filp->private_data;
+	return relay_mmap_buf(buf, vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#516: FILE: fs/relayfs/inode.c:289:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#519: FILE: fs/relayfs/inode.c:292:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#521: FILE: fs/relayfs/inode.c:294:
+static unsigned int relay_file_poll(struct file *filp, poll_table *wait)
                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#530: FILE: fs/relayfs/inode.c:303:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#538: FILE: fs/relayfs/inode.c:311:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#542: FILE: fs/relayfs/inode.c:315:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#547: FILE: fs/relayfs/inode.c:320:
+static int relay_file_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/relayfs/inode.c:325:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf->offset == subbuf_size'
#577: FILE: fs/relayfs/inode.c:350:
+		if ((read_subbuf == buf->subbufs_produced % n_subbufs) &&
+		    (buf->offset == subbuf_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'produced > n_subbufs'
#599: FILE: fs/relayfs/inode.c:372:
+		if ((produced > n_subbufs) &&
+		    (produced + n_subbufs - consumed <= n_subbufs))

CHECK:BRACES: braces {} should be used on all arms of this statement
#640: FILE: fs/relayfs/inode.c:413:
+	if (read_subbuf == write_subbuf) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#643: FILE: fs/relayfs/inode.c:416:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#700: FILE: fs/relayfs/inode.c:473:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#708: FILE: fs/relayfs/inode.c:481:
+static ssize_t relay_file_read(struct file *filp,
                                             ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#720: FILE: fs/relayfs/inode.c:493:
+	if(!relay_file_read_avail(buf, *ppos))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#729: FILE: fs/relayfs/inode.c:502:
+	ret = count = min(count, avail);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: fs/relayfs/inode.c:514:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#742: FILE: fs/relayfs/inode.c:515:
+struct file_operations relay_file_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: fs/relayfs/inode.c:530:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: fs/relayfs/inode.c:530:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#761: FILE: fs/relayfs/inode.c:534:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#774: FILE: fs/relayfs/inode.c:547:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#782: FILE: fs/relayfs/inode.c:555:
+static struct super_block * relayfs_get_sb(struct file_system_type *fs_type,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#809: FILE: fs/relayfs/inode.c:582:
+EXPORT_SYMBOL_GPL(relay_file_operations);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#810: FILE: fs/relayfs/inode.c:583:
+EXPORT_SYMBOL_GPL(relayfs_create_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#811: FILE: fs/relayfs/inode.c:584:
+EXPORT_SYMBOL_GPL(relayfs_remove_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#812: FILE: fs/relayfs/inode.c:585:
+EXPORT_SYMBOL_GPL(relayfs_create_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#813: FILE: fs/relayfs/inode.c:586:
+EXPORT_SYMBOL_GPL(relayfs_remove_file);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#825: FILE: fs/relayfs/relay.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#845: FILE: fs/relayfs/relay.c:21:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#866: FILE: fs/relayfs/relay.c:42:
+	size_t ready = buf->subbufs_produced - buf->subbufs_consumed;
+	return (ready >= buf->chan->n_subbufs) ? 1 : 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: fs/relayfs/relay.c:57:
+static int subbuf_start_default_callback (struct rchan_buf *buf,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#895: FILE: fs/relayfs/relay.c:71:
+static void deliver_default_callback (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#896: FILE: fs/relayfs/relay.c:72:
+				      unsigned subbuf_idx,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#905: FILE: fs/relayfs/relay.c:81:
+					struct file *filp)
 					             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#913: FILE: fs/relayfs/relay.c:89:
+					  struct file *filp)
 					               ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#942: FILE: fs/relayfs/relay.c:118:
+				      unsigned subbuf_idx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: fs/relayfs/relay.c:127:
+static void buf_unfull_default_callback(struct rchan_buf *buf,
+				      unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#951: FILE: fs/relayfs/relay.c:127:
+				      unsigned subbuf_idx,

WARNING:LINE_SPACING: Missing a blank line after declarations
#979: FILE: fs/relayfs/relay.c:155:
+	struct rchan_buf *buf = private;
+	wake_up_interruptible(&buf->read_wait);

WARNING:LINE_SPACING: Missing a blank line after declarations
#989: FILE: fs/relayfs/relay.c:165:
+	void *next = buf->data + buf->chan->subbuf_size;
+	if (next >= buf->start + buf->chan->subbuf_size * buf->chan->n_subbufs)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1052: FILE: fs/relayfs/relay.c:228:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1076: FILE: fs/relayfs/relay.c:252:
+ ^Ibuf = relay_create_buf(chan);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1076: FILE: fs/relayfs/relay.c:252:
+ ^Ibuf = relay_create_buf(chan);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/relayfs/relay.c:252:
+ ^Ibuf = relay_create_buf(chan);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1077: FILE: fs/relayfs/relay.c:253:
+ ^Iif (!buf)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1077: FILE: fs/relayfs/relay.c:253:
+ ^Iif (!buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: fs/relayfs/relay.c:253:
+ ^Iif (!buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1078: FILE: fs/relayfs/relay.c:254:
+ ^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1078: FILE: fs/relayfs/relay.c:254:
+ ^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: fs/relayfs/relay.c:254:
+ ^I^Ireturn NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1081: FILE: fs/relayfs/relay.c:257:
+ ^Identry = chan->cb->create_buf_file(filename, parent, S_IRUSR,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1081: FILE: fs/relayfs/relay.c:257:
+ ^Identry = chan->cb->create_buf_file(filename, parent, S_IRUSR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: fs/relayfs/relay.c:257:
+ ^Identry = chan->cb->create_buf_file(filename, parent, S_IRUSR,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1081: FILE: fs/relayfs/relay.c:257:
+ 	dentry = chan->cb->create_buf_file(filename, parent, S_IRUSR,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1082: FILE: fs/relayfs/relay.c:258:
+ ^I^I^I^I^I   buf, is_global);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1082: FILE: fs/relayfs/relay.c:258:
+ ^I^I^I^I^I   buf, is_global);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: fs/relayfs/relay.c:258:
+ ^I^I^I^I^I   buf, is_global);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1083: FILE: fs/relayfs/relay.c:259:
+ ^Iif (!dentry) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1083: FILE: fs/relayfs/relay.c:259:
+ ^Iif (!dentry) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: fs/relayfs/relay.c:259:
+ ^Iif (!dentry) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1084: FILE: fs/relayfs/relay.c:260:
+ ^I^Irelay_destroy_buf(buf);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1084: FILE: fs/relayfs/relay.c:260:
+ ^I^Irelay_destroy_buf(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1084: FILE: fs/relayfs/relay.c:260:
+ ^I^Irelay_destroy_buf(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1086: FILE: fs/relayfs/relay.c:262:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1086: FILE: fs/relayfs/relay.c:262:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: fs/relayfs/relay.c:262:
+ ^I}$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1165: FILE: fs/relayfs/relay.c:341:
+			 struct file_operations *fops,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1167: FILE: fs/relayfs/relay.c:343:
+			 void (*free_client_data_cb)(void*))

ERROR:SPACING: space required before the open parenthesis '('
#1197: FILE: fs/relayfs/relay.c:373:
+	if(fops) chan->fops = fops;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1197: FILE: fs/relayfs/relay.c:373:
+	if(fops) chan->fops = fops;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1198: FILE: fs/relayfs/relay.c:374:
+	else chan->fops = &relay_file_operations;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1218: FILE: fs/relayfs/relay.c:394:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1255: FILE: fs/relayfs/relay.c:431:
+		if (waitqueue_active(&buf->read_wait)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1304: FILE: fs/relayfs/relay.c:480:
+	if (cpu >= NR_CPUS || !chan->buf[cpu])

ERROR:SPACING: space required before the open parenthesis '('
#1322: FILE: fs/relayfs/relay.c:498:
+	if(chan->free_client_data_cb)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1341: FILE: fs/relayfs/relay.c:517:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1349: FILE: fs/relayfs/relay.c:525:
+		printk(KERN_WARNING "relayfs: one or more items not logged "

WARNING:SPLIT_STRING: quoted string split across lines
#1350: FILE: fs/relayfs/relay.c:526:
+		printk(KERN_WARNING "relayfs: one or more items not logged "
+		       "[item size (%Zd) > sub-buffer size (%Zd)]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1350: FILE: fs/relayfs/relay.c:526:
+		       "[item size (%Zd) > sub-buffer size (%Zd)]\n",

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1370: FILE: fs/relayfs/relay.c:546:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1378: FILE: fs/relayfs/relay.c:554:
+EXPORT_SYMBOL_GPL(relay_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1379: FILE: fs/relayfs/relay.c:555:
+EXPORT_SYMBOL_GPL(relay_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1380: FILE: fs/relayfs/relay.c:556:
+EXPORT_SYMBOL_GPL(relay_flush);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1381: FILE: fs/relayfs/relay.c:557:
+EXPORT_SYMBOL_GPL(relay_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1382: FILE: fs/relayfs/relay.c:558:
+EXPORT_SYMBOL_GPL(relay_subbufs_consumed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1383: FILE: fs/relayfs/relay.c:559:
+EXPORT_SYMBOL_GPL(relay_switch_subbuf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1384: FILE: fs/relayfs/relay.c:560:
+EXPORT_SYMBOL_GPL(relay_buf_full);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1391: FILE: fs/relayfs/buffers.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1413: FILE: fs/relayfs/buffers.c:23:
+	struct rchan_buf *buf = vma->vm_private_data;
+	buf->chan->cb->buf_unmapped(buf, vma->vm_file);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1446: FILE: fs/relayfs/buffers.c:56:
+static struct vm_operations_struct relay_file_mmap_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1463: FILE: fs/relayfs/buffers.c:73:
+	struct file *filp = vma->vm_file;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1473: FILE: fs/relayfs/buffers.c:83:
+	buf->chan->cb->buf_mapped(buf, filp);
 	                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1527: FILE: fs/relayfs/buffers.c:137:
+	struct rchan_buf *buf = kcalloc(1, sizeof(struct rchan_buf), GFP_KERNEL);
+	if (!buf)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1530: FILE: fs/relayfs/buffers.c:140:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(size_t *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#1571: FILE: fs/relayfs/buffers.c:181:
+ *	Removes the file from the relayfs fileystem, which also frees the
   	                                  ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1578: FILE: fs/relayfs/buffers.c:188:
+	struct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);
+	buf->chan->cb->remove_buf_file(buf->dentry);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1587: FILE: fs/relayfs/buffers.h:1:
+#ifndef _BUFFERS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1590: FILE: fs/relayfs/buffers.h:4:
+extern int relay_mmap_buf(struct rchan_buf *buf, struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1591: FILE: fs/relayfs/buffers.h:5:
+extern struct rchan_buf *relay_create_buf(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1592: FILE: fs/relayfs/buffers.h:6:
+extern void relay_destroy_buf(struct rchan_buf *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1593: FILE: fs/relayfs/buffers.h:7:
+extern void relay_remove_buf(struct kref *kref);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1602: FILE: fs/relayfs/relay.h:1:
+#ifndef _RELAY_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1605: FILE: fs/relayfs/relay.h:4:
+extern int relayfs_remove(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1606: FILE: fs/relayfs/relay.h:5:
+extern int relay_buf_empty(struct rchan_buf *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1607: FILE: fs/relayfs/relay.h:6:
+extern int relay_buf_full(struct rchan_buf *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1608: FILE: fs/relayfs/relay.h:7:
+extern void relay_destroy_channel(struct kref *kref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1609: FILE: fs/relayfs/relay.h:8:
+extern void setup_fileops(struct rchan *chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1610: FILE: fs/relayfs/relay.h:9:
+extern void setup_fileops(struct rchan *chan,
+				   struct file_operations *fops,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1610: FILE: fs/relayfs/relay.h:9:
+				   struct file_operations *fops,

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1632: FILE: block/blktrace.c:333:
+	bt->rchan = relay_open("trace", dir, buts.buf_size, buts.buf_nr, 0, THIS_MODULE, &blk_relay_callbacks, NULL, NULL, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 111 warnings, 27 checks, 1522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
