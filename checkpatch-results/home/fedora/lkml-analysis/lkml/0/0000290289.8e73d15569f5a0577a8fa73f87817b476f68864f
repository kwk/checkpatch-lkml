WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#39: FILE: include/linux/hugetlb.h:27:
+struct page *follow_huge_pmd(struct mm_struct *mm, struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#40: FILE: include/linux/hugetlb.h:28:
+struct page *follow_huge_pmd(struct mm_struct *mm, struct vm_area_struct *,
+				unsigned long address, pmd_t *pmd, int write);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: include/linux/hugetlb.h:31:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#43: FILE: include/linux/hugetlb.h:31:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#43: FILE: include/linux/hugetlb.h:31:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#43: FILE: include/linux/hugetlb.h:31:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#43: FILE: include/linux/hugetlb.h:31:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#44: FILE: include/linux/hugetlb.h:32:
+extern int hugetlb_fault(struct mm_struct *, struct vm_area_struct *,
+				int, unsigned long);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#135: FILE: arch/i386/mm/hugetlbpage.c:344:
+int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma, int write_access, unsigned long address)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: arch/i386/mm/hugetlbpage.c:411:
+	BUG_ON(vma->vm_start & ~HPAGE_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: arch/i386/mm/hugetlbpage.c:412:
+	BUG_ON(vma->vm_end & ~HPAGE_MASK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290289.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 3 checks, 214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290289.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
