WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
(http://www.citi.umich.edu/u/provos/systrace/, http://www.systrace.org/). This

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#132: FILE: drivers/systrace/Kconfig:1:
+config SYSTRACE
+        bool "Systrace support"
+        help
+          This enables systrace support.  See http://www.systrace.org/ for details.
+          
+          Also enable Default Linux Capabilites (CONFIG_SECURITY_CAPABILITIES)!
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/systrace/Kconfig:5:
+          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Capabilites' may be misspelled - perhaps 'Capabilities'?
#137: FILE: drivers/systrace/Kconfig:6:
+          Also enable Default Linux Capabilites (CONFIG_SECURITY_CAPABILITIES)!
                                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: drivers/systrace/linux_sysent.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: drivers/systrace/linux_sysent.c:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#158: FILE: drivers/systrace/linux_sysent.c:16:
+#include <asm/uaccess.h>

CHECK:SPACING: No space is necessary after a cast
#169: FILE: drivers/systrace/linux_sysent.c:27:
+	{ 1, s(struct sys_exit_args) },				/* 1 = exit */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#171: FILE: drivers/systrace/linux_sysent.c:29:
+	{ 3, s(struct sys_read_args) },				/* 3 = read */

CHECK:SPACING: No space is necessary after a cast
#172: FILE: drivers/systrace/linux_sysent.c:30:
+	{ 3, s(struct sys_write_args) },			/* 4 = write */

CHECK:SPACING: No space is necessary after a cast
#173: FILE: drivers/systrace/linux_sysent.c:31:
+	{ 3, s(struct linux_sys_open_args) },			/* 5 = open */

CHECK:SPACING: No space is necessary after a cast
#174: FILE: drivers/systrace/linux_sysent.c:32:
+	{ 1, s(struct sys_close_args) },			/* 6 = close */

CHECK:SPACING: No space is necessary after a cast
#175: FILE: drivers/systrace/linux_sysent.c:33:
+	{ 3, s(struct linux_sys_waitpid_args) },		/* 7 = waitpid */

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#176: FILE: drivers/systrace/linux_sysent.c:34:
+	{ 2, s(struct linux_sys_creat_args) },			/* 8 = creat */
 	                                      			       ^^^^^

CHECK:SPACING: No space is necessary after a cast
#176: FILE: drivers/systrace/linux_sysent.c:34:
+	{ 2, s(struct linux_sys_creat_args) },			/* 8 = creat */

CHECK:SPACING: No space is necessary after a cast
#177: FILE: drivers/systrace/linux_sysent.c:35:
+	{ 2, s(struct sys_link_args) },				/* 9 = link */

CHECK:SPACING: No space is necessary after a cast
#178: FILE: drivers/systrace/linux_sysent.c:36:
+	{ 1, s(struct linux_sys_unlink_args) },			/* 10 = unlink */

CHECK:SPACING: No space is necessary after a cast
#179: FILE: drivers/systrace/linux_sysent.c:37:
+	{ 3, s(struct linux_sys_execve_args) },			/* 11 = execve */

CHECK:SPACING: No space is necessary after a cast
#180: FILE: drivers/systrace/linux_sysent.c:38:
+	{ 1, s(struct linux_sys_chdir_args) },			/* 12 = chdir */

CHECK:SPACING: No space is necessary after a cast
#181: FILE: drivers/systrace/linux_sysent.c:39:
+	{ 1, s(struct linux_sys_time_args) },			/* 13 = time */

CHECK:SPACING: No space is necessary after a cast
#182: FILE: drivers/systrace/linux_sysent.c:40:
+	{ 3, s(struct linux_sys_mknod_args) },			/* 14 = mknod */

CHECK:SPACING: No space is necessary after a cast
#183: FILE: drivers/systrace/linux_sysent.c:41:
+	{ 2, s(struct linux_sys_chmod_args) },			/* 15 = chmod */

CHECK:SPACING: No space is necessary after a cast
#184: FILE: drivers/systrace/linux_sysent.c:42:
+	{ 3, s(struct linux_sys_lchown16_args) },		/* 16 = lchown16 */

CHECK:SPACING: No space is necessary after a cast
#185: FILE: drivers/systrace/linux_sysent.c:43:
+	{ 1, s(struct linux_sys_break_args) },			/* 17 = break */

CHECK:SPACING: No space is necessary after a cast
#187: FILE: drivers/systrace/linux_sysent.c:45:
+	{ 3, s(struct compat_43_sys_lseek_args) },		/* 19 = lseek */

CHECK:SPACING: No space is necessary after a cast
#189: FILE: drivers/systrace/linux_sysent.c:47:
+	{ 5, s(struct linux_sys_mount_args) },			/* 21 = mount */

CHECK:SPACING: No space is necessary after a cast
#190: FILE: drivers/systrace/linux_sysent.c:48:
+	{ 1, s(struct linux_sys_umount_args) },			/* 22 = umount */

CHECK:SPACING: No space is necessary after a cast
#191: FILE: drivers/systrace/linux_sysent.c:49:
+	{ 1, s(struct sys_setuid_args) },			/* 23 = linux_setuid16 */

CHECK:SPACING: No space is necessary after a cast
#193: FILE: drivers/systrace/linux_sysent.c:51:
+	{ 1, s(struct linux_sys_stime_args) },			/* 25 = stime */

CHECK:SPACING: No space is necessary after a cast
#195: FILE: drivers/systrace/linux_sysent.c:53:
+	{ 1, s(struct linux_sys_alarm_args) },			/* 27 = alarm */

CHECK:SPACING: No space is necessary after a cast
#198: FILE: drivers/systrace/linux_sysent.c:56:
+	{ 2, s(struct linux_sys_utime_args) },			/* 30 = utime */

CHECK:SPACING: No space is necessary after a cast
#201: FILE: drivers/systrace/linux_sysent.c:59:
+	{ 2, s(struct linux_sys_access_args) },			/* 33 = access */

CHECK:SPACING: No space is necessary after a cast
#202: FILE: drivers/systrace/linux_sysent.c:60:
+	{ 1, s(struct linux_sys_nice_args) },			/* 34 = nice */

CHECK:SPACING: No space is necessary after a cast
#205: FILE: drivers/systrace/linux_sysent.c:63:
+	{ 2, s(struct linux_sys_kill_args) },			/* 37 = kill */

CHECK:SPACING: No space is necessary after a cast
#206: FILE: drivers/systrace/linux_sysent.c:64:
+	{ 2, s(struct linux_sys_rename_args) },			/* 38 = rename */

CHECK:SPACING: No space is necessary after a cast
#207: FILE: drivers/systrace/linux_sysent.c:65:
+	{ 2, s(struct linux_sys_mkdir_args) },			/* 39 = mkdir */

CHECK:SPACING: No space is necessary after a cast
#208: FILE: drivers/systrace/linux_sysent.c:66:
+	{ 1, s(struct linux_sys_rmdir_args) },			/* 40 = rmdir */

CHECK:SPACING: No space is necessary after a cast
#209: FILE: drivers/systrace/linux_sysent.c:67:
+	{ 1, s(struct sys_dup_args) },				/* 41 = dup */

CHECK:SPACING: No space is necessary after a cast
#210: FILE: drivers/systrace/linux_sysent.c:68:
+	{ 1, s(struct linux_sys_pipe_args) },			/* 42 = pipe */

CHECK:SPACING: No space is necessary after a cast
#211: FILE: drivers/systrace/linux_sysent.c:69:
+	{ 1, s(struct linux_sys_times_args) },			/* 43 = times */

CHECK:SPACING: No space is necessary after a cast
#213: FILE: drivers/systrace/linux_sysent.c:71:
+	{ 1, s(struct linux_sys_brk_args) },			/* 45 = brk */

CHECK:SPACING: No space is necessary after a cast
#214: FILE: drivers/systrace/linux_sysent.c:72:
+	{ 1, s(struct sys_setgid_args) },			/* 46 = linux_setgid16 */

CHECK:SPACING: No space is necessary after a cast
#216: FILE: drivers/systrace/linux_sysent.c:74:
+	{ 2, s(struct linux_sys_signal_args) },			/* 48 = signal */

CHECK:SPACING: No space is necessary after a cast
#219: FILE: drivers/systrace/linux_sysent.c:77:
+	{ 1, s(struct sys_acct_args) },				/* 51 = acct */

CHECK:SPACING: No space is necessary after a cast
#222: FILE: drivers/systrace/linux_sysent.c:80:
+	{ 3, s(struct linux_sys_ioctl_args) },			/* 54 = ioctl */

CHECK:SPACING: No space is necessary after a cast
#223: FILE: drivers/systrace/linux_sysent.c:81:
+	{ 3, s(struct linux_sys_fcntl_args) },			/* 55 = fcntl */

CHECK:SPACING: No space is necessary after a cast
#225: FILE: drivers/systrace/linux_sysent.c:83:
+	{ 2, s(struct sys_setpgid_args) },			/* 57 = setpgid */

CHECK:SPACING: No space is necessary after a cast
#227: FILE: drivers/systrace/linux_sysent.c:85:
+	{ 1, s(struct linux_sys_oldolduname_args) },		/* 59 = oldolduname */

CHECK:SPACING: No space is necessary after a cast
#228: FILE: drivers/systrace/linux_sysent.c:86:
+	{ 1, s(struct sys_umask_args) },			/* 60 = umask */

CHECK:SPACING: No space is necessary after a cast
#229: FILE: drivers/systrace/linux_sysent.c:87:
+	{ 1, s(struct sys_chroot_args) },			/* 61 = chroot */

CHECK:SPACING: No space is necessary after a cast
#231: FILE: drivers/systrace/linux_sysent.c:89:
+	{ 2, s(struct sys_dup2_args) },				/* 63 = dup2 */

CHECK:SPACING: No space is necessary after a cast
#235: FILE: drivers/systrace/linux_sysent.c:93:
+	{ 3, s(struct linux_sys_sigaction_args) },		/* 67 = sigaction */

CHECK:SPACING: No space is necessary after a cast
#237: FILE: drivers/systrace/linux_sysent.c:95:
+	{ 1, s(struct linux_sys_sigsetmask_args) },		/* 69 = sigsetmask */

CHECK:SPACING: No space is necessary after a cast
#238: FILE: drivers/systrace/linux_sysent.c:96:
+	{ 2, s(struct linux_sys_setreuid16_args) },		/* 70 = setreuid16 */

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/systrace/linux_sysent.c:97:
+	{ 2, s(struct linux_sys_setregid16_args) },		/* 71 = setregid16 */

CHECK:SPACING: No space is necessary after a cast
#240: FILE: drivers/systrace/linux_sysent.c:98:
+	{ 3, s(struct linux_sys_sigsuspend_args) },		/* 72 = sigsuspend */

CHECK:SPACING: No space is necessary after a cast
#241: FILE: drivers/systrace/linux_sysent.c:99:
+	{ 1, s(struct linux_sys_sigpending_args) },		/* 73 = sigpending */

CHECK:SPACING: No space is necessary after a cast
#242: FILE: drivers/systrace/linux_sysent.c:100:
+	{ 2, s(struct compat_43_sys_sethostname_args) },	/* 74 = sethostname */

CHECK:SPACING: No space is necessary after a cast
#243: FILE: drivers/systrace/linux_sysent.c:101:
+	{ 2, s(struct linux_sys_setrlimit_args) },		/* 75 = setrlimit */

CHECK:SPACING: No space is necessary after a cast
#244: FILE: drivers/systrace/linux_sysent.c:102:
+	{ 2, s(struct linux_sys_getrlimit_args) },		/* 76 = getrlimit */

CHECK:SPACING: No space is necessary after a cast
#245: FILE: drivers/systrace/linux_sysent.c:103:
+	{ 2, s(struct sys_getrusage_args) },			/* 77 = getrusage */

CHECK:SPACING: No space is necessary after a cast
#246: FILE: drivers/systrace/linux_sysent.c:104:
+	{ 2, s(struct sys_gettimeofday_args) },			/* 78 = gettimeofday */

CHECK:SPACING: No space is necessary after a cast
#247: FILE: drivers/systrace/linux_sysent.c:105:
+	{ 2, s(struct sys_settimeofday_args) },			/* 79 = settimeofday */

CHECK:SPACING: No space is necessary after a cast
#248: FILE: drivers/systrace/linux_sysent.c:106:
+	{ 2, s(struct sys_getgroups_args) },			/* 80 = linux_getgroups */

CHECK:SPACING: No space is necessary after a cast
#249: FILE: drivers/systrace/linux_sysent.c:107:
+	{ 2, s(struct sys_setgroups_args) },			/* 81 = linux_setgroups */

CHECK:SPACING: No space is necessary after a cast
#250: FILE: drivers/systrace/linux_sysent.c:108:
+	{ 1, s(struct linux_sys_oldselect_args) },		/* 82 = oldselect */

CHECK:SPACING: No space is necessary after a cast
#251: FILE: drivers/systrace/linux_sysent.c:109:
+	{ 2, s(struct linux_sys_symlink_args) },		/* 83 = symlink */

CHECK:SPACING: No space is necessary after a cast
#252: FILE: drivers/systrace/linux_sysent.c:110:
+	{ 2, s(struct compat_43_sys_lstat_args) },		/* 84 = olstat */

CHECK:SPACING: No space is necessary after a cast
#253: FILE: drivers/systrace/linux_sysent.c:111:
+	{ 3, s(struct linux_sys_readlink_args) },		/* 85 = readlink */

CHECK:SPACING: No space is necessary after a cast
#254: FILE: drivers/systrace/linux_sysent.c:112:
+	{ 1, s(struct linux_sys_uselib_args) },			/* 86 = uselib */

CHECK:SPACING: No space is necessary after a cast
#255: FILE: drivers/systrace/linux_sysent.c:113:
+	{ 1, s(struct sys_swapon_args) },			/* 87 = swapon */

CHECK:SPACING: No space is necessary after a cast
#256: FILE: drivers/systrace/linux_sysent.c:114:
+	{ 1, s(struct sys_reboot_args) },			/* 88 = reboot */

CHECK:SPACING: No space is necessary after a cast
#257: FILE: drivers/systrace/linux_sysent.c:115:
+	{ 3, s(struct linux_sys_readdir_args) },		/* 89 = readdir */

CHECK:SPACING: No space is necessary after a cast
#258: FILE: drivers/systrace/linux_sysent.c:116:
+	{ 1, s(struct linux_sys_mmap_args) },			/* 90 = mmap */

CHECK:SPACING: No space is necessary after a cast
#259: FILE: drivers/systrace/linux_sysent.c:117:
+	{ 2, s(struct sys_munmap_args) },			/* 91 = munmap */

CHECK:SPACING: No space is necessary after a cast
#260: FILE: drivers/systrace/linux_sysent.c:118:
+	{ 2, s(struct linux_sys_truncate_args) },		/* 92 = truncate */

CHECK:SPACING: No space is necessary after a cast
#261: FILE: drivers/systrace/linux_sysent.c:119:
+	{ 2, s(struct compat_43_sys_ftruncate_args) },		/* 93 = ftruncate */

CHECK:SPACING: No space is necessary after a cast
#262: FILE: drivers/systrace/linux_sysent.c:120:
+	{ 2, s(struct sys_fchmod_args) },			/* 94 = fchmod */

CHECK:SPACING: No space is necessary after a cast
#263: FILE: drivers/systrace/linux_sysent.c:121:
+	{ 3, s(struct linux_sys_fchown16_args) },		/* 95 = fchown16 */

CHECK:SPACING: No space is necessary after a cast
#264: FILE: drivers/systrace/linux_sysent.c:122:
+	{ 2, s(struct sys_getpriority_args) },			/* 96 = getpriority */

CHECK:SPACING: No space is necessary after a cast
#265: FILE: drivers/systrace/linux_sysent.c:123:
+	{ 3, s(struct sys_setpriority_args) },			/* 97 = setpriority */

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/systrace/linux_sysent.c:124:
+	{ 4, s(struct sys_profil_args) },			/* 98 = profil */

CHECK:SPACING: No space is necessary after a cast
#267: FILE: drivers/systrace/linux_sysent.c:125:
+	{ 2, s(struct linux_sys_statfs_args) },			/* 99 = statfs */

CHECK:SPACING: No space is necessary after a cast
#268: FILE: drivers/systrace/linux_sysent.c:126:
+	{ 2, s(struct linux_sys_fstatfs_args) },		/* 100 = fstatfs */

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#269: FILE: drivers/systrace/linux_sysent.c:127:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: No space is necessary after a cast
#270: FILE: drivers/systrace/linux_sysent.c:128:
+	{ 3, s(struct linux_sys_ioperm_args) },			/* 101 = ioperm */

CHECK:SPACING: No space is necessary after a cast
#274: FILE: drivers/systrace/linux_sysent.c:132:
+	{ 2, s(struct linux_sys_socketcall_args) },		/* 102 = socketcall */

CHECK:SPACING: No space is necessary after a cast
#276: FILE: drivers/systrace/linux_sysent.c:134:
+	{ 3, s(struct sys_setitimer_args) },			/* 104 = setitimer */

CHECK:SPACING: No space is necessary after a cast
#277: FILE: drivers/systrace/linux_sysent.c:135:
+	{ 2, s(struct sys_getitimer_args) },			/* 105 = getitimer */

CHECK:SPACING: No space is necessary after a cast
#278: FILE: drivers/systrace/linux_sysent.c:136:
+	{ 2, s(struct linux_sys_stat_args) },			/* 106 = stat */

CHECK:SPACING: No space is necessary after a cast
#279: FILE: drivers/systrace/linux_sysent.c:137:
+	{ 2, s(struct linux_sys_lstat_args) },			/* 107 = lstat */

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/systrace/linux_sysent.c:138:
+	{ 2, s(struct linux_sys_fstat_args) },			/* 108 = fstat */

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/systrace/linux_sysent.c:139:
+	{ 1, s(struct linux_sys_olduname_args) },		/* 109 = olduname */

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#282: FILE: drivers/systrace/linux_sysent.c:140:
+#ifdef __i386__

CHECK:SPACING: No space is necessary after a cast
#283: FILE: drivers/systrace/linux_sysent.c:141:
+	{ 1, s(struct linux_sys_iopl_args) },			/* 110 = iopl */

CHECK:SPACING: No space is necessary after a cast
#290: FILE: drivers/systrace/linux_sysent.c:148:
+	{ 4, s(struct linux_sys_wait4_args) },			/* 114 = wait4 */

CHECK:SPACING: No space is necessary after a cast
#293: FILE: drivers/systrace/linux_sysent.c:151:
+	{ 5, s(struct linux_sys_ipc_args) },			/* 117 = ipc */

CHECK:SPACING: No space is necessary after a cast
#294: FILE: drivers/systrace/linux_sysent.c:152:
+	{ 1, s(struct sys_fsync_args) },			/* 118 = fsync */

CHECK:SPACING: No space is necessary after a cast
#295: FILE: drivers/systrace/linux_sysent.c:153:
+	{ 1, s(struct linux_sys_sigreturn_args) },		/* 119 = sigreturn */

CHECK:SPACING: No space is necessary after a cast
#296: FILE: drivers/systrace/linux_sysent.c:154:
+	{ 2, s(struct linux_sys_clone_args) },			/* 120 = clone */

CHECK:SPACING: No space is necessary after a cast
#297: FILE: drivers/systrace/linux_sysent.c:155:
+	{ 2, s(struct compat_09_sys_setdomainname_args) },	/* 121 = setdomainname */

CHECK:SPACING: No space is necessary after a cast
#298: FILE: drivers/systrace/linux_sysent.c:156:
+	{ 1, s(struct linux_sys_uname_args) },			/* 122 = uname */

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#299: FILE: drivers/systrace/linux_sysent.c:157:
+#ifdef __i386__

CHECK:SPACING: No space is necessary after a cast
#300: FILE: drivers/systrace/linux_sysent.c:158:
+	{ 3, s(struct linux_sys_modify_ldt_args) },		/* 123 = modify_ldt */

CHECK:SPACING: No space is necessary after a cast
#305: FILE: drivers/systrace/linux_sysent.c:163:
+	{ 3, s(struct sys_mprotect_args) },			/* 125 = mprotect */

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/systrace/linux_sysent.c:164:
+	{ 3, s(struct linux_sys_sigprocmask_args) },		/* 126 = sigprocmask */

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/systrace/linux_sysent.c:170:
+	{ 1, s(struct linux_sys_getpgid_args) },		/* 132 = getpgid */

CHECK:SPACING: No space is necessary after a cast
#313: FILE: drivers/systrace/linux_sysent.c:171:
+	{ 1, s(struct sys_fchdir_args) },			/* 133 = fchdir */

CHECK:SPACING: No space is necessary after a cast
#316: FILE: drivers/systrace/linux_sysent.c:174:
+	{ 1, s(struct linux_sys_personality_args) },		/* 136 = personality */

CHECK:SPACING: No space is necessary after a cast
#318: FILE: drivers/systrace/linux_sysent.c:176:
+	{ 1, s(struct linux_sys_setfsuid_args) },		/* 138 = linux_setfsuid16 */

CHECK:SPACING: No space is necessary after a cast
#320: FILE: drivers/systrace/linux_sysent.c:178:
+	{ 5, s(struct linux_sys_llseek_args) },			/* 140 = llseek */

CHECK:SPACING: No space is necessary after a cast
#321: FILE: drivers/systrace/linux_sysent.c:179:
+	{ 3, s(struct linux_sys_getdents_args) },		/* 141 = getdents */

CHECK:SPACING: No space is necessary after a cast
#322: FILE: drivers/systrace/linux_sysent.c:180:
+	{ 5, s(struct linux_sys_select_args) },			/* 142 = select */

CHECK:SPACING: No space is necessary after a cast
#323: FILE: drivers/systrace/linux_sysent.c:181:
+	{ 2, s(struct sys_flock_args) },			/* 143 = flock */

CHECK:SPACING: No space is necessary after a cast
#324: FILE: drivers/systrace/linux_sysent.c:182:
+	{ 3, s(struct sys_msync_args) },			/* 144 = msync */

CHECK:SPACING: No space is necessary after a cast
#325: FILE: drivers/systrace/linux_sysent.c:183:
+	{ 3, s(struct sys_readv_args) },			/* 145 = readv */

CHECK:SPACING: No space is necessary after a cast
#326: FILE: drivers/systrace/linux_sysent.c:184:
+	{ 3, s(struct sys_writev_args) },			/* 146 = writev */

CHECK:SPACING: No space is necessary after a cast
#327: FILE: drivers/systrace/linux_sysent.c:185:
+	{ 1, s(struct linux_sys_getsid_args) },			/* 147 = getsid */

CHECK:SPACING: No space is necessary after a cast
#328: FILE: drivers/systrace/linux_sysent.c:186:
+	{ 1, s(struct linux_sys_fdatasync_args) },		/* 148 = fdatasync */

CHECK:SPACING: No space is necessary after a cast
#329: FILE: drivers/systrace/linux_sysent.c:187:
+	{ 1, s(struct linux_sys___sysctl_args) },		/* 149 = __sysctl */

CHECK:SPACING: No space is necessary after a cast
#330: FILE: drivers/systrace/linux_sysent.c:188:
+	{ 2, s(struct sys_mlock_args) },			/* 150 = mlock */

CHECK:SPACING: No space is necessary after a cast
#331: FILE: drivers/systrace/linux_sysent.c:189:
+	{ 2, s(struct sys_munlock_args) },			/* 151 = munlock */

CHECK:SPACING: No space is necessary after a cast
#334: FILE: drivers/systrace/linux_sysent.c:192:
+	{ 2, s(struct linux_sys_sched_setparam_args) },		/* 154 = sched_setparam */

CHECK:SPACING: No space is necessary after a cast
#335: FILE: drivers/systrace/linux_sysent.c:193:
+	{ 2, s(struct linux_sys_sched_getparam_args) },		/* 155 = sched_getparam */

CHECK:SPACING: No space is necessary after a cast
#336: FILE: drivers/systrace/linux_sysent.c:194:
+	{ 3, s(struct linux_sys_sched_setscheduler_args) },	/* 156 = sched_setscheduler */

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/systrace/linux_sysent.c:195:
+	{ 1, s(struct linux_sys_sched_getscheduler_args) },	/* 157 = sched_getscheduler */

CHECK:SPACING: No space is necessary after a cast
#339: FILE: drivers/systrace/linux_sysent.c:197:
+	{ 1, s(struct linux_sys_sched_get_priority_max_args) },	/* 159 = sched_get_priority_max */

CHECK:SPACING: No space is necessary after a cast
#340: FILE: drivers/systrace/linux_sysent.c:198:
+	{ 1, s(struct linux_sys_sched_get_priority_min_args) },	/* 160 = sched_get_priority_min */

CHECK:SPACING: No space is necessary after a cast
#342: FILE: drivers/systrace/linux_sysent.c:200:
+	{ 2, s(struct sys_nanosleep_args) },			/* 162 = nanosleep */

CHECK:SPACING: No space is necessary after a cast
#343: FILE: drivers/systrace/linux_sysent.c:201:
+	{ 4, s(struct linux_sys_mremap_args) },			/* 163 = mremap */

CHECK:SPACING: No space is necessary after a cast
#344: FILE: drivers/systrace/linux_sysent.c:202:
+	{ 3, s(struct linux_sys_setresuid16_args) },		/* 164 = setresuid16 */

CHECK:SPACING: No space is necessary after a cast
#345: FILE: drivers/systrace/linux_sysent.c:203:
+	{ 3, s(struct linux_sys_getresuid_args) },		/* 165 = linux_getresuid16 */

CHECK:SPACING: No space is necessary after a cast
#348: FILE: drivers/systrace/linux_sysent.c:206:
+	{ 3, s(struct sys_poll_args) },				/* 168 = poll */

CHECK:SPACING: No space is necessary after a cast
#350: FILE: drivers/systrace/linux_sysent.c:208:
+	{ 3, s(struct linux_sys_setresgid16_args) },		/* 170 = setresgid16 */

CHECK:SPACING: No space is necessary after a cast
#351: FILE: drivers/systrace/linux_sysent.c:209:
+	{ 3, s(struct linux_sys_getresgid16_args) },		/* 171 = getresgid16 */

CHECK:SPACING: No space is necessary after a cast
#353: FILE: drivers/systrace/linux_sysent.c:211:
+	{ 1, s(struct linux_sys_rt_sigreturn_args) },	/* 173 = rt_sigreturn */

CHECK:SPACING: No space is necessary after a cast
#354: FILE: drivers/systrace/linux_sysent.c:212:
+	{ 4, s(struct linux_sys_rt_sigaction_args) },	/* 174 = rt_sigaction */

CHECK:SPACING: No space is necessary after a cast
#355: FILE: drivers/systrace/linux_sysent.c:213:
+	{ 4, s(struct linux_sys_rt_sigprocmask_args) },	/* 175 = rt_sigprocmask */

CHECK:SPACING: No space is necessary after a cast
#356: FILE: drivers/systrace/linux_sysent.c:214:
+	{ 2, s(struct linux_sys_rt_sigpending_args) },	/* 176 = rt_sigpending */

CHECK:SPACING: No space is necessary after a cast
#359: FILE: drivers/systrace/linux_sysent.c:217:
+	{ 2, s(struct linux_sys_rt_sigsuspend_args) },	/* 179 = rt_sigsuspend */

CHECK:SPACING: No space is necessary after a cast
#360: FILE: drivers/systrace/linux_sysent.c:218:
+	{ 4, s(struct linux_sys_pread_args) },		/* 180 = pread */

CHECK:SPACING: No space is necessary after a cast
#361: FILE: drivers/systrace/linux_sysent.c:219:
+	{ 4, s(struct linux_sys_pwrite_args) },		/* 181 = pwrite */

CHECK:SPACING: No space is necessary after a cast
#362: FILE: drivers/systrace/linux_sysent.c:220:
+	{ 3, s(struct linux_sys_chown16_args) },	/* 182 = chown16 */

CHECK:SPACING: No space is necessary after a cast
#363: FILE: drivers/systrace/linux_sysent.c:221:
+	{ 2, s(struct linux_sys_getcwd_args) },		/* 183 = getcwd */

CHECK:SPACING: No space is necessary after a cast
#366: FILE: drivers/systrace/linux_sysent.c:224:
+	{ 2, s(struct linux_sys_sigaltstack_args) },	/* 186 = sigaltstack */

CHECK:SPACING: No space is necessary after a cast
#371: FILE: drivers/systrace/linux_sysent.c:229:
+	{ 2, s(struct linux_sys_ugetrlimit_args) },	/* 191 = ugetrlimit */

CHECK:SPACING: No space is necessary after a cast
#373: FILE: drivers/systrace/linux_sysent.c:231:
+	{ 2, s(struct linux_sys_truncate64_args) },	/* 193 = truncate64 */

CHECK:SPACING: No space is necessary after a cast
#374: FILE: drivers/systrace/linux_sysent.c:232:
+	{ 2, s(struct sys_ftruncate_args) },		/* 194 = linux_ftruncate64 */

CHECK:SPACING: No space is necessary after a cast
#375: FILE: drivers/systrace/linux_sysent.c:233:
+	{ 2, s(struct linux_sys_stat64_args) },		/* 195 = stat64 */

CHECK:SPACING: No space is necessary after a cast
#376: FILE: drivers/systrace/linux_sysent.c:234:
+	{ 2, s(struct linux_sys_lstat64_args) },	/* 196 = lstat64 */

CHECK:SPACING: No space is necessary after a cast
#377: FILE: drivers/systrace/linux_sysent.c:235:
+	{ 2, s(struct linux_sys_fstat64_args) },	/* 197 = fstat64 */

CHECK:SPACING: No space is necessary after a cast
#385: FILE: drivers/systrace/linux_sysent.c:243:
+	{ 2, s(struct sys_getgroups_args) },		/* 205 = getgroups */

CHECK:SPACING: No space is necessary after a cast
#386: FILE: drivers/systrace/linux_sysent.c:244:
+	{ 2, s(struct sys_setgroups_args) },		/* 206 = setgroups */

CHECK:SPACING: No space is necessary after a cast
#389: FILE: drivers/systrace/linux_sysent.c:247:
+	{ 3, s(struct linux_sys_getresuid_args) },	/* 209 = getresuid */

CHECK:SPACING: No space is necessary after a cast
#393: FILE: drivers/systrace/linux_sysent.c:251:
+	{ 1, s(struct sys_setuid_args) },	/* 213 = setuid */

CHECK:SPACING: No space is necessary after a cast
#394: FILE: drivers/systrace/linux_sysent.c:252:
+	{ 1, s(struct sys_setgid_args) },	/* 214 = setgid */

CHECK:SPACING: No space is necessary after a cast
#395: FILE: drivers/systrace/linux_sysent.c:253:
+	{ 1, s(struct linux_sys_setfsuid_args) },		/* 215 = setfsuid */

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/systrace/linux_sysent.c:259:
+	{ 3, s(struct linux_sys_fcntl64_args) },		/* 221 = fcntl64 */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: drivers/systrace/linux_sysent.c:261:
+^I{ 0, 0 },^I^I/* 222 */  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#448: FILE: drivers/systrace/policy.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#489: FILE: drivers/systrace/policy.c:42:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: drivers/systrace/policy.c:45:
+#include <linux/queue.h>^I$

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: drivers/systrace/policy.c:58:
+	switch(pol->strp_op) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strpol"
#512: FILE: drivers/systrace/policy.c:65:
+		if (strpol == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/systrace/policy.c:71:
+		DPRINTF(("%s: %d -> pid %d\n", __func__,
+			    pol->strp_num, pol->strp_pid));

WARNING:TABSTOP: Statements should start on a tabstop
#522: FILE: drivers/systrace/policy.c:75:
+		    if (strpol->nr == pol->strp_num)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 28)
#522: FILE: drivers/systrace/policy.c:75:
+		    if (strpol->nr == pol->strp_num)
+			    break;

WARNING:TABSTOP: Statements should start on a tabstop
#523: FILE: drivers/systrace/policy.c:76:
+			    break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strpol"
#524: FILE: drivers/systrace/policy.c:77:
+		if (strpol == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strp"
#528: FILE: drivers/systrace/policy.c:81:
+		if (strp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->policy"
#531: FILE: drivers/systrace/policy.c:84:
+		if (strp->policy != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/systrace/policy.c:91:
+		DPRINTF(("%s: %d: code %d -> policy %d\n", __func__,
+			    pol->strp_num, pol->strp_code, pol->strp_policy));

WARNING:TABSTOP: Statements should start on a tabstop
#543: FILE: drivers/systrace/policy.c:96:
+		    if (strpol->nr == pol->strp_num)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 28)
#543: FILE: drivers/systrace/policy.c:96:
+		    if (strpol->nr == pol->strp_num)
+			    break;

WARNING:TABSTOP: Statements should start on a tabstop
#544: FILE: drivers/systrace/policy.c:97:
+			    break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strpol"
#545: FILE: drivers/systrace/policy.c:98:
+		if (strpol == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: drivers/systrace/policy.c:120:
+	if ((pol = kmalloc(sizeof(*pol), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/systrace/policy.c:124:
+	DPRINTF(("%s: allocating %d -> %lu\n", __func__,
+		    maxents, (u_long)maxents * sizeof(int)));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#575: FILE: drivers/systrace/policy.c:128:
+	if ((pol->sysent = kmalloc(maxents * sizeof(short), GFP_KERNEL)) == NULL) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#577: FILE: drivers/systrace/policy.c:130:
+		return (NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#589: FILE: drivers/systrace/policy.c:142:
+	return (pol);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#611: FILE: drivers/systrace/systrace.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#660: FILE: drivers/systrace/systrace.c:50:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: drivers/systrace/systrace.c:54:
+#include <linux/queue.h>^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'argsize' - possible side-effects?
#670: FILE: drivers/systrace/systrace.c:60:
+#define FIXARGS(argsize, args, regs) do {   \
+	switch (argsize) {                  \
+	case 20:                            \
+		args[4] = regs->edi;        \
+	case 16:                            \
+		args[3] = regs->esi;        \
+	case 12:                            \
+		args[2] = regs->edx;        \
+	case 8:                             \
+		args[1] = regs->ecx;        \
+	case 4:                             \
+		args[0] = regs->ebx;        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: (FIXARGS) Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'args' - possible side-effects?
#670: FILE: drivers/systrace/systrace.c:60:
+#define FIXARGS(argsize, args, regs) do {   \
+	switch (argsize) {                  \
+	case 20:                            \
+		args[4] = regs->edi;        \
+	case 16:                            \
+		args[3] = regs->esi;        \
+	case 12:                            \
+		args[2] = regs->edx;        \
+	case 8:                             \
+		args[1] = regs->ecx;        \
+	case 4:                             \
+		args[0] = regs->ebx;        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: (FIXARGS) Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#670: FILE: drivers/systrace/systrace.c:60:
+#define FIXARGS(argsize, args, regs) do {   \
+	switch (argsize) {                  \
+	case 20:                            \
+		args[4] = regs->edi;        \
+	case 16:                            \
+		args[3] = regs->esi;        \
+	case 12:                            \
+		args[2] = regs->edx;        \
+	case 8:                             \
+		args[1] = regs->ecx;        \
+	case 4:                             \
+		args[0] = regs->ebx;        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: (FIXARGS) Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#670: FILE: drivers/systrace/systrace.c:60:
+#define FIXARGS(argsize, args, regs) do {   \
+	switch (argsize) {                  \
+	case 20:                            \
+		args[4] = regs->edi;        \
+	case 16:                            \
+		args[3] = regs->esi;        \
+	case 12:                            \
+		args[2] = regs->edx;        \
+	case 8:                             \
+		args[1] = regs->ecx;        \
+	case 4:                             \
+		args[0] = regs->ebx;        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: (FIXARGS) Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#685: FILE: drivers/systrace/systrace.c:75:
+		printk(KERN_ERR "systrace: (FIXARGS) Illegal argument size %d\n", argsize);\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#686: FILE: drivers/systrace/systrace.c:76:
+		BUG();                      \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'argsize' - possible side-effects?
#690: FILE: drivers/systrace/systrace.c:80:
+#define SAVEARGS(argsize, args, regs) do {  \
+	switch (argsize) {                  \
+	case 20:                            \
+		regs->edi = args[4];        \
+	case 16:                            \
+		regs->esi = args[3];        \
+	case 12:                            \
+		regs->edx = args[2];        \
+	case 8:                             \
+		regs->ecx = args[1];        \
+	case 4:                             \
+		regs->ebx = args[0];        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'args' - possible side-effects?
#690: FILE: drivers/systrace/systrace.c:80:
+#define SAVEARGS(argsize, args, regs) do {  \
+	switch (argsize) {                  \
+	case 20:                            \
+		regs->edi = args[4];        \
+	case 16:                            \
+		regs->esi = args[3];        \
+	case 12:                            \
+		regs->edx = args[2];        \
+	case 8:                             \
+		regs->ecx = args[1];        \
+	case 4:                             \
+		regs->ebx = args[0];        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#690: FILE: drivers/systrace/systrace.c:80:
+#define SAVEARGS(argsize, args, regs) do {  \
+	switch (argsize) {                  \
+	case 20:                            \
+		regs->edi = args[4];        \
+	case 16:                            \
+		regs->esi = args[3];        \
+	case 12:                            \
+		regs->edx = args[2];        \
+	case 8:                             \
+		regs->ecx = args[1];        \
+	case 4:                             \
+		regs->ebx = args[0];        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#690: FILE: drivers/systrace/systrace.c:80:
+#define SAVEARGS(argsize, args, regs) do {  \
+	switch (argsize) {                  \
+	case 20:                            \
+		regs->edi = args[4];        \
+	case 16:                            \
+		regs->esi = args[3];        \
+	case 12:                            \
+		regs->edx = args[2];        \
+	case 8:                             \
+		regs->ecx = args[1];        \
+	case 4:                             \
+		regs->ebx = args[0];        \
+	case 0:                             \
+		break;                      \
+	default:                            \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                      \
+	}                                   \
+} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#705: FILE: drivers/systrace/systrace.c:95:
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#706: FILE: drivers/systrace/systrace.c:96:
+		BUG();                      \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'argsize' - possible side-effects?
#710: FILE: drivers/systrace/systrace.c:100:
+#define PRINTARGS(argsize, regs) do {                \
+	switch (argsize) {                           \
+	case 20:                                     \
+		printk("    edi: %lx\n", regs->edi); \
+	case 16:                                     \
+		printk("    esi: %lx\n", regs->esi); \
+	case 12:                                     \
+		printk("    edx: %lx\n", regs->edx); \
+	case 8:                                      \
+		printk("    ecx: %lx\n", regs->ecx); \
+	case 4:                                      \
+		printk("    ebx: %lx\n", regs->ebx); \
+	case 0:                                      \
+		break;                               \
+	default:                                     \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                               \
+	}                                            \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#710: FILE: drivers/systrace/systrace.c:100:
+#define PRINTARGS(argsize, regs) do {                \
+	switch (argsize) {                           \
+	case 20:                                     \
+		printk("    edi: %lx\n", regs->edi); \
+	case 16:                                     \
+		printk("    esi: %lx\n", regs->esi); \
+	case 12:                                     \
+		printk("    edx: %lx\n", regs->edx); \
+	case 8:                                      \
+		printk("    ecx: %lx\n", regs->ecx); \
+	case 4:                                      \
+		printk("    ebx: %lx\n", regs->ebx); \
+	case 0:                                      \
+		break;                               \
+	default:                                     \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                               \
+	}                                            \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#710: FILE: drivers/systrace/systrace.c:100:
+#define PRINTARGS(argsize, regs) do {                \
+	switch (argsize) {                           \
+	case 20:                                     \
+		printk("    edi: %lx\n", regs->edi); \
+	case 16:                                     \
+		printk("    esi: %lx\n", regs->esi); \
+	case 12:                                     \
+		printk("    edx: %lx\n", regs->edx); \
+	case 8:                                      \
+		printk("    ecx: %lx\n", regs->ecx); \
+	case 4:                                      \
+		printk("    ebx: %lx\n", regs->ebx); \
+	case 0:                                      \
+		break;                               \
+	default:                                     \
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\
+		BUG();                               \
+	}                                            \
+} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: drivers/systrace/systrace.c:103:
+		printk("    edi: %lx\n", regs->edi); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: drivers/systrace/systrace.c:105:
+		printk("    esi: %lx\n", regs->esi); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#717: FILE: drivers/systrace/systrace.c:107:
+		printk("    edx: %lx\n", regs->edx); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#719: FILE: drivers/systrace/systrace.c:109:
+		printk("    ecx: %lx\n", regs->ecx); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: drivers/systrace/systrace.c:111:
+		printk("    ebx: %lx\n", regs->ebx); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#725: FILE: drivers/systrace/systrace.c:115:
+		printk(KERN_ERR "systrace: Illegal argument size %d\n", argsize);\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#726: FILE: drivers/systrace/systrace.c:116:
+		BUG();                               \

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#733: FILE: drivers/systrace/systrace.c:123:
+int systrace_debug = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#735: FILE: drivers/systrace/systrace.c:125:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#741: FILE: drivers/systrace/systrace.c:131:
+int  FASTCALL(systrace_intercept(struct pt_regs *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#741: FILE: drivers/systrace/systrace.c:131:
+int  FASTCALL(systrace_intercept(struct pt_regs *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#742: FILE: drivers/systrace/systrace.c:132:
+void FASTCALL(systrace_result(struct pt_regs *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#742: FILE: drivers/systrace/systrace.c:132:
+void FASTCALL(systrace_result(struct pt_regs *));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#744: FILE: drivers/systrace/systrace.c:134:
+static struct file_operations systrace_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#745: FILE: drivers/systrace/systrace.c:135:
+	read:    &systracef_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#746: FILE: drivers/systrace/systrace.c:136:
+	write:   &systracef_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#746: FILE: drivers/systrace/systrace.c:136:
+	write:   &systracef_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#747: FILE: drivers/systrace/systrace.c:137:
+	ioctl:   &systracef_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#747: FILE: drivers/systrace/systrace.c:137:
+	ioctl:   &systracef_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#748: FILE: drivers/systrace/systrace.c:138:
+	release: &systracef_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#748: FILE: drivers/systrace/systrace.c:138:
+	release: &systracef_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#749: FILE: drivers/systrace/systrace.c:139:
+	open:    &systracef_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#749: FILE: drivers/systrace/systrace.c:139:
+	open:    &systracef_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#750: FILE: drivers/systrace/systrace.c:140:
+	poll:    &systracef_poll
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#750: FILE: drivers/systrace/systrace.c:140:
+	poll:    &systracef_poll

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#775: FILE: drivers/systrace/systrace.c:165:
+		printk(KERN_INFO "systrace: unable to register device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#779: FILE: drivers/systrace/systrace.c:169:
+	printk(KERN_INFO "systrace: systrace initialized\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#781: FILE: drivers/systrace/systrace.c:171:
+	return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#791: FILE: drivers/systrace/systrace.c:181:
+	if ((fst = kmalloc(sizeof(*fst), GFP_KERNEL)) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#792: FILE: drivers/systrace/systrace.c:182:
+		printk(KERN_ERR "systrace: Failed to allocate kernel memory.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: drivers/systrace/systrace.c:209:
+systracef_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+    unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: drivers/systrace/systrace.c:209:
+    unsigned long arg)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fst"
#827: FILE: drivers/systrace/systrace.c:217:
+	if (fst == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#828: FILE: drivers/systrace/systrace.c:218:
+		printk(KERN_ERR "systrace: in impossible state!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#829: FILE: drivers/systrace/systrace.c:219:
+		BUG();

WARNING:TYPO_SPELLING: 'santizing' may be misspelled - perhaps 'sanitizing'?
#832: FILE: drivers/systrace/systrace.c:222:
+	/* Argument santizing */
 	            ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!arg"
#841: FILE: drivers/systrace/systrace.c:231:
+		if ((void *)arg == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#854: FILE: drivers/systrace/systrace.c:244:
+		if ((data = kmalloc(sizeof(struct systrace_answer),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct systrace_answer)...)
#854: FILE: drivers/systrace/systrace.c:244:
+		if ((data = kmalloc(sizeof(struct systrace_answer),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: drivers/systrace/systrace.c:245:
+		if ((data = kmalloc(sizeof(struct systrace_answer),
+			 GFP_KERNEL)) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: drivers/systrace/systrace.c:250:
+		if (copy_from_user((struct systrace_answer *)data,
+			(struct systrace_answer *)arg,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#870: FILE: drivers/systrace/systrace.c:260:
+		if ((data = kmalloc(sizeof(struct systrace_io),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct systrace_io)...)
#870: FILE: drivers/systrace/systrace.c:260:
+		if ((data = kmalloc(sizeof(struct systrace_io),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#871: FILE: drivers/systrace/systrace.c:261:
+^I^I^I GFP_KERNEL)) == NULL) { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: drivers/systrace/systrace.c:261:
+		if ((data = kmalloc(sizeof(struct systrace_io),
+			 GFP_KERNEL)) == NULL) { 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/systrace/systrace.c:266:
+		if (copy_from_user((struct systrace_io *)data,
+			(struct systrace_io *)arg,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#897: FILE: drivers/systrace/systrace.c:287:
+		if ((data = kmalloc(sizeof(struct systrace_policy),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct systrace_policy)...)
#897: FILE: drivers/systrace/systrace.c:287:
+		if ((data = kmalloc(sizeof(struct systrace_policy),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: drivers/systrace/systrace.c:288:
+		if ((data = kmalloc(sizeof(struct systrace_policy),
+			 GFP_KERNEL)) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: drivers/systrace/systrace.c:293:
+		if (copy_from_user((struct systrace_policy *)data,
+			(struct systrace_policy *)arg,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#911: FILE: drivers/systrace/systrace.c:301:
+		if ((data = kmalloc(sizeof(struct systrace_replace),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct systrace_replace)...)
#911: FILE: drivers/systrace/systrace.c:301:
+		if ((data = kmalloc(sizeof(struct systrace_replace),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: drivers/systrace/systrace.c:302:
+		if ((data = kmalloc(sizeof(struct systrace_replace),
+			 GFP_KERNEL)) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: drivers/systrace/systrace.c:307:
+		if (copy_from_user((struct systrace_replace *)data,
+			(struct systrace_replace *)arg,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#938: FILE: drivers/systrace/systrace.c:328:
+		if ((strp = systrace_findpid(fst, pid)) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: drivers/systrace/systrace.c:361:
+		if (copy_to_user((struct systrace_policy *)arg,
+			(struct systrace_policy *)data,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#983: FILE: drivers/systrace/systrace.c:373:
+	if (data != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "TAILQ_FIRST"
#1004: FILE: drivers/systrace/systrace.c:394:
+	if (TAILQ_FIRST(&fst->messages) != NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1009: FILE: drivers/systrace/systrace.c:399:
+	return (ret);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1013: FILE: drivers/systrace/systrace.c:403:
+systracef_read(struct file *filp, char *buf, size_t count, loff_t *off)
                             ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1027: FILE: drivers/systrace/systrace.c:417:
+	if ((strp = TAILQ_FIRST(&fst->messages)) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!TAILQ_FIRST"
#1039: FILE: drivers/systrace/systrace.c:429:
+	} else if (TAILQ_FIRST(&fst->processes) == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1063: FILE: drivers/systrace/systrace.c:453:
+systracef_write(struct file *filp, const char *buf, size_t count, loff_t *off)
                              ^^^^

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1065: FILE: drivers/systrace/systrace.c:455:
+	return (-ENOTSUPP);

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1069: FILE: drivers/systrace/systrace.c:459:
+systracef_release(struct inode *inode, struct file *filp)
                                                     ^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1102: FILE: drivers/systrace/systrace.c:492:
+	return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1112: FILE: drivers/systrace/systrace.c:502:
+	if ((parentstrp = parent->systrace) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1122: FILE: drivers/systrace/systrace.c:512:
+		printk(KERN_ERR "systrace: failed inserting process!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: drivers/systrace/systrace.c:517:
+	if ((strp = systrace_findpid(fst, child->pid)) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1128: FILE: drivers/systrace/systrace.c:518:
+		printk(KERN_ERR "systrace: inconsistency in tracked process!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1129: FILE: drivers/systrace/systrace.c:519:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1132: FILE: drivers/systrace/systrace.c:522:
+	if ((strp->policy = parentstrp->policy) != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1148: FILE: drivers/systrace/systrace.c:538:
+	if ((strp = p->systrace) != NULL) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1169: FILE: drivers/systrace/systrace.c:559:
+	extern struct sysent linux_sysent[];

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1173: FILE: drivers/systrace/systrace.c:563:
+	if ((strp = current->systrace) == NULL)

WARNING:TYPO_SPELLING: 'priveliges' may be misspelled - perhaps 'privileges'?
#1182: FILE: drivers/systrace/systrace.c:572:
+	/* Restore elevated priveliges if appropriate */
 	                    ^^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1203: FILE: drivers/systrace/systrace.c:593:
+		if ((strp = current->systrace) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: drivers/systrace/systrace.c:600:
+ ^I^Idown(&fst->lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1210: FILE: drivers/systrace/systrace.c:600:
+ ^I^Idown(&fst->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: drivers/systrace/systrace.c:600:
+ ^I^Idown(&fst->lock);$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1217: FILE: drivers/systrace/systrace.c:607:
+		if ((strp = current->systrace) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->replace"
#1221: FILE: drivers/systrace/systrace.c:611:
+	if (strp->replace != NULL) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1244: FILE: drivers/systrace/systrace.c:634:
+	extern struct sysent linux_sysent[];

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1249: FILE: drivers/systrace/systrace.c:639:
+	if ((strp = current->systrace) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "regs"
#1261: FILE: drivers/systrace/systrace.c:651:
+	if (regs != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1266: FILE: drivers/systrace/systrace.c:656:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1266: FILE: drivers/systrace/systrace.c:656:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: drivers/systrace/systrace.c:656:
+ ^I}$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1269: FILE: drivers/systrace/systrace.c:659:
+		printk(KERN_ERR "systrace: in impossible state!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1270: FILE: drivers/systrace/systrace.c:660:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1285: FILE: drivers/systrace/systrace.c:675:
+		printk(KERN_ERR "systrace: inconsistency in process states!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1286: FILE: drivers/systrace/systrace.c:676:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1310: FILE: drivers/systrace/systrace.c:700:
+		if ((strpolicy = strp->policy) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1328: FILE: drivers/systrace/systrace.c:718:
+		if (error == 0 && (strp = current->systrace) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->replace"
#1332: FILE: drivers/systrace/systrace.c:722:
+				if (strp->replace != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->replace"
#1336: FILE: drivers/systrace/systrace.c:726:
+			} else if (strp->replace != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1337: FILE: drivers/systrace/systrace.c:727:
+				if ((error = systrace_replace(strp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/systrace/systrace.c:728:
+				if ((error = systrace_replace(strp,
+					 argsize, args) == 0)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1360: FILE: drivers/systrace/systrace.c:750:
+/*
+	if (error != 0)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1364: FILE: drivers/systrace/systrace.c:754:
+	if ((strp = current->systrace) != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1366: FILE: drivers/systrace/systrace.c:756:
+			if (ISSET(strp->flags, STR_PROC_SETEUID)) {
+				strp->savedeuid = systrace_seteuid(current, strp->seteuid);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1369: FILE: drivers/systrace/systrace.c:759:
+			if (ISSET(strp->flags, STR_PROC_SETEGID)) {
+				strp->savedegid = systrace_setegid(current, strp->setegid);
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fst"
#1379: FILE: drivers/systrace/systrace.c:769:
+	if (fst != NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1382: FILE: drivers/systrace/systrace.c:772:
+	return (error);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1391: FILE: drivers/systrace/systrace.c:781:
+	if ((error = systrace_processready(strp)) != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->replace"
#1394: FILE: drivers/systrace/systrace.c:784:
+	if (strp->replace != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1418: FILE: drivers/systrace/systrace.c:808:
+	if ((strp->replace = kmalloc(sizeof(*strp->replace) + len, GFP_KERNEL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: drivers/systrace/systrace.c:809:
+^I    == NULL) $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1434: FILE: drivers/systrace/systrace.c:824:
+	return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1485: FILE: drivers/systrace/systrace.c:875:
+	if ((error = systrace_processready(strp)) != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1495: FILE: drivers/systrace/systrace.c:885:
+        /* See if we should elevate privileges for this system call */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1496: FILE: drivers/systrace/systrace.c:886:
+        if (ISSET(ans->stra_flags, SYSTR_FLAGS_SETEUID)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1496: FILE: drivers/systrace/systrace.c:886:
+        if (ISSET(ans->stra_flags, SYSTR_FLAGS_SETEUID)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1497: FILE: drivers/systrace/systrace.c:887:
+                SET(strp->flags, STR_PROC_SETEUID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: drivers/systrace/systrace.c:887:
+                SET(strp->flags, STR_PROC_SETEUID);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1498: FILE: drivers/systrace/systrace.c:888:
+                strp->seteuid = ans->stra_seteuid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1498: FILE: drivers/systrace/systrace.c:888:
+                strp->seteuid = ans->stra_seteuid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1499: FILE: drivers/systrace/systrace.c:889:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1499: FILE: drivers/systrace/systrace.c:889:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1500: FILE: drivers/systrace/systrace.c:890:
+        if (ISSET(ans->stra_flags, SYSTR_FLAGS_SETEGID)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1500: FILE: drivers/systrace/systrace.c:890:
+        if (ISSET(ans->stra_flags, SYSTR_FLAGS_SETEGID)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1501: FILE: drivers/systrace/systrace.c:891:
+                SET(strp->flags, STR_PROC_SETEGID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1501: FILE: drivers/systrace/systrace.c:891:
+                SET(strp->flags, STR_PROC_SETEGID);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1502: FILE: drivers/systrace/systrace.c:892:
+                strp->setegid = ans->stra_setegid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1502: FILE: drivers/systrace/systrace.c:892:
+                strp->setegid = ans->stra_setegid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1503: FILE: drivers/systrace/systrace.c:893:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1503: FILE: drivers/systrace/systrace.c:893:
+        }$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1533: FILE: drivers/systrace/systrace.c:923:
+	if ((buf = kmalloc(io->strio_len, GFP_KERNEL)) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1534: FILE: drivers/systrace/systrace.c:924:
+		printk(KERN_ERR "systrace: failed to allocate kernel memory!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1554: FILE: drivers/systrace/systrace.c:944:
+	copied = access_process_vm(tsk, (unsigned long)io->strio_offs, buf,
+	    io->strio_len, rw);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1573: FILE: drivers/systrace/systrace.c:963:
+	return (ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1582: FILE: drivers/systrace/systrace.c:972:
+	if ((error = systrace_processready(strp)) != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fsc"
#1590: FILE: drivers/systrace/systrace.c:980:
+	if (fsc == NULL || fsp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fsp"
#1590: FILE: drivers/systrace/systrace.c:980:
+	if (fsc == NULL || fsp == NULL) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1618: FILE: drivers/systrace/systrace.c:1008:
+	return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1645: FILE: drivers/systrace/systrace.c:1035:
+	return (0);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1660: FILE: drivers/systrace/systrace.c:1050:
+#if 0

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1673: FILE: drivers/systrace/systrace.c:1063:
+	if ((strp = kmalloc(sizeof(*strp), GFP_KERNEL)) == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1692: FILE: drivers/systrace/systrace.c:1082:
+	return (0);

WARNING:TABSTOP: Statements should start on a tabstop
#1702: FILE: drivers/systrace/systrace.c:1092:
+	    if (strp->pid == pid)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#1702: FILE: drivers/systrace/systrace.c:1092:
+	    if (strp->pid == pid)
+		    break;

WARNING:TABSTOP: Statements should start on a tabstop
#1703: FILE: drivers/systrace/systrace.c:1093:
+		    break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strp"
#1705: FILE: drivers/systrace/systrace.c:1095:
+	if (strp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc"
#1710: FILE: drivers/systrace/systrace.c:1100:
+	return (proc != NULL ? strp : NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc"
#1719: FILE: drivers/systrace/systrace.c:1109:
+	if (proc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc->systrace"
#1732: FILE: drivers/systrace/systrace.c:1122:
+	if (proc->systrace != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1740: FILE: drivers/systrace/systrace.c:1130:
+	if ((!cap_isclear(proc->cap_permitted) || proc->flags & PF_SUPERPRIV ||
+		proc->euid != current->euid || proc->egid != current->egid) &&

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1748: FILE: drivers/systrace/systrace.c:1138:
+	return (systrace_insert_process(fst, proc));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1758: FILE: drivers/systrace/systrace.c:1148:
+	if ((proc = systrace_find(strp)) != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1771: FILE: drivers/systrace/systrace.c:1161:
+^Iif (ISSET(strp->flags, STR_PROC_ONQUEUE)) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->policy"
#1777: FILE: drivers/systrace/systrace.c:1167:
+	if (strp->policy != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strp->replace"
#1779: FILE: drivers/systrace/systrace.c:1169:
+	if (strp->replace != NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1784: FILE: drivers/systrace/systrace.c:1174:
+	return (error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1789: FILE: drivers/systrace/systrace.c:1179:
+systrace_msg_result(struct fsystrace *fst, struct str_process *strp,
+    int error, int code, size_t argsize, register_t args[])

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1789: FILE: drivers/systrace/systrace.c:1179:
+    int error, int code, size_t argsize, register_t args[])$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1805: FILE: drivers/systrace/systrace.c:1195:
+	return (systrace_make_msg(strp, SYSTR_MSG_RES));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: drivers/systrace/systrace.c:1200:
+systrace_msg_ask(struct fsystrace *fst, struct str_process *strp, int code,
+    size_t argsize, register_t args[])

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1810: FILE: drivers/systrace/systrace.c:1200:
+    size_t argsize, register_t args[])$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1821: FILE: drivers/systrace/systrace.c:1211:
+	return (systrace_make_msg(strp, SYSTR_MSG_ASK));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1825: FILE: drivers/systrace/systrace.c:1215:
+systrace_msg_ugid(struct fsystrace *fst, struct str_process *strp)  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1827: FILE: drivers/systrace/systrace.c:1217:
+        struct str_msg_ugid *msg_ugid = &strp->msg.msg_data.msg_ugid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1827: FILE: drivers/systrace/systrace.c:1217:
+        struct str_msg_ugid *msg_ugid = &strp->msg.msg_data.msg_ugid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1828: FILE: drivers/systrace/systrace.c:1218:
+        struct task_struct *tsk = strp->proc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1828: FILE: drivers/systrace/systrace.c:1218:
+        struct task_struct *tsk = strp->proc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1830: FILE: drivers/systrace/systrace.c:1220:
+        msg_ugid->uid = tsk->euid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1830: FILE: drivers/systrace/systrace.c:1220:
+        msg_ugid->uid = tsk->euid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1831: FILE: drivers/systrace/systrace.c:1221:
+        msg_ugid->gid = tsk->egid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1831: FILE: drivers/systrace/systrace.c:1221:
+        msg_ugid->gid = tsk->egid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1833: FILE: drivers/systrace/systrace.c:1223:
+        return (systrace_make_msg(strp, SYSTR_MSG_UGID));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1833: FILE: drivers/systrace/systrace.c:1223:
+        return (systrace_make_msg(strp, SYSTR_MSG_UGID));$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1833: FILE: drivers/systrace/systrace.c:1223:
+        return (systrace_make_msg(strp, SYSTR_MSG_UGID));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1839: FILE: drivers/systrace/systrace.c:1229:
+        struct str_msg_execve *msg_execve = &strp->msg.msg_data.msg_execve;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1839: FILE: drivers/systrace/systrace.c:1229:
+        struct str_msg_execve *msg_execve = &strp->msg.msg_data.msg_execve;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1843: FILE: drivers/systrace/systrace.c:1233:
+        return (systrace_make_msg(strp, SYSTR_MSG_EXECVE));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1843: FILE: drivers/systrace/systrace.c:1233:
+        return (systrace_make_msg(strp, SYSTR_MSG_EXECVE));$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1843: FILE: drivers/systrace/systrace.c:1233:
+        return (systrace_make_msg(strp, SYSTR_MSG_EXECVE));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1854: FILE: drivers/systrace/systrace.c:1244:
+	if ((nstrp = kmalloc(sizeof(*nstrp), GFP_KERNEL)) == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1876: FILE: drivers/systrace/systrace.c:1266:
+	return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1920: FILE: drivers/systrace/systrace.c:1310:
+		if ((strp = current->systrace) == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1929: FILE: drivers/systrace/systrace.c:1319:
+	return (0);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1942: FILE: drivers/systrace/systrace.c:1332:
+	wmb();

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1952: FILE: drivers/systrace/systrace.c:1342:
+	return (oldeuid);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1965: FILE: drivers/systrace/systrace.c:1355:
+	wmb();

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1970: FILE: drivers/systrace/systrace.c:1360:
+	return (oldegid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1976: FILE: drivers/systrace/systrace.c:1366:
+        struct task_struct *proc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1976: FILE: drivers/systrace/systrace.c:1366:
+        struct task_struct *proc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1978: FILE: drivers/systrace/systrace.c:1368:
+        if ((proc = find_task_by_pid(strp->pid)) == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1978: FILE: drivers/systrace/systrace.c:1368:
+        if ((proc = find_task_by_pid(strp->pid)) == NULL)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1978: FILE: drivers/systrace/systrace.c:1368:
+        if ((proc = find_task_by_pid(strp->pid)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1979: FILE: drivers/systrace/systrace.c:1369:
+                return (NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1979: FILE: drivers/systrace/systrace.c:1369:
+                return (NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1981: FILE: drivers/systrace/systrace.c:1371:
+        if (proc != strp->proc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1981: FILE: drivers/systrace/systrace.c:1371:
+        if (proc != strp->proc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1982: FILE: drivers/systrace/systrace.c:1372:
+                return (NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1982: FILE: drivers/systrace/systrace.c:1372:
+                return (NULL);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc->systrace"
#1984: FILE: drivers/systrace/systrace.c:1374:
+	if (proc->systrace == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1985: FILE: drivers/systrace/systrace.c:1375:
+                return (NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1985: FILE: drivers/systrace/systrace.c:1375:
+                return (NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1987: FILE: drivers/systrace/systrace.c:1377:
+        return (proc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1987: FILE: drivers/systrace/systrace.c:1377:
+        return (proc);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1987: FILE: drivers/systrace/systrace.c:1377:
+        return (proc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1993: FILE: drivers/systrace/systrace-private.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2027: FILE: drivers/systrace/systrace-private.h:35:
+#define POLICY_VALID(x)	((x) == SYSTR_POLICY_PERMIT || \
+			 (x) == SYSTR_POLICY_ASK ||    \
+			 (x) == SYSTR_POLICY_NEVER)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#2031: FILE: drivers/systrace/systrace-private.h:39:
+#define DPRINTF(x) if (systrace_debug) printk x

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:LINE_SPACING: Missing a blank line after declarations
#2039: FILE: drivers/systrace/systrace-private.h:47:
+	short                   *sysent;
+	TAILQ_ENTRY(str_policy)  next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2047: FILE: drivers/systrace/systrace-private.h:55:
+#define STR_PROC_SETEUID        0x20    /* Elevate privileges */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2053: FILE: drivers/systrace/systrace-private.h:61:
+^Istruct semaphore          lock;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2058: FILE: drivers/systrace/systrace-private.h:66:
+^Iwait_queue_head_t         wqh;^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2080: FILE: drivers/systrace/systrace-private.h:88:
+int                systracef_ioctl(struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2080: FILE: drivers/systrace/systrace-private.h:88:
+int                systracef_ioctl(struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2080: FILE: drivers/systrace/systrace-private.h:88:
+int                systracef_ioctl(struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2080: FILE: drivers/systrace/systrace-private.h:88:
+int                systracef_ioctl(struct inode *, struct file *, unsigned int,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2081: FILE: drivers/systrace/systrace-private.h:89:
+                       unsigned long);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2081: FILE: drivers/systrace/systrace-private.h:89:
+int                systracef_ioctl(struct inode *, struct file *, unsigned int,
+                       unsigned long);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2081: FILE: drivers/systrace/systrace-private.h:89:
+                       unsigned long);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2082: FILE: drivers/systrace/systrace-private.h:90:
+ssize_t            systracef_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2082: FILE: drivers/systrace/systrace-private.h:90:
+ssize_t            systracef_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2082: FILE: drivers/systrace/systrace-private.h:90:
+ssize_t            systracef_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#2082: FILE: drivers/systrace/systrace-private.h:90:
+ssize_t            systracef_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2083: FILE: drivers/systrace/systrace-private.h:91:
+ssize_t            systracef_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2083: FILE: drivers/systrace/systrace-private.h:91:
+ssize_t            systracef_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2083: FILE: drivers/systrace/systrace-private.h:91:
+ssize_t            systracef_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#2083: FILE: drivers/systrace/systrace-private.h:91:
+ssize_t            systracef_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2084: FILE: drivers/systrace/systrace-private.h:92:
+int                systracef_open(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2084: FILE: drivers/systrace/systrace-private.h:92:
+int                systracef_open(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2085: FILE: drivers/systrace/systrace-private.h:93:
+int                systracef_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2085: FILE: drivers/systrace/systrace-private.h:93:
+int                systracef_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2086: FILE: drivers/systrace/systrace-private.h:94:
+unsigned int       systracef_poll(struct file *, struct poll_table_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct poll_table_struct *' should also have an identifier name
#2086: FILE: drivers/systrace/systrace-private.h:94:
+unsigned int       systracef_poll(struct file *, struct poll_table_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2089: FILE: drivers/systrace/systrace-private.h:97:
+struct str_policy *systrace_newpolicy(struct fsystrace *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2089: FILE: drivers/systrace/systrace-private.h:97:
+struct str_policy *systrace_newpolicy(struct fsystrace *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2090: FILE: drivers/systrace/systrace-private.h:98:
+void               systrace_closepolicy(struct fsystrace *, struct str_policy *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_policy *' should also have an identifier name
#2090: FILE: drivers/systrace/systrace-private.h:98:
+void               systrace_closepolicy(struct fsystrace *, struct str_policy *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2091: FILE: drivers/systrace/systrace-private.h:99:
+int                systrace_policy(struct fsystrace *, struct systrace_policy *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct systrace_policy *' should also have an identifier name
#2091: FILE: drivers/systrace/systrace-private.h:99:
+int                systrace_policy(struct fsystrace *, struct systrace_policy *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2092: FILE: drivers/systrace/systrace-private.h:100:
+struct str_policy *systrace_newpolicy(struct fsystrace *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2092: FILE: drivers/systrace/systrace-private.h:100:
+struct str_policy *systrace_newpolicy(struct fsystrace *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2095: FILE: drivers/systrace/systrace-private.h:103:
+int                 systrace_msg_child(struct fsystrace *, struct str_process *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2095: FILE: drivers/systrace/systrace-private.h:103:
+int                 systrace_msg_child(struct fsystrace *, struct str_process *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#2095: FILE: drivers/systrace/systrace-private.h:103:
+int                 systrace_msg_child(struct fsystrace *, struct str_process *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'register_t[]' should also have an identifier name
#2096: FILE: drivers/systrace/systrace-private.h:104:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2097: FILE: drivers/systrace/systrace-private.h:105:
+                        size_t, register_t[]);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2097: FILE: drivers/systrace/systrace-private.h:105:
+int                 systrace_msg_result(struct fsystrace *, struct str_process *, int, int,
+                        size_t, register_t[]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2097: FILE: drivers/systrace/systrace-private.h:105:
+                        size_t, register_t[]);$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'register_t[]' should also have an identifier name
#2098: FILE: drivers/systrace/systrace-private.h:106:
+int                 systrace_msg_ask(struct fsystrace *, struct str_process *, int, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2099: FILE: drivers/systrace/systrace-private.h:107:
+int                 systrace_msg_ugid(struct fsystrace *, struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2099: FILE: drivers/systrace/systrace-private.h:107:
+int                 systrace_msg_ugid(struct fsystrace *, struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2100: FILE: drivers/systrace/systrace-private.h:108:
+int                 systrace_msg_execve(struct fsystrace *, struct str_process *, register_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2100: FILE: drivers/systrace/systrace-private.h:108:
+int                 systrace_msg_execve(struct fsystrace *, struct str_process *, register_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'register_t' should also have an identifier name
#2100: FILE: drivers/systrace/systrace-private.h:108:
+int                 systrace_msg_execve(struct fsystrace *, struct str_process *, register_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2101: FILE: drivers/systrace/systrace-private.h:109:
+int                 systrace_make_msg(struct str_process *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2101: FILE: drivers/systrace/systrace-private.h:109:
+int                 systrace_make_msg(struct str_process *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2102: FILE: drivers/systrace/systrace-private.h:110:
+int                 systrace_make_msg(struct str_process *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2102: FILE: drivers/systrace/systrace-private.h:110:
+int                 systrace_make_msg(struct str_process *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2104: FILE: drivers/systrace/systrace-private.h:112:
+int                 systrace_io(struct str_process *, struct systrace_io *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct systrace_io *' should also have an identifier name
#2104: FILE: drivers/systrace/systrace-private.h:112:
+int                 systrace_io(struct str_process *, struct systrace_io *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2105: FILE: drivers/systrace/systrace-private.h:113:
+int                 systrace_getcwd(struct fsystrace *, struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2105: FILE: drivers/systrace/systrace-private.h:113:
+int                 systrace_getcwd(struct fsystrace *, struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2106: FILE: drivers/systrace/systrace-private.h:114:
+int                 systrace_rescwd(struct fsystrace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2107: FILE: drivers/systrace/systrace-private.h:115:
+int                 systrace_attach(struct fsystrace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#2107: FILE: drivers/systrace/systrace-private.h:115:
+int                 systrace_attach(struct fsystrace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2108: FILE: drivers/systrace/systrace-private.h:116:
+int                 systrace_detach(struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2109: FILE: drivers/systrace/systrace-private.h:117:
+int                 systrace_answer(struct str_process *, struct systrace_answer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct systrace_answer *' should also have an identifier name
#2109: FILE: drivers/systrace/systrace-private.h:117:
+int                 systrace_answer(struct str_process *, struct systrace_answer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2110: FILE: drivers/systrace/systrace-private.h:118:
+int                 systrace_insert_process(struct fsystrace *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2110: FILE: drivers/systrace/systrace-private.h:118:
+int                 systrace_insert_process(struct fsystrace *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2111: FILE: drivers/systrace/systrace-private.h:119:
+int                 systrace_processready(struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsystrace *' should also have an identifier name
#2112: FILE: drivers/systrace/systrace-private.h:120:
+struct str_process *systrace_findpid(struct fsystrace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#2112: FILE: drivers/systrace/systrace-private.h:120:
+struct str_process *systrace_findpid(struct fsystrace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2113: FILE: drivers/systrace/systrace-private.h:121:
+struct task_struct *systrace_find(struct str_process *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2115: FILE: drivers/systrace/systrace-private.h:123:
+int                 systrace_preprepl(struct str_process *, struct systrace_replace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct systrace_replace *' should also have an identifier name
#2115: FILE: drivers/systrace/systrace-private.h:123:
+int                 systrace_preprepl(struct str_process *, struct systrace_replace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct str_process *' should also have an identifier name
#2116: FILE: drivers/systrace/systrace-private.h:124:
+int                 systrace_replace(struct str_process *, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2116: FILE: drivers/systrace/systrace-private.h:124:
+int                 systrace_replace(struct str_process *, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'register_t[]' should also have an identifier name
#2116: FILE: drivers/systrace/systrace-private.h:124:
+int                 systrace_replace(struct str_process *, size_t, register_t[]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2117: FILE: drivers/systrace/systrace-private.h:125:
+uid_t               systrace_seteuid(struct task_struct *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#2117: FILE: drivers/systrace/systrace-private.h:125:
+uid_t               systrace_seteuid(struct task_struct *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2118: FILE: drivers/systrace/systrace-private.h:126:
+gid_t               systrace_setegid(struct task_struct *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#2118: FILE: drivers/systrace/systrace-private.h:126:
+gid_t               systrace_setegid(struct task_struct *, gid_t);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2120: FILE: drivers/systrace/systrace-private.h:128:
+#if 0

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2133: FILE: drivers/systrace/systrace-private.h:141:
+#define systrace_lock(...) lock_kernel();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2134: FILE: drivers/systrace/systrace-private.h:142:
+#define systrace_unlock(...) unlock_kernel();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2141: FILE: include/linux/queue.h:1:
+/*	$OpenBSD: queue.h,v 1.22 2001/06/23 04:39:35 angelos Exp $	*/

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#2157: FILE: include/linux/queue.h:17:
+ *    must display the following acknowledgement:
                                  ^^^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2200: FILE: include/linux/queue.h:60:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2201: FILE: include/linux/queue.h:61:
+ * tail queue access methods $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2205: FILE: include/linux/queue.h:65:
+#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'headname' may be better as '(headname)' to avoid precedence issues
#2206: FILE: include/linux/queue.h:66:
+#define TAILQ_LAST(head, headname)					\
+	(*(((struct headname *)((head)->tqh_last))->tqh_last))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'headname' may be better as '(headname)' to avoid precedence issues
#2209: FILE: include/linux/queue.h:69:
+#define TAILQ_PREV(elm, headname, field)				\
+	(*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2209: FILE: include/linux/queue.h:69:
+#define TAILQ_PREV(elm, headname, field)				\
+	(*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2211: FILE: include/linux/queue.h:71:
+#define	TAILQ_EMPTY(head)						\
+	(TAILQ_FIRST(head) == TAILQ_END(head))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#2214: FILE: include/linux/queue.h:74:
+#define TAILQ_FOREACH(var, head, field)					\
+	for((var) = TAILQ_FIRST(head);					\
+	    (var) != TAILQ_END(head);					\
+	    (var) = TAILQ_NEXT(var, field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2214: FILE: include/linux/queue.h:74:
+#define TAILQ_FOREACH(var, head, field)					\
+	for((var) = TAILQ_FIRST(head);					\
+	    (var) != TAILQ_END(head);					\
+	    (var) = TAILQ_NEXT(var, field))

ERROR:SPACING: space required before the open parenthesis '('
#2215: FILE: include/linux/queue.h:75:
+	for((var) = TAILQ_FIRST(head);					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#2219: FILE: include/linux/queue.h:79:
+#define TAILQ_FOREACH_REVERSE(var, head, field, headname)		\
+	for((var) = TAILQ_LAST(head, headname);				\
+	    (var) != TAILQ_END(head);					\
+	    (var) = TAILQ_PREV(var, headname, field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2219: FILE: include/linux/queue.h:79:
+#define TAILQ_FOREACH_REVERSE(var, head, field, headname)		\
+	for((var) = TAILQ_LAST(head, headname);				\
+	    (var) != TAILQ_END(head);					\
+	    (var) = TAILQ_PREV(var, headname, field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'headname' - possible side-effects?
#2219: FILE: include/linux/queue.h:79:
+#define TAILQ_FOREACH_REVERSE(var, head, field, headname)		\
+	for((var) = TAILQ_LAST(head, headname);				\
+	    (var) != TAILQ_END(head);					\
+	    (var) = TAILQ_PREV(var, headname, field))

ERROR:SPACING: space required before the open parenthesis '('
#2220: FILE: include/linux/queue.h:80:
+	for((var) = TAILQ_LAST(head, headname);				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2227: FILE: include/linux/queue.h:87:
+#define	TAILQ_INIT(head) do {						\
+	(head)->tqh_first = NULL;					\
+	(head)->tqh_last = &(head)->tqh_first;				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2232: FILE: include/linux/queue.h:92:
+#define TAILQ_INSERT_HEAD(head, elm, field) do {			\
+	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\
+		(head)->tqh_first->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(head)->tqh_first = (elm);					\
+	(elm)->field.tqe_prev = &(head)->tqh_first;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2232: FILE: include/linux/queue.h:92:
+#define TAILQ_INSERT_HEAD(head, elm, field) do {			\
+	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\
+		(head)->tqh_first->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(head)->tqh_first = (elm);					\
+	(elm)->field.tqe_prev = &(head)->tqh_first;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2232: FILE: include/linux/queue.h:92:
+#define TAILQ_INSERT_HEAD(head, elm, field) do {			\
+	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\
+		(head)->tqh_first->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(head)->tqh_first = (elm);					\
+	(elm)->field.tqe_prev = &(head)->tqh_first;			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2232: FILE: include/linux/queue.h:92:
+#define TAILQ_INSERT_HEAD(head, elm, field) do {			\
+	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\
+		(head)->tqh_first->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(head)->tqh_first = (elm);					\
+	(elm)->field.tqe_prev = &(head)->tqh_first;			\
+} while (0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2233: FILE: include/linux/queue.h:93:
+	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#2242: FILE: include/linux/queue.h:102:
+#define TAILQ_INSERT_TAIL(head, elm, field) do {			\
+	(elm)->field.tqe_next = NULL;					\
+	(elm)->field.tqe_prev = (head)->tqh_last;			\
+	*(head)->tqh_last = (elm);					\
+	(head)->tqh_last = &(elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2242: FILE: include/linux/queue.h:102:
+#define TAILQ_INSERT_TAIL(head, elm, field) do {			\
+	(elm)->field.tqe_next = NULL;					\
+	(elm)->field.tqe_prev = (head)->tqh_last;			\
+	*(head)->tqh_last = (elm);					\
+	(head)->tqh_last = &(elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2242: FILE: include/linux/queue.h:102:
+#define TAILQ_INSERT_TAIL(head, elm, field) do {			\
+	(elm)->field.tqe_next = NULL;					\
+	(elm)->field.tqe_prev = (head)->tqh_last;			\
+	*(head)->tqh_last = (elm);					\
+	(head)->tqh_last = &(elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2242: FILE: include/linux/queue.h:102:
+#define TAILQ_INSERT_TAIL(head, elm, field) do {			\
+	(elm)->field.tqe_next = NULL;					\
+	(elm)->field.tqe_prev = (head)->tqh_last;			\
+	*(head)->tqh_last = (elm);					\
+	(head)->tqh_last = &(elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listelm' - possible side-effects?
#2249: FILE: include/linux/queue.h:109:
+#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {		\
+	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(listelm)->field.tqe_next = (elm);				\
+	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2249: FILE: include/linux/queue.h:109:
+#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {		\
+	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(listelm)->field.tqe_next = (elm);				\
+	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2249: FILE: include/linux/queue.h:109:
+#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {		\
+	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(listelm)->field.tqe_next = (elm);				\
+	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2249: FILE: include/linux/queue.h:109:
+#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {		\
+	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    &(elm)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm)->field.tqe_next;		\
+	(listelm)->field.tqe_next = (elm);				\
+	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\
+} while (0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2250: FILE: include/linux/queue.h:110:
+	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listelm' - possible side-effects?
#2259: FILE: include/linux/queue.h:119:
+#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {			\
+	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\
+	(elm)->field.tqe_next = (listelm);				\
+	*(listelm)->field.tqe_prev = (elm);				\
+	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2259: FILE: include/linux/queue.h:119:
+#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {			\
+	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\
+	(elm)->field.tqe_next = (listelm);				\
+	*(listelm)->field.tqe_prev = (elm);				\
+	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2259: FILE: include/linux/queue.h:119:
+#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {			\
+	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\
+	(elm)->field.tqe_next = (listelm);				\
+	*(listelm)->field.tqe_prev = (elm);				\
+	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2259: FILE: include/linux/queue.h:119:
+#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {			\
+	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\
+	(elm)->field.tqe_next = (listelm);				\
+	*(listelm)->field.tqe_prev = (elm);				\
+	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2266: FILE: include/linux/queue.h:126:
+#define TAILQ_REMOVE(head, elm, field) do {				\
+	if (((elm)->field.tqe_next) != NULL)				\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    (elm)->field.tqe_prev;				\
+	else								\
+		(head)->tqh_last = (elm)->field.tqe_prev;		\
+	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2266: FILE: include/linux/queue.h:126:
+#define TAILQ_REMOVE(head, elm, field) do {				\
+	if (((elm)->field.tqe_next) != NULL)				\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    (elm)->field.tqe_prev;				\
+	else								\
+		(head)->tqh_last = (elm)->field.tqe_prev;		\
+	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2266: FILE: include/linux/queue.h:126:
+#define TAILQ_REMOVE(head, elm, field) do {				\
+	if (((elm)->field.tqe_next) != NULL)				\
+		(elm)->field.tqe_next->field.tqe_prev =			\
+		    (elm)->field.tqe_prev;				\
+	else								\
+		(head)->tqh_last = (elm)->field.tqe_prev;		\
+	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm' - possible side-effects?
#2275: FILE: include/linux/queue.h:135:
+#define TAILQ_REPLACE(head, elm, elm2, field) do {			\
+	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\
+		(elm2)->field.tqe_next->field.tqe_prev =		\
+		    &(elm2)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm2)->field.tqe_next;		\
+	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\
+	*(elm2)->field.tqe_prev = (elm2);				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elm2' - possible side-effects?
#2275: FILE: include/linux/queue.h:135:
+#define TAILQ_REPLACE(head, elm, elm2, field) do {			\
+	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\
+		(elm2)->field.tqe_next->field.tqe_prev =		\
+		    &(elm2)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm2)->field.tqe_next;		\
+	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\
+	*(elm2)->field.tqe_prev = (elm2);				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2275: FILE: include/linux/queue.h:135:
+#define TAILQ_REPLACE(head, elm, elm2, field) do {			\
+	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\
+		(elm2)->field.tqe_next->field.tqe_prev =		\
+		    &(elm2)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm2)->field.tqe_next;		\
+	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\
+	*(elm2)->field.tqe_prev = (elm2);				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2275: FILE: include/linux/queue.h:135:
+#define TAILQ_REPLACE(head, elm, elm2, field) do {			\
+	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\
+		(elm2)->field.tqe_next->field.tqe_prev =		\
+		    &(elm2)->field.tqe_next;				\
+	else								\
+		(head)->tqh_last = &(elm2)->field.tqe_next;		\
+	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\
+	*(elm2)->field.tqe_prev = (elm2);				\
+} while (0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2276: FILE: include/linux/queue.h:136:
+	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2304: FILE: include/linux/systrace.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#2329: FILE: include/linux/systrace.h:26:
+        char emul[SYSTR_EMULEN];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2329: FILE: include/linux/systrace.h:26:
+        char emul[SYSTR_EMULEN];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2337: FILE: include/linux/systrace.h:34:
+        int code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2337: FILE: include/linux/systrace.h:34:
+        int code;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2338: FILE: include/linux/systrace.h:35:
+        int argsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2338: FILE: include/linux/systrace.h:35:
+        int argsize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2339: FILE: include/linux/systrace.h:36:
+        u32 args[SYSTR_MAXARGS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2339: FILE: include/linux/systrace.h:36:
+        u32 args[SYSTR_MAXARGS];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2340: FILE: include/linux/systrace.h:37:
+        u32 rval[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2340: FILE: include/linux/systrace.h:37:
+        u32 rval[2];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2341: FILE: include/linux/systrace.h:38:
+        int result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2341: FILE: include/linux/systrace.h:38:
+        int result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2347: FILE: include/linux/systrace.h:44:
+        pid_t new_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2347: FILE: include/linux/systrace.h:44:
+        pid_t new_pid;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2349: FILE: include/linux/systrace.h:46:
+};
+struct str_msg_ugid {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2350: FILE: include/linux/systrace.h:47:
+        uid_t uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2350: FILE: include/linux/systrace.h:47:
+        uid_t uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2351: FILE: include/linux/systrace.h:48:
+        gid_t gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2351: FILE: include/linux/systrace.h:48:
+        gid_t gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2366: FILE: include/linux/systrace.h:63:
+        ((x)->msg.msg_type == SYSTR_MSG_CHILD)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2366: FILE: include/linux/systrace.h:63:
+        ((x)->msg.msg_type == SYSTR_MSG_CHILD)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2373: FILE: include/linux/systrace.h:70:
+        int   msg_type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2373: FILE: include/linux/systrace.h:70:
+        int   msg_type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2374: FILE: include/linux/systrace.h:71:
+        pid_t msg_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2374: FILE: include/linux/systrace.h:71:
+        pid_t msg_pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2375: FILE: include/linux/systrace.h:72:
+        short msg_policy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2375: FILE: include/linux/systrace.h:72:
+        short msg_policy;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2376: FILE: include/linux/systrace.h:73:
+        short reserved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2376: FILE: include/linux/systrace.h:73:
+        short reserved;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2377: FILE: include/linux/systrace.h:74:
+        union {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2377: FILE: include/linux/systrace.h:74:
+        union {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2378: FILE: include/linux/systrace.h:75:
+                struct str_msg_emul    msg_emul;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2378: FILE: include/linux/systrace.h:75:
+                struct str_msg_emul    msg_emul;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2379: FILE: include/linux/systrace.h:76:
+                struct str_msg_ask     msg_ask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2379: FILE: include/linux/systrace.h:76:
+                struct str_msg_ask     msg_ask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2380: FILE: include/linux/systrace.h:77:
+                struct str_msg_child   msg_child;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2380: FILE: include/linux/systrace.h:77:
+                struct str_msg_child   msg_child;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2381: FILE: include/linux/systrace.h:78:
+                struct str_msg_ugid    msg_ugid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2381: FILE: include/linux/systrace.h:78:
+                struct str_msg_ugid    msg_ugid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2382: FILE: include/linux/systrace.h:79:
+                struct str_msg_execve  msg_execve;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2382: FILE: include/linux/systrace.h:79:
+                struct str_msg_execve  msg_execve;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2383: FILE: include/linux/systrace.h:80:
+        }     msg_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2383: FILE: include/linux/systrace.h:80:
+        }     msg_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2389: FILE: include/linux/systrace.h:86:
+        pid_t stra_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2389: FILE: include/linux/systrace.h:86:
+        pid_t stra_pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2390: FILE: include/linux/systrace.h:87:
+        int   stra_policy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2390: FILE: include/linux/systrace.h:87:
+        int   stra_policy;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2391: FILE: include/linux/systrace.h:88:
+        int   stra_error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2391: FILE: include/linux/systrace.h:88:
+        int   stra_error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2392: FILE: include/linux/systrace.h:89:
+        int   stra_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2392: FILE: include/linux/systrace.h:89:
+        int   stra_flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2394: FILE: include/linux/systrace.h:91:
+        gid_t stra_setegid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2394: FILE: include/linux/systrace.h:91:
+        gid_t stra_setegid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2401: FILE: include/linux/systrace.h:98:
+        pid_t   strio_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2401: FILE: include/linux/systrace.h:98:
+        pid_t   strio_pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2402: FILE: include/linux/systrace.h:99:
+        int     strio_op;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2402: FILE: include/linux/systrace.h:99:
+        int     strio_op;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2403: FILE: include/linux/systrace.h:100:
+        void   *strio_offs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2403: FILE: include/linux/systrace.h:100:
+        void   *strio_offs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2404: FILE: include/linux/systrace.h:101:
+        void   *strio_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2404: FILE: include/linux/systrace.h:101:
+        void   *strio_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2405: FILE: include/linux/systrace.h:102:
+        size_t  strio_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2405: FILE: include/linux/systrace.h:102:
+        size_t  strio_len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2413: FILE: include/linux/systrace.h:110:
+        int strp_op;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2413: FILE: include/linux/systrace.h:110:
+        int strp_op;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2414: FILE: include/linux/systrace.h:111:
+        int strp_num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2414: FILE: include/linux/systrace.h:111:
+        int strp_num;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2415: FILE: include/linux/systrace.h:112:
+        union {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2415: FILE: include/linux/systrace.h:112:
+        union {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2416: FILE: include/linux/systrace.h:113:
+                struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2416: FILE: include/linux/systrace.h:113:
+                struct {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2417: FILE: include/linux/systrace.h:114:
+                        short code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2417: FILE: include/linux/systrace.h:114:
+                        short code;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2418: FILE: include/linux/systrace.h:115:
+                        short policy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2418: FILE: include/linux/systrace.h:115:
+                        short policy;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2419: FILE: include/linux/systrace.h:116:
+                } assign;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2419: FILE: include/linux/systrace.h:116:
+                } assign;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2420: FILE: include/linux/systrace.h:117:
+                pid_t pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2420: FILE: include/linux/systrace.h:117:
+                pid_t pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2421: FILE: include/linux/systrace.h:118:
+                int maxents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2421: FILE: include/linux/systrace.h:118:
+                int maxents;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2422: FILE: include/linux/systrace.h:119:
+        } strp_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2422: FILE: include/linux/systrace.h:119:
+        } strp_data;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2425: FILE: include/linux/systrace.h:122:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2452: FILE: include/linux/systrace.h:149:
+#define STRIOCLONE    _IOW(STR_MAGIC, 109, int *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2469: FILE: include/linux/systrace.h:166:
+        TAILQ_HEAD(strprocessq, str_process)  processes;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2469: FILE: include/linux/systrace.h:166:
+        TAILQ_HEAD(strprocessq, str_process)  processes;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2470: FILE: include/linux/systrace.h:167:
+        TAILQ_HEAD(strpolicyq, str_policy)    policies;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2470: FILE: include/linux/systrace.h:167:
+        TAILQ_HEAD(strpolicyq, str_policy)    policies;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2471: FILE: include/linux/systrace.h:168:
+        int                                   nprocesses;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2471: FILE: include/linux/systrace.h:168:
+        int                                   nprocesses;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2472: FILE: include/linux/systrace.h:169:
+        struct strprocessq                    messages;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2472: FILE: include/linux/systrace.h:169:
+        struct strprocessq                    messages;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2473: FILE: include/linux/systrace.h:170:
+        int                                   npolicynr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2473: FILE: include/linux/systrace.h:170:
+        int                                   npolicynr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2474: FILE: include/linux/systrace.h:171:
+        int                                   npolicies;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2474: FILE: include/linux/systrace.h:171:
+        int                                   npolicies;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2476: FILE: include/linux/systrace.h:173:
+        int                                   issuser;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2476: FILE: include/linux/systrace.h:173:
+        int                                   issuser;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2481: FILE: include/linux/systrace.h:178:
+        /* cwd magic */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2482: FILE: include/linux/systrace.h:179:
+        pid_t                                 pwd_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2482: FILE: include/linux/systrace.h:179:
+        pid_t                                 pwd_pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2484: FILE: include/linux/systrace.h:181:
+        struct dentry                        *pwd_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2484: FILE: include/linux/systrace.h:181:
+        struct dentry                        *pwd_dentry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2485: FILE: include/linux/systrace.h:182:
+        struct vfsmount                      *root_mnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2485: FILE: include/linux/systrace.h:182:
+        struct vfsmount                      *root_mnt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2486: FILE: include/linux/systrace.h:183:
+        struct dentry                        *root_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2486: FILE: include/linux/systrace.h:183:
+        struct dentry                        *root_dentry;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2492: FILE: include/linux/systrace.h:189:
+/*
+  int systrace_redirect(int, struct proc *, void *, register_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2498: FILE: include/linux/systrace.h:195:
+void systrace_fork(struct task_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2498: FILE: include/linux/systrace.h:195:
+void systrace_fork(struct task_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2499: FILE: include/linux/systrace.h:196:
+void systrace_exit(struct task_struct *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2512: FILE: include/linux/systrace.h:209:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->systrace"
#2567: FILE: kernel/fork.c:1394:
+		if (current->systrace != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010781.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 159 errors, 239 warnings, 251 checks, 2462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010781.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
