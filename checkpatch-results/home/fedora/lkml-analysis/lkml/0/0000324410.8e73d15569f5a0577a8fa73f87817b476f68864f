WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This patch is a combination of two complementary patches I worked on for my 

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#161: FILE: kernel/sched.c:289:
+# define nr_running_inc(rq)	do { (rq)->nr_running++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#162: FILE: kernel/sched.c:290:
+# define nr_running_dec(rq)	do { (rq)->nr_running--; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#163: FILE: kernel/sched.c:291:
+# define nr_batch_inc(rq)	do { (rq)->nr_batch++; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#164: FILE: kernel/sched.c:292:
+# define nr_batch_dec(rq)	do { (rq)->nr_batch--; } while (0)

ERROR:SPACING: space required before the open brace '{'
#189: FILE: kernel/sched.c:396:
+	if (unlikely(batch_task(p))){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: kernel/sched.c:396:
+	if (unlikely(batch_task(p))){
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: kernel/sched.c:399:
+	} else

ERROR:SPACING: space required before the open brace '{'
#213: FILE: kernel/sched.c:717:
+		if (unlikely(batch_task(p))){

ERROR:SPACING: space required before the open brace '{'
#235: FILE: kernel/sched.c:1158:
+	if (unlikely(batch_task(p))){

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: kernel/sched.c:1158:
+	if (unlikely(batch_task(p))){
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#239: FILE: kernel/sched.c:1162:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#250: FILE: kernel/sched.c:1186:
+	if (!idle && (delta <= JIFFIES_TO_NS(cache_decay_ticks)) &&
[...]
+			return 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta <= JIFFIES_TO_NS(cache_decay_ticks)'
#250: FILE: kernel/sched.c:1186:
+	if (!idle && (delta <= JIFFIES_TO_NS(cache_decay_ticks)) &&
+		!ht_siblings(this_cpu, task_cpu(tsk)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: kernel/sched.c:1187:
+	if (!idle && (delta <= JIFFIES_TO_NS(cache_decay_ticks)) &&
+		!ht_siblings(this_cpu, task_cpu(tsk)))

CHECK:BRACES: Unbalanced braces around else statement
#275: FILE: kernel/sched.c:1234:
+	else {

ERROR:SPACING: space required before the open brace '{'
#291: FILE: kernel/sched.c:1250:
+		if (ht_siblings(this_cpu, busiest->cpu)){

ERROR:SPACING: space required before the open brace '{'
#321: FILE: kernel/sched.c:1432:
+	if (unlikely(batch_task(p))){

ERROR:SPACING: space required before the open brace '{'
#328: FILE: kernel/sched.c:1439:
+		if (cpu_has_ht && smp_num_siblings > 1){

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: kernel/sched.c:1441:
+			runqueue_t *htrq;
+			htrq = cpu_rq(cpu_sibling_map[(rq->cpu)]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#331: FILE: kernel/sched.c:1442:
+			if (htrq->nr_running > htrq->nr_batch){

CHECK:BRACES: Unbalanced braces around else statement
#360: FILE: kernel/sched.c:1497:
+		else {

ERROR:SPACING: space required before the open brace '{'
#375: FILE: kernel/sched.c:1623:
+		if (likely(rq->expired->nr_active)){

ERROR:SPACING: space required before the open brace '{'
#401: FILE: kernel/sched.c:1648:
+	if (unlikely(batch_task(next))){

ERROR:SPACING: space required before the open brace '{'
#402: FILE: kernel/sched.c:1649:
+		if (rq->nr_running > rq->nr_batch){

ERROR:SPACING: space required before the open brace '{'
#412: FILE: kernel/sched.c:1659:
+		if (cpu_has_ht && smp_num_siblings > 1){

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: kernel/sched.c:1661:
+			runqueue_t *htrq;
+			htrq = cpu_rq(cpu_sibling_map[(rq->cpu)]);

ERROR:SPACING: space required before the open brace '{'
#415: FILE: kernel/sched.c:1662:
+			if (htrq->nr_running > htrq->nr_batch){

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#437: FILE: kernel/sched.c:1995:
+		if (delta < 0 || ((delta > 0 || batch_task(p)) &&
[...]
+				resched_task(rq->curr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: kernel/sched.c:1996:
+		if (delta < 0 || ((delta > 0 || batch_task(p)) &&
+			task_running(rq, p)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#446: FILE: kernel/sched.c:2143:
 		if (policy != SCHED_FIFO && policy != SCHED_RR &&
[...]
+				goto out_unlock;

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#449: FILE: kernel/sched.c:2144:
+			policy != SCHED_NORMAL && policy !=SCHED_BATCH)
 			                                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#460: FILE: kernel/sched.c:2155:
+	if ((policy == SCHED_NORMAL || policy == SCHED_BATCH) !=
[...]
+			goto out_unlock;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lp.sched_priority == 0'
#460: FILE: kernel/sched.c:2155:
+	if ((policy == SCHED_NORMAL || policy == SCHED_BATCH) !=
+		(lp.sched_priority == 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 11 warnings, 10 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
