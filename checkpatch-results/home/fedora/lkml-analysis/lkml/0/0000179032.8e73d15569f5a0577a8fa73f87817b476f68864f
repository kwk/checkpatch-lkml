WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#89: 
 *                        contains the generic, simplified UP spinlock type.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: include/asm-generic/spinlock_types_up.h:1:
+#ifndef __ASM_GENERIC_SPINLOCK_TYPES_UP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#187: FILE: include/asm-generic/spinlock_types_up.h:11:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#189: FILE: include/asm-generic/spinlock_types_up.h:13:
+	volatile unsigned int slock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#199: FILE: include/asm-generic/spinlock_types_up.h:23:
+typedef struct {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: include/asm-generic/spinlock_up.h:1:
+#ifndef __ASM_GENERIC_SPINLOCK_UP_H

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#256: FILE: include/asm-generic/spinlock_up.h:48:
+# define __raw_spin_lock(lock)		do { (void)(lock); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#257: FILE: include/asm-generic/spinlock_up.h:49:
+# define __raw_spin_lock_flags(lock, flags) \
+				do { (void)(lock), (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#259: FILE: include/asm-generic/spinlock_up.h:51:
+# define __raw_spin_unlock(lock)	do { (void)(lock); } while (0)

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: include/asm-generic/spinlock_up.h:59:
+#define __raw_read_lock(lock)		do { (void)(lock); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#267: FILE: include/asm-generic/spinlock_up.h:59:
+#define __raw_read_lock(lock)		do { (void)(lock); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: include/asm-generic/spinlock_up.h:60:
+#define __raw_read_unlock(lock)		do { (void)(lock); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#268: FILE: include/asm-generic/spinlock_up.h:60:
+#define __raw_read_unlock(lock)		do { (void)(lock); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#269: FILE: include/asm-generic/spinlock_up.h:61:
+#define __raw_write_lock(lock)		do { (void)(lock); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#269: FILE: include/asm-generic/spinlock_up.h:61:
+#define __raw_write_lock(lock)		do { (void)(lock); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#270: FILE: include/asm-generic/spinlock_up.h:62:
+#define __raw_write_unlock(lock)	do { (void)(lock); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#270: FILE: include/asm-generic/spinlock_up.h:62:
+#define __raw_write_unlock(lock)	do { (void)(lock); } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: include/linux/spinlock_smp.h:1:
+#ifndef __LINUX_SPINLOCK_SMP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#294: FILE: include/linux/spinlock_smp.h:5:
+ * include/linux/spinlock_smp.h - SMP (and UP-debug) version of spinlocks.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: include/linux/spinlock_smp.h:12:
+#define assert_spin_locked(x)	BUG_ON(!spin_is_locked(x))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#301: FILE: include/linux/spinlock_smp.h:12:
+#define assert_spin_locked(x)	BUG_ON(!spin_is_locked(x))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#307: FILE: include/linux/spinlock_smp.h:18:
+void __lockfunc _spin_lock(spinlock_t *lock)	__acquires(spinlock_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#308: FILE: include/linux/spinlock_smp.h:19:
+void __lockfunc _read_lock(rwlock_t *lock)	__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#309: FILE: include/linux/spinlock_smp.h:20:
+void __lockfunc _write_lock(rwlock_t *lock)	__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#311: FILE: include/linux/spinlock_smp.h:22:
+void __lockfunc _spin_unlock(spinlock_t *lock)	__releases(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#312: FILE: include/linux/spinlock_smp.h:23:
+void __lockfunc _read_unlock(rwlock_t *lock)	__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#313: FILE: include/linux/spinlock_smp.h:24:
+void __lockfunc _write_unlock(rwlock_t *lock)	__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#315: FILE: include/linux/spinlock_smp.h:26:
+unsigned long __lockfunc _spin_lock_irqsave(spinlock_t *lock)	__acquires(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#316: FILE: include/linux/spinlock_smp.h:27:
+unsigned long __lockfunc _read_lock_irqsave(rwlock_t *lock)	__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#317: FILE: include/linux/spinlock_smp.h:28:
+unsigned long __lockfunc _write_lock_irqsave(rwlock_t *lock)	__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#319: FILE: include/linux/spinlock_smp.h:30:
+void __lockfunc _spin_lock_irq(spinlock_t *lock)	__acquires(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#320: FILE: include/linux/spinlock_smp.h:31:
+void __lockfunc _spin_lock_bh(spinlock_t *lock)		__acquires(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#321: FILE: include/linux/spinlock_smp.h:32:
+void __lockfunc _read_lock_irq(rwlock_t *lock)		__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#322: FILE: include/linux/spinlock_smp.h:33:
+void __lockfunc _read_lock_bh(rwlock_t *lock)		__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#323: FILE: include/linux/spinlock_smp.h:34:
+void __lockfunc _write_lock_irq(rwlock_t *lock)		__acquires(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#324: FILE: include/linux/spinlock_smp.h:35:
+void __lockfunc _write_lock_bh(rwlock_t *lock)		__acquires(rwlock_t);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#326: FILE: include/linux/spinlock_smp.h:37:
+void __lockfunc _spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)	__releases(spinlock_t);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#326: FILE: include/linux/spinlock_smp.h:37:
+void __lockfunc _spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)	__releases(spinlock_t);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#327: FILE: include/linux/spinlock_smp.h:38:
+void __lockfunc _spin_unlock_irq(spinlock_t *lock)				__releases(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#327: FILE: include/linux/spinlock_smp.h:38:
+void __lockfunc _spin_unlock_irq(spinlock_t *lock)				__releases(spinlock_t);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#328: FILE: include/linux/spinlock_smp.h:39:
+void __lockfunc _spin_unlock_bh(spinlock_t *lock)				__releases(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#328: FILE: include/linux/spinlock_smp.h:39:
+void __lockfunc _spin_unlock_bh(spinlock_t *lock)				__releases(spinlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#329: FILE: include/linux/spinlock_smp.h:40:
+void __lockfunc _read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)	__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#329: FILE: include/linux/spinlock_smp.h:40:
+void __lockfunc _read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)	__releases(rwlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#330: FILE: include/linux/spinlock_smp.h:41:
+void __lockfunc _read_unlock_irq(rwlock_t *lock)				__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#330: FILE: include/linux/spinlock_smp.h:41:
+void __lockfunc _read_unlock_irq(rwlock_t *lock)				__releases(rwlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#331: FILE: include/linux/spinlock_smp.h:42:
+void __lockfunc _read_unlock_bh(rwlock_t *lock)					__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#331: FILE: include/linux/spinlock_smp.h:42:
+void __lockfunc _read_unlock_bh(rwlock_t *lock)					__releases(rwlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#332: FILE: include/linux/spinlock_smp.h:43:
+void __lockfunc _write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)	__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#332: FILE: include/linux/spinlock_smp.h:43:
+void __lockfunc _write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)	__releases(rwlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#333: FILE: include/linux/spinlock_smp.h:44:
+void __lockfunc _write_unlock_irq(rwlock_t *lock)				__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#333: FILE: include/linux/spinlock_smp.h:44:
+void __lockfunc _write_unlock_irq(rwlock_t *lock)				__releases(rwlock_t);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#334: FILE: include/linux/spinlock_smp.h:45:
+void __lockfunc _write_unlock_bh(rwlock_t *lock)				__releases(rwlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#334: FILE: include/linux/spinlock_smp.h:45:
+void __lockfunc _write_unlock_bh(rwlock_t *lock)				__releases(rwlock_t);

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#348: FILE: include/linux/spinlock.h:5:
+ * include/linux/spinlock.h - generic spinlock/rwlock declarations

WARNING:NEW_TYPEDEFS: do not add new typedefs
#578: FILE: include/linux/spinlock.h:90:
+typedef struct {

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#592: FILE: include/linux/spinlock.h:103:
+ * Pull the __raw*() functions/declarations (UP-nondebug doesnt need them):
                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#705: FILE: include/linux/spinlock.h:112:
+# define SPIN_LOCK_UNLOCKED						\
+	(spinlock_t)	{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED,	\
+				.magic = SPINLOCK_MAGIC,		\
+				.owner_pid = -1,			\
+				.owner_cpu = -1 }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#710: FILE: include/linux/spinlock.h:117:
+#define RW_LOCK_UNLOCKED						\
+	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED,	\
+				.magic = RWLOCK_MAGIC,			\
+				.owner_pid = -1,			\
+				.owner_cpu = -1 }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#716: FILE: include/linux/spinlock.h:123:
+# define SPIN_LOCK_UNLOCKED \
+	(spinlock_t)	{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#718: FILE: include/linux/spinlock.h:125:
+#define RW_LOCK_UNLOCKED \
+	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED }

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#729: FILE: include/linux/spinlock.h:129:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#730: FILE: include/linux/spinlock.h:130:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while (0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#747: FILE: include/linux/spinlock.h:132:
+#define spin_is_locked(x)	__raw_spin_is_locked(&(x)->raw_lock)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#748: FILE: include/linux/spinlock.h:133:
+#define spin_unlock_wait(x)	do { barrier(); } while (spin_is_locked(x))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: include/linux/spinlock.h:145:
+ extern void _raw_spin_lock(spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#854: FILE: include/linux/spinlock.h:145:
+ extern void _raw_spin_lock(spinlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: include/linux/spinlock.h:146:
+ extern void _raw_spin_lock_flags(spinlock_t *lock, unsigned long *flags);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#855: FILE: include/linux/spinlock.h:146:
+ extern void _raw_spin_lock_flags(spinlock_t *lock, unsigned long *flags);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: include/linux/spinlock.h:147:
+ extern int _raw_spin_trylock(spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#856: FILE: include/linux/spinlock.h:147:
+ extern int _raw_spin_trylock(spinlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: include/linux/spinlock.h:148:
+ extern void _raw_spin_unlock(spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: include/linux/spinlock.h:148:
+ extern void _raw_spin_unlock(spinlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: include/linux/spinlock.h:150:
+ extern void _raw_read_lock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: include/linux/spinlock.h:150:
+ extern void _raw_read_lock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: include/linux/spinlock.h:151:
+ extern int _raw_read_trylock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: include/linux/spinlock.h:151:
+ extern int _raw_read_trylock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: include/linux/spinlock.h:152:
+ extern void _raw_read_unlock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#861: FILE: include/linux/spinlock.h:152:
+ extern void _raw_read_unlock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: include/linux/spinlock.h:153:
+ extern void _raw_write_lock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#862: FILE: include/linux/spinlock.h:153:
+ extern void _raw_write_lock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: include/linux/spinlock.h:154:
+ extern int _raw_write_trylock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#863: FILE: include/linux/spinlock.h:154:
+ extern int _raw_write_trylock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: include/linux/spinlock.h:155:
+ extern void _raw_write_unlock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#864: FILE: include/linux/spinlock.h:155:
+ extern void _raw_write_unlock(rwlock_t *lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1028: FILE: include/linux/spinlock.h:246:
+#define atomic_dec_and_lock(atomic,lock) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1029: FILE: include/linux/spinlock.h:247:
+				__cond_lock(_atomic_dec_and_lock(atomic,lock))
 				                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1055: FILE: include/linux/bit_spinlock.h:1:
+#ifndef __LINUX_BIT_SPINLOCK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: include/linux/bit_spinlock.h:37:
+^Ipreempt_disable();^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1108: FILE: include/linux/bit_spinlock.h:54:
+	BUG_ON(!test_bit(bitnum, addr));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1135: FILE: include/linux/spinlock_up.h:1:
+#ifndef __LINUX_SPINLOCK_UP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1139: FILE: include/linux/spinlock_up.h:5:
+ * include/linux/spinlock_up.h - spinlock declarations for UP-nondebug:

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1148: FILE: include/linux/spinlock_up.h:14:
+# define _atomic_dec_and_lock(atomic,lock) atomic_dec_and_test(atomic)
                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#1152: FILE: include/linux/spinlock_up.h:18:
+#define assert_spin_locked(lock)	do { (void)(lock); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1152: FILE: include/linux/spinlock_up.h:18:
+#define assert_spin_locked(lock)	do { (void)(lock); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1154: FILE: include/linux/spinlock_up.h:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1156: FILE: include/linux/spinlock_up.h:22:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1156: FILE: include/linux/spinlock_up.h:22:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1158: FILE: include/linux/spinlock_up.h:24:
+#define _read_trylock(lock)	({preempt_disable();_raw_read_trylock(lock) ? \
                            	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1159: FILE: include/linux/spinlock_up.h:25:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1159: FILE: include/linux/spinlock_up.h:25:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1162: FILE: include/linux/spinlock_up.h:28:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1162: FILE: include/linux/spinlock_up.h:28:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1166: FILE: include/linux/spinlock_up.h:32:
+				1 : ({preempt_enable_no_resched(); local_bh_enable(); 0;});})
 				                                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1166: FILE: include/linux/spinlock_up.h:32:
+				1 : ({preempt_enable_no_resched(); local_bh_enable(); 0;});})
 				                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1168: FILE: include/linux/spinlock_up.h:34:
+#define _spin_lock(lock)	\
+do { \
+	preempt_disable(); \
+	_raw_spin_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1175: FILE: include/linux/spinlock_up.h:41:
+#define _write_lock(lock) \
+do { \
+	preempt_disable(); \
+	_raw_write_lock(lock); \
+	__acquire(lock); \
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1181: FILE: include/linux/spinlock_up.h:47:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: include/linux/spinlock_up.h:47:
+ $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1182: FILE: include/linux/spinlock_up.h:48:
+#define _read_lock(lock)	\
+do { \
+	preempt_disable(); \
+	_raw_read_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1189: FILE: include/linux/spinlock_up.h:55:
+#define _spin_unlock(lock) \
+do { \
+	_raw_spin_unlock(lock); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1196: FILE: include/linux/spinlock_up.h:62:
+#define _write_unlock(lock) \
+do { \
+	_raw_write_unlock(lock); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1203: FILE: include/linux/spinlock_up.h:69:
+#define _read_unlock(lock) \
+do { \
+	_raw_read_unlock(lock); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1210: FILE: include/linux/spinlock_up.h:76:
+#define _spin_lock_irqsave(lock, flags) \
+do {	\
+	local_irq_save(flags); \
+	preempt_disable(); \
+	_raw_spin_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1218: FILE: include/linux/spinlock_up.h:84:
+#define _spin_lock_irq(lock) \
+do { \
+	local_irq_disable(); \
+	preempt_disable(); \
+	_raw_spin_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1226: FILE: include/linux/spinlock_up.h:92:
+#define _spin_lock_bh(lock) \
+do { \
+	local_bh_disable(); \
+	preempt_disable(); \
+	_raw_spin_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1234: FILE: include/linux/spinlock_up.h:100:
+#define _read_lock_irqsave(lock, flags) \
+do {	\
+	local_irq_save(flags); \
+	preempt_disable(); \
+	_raw_read_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1242: FILE: include/linux/spinlock_up.h:108:
+#define _read_lock_irq(lock) \
+do { \
+	local_irq_disable(); \
+	preempt_disable(); \
+	_raw_read_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1250: FILE: include/linux/spinlock_up.h:116:
+#define _read_lock_bh(lock) \
+do { \
+	local_bh_disable(); \
+	preempt_disable(); \
+	_raw_read_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1258: FILE: include/linux/spinlock_up.h:124:
+#define _write_lock_irqsave(lock, flags) \
+do {	\
+	local_irq_save(flags); \
+	preempt_disable(); \
+	_raw_write_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1266: FILE: include/linux/spinlock_up.h:132:
+#define _write_lock_irq(lock) \
+do { \
+	local_irq_disable(); \
+	preempt_disable(); \
+	_raw_write_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1274: FILE: include/linux/spinlock_up.h:140:
+#define _write_lock_bh(lock) \
+do { \
+	local_bh_disable(); \
+	preempt_disable(); \
+	_raw_write_lock(lock); \
+	__acquire(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1282: FILE: include/linux/spinlock_up.h:148:
+#define _spin_unlock_irqrestore(lock, flags) \
+do { \
+	_raw_spin_unlock(lock); \
+	local_irq_restore(flags); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1290: FILE: include/linux/spinlock_up.h:156:
+#define _spin_unlock_irq(lock) \
+do { \
+	_raw_spin_unlock(lock); \
+	local_irq_enable(); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1298: FILE: include/linux/spinlock_up.h:164:
+#define _spin_unlock_bh(lock) \
+do { \
+	_raw_spin_unlock(lock); \
+	preempt_enable_no_resched(); \
+	local_bh_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1306: FILE: include/linux/spinlock_up.h:172:
+#define _write_unlock_bh(lock) \
+do { \
+	_raw_write_unlock(lock); \
+	preempt_enable_no_resched(); \
+	local_bh_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1314: FILE: include/linux/spinlock_up.h:180:
+#define _read_unlock_irqrestore(lock, flags) \
+do { \
+	_raw_read_unlock(lock); \
+	local_irq_restore(flags); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1322: FILE: include/linux/spinlock_up.h:188:
+#define _write_unlock_irqrestore(lock, flags) \
+do { \
+	_raw_write_unlock(lock); \
+	local_irq_restore(flags); \
+	preempt_enable(); \
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1330: FILE: include/linux/spinlock_up.h:196:
+#define _read_unlock_irq(lock)	\
+do { \
+	_raw_read_unlock(lock);	\
+	local_irq_enable();	\
+	preempt_enable();	\
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1338: FILE: include/linux/spinlock_up.h:204:
+#define _read_unlock_bh(lock)	\
+do { \
+	_raw_read_unlock(lock);	\
+	preempt_enable_no_resched();	\
+	local_bh_enable();	\
+	__release(lock); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1346: FILE: include/linux/spinlock_up.h:212:
+#define _write_unlock_irq(lock)	\
+do { \
+	_raw_write_unlock(lock);	\
+	local_irq_enable();	\
+	preempt_enable();	\
+	__release(lock); \
+} while (0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1403: FILE: include/asm-i386/spinlock.h:22:
+		(*(volatile signed char *)(&(x)->slock) <= 0)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1544: FILE: include/asm-i386/spinlock.h:159:
+	asm volatile("lock ; incl %0" :"=m" (rw->lock) : : "memory");
 	                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1549: FILE: include/asm-i386/spinlock.h:164:
+	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" (rw->lock) : : "memory");
 	                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1569: FILE: include/asm-i386/spinlock_types.h:1:
+#ifndef __ASM_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1572: FILE: include/asm-i386/spinlock_types.h:4:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1573: FILE: include/asm-i386/spinlock_types.h:5:
+	volatile unsigned int slock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1578: FILE: include/asm-i386/spinlock_types.h:10:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1579: FILE: include/asm-i386/spinlock_types.h:11:
+	volatile unsigned int lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1634: FILE: include/asm-x86_64/spinlock.h:21:
+		(*(volatile signed char *)(&(x)->slock) <= 0)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1653: FILE: include/asm-x86_64/spinlock.h:37:
+		:"=m" (lock->slock) : : "memory"
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1686: FILE: include/asm-x86_64/spinlock.h:43:
+		:"=m" (lock->slock) : : "memory");
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1699: FILE: include/asm-x86_64/spinlock.h:53:
+		:"=q" (oldval), "=m" (lock->slock)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1785: FILE: include/asm-x86_64/spinlock.h:105:
+	asm volatile("lock ; incl %0" :"=m" (rw->lock) : : "memory");
 	                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1790: FILE: include/asm-x86_64/spinlock.h:110:
+	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" (rw->lock) : : "memory");
 	                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1810: FILE: include/asm-x86_64/spinlock_types.h:1:
+#ifndef __ASM_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1813: FILE: include/asm-x86_64/spinlock_types.h:4:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1814: FILE: include/asm-x86_64/spinlock_types.h:5:
+	volatile unsigned int slock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1819: FILE: include/asm-x86_64/spinlock_types.h:10:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1820: FILE: include/asm-x86_64/spinlock_types.h:11:
+	volatile unsigned int lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1839: FILE: lib/spinlock_debug.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1857: FILE: lib/spinlock_debug.c:19:
+		printk("spinlock BUG: %s, at %s:%d! lock: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: lib/spinlock_debug.c:20:
+		printk("spinlock BUG: %s, at %s:%d! lock: %p\n",
+			msg, file, line, lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1863: FILE: lib/spinlock_debug.c:25:
+		BUG();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1870: FILE: lib/spinlock_debug.c:32:
+#define SPIN_BUG_ON(cond, lock, msg) \
+		if (unlikely(cond)) spin_bug(lock, __FILE__, __LINE__, msg)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1871: FILE: lib/spinlock_debug.c:33:
+		if (unlikely(cond)) spin_bug(lock, __FILE__, __LINE__, msg)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: lib/spinlock_debug.c:40:
+	SPIN_BUG_ON(lock->owner_cpu == raw_smp_processor_id(),
+							lock, "irq recursion");

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1890: FILE: lib/spinlock_debug.c:52:
+	SPIN_BUG_ON(!spin_is_locked(lock), lock, "already unlocked");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1893: FILE: lib/spinlock_debug.c:55:
+	SPIN_BUG_ON(lock->owner_cpu != raw_smp_processor_id(),
+							lock, "wrong CPU");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1941: FILE: lib/spinlock_debug.c:103:
+		printk("rwlock BUG: %s, at %s:%d! lock: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1942: FILE: lib/spinlock_debug.c:104:
+		printk("rwlock BUG: %s, at %s:%d! lock: %p\n",
+			msg, file, line, lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1947: FILE: lib/spinlock_debug.c:109:
+		BUG();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1954: FILE: lib/spinlock_debug.c:116:
+#define RWLOCK_BUG_ON(cond, lock, msg) \
+		if (unlikely(cond)) rwlock_bug(lock, __FILE__, __LINE__, msg)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1955: FILE: lib/spinlock_debug.c:117:
+		if (unlikely(cond)) rwlock_bug(lock, __FILE__, __LINE__, msg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1988: FILE: lib/spinlock_debug.c:150:
+	RWLOCK_BUG_ON(lock->owner_cpu == raw_smp_processor_id(),
+							lock, "irq recursion");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2002: FILE: lib/spinlock_debug.c:164:
+	RWLOCK_BUG_ON(lock->owner_cpu != raw_smp_processor_id(),
+							lock, "wrong CPU");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 91 warnings, 43 checks, 1852 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
