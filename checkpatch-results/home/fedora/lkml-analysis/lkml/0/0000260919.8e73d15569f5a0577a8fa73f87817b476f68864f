WARNING:TYPO_SPELLING: 'interrested' may be misspelled - perhaps 'interested'?
#33: 
Nobody interrested in this syscall?
       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#64: FILE: fs/open.c:1051:
+static ssize_t revoke_read(struct file *filp,
                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#72: FILE: fs/open.c:1059:
+static int revoke_release(struct inode *inode, struct file *filp)
                                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#79: FILE: fs/open.c:1066:
+static ssize_t revoke_readv(struct file *filp,
                                          ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#87: FILE: fs/open.c:1074:
+static struct file_operations revoke_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#106: FILE: fs/open.c:1093:
+static int filp_revoke(struct file *filp, struct inode *inode)
                                     ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#108: FILE: fs/open.c:1095:
+	struct file_operations *fops = filp->f_op;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#112: FILE: fs/open.c:1099:
+	if (!fops || !file_count(filp))
 	                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#118: FILE: fs/open.c:1105:
+		fops->flush(filp);
 		            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#120: FILE: fs/open.c:1107:
+		ret = fops->release(inode, filp);
 		                           ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/open.c:1118:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#134: FILE: fs/open.c:1121:
+	struct file *filp;
 	             ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#136: FILE: fs/open.c:1123:
+printk("called sys_revoke()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_revoke', this function's name, in a string
#136: FILE: fs/open.c:1123:
+printk("called sys_revoke()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#138: FILE: fs/open.c:1125:
+	if (user_path_walk(path, &nd)) {
 	                          ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#138: FILE: fs/open.c:1125:
+	if (user_path_walk(path, &nd)) {
+printk("user_path_walk() failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#139: FILE: fs/open.c:1126:
+printk("user_path_walk() failed\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#143: FILE: fs/open.c:1130:
+	if (!nd.dentry->d_inode) {
 	     ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#143: FILE: fs/open.c:1130:
+	if (!nd.dentry->d_inode) {
+printk("no inode\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#144: FILE: fs/open.c:1131:
+printk("no inode\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#149: FILE: fs/open.c:1136:
+	if (!S_ISCHR(nd.dentry->d_inode->i_mode) &&
 	             ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#149: FILE: fs/open.c:1136:
+	if (!S_ISCHR(nd.dentry->d_inode->i_mode) &&
[...]
+printk("no CHK/BLK\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#150: FILE: fs/open.c:1137:
+	    !S_ISBLK(nd.dentry->d_inode->i_mode)) {
 	             ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: fs/open.c:1138:
+printk("no CHK/BLK\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#155: FILE: fs/open.c:1142:
+	if ((current->fsuid != nd.dentry->d_inode->i_uid) ||
 	                       ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#155: FILE: fs/open.c:1142:
+	if ((current->fsuid != nd.dentry->d_inode->i_uid) ||
[...]
+printk("perm\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->fsuid != nd.dentry->d_inode->i_uid'
#155: FILE: fs/open.c:1142:
+	if ((current->fsuid != nd.dentry->d_inode->i_uid) ||
+	    !capable(CAP_FOWNER)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: fs/open.c:1144:
+printk("perm\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/open.c:1149:
+	sb = nd.dentry->d_inode->i_sb;
 	     ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#165: FILE: fs/open.c:1152:
+		filp = list_entry(p, struct file, f_list);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#167: FILE: fs/open.c:1154:
+		if (!filp || !filp->f_dentry)
 		     ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/open.c:1156:
+		if (nd.dentry != filp->f_dentry)
 		    ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#176: FILE: fs/open.c:1163:
+		ret = filp_revoke(filp, filp->f_dentry->d_inode);
 		                  ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: fs/open.c:1166:
+printk("done");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#182: FILE: fs/open.c:1169:
+	path_release(&nd);
 	              ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 34 warnings, 1 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
