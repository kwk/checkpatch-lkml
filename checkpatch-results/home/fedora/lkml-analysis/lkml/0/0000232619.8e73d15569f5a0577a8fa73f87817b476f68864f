Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: drivers/i2c/chips/lm63.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#125: FILE: drivers/i2c/chips/lm63.c:36:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#126: FILE: drivers/i2c/chips/lm63.c:37:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#192: FILE: drivers/i2c/chips/lm63.c:103:
+ * value, it uses signed 8-bit values with LSB = 1 degree Celcius.
                                                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#194: FILE: drivers/i2c/chips/lm63.c:105:
+ * with LSB = 0.125 degree Celcius, left-justified in 16-bit registers.
                            ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#197: FILE: drivers/i2c/chips/lm63.c:108:
+#define FAN_FROM_REG(reg)	((reg) == 0xFFFC || (reg) == 0 ? 0 : \
+				 5400000 / (reg))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#199: FILE: drivers/i2c/chips/lm63.c:110:
+#define FAN_TO_REG(val)		((val) <= 82 ? 0xFFFC : \
+				 (5400000 / (val)) & 0xFFFC)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#202: FILE: drivers/i2c/chips/lm63.c:113:
+#define TEMP8_TO_REG(val)	((val) <= -128000 ? -128 : \
+				 (val) >= 127000 ? 127 : \
+				 (val) < 0 ? ((val) - 500) / 1000 : \
+				 ((val) + 500) / 1000)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#207: FILE: drivers/i2c/chips/lm63.c:118:
+#define TEMP11_TO_REG(val)	((val) <= -128000 ? 0x8000 : \
+				 (val) >= 127875 ? 0x7FE0 : \
+				 (val) < 0 ? ((val) - 62) / 125 * 32 : \
+				 ((val) + 62) / 125 * 32)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#211: FILE: drivers/i2c/chips/lm63.c:122:
+#define HYST_TO_REG(val)	((val) <= 0 ? 0 : \
+				 (val) >= 127000 ? 127 : \
+				 ((val) + 500) / 1000)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#269: FILE: drivers/i2c/chips/lm63.c:180:
+#define show_fan(value) \
+static ssize_t show_##value(struct device *dev, char *buf) \
+{ \
+	struct lm63_data *data = lm63_update_device(dev); \
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->value)); \
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#275: FILE: drivers/i2c/chips/lm63.c:186:
+}
+show_fan(fan1_input);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/i2c/chips/lm63.c:190:
+static ssize_t set_fan1_low(struct device *dev, const char *buf,
+	size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#283: FILE: drivers/i2c/chips/lm63.c:194:
+	unsigned long val = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: drivers/i2c/chips/lm63.c:195:
+	unsigned long val = simple_strtoul(buf, NULL, 10);
+	data->fan1_low = FAN_TO_REG(val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: drivers/i2c/chips/lm63.c:206:
+	struct lm63_data *data = lm63_update_device(dev);
+	return sprintf(buf, "%d\n", data->pwm1_value >= 2 * data->pwm1_freq ?

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/i2c/chips/lm63.c:216:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#309: FILE: drivers/i2c/chips/lm63.c:220:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: drivers/i2c/chips/lm63.c:231:
+	struct lm63_data *data = lm63_update_device(dev);
+	return sprintf(buf, "%d\n", data->config_fan & 0x20 ? 1 : 2);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#323: FILE: drivers/i2c/chips/lm63.c:234:
+#define show_temp8(value) \
+static ssize_t show_##value(struct device *dev, char *buf) \
+{ \
+	struct lm63_data *data = lm63_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP8_FROM_REG(data->value)); \
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#329: FILE: drivers/i2c/chips/lm63.c:240:
+}
+#define show_temp11(value) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#329: FILE: drivers/i2c/chips/lm63.c:240:
+#define show_temp11(value) \
+static ssize_t show_##value(struct device *dev, char *buf) \
+{ \
+	struct lm63_data *data = lm63_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP11_FROM_REG(data->value)); \
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#335: FILE: drivers/i2c/chips/lm63.c:246:
+}
+show_temp8(temp1_input);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#342: FILE: drivers/i2c/chips/lm63.c:253:
+#define set_temp8(value, reg) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm63_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP8_TO_REG(val); \
+	i2c_smbus_write_byte_data(client, reg, data->value); \
+	return count; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#342: FILE: drivers/i2c/chips/lm63.c:253:
+#define set_temp8(value, reg) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm63_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP8_TO_REG(val); \
+	i2c_smbus_write_byte_data(client, reg, data->value); \
+	return count; \
+}

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#348: FILE: drivers/i2c/chips/lm63.c:259:
+	long val = simple_strtol(buf, NULL, 10); \

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#353: FILE: drivers/i2c/chips/lm63.c:264:
+}
+#define set_temp11(value, reg_msb, reg_lsb) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#353: FILE: drivers/i2c/chips/lm63.c:264:
+#define set_temp11(value, reg_msb, reg_lsb) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm63_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP11_TO_REG(val); \
+	i2c_smbus_write_byte_data(client, reg_msb, data->value >> 8); \
+	i2c_smbus_write_byte_data(client, reg_lsb, data->value & 0xff); \
+	return count; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#353: FILE: drivers/i2c/chips/lm63.c:264:
+#define set_temp11(value, reg_msb, reg_lsb) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm63_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP11_TO_REG(val); \
+	i2c_smbus_write_byte_data(client, reg_msb, data->value >> 8); \
+	i2c_smbus_write_byte_data(client, reg_lsb, data->value & 0xff); \
+	return count; \
+}

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#359: FILE: drivers/i2c/chips/lm63.c:270:
+	long val = simple_strtol(buf, NULL, 10); \

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#365: FILE: drivers/i2c/chips/lm63.c:276:
+}
+set_temp8(temp1_high, LM63_REG_LOCAL_HIGH);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#370: FILE: drivers/i2c/chips/lm63.c:281:
+/* Hysteresis register holds a relative value, while we want to present
+   an absolute to user-space */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#370: FILE: drivers/i2c/chips/lm63.c:281:
+   an absolute to user-space */

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: drivers/i2c/chips/lm63.c:285:
+	struct lm63_data *data = lm63_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP8_FROM_REG(data->temp2_crit)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#379: FILE: drivers/i2c/chips/lm63.c:290:
+/* And now the other way around, user-space provides an absolute
+   hysteresis value and we have to store a relative one */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: drivers/i2c/chips/lm63.c:290:
+   hysteresis value and we have to store a relative one */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/i2c/chips/lm63.c:292:
+static ssize_t set_temp2_crit_hyst(struct device *dev, const char *buf,
+	size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#386: FILE: drivers/i2c/chips/lm63.c:297:
+		   simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: drivers/i2c/chips/lm63.c:306:
+	struct lm63_data *data = lm63_update_device(dev);
+	return sprintf(buf, "%u\n", data->alarms);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_fan1_input' to 'fan1_input_show'
#396: FILE: drivers/i2c/chips/lm63.c:307:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#398: FILE: drivers/i2c/chips/lm63.c:309:
+static DEVICE_ATTR(fan1_input, S_IRUGO, show_fan1_input, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_fan1_low' to 'fan1_min_show' 'set_fan1_low' to 'fan1_min_store'
#399: FILE: drivers/i2c/chips/lm63.c:310:
+static DEVICE_ATTR(fan1_min, S_IWUSR | S_IRUGO, show_fan1_low,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#399: FILE: drivers/i2c/chips/lm63.c:310:
+static DEVICE_ATTR(fan1_min, S_IWUSR | S_IRUGO, show_fan1_low,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_pwm1' to 'pwm1_show' 'set_pwm1' to 'pwm1_store'
#402: FILE: drivers/i2c/chips/lm63.c:313:
+static DEVICE_ATTR(pwm1, S_IWUSR | S_IRUGO, show_pwm1, set_pwm1);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#402: FILE: drivers/i2c/chips/lm63.c:313:
+static DEVICE_ATTR(pwm1, S_IWUSR | S_IRUGO, show_pwm1, set_pwm1);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_pwm1_enable' to 'pwm1_enable_show'
#403: FILE: drivers/i2c/chips/lm63.c:314:
+static DEVICE_ATTR(pwm1_enable, S_IRUGO, show_pwm1_enable, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#403: FILE: drivers/i2c/chips/lm63.c:314:
+static DEVICE_ATTR(pwm1_enable, S_IRUGO, show_pwm1_enable, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_input' to 'temp1_input_show'
#405: FILE: drivers/i2c/chips/lm63.c:316:
+static DEVICE_ATTR(temp1_input, S_IRUGO, show_temp1_input, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#405: FILE: drivers/i2c/chips/lm63.c:316:
+static DEVICE_ATTR(temp1_input, S_IRUGO, show_temp1_input, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_high' to 'temp1_max_show' 'set_temp1_high' to 'temp1_max_store'
#406: FILE: drivers/i2c/chips/lm63.c:317:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO, show_temp1_high,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#406: FILE: drivers/i2c/chips/lm63.c:317:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO, show_temp1_high,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp2_input' to 'temp2_input_show'
#409: FILE: drivers/i2c/chips/lm63.c:320:
+static DEVICE_ATTR(temp2_input, S_IRUGO, show_temp2_input, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#409: FILE: drivers/i2c/chips/lm63.c:320:
+static DEVICE_ATTR(temp2_input, S_IRUGO, show_temp2_input, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp2_low' to 'temp2_min_show' 'set_temp2_low' to 'temp2_min_store'
#410: FILE: drivers/i2c/chips/lm63.c:321:
+static DEVICE_ATTR(temp2_min, S_IWUSR | S_IRUGO, show_temp2_low,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#410: FILE: drivers/i2c/chips/lm63.c:321:
+static DEVICE_ATTR(temp2_min, S_IWUSR | S_IRUGO, show_temp2_low,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp2_high' to 'temp2_max_show' 'set_temp2_high' to 'temp2_max_store'
#412: FILE: drivers/i2c/chips/lm63.c:323:
+static DEVICE_ATTR(temp2_max, S_IWUSR | S_IRUGO, show_temp2_high,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#412: FILE: drivers/i2c/chips/lm63.c:323:
+static DEVICE_ATTR(temp2_max, S_IWUSR | S_IRUGO, show_temp2_high,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp2_crit' to 'temp2_crit_show'
#414: FILE: drivers/i2c/chips/lm63.c:325:
+static DEVICE_ATTR(temp2_crit, S_IRUGO, show_temp2_crit, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#414: FILE: drivers/i2c/chips/lm63.c:325:
+static DEVICE_ATTR(temp2_crit, S_IRUGO, show_temp2_crit, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp2_crit_hyst' to 'temp2_crit_hyst_show' 'set_temp2_crit_hyst' to 'temp2_crit_hyst_store'
#415: FILE: drivers/i2c/chips/lm63.c:326:
+static DEVICE_ATTR(temp2_crit_hyst, S_IWUSR | S_IRUGO, show_temp2_crit_hyst,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#415: FILE: drivers/i2c/chips/lm63.c:326:
+static DEVICE_ATTR(temp2_crit_hyst, S_IWUSR | S_IRUGO, show_temp2_crit_hyst,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#418: FILE: drivers/i2c/chips/lm63.c:329:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#418: FILE: drivers/i2c/chips/lm63.c:329:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#444: FILE: drivers/i2c/chips/lm63.c:355:
+	if (!(data = kmalloc(sizeof(struct lm63_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct lm63_data)...)
#444: FILE: drivers/i2c/chips/lm63.c:355:
+	if (!(data = kmalloc(sizeof(struct lm63_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#451: FILE: drivers/i2c/chips/lm63.c:362:
+	/* The common I2C client data is placed right before the
+	   LM63-specific data. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#451: FILE: drivers/i2c/chips/lm63.c:362:
+	   LM63-specific data. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/i2c/chips/lm63.c:379:
+		man_id = i2c_smbus_read_byte_data(new_client,
+			 LM63_REG_MAN_ID);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: drivers/i2c/chips/lm63.c:381:
+		chip_id = i2c_smbus_read_byte_data(new_client,
+			  LM63_REG_CHIP_ID);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: drivers/i2c/chips/lm63.c:383:
+		reg_config1 = i2c_smbus_read_byte_data(new_client,
+			      LM63_REG_CONFIG1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: drivers/i2c/chips/lm63.c:385:
+		reg_config2 = i2c_smbus_read_byte_data(new_client,
+			      LM63_REG_CONFIG2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/i2c/chips/lm63.c:387:
+		reg_alert_status = i2c_smbus_read_byte_data(new_client,
+				   LM63_REG_ALERT_STATUS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: drivers/i2c/chips/lm63.c:389:
+		reg_alert_mask = i2c_smbus_read_byte_data(new_client,
+				 LM63_REG_ALERT_MASK);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#481: FILE: drivers/i2c/chips/lm63.c:392:
+		if (man_id == 0x01 /* National Semiconductor */
+		 && chip_id == 0x41 /* LM63 */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#482: FILE: drivers/i2c/chips/lm63.c:393:
+		 && chip_id == 0x41 /* LM63 */
+		 && (reg_config1 & 0x18) == 0x00

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#483: FILE: drivers/i2c/chips/lm63.c:394:
+		 && (reg_config1 & 0x18) == 0x00
+		 && (reg_config2 & 0xF8) == 0x00

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#484: FILE: drivers/i2c/chips/lm63.c:395:
+		 && (reg_config2 & 0xF8) == 0x00
+		 && (reg_alert_status & 0x20) == 0x00

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#485: FILE: drivers/i2c/chips/lm63.c:396:
+		 && (reg_alert_status & 0x20) == 0x00
+		 && (reg_alert_mask & 0xA4) == 0xA4) {

WARNING:SPLIT_STRING: quoted string split across lines
#489: FILE: drivers/i2c/chips/lm63.c:400:
+			dev_dbg(&adapter->dev, "Unsupported chip "
+				"(man_id=0x%02X, chip_id=0x%02X).\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#495: FILE: drivers/i2c/chips/lm63.c:406:
+	strlcpy(new_client->name, "lm63", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#500: FILE: drivers/i2c/chips/lm63.c:411:
+	if ((err = i2c_attach_client(new_client)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#531: FILE: drivers/i2c/chips/lm63.c:442:
+/* Idealy we shouldn't have to initialize anything, since the BIOS
+   should have taken care of everything */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#531: FILE: drivers/i2c/chips/lm63.c:442:
+   should have taken care of everything */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#569: FILE: drivers/i2c/chips/lm63.c:480:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#571: FILE: drivers/i2c/chips/lm63.c:482:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#586: FILE: drivers/i2c/chips/lm63.c:497:
+	if ((jiffies - data->last_updated > HZ) ||
+	    (jiffies < data->last_updated) ||
+	    !data->valid) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#587: FILE: drivers/i2c/chips/lm63.c:498:
+	    (jiffies < data->last_updated) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/i2c/chips/lm63.c:503:
+			data->fan1_input = i2c_smbus_read_byte_data(client,
+					   LM63_REG_TACH_COUNT_LSB) & 0xFC;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/i2c/chips/lm63.c:513:
+		data->pwm1_freq = i2c_smbus_read_byte_data(client,
+				  LM63_REG_PWM_FREQ);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/i2c/chips/lm63.c:517:
+		data->pwm1_value = i2c_smbus_read_byte_data(client,
+				   LM63_REG_PWM_VALUE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: drivers/i2c/chips/lm63.c:520:
+		data->temp1_input = i2c_smbus_read_byte_data(client,
+				    LM63_REG_LOCAL_TEMP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/i2c/chips/lm63.c:522:
+		data->temp1_high = i2c_smbus_read_byte_data(client,
+				   LM63_REG_LOCAL_HIGH);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: drivers/i2c/chips/lm63.c:526:
+		data->temp2_input = i2c_smbus_read_byte_data(client,
+				    LM63_REG_REMOTE_TEMP_MSB) << 8;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/i2c/chips/lm63.c:538:
+		data->temp2_crit = i2c_smbus_read_byte_data(client,
+				   LM63_REG_REMOTE_TCRIT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/i2c/chips/lm63.c:540:
+		data->temp2_crit_hyst = i2c_smbus_read_byte_data(client,
+					LM63_REG_REMOTE_TCRIT_HYST);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/i2c/chips/lm63.c:543:
+		data->alarms = i2c_smbus_read_byte_data(client,
+			       LM63_REG_ALERT_STATUS) & 0x7F;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 49 warnings, 41 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
