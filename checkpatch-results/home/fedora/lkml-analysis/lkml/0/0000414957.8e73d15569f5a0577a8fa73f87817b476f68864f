WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: drivers/block/deadline-iosched.c:138:
+		BUG_ON(!ON_HASH(drq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#367: FILE: drivers/block/deadline-iosched.c:173:
+#define RB_EMPTY(root)	((root)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'deadline_rb_add', this function's name, in a string
#408: FILE: drivers/block/deadline-iosched.c:214:
+	blk_dump_rq_flags(drq->request, "deadline_rb_add alias");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: drivers/block/deadline-iosched.c:284:
+			BUG_ON(rb_key != __rq->sector);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dnext"
#638: FILE: drivers/block/deadline-iosched.c:391:
+		if (dnext == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: drivers/block/deadline-iosched.c:490:
+	BUG_ON(!RB_EMPTY(&dd->rb_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: drivers/block/deadline-iosched.c:491:
+	BUG_ON(!RB_EMPTY(&dd->rb_list[WRITE]));

CHECK:BRACES: Unbalanced braces around else statement
#798: FILE: drivers/block/deadline-iosched.c:523:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#844: FILE: drivers/block/deadline-iosched.c:577:
+	BUG_ON(!RB_EMPTY(&dd->rb_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: drivers/block/deadline-iosched.c:578:
+	BUG_ON(!RB_EMPTY(&dd->rb_list[WRITE]));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct deadline_data *' should also have an identifier name
#885: FILE: drivers/block/deadline-iosched.c:679:
+	ssize_t (*show)(struct deadline_data *, char *, size_t, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#885: FILE: drivers/block/deadline-iosched.c:679:
+	ssize_t (*show)(struct deadline_data *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#885: FILE: drivers/block/deadline-iosched.c:679:
+	ssize_t (*show)(struct deadline_data *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#885: FILE: drivers/block/deadline-iosched.c:679:
+	ssize_t (*show)(struct deadline_data *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct deadline_data *' should also have an identifier name
#886: FILE: drivers/block/deadline-iosched.c:680:
+	ssize_t (*store)(struct deadline_data *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#886: FILE: drivers/block/deadline-iosched.c:680:
+	ssize_t (*store)(struct deadline_data *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#886: FILE: drivers/block/deadline-iosched.c:680:
+	ssize_t (*store)(struct deadline_data *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#886: FILE: drivers/block/deadline-iosched.c:680:
+	ssize_t (*store)(struct deadline_data *, const char *, size_t, loff_t);

CHECK:SPACING: No space is necessary after a cast
#902: FILE: drivers/block/deadline-iosched.c:696:
+	char *p = (char *) page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#907: FILE: drivers/block/deadline-iosched.c:701:
+	*var = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#911: FILE: drivers/block/deadline-iosched.c:705:
+#define SHOW_FUNCTION(__FUNC, __VAR)					\
+static ssize_t __FUNC(struct deadline_data *dd, char *page, size_t cnt,	\
+		      loff_t off) 					\
+{									\
+	return deadline_var_show(__VAR, (page), (cnt), (off));		\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#913: FILE: drivers/block/deadline-iosched.c:707:
+^I^I      loff_t off) ^I^I^I^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#917: FILE: drivers/block/deadline-iosched.c:711:
+}
+SHOW_FUNCTION(deadline_fifo_show, dd->fifo_batch);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__PTR' - possible side-effects?
#925: FILE: drivers/block/deadline-iosched.c:719:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct deadline_data *dd, const char *page, size_t cnt, loff_t off)								\
+{									\
+	int ret = deadline_var_store(__PTR, (page), (cnt), (off));	\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#925: FILE: drivers/block/deadline-iosched.c:719:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct deadline_data *dd, const char *page, size_t cnt, loff_t off)								\
+{									\
+	int ret = deadline_var_store(__PTR, (page), (cnt), (off));	\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#925: FILE: drivers/block/deadline-iosched.c:719:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct deadline_data *dd, const char *page, size_t cnt, loff_t off)								\
+{									\
+	int ret = deadline_var_store(__PTR, (page), (cnt), (off));	\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#925: FILE: drivers/block/deadline-iosched.c:719:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct deadline_data *dd, const char *page, size_t cnt, loff_t off)								\
+{									\
+	int ret = deadline_var_store(__PTR, (page), (cnt), (off));	\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#926: FILE: drivers/block/deadline-iosched.c:720:
+static ssize_t __FUNC(struct deadline_data *dd, const char *page, size_t cnt, loff_t off)								\

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#935: FILE: drivers/block/deadline-iosched.c:729:
+}
+STORE_FUNCTION(deadline_fifo_store, &dd->fifo_batch, 0, INT_MAX);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#944: FILE: drivers/block/deadline-iosched.c:738:
+	.attr = {.name = "fifo_batch", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#948: FILE: drivers/block/deadline-iosched.c:742:
+};
+static struct deadline_fs_entry deadline_readexpire_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#949: FILE: drivers/block/deadline-iosched.c:743:
+	.attr = {.name = "read_expire", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#953: FILE: drivers/block/deadline-iosched.c:747:
+};
+static struct deadline_fs_entry deadline_seekcost_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#954: FILE: drivers/block/deadline-iosched.c:748:
+	.attr = {.name = "seek_cost", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#958: FILE: drivers/block/deadline-iosched.c:752:
+};
+static struct deadline_fs_entry deadline_streamunit_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#959: FILE: drivers/block/deadline-iosched.c:753:
+	.attr = {.name = "stream_unit", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#963: FILE: drivers/block/deadline-iosched.c:757:
+};
+static struct deadline_fs_entry deadline_writesstarved_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#964: FILE: drivers/block/deadline-iosched.c:758:
+	.attr = {.name = "writes_starved", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#968: FILE: drivers/block/deadline-iosched.c:762:
+};
+static struct deadline_fs_entry deadline_frontmerges_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#969: FILE: drivers/block/deadline-iosched.c:763:
+	.attr = {.name = "front_merges", .mode = S_IRUGO | S_IWUSR },

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1010: FILE: drivers/block/deadline-iosched.c:804:
+static struct sysfs_ops deadline_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1015: FILE: drivers/block/deadline-iosched.c:809:
+extern struct subsystem block_subsys;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1239: FILE: include/linux/elevator.h:55:
+extern int elv_register_fs(struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#1239: FILE: include/linux/elevator.h:55:
+extern int elv_register_fs(struct gendisk *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1240: FILE: include/linux/elevator.h:56:
+extern void elv_unregister_fs(struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#1240: FILE: include/linux/elevator.h:56:
+extern void elv_unregister_fs(struct gendisk *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 30 warnings, 16 checks, 1123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
