WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
This patch includes updates and cleanup for the PPC64 proc/lparcfg interface.

WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#44: 
	in the system.  (i.e. systemcfg->processorcount isnt the desired
	                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#50: 
      - removed unneeded parms from get-system-parameter rtas_call.
                         ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <itLpNaca>
#82: FILE: arch/ppc64/kernel/LparData.c:127:
+EXPORT_SYMBOL(itLpNaca);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xItExtVpdPanel>
#89: FILE: arch/ppc64/kernel/LparData.c:134:
+EXPORT_SYMBOL(xItExtVpdPanel);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: arch/ppc64/kernel/lparcfg.c:43:
+void log_plpar_hcall_return(unsigned long rc,char * tag)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#125: FILE: arch/ppc64/kernel/lparcfg.c:43:
+void log_plpar_hcall_return(unsigned long rc,char * tag)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#127: FILE: arch/ppc64/kernel/lparcfg.c:45:
+	if (rc ==0 ) /* success, return */
 	       ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#127: FILE: arch/ppc64/kernel/lparcfg.c:45:
+	if (rc ==0 ) /* success, return */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#131: FILE: arch/ppc64/kernel/lparcfg.c:49:
+		printk(KERN_INFO "plpar-hcall (%s) failed with hardware fault\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: arch/ppc64/kernel/lparcfg.c:49:
+		printk(KERN_INFO "plpar-hcall (%s) failed with hardware fault\n",tag);
 		                                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#133: FILE: arch/ppc64/kernel/lparcfg.c:51:
+		printk(KERN_INFO "plpar-hcall (%s) failed; function not allowed\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: arch/ppc64/kernel/lparcfg.c:51:
+		printk(KERN_INFO "plpar-hcall (%s) failed; function not allowed\n",tag);
 		                                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#135: FILE: arch/ppc64/kernel/lparcfg.c:53:
+		printk(KERN_INFO "plpar-hcall (%s) failed; not authorized to this function\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: arch/ppc64/kernel/lparcfg.c:53:
+		printk(KERN_INFO "plpar-hcall (%s) failed; not authorized to this function\n",tag);
 		                                                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#137: FILE: arch/ppc64/kernel/lparcfg.c:55:
+		printk(KERN_INFO "plpar-hcall (%s) failed; Bad parameter(s)\n",tag);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#137: FILE: arch/ppc64/kernel/lparcfg.c:55:
+		printk(KERN_INFO "plpar-hcall (%s) failed; Bad parameter(s)\n",tag);
 		                                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#139: FILE: arch/ppc64/kernel/lparcfg.c:57:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: arch/ppc64/kernel/lparcfg.c:57:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);
 		                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: arch/ppc64/kernel/lparcfg.c:57:
+		printk(KERN_INFO "plpar-hcall (%s) failed with unexpected rc(0x%lx)\n",tag,rc);
 		                                                                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#141: FILE: arch/ppc64/kernel/lparcfg.c:59:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: arch/ppc64/kernel/lparcfg.c:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <xSharedProc>
#250: FILE: arch/ppc64/kernel/lparcfg.c:79:
+	shared = (int)(lpaca->lppaca_ptr->xSharedProc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: arch/ppc64/kernel/lparcfg.c:81:
+	seq_printf(m, "serial_number=%c%c%c%c%c%c%c\n",
 		      e2a(xItExtVpdPanel.mfgID[2]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: arch/ppc64/kernel/lparcfg.c:90:
+	seq_printf(m, "system_type=%c%c%c%c\n",
 		      e2a(xItExtVpdPanel.machineType[0]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: arch/ppc64/kernel/lparcfg.c:99:
+	seq_printf(m, "system_active_processors=%d\n",
 		      (int)HvLpConfig_getSystemPhysicalProcessors()); 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: arch/ppc64/kernel/lparcfg.c:102:
+	seq_printf(m, "system_potential_processors=%d\n",
 		      (int)HvLpConfig_getSystemPhysicalProcessors()); 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: arch/ppc64/kernel/lparcfg.c:120:
+	seq_printf(m, "partition_max_entitled_capacity=%d\n",
 		      max_entitled_capacity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: arch/ppc64/kernel/lparcfg.c:126:
+		seq_printf(m, "pool_capacity=%d\n",
+		    (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#315: FILE: arch/ppc64/kernel/lparcfg.c:126:
+		    (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));
 		                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getNumProcsInSharedPool>
#315: FILE: arch/ppc64/kernel/lparcfg.c:126:
+		    (int)(HvLpConfig_getNumProcsInSharedPool(pool_id)*100));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: arch/ppc64/kernel/lparcfg.c:161:
+static unsigned int h_get_ppp(unsigned long *entitled,
+		unsigned long  *unallocated, unsigned long *aggregation,

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: arch/ppc64/kernel/lparcfg.c:176:
+	unsigned long dummy;
+	rc = plpar_hcall(H_PIC, 0, 0, 0, 0, pool_idle_time, num_procs, &dummy);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned long get_purr() should probably be unsigned long get_purr(void)
#369: FILE: arch/ppc64/kernel/lparcfg.c:186:
+static unsigned long get_purr()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#371: FILE: arch/ppc64/kernel/lparcfg.c:188:
+	unsigned long sum_purr=0;
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: arch/ppc64/kernel/lparcfg.c:205:
+	char * local_buffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: arch/ppc64/kernel/lparcfg.c:206:
+	char * local_buffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);
+	if (!local_buffer) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#398: FILE: arch/ppc64/kernel/lparcfg.c:207:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#398: FILE: arch/ppc64/kernel/lparcfg.c:207:
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#398: FILE: arch/ppc64/kernel/lparcfg.c:207:
+	if (!local_buffer) {
+		printk(KERN_ERR "%s %s kmalloc failure at line %d \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#399: FILE: arch/ppc64/kernel/lparcfg.c:208:
+		       __FILE__, __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#421: FILE: arch/ppc64/kernel/lparcfg.c:222:
+		printk(KERN_INFO "%s %s Error calling get-system-parameter (0x%x)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#422: FILE: arch/ppc64/kernel/lparcfg.c:223:
+		       __FILE__, __FUNCTION__, call_status);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#430: FILE: arch/ppc64/kernel/lparcfg.c:227:
+		char * workbuffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: arch/ppc64/kernel/lparcfg.c:228:
+		char * workbuffer = kmalloc(SPLPAR_MAXLENGTH, GFP_KERNEL);
+		if (!workbuffer) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);
 			                                                                           ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#432: FILE: arch/ppc64/kernel/lparcfg.c:229:
+			printk(KERN_ERR "%s %s kmalloc failure at line %d \n",__FILE__,__FUNCTION__,__LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#437: FILE: arch/ppc64/kernel/lparcfg.c:234:
+		printk(KERN_INFO "success calling get-system-parameter \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#437: FILE: arch/ppc64/kernel/lparcfg.c:234:
+		printk(KERN_INFO "success calling get-system-parameter \n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#448: FILE: arch/ppc64/kernel/lparcfg.c:245:
+			if ((local_buffer[idx] == ',')
+			    || (local_buffer[idx] == '\0')) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#459: FILE: arch/ppc64/kernel/lparcfg.c:256:
+				/* code here to replace workbuffer contents
+				 with different keyword strings */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#459: FILE: arch/ppc64/kernel/lparcfg.c:256:
+				 with different keyword strings */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: arch/ppc64/kernel/lparcfg.c:257:
+				if (0 == strcmp(workbuffer,"MaxEntCap")) {
 				                          ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#460: FILE: arch/ppc64/kernel/lparcfg.c:257:
+				if (0 == strcmp(workbuffer,"MaxEntCap")) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: arch/ppc64/kernel/lparcfg.c:261:
+				if (0 == strcmp(workbuffer,"MaxPlatProcs")) {
 				                          ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#464: FILE: arch/ppc64/kernel/lparcfg.c:261:
+				if (0 == strcmp(workbuffer,"MaxPlatProcs")) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: arch/ppc64/kernel/lparcfg.c:286:
+		printk(KERN_ERR "cpus_dn %p \n",cpus_dn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: arch/ppc64/kernel/lparcfg.c:286:
+		printk(KERN_ERR "cpus_dn %p \n",cpus_dn);
 		                               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#489: FILE: arch/ppc64/kernel/lparcfg.c:286:
+		printk(KERN_ERR "cpus_dn %p \n",cpus_dn);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#536: FILE: arch/ppc64/kernel/lparcfg.c:314:
+	seq_printf(m, "%s %s \n", MODULE_NAME, MODULE_VERS);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#554: FILE: arch/ppc64/kernel/lparcfg.c:325:
+	if (lrdrp == NULL) {
[...]
 	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lrdrp"
#554: FILE: arch/ppc64/kernel/lparcfg.c:325:
+	if (lrdrp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <processorCount>
#555: FILE: arch/ppc64/kernel/lparcfg.c:326:
+		system_active_processors = systemcfg->processorCount;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: arch/ppc64/kernel/lparcfg.c:353:
+		seq_printf(m, "partition_entitled_capacity=%ld\n",
+			      h_entitled);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: arch/ppc64/kernel/lparcfg.c:356:
+		seq_printf(m, "pool=%ld\n",
+			      (h_aggregation >> 0*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#602: FILE: arch/ppc64/kernel/lparcfg.c:356:
+			      (h_aggregation >> 0*8) & 0xffff);
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: arch/ppc64/kernel/lparcfg.c:359:
+		seq_printf(m, "group=%ld\n",
+			      (h_aggregation >> 2*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#605: FILE: arch/ppc64/kernel/lparcfg.c:359:
+			      (h_aggregation >> 2*8) & 0xffff);
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: arch/ppc64/kernel/lparcfg.c:362:
+		seq_printf(m, "system_active_processors=%ld\n",
+			      (h_resource >> 0*8) & 0xffff);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#608: FILE: arch/ppc64/kernel/lparcfg.c:362:
+			      (h_resource >> 0*8) & 0xffff);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: arch/ppc64/kernel/lparcfg.c:365:
+		seq_printf(m, "pool_capacity=%ld\n",
 			      (h_resource >> 2*8) & 0xffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: arch/ppc64/kernel/lparcfg.c:368:
+		seq_printf(m, "unallocated_capacity_weight=%ld\n",
+			      (h_resource >> 4*8) & 0xFF);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#632: FILE: arch/ppc64/kernel/lparcfg.c:368:
+			      (h_resource >> 4*8) & 0xFF);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: arch/ppc64/kernel/lparcfg.c:371:
+		seq_printf(m, "capacity_weight=%ld\n",
+			      (h_resource >> 5*8) & 0xFF);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#644: FILE: arch/ppc64/kernel/lparcfg.c:371:
+			      (h_resource >> 5*8) & 0xFF);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: arch/ppc64/kernel/lparcfg.c:374:
+		seq_printf(m, "capped=%ld\n",
+			      (h_resource >> 6*8) & 0x01);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#650: FILE: arch/ppc64/kernel/lparcfg.c:374:
+			      (h_resource >> 6*8) & 0x01);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: arch/ppc64/kernel/lparcfg.c:377:
+		seq_printf(m, "unallocated_capacity=%ld\n",
+			      h_unallocated);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: arch/ppc64/kernel/lparcfg.c:380:
+		seq_printf(m, "pool_idle_time=%ld\n",
+			      pool_idle_time);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: arch/ppc64/kernel/lparcfg.c:383:
+		seq_printf(m, "pool_num_procs=%ld\n",
+			      pool_procs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: arch/ppc64/kernel/lparcfg.c:386:
+		seq_printf(m, "purr=%ld\n",
+			      purr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: arch/ppc64/kernel/lparcfg.c:390:
+		seq_printf(m, "system_active_processors=%d\n",
+			      system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: arch/ppc64/kernel/lparcfg.c:393:
+		seq_printf(m, "system_potential_processors=%d\n",
+			      system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: arch/ppc64/kernel/lparcfg.c:396:
+		seq_printf(m, "partition_max_entitled_capacity=%d\n",
+			      100*system_active_processors);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#684: FILE: arch/ppc64/kernel/lparcfg.c:396:
+			      100*system_active_processors);
 			         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: arch/ppc64/kernel/lparcfg.c:399:
+		seq_printf(m, "partition_entitled_capacity=%d\n",
+			      system_active_processors*100);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#689: FILE: arch/ppc64/kernel/lparcfg.c:399:
+			      system_active_processors*100);
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: arch/ppc64/kernel/lparcfg.c:403:
+	seq_printf(m, "partition_active_processors=%d\n",
+			(int) lparcfg_count_active_processors());

CHECK:SPACING: No space is necessary after a cast
#693: FILE: arch/ppc64/kernel/lparcfg.c:403:
+			(int) lparcfg_count_active_processors());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: arch/ppc64/kernel/lparcfg.c:406:
+	seq_printf(m, "partition_potential_processors=%d\n",
+			system_active_processors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: arch/ppc64/kernel/lparcfg.c:409:
+	seq_printf(m, "shared_processor_mode=%d\n",
+			paca[0].lppaca.xSharedProc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: arch/ppc64/kernel/lparcfg.c:510:
+	return single_open(file,lparcfg_data,NULL);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: arch/ppc64/kernel/lparcfg.c:510:
+	return single_open(file,lparcfg_data,NULL);
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#760: FILE: arch/ppc64/kernel/lparcfg.c:515:
+	read:		seq_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#760: FILE: arch/ppc64/kernel/lparcfg.c:515:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#762: FILE: arch/ppc64/kernel/lparcfg.c:517:
+	release:	single_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#762: FILE: arch/ppc64/kernel/lparcfg.c:517:
+	release:	single_release,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#883: FILE: arch/ppc64/lib/e2a.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#884: FILE: arch/ppc64/lib/e2a.c:2:
+ *  arch/ppc64/lib/e2a.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#903: FILE: arch/ppc64/lib/e2a.c:21:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#904: FILE: arch/ppc64/lib/e2a.c:22:
+ * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#990: FILE: arch/ppc64/lib/e2a.c:108:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#999: FILE: include/asm-ppc64/system.h:132:
+extern unsigned char e2a(unsigned char);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 35 warnings, 47 checks, 912 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
