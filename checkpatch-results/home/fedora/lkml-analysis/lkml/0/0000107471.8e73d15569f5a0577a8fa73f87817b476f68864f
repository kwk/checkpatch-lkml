WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
- It increases the size of a couple of buffers by one to avoid buffer overflow

WARNING:TYPO_SPELLING: 'mutliple' may be misspelled - perhaps 'multiple'?
#74: 
The split of /proc into mutliple filesystems works well however it comes
                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/proc/array.c:141:
+static const char task_state_pspace[] = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#186: FILE: fs/proc/array.c:141:
 };
+static const char task_state_pspace[] = 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: fs/proc/array.c:181:
+^I^Ip->pid, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: fs/proc/array.c:211:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#210: FILE: fs/proc/array.c:212:
+static inline char * pspace_task_state(struct task_struct *p, char *buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/proc/array.c:227:
+^I       ^Ip->wid,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: fs/proc/array.c:227:
+^I       ^Ip->wid,$

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#227: FILE: fs/proc/array.c:229:
+		pid_alive(p)? p->group_leader->real_parent->tgid : 0,
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: fs/proc/array.c:244:
+	for (g = 0; g < min(group_info->ngroups,NGROUPS_SMALL); g++)
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: fs/proc/array.c:245:
+		buffer += sprintf(buffer, "%d ", GROUP_AT(group_info,g));
 		                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/proc/array.c:364:
+int proc_pspace_status(struct task_struct *task, char * buffer)

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: fs/proc/array.c:367:
+	char *orig = buffer;
+	buffer = task_name(task, buffer);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/proc/array.c:536:
+int proc_pspace_stat(struct task_struct *task, char * buffer)

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: fs/proc/array.c:543:
+ ^Ipid_t ppid, pgid = -1, sid = -1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: fs/proc/array.c:543:
+ ^Ipid_t ppid, pgid = -1, sid = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: fs/proc/array.c:543:
+ ^Ipid_t ppid, pgid = -1, sid = -1;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#303: FILE: fs/proc/array.c:555:
+	cutime = cstime = utime = stime = cputime_zero;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#344: FILE: fs/proc/array.c:596:
+		if (pspace_leader(p)) {
+			num_threads += p->pspace->nr_threads;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#354: FILE: fs/proc/array.c:606:
+	ppid = pid_alive(task)? task->group_leader->real_parent->tgid : 0;
 	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: fs/proc/array.c:615:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: fs/proc/array.c:616:
+	res = sprintf(buffer,"%d (%s) %c %d %d %d %d %d %lu %lu \
 	                    ^

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#364: FILE: fs/proc/array.c:616:
+	res = sprintf(buffer,"%d (%s) %c %d %d %d %d %d %lu %lu \

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: fs/proc/array.c:643:
+^I        0UL /* rsslim */,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: fs/proc/array.c:684:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: fs/proc/array.c:685:
+	return sprintf(buffer,"%d %d %d %d %d %d %d\n",
 	                     ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#442: FILE: fs/proc/base.c:79:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr);
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/proc/base.c:79:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/proc/base.c:79:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#485: FILE: fs/proc/base.c:198:
+	E(PROC_SELF,		"self",   S_IFLNK|S_IRWXUGO),
 	            		                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#485: FILE: fs/proc/base.c:198:
+	E(PROC_SELF,		"self",   S_IFLNK|S_IRWXUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#486: FILE: fs/proc/base.c:199:
+	E(PROC_MOUNTS,		"mounts", S_IFLNK|S_IRWXUGO),
 	              		                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#486: FILE: fs/proc/base.c:199:
+	E(PROC_MOUNTS,		"mounts", S_IFLNK|S_IRWXUGO),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#487: FILE: fs/proc/base.c:200:
+	E(PROC_LOADAVG,		"loadavg", S_IFREG|S_IRUGO),
 	               		                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#487: FILE: fs/proc/base.c:200:
+	E(PROC_LOADAVG,		"loadavg", S_IFREG|S_IRUGO),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: fs/proc/base.c:201:
+	{0,0,NULL,0}
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: fs/proc/base.c:201:
+	{0,0,NULL,0}
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: fs/proc/base.c:201:
+	{0,0,NULL,0}
 	         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: fs/proc/base.c:291:
+	E(PROC_ROOT_INO,       "pspace",  S_IFDIR|S_IRUGO|S_IXUGO),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: fs/proc/base.c:291:
+	E(PROC_ROOT_INO,       "pspace",  S_IFDIR|S_IRUGO|S_IXUGO),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#499: FILE: fs/proc/base.c:291:
+	E(PROC_ROOT_INO,       "pspace",  S_IFDIR|S_IRUGO|S_IXUGO),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#500: FILE: fs/proc/base.c:292:
+	E(PROC_PSPACE_STAT,    "stat",    S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#500: FILE: fs/proc/base.c:292:
+	E(PROC_PSPACE_STAT,    "stat",    S_IFREG|S_IRUGO),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#501: FILE: fs/proc/base.c:293:
+	E(PROC_PSPACE_STATM,   "statm",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#501: FILE: fs/proc/base.c:293:
+	E(PROC_PSPACE_STATM,   "statm",   S_IFREG|S_IRUGO),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#502: FILE: fs/proc/base.c:294:
+	E(PROC_PSPACE_STATUS,  "status",  S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#502: FILE: fs/proc/base.c:294:
+	E(PROC_PSPACE_STATUS,  "status",  S_IFREG|S_IRUGO),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#503: FILE: fs/proc/base.c:295:
+	E(PROC_PSPACE_CMDLINE, "cmdline", S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#503: FILE: fs/proc/base.c:295:
+	E(PROC_PSPACE_CMDLINE, "cmdline", S_IFREG|S_IRUGO),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/proc/base.c:296:
+	{0,0,NULL,0}
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/proc/base.c:296:
+	{0,0,NULL,0}
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/proc/base.c:296:
+	{0,0,NULL,0}
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: fs/proc/base.c:1106:
+	struct pspace *child;
+	child = tsk->pspace;

ERROR:SPACING: space required before the open parenthesis '('
#521: FILE: fs/proc/base.c:1107:
+	while(child && (child->child_reaper.pspace != pspace)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#521: FILE: fs/proc/base.c:1107:
+	while(child && (child->child_reaper.pspace != pspace)) {
+		child = child->child_reaper.pspace;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#533: FILE: fs/proc/base.c:1119:
+	int result, len = 0;
+	while(buflen && pspace && (pspace != current->pspace)) {

ERROR:SPACING: space required before the open parenthesis '('
#533: FILE: fs/proc/base.c:1119:
+	while(buflen && pspace && (pspace != current->pspace)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#553: FILE: fs/proc/base.c:1139:
+static void *proc_self_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: fs/proc/base.c:1144:
+	int result;
+	while(pspace && (pspace != current->pspace)) {

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: fs/proc/base.c:1144:
+	while(pspace && (pspace != current->pspace)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#561: FILE: fs/proc/base.c:1147:
+		result = vfs_follow_link(nd, tmp);
 		                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#566: FILE: fs/proc/base.c:1152:
+	result = vfs_follow_link(nd,tmp);
 	                         ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: fs/proc/base.c:1152:
+	result = vfs_follow_link(nd,tmp);
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: fs/proc/base.c:1155:
+}^I$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#571: FILE: fs/proc/base.c:1157:
+static struct inode_operations proc_self_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#576: FILE: fs/proc/base.c:1162:
+static int self_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#582: FILE: fs/proc/base.c:1168:
+static int self_delete_dentry(struct dentry * dentry)

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#587: FILE: fs/proc/base.c:1173:
+static struct dentry_operations self_dentry_operations =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#588: FILE: fs/proc/base.c:1174:
+static struct dentry_operations self_dentry_operations =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/proc/base.c:1179:
+static void *proc_mounts_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#596: FILE: fs/proc/base.c:1182:
+	nd_set_link(nd, (char *)mounts);
 	            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: fs/proc/base.c:1182:
+	static const char *mounts = "self/mounts";
+	nd_set_link(nd, (char *)mounts);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#600: FILE: fs/proc/base.c:1186:
+static struct inode_operations proc_mounts_inode_operations = {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#606: FILE: fs/proc/base.c:1192:
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
                                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: fs/proc/base.c:1194:
+static int proc_loadavg(struct task_struct *task, char * buffer)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#614: FILE: fs/proc/base.c:1200:
+	a = avenrun[0] + (FIXED_1/200);
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#615: FILE: fs/proc/base.c:1201:
+	b = avenrun[1] + (FIXED_1/200);
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#616: FILE: fs/proc/base.c:1202:
+	c = avenrun[2] + (FIXED_1/200);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#617: FILE: fs/proc/base.c:1203:
+	len = sprintf(buffer,"%d.%02d %d.%02d %d.%02d %ld/%d %d\n",
 	                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: fs/proc/base.c:1204:
+	len = sprintf(buffer,"%d.%02d %d.%02d %d.%02d %ld/%d %d\n",
+		LOAD_INT(a), LOAD_FRAC(a),

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#621: FILE: fs/proc/base.c:1207:
+		nr_running(), nr_threads, pspace? pspace->last_pid : 0);
 		                                ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#688: FILE: fs/proc/base.c:1428:
+static int proc_pspace_base_readdir(struct file * filp,
                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#688: FILE: fs/proc/base.c:1428:
+static int proc_pspace_base_readdir(struct file * filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: fs/proc/base.c:1429:
+static int proc_pspace_base_readdir(struct file * filp,
+			     void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: fs/proc/base.c:1429:
+			     void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#691: FILE: fs/proc/base.c:1431:
+	return proc_pident_readdir(filp,dirent,filldir,
 	                           ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: fs/proc/base.c:1431:
+	return proc_pident_readdir(filp,dirent,filldir,
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: fs/proc/base.c:1431:
+	return proc_pident_readdir(filp,dirent,filldir,
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#692: FILE: fs/proc/base.c:1432:
+				   pspace_base_stuff,ARRAY_SIZE(pspace_base_stuff));
 				                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#700: FILE: fs/proc/base.c:1440:
+	struct task_struct *p = proc_task(inode);
+	generic_fillattr(inode, stat);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#712: FILE: fs/proc/base.c:1452:
+static struct dentry *proc_pspace_lookup(struct inode * dir, struct dentry * dentry, struct nameidata *nd)
                                                                                                        ^^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#712: FILE: fs/proc/base.c:1452:
+static struct dentry *proc_pspace_lookup(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: fs/proc/base.c:1452:
+static struct dentry *proc_pspace_lookup(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#712: FILE: fs/proc/base.c:1452:
+static struct dentry *proc_pspace_lookup(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: fs/proc/base.c:1456:
+	int err;
+	memset(&sysinfo_nd, 0, sizeof(sysinfo_nd));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#724: FILE: fs/proc/base.c:1464:
+	return proc_pid_lookup(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#730: FILE: fs/proc/base.c:1470:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#736: FILE: fs/proc/base.c:1476:
+	filp = dentry_open(mnt->mnt_root, mnt, f->f_flags);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#737: FILE: fs/proc/base.c:1477:
+	if (IS_ERR(filp))
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#738: FILE: fs/proc/base.c:1478:
+		err = PTR_ERR(filp);
 		              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#740: FILE: fs/proc/base.c:1480:
+		f->private_data = filp;
 		                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#746: FILE: fs/proc/base.c:1486:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#747: FILE: fs/proc/base.c:1487:
+	filp = f->private_data;
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: fs/proc/base.c:1487:
+	struct file *filp;
+	filp = f->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#749: FILE: fs/proc/base.c:1489:
+	return filp_close(filp, NULL);
 	                  ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#752: FILE: fs/proc/base.c:1492:
+static int proc_pspace_readdir(struct file * f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: fs/proc/base.c:1493:
+static int proc_pspace_readdir(struct file * f,
+	void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#753: FILE: fs/proc/base.c:1493:
+	void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#755: FILE: fs/proc/base.c:1495:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#757: FILE: fs/proc/base.c:1497:
+	filp = f->private_data;
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#760: FILE: fs/proc/base.c:1500:
+		int res;
+		filp->f_pos = f->f_pos;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#764: FILE: fs/proc/base.c:1504:
+		res = vfs_readdir(filp, filldir, dirent);
 		                  ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#778: FILE: fs/proc/base.c:1518:
+static struct file_operations proc_pspace_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#788: FILE: fs/proc/base.c:1528:
+static struct inode_operations proc_pspace_inode_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: fs/proc/base.c:1596:
+	struct inode *inode;
+	inode = proc_pid_make_inode(sb, pspace->child_reaper.task, PROC_ROOT_INO);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#813: FILE: fs/proc/base.c:1601:
+		inode->i_mode  = S_IFDIR|S_IRUGO|S_IXUGO;
 		                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#813: FILE: fs/proc/base.c:1601:
+		inode->i_mode  = S_IFDIR|S_IRUGO|S_IXUGO;
 		                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#813: FILE: fs/proc/base.c:1601:
+		inode->i_mode  = S_IFDIR|S_IRUGO|S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#829: FILE: fs/proc/base.c:1796:
+	struct task_struct *p = proc_task(inode);
+	generic_fillattr(inode, stat);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->type < PROC_LOADAVG'
#870: FILE: fs/proc/base.c:1908:
+	if ((p->type < PROC_LOADAVG) && !in_pspace(pspace, current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#885: FILE: fs/proc/base.c:1923:
 	switch(p->type) {
+		case PROC_SELF:
[...]
+		case PROC_MOUNTS:
[...]
+		case PROC_LOADAVG:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#952: FILE: fs/proc/base.c:2116:
+static struct dentry *proc_pspace_base_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                                           ^^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#952: FILE: fs/proc/base.c:2116:
+static struct dentry *proc_pspace_base_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: fs/proc/base.c:2119:
+	int error;
+	error = -ENOENT;

WARNING:LINE_SPACING: Missing a blank line after declarations
#958: FILE: fs/proc/base.c:2122:
+		struct vfsmount *mnt;
+		mnt = proc_pspace_get_mnt(proc_pspace(dir));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#972: FILE: fs/proc/base.c:2139:
+static struct file_operations proc_pspace_base_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#984: FILE: fs/proc/base.c:2152:
+static struct inode_operations proc_pspace_base_inode_operations = {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->pspace != pspace'
#1069: FILE: fs/proc/base.c:2291:
+	if (unlikely(pspace_leader(task) && (task->pspace != pspace))) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1109: FILE: fs/proc/base.c:2385:
+static int get_tgid_list(struct pspace *pspace, int index, unsigned long version, unsigned int *tgids)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1153: FILE: fs/proc/base.c:2437:
+	if (pid_alive(task) && pspace_task_visible(pspace, task)) do {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1162: FILE: fs/proc/base.c:2453:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr)
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1162: FILE: fs/proc/base.c:2453:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1162: FILE: fs/proc/base.c:2453:
+static int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir, unsigned int nr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: fs/proc/base.c:2473:
+^I^Ifilp->f_pos++; $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1190: FILE: fs/proc/base.c:2475:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1197: FILE: fs/proc/base.c:2482:
+		/* fall through */

ERROR:SPACING: space required before the open parenthesis '('
#1200: FILE: fs/proc/base.c:2485:
+	for(; nr < (ARRAY_SIZE(proc_base_stuff) - 1); filp->f_pos++, nr++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->type < PROC_LOADAVG'
#1203: FILE: fs/proc/base.c:2488:
+		if ((p->type < PROC_LOADAVG) && !in_pspace(pspace, current))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1311: FILE: fs/proc/generic.c:376:
+static struct dentry *proc_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)
                                                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1311: FILE: fs/proc/generic.c:376:
+static struct dentry *proc_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1329: FILE: fs/proc/generic.c:416:
+static int proc_readdir(struct file * filp,
                                       ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1329: FILE: fs/proc/generic.c:416:
+static int proc_readdir(struct file * filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: fs/proc/generic.c:417:
+static int proc_readdir(struct file * filp,
 	void * dirent, filldir_t filldir)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1341: FILE: fs/proc/generic.c:499:
+^I.low_ino^I= PROC_SYSINFO_ROOT_INO, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1342: FILE: fs/proc/generic.c:500:
+^I.namelen^I= 5, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1344: FILE: fs/proc/generic.c:502:
+^I.mode^I^I= S_IFDIR | S_IRUGO | S_IXUGO, $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#1344: FILE: fs/proc/generic.c:502:
+	.mode		= S_IFDIR | S_IRUGO | S_IXUGO, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1345: FILE: fs/proc/generic.c:503:
+^I.nlink^I^I= 2, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1346: FILE: fs/proc/generic.c:504:
+^I.proc_iops^I= &proc_dir_inode_operations, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1428: FILE: fs/proc/inode.c:77:
+static void proc_sysinfo_read_inode(struct inode * inode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1481: FILE: fs/proc/inode.c:89:
+static struct super_operations proc_sysinfo_sops = { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: fs/proc/inode.c:98:
+struct inode *proc_sysinfo_get_inode(struct super_block *sb, unsigned int ino,
 				struct proc_dir_entry *de)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1539: FILE: fs/proc/inode.c:165:
+	printk("%s: get root inode failed\n", __func__);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1578: FILE: fs/proc/internal.h:22:
+extern int proc_pspace_stat(struct task_struct *, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1578: FILE: fs/proc/internal.h:22:
+extern int proc_pspace_stat(struct task_struct *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1578: FILE: fs/proc/internal.h:22:
+extern int proc_pspace_stat(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1580: FILE: fs/proc/internal.h:24:
+extern int proc_pspace_status(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1580: FILE: fs/proc/internal.h:24:
+extern int proc_pspace_status(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1580: FILE: fs/proc/internal.h:24:
+extern int proc_pspace_status(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1582: FILE: fs/proc/internal.h:26:
+extern int proc_pspace_statm(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1582: FILE: fs/proc/internal.h:26:
+extern int proc_pspace_statm(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1582: FILE: fs/proc/internal.h:26:
+extern int proc_pspace_statm(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1583: FILE: fs/proc/internal.h:27:
+extern struct inode *proc_pspace_make_inode(struct super_block *sb, struct pspace *pspace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1584: FILE: fs/proc/internal.h:28:
+extern struct vfsmount *proc_pspace_get_mnt(struct pspace *pspace);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1600: FILE: fs/proc/internal.h:44:
+	struct task_struct *task = proc_task(inode);
+	return task ? task->pspace : NULL;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1661: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1666: FILE: fs/proc/proc.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1690: FILE: fs/proc/proc.c:25:
+static void proc_read_inode(struct inode * inode)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1692: FILE: fs/proc/proc.c:27:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1695: FILE: fs/proc/proc.c:30:
+static kmem_cache_t * proc_inode_cachep;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1709: FILE: fs/proc/proc.c:44:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1718: FILE: fs/proc/proc.c:53:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1718: FILE: fs/proc/proc.c:53:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#1720: FILE: fs/proc/proc.c:55:
+	struct proc_inode *ei = (struct proc_inode *) foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1722: FILE: fs/proc/proc.c:57:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1726: FILE: fs/proc/proc.c:61:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1726: FILE: fs/proc/proc.c:61:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1730: FILE: fs/proc/proc.c:65:
+	proc_inode_cachep = kmem_cache_create("proc_inode_cache",
+					     sizeof(struct proc_inode),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_inode_cachep"
#1733: FILE: fs/proc/proc.c:68:
+	if (proc_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1744: FILE: fs/proc/proc.c:79:
+static struct super_operations proc_sops = { $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1756: FILE: fs/proc/proc.c:91:
+	struct inode * root_inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1765: FILE: fs/proc/proc.c:100:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1775: FILE: fs/proc/proc.c:110:
+	printk("%s: get root inode failed\n", __func__);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1776: FILE: fs/proc/proc.c:111:
+	iput(root_inode);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1792: FILE: fs/proc/proc.c:127:
+	int err;
+	err = set_anon_super(s, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1799: FILE: fs/proc/proc.c:134:
+static struct super_block *proc_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1813: FILE: fs/proc/proc.c:148:
+	struct vfsmount *mnt;
+	mnt = pspace->proc_mnt;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1824: FILE: fs/proc/proc.c:159:
+	int err = 0;
+	err = proc_init_inodecache();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1960: FILE: fs/proc/root.c:29:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1962: FILE: fs/proc/root.c:31:
+static struct super_block *proc_sysinfo_get_sb(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1984: FILE: fs/proc/root.c:45:
+	int err;
+	err = register_filesystem(&proc_sysinfo_fs_type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2081: FILE: fs/proc/sysinfo.h:1:
+/* sysinfo.h: internal proc_sysinfo_fs definitions

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2101: FILE: fs/proc/sysinfo.h:21:
+extern void get_vmalloc_info(struct vmalloc_info *vmi);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vmi' - possible side-effects?
#2105: FILE: fs/proc/sysinfo.h:25:
+#define get_vmalloc_info(vmi)			\
+do {						\
+	(vmi)->used = 0;			\
+	(vmi)->largest_chunk = 0;		\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2109: FILE: fs/proc/sysinfo.h:29:
+} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2113: FILE: fs/proc/sysinfo.h:33:
+extern void create_seq_entry(char *name, mode_t mode, struct file_operations *f);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2113: FILE: fs/proc/sysinfo.h:33:
+extern void create_seq_entry(char *name, mode_t mode, struct file_operations *f);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2379: FILE: include/linux/proc_fs.h:49:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2400: FILE: include/linux/proc_sysinfo_fs.h:1:
+#ifndef _LINUX_PROC_SYSINFO_FS_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2406: FILE: include/linux/proc_sysinfo_fs.h:7:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2463: FILE: include/linux/proc_sysinfo_fs.h:64:
+	struct inode_operations * proc_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#2463: FILE: include/linux/proc_sysinfo_fs.h:64:
+	struct inode_operations * proc_iops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2464: FILE: include/linux/proc_sysinfo_fs.h:65:
+	struct file_operations * proc_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2464: FILE: include/linux/proc_sysinfo_fs.h:65:
+	struct file_operations * proc_fops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2484: FILE: include/linux/proc_sysinfo_fs.h:85:
+extern void proc_root_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2485: FILE: include/linux/proc_sysinfo_fs.h:86:
+extern void proc_misc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2487: FILE: include/linux/proc_sysinfo_fs.h:88:
+extern struct proc_dir_entry *create_proc_entry(const char *name, mode_t mode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2489: FILE: include/linux/proc_sysinfo_fs.h:90:
+extern void remove_proc_entry(const char *name, struct proc_dir_entry *parent);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);
                                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2493: FILE: include/linux/proc_sysinfo_fs.h:94:
+extern int proc_sysinfo_fill_super(struct super_block *,void *,int);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2494: FILE: include/linux/proc_sysinfo_fs.h:95:
+extern struct inode *proc_sysinfo_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2494: FILE: include/linux/proc_sysinfo_fs.h:95:
+extern struct inode *proc_sysinfo_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2494: FILE: include/linux/proc_sysinfo_fs.h:95:
+extern struct inode *proc_sysinfo_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2494: FILE: include/linux/proc_sysinfo_fs.h:95:
+extern struct inode *proc_sysinfo_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#2494: FILE: include/linux/proc_sysinfo_fs.h:95:
+extern struct inode *proc_sysinfo_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2496: FILE: include/linux/proc_sysinfo_fs.h:97:
+extern int proc_match(int, const char *,struct proc_dir_entry *);
                                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2496: FILE: include/linux/proc_sysinfo_fs.h:97:
+extern int proc_match(int, const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2496: FILE: include/linux/proc_sysinfo_fs.h:97:
+extern int proc_match(int, const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2496: FILE: include/linux/proc_sysinfo_fs.h:97:
+extern int proc_match(int, const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#2496: FILE: include/linux/proc_sysinfo_fs.h:97:
+extern int proc_match(int, const char *,struct proc_dir_entry *);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2504: FILE: include/linux/proc_sysinfo_fs.h:105:
+extern struct file_operations proc_kcore_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2505: FILE: include/linux/proc_sysinfo_fs.h:106:
+extern struct file_operations proc_kmsg_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2506: FILE: include/linux/proc_sysinfo_fs.h:107:
+extern struct file_operations ppc_htab_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2512: FILE: include/linux/proc_sysinfo_fs.h:113:
+extern void proc_tty_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2513: FILE: include/linux/proc_sysinfo_fs.h:114:
+extern void proc_tty_register_driver(struct tty_driver *driver);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2514: FILE: include/linux/proc_sysinfo_fs.h:115:
+extern void proc_tty_unregister_driver(struct tty_driver *driver);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2522: FILE: include/linux/proc_sysinfo_fs.h:123:
+extern void proc_device_tree_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2523: FILE: include/linux/proc_sysinfo_fs.h:124:
+extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#2523: FILE: include/linux/proc_sysinfo_fs.h:124:
+extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#2523: FILE: include/linux/proc_sysinfo_fs.h:124:
+extern void proc_device_tree_add_node(struct device_node *, struct proc_dir_entry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2524: FILE: include/linux/proc_sysinfo_fs.h:125:
+extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2525: FILE: include/linux/proc_sysinfo_fs.h:126:
+extern void proc_device_tree_remove_prop(struct proc_dir_entry *pde,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2527: FILE: include/linux/proc_sysinfo_fs.h:128:
+extern void proc_device_tree_update_prop(struct proc_dir_entry *pde,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2532: FILE: include/linux/proc_sysinfo_fs.h:133:
+extern struct proc_dir_entry *proc_symlink(const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2533: FILE: include/linux/proc_sysinfo_fs.h:134:
+extern struct proc_dir_entry *proc_symlink(const char *,
+		struct proc_dir_entry *, const char *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2534: FILE: include/linux/proc_sysinfo_fs.h:135:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);
                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2534: FILE: include/linux/proc_sysinfo_fs.h:135:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2534: FILE: include/linux/proc_sysinfo_fs.h:135:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#2534: FILE: include/linux/proc_sysinfo_fs.h:135:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2535: FILE: include/linux/proc_sysinfo_fs.h:136:
+extern struct proc_dir_entry *proc_mkdir_mode(const char *name, mode_t mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2536: FILE: include/linux/proc_sysinfo_fs.h:137:
+extern struct proc_dir_entry *proc_mkdir_mode(const char *name, mode_t mode,
+			struct proc_dir_entry *parent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2539: FILE: include/linux/proc_sysinfo_fs.h:140:
+^Imode_t mode, struct proc_dir_entry *base, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2539: FILE: include/linux/proc_sysinfo_fs.h:140:
+static inline struct proc_dir_entry *create_proc_read_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2540: FILE: include/linux/proc_sysinfo_fs.h:141:
+	read_proc_t *read_proc, void * data)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2542: FILE: include/linux/proc_sysinfo_fs.h:143:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2542: FILE: include/linux/proc_sysinfo_fs.h:143:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2542: FILE: include/linux/proc_sysinfo_fs.h:143:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2543: FILE: include/linux/proc_sysinfo_fs.h:144:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2544: FILE: include/linux/proc_sysinfo_fs.h:145:
+		res->read_proc=read_proc;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2545: FILE: include/linux/proc_sysinfo_fs.h:146:
+		res->data=data;
 		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2549: FILE: include/linux/proc_sysinfo_fs.h:150:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2549: FILE: include/linux/proc_sysinfo_fs.h:150:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2551: FILE: include/linux/proc_sysinfo_fs.h:152:
+static inline struct proc_dir_entry *create_proc_info_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, get_info_t *get_info)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2553: FILE: include/linux/proc_sysinfo_fs.h:154:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2553: FILE: include/linux/proc_sysinfo_fs.h:154:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2553: FILE: include/linux/proc_sysinfo_fs.h:154:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2554: FILE: include/linux/proc_sysinfo_fs.h:155:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) res->get_info=get_info;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2554: FILE: include/linux/proc_sysinfo_fs.h:155:
+	if (res) res->get_info=get_info;
 	                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2554: FILE: include/linux/proc_sysinfo_fs.h:155:
+	if (res) res->get_info=get_info;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2557: FILE: include/linux/proc_sysinfo_fs.h:158:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2557: FILE: include/linux/proc_sysinfo_fs.h:158:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2559: FILE: include/linux/proc_sysinfo_fs.h:160:
+static inline struct proc_dir_entry *proc_net_create(const char *name,
+	mode_t mode, get_info_t *get_info)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2561: FILE: include/linux/proc_sysinfo_fs.h:162:
+	return create_proc_info_entry(name,mode,proc_net,get_info);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2561: FILE: include/linux/proc_sysinfo_fs.h:162:
+	return create_proc_info_entry(name,mode,proc_net,get_info);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2561: FILE: include/linux/proc_sysinfo_fs.h:162:
+	return create_proc_info_entry(name,mode,proc_net,get_info);
 	                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2565: FILE: include/linux/proc_sysinfo_fs.h:166:
+static inline struct proc_dir_entry *proc_net_fops_create(const char *name,
+	mode_t mode, struct file_operations *fops)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2565: FILE: include/linux/proc_sysinfo_fs.h:166:
+	mode_t mode, struct file_operations *fops)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2568: FILE: include/linux/proc_sysinfo_fs.h:169:
+	struct proc_dir_entry *res = create_proc_entry(name, mode, proc_net);
+	if (res)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2575: FILE: include/linux/proc_sysinfo_fs.h:176:
+	remove_proc_entry(name,proc_net);
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2588: FILE: include/linux/proc_sysinfo_fs.h:189:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2590: FILE: include/linux/proc_sysinfo_fs.h:191:
+static inline struct proc_dir_entry *create_proc_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *parent) { return NULL; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2595: FILE: include/linux/proc_sysinfo_fs.h:196:
+static inline struct proc_dir_entry *proc_symlink(const char *name,
+		struct proc_dir_entry *parent,const char *dest) {return NULL;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2595: FILE: include/linux/proc_sysinfo_fs.h:196:
+		struct proc_dir_entry *parent,const char *dest) {return NULL;}
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2595: FILE: include/linux/proc_sysinfo_fs.h:196:
+		struct proc_dir_entry *parent,const char *dest) {return NULL;}
 		                                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2597: FILE: include/linux/proc_sysinfo_fs.h:198:
+static inline struct proc_dir_entry *proc_mkdir(const char *name,
+	struct proc_dir_entry *parent) {return NULL;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2597: FILE: include/linux/proc_sysinfo_fs.h:198:
+	struct proc_dir_entry *parent) {return NULL;}
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2600: FILE: include/linux/proc_sysinfo_fs.h:201:
+^Imode_t mode, struct proc_dir_entry *base, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2600: FILE: include/linux/proc_sysinfo_fs.h:201:
+static inline struct proc_dir_entry *create_proc_read_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2601: FILE: include/linux/proc_sysinfo_fs.h:202:
+	read_proc_t *read_proc, void * data) { return NULL; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2603: FILE: include/linux/proc_sysinfo_fs.h:204:
+static inline struct proc_dir_entry *create_proc_info_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, get_info_t *get_info)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2619: FILE: include/linux/proc_sysinfo_fs.h:220:
+extern void kclist_add(struct kcore_list *, void *, size_t);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2707: FILE: security/selinux/hooks.c:853:
+			struct proc_dir_entry *pde = PDE(inode);
+			if (pde) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 116 warnings, 74 checks, 2407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
