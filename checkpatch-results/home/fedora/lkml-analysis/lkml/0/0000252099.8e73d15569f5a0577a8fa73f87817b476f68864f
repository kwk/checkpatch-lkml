WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#34: 
Mea culpa.  This was fixed once but didn't propogate into my last patch.
                                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -rupN linux-2.6.8.1/Documentation/sched-stats.txt linux-2.6.8.1-ss/Documentation/sched-stats.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/ppc/Kconfig:1348:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: arch/x86_64/Kconfig:468:
+^Idefault y $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: fs/proc/array.c:362:
+	res = sprintf(buffer,"%d (%s) %c %d %d %d %d %d %lu %lu \
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#291: FILE: fs/proc/array.c:362:
+	res = sprintf(buffer,"%d (%s) %c %d %d %d %d %d %lu %lu \

WARNING:CONST_STRUCT: struct file_operations should normally be const
#325: FILE: fs/proc/proc_misc.c:286:
+extern struct file_operations proc_schedstat_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: include/linux/sched.h:101:
+extern void cpu_sched_info(struct sched_info *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sched_info *' should also have an identifier name
#350: FILE: include/linux/sched.h:101:
+extern void cpu_sched_info(struct sched_info *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#350: FILE: include/linux/sched.h:101:
+extern void cpu_sched_info(struct sched_info *, int);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#351: FILE: include/linux/sched.h:102:
+#define schedstat_inc(rq, field)	rq->field++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#351: FILE: include/linux/sched.h:102:
+#define schedstat_inc(rq, field)	rq->field++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#351: FILE: include/linux/sched.h:102:
+#define schedstat_inc(rq, field)	rq->field++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#351: FILE: include/linux/sched.h:102:
+#define schedstat_inc(rq, field)	rq->field++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#352: FILE: include/linux/sched.h:103:
+#define schedstat_add(rq, field, amt)	rq->field += amt;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#352: FILE: include/linux/sched.h:103:
+#define schedstat_add(rq, field, amt)	rq->field += amt;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#352: FILE: include/linux/sched.h:103:
+#define schedstat_add(rq, field, amt)	rq->field += amt;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#352: FILE: include/linux/sched.h:103:
+#define schedstat_add(rq, field, amt)	rq->field += amt;

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#354: FILE: include/linux/sched.h:105:
+#define schedstat_inc(rq, field)	do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#355: FILE: include/linux/sched.h:106:
+#define schedstat_add(rq, field, amt)	do { } while (0);

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#396: FILE: include/linux/sched.h:594:
+enum idle_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#534: FILE: kernel/sched.c:343:
+	for_each_online_cpu (cpu) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#535: FILE: kernel/sched.c:344:
+	for_each_online_cpu (cpu) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: kernel/sched.c:352:
+^I^Iseq_printf(seq, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: kernel/sched.c:353:
+		seq_printf(seq, 
+		    "cpu%d %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: kernel/sched.c:354:
+		    "cpu%d %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu "
+		    "%lu %lu %lu %lu %lu %lu %lu %lu %lu %lu",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#557: FILE: kernel/sched.c:366:
+		for (itype = IDLE; itype < MAX_IDLE_TYPES; itype++)
+		    seq_printf(seq, " %lu %lu", rq->pt_gained[itype],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: kernel/sched.c:368:
+		    seq_printf(seq, " %lu %lu", rq->pt_gained[itype],
+			rq->pt_lost[itype]);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#561: FILE: kernel/sched.c:370:
+		seq_printf(seq, "\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#568: FILE: kernel/sched.c:377:
+			cpumask_scnprintf(mask_str, NR_CPUS, sd->span);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: kernel/sched.c:381:
+				seq_printf(seq, " %lu %lu %lu %lu %lu",
+				    sd->lb_cnt[itype],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: kernel/sched.c:388:
+			seq_printf(seq, " %lu %lu %lu %lu\n",
+			    sd->sbe_pushed, sd->sbe_attempts,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#589: FILE: kernel/sched.c:398:
+	unsigned size = PAGE_SIZE * (1 + num_online_cpus() / 32);

CHECK:BRACES: braces {} should be used on all arms of this statement
#597: FILE: kernel/sched.c:406:
+	if (!res) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#601: FILE: kernel/sched.c:410:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#606: FILE: kernel/sched.c:415:
+struct file_operations proc_schedstat_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: kernel/sched.c:483:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: kernel/sched.c:1041:
+		if ((sd->flags & SD_WAKE_AFFINE) &&
+				!task_hot(p, rq->timestamp_last_tick, sd)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#772: FILE: kernel/sched.c:1051:
+				imbalance*this_load <= 100*load) {
 				         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#772: FILE: kernel/sched.c:1051:
+				imbalance*this_load <= 100*load) {
 				                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: kernel/sched.c:1954:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: kernel/sched.c:1954:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: kernel/sched.c:1955:
+  ^Igroup = find_busiest_group(sd, this_cpu, &imbalance, idle);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#889: FILE: kernel/sched.c:1955:
+  ^Igroup = find_busiest_group(sd, this_cpu, &imbalance, idle);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: kernel/sched.c:1955:
+  ^Igroup = find_busiest_group(sd, this_cpu, &imbalance, idle);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: kernel/sched.c:1958:
+  ^I^Igoto out_balanced;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#892: FILE: kernel/sched.c:1958:
+  ^I^Igoto out_balanced;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: kernel/sched.c:1958:
+  ^I^Igoto out_balanced;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: kernel/sched.c:1964:
+  ^I^Igoto out_balanced;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#900: FILE: kernel/sched.c:1964:
+  ^I^Igoto out_balanced;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: kernel/sched.c:1964:
+  ^I^Igoto out_balanced;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: kernel/sched.c:1977:
+ ^Ischedstat_add(sd, lb_imbalance[idle], imbalance);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#910: FILE: kernel/sched.c:1977:
+ ^Ischedstat_add(sd, lb_imbalance[idle], imbalance);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: kernel/sched.c:1977:
+ ^Ischedstat_add(sd, lb_imbalance[idle], imbalance);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#949: FILE: kernel/sched.c:2070:
+	if (!nr_moved)
+	    schedstat_inc(sd, lb_failed[NEWLY_IDLE]);

CHECK:BRACES: Unbalanced braces around else statement
#996: FILE: kernel/sched.c:2560:
+	} else

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1030: FILE: kernel/sched.c:3323:
+		if (!rq->expired->nr_active) {
+			schedstat_inc(rq, yld_both_empty);
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: kernel/sched.c:3915:
+		BUG_ON(rq->nr_running != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 29 warnings, 16 checks, 956 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
