WARNING:REPEATED_WORD: Possible repeated word: 'to'
#27: 
module.c only has to to track one vm area, expect in the few lines that

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
--- 19-rc1.4/mm/vmalloc.c Fri, 11 Jan 2002 15:36:30 +1100 kaos (linux-2.4/j/15_vmalloc.c 1.1.2.1.1.1.2.2.3.2.4.1.1.2 644)

CHECK:SPACING: No space is necessary after a cast
#68: FILE: mm/vmalloc.c:221:
+	new = (struct vm_struct *) kmalloc(sizeof (*new), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#68: FILE: mm/vmalloc.c:221:
+	new = (struct vm_struct *) kmalloc(sizeof (*new), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#68: FILE: mm/vmalloc.c:221:
+	new = (struct vm_struct *) kmalloc(sizeof (*new), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#71: FILE: mm/vmalloc.c:224:
+	if (!start || ((PAGE_SIZE - 1) & (unsigned long) start)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#72: FILE: mm/vmalloc.c:225:
+		printk(KERN_ERR "Trying to vsplit() bad start address (%p)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsplit', this function's name, in a string
#72: FILE: mm/vmalloc.c:225:
+		printk(KERN_ERR "Trying to vsplit() bad start address (%p)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#82: FILE: mm/vmalloc.c:235:
+		printk(KERN_ERR "Trying to vsplit() nonexistent vm area (%p)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsplit', this function's name, in a string
#82: FILE: mm/vmalloc.c:235:
+		printk(KERN_ERR "Trying to vsplit() nonexistent vm area (%p)\n",

CHECK:SPACING: No space is necessary after a cast
#86: FILE: mm/vmalloc.c:239:
+	if (!split || ((PAGE_SIZE - 1) & (unsigned long) split) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->addr'
#86: FILE: mm/vmalloc.c:239:
+	if (!split || ((PAGE_SIZE - 1) & (unsigned long) split) ||
+	    (unsigned long) split > (unsigned long) (p->addr) + p->size) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#87: FILE: mm/vmalloc.c:240:
+	    (unsigned long) split > (unsigned long) (p->addr) + p->size) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#88: FILE: mm/vmalloc.c:241:
+		printk(KERN_ERR "Trying to vsplit() bad split address (%p)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsplit', this function's name, in a string
#88: FILE: mm/vmalloc.c:241:
+		printk(KERN_ERR "Trying to vsplit() bad split address (%p)\n",

CHECK:SPACING: No space is necessary after a cast
#94: FILE: mm/vmalloc.c:247:
+	new->size = p->size - ((char *) split - (char *) start);

CHECK:SPACING: No space is necessary after a cast
#95: FILE: mm/vmalloc.c:248:
+	p->size = ((char *) split - (char *) start);

WARNING:INDENTED_LABEL: labels should not be indented
#100: FILE: mm/vmalloc.c:253:
+      out_unlock:

WARNING:INDENTED_LABEL: labels should not be indented
#102: FILE: mm/vmalloc.c:255:
+      out:

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: kernel/module.c:566:
+		void *split = (char *)mod + PAGE_ALIGN(mod->runsize);
+		split = vsplit(mod, split);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#133: FILE: kernel/module.c:567:
+		if (split) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#137: FILE: kernel/module.c:571:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: include/linux/vmalloc.h:23:
+extern void * vsplit(void * start, void * split);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: include/linux/vmalloc.h:23:
+extern void * vsplit(void * start, void * split);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: include/linux/vmalloc.h:23:
+extern void * vsplit(void * start, void * split);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/vmalloc.h:23:
+extern void * vsplit(void * start, void * split);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#172: FILE: include/linux/module.h:89:
+	int runsize;			/* Size without init sections, 0 if there are no init sections */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: include/linux/init.h:118:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#184: FILE: include/linux/init.h:118:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init") over __attribute__((__section__(".data.init")))
#184: FILE: include/linux/init.h:118:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: include/linux/init.h:124:
+#define __INITDATA	.section	".data.init","aw"
                   	        	            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 16 warnings, 9 checks, 134 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
