ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#59: FILE: Documentation/filesystems/proc.txt:1588:
load-balancing

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#112: FILE: include/linux/inetdevice.h:48:
+#define IN_DEV_HIDDEN(in_dev)		((in_dev)->cnf.hidden &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#129: FILE: include/linux/sysctl.h:329:
+	NET_IPV4_CONF_ARPFILTER=13,
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: include/linux/sysctl.h:330:
+	NET_IPV4_CONF_HIDDEN=14
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#145: FILE: net/ipv4/arp.c:71:
+ *					interface and don't reply for it
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#167: FILE: net/ipv4/arp.c:335:
+		if (in_dev2) in_dev_put(in_dev2);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#185: FILE: net/ipv4/arp.c:763:
+		    (arp->ar_op == __constant_htons(ARPOP_REQUEST) &&

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#190: FILE: net/ipv4/arp.c:768:
+		if (dev2) {
+		    if (in_dev2) in_dev_put(in_dev2);

WARNING:TABSTOP: Statements should start on a tabstop
#191: FILE: net/ipv4/arp.c:769:
+		    if (in_dev2) in_dev_put(in_dev2);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#191: FILE: net/ipv4/arp.c:769:
+		    if (in_dev2) in_dev_put(in_dev2);

WARNING:TABSTOP: Statements should start on a tabstop
#193: FILE: net/ipv4/arp.c:771:
+		    if (reply)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 1)
#193: FILE: net/ipv4/arp.c:771:
+		    if (reply)


ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#214: FILE: net/ipv4/arp.c:798:
+						(in_dev2=in_dev_get(dev2)) != NULL &&
 						        ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#216: FILE: net/ipv4/arp.c:800:
+						if (dev2) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#217: FILE: net/ipv4/arp.c:801:
+							if (in_dev2) in_dev_put(in_dev2);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#217: FILE: net/ipv4/arp.c:801:
+							if (in_dev2) in_dev_put(in_dev2);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#219: FILE: net/ipv4/arp.c:803:
+							if (skip) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000534134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 9 warnings, 0 checks, 182 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000534134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
