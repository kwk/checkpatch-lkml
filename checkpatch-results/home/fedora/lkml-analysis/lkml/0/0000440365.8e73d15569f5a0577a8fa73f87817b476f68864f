WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#31: 
Any pages which were succesfully reclaimed are batch-freed.  Pages
                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#80: FILE: mm/vmscan.c:41:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#80: FILE: mm/vmscan.c:41:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#80: FILE: mm/vmscan.c:41:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#95: FILE: mm/vmscan.c:56:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#95: FILE: mm/vmscan.c:56:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#95: FILE: mm/vmscan.c:56:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+									\
+			prev = list_entry(_page->lru.prev,		\
+					struct page, lru);		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: mm/vmscan.c:97:
+shrink_list(struct list_head *page_list, int nr_pages, zone_t *classzone,
+		unsigned int gfp_mask, int priority, int *max_scan)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: mm/vmscan.c:118:
+		BUG_ON(PageActive(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: mm/vmscan.c:218:
+^I^I * not in use by anybody. ^I(pagecache + us == 2)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: mm/vmscan.c:249:
+		BUG_ON(PageLRU(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: mm/vmscan.c:272:
+shrink_cache(int nr_pages, zone_t *classzone,
+		unsigned int gfp_mask, int priority, int max_scan)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: mm/vmscan.c:298:
+				BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: mm/vmscan.c:319:
+		nr_pages = shrink_list(&page_list, nr_pages, classzone,
+					gfp_mask, priority, &max_scan);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#536: FILE: mm/vmscan.c:331:
+				BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: mm/vmscan.c:343:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#549: FILE: mm/vmscan.c:343:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: mm/vmscan.c:343:
+  ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: mm/vmscan.c:347:
+^Ireturn nr_pages;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#588: FILE: mm/vmscan.c:382:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#625: FILE: mm/vmscan.c:414:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#627: FILE: mm/vmscan.c:416:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: mm/vmscan.c:428:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#640: FILE: mm/vmscan.c:429:
+		BUG_ON(!PageActive(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: mm/vmscan.c:448:
+shrink_caches(zone_t *classzone, int priority,
+		unsigned int gfp_mask, int nr_pages)

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: mm/vmscan.c:456:
+  ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#675: FILE: mm/vmscan.c:456:
+  ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: mm/vmscan.c:456:
+  ^I^Ireturn 0;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#692: FILE: mm/vmscan.c:471:
+	atomic_add(ratio+1, &nr_to_refill);
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440365.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 15 warnings, 11 checks, 705 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440365.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
