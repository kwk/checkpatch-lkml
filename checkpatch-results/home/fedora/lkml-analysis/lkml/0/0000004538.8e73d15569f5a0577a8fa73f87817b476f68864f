WARNING:REPEATED_WORD: Possible repeated word: 'table'
#31: 
- the guest page table table

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
   * some kernels use a page as both a page table and a page directory.  this

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#55: FILE: drivers/kvm/mmu.c:29:
+#define pgprintk(x...) do { printk(x); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#55: FILE: drivers/kvm/mmu.c:29:
+#define pgprintk(x...) do { printk(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#56: FILE: drivers/kvm/mmu.c:30:
+#define rmap_printk(x...) do { printk(x); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#56: FILE: drivers/kvm/mmu.c:30:
+#define rmap_printk(x...) do { printk(x); } while (0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#67: FILE: drivers/kvm/mmu.c:39:
+#define PT64_ENT_PER_PAGE (1 << PT64_PT_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: drivers/kvm/mmu.c:41:
+#define PT32_ENT_PER_PAGE (1 << PT32_PT_BITS)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#77: FILE: drivers/kvm/mmu.c:297:
+static unsigned kvm_page_table_hashfn(gfn_t gfn)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pte_chain)...) over kzalloc(sizeof(struct kvm_pte_chain)...)
#110: FILE: drivers/kvm/mmu.c:337:
+		pte_chain = kzalloc(sizeof(struct kvm_pte_chain), GFP_NOWAIT);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: drivers/kvm/mmu.c:338:
+		BUG_ON(!pte_chain);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: drivers/kvm/mmu.c:344:
+		if (pte_chain->parent_ptes[NR_PTE_CHAIN_ENTRIES-1])
 		                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pte_chain)...) over kzalloc(sizeof(struct kvm_pte_chain)...)
#125: FILE: drivers/kvm/mmu.c:352:
+	pte_chain = kzalloc(sizeof(struct kvm_pte_chain), GFP_NOWAIT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: drivers/kvm/mmu.c:353:
+	BUG_ON(!pte_chain);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: drivers/kvm/mmu.c:366:
+		BUG_ON(page->parent_pte != parent_pte);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#151: FILE: drivers/kvm/mmu.c:378:
+				pte_chain->parent_ptes[i]
+					= pte_chain->parent_ptes[i + 1];

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: drivers/kvm/mmu.c:384:
+	BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#163: FILE: drivers/kvm/mmu.c:390:
+	unsigned index;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#168: FILE: drivers/kvm/mmu.c:395:
+	pgprintk("%s: looking for gfn %lx\n", __FUNCTION__, gfn);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#174: FILE: drivers/kvm/mmu.c:401:
+				 __FUNCTION__, page->role.word);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: drivers/kvm/mmu.c:410:
+					     unsigned level,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#188: FILE: drivers/kvm/mmu.c:415:
+	unsigned index;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: drivers/kvm/mmu.c:416:
+	unsigned quadrant;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#203: FILE: drivers/kvm/mmu.c:430:
+	pgprintk("%s: looking gfn %lx role %x\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#210: FILE: drivers/kvm/mmu.c:437:
+			pgprintk("%s: found\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#216: FILE: drivers/kvm/mmu.c:443:
+	pgprintk("%s: adding gfn %lx role %x\n", __FUNCTION__, gfn, role.word);

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: drivers/kvm/mmu.c:601:
+	gfn_t root_gfn;
+	root_gfn = vcpu->cr3 >> PAGE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#365: FILE: drivers/kvm/mmu.c:736:
+				 __FUNCTION__, (gfn_t)(gaddr >> PAGE_SHIFT));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: drivers/kvm/kvm.h:108:
+	unsigned word;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#482: FILE: drivers/kvm/paging_tmpl.h:79:
+	pgprintk("%s: addr %lx\n", __FUNCTION__, addr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#494: FILE: drivers/kvm/paging_tmpl.h:94:
+	pgprintk("%s: table_gfn[%d] %lx\n", __FUNCTION__,

ERROR:SPACING: space prohibited before that close square bracket ']'
#511: FILE: drivers/kvm/paging_tmpl.h:131:
+		walker->table_gfn[walker->level - 1 ] = table_gfn;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#512: FILE: drivers/kvm/paging_tmpl.h:132:
+		pgprintk("%s: table_gfn[%d] %lx\n", __FUNCTION__,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#532: FILE: drivers/kvm/paging_tmpl.h:225:
+		if (level - 1 == PT_PAGE_TABLE_LEVEL
+		    && walker->level == PT_DIRECTORY_LEVEL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#540: FILE: drivers/kvm/paging_tmpl.h:233:
+		shadow_page = kvm_mmu_get_page(vcpu, table_gfn, addr, level-1,
 		                                                           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#561: FILE: drivers/kvm/paging_tmpl.h:296:
+			 __FUNCTION__, gfn);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#574: FILE: drivers/kvm/paging_tmpl.h:332:
+	pgprintk("%s: addr %lx err %x\n", __FUNCTION__, addr, error_code);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: drivers/kvm/paging_tmpl.h:340:
+			printk("%s: oom\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#582: FILE: drivers/kvm/paging_tmpl.h:340:
+			printk("%s: oom\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#590: FILE: drivers/kvm/paging_tmpl.h:352:
+		pgprintk("%s: not mapped\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#596: FILE: drivers/kvm/paging_tmpl.h:358:
+	pgprintk("%s: shadow pte %p %llx\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#609: FILE: drivers/kvm/paging_tmpl.h:370:
+	pgprintk("%s: updated shadow pte %p %llx\n", __FUNCTION__,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004538.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 33 warnings, 8 checks, 550 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004538.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
