WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -u --recursive --new-file -X /linux/dontdiff a/include/linux/loop.h b/include/linux/loop.h

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#28: 
--- a/include/linux/loop.h	Fri Nov 22 22:41:13 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: include/linux/loop.h:80:
+^I__kernel_old_dev_t lo_device; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: include/linux/loop.h:81:
+^Iunsigned long^I   lo_inode; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: include/linux/loop.h:82:
+^I__kernel_old_dev_t lo_rdevice; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#79: FILE: include/linux/loop.h:85:
+^Iint^I^I   lo_encrypt_key_size; ^I/* ioctl w/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: include/linux/loop.h:95:
+^Iunsigned long long lo_device; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: include/linux/loop.h:96:
+^Iunsigned long^I   lo_inode; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: include/linux/loop.h:97:
+^Iunsigned long long lo_rdevice; ^I^I/* ioctl r/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: include/linux/loop.h:100:
+^Iint^I^I   lo_encrypt_key_size; ^I/* ioctl w/o */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: include/linux/loop.h:129:
+^Iint (*init)(struct loop_device *, const struct loop_info64 *); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct loop_device *' should also have an identifier name
#108: FILE: include/linux/loop.h:129:
+	int (*init)(struct loop_device *, const struct loop_info64 *); 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct loop_info64 *' should also have an identifier name
#108: FILE: include/linux/loop.h:129:
+	int (*init)(struct loop_device *, const struct loop_info64 *); 

WARNING:NEW_TYPEDEFS: do not add new typedefs
#144: FILE: include/asm-alpha/posix_types.h:43:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#156: FILE: include/asm-arm/posix_types.h:48:
+typedef unsigned short		__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#167: FILE: include/asm-cris/posix_types.h:41:
+typedef unsigned short	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#178: FILE: include/asm-i386/posix_types.h:36:
+typedef unsigned short	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#189: FILE: include/asm-ia64/posix_types.h:46:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#201: FILE: include/asm-m68k/posix_types.h:36:
+typedef unsigned short	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#212: FILE: include/asm-mips/posix_types.h:42:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#223: FILE: include/asm-mips64/posix_types.h:42:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#234: FILE: include/asm-parisc/posix_types.h:48:
+typedef unsigned int		__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#246: FILE: include/asm-ppc/posix_types.h:36:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#257: FILE: include/asm-ppc64/posix_types.h:42:
+typedef unsigned long	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#268: FILE: include/asm-s390/posix_types.h:42:
+typedef unsigned short	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#279: FILE: include/asm-s390x/posix_types.h:45:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#291: FILE: include/asm-sh/posix_types.h:34:
+typedef unsigned short	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#302: FILE: include/asm-sparc/posix_types.h:34:
+typedef unsigned short	       __kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#313: FILE: include/asm-sparc64/posix_types.h:37:
+typedef unsigned int	       __kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#326: FILE: include/asm-v850/posix_types.h:43:
+typedef unsigned int	__kernel_old_dev_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#339: FILE: include/asm-x86_64/posix_types.h:25:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#340: FILE: include/asm-x86_64/posix_types.h:26:
+typedef int		__kernel_clockid_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#348: FILE: include/asm-x86_64/posix_types.h:45:
+typedef unsigned long	__kernel_old_dev_t;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#377: FILE: drivers/block/loop.c:218:
+			printk(KERN_ERR "loop: transfer error block %llu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#398: FILE: drivers/block/loop.c:290:
+		printk(KERN_ERR "loop: transfer error block %ld\n",

CHECK:SPACING: No space is necessary after a cast
#460: FILE: drivers/block/loop.c:843:
+	if ((unsigned int) info->lo_encrypt_key_size > LO_KEY_SIZE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: drivers/block/loop.c:845:
+^Itype = info->lo_encrypt_type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: drivers/block/loop.c:875:
+^I^Imemcpy(lo->lo_encrypt_key, info->lo_encrypt_key, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: drivers/block/loop.c:889:
+	if (copy_from_user(&info, arg, sizeof (struct loop_info)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#540: FILE: drivers/block/loop.c:911:
+	if (copy_from_user(&info64, arg, sizeof (struct loop_info64)))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#588: FILE: drivers/block/loop.c:945:
+static int
+loop_get_status_old(struct loop_device *lo, struct loop_info *arg) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#607: FILE: drivers/block/loop.c:964:
+		memcpy(info.lo_encrypt_key,info64.lo_encrypt_key,LO_KEY_SIZE);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#607: FILE: drivers/block/loop.c:964:
+		memcpy(info.lo_encrypt_key,info64.lo_encrypt_key,LO_KEY_SIZE);
 		                                                ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#620: FILE: drivers/block/loop.c:977:
+static int
+loop_get_status64(struct loop_device *lo, struct loop_info64 *arg) {

CHECK:SPACING: No space is necessary after a cast
#639: FILE: drivers/block/loop.c:1005:
+		err = loop_set_status_old(lo, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#643: FILE: drivers/block/loop.c:1008:
+		err = loop_get_status_old(lo, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#646: FILE: drivers/block/loop.c:1011:
+		err = loop_set_status64(lo, (struct loop_info64 *) arg);

CHECK:SPACING: No space is necessary after a cast
#649: FILE: drivers/block/loop.c:1014:
+		err = loop_get_status64(lo, (struct loop_info64 *) arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 35 warnings, 5 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
