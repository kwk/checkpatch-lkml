WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
#	           ChangeSet	1.1026  -> 1.1028 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#	include/linux/sched.h	1.139   -> 1.140  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#	       kernel/fork.c	1.111   -> 1.113  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#	       kernel/user.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#	      kernel/sched.c	1.164   -> 1.165  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
# 03/02/28	ed@oscar.et.ca	1.1027

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
# Add user and thread group governors to prevent either from monoplizing

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
# the system.  The governors work by limiting the sum of the timeslices

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
# of active tasks in a group to <n> timeslices.  The defaults set <n> to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# 1.5 for thread groups and to 30 for user tasks.  For numa systems the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
# governors are per node.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#111: 
--- a/include/linux/sched.h	Fri Feb 28 07:33:49 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: include/linux/sched.h:200:
+        atomic_t count;         /* number of refs */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/linux/sched.h:200:
+        atomic_t count;         /* number of refs */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: include/linux/sched.h:370:
+	struct ptg_struct * ptgroup;		/* pseudo thread group for this task */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#151: FILE: kernel/fork.c:77:
+	if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#151: FILE: kernel/fork.c:77:
+	if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
 	                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: kernel/fork.c:78:
+                kfree(tsk->ptgroup);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: kernel/fork.c:78:
+                kfree(tsk->ptgroup);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/fork.c:79:
+                tsk->ptgroup = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/fork.c:79:
+                tsk->ptgroup = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: kernel/fork.c:80:
+                tsk->governor = &tsk->user->active[cpu_to_node(task_cpu(tsk))];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: kernel/fork.c:80:
+                tsk->governor = &tsk->user->active[cpu_to_node(task_cpu(tsk))];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: kernel/fork.c:81:
+                if (tsk == current)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: kernel/fork.c:81:
+                if (tsk == current)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: kernel/fork.c:82:
+                        atomic_inc(tsk->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/fork.c:82:
+                        atomic_inc(tsk->governor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/fork.c:83:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: kernel/fork.c:83:
+        }$

ERROR:SPACING: space prohibited after that open parenthesis '('
#184: FILE: kernel/fork.c:748:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#184: FILE: kernel/fork.c:748:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: kernel/fork.c:749:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
+	     (clone_flags & CLONE_THREAD)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#186: FILE: kernel/fork.c:750:
+		if (current->ptgroup)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: kernel/fork.c:752:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: kernel/fork.c:754:
+			int i;
+			current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->ptgroup)...) over kmalloc(sizeof(struct ptg_struct)...)
#190: FILE: kernel/fork.c:754:
+			current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: kernel/fork.c:758:
+			atomic_set(&current->ptgroup->count,2);
 			                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#195: FILE: kernel/fork.c:759:
+			for(i=0; i < MAX_NUMNODES; i++)
 			     ^

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: kernel/fork.c:759:
+			for(i=0; i < MAX_NUMNODES; i++)

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: kernel/fork.c:767:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: kernel/fork.c:917:
+^I * required if the process is a thread. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: kernel/sched.c:133:
+	int govern = threads;
+	if (p->user->uid)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#251: FILE: kernel/sched.c:139:
+#if 1

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: kernel/sched.c:142:
+		static int next;
+		if (time_after(jiffies, next)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#255: FILE: kernel/sched.c:143:
+			printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#256: FILE: kernel/sched.c:144:
+			  p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: kernel/sched.c:144:
+			printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",
+			  p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#256: FILE: kernel/sched.c:144:
+			  p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);
 			                                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: kernel/sched.c:145:
+			next = jiffies + HZ*300;
 			                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: kernel/sched.c:1098:
+        if (p->ptgroup)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: kernel/sched.c:1098:
+        if (p->ptgroup)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: kernel/sched.c:1099:
+                p->governor = &p->ptgroup->active[cpu_to_node(this_cpu)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: kernel/sched.c:1099:
+                p->governor = &p->ptgroup->active[cpu_to_node(this_cpu)];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: kernel/sched.c:1100:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: kernel/sched.c:1100:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: kernel/sched.c:1101:
+                p->governor = &p->user->active[cpu_to_node(this_cpu)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: kernel/sched.c:1101:
+                p->governor = &p->user->active[cpu_to_node(this_cpu)];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: kernel/sched.c:2762:
+        current->governor = &current->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: kernel/sched.c:2762:
+        current->governor = &current->user->active[numa_node_id()];$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#349: FILE: kernel/user.c:33:
+	.active		= {[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)},
 	       		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#365: FILE: kernel/user.c:101:
+		for(i=0; i < MAX_NUMNODES; i++)
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#365: FILE: kernel/user.c:101:
+		for(i=0; i < MAX_NUMNODES; i++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 39 warnings, 10 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
