WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/asm-i386/text_lock_stabs.h:1:
+/* text_lock_stabs.h - common stabs symbol code for .text.lock code

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: include/asm-i386/text_lock_stabs.h:17:
+^I"\t.subsection 1\n" ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#82: FILE: include/asm-i386/text_lock_stabs.h:18:
+^I"\t7:\n" ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: include/asm-i386/text_lock_stabs.h:19:
+^I"\t.subsection 0\n" ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: include/asm-i386/text_lock_stabs.h:23:
+^I",100,0,0,0\n"^I^I ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: include/asm-i386/text_lock_stabs.h:26:
+^I"\t.stabs " "\"__stabs" #l ^I^I\$

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#90: FILE: include/asm-i386/text_lock_stabs.h:26:
+	"\t.stabs " "\"__stabs" #l 		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: include/asm-i386/text_lock_stabs.h:27:
+^I"-at-" __FILE__ ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: include/asm-i386/text_lock_stabs.h:28:
+^I"-line-" __stringify(__LINE__) ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: include/asm-i386/text_lock_stabs.h:31:
+#define __stabs_common(o,l) ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: include/asm-i386/text_lock_stabs.h:31:
+#define __stabs_common(o,l) 			\
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#95: FILE: include/asm-i386/text_lock_stabs.h:31:
+#define __stabs_common(o,l) 			\
+	({ 					\
+	__asm__ __volatile__( 			\
+	__stabs_string(l)			\
+	: : );					\
+	 o(l); 					\
+	})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: include/asm-i386/text_lock_stabs.h:32:
+^I({ ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: include/asm-i386/text_lock_stabs.h:33:
+^I__asm__ __volatile__( ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: include/asm-i386/text_lock_stabs.h:36:
+^I o(l); ^I^I^I^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: include/asm-i386/text_lock_stabs.h:38:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/asm-i386/text_lock_stabs.h:38:
+ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: include/asm-i386/text_lock_stabs.h:41:
+#define __stabs_common(o,l) o(l)
                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: include/asm-i386/text_lock_stabs.h:43:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/asm-i386/text_lock_stabs.h:43:
+ $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#155: FILE: include/linux/rwsem.h:38:
+#define down_read(sem)				\
+	do { 					\
+	rwsemtrace(sem,"Entering down_read"); 	\
+	__down_read(sem); 			\
+	rwsemtrace(sem,"Leaving down_read");	\
+	} while (0)				\
+ 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: include/linux/rwsem.h:39:
+^Ido { ^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#156: FILE: include/linux/rwsem.h:39:
+	do { 					\
+	rwsemtrace(sem,"Entering down_read"); 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: include/linux/rwsem.h:40:
+^Irwsemtrace(sem,"Entering down_read"); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/linux/rwsem.h:40:
+	rwsemtrace(sem,"Entering down_read"); 	\
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: include/linux/rwsem.h:41:
+^I__down_read(sem); ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: include/linux/rwsem.h:42:
+	rwsemtrace(sem,"Leaving down_read");	\
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: include/linux/rwsem.h:44:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: include/linux/rwsem.h:44:
+ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: include/linux/rwsem.h:45:
+#define down_write(sem) ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#162: FILE: include/linux/rwsem.h:45:
+#define down_write(sem) 			\
+	do { 					\
+	rwsemtrace(sem,"Entering down_write"); 	\
+	__down_write(sem); 			\
+	rwsemtrace(sem,"Leaving down_write");	\
+	} while (0)				\
+ 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: include/linux/rwsem.h:46:
+^Ido { ^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#163: FILE: include/linux/rwsem.h:46:
+	do { 					\
+	rwsemtrace(sem,"Entering down_write"); 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: include/linux/rwsem.h:47:
+^Irwsemtrace(sem,"Entering down_write"); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: include/linux/rwsem.h:47:
+	rwsemtrace(sem,"Entering down_write"); 	\
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: include/linux/rwsem.h:48:
+^I__down_write(sem); ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: include/linux/rwsem.h:49:
+	rwsemtrace(sem,"Leaving down_write");	\
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: include/linux/rwsem.h:51:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: include/linux/rwsem.h:51:
+ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: include/linux/rwsem.h:52:
+#define up_read(sem) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#169: FILE: include/linux/rwsem.h:52:
+#define up_read(sem) 				\
+	do { 					\
+	rwsemtrace(sem,"Entering up_read"); 	\
+	__up_read(sem); 			\
+	rwsemtrace(sem,"Leaving up_read");	\
+	} while (0)				\
+ 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: include/linux/rwsem.h:53:
+^Ido { ^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#170: FILE: include/linux/rwsem.h:53:
+	do { 					\
+	rwsemtrace(sem,"Entering up_read"); 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: include/linux/rwsem.h:54:
+^Irwsemtrace(sem,"Entering up_read"); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: include/linux/rwsem.h:54:
+	rwsemtrace(sem,"Entering up_read"); 	\
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: include/linux/rwsem.h:55:
+^I__up_read(sem); ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: include/linux/rwsem.h:56:
+	rwsemtrace(sem,"Leaving up_read");	\
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: include/linux/rwsem.h:58:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: include/linux/rwsem.h:58:
+ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/linux/rwsem.h:59:
+#define up_write(sem) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#176: FILE: include/linux/rwsem.h:59:
+#define up_write(sem) 				\
+	do { 					\
+	rwsemtrace(sem,"Entering up_write"); 	\
+	__up_write(sem); 			\
+	rwsemtrace(sem,"Leaving up_write");	\
+	} while (0)				\
+ 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/linux/rwsem.h:60:
+^Ido { ^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#177: FILE: include/linux/rwsem.h:60:
+	do { 					\
+	rwsemtrace(sem,"Entering up_write"); 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: include/linux/rwsem.h:61:
+^Irwsemtrace(sem,"Entering up_write"); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#178: FILE: include/linux/rwsem.h:61:
+	rwsemtrace(sem,"Entering up_write"); 	\
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: include/linux/rwsem.h:62:
+^I__up_write(sem); ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: include/linux/rwsem.h:63:
+	rwsemtrace(sem,"Leaving up_write");	\
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: include/linux/rwsem.h:65:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: include/linux/rwsem.h:65:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#200: FILE: include/asm-i386/semaphore.h:116:
+static inline void p__down(struct semaphore * sem)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: include/asm-i386/semaphore.h:140:
+static inline int p__down_interruptible(struct semaphore * sem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: include/asm-i386/semaphore.h:168:
+static inline int p__down_trylock(struct semaphore * sem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: include/asm-i386/semaphore.h:198:
+static inline void p__up(struct semaphore * sem)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: include/asm-i386/rwsem.h:231:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/asm-i386/rwsem.h:231:
+ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: include/asm-i386/spinlock.h:143:
+#define spin_lock(l) __stabs_common(p__spin_lock,l)
                                                 ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: include/asm-i386/smplock.h:43:
+#define lock_kernel() do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: include/asm-i386/smplock.h:44:
+^Iif (!++current->lock_depth) ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: include/asm-i386/smplock.h:45:
+^I^I__stabs_common(p__spin_lock, &kernel_flag); ^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: Documentation/Configure.help:24014:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: scripts/Makefile:47:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#609: FILE: scripts/add_lock_syms.c:1:
+/* Copyright 2002 John Levon <moz@compsoc.man.ac.uk>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#619: FILE: scripts/add_lock_syms.c:11:
+typedef unsigned long addr_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: scripts/add_lock_syms.c:12:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: scripts/add_lock_syms.c:12:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#621: FILE: scripts/add_lock_syms.c:13:
+char * get_lock_name(char * raw)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#621: FILE: scripts/add_lock_syms.c:13:
+char * get_lock_name(char * raw)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#623: FILE: scripts/add_lock_syms.c:15:
+	char * name = strdup(raw);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: scripts/add_lock_syms.c:21:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: scripts/add_lock_syms.c:21:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: scripts/add_lock_syms.c:25:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: scripts/add_lock_syms.c:25:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: scripts/add_lock_syms.c:26:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#634: FILE: scripts/add_lock_syms.c:26:
+ 
+ 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: scripts/add_lock_syms.c:26:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: scripts/add_lock_syms.c:27:
+addr_t get_vma(char * raw)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: scripts/add_lock_syms.c:30:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: scripts/add_lock_syms.c:30:
+ $

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#639: FILE: scripts/add_lock_syms.c:31:
+	if (sscanf(raw, "%lx", &vma) != 1) {
+		fprintf(stderr, "add_lock_syms: Malformed line.\n");
+		exit(1);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: scripts/add_lock_syms.c:38:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: scripts/add_lock_syms.c:38:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#647: FILE: scripts/add_lock_syms.c:39:
+ 
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#648: FILE: scripts/add_lock_syms.c:40:
+#if 0

ERROR:SPACING: spaces required around that '<' (ctx:ExV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
 ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#649: FILE: scripts/add_lock_syms.c:41:
+<undefined> text_lock_&bdev_lock-at-block_dev.c-line-333 ()
                                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: scripts/add_lock_syms.c:45:
+void read_objdump_g(FILE * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#655: FILE: scripts/add_lock_syms.c:47:
+	char * lock_name = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: scripts/add_lock_syms.c:48:
+	char * line = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: scripts/add_lock_syms.c:60:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: scripts/add_lock_syms.c:60:
+ $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#669: FILE: scripts/add_lock_syms.c:61:
+	if (line) {
+		free(line);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#674: FILE: scripts/add_lock_syms.c:66:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: scripts/add_lock_syms.c:69:
+	char * odcmd = "objdump -g ";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: scripts/add_lock_syms.c:70:
+	char * cmd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: scripts/add_lock_syms.c:71:
+	char const * vmlinux;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: scripts/add_lock_syms.c:72:
+	FILE * fp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: scripts/add_lock_syms.c:91:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: scripts/add_lock_syms.c:91:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: scripts/add_lock_syms.c:98:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: scripts/add_lock_syms.c:98:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: scripts/add_lock_syms.c:100:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: scripts/add_lock_syms.c:100:
+ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470858.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 57 warnings, 13 checks, 591 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470858.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
