WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#59: FILE: drivers/pci/pci.c:567:
+	printk (KERN_WARNING "PCI: Unable to reserve %s region #%d:%llx@%llx for device %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#59: FILE: drivers/pci/pci.c:567:
+	printk (KERN_WARNING "PCI: Unable to reserve %s region #%d:%llx@%llx for device %s\n",

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: drivers/pci/pci.h:12:
+^I^I^I^I^I  ^I u64, u64),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: drivers/pci/pci.h:12:
+^I^I^I^I^I  ^I u64, u64),$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: drivers/pci/pci-sysfs.c:68:
+		str += sprintf(str,"0x%016llx 0x%016llx 0x%016lx\n",
 		                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/pci/proc.c:356:
+		seq_printf(m, "\t%16llx",
 			dev->resource[i].start |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: drivers/pci/proc.c:360:
+		seq_printf(m, "\t%16llx",
 			dev->resource[i].start < dev->resource[i].end ?

WARNING:SPLIT_STRING: quoted string split across lines
#130: FILE: drivers/pci/setup-bus.c:360:
 				printk(KERN_WARNING "PCI: region %s/%d "
+				       "too large: %llx-%llx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: drivers/pci/setup-res.c:111:
+		printk(KERN_ERR "PCI: %s region %d of %s %s [%llx:%llx]\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#169: FILE: drivers/pci/setup-res.c:151:
+		printk(KERN_ERR "PCI: Failed to allocate %s resource #%d:%llx@%llx for %s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#178: FILE: drivers/pci/setup-res.c:179:
 			printk(KERN_WARNING "PCI: Ignore bogus resource %d "
+					    "[%llx:%llx] of %s\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: drivers/pnp/resource.c:362:
+	u64 * irq = &dev->res.irq_resource[idx].start;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: drivers/pnp/resource.c:427:
+	u64 * dma = &dev->res.dma_resource[idx].start;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: include/linux/ioport.h:116:
+extern struct resource * __request_region(struct resource *, u64 start, u64 n, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: include/linux/ioport.h:116:
+extern struct resource * __request_region(struct resource *, u64 start, u64 n, const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#317: FILE: include/linux/ioport.h:116:
+extern struct resource * __request_region(struct resource *, u64 start, u64 n, const char *name);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: include/linux/ioport.h:123:
+extern int __check_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#326: FILE: include/linux/ioport.h:123:
+extern int __check_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#326: FILE: include/linux/ioport.h:123:
+extern int __check_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#326: FILE: include/linux/ioport.h:123:
+extern int __check_region(struct resource *, u64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/ioport.h:124:
+extern void __release_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#327: FILE: include/linux/ioport.h:124:
+extern void __release_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#327: FILE: include/linux/ioport.h:124:
+extern void __release_region(struct resource *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#327: FILE: include/linux/ioport.h:124:
+extern void __release_region(struct resource *, u64, u64);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/resource.c:87:
+	seq_printf(m, "%*s%0*llx-%0*llx : %s\n",
 			depth * 2, "",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#474: FILE: kernel/resource.c:431:
+struct resource * __request_region(struct resource *parent, u64 start, u64 n, const char *name)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#505: FILE: kernel/resource.c:515:
+	printk(KERN_WARNING "Trying to free nonexistent resource <%16llx-%16llx>\n", start, end);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215428.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 6 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215428.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
