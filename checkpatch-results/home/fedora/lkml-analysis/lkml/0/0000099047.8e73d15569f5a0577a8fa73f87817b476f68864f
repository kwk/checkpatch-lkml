WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#49: FILE: Makefile:4:
+EXTRAVERSION = .5
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#65: FILE: arch/i386/kernel/cpu/common.c:213:
+   that is supposed to run on all CPUs. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#81: FILE: arch/i386/kernel/cpu/common.c:247:
 void __devinit generic_identify(struct cpuinfo_x86 * c)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#94: FILE: arch/i386/kernel/cpu/common.c:300:
 static void __devinit squash_the_stupid_serial_number(struct cpuinfo_x86 *c)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: drivers/ieee1394/sbp2.c:655:
+		 * send them. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: drivers/ieee1394/sbp2.c:659:
+		 * highlevel drivers which would deadlock if blocked. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#212: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:894:
+	int max_data_size = desc_sz - sizeof (struct mthca_next_seg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:1202:
+^Iif (cap->max_send_wr  ^I > dev->limits.max_wqes ||$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:1203:
+^I    cap->max_recv_wr  ^I > dev->limits.max_wqes ||$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:1204:
+^I    cap->max_send_sge ^I > dev->limits.max_sg   ||$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:1205:
+^I    cap->max_recv_sge ^I > dev->limits.max_sg   ||$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cfi->chips[i].wq
#337: FILE: drivers/mtd/chips/cfi_cmdset_0001.c:411:
+		init_waitqueue_head(&(cfi->chips[i].wq));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#393: FILE: drivers/net/skge.c:1184:
+	printk(KERN_WARNING PFX "%s: genesis reset failed\n", dev->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/net/skge.c:1219:
+	xm_write16(hw, port, XM_STAT_CMD,
+			XM_SC_CLR_RXC | XM_SC_CLR_TXC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/net/skge.c:1222:
+	xm_write16(hw, port, XM_STAT_CMD,
+			XM_SC_CLR_RXC | XM_SC_CLR_TXC);

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: drivers/net/skge.c:2707:
+  ^Ihw->intr_mask |= portirqmask[skge->port];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: drivers/net/skge.c:2707:
+  ^Ihw->intr_mask |= portirqmask[skge->port];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: drivers/net/skge.c:2707:
+  ^Ihw->intr_mask |= portirqmask[skge->port];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: drivers/net/skge.c:2708:
+  ^Iskge_write32(hw, B0_IMSK, hw->intr_mask);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: drivers/net/skge.c:2708:
+  ^Iskge_write32(hw, B0_IMSK, hw->intr_mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/net/skge.c:2708:
+  ^Iskge_write32(hw, B0_IMSK, hw->intr_mask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: drivers/net/skge.c:2709:
+ ^Ispin_unlock_irq(&hw->hw_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#499: FILE: drivers/net/skge.c:2709:
+ ^Ispin_unlock_irq(&hw->hw_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/net/skge.c:2709:
+ ^Ispin_unlock_irq(&hw->hw_lock);$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#569: FILE: drivers/net/skge.h:2476:
+	spinlock_t	     hw_lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#621: FILE: drivers/scsi/sd.c:1425:
+			printk(KERN_ERR "%s: malformed MODE SENSE response",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: drivers/scsi/sd.c:1426:
+			printk(KERN_ERR "%s: malformed MODE SENSE response",
+				diskname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: fs/ext2/xattr.c:806:
+		ea_bdebug(bh, "refcount now=%d",
+			le32_to_cpu(HDR(bh)->h_refcount));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#774: FILE: fs/ramfs/inode.c:109:
+		dir->i_mtime = dir->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: include/linux/netlink.h:164:
+int netlink_attachskb(struct sock *sk, struct sk_buff *skb, int nonblock,
+		long timeo, struct sock *ssk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: include/linux/ptrace.h:87:
+extern void __ptrace_detach(struct task_struct *, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#858: FILE: include/linux/ptrace.h:87:
+extern void __ptrace_detach(struct task_struct *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#858: FILE: include/linux/ptrace.h:87:
+extern void __ptrace_detach(struct task_struct *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#871: FILE: include/linux/sched.h:1078:
+extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#871: FILE: include/linux/sched.h:1078:
+extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_sigaction *' should also have an identifier name
#871: FILE: include/linux/sched.h:1078:
+extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_sigaction *' should also have an identifier name
#871: FILE: include/linux/sched.h:1078:
+extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: ipc/mqueue.c:1021:
+			ret = netlink_attachskb(sock, nc, 0,
+					MAX_SCHEDULE_TIMEOUT, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#911: FILE: kernel/ptrace.c:74:
+	BUG_ON(!child->ptrace);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1008: FILE: mm/mempolicy.c:527:
+	if (maxnode > PAGE_SIZE*BITS_PER_BYTE)
 	                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1024: FILE: net/bridge/br_netfilter.c:798:
+			printk("[%s]", realoutdev->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1071: FILE: net/core/datagram.c:223:
+		if ((len -= copy) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1090: FILE: net/core/datagram.c:235:
+		if ((copy = end - offset) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1137: FILE: net/core/datagram.c:265:
+			if ((copy = end - offset) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1144: FILE: net/core/datagram.c:272:
+				if ((len -= copy) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: net/netlink/af_netlink.c:705:
+int netlink_attachskb(struct sock *sk, struct sk_buff *skb, int nonblock,
+		long timeo, struct sock *ssk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#1223: FILE: sound/core/control_compat.c:177:
+	if (info == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000099047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 27 warnings, 14 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000099047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
