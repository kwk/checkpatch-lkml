WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
>> > After some googeling and digging in gamne i read that someone said that

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#62: 
2. Adds matching queue unfreeze functions that also reenable hd power
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: block/ll_rw_blk.c:340:
+       q->issue_protect_fn = ipf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: block/ll_rw_blk.c:346:
+       q->issue_unprotect_fn = iuf;$

CHECK:SPACING: No space is necessary after a cast
#179: FILE: block/ll_rw_blk.c:3967:
+       request_queue_t *q = (request_queue_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: block/ll_rw_blk.c:3967:
+       request_queue_t *q = (request_queue_t *) data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: block/ll_rw_blk.c:3968:
+       int pending;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: block/ll_rw_blk.c:3969:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: block/ll_rw_blk.c:3971:
+       spin_lock_irqsave(q->queue_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: block/ll_rw_blk.c:3972:
+       pending = timer_pending(&q->unfreeze_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: block/ll_rw_blk.c:3973:
+       spin_unlock_irqrestore(q->queue_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: block/ll_rw_blk.c:3974:
+       if (!pending)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#186: FILE: block/ll_rw_blk.c:3974:
+       if (!pending)
+	       q->issue_unprotect_fn(q);

CHECK:SPACING: No space is necessary after a cast
#195: FILE: block/ll_rw_blk.c:3983:
+       request_queue_t *q = (request_queue_t *) data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: block/ll_rw_blk.c:3983:
+       request_queue_t *q = (request_queue_t *) data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: block/ll_rw_blk.c:3985:
+       kblockd_schedule_work(&q->unfreeze_work);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: block/ll_rw_blk.c:3999:
+	mod_timer(&q->unfreeze_timer, msecs_to_jiffies(seconds*1000) + jiffies);
 	                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: block/ll_rw_blk.c:4012:
+^I   ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: block/ll_rw_blk.c:4012:
+^I   ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: block/ll_rw_blk.c:4019:
+       return queue_var_show(seconds, (page));$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#246: FILE: block/ll_rw_blk.c:4034:
+	if(freeze>0) {
 	         ^

ERROR:SPACING: space required before the open parenthesis '('
#246: FILE: block/ll_rw_blk.c:4034:
+	if(freeze>0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#248: FILE: block/ll_rw_blk.c:4036:
+		if (!blk_queue_stopped(q))
+		       q->issue_protect_fn(q);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: block/ll_rw_blk.c:4054:
+       .attr = {.name = "protect", .mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#266: FILE: block/ll_rw_blk.c:4054:
+       .attr = {.name = "protect", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: block/ll_rw_blk.c:4055:
+       .show = queue_protect_show,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: block/ll_rw_blk.c:4056:
+       .store = queue_protect_store,$

ERROR:SPACING: space required before the open brace '{'
#281: FILE: block/ll_rw_blk.c:4069:
+	if(error){

ERROR:SPACING: space required before the open parenthesis '('
#281: FILE: block/ll_rw_blk.c:4069:
+	if(error){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: block/ll_rw_blk.c:4070:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blk_protect_register', this function's name, in a string
#283: FILE: block/ll_rw_blk.c:4071:
+		       "blk_protect_register(): failed to create protect queue attribute!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxO)
#298: FILE: block/ll_rw_blk.c:4086:
+	sysfs_remove_file(&q->kobj,&queue_protect_entry.attr);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#298: FILE: block/ll_rw_blk.c:4086:
+	sysfs_remove_file(&q->kobj,&queue_protect_entry.attr);
 	                           ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#309: FILE: drivers/ata/libata-core.c:77:
+int libata_protect_method = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: drivers/ata/libata-scsi.c:845:
+extern int scsi_unprotect_queue(request_queue_t *q);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#330: FILE: drivers/ata/libata-scsi.c:850:
+	struct ata_port *ap = (struct ata_port *) &sdev->host->hostdata[0];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: drivers/ata/libata-scsi.c:855:
+^I^Iunload = 1;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#336: FILE: drivers/ata/libata-scsi.c:856:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload method requested, overriding drive capability check..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_scsi_issue_protect_fn', this function's name, in a string
#336: FILE: drivers/ata/libata-scsi.c:856:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload method requested, overriding drive capability check..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#338: FILE: drivers/ata/libata-scsi.c:858:
+	}
+	else if (libata_protect_method == 2) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/ata/libata-scsi.c:859:
+^I^Iunload = 0;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#340: FILE: drivers/ata/libata-scsi.c:860:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): standby method requested, overriding drive capability check..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_scsi_issue_protect_fn', this function's name, in a string
#340: FILE: drivers/ata/libata-scsi.c:860:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): standby method requested, overriding drive capability check..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#342: FILE: drivers/ata/libata-scsi.c:862:
+	}
+	else if (ata_id_has_unload(dev->id)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#344: FILE: drivers/ata/libata-scsi.c:864:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload support reported by drive..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_scsi_issue_protect_fn', this function's name, in a string
#344: FILE: drivers/ata/libata-scsi.c:864:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload support reported by drive..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#346: FILE: drivers/ata/libata-scsi.c:866:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#346: FILE: drivers/ata/libata-scsi.c:866:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#348: FILE: drivers/ata/libata-scsi.c:868:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload support NOT reported by drive!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_scsi_issue_protect_fn', this function's name, in a string
#348: FILE: drivers/ata/libata-scsi.c:868:
+		printk(KERN_DEBUG "ata_scsi_issue_protect_fn(): unload support NOT reported by drive!..\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: drivers/ata/libata-scsi.c:903:
+^Iblk_queue_issue_protect_fn(sdev->request_queue, ata_scsi_issue_protect_fn);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: drivers/ata/libata-scsi.c:904:
+^Iblk_queue_issue_unprotect_fn(sdev->request_queue, ata_scsi_issue_unprotect_fn);^I$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#392: FILE: drivers/ide/ide-disk.c:75:
+int idedisk_protect_method = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: drivers/ide/ide-disk.c:739:
+ *  - we freeze the queue regardless of success and rely on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: drivers/ide/ide-disk.c:741:
+ *    failed (to be consistent with the libata handler)... should $

WARNING:TYPO_SPELLING: 'accquired' may be misspelled - perhaps 'acquired'?
#414: FILE: drivers/ide/ide-disk.c:749:
+	/* spin lock already accquired */
 	                     ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: drivers/ide/ide-disk.c:769:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#440: FILE: drivers/ide/ide-disk.c:775:
+	/* The unload feature of the IDLE_IMMEDIATE command
+	   temporarily disables HD power management from spinning down

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#441: FILE: drivers/ide/ide-disk.c:776:
+	   the disk. Any other command will reenable HD pm, so, if
 	                                    ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: drivers/ide/ide-disk.c:779:
+	   just fine. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#446: FILE: drivers/ide/ide-disk.c:781:
+		printk(KERN_DEBUG "ide_unprotect_queue(): No pending I/O, re-enabling power management..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_unprotect_queue', this function's name, in a string
#446: FILE: drivers/ide/ide-disk.c:781:
+		printk(KERN_DEBUG "ide_unprotect_queue(): No pending I/O, re-enabling power management..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: drivers/ide/ide-disk.c:807:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#478: FILE: drivers/ide/ide-disk.c:813:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#492: FILE: drivers/ide/ide-disk.c:827:
+	if (ret)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#494: FILE: drivers/ide/ide-disk.c:829:
+		printk(KERN_DEBUG "ide_protect_queue(): Warning: head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#494: FILE: drivers/ide/ide-disk.c:829:
+		printk(KERN_DEBUG "ide_protect_queue(): Warning: head NOT parked!..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: drivers/ide/ide-disk.c:834:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#500: FILE: drivers/ide/ide-disk.c:835:
+		if (args[3] == 0xc4)
[...]
+		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#501: FILE: drivers/ide/ide-disk.c:836:
+			printk(KERN_DEBUG "ide_protect_queue(): head parked..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#501: FILE: drivers/ide/ide-disk.c:836:
+			printk(KERN_DEBUG "ide_protect_queue(): head parked..\n");

CHECK:BRACES: Unbalanced braces around else statement
#502: FILE: drivers/ide/ide-disk.c:837:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#504: FILE: drivers/ide/ide-disk.c:839:
+			printk(KERN_DEBUG "ide_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#504: FILE: drivers/ide/ide-disk.c:839:
+			printk(KERN_DEBUG "ide_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: Unbalanced braces around else statement
#508: FILE: drivers/ide/ide-disk.c:843:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#509: FILE: drivers/ide/ide-disk.c:844:
+		printk(KERN_DEBUG "ide_protect_queue(): head park not requested, used standby!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#509: FILE: drivers/ide/ide-disk.c:844:
+		printk(KERN_DEBUG "ide_protect_queue(): head park not requested, used standby!..\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: drivers/ide/ide-disk.c:847:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: drivers/ide/ide-disk.c:861:
+^I^Iunload = 1;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#527: FILE: drivers/ide/ide-disk.c:862:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload method requested, overriding drive capability check..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'idedisk_issue_protect_fn', this function's name, in a string
#527: FILE: drivers/ide/ide-disk.c:862:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload method requested, overriding drive capability check..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#529: FILE: drivers/ide/ide-disk.c:864:
+	}
+	else if (idedisk_protect_method == 2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: drivers/ide/ide-disk.c:865:
+^I^Iunload = 0;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#531: FILE: drivers/ide/ide-disk.c:866:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): standby method requested, overriding drive capability check..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'idedisk_issue_protect_fn', this function's name, in a string
#531: FILE: drivers/ide/ide-disk.c:866:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): standby method requested, overriding drive capability check..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#533: FILE: drivers/ide/ide-disk.c:868:
+	}
+	else if (drive->id->cfsse & (1 << 13)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#535: FILE: drivers/ide/ide-disk.c:870:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload support reported by drive..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'idedisk_issue_protect_fn', this function's name, in a string
#535: FILE: drivers/ide/ide-disk.c:870:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload support reported by drive..\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#537: FILE: drivers/ide/ide-disk.c:872:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#537: FILE: drivers/ide/ide-disk.c:872:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#539: FILE: drivers/ide/ide-disk.c:874:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload support NOT reported by drive!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'idedisk_issue_protect_fn', this function's name, in a string
#539: FILE: drivers/ide/ide-disk.c:874:
+		printk(KERN_DEBUG "idedisk_issue_protect_fn(): unload support NOT reported by drive!..\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: drivers/ide/ide-io.c:1265:
+^I^I * are resuming from suspend). Prevents existing queue entries $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: drivers/ide/ide-io.c:1266:
+^I^I * being processed after queue is stopped by the hard disk $

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#577: FILE: drivers/ide/ide-io.c:1269:
+		if (test_bit(QUEUE_FLAG_STOPPED, &drive->queue->queue_flags) && !blk_pm_resume_request(rq)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#666: FILE: drivers/scsi/scsi_lib.c:2323:
+		printk(KERN_DEBUG "scsi_unprotect_queue(): No pending I/O, re-enabling power management..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_unprotect_queue', this function's name, in a string
#666: FILE: drivers/scsi/scsi_lib.c:2323:
+		printk(KERN_DEBUG "scsi_unprotect_queue(): No pending I/O, re-enabling power management..\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: drivers/scsi/scsi_lib.c:2332:
+   ^I^I   from scsi_ioctl_send_command() for default case... */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#675: FILE: drivers/scsi/scsi_lib.c:2332:
+   ^I^I   from scsi_ioctl_send_command() for default case... */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#675: FILE: drivers/scsi/scsi_lib.c:2332:
+		/* Good values for timeout and retries?  Values below
+   		   from scsi_ioctl_send_command() for default case... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#675: FILE: drivers/scsi/scsi_lib.c:2332:
+   		   from scsi_ioctl_send_command() for default case... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: drivers/scsi/scsi_lib.c:2334:
+^I^I   ^I^I     (10*HZ), 5))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#677: FILE: drivers/scsi/scsi_lib.c:2334:
+^I^I   ^I^I     (10*HZ), 5))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: drivers/scsi/scsi_lib.c:2334:
+		if (scsi_execute_req(sdev, scsi_cmd, DMA_NONE, NULL, 0, &sshdr,
+		   		     (10*HZ), 5))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#677: FILE: drivers/scsi/scsi_lib.c:2334:
+		   		     (10*HZ), 5))
 		   		        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#706: FILE: drivers/scsi/scsi_lib.c:2363:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#712: FILE: drivers/scsi/scsi_lib.c:2369:
+	} else

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#730: FILE: drivers/scsi/scsi_lib.c:2387:
+			   DMA_NONE, NULL, 0, 0, (10*HZ), 5,
 			                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#735: FILE: drivers/scsi/scsi_lib.c:2392:
+		printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#735: FILE: drivers/scsi/scsi_lib.c:2392:
+		printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#751: FILE: drivers/scsi/scsi_lib.c:2408:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#752: FILE: drivers/scsi/scsi_lib.c:2409:
+		if (args[3] == 0xc4)
[...]
+		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#753: FILE: drivers/scsi/scsi_lib.c:2410:
+			printk(KERN_DEBUG "scsi_protect_queue(): head parked..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#753: FILE: drivers/scsi/scsi_lib.c:2410:
+			printk(KERN_DEBUG "scsi_protect_queue(): head parked..\n");

CHECK:BRACES: Unbalanced braces around else statement
#754: FILE: drivers/scsi/scsi_lib.c:2411:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#756: FILE: drivers/scsi/scsi_lib.c:2413:
+			printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#756: FILE: drivers/scsi/scsi_lib.c:2413:
+			printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: Unbalanced braces around else statement
#760: FILE: drivers/scsi/scsi_lib.c:2417:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#761: FILE: drivers/scsi/scsi_lib.c:2418:
+		printk(KERN_DEBUG "scsi_protect_queue(): head park not requested, used standby!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#761: FILE: drivers/scsi/scsi_lib.c:2418:
+		printk(KERN_DEBUG "scsi_protect_queue(): head park not requested, used standby!..\n");

CHECK:SPACING: No space is necessary after a cast
#787: FILE: include/linux/blkdev.h:349:
+typedef int (issue_protect_fn) (request_queue_t *);

CHECK:SPACING: No space is necessary after a cast
#788: FILE: include/linux/blkdev.h:350:
+typedef int (issue_unprotect_fn) (request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: include/linux/blkdev.h:774:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#819: FILE: include/linux/blkdev.h:774:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'issue_protect_fn *' should also have an identifier name
#819: FILE: include/linux/blkdev.h:774:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#820: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'issue_unprotect_fn *' should also have an identifier name
#820: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 73 warnings, 25 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
