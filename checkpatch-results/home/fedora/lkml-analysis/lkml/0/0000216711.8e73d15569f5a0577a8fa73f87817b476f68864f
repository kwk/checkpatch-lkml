WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/fuse/dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#45: FILE: fs/fuse/dev.c:2:
+/*
+  FUSE: Filesystem in Userspace

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: fs/fuse/dev.c:25:
+	struct fuse_conn *fc;
+	spin_lock(&fuse_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/fuse/dev.c:44:
+	struct fuse_req *req = kmem_cache_alloc(fuse_req_cachep, SLAB_KERNEL);
+	if (req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: fs/fuse/dev.c:70:
+	int preallocated = req->preallocated;
+	BUG_ON(atomic_read(&req->count) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: fs/fuse/dev.c:70:
+	BUG_ON(atomic_read(&req->count) != 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: fs/fuse/dev.c:83:
+	BUG_ON(atomic_read(&req->count) < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: fs/fuse/dev.c:92:
+	BUG_ON(list_empty(&fc->unused_list));

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: fs/fuse/dev.c:148:
+	int putback;
+	req->finished = 1;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#196: FILE: fs/fuse/dev.c:153:
+			iput(req->inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#198: FILE: fs/fuse/dev.c:155:
+			iput(req->inode2);
 			^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: fs/fuse/dev.c:163:
+		/* After INIT reply is received other requests can go
+		   out.  So do (FUSE_MAX_OUTSTANDING - 1) number of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: fs/fuse/dev.c:165:
+		   fuse_putback_request() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#219: FILE: fs/fuse/dev.c:176:
+	/* Need to get hold of the inode(s) and/or file used in the
+	   request, so FORGET and RELEASE are not sent too early */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: fs/fuse/dev.c:176:
+	   request, so FORGET and RELEASE are not sent too early */

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: fs/fuse/dev.c:190:
+	sigset_t oldset;
+	block_sigs(&oldset);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#252: FILE: fs/fuse/dev.c:209:
+		/* If request is already in userspace, only allow KILL
+		   signal to interrupt */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: fs/fuse/dev.c:209:
+		   signal to interrupt */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#268: FILE: fs/fuse/dev.c:225:
+		/* This is uninterruptible sleep, because data is
+		   being copied to/from the buffers of req.  During

WARNING:TYPO_SPELLING: 'musn't' may be misspelled - perhaps 'mustn't'?
#269: FILE: fs/fuse/dev.c:226:
+		   locked state, there musn't be any filesystem
 		                       ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#271: FILE: fs/fuse/dev.c:228:
+		   to deadlock */

CHECK:BRACES: braces {} should be used on all arms of this statement
#276: FILE: fs/fuse/dev.c:233:
+	if (!req->sent && !list_empty(&req->list)) {
[...]
+	} else if (req->sent)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: fs/fuse/dev.c:240:
+static unsigned len_args(unsigned numargs, struct fuse_arg *args)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: fs/fuse/dev.c:240:
+static unsigned len_args(unsigned numargs, struct fuse_arg *args)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#285: FILE: fs/fuse/dev.c:242:
+	unsigned nbytes = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#286: FILE: fs/fuse/dev.c:243:
+	unsigned i;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: fs/fuse/dev.c:258:
+^Ireq->in.h.len = sizeof(struct fuse_in_header) + $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#302: FILE: fs/fuse/dev.c:259:
+		len_args(req->in.numargs, (struct fuse_arg *) req->in.args);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#321: FILE: fs/fuse/dev.c:278:
+		/* acquire extra reference, since request is still needed
+		   after request_end() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#321: FILE: fs/fuse/dev.c:278:
+		   after request_end() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#367: FILE: fs/fuse/dev.c:324:
+	/* This is called from fuse_read_super() so there's guaranteed
+	   to be a request available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: fs/fuse/dev.c:324:
+	   to be a request available */

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: fs/fuse/dev.c:327:
+	struct fuse_init_in_out *arg = &req->misc.init_in_out;
+	arg->major = FUSE_KERNEL_VERSION;

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: fs/fuse/dev.c:342:
+	int err = 0;
+	if (req) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: fs/fuse/dev.c:365:
+/* Why all this complex one-page-at-a-time copying needed instead of
+   just copy_to/from_user()?  The reason is that blocking on a page

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#426: FILE: fs/fuse/dev.c:383:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: fs/fuse/dev.c:386:
+static unsigned fuse_copy_init(struct fuse_copy_state *cs, int write,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#433: FILE: fs/fuse/dev.c:390:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#434: FILE: fs/fuse/dev.c:391:
+	unsigned nbytes;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: fs/fuse/dev.c:427:
+		BUG_ON(!cs->nr_segs);

CHECK:SPACING: No space is necessary after a cast
#472: FILE: fs/fuse/dev.c:429:
+		cs->addr = (unsigned long) cs->iov[0].iov_base;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#473: FILE: fs/fuse/dev.c:430:
+		cs->iov ++;
 		        ^

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#474: FILE: fs/fuse/dev.c:431:
+		cs->nr_segs --;
 		            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: fs/fuse/dev.c:439:
+	BUG_ON(err != 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#494: FILE: fs/fuse/dev.c:451:
+			       unsigned *size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#496: FILE: fs/fuse/dev.c:453:
+	unsigned ncpy = min(*size, cs->len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: fs/fuse/dev.c:454:
+	unsigned ncpy = min(*size, cs->len);
+	if (val) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#511: FILE: fs/fuse/dev.c:468:
+				 unsigned offset, unsigned count, int zeroing)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#511: FILE: fs/fuse/dev.c:468:
+				 unsigned offset, unsigned count, int zeroing)

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: fs/fuse/dev.c:472:
+		void *mapaddr = kmap_atomic(page, KM_USER1);
+		memset(mapaddr, 0, PAGE_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: fs/fuse/dev.c:477:
+		int err;
+		if (!cs->len && (err = fuse_copy_fill(cs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#520: FILE: fs/fuse/dev.c:477:
+		if (!cs->len && (err = fuse_copy_fill(cs)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#522: FILE: fs/fuse/dev.c:479:
+		if (page) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: fs/fuse/dev.c:482:
+			void *buf = mapaddr + offset;
+			offset += fuse_copy_do(cs, &buf, &count);

CHECK:BRACES: Unbalanced braces around else statement
#527: FILE: fs/fuse/dev.c:484:
+		} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#535: FILE: fs/fuse/dev.c:492:
+static int fuse_copy_pages(struct fuse_copy_state *cs, unsigned nbytes,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#538: FILE: fs/fuse/dev.c:495:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#540: FILE: fs/fuse/dev.c:497:
+	unsigned offset = req->page_offset;

CHECK:SPACING: No space is necessary after a cast
#541: FILE: fs/fuse/dev.c:498:
+	unsigned count = min(nbytes, (unsigned) PAGE_SIZE - offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#541: FILE: fs/fuse/dev.c:498:
+	unsigned count = min(nbytes, (unsigned) PAGE_SIZE - offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#541: FILE: fs/fuse/dev.c:498:
+	unsigned count = min(nbytes, (unsigned) PAGE_SIZE - offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: fs/fuse/dev.c:503:
+		int err = fuse_copy_page(cs, page, offset, count, zeroing);
+		if (err)

CHECK:SPACING: No space is necessary after a cast
#550: FILE: fs/fuse/dev.c:507:
+		count = min(nbytes, (unsigned) PAGE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#550: FILE: fs/fuse/dev.c:507:
+		count = min(nbytes, (unsigned) PAGE_SIZE);

WARNING:MINMAX: min() should probably be min_t(unsigned, nbytes, PAGE_SIZE)
#550: FILE: fs/fuse/dev.c:507:
+		count = min(nbytes, (unsigned) PAGE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#556: FILE: fs/fuse/dev.c:513:
+static int fuse_copy_one(struct fuse_copy_state *cs, void *val, unsigned size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: fs/fuse/dev.c:517:
+		int err;
+		if (!cs->len && (err = fuse_copy_fill(cs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#560: FILE: fs/fuse/dev.c:517:
+		if (!cs->len && (err = fuse_copy_fill(cs)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#567: FILE: fs/fuse/dev.c:524:
+static int fuse_copy_args(struct fuse_copy_state *cs, unsigned numargs,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: fs/fuse/dev.c:525:
+			  unsigned argpages, struct fuse_arg *args,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#572: FILE: fs/fuse/dev.c:529:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#576: FILE: fs/fuse/dev.c:533:
+		struct fuse_arg *arg = &args[i];
+		if (i == numargs - 1 && argpages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#610: FILE: fs/fuse/dev.c:567:
+	unsigned nbytes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#611: FILE: fs/fuse/dev.c:568:
+	unsigned reqsize;

CHECK:SPACING: No space is necessary after a cast
#638: FILE: fs/fuse/dev.c:595:
+					     (struct fuse_arg *) in->args, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#652: FILE: fs/fuse/dev.c:609:
+	if (!req->isreply)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#654: FILE: fs/fuse/dev.c:611:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#670: FILE: fs/fuse/dev.c:627:
+	struct iovec iov;
+	iov.iov_len = nbytes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#675: FILE: fs/fuse/dev.c:632:
+static struct fuse_req *request_find(struct fuse_conn *fc, unsigned unique)

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: fs/fuse/dev.c:638:
+		struct fuse_req *req;
+		req = list_entry(entry, struct fuse_req, list);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#689: FILE: fs/fuse/dev.c:646:
+			 unsigned nbytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#691: FILE: fs/fuse/dev.c:648:
+	unsigned reqsize = sizeof(struct fuse_out_header);

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: fs/fuse/dev.c:655:
+	if (reqsize < nbytes || (reqsize > nbytes && !out->argvar))
[...]
+	else if (reqsize > nbytes) {
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#701: FILE: fs/fuse/dev.c:658:
+		struct fuse_arg *lastarg = &out->args[out->numargs-1];
 		                                                  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#702: FILE: fs/fuse/dev.c:659:
+		unsigned diffsize = reqsize - nbytes;

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: fs/fuse/dev.c:660:
+		unsigned diffsize = reqsize - nbytes;
+		if (diffsize > lastarg->size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#715: FILE: fs/fuse/dev.c:672:
+	unsigned nbytes;

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: fs/fuse/dev.c:677:
+	struct fuse_conn *fc = fuse_get_conn(file);
+	if (!fc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: fs/fuse/dev.c:688:
+^Iif (!oh.unique || oh.error <= -1000 || oh.error > 0 || $

CHECK:BRACES: braces {} should be used on all arms of this statement
#757: FILE: fs/fuse/dev.c:714:
+	if (!err) {
[...]
+	} else if (!req->interrupted)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#777: FILE: fs/fuse/dev.c:734:
+	struct iovec iov;
+	iov.iov_len = nbytes;

CHECK:SPACING: No space is necessary after a cast
#778: FILE: fs/fuse/dev.c:735:
+	iov.iov_base = (char __user *) buf;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#782: FILE: fs/fuse/dev.c:739:
+static unsigned fuse_dev_poll(struct file *file, poll_table *wait)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#785: FILE: fs/fuse/dev.c:742:
+	unsigned mask = POLLOUT | POLLWRNORM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: fs/fuse/dev.c:751:
+                mask |= POLLIN | POLLRDNORM;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: fs/fuse/dev.c:751:
+                mask |= POLLIN | POLLRDNORM;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#804: FILE: fs/fuse/dev.c:761:
+		struct fuse_req *req;
+		req = list_entry(head->next, struct fuse_req, list);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#828: FILE: fs/fuse/dev.c:785:
+struct file_operations fuse_dev_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#847: FILE: fs/fuse/dev.c:804:
+	int err = -ENOMEM;
+	fuse_req_cachep = kmem_cache_create("fuse_request",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#892: FILE: fs/fuse/fuse_i.h:39:
+	unsigned size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#905: FILE: fs/fuse/fuse_i.h:52:
+	unsigned numargs;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#913: FILE: fs/fuse/fuse_i.h:60:
+	unsigned size;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#923: FILE: fs/fuse/fuse_i.h:70:
+	/** Last argument is variable length (can be shorter than
+	    arg->size) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#923: FILE: fs/fuse/fuse_i.h:70:
+	    arg->size) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#933: FILE: fs/fuse/fuse_i.h:80:
+	unsigned numargs;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#947: FILE: fs/fuse/fuse_i.h:94:
+	/** This can be on either unused_list, pending or processing
+	    lists in fuse_conn */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: fs/fuse/fuse_i.h:94:
+	    lists in fuse_conn */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: fs/fuse/fuse_i.h:111:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#992: FILE: fs/fuse/fuse_i.h:139:
+	unsigned num_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#995: FILE: fs/fuse/fuse_i.h:142:
+	unsigned page_offset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: fs/fuse/fuse_i.h:146:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1033: FILE: fs/fuse/fuse_i.h:184:
+	/** This counts the number of outstanding requests if
+	    outstanding_sem would go negative */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1033: FILE: fs/fuse/fuse_i.h:184:
+	    outstanding_sem would go negative */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1034: FILE: fs/fuse/fuse_i.h:185:
+	unsigned outstanding_debt;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1050: FILE: fs/fuse/fuse_i.h:223:
+extern struct file_operations fuse_dev_operations;

WARNING:TYPO_SPELLING: 'reqest' may be misspelled - perhaps 'request'?
#1107: FILE: fs/fuse/fuse_i.h:282:
+ * on unused list (preallocated) or free reqest (not preallocated).
                                          ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1156: FILE: fs/fuse/inode.c:238:
+		struct fuse_req *req;
+		req = list_entry(fc->unused_list.next, struct fuse_req, list);

WARNING:CONSIDER_COMPLETION: consider using a completion
#1185: FILE: fs/fuse/inode.c:267:
+		sema_init(&fc->outstanding_sem, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1188: FILE: fs/fuse/inode.c:270:
+			struct fuse_req *req = fuse_request_alloc();
+			if (!req) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216711.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 96 warnings, 14 checks, 1240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216711.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
