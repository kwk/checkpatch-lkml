WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#33: 
Andrew> Matthew Wilcox <matthew@wil.cx> wrote:
                                ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: arch/ia64/kernel/mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#73: FILE: arch/ia64/kernel/mem.c:2:
+ *  arch/ia64/kernel/mem.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: arch/ia64/kernel/mem.c:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#85: FILE: arch/ia64/kernel/mem.c:14:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#86: FILE: arch/ia64/kernel/mem.c:15:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#88: FILE: arch/ia64/kernel/mem.c:17:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/ia64/kernel/mem.c:18:
+extern loff_t memory_lseek(struct file * file, loff_t offset, int orig);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: arch/ia64/kernel/mem.c:19:
+extern int mmap_kmem(struct file * file, struct vm_area_struct * vma);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: arch/ia64/kernel/mem.c:19:
+extern int mmap_kmem(struct file * file, struct vm_area_struct * vma);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#90: FILE: arch/ia64/kernel/mem.c:19:
+extern int mmap_kmem(struct file * file, struct vm_area_struct * vma);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#91: FILE: arch/ia64/kernel/mem.c:20:
+extern int open_port(struct inode * inode, struct file * filp);
                                                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: arch/ia64/kernel/mem.c:20:
+extern int open_port(struct inode * inode, struct file * filp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: arch/ia64/kernel/mem.c:20:
+extern int open_port(struct inode * inode, struct file * filp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#91: FILE: arch/ia64/kernel/mem.c:20:
+extern int open_port(struct inode * inode, struct file * filp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: arch/ia64/kernel/mem.c:22:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: arch/ia64/kernel/mem.c:36:
+
+

WARNING:TYPO_SPELLING: 'funcion' may be misspelled - perhaps 'function'?
#109: FILE: arch/ia64/kernel/mem.c:38:
+ * This funcion reads the *physical* memory. The f_pos points directly
         ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/ia64/kernel/mem.c:39:
+ * to the memory location. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: arch/ia64/kernel/mem.c:41:
+static ssize_t read_mem(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: arch/ia64/kernel/mem.c:41:
+static ssize_t read_mem(struct file * file, char __user * buf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: arch/ia64/kernel/mem.c:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: arch/ia64/kernel/mem.c:85:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: arch/ia64/kernel/mem.c:86:
+static ssize_t write_mem(struct file * file, const char __user * buf, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: arch/ia64/kernel/mem.c:86:
+static ssize_t write_mem(struct file * file, const char __user * buf, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: arch/ia64/kernel/mem.c:86:
+static ssize_t write_mem(struct file * file, const char __user * buf, 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: arch/ia64/kernel/mem.c:144:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#216: FILE: arch/ia64/kernel/mem.c:145:
+struct file_operations mem_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: drivers/char/mem.c:168:
+			    const char __user * buf, size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#280: FILE: drivers/char/mem.c:177:
+		unsigned long sz = PAGE_SIZE-realp;
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: drivers/char/mem.c:178:
+^I^Iif (sz > count) sz = count; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: drivers/char/mem.c:178:
+		unsigned long sz = PAGE_SIZE-realp;
+		if (sz > count) sz = count; 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#281: FILE: drivers/char/mem.c:178:
+		if (sz > count) sz = count; 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#283: FILE: drivers/char/mem.c:180:
+		buf+=sz;
 		   ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#284: FILE: drivers/char/mem.c:181:
+		p+=sz;
 		 ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#285: FILE: drivers/char/mem.c:182:
+		count-=sz;
 		     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#286: FILE: drivers/char/mem.c:183:
+		written+=sz;
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#289: FILE: drivers/char/mem.c:186:
+	if (!range_is_allowed(realp, realp+count))
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: drivers/char/mem.c:212:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: drivers/char/mem.c:213:
+int mmap_kmem(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: drivers/char/mem.c:213:
+int mmap_kmem(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: drivers/char/mem.c:559:
+loff_t memory_lseek(struct file * file, loff_t offset, int orig)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#331: FILE: drivers/char/mem.c:582:
+int open_port(struct inode * inode, struct file * filp)
                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: drivers/char/mem.c:582:
+int open_port(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: drivers/char/mem.c:582:
+int open_port(struct inode * inode, struct file * filp)

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_DEV_MEM' is wrong - use Kconfig variables or standard guards instead
#342: FILE: include/asm-ia64/io.h:484:
+#define ARCH_HAS_DEV_MEM

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 10 warnings, 12 checks, 287 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
