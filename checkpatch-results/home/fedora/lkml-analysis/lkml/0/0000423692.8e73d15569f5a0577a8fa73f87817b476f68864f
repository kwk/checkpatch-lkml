WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#42: 
So intead of breaking io down into teeny bits, we submit io in multiples
   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#62: 
queue to say that it can accept a superbh but it cannot guarentee atomic
                                                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#83: 
battery backed write cache, or can guarentee atomic io in some other
                                   ^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#96: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#	           ChangeSet	1.737   -> 1.738  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#	drivers/ide/ide-probe.c	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#	drivers/block/ll_rw_blk.c	1.40    -> 1.41   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#	include/linux/blkdev.h	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#	drivers/block/elevator.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#	  include/linux/fs.h	1.69    -> 1.70   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#	drivers/scsi/scsi_merge.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#	 drivers/scsi/scsi.c	1.17    -> 1.18   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#	         fs/buffer.c	1.74    -> 1.75   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
# 02/10/14	axboe@burns.home.kernel.dk	1.738

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
# Introduce superbh and grouped IO concept

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#115: 
--- a/drivers/block/elevator.c	Mon Oct 14 15:50:00 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#217: FILE: drivers/block/ll_rw_blk.c:954:
+		printk("%s: size is %u, sector %lu\n", kdevname(bh->b_rdev), tot_size, bh->b_rsector);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: drivers/block/ll_rw_blk.c:954:
+		printk("%s: size is %u, sector %lu\n", kdevname(bh->b_rdev), tot_size, bh->b_rsector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#229: FILE: drivers/block/ll_rw_blk.c:966:
+	rq->hard_nr_sectors = rq->nr_sectors = tot_size;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#230: FILE: drivers/block/ll_rw_blk.c:967:
+	rq->current_nr_sectors = rq->hard_cur_sectors = bh->b_size >> 9;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: drivers/block/ll_rw_blk.c:1149:
+		printk("__make_request: seg count %u > %u\n", req->nr_segments, q->max_segments);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#310: FILE: drivers/block/ll_rw_blk.c:1255:
+		if ((buffer_superbh(bh) && !q->superbh_queue)
+		    || (buffer_grouped(bh) && !q->grouped_queue)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: drivers/block/ll_rw_blk.c:1266:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#349: FILE: drivers/block/ll_rw_blk.c:1301:
+	switch (rw) {
+		case WRITE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#361: FILE: drivers/block/ll_rw_blk.c:1313:
+ * we can fallback to normal IO submission here. uptodate bool means
                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#364: FILE: drivers/block/ll_rw_blk.c:1316:
+void superbh_end_io(struct buffer_head *superbh, int uptodate)
                                                      ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: drivers/block/ll_rw_blk.c:1322:
+	printk("%s: fallback to regular bh submission\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#370: FILE: drivers/block/ll_rw_blk.c:1322:
+	printk("%s: fallback to regular bh submission\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#373: FILE: drivers/block/ll_rw_blk.c:1325:
+		printk("%s: non-grouped bh?!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#373: FILE: drivers/block/ll_rw_blk.c:1325:
+		printk("%s: non-grouped bh?!\n", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#433: FILE: drivers/block/ll_rw_blk.c:1380:
+	bhprev = bhfirst = tmp_bh;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#434: FILE: drivers/block/ll_rw_blk.c:1381:
+	segments = size = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: drivers/block/ll_rw_blk.c:1394:
+			printk("bh list contained unlocked buffer\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'segments >= q->max_segments'
#454: FILE: drivers/block/ll_rw_blk.c:1401:
+		if ((size + tmp_bh->b_size > max_size)
+		    || (segments >= q->max_segments)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#455: FILE: drivers/block/ll_rw_blk.c:1402:
+		if ((size + tmp_bh->b_size > max_size)
+		    || (segments >= q->max_segments)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: drivers/block/ll_rw_blk.c:1421:
+		printk("%s: wrong size %u\n", __FUNCTION__, size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#474: FILE: drivers/block/ll_rw_blk.c:1421:
+		printk("%s: wrong size %u\n", __FUNCTION__, size);

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#517: FILE: drivers/block/ll_rw_blk.c:1462:
+ * Like submit_bh_linked(). In addition, we try to guarentee that io
                                                    ^^^^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#533: FILE: drivers/block/ll_rw_blk.c:1779:
+EXPORT_SYMBOL(blk_queue_superbh);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:CAMELCASE: Avoid CamelCase: <SHpnt>
#564: FILE: drivers/scsi/scsi.c:202:
+	q->max_segments = SHpnt->sg_tablesize;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#607: FILE: fs/buffer.c:2244:
+	bh_first = bh_prev = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#665: FILE: fs/buffer.c:2318:
+					bh_prev = bh_first = NULL;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#751: FILE: include/linux/blkdev.h:237:
+extern void blk_queue_grouped(request_queue_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#751: FILE: include/linux/blkdev.h:237:
+extern void blk_queue_grouped(request_queue_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#751: FILE: include/linux/blkdev.h:237:
+extern void blk_queue_grouped(request_queue_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#752: FILE: include/linux/blkdev.h:238:
+extern void blk_queue_superbh(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#752: FILE: include/linux/blkdev.h:238:
+extern void blk_queue_superbh(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#752: FILE: include/linux/blkdev.h:238:
+extern void blk_queue_superbh(request_queue_t *, int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#783: FILE: include/linux/fs.h:287:
+#define buffer_superbh(bh)	__buffer_state(bh,Super)
                           	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Super>
#783: FILE: include/linux/fs.h:287:
+#define buffer_superbh(bh)	__buffer_state(bh,Super)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#784: FILE: include/linux/fs.h:288:
+#define buffer_grouped(bh)	__buffer_state(bh,Grouped)
                           	                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Grouped>
#784: FILE: include/linux/fs.h:288:
+#define buffer_grouped(bh)	__buffer_state(bh,Grouped)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#792: FILE: include/linux/fs.h:1383:
+extern int submit_bh_linked(int, struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#792: FILE: include/linux/fs.h:1383:
+extern int submit_bh_linked(int, struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#792: FILE: include/linux/fs.h:1383:
+extern int submit_bh_linked(int, struct buffer_head *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: include/linux/fs.h:1384:
+extern int submit_bh_grouped(int, struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#793: FILE: include/linux/fs.h:1384:
+extern int submit_bh_grouped(int, struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#793: FILE: include/linux/fs.h:1384:
+extern int submit_bh_grouped(int, struct buffer_head *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 47 warnings, 16 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
