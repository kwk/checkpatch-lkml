WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: arch/um/kernel/process.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#108: FILE: arch/um/kernel/process.c:60:
+	return(CHOOSE_MODE_PROC(external_pid_tt, external_pid_skas, task));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open brace '{'
#115: FILE: arch/um/kernel/process.c:67:
+	for(i = 0; i < ncpus; i++){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: arch/um/kernel/process.c:67:
+	for(i = 0; i < ncpus; i++){

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: arch/um/kernel/process.c:68:
+		if(cpu_tasks[i].pid == pid) return(i);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#116: FILE: arch/um/kernel/process.c:68:
+		if(cpu_tasks[i].pid == pid) return(i);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#134: FILE: arch/um/kernel/process.c:86:
+	if(page == 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#137: FILE: arch/um/kernel/process.c:89:
+	return(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: arch/um/kernel/process.c:92:
+int kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#148: FILE: arch/um/kernel/process.c:100:
+	if(pid < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kernel_thread', this function's name, in a string
#149: FILE: arch/um/kernel/process.c:101:
+		panic("do_fork failed in kernel_thread, errno = %d", pid);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#150: FILE: arch/um/kernel/process.c:102:
+	return(pid);

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#164: FILE: arch/um/kernel/process.c:116:
+	struct task_struct *to= next;
 	                      ^

WARNING:SPACING: space prohibited before semicolon
#170: FILE: arch/um/kernel/process.c:122:
+		current->thread.saved_task = NULL ;

ERROR:SPACING: space required before the open parenthesis '('
#172: FILE: arch/um/kernel/process.c:124:
+		if(current->thread.saved_task)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->thread.regs
#173: FILE: arch/um/kernel/process.c:125:
+			show_regs(&(current->thread.regs));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#174: FILE: arch/um/kernel/process.c:126:
+		next= current->thread.saved_task;
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#175: FILE: arch/um/kernel/process.c:127:
+		prev= current;
 		    ^

ERROR:SPACING: space required before the open parenthesis '('
#176: FILE: arch/um/kernel/process.c:128:
+	} while(current->thread.saved_task);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#178: FILE: arch/um/kernel/process.c:130:
+	return(current->thread.prev_sched);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#180: FILE: arch/um/kernel/process.c:132:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#184: FILE: arch/um/kernel/process.c:136:
+	if(need_resched()) schedule();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#184: FILE: arch/um/kernel/process.c:136:
+	if(need_resched()) schedule();

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: arch/um/kernel/process.c:137:
+	if(test_tsk_thread_flag(current, TIF_SIGPENDING)) do_signal();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#185: FILE: arch/um/kernel/process.c:137:
+	if(test_tsk_thread_flag(current, TIF_SIGPENDING)) do_signal();

CHECK:SPACING: No space is necessary after a cast
#195: FILE: arch/um/kernel/process.c:147:
+	unprotect_stack((unsigned long) current_thread);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#200: FILE: arch/um/kernel/process.c:152:
+	return(current);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: arch/um/kernel/process.c:156:
+		unsigned long stack_top, struct task_struct * p,

CHECK:SPACING: No space is necessary after a cast
#209: FILE: arch/um/kernel/process.c:161:
+	p->thread = (struct thread_struct) INIT_THREAD;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: arch/um/kernel/process.c:163:
+	ret = CHOOSE_MODE_PROC(copy_thread_tt, copy_thread_skas, nr,
+				clone_flags, sp, stack_top, p, regs);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#245: FILE: arch/um/kernel/process.c:197:
+	return(current->pid);

CHECK:SPACING: No space is necessary after a cast
#250: FILE: arch/um/kernel/process.c:202:
+	CHOOSE_MODE(uml_idle_timer(), (void) 0);

ERROR:SPACING: space required before the open brace '{'
#252: FILE: arch/um/kernel/process.c:204:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: arch/um/kernel/process.c:204:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: arch/um/kernel/process.c:211:
+		if(need_resched())

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#273: FILE: arch/um/kernel/process.c:225:
+	return(PAGE_SIZE);

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: arch/um/kernel/process.c:237:
+	if(task->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->mm"
#285: FILE: arch/um/kernel/process.c:237:
+	if(task->mm == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: arch/um/kernel/process.c:240:
+	if(!pgd_present(*pgd))

ERROR:SPACING: space required before the open parenthesis '('
#292: FILE: arch/um/kernel/process.c:244:
+	if(!pud_present(*pud))

ERROR:SPACING: space required before the open parenthesis '('
#296: FILE: arch/um/kernel/process.c:248:
+	if(!pmd_present(*pmd))

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: arch/um/kernel/process.c:253:
+	if(!pte_present(ptent))

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: arch/um/kernel/process.c:256:
+	if(pte_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pte_out"
#304: FILE: arch/um/kernel/process.c:256:
+	if(pte_out != NULL)

CHECK:SPACING: No space is necessary after a cast
#306: FILE: arch/um/kernel/process.c:258:
+	return((void *) (pte_val(ptent) & PAGE_MASK) + (addr & ~PAGE_MASK));

CHECK:SPACING: No space is necessary after a cast
#315: FILE: arch/um/kernel/process.c:267:
+	return IS_ERR(addr) ? "(Unknown)": __va((unsigned long) addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: arch/um/kernel/process.c:267:
+	void *addr = um_virt_to_phys(current, current->mm->arg_start, NULL);
+	return IS_ERR(addr) ? "(Unknown)": __va((unsigned long) addr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#315: FILE: arch/um/kernel/process.c:267:
+	return IS_ERR(addr) ? "(Unknown)": __va((unsigned long) addr);
 	                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#321: FILE: arch/um/kernel/process.c:273:
+	printk(KERN_ERR "Killing pid %d because of a lack of memory\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#339: FILE: arch/um/kernel/process.c:291:
+EXPORT_SYMBOL(enable_hlt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#346: FILE: arch/um/kernel/process.c:298:
+EXPORT_SYMBOL(disable_hlt);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#368: FILE: arch/um/kernel/process.c:320:
+int __cant_sleep(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#369: FILE: arch/um/kernel/process.c:321:
+	return in_atomic() || irqs_disabled() || in_interrupt();

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:SPACING: No space is necessary after a cast
#375: FILE: arch/um/kernel/process.c:327:
+	return((unsigned long) current->thread.fault_addr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#375: FILE: arch/um/kernel/process.c:327:
+	return((unsigned long) current->thread.fault_addr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#378: FILE: arch/um/kernel/process.c:330:
+EXPORT_SYMBOL(get_fault_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#382: FILE: arch/um/kernel/process.c:334:
+	printk(KERN_DEBUG "Something isn't implemented in here\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#385: FILE: arch/um/kernel/process.c:337:
+EXPORT_SYMBOL(not_implemented);

CHECK:SPACING: No space is necessary after a cast
#392: FILE: arch/um/kernel/process.c:344:
+	return(stack != (unsigned long) current_thread);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#413: FILE: arch/um/kernel/process.c:365:
+	return(copy_to_user(to, from, size));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#418: FILE: arch/um/kernel/process.c:370:
+	return(copy_from_user(to, from, size));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#423: FILE: arch/um/kernel/process.c:375:
+	return(clear_user(buf, size));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#428: FILE: arch/um/kernel/process.c:380:
+	return(strlen_user(str));

WARNING:LINE_SPACING: Missing a blank line after declarations
#435: FILE: arch/um/kernel/process.c:387:
+	int cpu = current_thread->cpu;
+	IPI_handler(cpu);

ERROR:SPACING: space required before the open parenthesis '('
#436: FILE: arch/um/kernel/process.c:388:
+	if(cpu != 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#444: FILE: arch/um/kernel/process.c:396:
+	return(current_thread->cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: arch/um/kernel/process.c:414:
+static int proc_read_sysemu(char *buf, char **start, off_t offset, int size,int *eof, void *data)
                                                                            ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#470: FILE: arch/um/kernel/process.c:422:
+static int proc_write_sysemu(struct file *file,const char __user *buf, unsigned long count,void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: arch/um/kernel/process.c:422:
+static int proc_write_sysemu(struct file *file,const char __user *buf, unsigned long count,void *data)
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: arch/um/kernel/process.c:422:
+static int proc_write_sysemu(struct file *file,const char __user *buf, unsigned long count,void *data)
                                                                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: arch/um/kernel/process.c:437:
+	struct proc_dir_entry *ent;
+	if (!sysemu_supported)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#490: FILE: arch/um/kernel/process.c:442:
+	if (ent == NULL)
+	{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#490: FILE: arch/um/kernel/process.c:442:
+	if (ent == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#492: FILE: arch/um/kernel/process.c:444:
+		printk(KERN_WARNING "Failed to register /proc/sysemu\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#493: FILE: arch/um/kernel/process.c:445:
+		return(0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#504: FILE: arch/um/kernel/process.c:456:
+int singlestepping(void * t)

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#508: FILE: arch/um/kernel/process.c:460:
+	if ( ! (task->ptrace & PT_DTRACE) )
 	     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#508: FILE: arch/um/kernel/process.c:460:
+	if ( ! (task->ptrace & PT_DTRACE) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#508: FILE: arch/um/kernel/process.c:460:
+	if ( ! (task->ptrace & PT_DTRACE) )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1039: FILE: arch/um/kernel/skas/exec.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1120: FILE: arch/um/kernel/skas/process.c:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#1151: FILE: arch/um/kernel/skas/process.c:32:
+	if(current->pid == 0)

ERROR:SPACING: space required before the open parenthesis '('
#1159: FILE: arch/um/kernel/skas/process.c:40:
+	if(current->pid == 0)

ERROR:SPACING: space required before the open parenthesis '('
#1173: FILE: arch/um/kernel/skas/process.c:54:
+	if(current->thread.prev_sched != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->thread.prev_sched"
#1173: FILE: arch/um/kernel/skas/process.c:54:
+	if(current->thread.prev_sched != NULL)

ERROR:SPACING: space required before the open brace '{'
#1184: FILE: arch/um/kernel/skas/process.c:65:
+	if(n == 1){

ERROR:SPACING: space required before the open parenthesis '('
#1184: FILE: arch/um/kernel/skas/process.c:65:
+	if(n == 1){

CHECK:BRACES: braces {} should be used on all arms of this statement
#1184: FILE: arch/um/kernel/skas/process.c:65:
+	if(n == 1){
[...]
+	else do_exit(0);
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1189: FILE: arch/um/kernel/skas/process.c:70:
+	else do_exit(0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1189: FILE: arch/um/kernel/skas/process.c:70:
+	}
+	else do_exit(0);

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#1200: FILE: arch/um/kernel/skas/process.c:81:
+	if(current->thread.prev_sched == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->thread.prev_sched"
#1200: FILE: arch/um/kernel/skas/process.c:81:
+	if(current->thread.prev_sched == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: arch/um/kernel/skas/process.c:88:
+	 * improve performance. -bb */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1219: FILE: arch/um/kernel/skas/process.c:100:
+		     unsigned long stack_top, struct task_struct * p,

ERROR:SPACING: space required before the open brace '{'
#1224: FILE: arch/um/kernel/skas/process.c:105:
+	if(current->thread.forking){

ERROR:SPACING: space required before the open parenthesis '('
#1224: FILE: arch/um/kernel/skas/process.c:105:
+	if(current->thread.forking){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1225: FILE: arch/um/kernel/skas/process.c:106:
+^I  ^Imemcpy(&p->thread.regs.regs.skas, &regs->regs.skas,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1225: FILE: arch/um/kernel/skas/process.c:106:
+^I  ^Imemcpy(&p->thread.regs.regs.skas, &regs->regs.skas,$

ERROR:SPACING: space required before the open parenthesis '('
#1228: FILE: arch/um/kernel/skas/process.c:109:
+		if(sp != 0) REGS_SP(p->thread.regs.regs.skas.regs) = sp;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1228: FILE: arch/um/kernel/skas/process.c:109:
+		if(sp != 0) REGS_SP(p->thread.regs.regs.skas.regs) = sp;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1234: FILE: arch/um/kernel/skas/process.c:115:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1234: FILE: arch/um/kernel/skas/process.c:115:
+	else {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1242: FILE: arch/um/kernel/skas/process.c:123:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#1250: FILE: arch/um/kernel/skas/process.c:131:
+	if(fd < 0)

ERROR:SPACING: space required before the open parenthesis '('
#1253: FILE: arch/um/kernel/skas/process.c:134:
+	if(skas_needs_stub)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1256: FILE: arch/um/kernel/skas/process.c:137:
+	return(fd);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1280: FILE: arch/um/kernel/skas/process.c:161:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#1287: FILE: arch/um/kernel/skas/process.c:168:
+	if(proc_mm)

ERROR:SPACING: space required before the open parenthesis '('
#1312: FILE: arch/um/kernel/skas/process.c:193:
+	if(proc_mm)

CHECK:BRACES: Unbalanced braces around else statement
#1315: FILE: arch/um/kernel/skas/process.c:196:
+	else {

ERROR:SPACING: space required before the open brace '{'
#1320: FILE: arch/um/kernel/skas/process.c:201:
+		for_each_process(p){

ERROR:SPACING: space required before the open parenthesis '('
#1321: FILE: arch/um/kernel/skas/process.c:202:
+			if(p->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->mm"
#1321: FILE: arch/um/kernel/skas/process.c:202:
+			if(p->mm == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1332: FILE: arch/um/kernel/skas/process.c:213:
+	if(current->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#1332: FILE: arch/um/kernel/skas/process.c:213:
+	if(current->mm == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1335: FILE: arch/um/kernel/skas/process.c:216:
+	return(current->mm->context.skas.id.stack);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 77 errors, 19 warnings, 20 checks, 747 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
