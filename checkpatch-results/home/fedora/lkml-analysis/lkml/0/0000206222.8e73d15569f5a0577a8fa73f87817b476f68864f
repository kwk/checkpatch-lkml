WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#12: 
Subject: [RFC][PATCH] Sparse Memory Handling (hot-add foundation)

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
Content-Type: text/x-patch; name=sparse-2.6.11-rc3.patch; charset=ANSI_X3.4-1968

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: arch/i386/kernel/setup.c:1076:
+	if (low < max_dma)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#214: FILE: arch/i386/kernel/setup.c:1078:
+	else {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#225: FILE: arch/i386/kernel/setup.c:1089:
+extern void zone_sizes_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#295: FILE: arch/i386/kernel/srat.c:61:
+extern unsigned long node_start_pfn[], node_end_pfn[], node_remap_size[];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#303: FILE: arch/i386/kernel/srat.c:269:
+		node_remap_size[node_memory_chunk[j].nid] += memory_present(

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: arch/i386/mm/boot_ioremap.c:65:
+		       __attribute__ ((aligned (PAGE_SIZE)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(PAGE_SIZE) over __attribute__((aligned(PAGE_SIZE)))
#330: FILE: arch/i386/mm/boot_ioremap.c:65:
+		       __attribute__ ((aligned (PAGE_SIZE)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#366: FILE: arch/i386/mm/discontig.c:72:
+	printk(KERN_INFO "Node: %d, start_pfn: %ld, end_pfn: %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: arch/i386/mm/discontig.c:73:
+	printk(KERN_INFO "Node: %d, start_pfn: %ld, end_pfn: %ld\n",
+			nid, start, end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#368: FILE: arch/i386/mm/discontig.c:74:
+	printk(KERN_DEBUG "  Setting physnode_map array to node %d for pfns:\n", nid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#369: FILE: arch/i386/mm/discontig.c:75:
+	printk(KERN_DEBUG "  ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#372: FILE: arch/i386/mm/discontig.c:78:
+		printk(KERN_DEBUG "%ld ", pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#374: FILE: arch/i386/mm/discontig.c:80:
+	printk(KERN_DEBUG "\n");

WARNING:TYPO_SPELLING: 'memroy' may be misspelled - perhaps 'memory'?
#486: FILE: arch/i386/mm/discontig.c:213:
+		 * The acpi/srat node info can show hot-add memroy zones
 		                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#597: FILE: arch/i386/mm/discontig.c:308:
+			(ulong) pfn_to_kaddr(highstart_pfn

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: arch/i386/mm/discontig.c:371:
+		free_area_init_node(nid, NODE_DATA(nid), zones_size, start,
+				zholes_size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#735: FILE: arch/i386/mm/discontig.c:391:
+		printk("Initializing %s for node %d (%08lx:%08lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: arch/i386/mm/discontig.c:392:
+		printk("Initializing %s for node %d (%08lx:%08lx)\n",
+				zone->name, zone->zone_pgdat->node_id,

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#743: FILE: arch/i386/mm/discontig.c:396:
+		 * Make use of the guarentee that *_mem_map will be
 		                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#744: FILE: arch/i386/mm/discontig.c:397:
+		 * contigious in sections aligned at MAX_ORDER.
 		   ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#922: FILE: arch/i386/mm/init.c:566:
+	high_memory = (char *) __va(highstart_pfn * PAGE_SIZE - 1) + 1;

CHECK:SPACING: No space is necessary after a cast
#925: FILE: arch/i386/mm/init.c:568:
+	high_memory = (char *) __va(max_low_pfn * PAGE_SIZE - 1) + 1;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1002: FILE: arch/ppc64/kernel/prom_init.c:916:
 	unsigned long *spinloop
+		= (void *)boot_virt_to_abs(&__secondary_hold_spinloop);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1005: FILE: arch/ppc64/kernel/prom_init.c:918:
 	unsigned long *acknowledge
+		= (void *)boot_virt_to_abs(&__secondary_hold_acknowledge);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1008: FILE: arch/ppc64/kernel/prom_init.c:920:
 	unsigned long secondary_hold
+		= boot_virt_to_abs(*PTRRELOC((unsigned long *)__secondary_hold));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1027: FILE: arch/ppc64/kernel/rtas.c:39:
 };
+static unsigned long rtas_args_paddr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: arch/ppc64/kernel/setup.c:989:
+		paca[i].emergency_sp = __boot_va(lmb_alloc_base(PAGE_SIZE, 128,
 						limit)) + PAGE_SIZE;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1167: FILE: arch/ppc64/mm/init.c:630:
+	 * presence of all LMBs */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1242: FILE: arch/ppc64/mm/init.c:939:
+int __devinit add_memory(u64 start, u64 size, unsigned long attr)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1261: FILE: arch/ppc64/mm/init.c:958:
+int __devinit remove_memory(u64 start, u64 size, unsigned long attr)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1270: FILE: arch/ppc64/mm/init.c:967:
+	printk("%s(): Attempting to remove memoy in range "

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1271: FILE: arch/ppc64/mm/init.c:968:
+			"%lx to %lx\n", __func__, start, start+size);
 			                                      ^

WARNING:SPLIT_STRING: quoted string split across lines
#1271: FILE: arch/ppc64/mm/init.c:968:
+	printk("%s(): Attempting to remove memoy in range "
+			"%lx to %lx\n", __func__, start, start+size);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1277: FILE: arch/ppc64/mm/init.c:974:
+	printk("%s(): memory will be removed from "

WARNING:SPLIT_STRING: quoted string split across lines
#1278: FILE: arch/ppc64/mm/init.c:975:
+	printk("%s(): memory will be removed from "
+			"the %s zone\n", __func__, zone->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1288: FILE: arch/ppc64/mm/init.c:985:
+	if ((start < lmb.rmo_size) || ((start+size) < lmb.rmo_size)) {
 	                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < lmb.rmo_size'
#1288: FILE: arch/ppc64/mm/init.c:985:
+	if ((start < lmb.rmo_size) || ((start+size) < lmb.rmo_size)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1289: FILE: arch/ppc64/mm/init.c:986:
+		printk("%s(): range to be removed must NOT be in RMO!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: arch/ppc64/mm/init.c:987:
+		printk("%s(): range to be removed must NOT be in RMO!\n",
+			__func__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1297: FILE: arch/ppc64/mm/init.c:994:
+	printk("%s(): memory range to be removed overlaps "

WARNING:SPLIT_STRING: quoted string split across lines
#1298: FILE: arch/ppc64/mm/init.c:995:
+	printk("%s(): memory range to be removed overlaps "
+		"multiple zones!!!\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: arch/ppc64/mm/numa.c:401:
+		memory_present(numa_domain, start >> PAGE_SHIFT,
+					       (start + size) >> PAGE_SHIFT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1383: FILE: arch/ppc64/mm/numa.c:691:
+	for (nid = 0; nid < MAX_NUMNODES &&
+			init_node_data[nid].node_spanned_pages; nid++) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1516: FILE: include/asm-i386/mmzone.h:26:
+extern int get_memcfg_numa_flat(void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1516: FILE: include/asm-i386/mmzone.h:26:
+extern int get_memcfg_numa_flat(void );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1516: FILE: include/asm-i386/mmzone.h:26:
+extern int get_memcfg_numa_flat(void );

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1592: FILE: include/asm-i386/page.h:122:
+extern int page_is_ram(unsigned long pagenr);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1603: FILE: include/asm-i386/page.h:136:
+#define __boot_pa(x)		((unsigned long)(x)-PAGE_OFFSET)
                     		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1604: FILE: include/asm-i386/page.h:137:
+#define __boot_va(x)		((void *)((unsigned long)(x)+PAGE_OFFSET))
                     		                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pa' may be better as '(pa)' to avoid precedence issues
#1732: FILE: include/asm-ppc64/mmzone.h:121:
+#define pa_to_nid(pa)							\
+({									\
+	pfn_to_nid(pa >> PAGE_SHIFT);					\
+})

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1749: FILE: include/asm-ppc64/page.h:182:
+#define __boot_pa(x)   ((unsigned long)(x)-PAGE_OFFSET)
                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1814: FILE: include/linux/bootmem.h:75:
+extern void *alloc_remap(int nid, unsigned long size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1837: FILE: include/linux/mm.h:403:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1852: FILE: include/linux/mm.h:418:
+#if SECTIONS_SHIFT+NODES_SHIFT+ZONES_SHIFT <= FLAGS_RESERVED
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1852: FILE: include/linux/mm.h:418:
+#if SECTIONS_SHIFT+NODES_SHIFT+ZONES_SHIFT <= FLAGS_RESERVED
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1867: FILE: include/linux/mm.h:433:
+#define SECTIONS_PGOFF		((sizeof(page_flags_t)*8) - SECTIONS_WIDTH)
                       		                      ^

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#1882: FILE: include/linux/mm.h:448:
+ * Define the bit shifts to access each section.  For non-existant
                                                       ^^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1898: FILE: include/linux/mm.h:464:
+#if SECTIONS_WIDTH+NODES_WIDTH+ZONES_WIDTH > FLAGS_RESERVED
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1898: FILE: include/linux/mm.h:464:
+#if SECTIONS_WIDTH+NODES_WIDTH+ZONES_WIDTH > FLAGS_RESERVED
                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1912: FILE: include/linux/mm.h:477:
 }
+static inline struct zone *page_zone(struct page *page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1921: FILE: include/linux/mm.h:485:
+}
+static inline unsigned long page_to_section(struct page *page)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1941: FILE: include/linux/mm.h:504:
+}
+static inline void set_page_node(struct page *page, unsigned long node)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1946: FILE: include/linux/mm.h:509:
+}
+static inline void set_page_section(struct page *page, unsigned long section)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1954: FILE: include/linux/mm.h:516:
+static inline void set_page_links(struct page *page, unsigned long zone,
+	unsigned long node, unsigned long pfn)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2016: FILE: include/linux/mmzone.h:414:
+ * SECTION_SHIFT    ^I^I#bits space required to store a section #$

CHECK:BIT_MACRO: Prefer using the BIT macro
#2028: FILE: include/linux/mmzone.h:424:
+#define NR_MEM_SECTIONS	(1 << SECTIONS_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2030: FILE: include/linux/mmzone.h:426:
+#define PAGES_PER_SECTION       (1 << PFN_SECTION_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2031: FILE: include/linux/mmzone.h:427:
+#define PAGE_SECTION_MASK	(~(PAGES_PER_SECTION-1))
                          	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2061: FILE: include/linux/mmzone.h:453:
+#define	SECTION_MARKED_PRESENT	(1UL<<0)
        	                      	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2061: FILE: include/linux/mmzone.h:453:
+#define	SECTION_MARKED_PRESENT	(1UL<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2062: FILE: include/linux/mmzone.h:454:
+#define SECTION_HAS_MEM_MAP	(1UL<<1)
                            	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2062: FILE: include/linux/mmzone.h:454:
+#define SECTION_HAS_MEM_MAP	(1UL<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2063: FILE: include/linux/mmzone.h:455:
+#define SECTION_MAP_LAST_BIT	(1UL<<2)
                             	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2063: FILE: include/linux/mmzone.h:455:
+#define SECTION_MAP_LAST_BIT	(1UL<<2)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2064: FILE: include/linux/mmzone.h:456:
+#define SECTION_MAP_MASK	(~(SECTION_MAP_LAST_BIT-1))
                         	                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2069: FILE: include/linux/mmzone.h:461:
+	unsigned long map = section->section_mem_map;
+	map &= SECTION_MAP_MASK;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2093: FILE: include/linux/mmzone.h:485:
+#define pfn_to_page(pfn) ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2094: FILE: include/linux/mmzone.h:486:
+({ ^I^I^I^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#2098: FILE: include/linux/mmzone.h:490:
+#define page_to_pfn(page)						\
+({									\
+	page - __section_mem_map_addr(&mem_section[page_to_section(page)]);	\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#2098: FILE: include/linux/mmzone.h:490:
+#define page_to_pfn(page)						\
+({									\
+	page - __section_mem_map_addr(&mem_section[page_to_section(page)]);	\
+})

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2159: FILE: mm/Kconfig:1:
+choice
+	prompt "Memory model"
+	default SPARSEMEM if ARCH_SPARSEMEM_DEFAULT
+	default FLATMEM
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2164: FILE: mm/Kconfig:6:
+config DISCONTIGMEM
+	bool "Discontigious Memory"
+	depends on !ARCH_DISCONTIGMEM_DISABLE
+

WARNING:TYPO_SPELLING: 'Discontigious' may be misspelled - perhaps 'Discontiguous'?
#2165: FILE: mm/Kconfig:7:
+	bool "Discontigious Memory"
 	      ^^^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2168: FILE: mm/Kconfig:10:
+config SPARSEMEM
+	bool "Sparse Memory"
+	depends on !ARCH_SPARSEMEM_DISABLE
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2172: FILE: mm/Kconfig:14:
+config FLATMEM
+	bool "Flat Memory"
+

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#2216: FILE: mm/bootmem.c:283:
+	 * Make use of the guarentee that *_mem_map will be
 	                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#2217: FILE: mm/bootmem.c:284:
+	 * contigious in sections aligned at MAX_ORDER.
 	   ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#2277: FILE: mm/page_alloc.c:208:
+ * Assumption: *_mem_map is contigious at least up to MAX_ORDER
                             ^^^^^^^^^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2279: FILE: mm/page_alloc.c:210:
+static inline struct page *__page_find_buddy(struct page *page, unsigned long page_idx, unsigned int order)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2283: FILE: mm/page_alloc.c:214:
+	return page + (buddy_idx - page_idx);;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2300: FILE: mm/page_alloc.c:265:
+static inline void __free_pages_bulk (struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2301: FILE: mm/page_alloc.c:266:
+static inline void __free_pages_bulk (struct page *page,
 		struct zone *zone, unsigned int order)

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#2399: FILE: mm/page_alloc.c:1564:
+	 * Make use of the guarentee that *_mem_map will be
 	                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#2400: FILE: mm/page_alloc.c:1565:
+	 * contigious in sections aligned at MAX_ORDER.
 	   ^^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2416: FILE: mm/page_alloc.c:1597:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_nr' may be better as '(zone_nr)' to avoid precedence issues
#2416: FILE: mm/page_alloc.c:1597:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2418: FILE: mm/page_alloc.c:1599:
+void zonetable_add(struct zone *zone, int nid, int zid, unsigned long pfn,
+		unsigned long size)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2435: FILE: mm/page_alloc.c:1616:
+static __devinit void zone_pcp_init(struct zone *zone)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2454: FILE: mm/page_alloc.c:1635:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2471: FILE: mm/page_alloc.c:1652:
+	printk(KERN_DEBUG "  %s zone: %lu pages, LIFO batch:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2472: FILE: mm/page_alloc.c:1653:
+	printk(KERN_DEBUG "  %s zone: %lu pages, LIFO batch:%lu\n",
+			zone->name, zone->present_pages, batch);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2475: FILE: mm/page_alloc.c:1656:
+static __devinit void zone_wait_table_init(struct zone *zone, unsigned long zone_size_pages)

ERROR:SPACING: space required before the open parenthesis '('
#2493: FILE: mm/page_alloc.c:1674:
+	for(i = 0; i < zone->wait_table_size; ++i)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2497: FILE: mm/page_alloc.c:1678:
+static void init_currently_empty_zone(struct zone *zone, unsigned long zone_start_pfn, unsigned long size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2499: FILE: mm/page_alloc.c:1680:
+	const unsigned long zone_required_alignment = 1UL << (MAX_ORDER-1);
 	                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2506: FILE: mm/page_alloc.c:1687:
+	if ((zone_start_pfn) & (zone_required_alignment-1))
 	                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2507: FILE: mm/page_alloc.c:1688:
+		printk("BUG: wrong zone alignment, it will crash\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2665: FILE: mm/sparse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Permenant' may be misspelled - perhaps 'Permanent'?
#2675: FILE: mm/sparse.c:11:
+ * Permenant non-linear data:
    ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2691: FILE: mm/sparse.c:27:
+		int section = pfn >> PFN_SECTION_SHIFT;
+		if (!mem_section[section].section_mem_map) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2693: FILE: mm/sparse.c:29:
+			size += (PAGES_PER_SECTION * sizeof (struct page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2736: FILE: mm/sparse.c:72:
+	map = alloc_bootmem_node(NODE_DATA(nid),
+			sizeof(struct page) * PAGES_PER_SECTION);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2740: FILE: mm/sparse.c:76:
+	printk(KERN_WARNING "%s: allocation failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2740: FILE: mm/sparse.c:76:
+	printk(KERN_WARNING "%s: allocation failed\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206222.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 56 warnings, 58 checks, 2493 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206222.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
