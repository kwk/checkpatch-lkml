WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Hi Martin - This patch implements the suggestions from your review. There were

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: arch/s390/kernel/kprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#184: FILE: arch/s390/kernel/kprobes.c:3:
+ *  arch/s390/kernel/kprobes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#197: FILE: arch/s390/kernel/kprobes.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#198: FILE: arch/s390/kernel/kprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#209: FILE: arch/s390/kernel/kprobes.c:28:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#210: FILE: arch/s390/kernel/kprobes.c:29:
+#include <asm/kdebug.h>

CHECK:SPACING: No space is necessary after a cast
#219: FILE: arch/s390/kernel/kprobes.c:38:
+	if (is_prohibited_opcode((kprobe_opcode_t *) p->addr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: arch/s390/kernel/kprobes.c:42:
+	if (!(p->ainsn.insn = get_insn_slot()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#234: FILE: arch/s390/kernel/kprobes.c:53:
+	switch (*(__u8 *) instruction) {

CHECK:SPACING: No space is necessary after a cast
#241: FILE: arch/s390/kernel/kprobes.c:60:
+	switch (*(__u16 *) instruction) {

CHECK:SPACING: No space is necessary after a cast
#256: FILE: arch/s390/kernel/kprobes.c:75:
+	ainsn->reg = *(__u8 *) (ainsn->insn + 1) & 0xf0;

CHECK:SPACING: No space is necessary after a cast
#259: FILE: arch/s390/kernel/kprobes.c:78:
+	ainsn->ilen = (*(__u8 *) (ainsn->insn) & 0xf0) >> 4;

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/s390/kernel/kprobes.c:82:
+	switch (*(__u8 *) ainsn->insn) {

CHECK:SPACING: No space is necessary after a cast
#268: FILE: arch/s390/kernel/kprobes.c:87:
+		if ((*(__u8 *) (ainsn->insn + 1) & 0x0f) == 0)

CHECK:SPACING: No space is necessary after a cast
#286: FILE: arch/s390/kernel/kprobes.c:105:
+		if ((*(__u8 *) (ainsn->insn + 1) & 0x0f) == 0x05) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#286: FILE: arch/s390/kernel/kprobes.c:105:
+		if ((*(__u8 *) (ainsn->insn + 1) & 0x0f) == 0x05) {
+			ainsn->fixup = FIXUP_RETURN_REGISTER;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/s390/kernel/kprobes.c:110:
+		if ((*(__u8 *) (ainsn->insn + 1) & 0x0f) == 0x05) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#291: FILE: arch/s390/kernel/kprobes.c:110:
+		if ((*(__u8 *) (ainsn->insn + 1) & 0x0f) == 0x05) {
+			ainsn->fixup = FIXUP_RETURN_REGISTER;
+		}

CHECK:SPACING: No space is necessary after a cast
#296: FILE: arch/s390/kernel/kprobes.c:115:
+		if (*(__u8 *) (ainsn->insn + 5) == 0x44 ||	/* bxhg  */

CHECK:SPACING: No space is necessary after a cast
#297: FILE: arch/s390/kernel/kprobes.c:116:
+			*(__u8 *) (ainsn->insn + 5) == 0x45) {	/* bxleg */

CHECK:SPACING: No space is necessary after a cast
#302: FILE: arch/s390/kernel/kprobes.c:121:
+		if (*(__u8 *) (ainsn->insn + 5) == 0x46) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#302: FILE: arch/s390/kernel/kprobes.c:121:
+		if (*(__u8 *) (ainsn->insn + 5) == 0x46) {
+			ainsn->fixup = FIXUP_BRANCH_NOT_TAKEN;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: arch/s390/kernel/kprobes.c:184:
+static void __kprobes set_current_kprobe(struct kprobe *p, struct pt_regs *regs,
+						struct kprobe_ctlblk *kcb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: arch/s390/kernel/kprobes.c:196:
+void __kprobes arch_prepare_kretprobe(struct kretprobe *rp,
+					struct pt_regs *regs)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#381: FILE: arch/s390/kernel/kprobes.c:200:
+	if ((ri = get_free_rp_inst(rp)) != NULL) {

CHECK:SPACING: No space is necessary after a cast
#384: FILE: arch/s390/kernel/kprobes.c:203:
+		ri->ret_addr = (kprobe_opcode_t *) regs->gprs[14];

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#432: FILE: arch/s390/kernel/kprobes.c:251:
+			return 1;
+		} else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#434: FILE: arch/s390/kernel/kprobes.c:253:
+			if (p->break_handler && p->break_handler(p, regs)) {
+				goto ss_probe;
+			}

WARNING:INDENTED_LABEL: labels should not be indented
#464: FILE: arch/s390/kernel/kprobes.c:283:
+	ss_probe:

WARNING:INDENTED_LABEL: labels should not be indented
#469: FILE: arch/s390/kernel/kprobes.c:288:
+	no_kprobe:

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: arch/s390/kernel/kprobes.c:295:
+ * ^I- init_kprobes() establishes a probepoint here$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: arch/s390/kernel/kprobes.c:296:
+ * ^I- When the probed function returns, this probe$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: arch/s390/kernel/kprobes.c:297:
+ * ^I^Icauses the handlers to fire$

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#483: FILE: arch/s390/kernel/kprobes.c:302:
+		      "kretprobe_trampoline:\n" "bcr 0,0\n");

WARNING:REPEATED_WORD: Possible repeated word: 'return'
#504: FILE: arch/s390/kernel/kprobes.c:323:
+	 * have a return probe installed on them, and/or more then one return
+	 * return probe was registered for a target function.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: arch/s390/kernel/kprobes.c:352:
+	BUG_ON(!orig_ret_address || (orig_ret_address == trampoline_address));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kcb->kprobe_status != KPROBE_REENTER'
#591: FILE: arch/s390/kernel/kprobes.c:410:
+	if ((kcb->kprobe_status != KPROBE_REENTER) && cur->post_handler) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#604: FILE: arch/s390/kernel/kprobes.c:423:
+	out:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#612: FILE: arch/s390/kernel/kprobes.c:431:
+	if (regs->psw.mask & PSW_MASK_PER) {
+		return 0;
+	}

CHECK:SPACING: No space is necessary after a cast
#687: FILE: arch/s390/kernel/kprobes.c:506:
+	memcpy(kcb->jprobes_stack, (kprobe_opcode_t *) addr,

CHECK:SPACING: No space is necessary after a cast
#710: FILE: arch/s390/kernel/kprobes.c:529:
+	memcpy((kprobe_opcode_t *) stack_addr, kcb->jprobes_stack,

CHECK:SPACING: No space is necessary after a cast
#717: FILE: arch/s390/kernel/kprobes.c:536:
+	.addr = (kprobe_opcode_t *) & kretprobe_trampoline,

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#717: FILE: arch/s390/kernel/kprobes.c:536:
+	.addr = (kprobe_opcode_t *) & kretprobe_trampoline,
 	                            ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#751: FILE: arch/s390/kernel/traps.c:44:
+#include <asm/kdebug.h>

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#782: FILE: arch/s390/kernel/traps.c:327:
+static void __kprobes inline do_trap(long interruption_code, int signr,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/s390/kernel/traps.c:328:
+static void __kprobes inline do_trap(long interruption_code, int signr,
+					char *str, struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: arch/s390/kernel/traps.c:339:
+	if (notify_die(DIE_TRAP, str, regs, interruption_code,
+				interruption_code, signr) == NOTIFY_STOP)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: arch/s390/kernel/traps.c:366:
+	if (notify_die(DIE_SSTEP, "sstep", regs, 0, 0,
+					SIGTRAP) == NOTIFY_STOP){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: arch/s390/kernel/traps.c:500:
+		if (notify_die(DIE_BPT, "bpt", regs, interruption_code,
+					3, SIGTRAP) != NOTIFY_STOP)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#854: FILE: arch/s390/mm/fault.c:34:
+#include <asm/kdebug.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: arch/s390/mm/fault.c:180:
+	if (notify_die(DIE_PAGE_FAULT, "page fault", regs, error_code, 14,
+					SIGSEGV) == NOTIFY_STOP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#882: FILE: include/asm-s390/kdebug.h:1:
+#ifndef _S390_KDEBUG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#904: FILE: include/asm-s390/kdebug.h:23:
+extern int register_die_notifier(struct notifier_block *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#904: FILE: include/asm-s390/kdebug.h:23:
+extern int register_die_notifier(struct notifier_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/asm-s390/kdebug.h:24:
+extern int unregister_die_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#905: FILE: include/asm-s390/kdebug.h:24:
+extern int unregister_die_notifier(struct notifier_block *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#908: FILE: include/asm-s390/kdebug.h:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: include/asm-s390/kdebug.h:45:
+static inline int notify_die(enum die_val val, const char *str,
+			struct pt_regs *regs, long err, int trap, int sig)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#943: FILE: include/asm-s390/kprobes.h:1:
+#ifndef _ASM_S390_KPROBES_H

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#959: FILE: include/asm-s390/kprobes.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#960: FILE: include/asm-s390/kprobes.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#970: FILE: include/asm-s390/kprobes.h:28:
+ * ^I^I<grundym@us.ibm.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#985: FILE: include/asm-s390/kprobes.h:43:
+#define MAX_STACK_SIZE ^I^I64$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ADDR' - possible side-effects?
#986: FILE: include/asm-s390/kprobes.h:44:
+#define MIN_STACK_SIZE(ADDR) (((MAX_STACK_SIZE) < \
+	(((unsigned long)current_thread_info()) + THREAD_SIZE - (ADDR))) \
+	? (MAX_STACK_SIZE) \
+	: (((unsigned long)current_thread_info()) + THREAD_SIZE - (ADDR)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#993: FILE: include/asm-s390/kprobes.h:51:
+#define JPROBE_ENTRY(pentry)	(kprobe_opcode_t *)((func_descr_t *)pentry)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1039: FILE: include/asm-s390/kprobes.h:97:
+extern int kprobe_exceptions_notify(struct notifier_block *self,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000067014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 24 warnings, 34 checks, 911 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000067014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
