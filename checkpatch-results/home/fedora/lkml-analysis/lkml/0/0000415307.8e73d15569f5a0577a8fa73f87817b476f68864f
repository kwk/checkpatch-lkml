WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
3. Fix bugs in per-socket policy: policy entries do not leak but are destroyed,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#69: FILE: include/linux/sysctl.h:354:
+	NET_IPV4_CONF_NOXFRM=15,
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#70: FILE: include/linux/sysctl.h:355:
+	NET_IPV4_CONF_NOPOLICY=16,
 	                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/net/xfrm.h:423:
+extern int __xfrm_sk_clone_policy(struct sock *sk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/net/xfrm.h:432:
+extern void __xfrm_sk_free_policy(struct xfrm_policy *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk->policy[0]"
#149: FILE: include/net/xfrm.h:436:
+	if (unlikely(sk->policy[0] != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk->policy[1]"
#153: FILE: include/net/xfrm.h:440:
+	if (unlikely(sk->policy[1] != NULL)) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#164: FILE: include/net/xfrm.h:450:
+extern struct xfrm_state *xfrm_state_find(u32 daddr, u32 saddr, struct flowi *fl, struct xfrm_tmpl *tmpl,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/net/xfrm.h:450:
+extern struct xfrm_state *xfrm_state_find(u32 daddr, u32 saddr, struct flowi *fl, struct xfrm_tmpl *tmpl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/net/xfrm.h:478:
+extern int xfrm_flush_bundles(struct xfrm_state *x);

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#244: FILE: net/ipv4/devinet.c:1163:
+			.proc_handler =&proc_dointvec,
 			              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#244: FILE: net/ipv4/devinet.c:1163:
+			.proc_handler =&proc_dointvec,
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#252: FILE: net/ipv4/devinet.c:1171:
+			.proc_handler =&proc_dointvec,
 			              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#252: FILE: net/ipv4/devinet.c:1171:
+			.proc_handler =&proc_dointvec,
 			               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: net/ipv4/route.c:1986:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#428: FILE: net/ipv4/tcp_minisocks.c:691:
+			 * destructor and make plain sk_free() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*policy)...) over kmalloc(sizeof(struct xfrm_policy)...)
#462: FILE: net/ipv4/xfrm_policy.c:214:
+	policy = kmalloc(sizeof(struct xfrm_policy), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#560: FILE: net/ipv4/xfrm_policy.c:466:
+		       newp->xfrm_nr*sizeof(struct xfrm_tmpl));
 		                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: net/ipv4/xfrm_policy.c:474:
+	struct xfrm_policy *p0, *p1;
+	p0 = sk->policy[0];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#572: FILE: net/ipv4/xfrm_policy.c:478:
+	if (p0 && (sk->policy[0] = clone_policy(p0)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#574: FILE: net/ipv4/xfrm_policy.c:480:
+	if (p1 && (sk->policy[1] = clone_policy(p1)) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#597: FILE: net/ipv4/xfrm_policy.c:502:
+	for (nx=0, i = 0; i < policy->xfrm_nr; i++) {
 	       ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#654: FILE: net/ipv4/xfrm_policy.c:533:
+	for (nx--; nx>=0; nx--)
 	             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#690: FILE: net/ipv4/xfrm_policy.c:638:
+		x->u.rt.rt_flags = rt0->rt_flags&(RTCF_BROADCAST|RTCF_MULTICAST|RTCF_LOCAL);
 		                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#690: FILE: net/ipv4/xfrm_policy.c:638:
+		x->u.rt.rt_flags = rt0->rt_flags&(RTCF_BROADCAST|RTCF_MULTICAST|RTCF_LOCAL);
 		                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#690: FILE: net/ipv4/xfrm_policy.c:638:
+		x->u.rt.rt_flags = rt0->rt_flags&(RTCF_BROADCAST|RTCF_MULTICAST|RTCF_LOCAL);
 		                                                               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#719: FILE: net/ipv4/xfrm_policy.c:728:
+		if (unlikely(nx<0)) {
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#740: FILE: net/ipv4/xfrm_policy.c:764:
+			for (i=0; i<nx; i++)
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#740: FILE: net/ipv4/xfrm_policy.c:764:
+			for (i=0; i<nx; i++)
 			           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#807: FILE: net/ipv4/xfrm_policy.c:1030:
+	for (i=0; i<XFRM_POLICY_MAX; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#807: FILE: net/ipv4/xfrm_policy.c:1030:
+	for (i=0; i<XFRM_POLICY_MAX; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#811: FILE: net/ipv4/xfrm_policy.c:1034:
+			while ((dst=*dstp) != NULL) {
 			           ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#811: FILE: net/ipv4/xfrm_policy.c:1034:
+			while ((dst=*dstp) != NULL) {
 			            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#868: FILE: net/ipv4/xfrm_state.c:33:
+	if (secs >= (MAX_SCHEDULE_TIMEOUT-1)/HZ)
 	                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#868: FILE: net/ipv4/xfrm_state.c:33:
+	if (secs >= (MAX_SCHEDULE_TIMEOUT-1)/HZ)
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#869: FILE: net/ipv4/xfrm_state.c:34:
+		return MAX_SCHEDULE_TIMEOUT-1;
 		                           ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#870: FILE: net/ipv4/xfrm_state.c:35:
+		return MAX_SCHEDULE_TIMEOUT-1;
+	else

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: net/ipv4/xfrm_state.c:36:
+^I        return secs*HZ;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#871: FILE: net/ipv4/xfrm_state.c:36:
+	        return secs*HZ;
 	                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#876: FILE: net/ipv4/xfrm_state.c:41:
+	struct xfrm_state *x = (struct xfrm_state*)data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#961: FILE: net/ipv4/xfrm_state.c:131:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1074: FILE: net/ipv4/xfrm_state.c:294:
+			mod_timer(&x->timer, ACQ_EXPIRES*HZ);
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1111: FILE: net/ipv4/xfrm_state.c:340:
+		if (!mod_timer(&x->timer, jiffies + ACQ_EXPIRES*HZ))
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1133: FILE: net/ipv4/xfrm_state.c:427:
+		mod_timer(&x0->timer, jiffies + ACQ_EXPIRES*HZ);
 		                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1152: FILE: net/key/af_key.c:30:
+#define _X2KEY(x) ((x) == XFRM_INF ? 0 : (x))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1153: FILE: net/key/af_key.c:31:
+#define _KEY2X(x) ((x) == 0 ? XFRM_INF : (x))

CHECK:SPACING: No space is necessary after a cast
#1209: FILE: net/key/af_key.c:756:
+	lifetime = (struct sadb_lifetime *)  skb_put(skb,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1224: FILE: net/key/af_key.c:883:
+	/* RFC2367:
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1232: FILE: net/key/af_key.c:891:
+           However, KAME setkey always uses SADB_SASTATE_LARVAL.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: net/key/af_key.c:971:
+^Ipfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], $

CHECK:SPACING: No space is necessary after a cast
#1264: FILE: net/key/af_key.c:971:
+	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1264: FILE: net/key/af_key.c:971:
+	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 
 	                                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: net/key/af_key.c:973:
+^Ipfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1], $

CHECK:SPACING: No space is necessary after a cast
#1268: FILE: net/key/af_key.c:973:
+	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1], 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1268: FILE: net/key/af_key.c:973:
+	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1], 
 	                                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1278: FILE: net/key/af_key.c:984:
+	if (ext_hdrs[SADB_EXT_ADDRESS_PROXY-1]) {
 	                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1279: FILE: net/key/af_key.c:985:
+		struct sadb_address *addr = ext_hdrs[SADB_EXT_ADDRESS_PROXY-1];
 		                                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 7 warnings, 27 checks, 1267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
