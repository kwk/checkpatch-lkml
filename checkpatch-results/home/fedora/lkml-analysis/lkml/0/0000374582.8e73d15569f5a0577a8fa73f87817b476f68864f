WARNING:TYPO_SPELLING: 'orignal' may be misspelled - perhaps 'original'?
#34: 
resending Christoph's orignal patch with my fix to disk_size() included.
                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'superflous' may be misspelled - perhaps 'superfluous'?
#48: 
  (d) DAC960_Release was entirely superflous.
                                  ^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -ur linux-2.5.68_bk/drivers/block/DAC960.c linux-2.5.68_FDAC/drivers/block/DAC960.c

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#64: FILE: drivers/block/DAC960.c:49:
+static DAC960_Controller_T *DAC960_Controllers[DAC960_MaxControllers];
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Controller_T>
#64: FILE: drivers/block/DAC960.c:49:
+static DAC960_Controller_T *DAC960_Controllers[DAC960_MaxControllers];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Controllers>
#64: FILE: drivers/block/DAC960.c:49:
+static DAC960_Controller_T *DAC960_Controllers[DAC960_MaxControllers];

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_MaxControllers>
#64: FILE: drivers/block/DAC960.c:49:
+static DAC960_Controller_T *DAC960_Controllers[DAC960_MaxControllers];

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ControllerCount>
#65: FILE: drivers/block/DAC960.c:50:
+static int DAC960_ControllerCount;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcDirectoryEntry>
#66: FILE: drivers/block/DAC960.c:51:
+static PROC_DirectoryEntry_T *DAC960_ProcDirectoryEntry;

CHECK:CAMELCASE: Avoid CamelCase: <FirmwareType>
#77: FILE: drivers/block/DAC960.c:56:
+	if (p->FirmwareType == DAC960_V1_Controller) {

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_Controller>
#77: FILE: drivers/block/DAC960.c:56:
+	if (p->FirmwareType == DAC960_V1_Controller) {

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveCount>
#78: FILE: drivers/block/DAC960.c:57:
+		if (drive_nr >= p->LogicalDriveCount)

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveInformation>
#80: FILE: drivers/block/DAC960.c:59:
+		return p->V1.LogicalDriveInformation[drive_nr].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->V1.LogicalDriveInformation[drive_nr].LogicalDriveSize'
#81: FILE: drivers/block/DAC960.c:60:
+		return p->V1.LogicalDriveInformation[drive_nr].
+			LogicalDriveSize;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveSize>
#81: FILE: drivers/block/DAC960.c:60:
+			LogicalDriveSize;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_LogicalDeviceInfo_T>
#83: FILE: drivers/block/DAC960.c:62:
+		DAC960_V2_LogicalDeviceInfo_T *i =

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDeviceInformation>
#84: FILE: drivers/block/DAC960.c:63:
+			p->V2.LogicalDeviceInformation[drive_nr];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i"
#85: FILE: drivers/block/DAC960.c:64:
+		if (i == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <ConfigurableDeviceSize>
#87: FILE: drivers/block/DAC960.c:66:
+		return i->ConfigurableDeviceSize;

CHECK:CAMELCASE: Avoid CamelCase: <ControllerNumber>
#100: FILE: drivers/block/DAC960.c:77:
+	if (!p->ControllerNumber && !drive_nr && (file->f_flags & O_NONBLOCK))

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->V1.LogicalDriveInformation[drive_nr].LogicalDriveState'
#105: FILE: drivers/block/DAC960.c:82:
+		if (p->V1.LogicalDriveInformation[drive_nr].
+		    LogicalDriveState == DAC960_V1_LogicalDrive_Offline)

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveState>
#105: FILE: drivers/block/DAC960.c:82:
+		    LogicalDriveState == DAC960_V1_LogicalDrive_Offline)

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_LogicalDrive_Offline>
#105: FILE: drivers/block/DAC960.c:82:
+		    LogicalDriveState == DAC960_V1_LogicalDrive_Offline)

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDeviceState>
#110: FILE: drivers/block/DAC960.c:87:
+		if (i->LogicalDeviceState == DAC960_V2_LogicalDevice_Offline)

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_LogicalDevice_Offline>
#110: FILE: drivers/block/DAC960.c:87:
+		if (i->LogicalDeviceState == DAC960_V2_LogicalDevice_Offline)

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_UserIOCTL>
#142: FILE: drivers/block/DAC960.c:107:
+		return DAC960_UserIOCTL(inode, file, cmd, arg);

CHECK:CAMELCASE: Avoid CamelCase: <GeometryTranslationHeads>
#151: FILE: drivers/block/DAC960.c:113:
+		g.heads = p->V1.GeometryTranslationHeads;

CHECK:CAMELCASE: Avoid CamelCase: <GeometryTranslationSectors>
#152: FILE: drivers/block/DAC960.c:114:
+		g.sectors = p->V1.GeometryTranslationSectors;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->V1.LogicalDriveInformation[drive_nr].LogicalDriveSize'
#154: FILE: drivers/block/DAC960.c:116:
+		g.cylinders = p->V1.LogicalDriveInformation[drive_nr].
+			LogicalDriveSize / (g.heads * g.sectors);

CHECK:CAMELCASE: Avoid CamelCase: <DriveGeometry>
#158: FILE: drivers/block/DAC960.c:120:
+		switch (i->DriveGeometry) {

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Error>
#168: FILE: drivers/block/DAC960.c:130:
+			DAC960_Error("Illegal Logical Device Geometry %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: drivers/block/DAC960.c:131:
+			DAC960_Error("Illegal Logical Device Geometry %d\n",
+					p, i->DriveGeometry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/block/DAC960.c:137:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: drivers/block/DAC960.c:140:
+^Ireturn copy_to_user(loc, &g, sizeof g) ? -EFAULT : 0; $

WARNING:SIZEOF_PARENTHESIS: sizeof g should be sizeof(g)
#180: FILE: drivers/block/DAC960.c:140:
+	return copy_to_user(loc, &g, sizeof g) ? -EFAULT : 0; 

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveInitiallyAccessible>
#188: FILE: drivers/block/DAC960.c:148:
+	if (!p->LogicalDriveInitiallyAccessible[drive_nr])

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_BlockDeviceOperations>
#202: FILE: drivers/block/DAC960.c:162:
+static struct block_device_operations DAC960_BlockDeviceOperations = {

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#202: FILE: drivers/block/DAC960.c:162:
+static struct block_device_operations DAC960_BlockDeviceOperations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 8 warnings, 28 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
