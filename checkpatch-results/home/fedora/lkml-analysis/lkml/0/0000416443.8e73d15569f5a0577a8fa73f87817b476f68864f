WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .17025-linux-2.5.45/include/linux/module.h .17025-linux-2.5.45.updated/include/linux/module.h

ERROR:SPACING: space required after that ',' (ctx:VxV)
#52: FILE: include/linux/module.h:281:
+#define MODULE_PARM(var,type)						    \
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#52: FILE: include/linux/module.h:281:
+#define MODULE_PARM(var,type)						    \
+struct obsolete_modparm __parm_##var __attribute__((section(".obsparm"))) = \
+{ __stringify(var), type };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".obsparm") over __attribute__((section(".obsparm")))
#53: FILE: include/linux/module.h:282:
+struct obsolete_modparm __parm_##var __attribute__((section(".obsparm"))) = \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#57: FILE: include/linux/module.h:286:
+#define MODULE_PARM(var,type)
                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: kernel/module.c:504:
+static int param_set_byte(const char *val, struct kernel_param *kp)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#107: FILE: kernel/module.c:509:
+	if (!val) return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#108: FILE: kernel/module.c:510:
+	l = simple_strtol(val, &endp, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#120: FILE: kernel/module.c:522:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#136: FILE: kernel/module.c:538:
+		printk(KERN_ERR "Parameter %s needs an argument\n", kp->name);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#142: FILE: kernel/module.c:544:
+	min = simple_strtol(p, &endp, 10);

CHECK:BRACES: braces {} should be used on all arms of this statement
#143: FILE: kernel/module.c:545:
+	if (endp == obsparm->type)
[...]
+	else if (*endp == '-') {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#144: FILE: kernel/module.c:546:
+		min = max = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: kernel/module.c:548:
+		p = endp+1;
 		        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#147: FILE: kernel/module.c:549:
+		max = simple_strtol(p, &endp, 10);

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: kernel/module.c:550:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#166: FILE: kernel/module.c:568:
+	printk(KERN_ERR "Unknown obsolete parameter type %s\n", obsparm->type);

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#174: FILE: kernel/module.c:576:
+			   Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#182: FILE: kernel/module.c:584:
+	kp = kmalloc(sizeof(kp[0]) * num, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#192: FILE: kernel/module.c:594:
+		obsparm[i].addr
+			= (void *)find_local_symbol(sechdrs, symindex, strtab,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: kernel/module.c:597:
+			printk("%s: falsely claims to have parameter %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#218: FILE: kernel/module.c:620:
+		printk(KERN_WARNING "%s: Ignoring obsolete parameters\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#241: FILE: kernel/module.c:975:
+	exportindex = setupindex = obsparmindex = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: kernel/module.c:1011:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name, ".obsparm")
 		                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416443.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 12 warnings, 8 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416443.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
