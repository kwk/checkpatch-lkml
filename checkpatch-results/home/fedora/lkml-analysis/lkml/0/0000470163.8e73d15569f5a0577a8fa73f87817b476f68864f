Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#17: 
Subject: [PATCH] struct super_block cleanup - msdos/vfat
                                              ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Seperates' may be misspelled - perhaps 'Separates'?
#28: 
Seperates msdos_sb_info from struct super_block for msdos and vfat. 
^^^^^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#28: 
Seperates msdos_sb_info from struct super_block for msdos and vfat. 
                                                    ^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#71: FILE: fs/fat/inode.c:176:
+	if (sbi->fat_bits == 32) {
 		fat_clusters_flush(sb);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#101: FILE: fs/fat/inode.c:195:
+	if (sbi->options.iocharset) {
+		kfree(sbi->options.iocharset);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#121: FILE: fs/fat/inode.c:591:
+		   struct inode_operations *fs_dir_inode_ops, int isvfat)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct msdos_sb_info)...)
#135: FILE: fs/fat/inode.c:605:
+	sbi = kmalloc(sizeof(struct msdos_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#232: FILE: fs/vfat/namei.c:1301:
+	if (parse_options((char *) data, &(sbi->options))) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sbi->options
#232: FILE: fs/vfat/namei.c:1301:
+	if (parse_options((char *) data, &(sbi->options))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <dotsOK>
#233: FILE: fs/vfat/namei.c:1302:
+		sbi->options.dotsOK = 0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#234: FILE: fs/vfat/namei.c:1303:
+		if (sbi->options.posixfs) {
+			sbi->options.name_check = 's';
 		}

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#293: FILE: include/linux/msdos_fs.h:291:
+		   struct inode_operations *fs_dir_inode_ops, int isvfat);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 4 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
