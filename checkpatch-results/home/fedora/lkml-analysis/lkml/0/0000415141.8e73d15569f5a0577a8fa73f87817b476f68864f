WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -u --recursive --new-file linux-2.5.46-05-mempool/include/linux/sunrpc/sched.h linux-2.5.46-06-rpcbuf/include/linux/sunrpc/sched.h

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#54: FILE: include/linux/sunrpc/sched.h:188:
+void *		rpc_malloc(struct rpc_task *, size_t);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_task *' should also have an identifier name
#54: FILE: include/linux/sunrpc/sched.h:188:
+void *		rpc_malloc(struct rpc_task *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#54: FILE: include/linux/sunrpc/sched.h:188:
+void *		rpc_malloc(struct rpc_task *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_task *' should also have an identifier name
#55: FILE: include/linux/sunrpc/sched.h:189:
+void		rpc_free(struct rpc_task *);

CHECK:SPACING: No space is necessary after a cast
#81: FILE: net/sunrpc/auth_null.c:28:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth),GFP_KERNEL)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: net/sunrpc/auth_null.c:28:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth),GFP_KERNEL)))
 	                                                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#81: FILE: net/sunrpc/auth_null.c:28:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth),GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#81: FILE: net/sunrpc/auth_null.c:28:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth),GFP_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#99: FILE: net/sunrpc/auth_null.c:55:
+	if (!(cred = (struct rpc_cred *) kmalloc(sizeof(*cred),GFP_KERNEL)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: net/sunrpc/auth_null.c:55:
+	if (!(cred = (struct rpc_cred *) kmalloc(sizeof(*cred),GFP_KERNEL)))
 	                                                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#99: FILE: net/sunrpc/auth_null.c:55:
+	if (!(cred = (struct rpc_cred *) kmalloc(sizeof(*cred),GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#99: FILE: net/sunrpc/auth_null.c:55:
+	if (!(cred = (struct rpc_cred *) kmalloc(sizeof(*cred),GFP_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#120: FILE: net/sunrpc/auth_unix.c:44:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#120: FILE: net/sunrpc/auth_unix.c:44:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#120: FILE: net/sunrpc/auth_unix.c:44:
+	if (!(auth = (struct rpc_auth *) kmalloc(sizeof(*auth), GFP_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#138: FILE: net/sunrpc/auth_unix.c:73:
+	if (!(cred = (struct unx_cred *) kmalloc(sizeof(*cred), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#138: FILE: net/sunrpc/auth_unix.c:73:
+	if (!(cred = (struct unx_cred *) kmalloc(sizeof(*cred), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#138: FILE: net/sunrpc/auth_unix.c:73:
+	if (!(cred = (struct unx_cred *) kmalloc(sizeof(*cred), GFP_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#184: FILE: net/sunrpc/clnt.c:88:
+	clnt = (struct rpc_clnt *) kmalloc(sizeof(*clnt), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#184: FILE: net/sunrpc/clnt.c:88:
+	clnt = (struct rpc_clnt *) kmalloc(sizeof(*clnt), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpc_malloc"
#211: FILE: net/sunrpc/clnt.c:490:
+	if (rpc_malloc(task, bufsiz << 1) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#429: FILE: net/sunrpc/sched.c:1139:
+	if (rpc_buffer_mempool)
+		mempool_destroy(rpc_buffer_mempool);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#431: FILE: net/sunrpc/sched.c:1141:
+	if (rpc_task_mempool)
+		mempool_destroy(rpc_task_mempool);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#433: FILE: net/sunrpc/sched.c:1143:
+		printk(KERN_INFO "rpc_task: not all structures were freed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#435: FILE: net/sunrpc/sched.c:1145:
+		printk(KERN_INFO "rpc_buffers: not all structures were freed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: net/sunrpc/sched.c:1152:
+	rpc_task_slabp = kmem_cache_create("rpc_tasks",
+					     sizeof(struct rpc_task),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: net/sunrpc/sched.c:1164:
+	rpc_task_mempool = mempool_create(RPC_TASK_POOLSIZE,
+					    mempool_alloc_slab,

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#507: FILE: net/sunrpc/xprt.c:1550:
 	if (xprt)
+		kfree(xprt);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 8 checks, 433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
