WARNING:TYPO_SPELLING: 'functionnalities' may be misspelled - perhaps 'functionalities'?
#30: 
	Here is a patch to bring more functionnalities in rbtree.
	                              ^^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
--- linux-2.5.75mm1/include/linux/rbtree.h	2003-07-10 22:08:08.000000000 +0200

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: include/linux/rbtree.h:121:
+extern void rb_erase_branch(struct rb_node *, struct rb_root *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_node *' should also have an identifier name
#46: FILE: include/linux/rbtree.h:121:
+extern void rb_erase_branch(struct rb_node *, struct rb_root *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#46: FILE: include/linux/rbtree.h:121:
+extern void rb_erase_branch(struct rb_node *, struct rb_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/linux/rbtree.h:125:
+extern struct rb_node *rb_first(struct rb_root *); /* get first node in sort order */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#51: FILE: include/linux/rbtree.h:125:
+extern struct rb_node *rb_first(struct rb_root *); /* get first node in sort order */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/rbtree.h:126:
+extern struct rb_node *rb_last(struct rb_root *);  /* get last node in sort order */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#52: FILE: include/linux/rbtree.h:126:
+extern struct rb_node *rb_last(struct rb_root *);  /* get last node in sort order */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: lib/rbtree.c:6:
+  07/2003  branch access - Fabian Frederick <ffrederick@users.sourceforge.net>$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#63: FILE: lib/rbtree.c:6:
+  07/2003  branch access - Fabian Frederick <ffrederick@users.sourceforge.net>
     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Fabian>
#63: FILE: lib/rbtree.c:6:
+  07/2003  branch access - Fabian Frederick <ffrederick@users.sourceforge.net>

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Frederick>
#63: FILE: lib/rbtree.c:6:
+  07/2003  branch access - Fabian Frederick <ffrederick@users.sourceforge.net>

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#73: FILE: lib/rbtree.c:228:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: lib/rbtree.c:229:
+ if(node->rb_left)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 10)
#74: FILE: lib/rbtree.c:229:
+ if(node->rb_left)
+	  return rb_erase_branch(node->rb_left, root);

ERROR:SPACING: space required before the open parenthesis '('
#74: FILE: lib/rbtree.c:229:
+ if(node->rb_left)

WARNING:TABSTOP: Statements should start on a tabstop
#75: FILE: lib/rbtree.c:230:
+	  return rb_erase_branch(node->rb_left, root);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: lib/rbtree.c:231:
+     else if (node->rb_right) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: lib/rbtree.c:231:
+     else if (node->rb_right) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 16)
#76: FILE: lib/rbtree.c:231:
+     else if (node->rb_right) 
+		return rb_erase_branch(node->rb_right, root);

WARNING:TABSTOP: Statements should start on a tabstop
#78: FILE: lib/rbtree.c:233:
+	   else return rb_erase(node, root);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#78: FILE: lib/rbtree.c:233:
+	   else return rb_erase(node, root);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#80: FILE: lib/rbtree.c:235:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#82: FILE: lib/rbtree.c:237:
+EXPORT_SYMBOL(rb_erase_branch);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: lib/rbtree.c:332:
+	struct rb_node *n;
+	n=root->rb_node;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: lib/rbtree.c:332:
+	n=root->rb_node;
 	 ^

ERROR:SPACING: space required before the open parenthesis '('
#96: FILE: lib/rbtree.c:335:
+	while(n->rb_right)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: lib/rbtree.c:339:
+EXPORT_SYMBOL (rb_last);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355878.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 16 warnings, 8 checks, 57 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355878.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
