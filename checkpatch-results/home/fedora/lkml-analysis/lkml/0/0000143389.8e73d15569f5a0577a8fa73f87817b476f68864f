WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
It has evolved into a near complete solution over time. I'll split it up and

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#209: FILE: include/linux/fs.h:565:
+	uint64_t      cache_hit;	/* cache hit count*/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#260: FILE: include/linux/mm.h:897:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: include/linux/mm.h:897:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: include/linux/mm.h:904:
+int save_chunk(struct page *head, struct page *tail,
+		struct list_head *save_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#454: FILE: include/linux/radix-tree.h:49:
+void *radix_tree_lookup(struct radix_tree_root *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#454: FILE: include/linux/radix-tree.h:49:
+void *radix_tree_lookup(struct radix_tree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#455: FILE: include/linux/radix-tree.h:50:
+void *radix_tree_lookup_node(struct radix_tree_root *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#455: FILE: include/linux/radix-tree.h:50:
+void *radix_tree_lookup_node(struct radix_tree_root *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#455: FILE: include/linux/radix-tree.h:50:
+void *radix_tree_lookup_node(struct radix_tree_root *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: include/linux/radix-tree.h:51:
+void *radix_tree_lookup_node(struct radix_tree_root *, unsigned long,
+							unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#473: FILE: include/linux/radix-tree.h:82:
+void *radix_tree_cache_lookup(struct radix_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_cache *' should also have an identifier name
#473: FILE: include/linux/radix-tree.h:82:
+void *radix_tree_cache_lookup(struct radix_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#473: FILE: include/linux/radix-tree.h:82:
+void *radix_tree_cache_lookup(struct radix_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: include/linux/radix-tree.h:83:
+void *radix_tree_cache_lookup(struct radix_tree_root *,
+				struct radix_tree_cache *, unsigned long);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#487: FILE: include/linux/sysctl.h:183:
+	VM_READAHEAD_RATIO=29, /* percent of read-ahead size to thrashing-threshold */
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#498: FILE: kernel/sysctl.c:70:
+extern int readahead_ratio;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#514: FILE: kernel/sysctl.c:861:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: lib/radix-tree.c:285:
+void *radix_tree_lookup_node(struct radix_tree_root *root,
+				unsigned long index, unsigned int level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: lib/radix-tree.c:324:
+void *radix_tree_cache_lookup(struct radix_tree_root *root,
+				struct radix_tree_cache *cache,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#623: FILE: mm/filemap.c:705:
+extern int readahead_ratio;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: mm/filemap.c:768:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#654: FILE: mm/filemap.c:776:
+			if (unlikely(page == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#656: FILE: mm/filemap.c:778:
+						filp, prev_page, NULL,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: mm/filemap.c:778:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#662: FILE: mm/filemap.c:784:
+						filp, prev_page, page,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: mm/filemap.c:784:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, page,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#770: FILE: mm/filemap.c:1245:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: mm/filemap.c:1254:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: mm/filemap.c:1259:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, page,

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#827: FILE: mm/page_alloc.c:113:
+			1 << PG_activate|
 			                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: mm/page_alloc.c:843:
+	BUG_ON(!batch_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#895: FILE: mm/page_alloc.c:852:
+			if (left_count <= 0) {
+				break;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#967: FILE: mm/page_alloc.c:1414:
 			" present:%lukB"
+			" aging:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#968: FILE: mm/page_alloc.c:1415:
+			" aging:%lukB"
+			" age:%lu"

WARNING:SPLIT_STRING: quoted string split across lines
#995: FILE: mm/page_alloc.c:2166:
 			   "\n        inactive %lu"
+			   "\n        aging    %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#996: FILE: mm/page_alloc.c:2167:
+			   "\n        aging    %lu"
+			   "\n        age      %lu"

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1083: FILE: mm/readahead.c:21:
+#define dprintk(args...) \
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1084: FILE: mm/readahead.c:22:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1084: FILE: mm/readahead.c:22:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1085: FILE: mm/readahead.c:23:
+#define ddprintk(args...) \
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1086: FILE: mm/readahead.c:24:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1086: FILE: mm/readahead.c:24:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'delta' - possible side-effects?
#1088: FILE: mm/readahead.c:26:
+#define ra_account_page(ra, member, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * ((ra)->flags & RA_CLASS_MASK);\
+	BUG_ON(opg + o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, 1UL);					\
+	__mod_page_state(o2, 1UL);					\
+	__mod_page_state(opg + o1, (delta));				\
+	__mod_page_state(opg + o2, (delta));				\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1089: FILE: mm/readahead.c:27:
+^Iunsigned long opg = offsetof(struct page_state, pgreadahead) - ^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1093: FILE: mm/readahead.c:31:
+	BUG_ON(opg + o2 >= sizeof(struct page_state));			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'class' - possible side-effects?
#1100: FILE: mm/readahead.c:38:
+#define ra_account(member, class, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * (class);			\
+	if ((class) >= RA_CLASS_END)					\
+		break;							\
+	BUG_ON(o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, (delta));					\
+	__mod_page_state(o2, (delta));					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'delta' - possible side-effects?
#1100: FILE: mm/readahead.c:38:
+#define ra_account(member, class, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * (class);			\
+	if ((class) >= RA_CLASS_END)					\
+		break;							\
+	BUG_ON(o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, (delta));					\
+	__mod_page_state(o2, (delta));					\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: mm/readahead.c:39:
+^Iunsigned long opg = offsetof(struct page_state, pgreadahead) - ^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1107: FILE: mm/readahead.c:45:
+	BUG_ON(o2 >= sizeof(struct page_state));			\

ERROR:SPACING: space required before the open parenthesis '('
#1115: FILE: mm/readahead.c:53:
+#define inc_page_state(a)    do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1116: FILE: mm/readahead.c:54:
+#define mod_page_state(a, b) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1117: FILE: mm/readahead.c:55:
+#define dprintk(args...)     do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1118: FILE: mm/readahead.c:56:
+#define ddprintk(args...)    do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1119: FILE: mm/readahead.c:57:
+#define ra_account(member, class, delta)	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1120: FILE: mm/readahead.c:58:
+#define ra_account_page(member, class, delta)	do {} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1127: FILE: mm/readahead.c:65:
+int readahead_ratio = 0;   $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1127: FILE: mm/readahead.c:65:
+int readahead_ratio = 0;   

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: mm/readahead.c:345:
+		if (readahead_ratio > 9 &&
+				page_idx == nr_to_read - lookahead_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1180: FILE: mm/readahead.c:430:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1189: FILE: mm/readahead.c:450:
+	actual = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: mm/readahead.c:453:
+	dprintk("blockable-readahead(ino=%lu, ra=%lu+%lu) = %d\n",
+			mapping->host->i_ino, offset, nr_to_read, actual);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: mm/readahead.c:635:
+ *    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1221: FILE: mm/readahead.c:637:
+ *    +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1222: FILE: mm/readahead.c:638:
+ *    |       # PG_readahead                    |       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1223: FILE: mm/readahead.c:639:
+ *    +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1230: FILE: mm/readahead.c:646:
+ *                  +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1231: FILE: mm/readahead.c:647:
+ *                  |                #                        |       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: mm/readahead.c:648:
+ *                  +-----------------------------------------+       $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1237: FILE: mm/readahead.c:653:
+#define next_page(page) (list_entry((page)->lru.prev, struct page, lru))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1238: FILE: mm/readahead.c:654:
+#define prev_page(page) (list_entry((page)->lru.next, struct page, lru))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1265: FILE: mm/readahead.c:681:
+	BUG_ON(!nr_pages || !page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rescue_pages', this function's name, in a string
#1270: FILE: mm/readahead.c:686:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: mm/readahead.c:687:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",
+			mapping->host->i_ino, index, nr_pages);

ERROR:SPACING: space required before the open parenthesis '('
#1273: FILE: mm/readahead.c:689:
+	for(;;) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1282: FILE: mm/readahead.c:698:
+			struct page *the_page = page;
+			page = next_page(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: mm/readahead.c:700:
+			if (!PageActive(the_page) &&
+					!PageActivate(the_page) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: mm/readahead.c:737:
+ *              la_index      ra_index     lookahead_index         readahead_index        $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: mm/readahead.c:827:
+static inline void ra_state_init(struct file_ra_state *ra,
+				unsigned long la_index, unsigned long ra_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1423: FILE: mm/readahead.c:839:
+static inline void ra_state_update(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1437: FILE: mm/readahead.c:853:
+static inline void ra_state_adjust(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1447: FILE: mm/readahead.c:863:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1447: FILE: mm/readahead.c:863:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1454: FILE: mm/readahead.c:870:
+	static char *ra_class_name[] = {

WARNING:TYPO_SPELLING: 'contexta' may be misspelled - perhaps 'context'?
#1458: FILE: mm/readahead.c:874:
+		"contexta",
 		 ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1465: FILE: mm/readahead.c:881:
+	BUG_ON(ra_class == 0 || ra_class > RA_CLASS_END);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1478: FILE: mm/readahead.c:894:
+		if (ra_class == RA_CLASS_CONTEXT_ACCELERATED &&
+				eof_index > ra->lookahead_index + 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1486: FILE: mm/readahead.c:902:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1487: FILE: mm/readahead.c:903:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1494: FILE: mm/readahead.c:910:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class - 1],

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#1505: FILE: mm/readahead.c:921:
+ *   - Substract ra_size by the old look-ahead to get real safe read-ahead;
        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1516: FILE: mm/readahead.c:932:
+static inline int adjust_rala(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: mm/readahead.c:961:
+ * $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1563: FILE: mm/readahead.c:979:
+static inline unsigned long compute_thrashing_threshold(

WARNING:SPLIT_STRING: quoted string split across lines
#1586: FILE: mm/readahead.c:1002:
+	ddprintk("compute_thrashing_threshold: "
+			"ra=%lu=%lu*%lu/%lu, remain %lu for %lu\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1593: FILE: mm/readahead.c:1009:
+/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1597: FILE: mm/readahead.c:1013:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: mm/readahead.c:1014:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra, struct page *page,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1610: FILE: mm/readahead.c:1026:
+^Iif (readahead_ratio < 80 && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1611: FILE: mm/readahead.c:1027:
+	if (readahead_ratio < 80 && 
+			remain_space <= la_size && la_size > 1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1617: FILE: mm/readahead.c:1033:
+	if (!adjust_rala(min(ra_max, 2 * ra_old + (ra_max - ra_old) / 16),
+				&ra_size, &la_size))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1623: FILE: mm/readahead.c:1039:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1626: FILE: mm/readahead.c:1042:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: mm/readahead.c:1051:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1639: FILE: mm/readahead.c:1055:
+ *| |-->|-->|       |------>|-->|                |------>| $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1647: FILE: mm/readahead.c:1063:
+ * ^Il: the number of pages read by the stream$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1649: FILE: mm/readahead.c:1065:
+ * ^IL: the number of pages pushed into inactive_list in the mean time$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1651: FILE: mm/readahead.c:1067:
+ * ^If(l01) <= L0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1652: FILE: mm/readahead.c:1068:
+ * ^If(l11 + l12) = L1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1653: FILE: mm/readahead.c:1069:
+ * ^If(l21 + l22) = L2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1654: FILE: mm/readahead.c:1070:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1655: FILE: mm/readahead.c:1071:
+ * ^If(l01 + l11 + ...) <= Sum(L0 + L1 + ...)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#1666: FILE: mm/readahead.c:1082:
+#define PAGE_REFCNT_1		(1 << PG_referenced)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1667: FILE: mm/readahead.c:1083:
+#define PAGE_REFCNT_2		(1 << PG_activate)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1697: FILE: mm/readahead.c:1113:
+	switch (__page_refcnt(page)) {
+		case 0:
[...]
+		case PAGE_REFCNT_1:
[...]
+		case PAGE_REFCNT_2:
[...]
+		case PAGE_REFCNT_3:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1715: FILE: mm/readahead.c:1131:
+ * ^IThe counted value may well be far under the true threshold, so return$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1716: FILE: mm/readahead.c:1132:
+ * ^Iit unmodified for further process in adjust_rala_accelerated().$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1718: FILE: mm/readahead.c:1134:
+ * ^ICheck 3 evenly spread pages to be sure there is no hole or many$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1719: FILE: mm/readahead.c:1135:
+ * ^Inot-yet-accessed pages. This prevents unnecessary IO, and allows some$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1720: FILE: mm/readahead.c:1136:
+ * ^Ialmost sequential patterns to survive.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1733: FILE: mm/readahead.c:1149:
+static int count_sequential_pages(struct address_space *mapping,
+			int refcnt, unsigned long *remain,

ERROR:SPACING: space required before the open parenthesis '('
#1765: FILE: mm/readahead.c:1181:
+		if(nr_lookback > ra_min * 8) {

ERROR:SPACING: space required before the open parenthesis '('
#1776: FILE: mm/readahead.c:1192:
+	for(step = ra_min; step < nr_lookback; step *= 4) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1779: FILE: mm/readahead.c:1195:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+									index);

ERROR:SPACING: space required before the open parenthesis '('
#1788: FILE: mm/readahead.c:1204:
+	for(;;) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1791: FILE: mm/readahead.c:1207:
+		if (page_refcnt(page) < refcnt) {
[...]
+		} else if (++count >= 3 || step < ra_min)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: mm/readahead.c:1216:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+									index);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1808: FILE: mm/readahead.c:1224:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1829: FILE: mm/readahead.c:1245:
+	for(;;) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1836: FILE: mm/readahead.c:1252:
+^I^Ido {    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1849: FILE: mm/readahead.c:1265:
+out:    $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1861: FILE: mm/readahead.c:1277:
+static unsigned long first_absent_page(struct address_space *mapping,
+				struct page *page, unsigned long index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1876: FILE: mm/readahead.c:1292:
+	page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+							index + ra_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1882: FILE: mm/readahead.c:1298:
+	page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+							index + ra_max - 1);

ERROR:SPACING: space required before the open parenthesis '('
#1893: FILE: mm/readahead.c:1309:
+	for(;; ra_size /= 2) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1895: FILE: mm/readahead.c:1311:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+							index + ra_size);

WARNING:TYPO_SPELLING: 'choosed' may be misspelled - perhaps 'chose'?
#1915: FILE: mm/readahead.c:1331:
+ * is not choosed to make the whole next chunk safe(as in normal ones). Only
           ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1921: FILE: mm/readahead.c:1337:
+static inline int adjust_rala_accelerated(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1937: FILE: mm/readahead.c:1353:
+/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1942: FILE: mm/readahead.c:1358:
+try_context_based_readahead(struct address_space *mapping,
+			struct file_ra_state *ra,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1965: FILE: mm/readahead.c:1381:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1967: FILE: mm/readahead.c:1383:
+	ra_size = count_sequential_pages(mapping, refcnt,
+			&remain_pages, index, ra_min, ra_max);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1970: FILE: mm/readahead.c:1386:
+	if (!page)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1972: FILE: mm/readahead.c:1388:
+	else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1973: FILE: mm/readahead.c:1389:
+		ra_index = first_absent_page(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1980: FILE: mm/readahead.c:1396:
+^Iif (readahead_ratio < 80 && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1981: FILE: mm/readahead.c:1397:
+	if (readahead_ratio < 80 && 
+			remain_pages <= la_size && la_size > 1) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2016: FILE: mm/readahead.c:1432:
+		struct file *filp, struct file_ra_state *ra,
 		             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2016: FILE: mm/readahead.c:1432:
+newfile_readahead(struct address_space *mapping,
+		struct file *filp, struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2032: FILE: mm/readahead.c:1448:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2042: FILE: mm/readahead.c:1458:
+try_read_backward(struct file_ra_state *ra,
+			unsigned long first_index, unsigned long last_index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2079: FILE: mm/readahead.c:1495:
+try_random_readahead(struct file_ra_state *ra, unsigned long index,
+			unsigned long ra_size, unsigned long ra_max)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2125: FILE: mm/readahead.c:1541:
+^I*ra_max = min(min(KB(64 + mem_mb*64), KB(2048)), ra->ra_pages); $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2125: FILE: mm/readahead.c:1541:
+	*ra_max = min(min(KB(64 + mem_mb*64), KB(2048)), ra->ra_pages); 
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2126: FILE: mm/readahead.c:1542:
+	*ra_min = min(min(KB(VM_MIN_READAHEAD + mem_mb/16), KB(128)), *ra_max/2);
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2126: FILE: mm/readahead.c:1542:
+	*ra_min = min(min(KB(VM_MIN_READAHEAD + mem_mb/16), KB(128)), *ra_max/2);
 	                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2130: FILE: mm/readahead.c:1546:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2136: FILE: mm/readahead.c:1552:
+ * 2. page != NULL $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2146: FILE: mm/readahead.c:1562:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2146: FILE: mm/readahead.c:1562:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

ERROR:SPACING: space required before the open parenthesis '('
#2157: FILE: mm/readahead.c:1573:
+		if(!TestClearPageReadahead(page))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2181: FILE: mm/readahead.c:1597:
+		return newfile_readahead(mapping, filp, ra, last_index, ra_min);
 		                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2187: FILE: mm/readahead.c:1603:
+	if ((readahead_ratio % 5) == 0 &&
+		index == ra->lookahead_index &&

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2191: FILE: mm/readahead.c:1607:
+		return state_based_readahead(mapping, filp, ra, page, ra_max);
 		                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2197: FILE: mm/readahead.c:1613:
+		return ra_dispatch(ra, mapping, filp);
 		                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2199: FILE: mm/readahead.c:1615:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2201: FILE: mm/readahead.c:1617:
+^I */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2205: FILE: mm/readahead.c:1621:
+	ret = try_context_based_readahead(mapping, ra, prev_page, page,
+						index, ra_min, ra_max);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2207: FILE: mm/readahead.c:1623:
+		return ra_dispatch(ra, mapping, filp);
 		                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2219: FILE: mm/readahead.c:1635:
+		return ra_dispatch(ra, mapping, filp);
 		                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2228: FILE: mm/readahead.c:1644:
+	size = __do_page_cache_readahead(mapping, filp, index, size, 0);
 	                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2234: FILE: mm/readahead.c:1650:
+	dprintk("readrandom(ino=%lu, pages=%lu, index=%lu-%lu-%lu) = %lu\n",
+			mapping->host->i_ino, mapping->nrpages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2259: FILE: mm/readahead.c:1675:
+		ra_account(pgreadahead_hit,
+			(ra->flags >> RA_CLASS_SHIFT) & RA_CLASS_MASK, 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2264: FILE: mm/readahead.c:1680:
+ * $

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#2265: FILE: mm/readahead.c:1681:
+ * The safty guarantee provided by this function is only needed in file servers
        ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2296: FILE: mm/readahead.c:1712:
+ * over and eligible for free. $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2364: FILE: mm/readahead.c:1780:
+	if (mapping && !PageSwapCache(page) &&
+			!page_mapped(page) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2379: FILE: mm/readahead.c:1795:
+int save_chunk(struct page *head, struct page *tail,
+		struct list_head *save_list)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2414: FILE: mm/readahead.c:1830:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+								--index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2424: FILE: mm/readahead.c:1840:
+			if (i > mapping->backing_dev_info->ra_pages &&
+					index != head->index - 1 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2439: FILE: mm/readahead.c:1855:
+		if ((index & 63) == 63 && !__page_refcnt(head) &&
+				i > mapping->backing_dev_info->ra_pages &&

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_chunk', this function's name, in a string
#2501: FILE: mm/readahead.c:1917:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu-%lu, %s@%s:%s)"

WARNING:SPLIT_STRING: quoted string split across lines
#2502: FILE: mm/readahead.c:1918:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu-%lu, %s@%s:%s)"
+				" %s, save %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2534: FILE: mm/swap.c:128:
+	if (!PageActive(page) && !PageActivate(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2535: FILE: mm/swap.c:129:
+		if (readahead_ratio > 9 || (readahead_ratio & 1)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2538: FILE: mm/swap.c:132:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2567: FILE: mm/vmscan.c:387:
+^Iif (readahead_ratio >= 80) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2633: FILE: mm/vmscan.c:1088:
+						begin_zone = end_zone = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2653: FILE: mm/vmscan.c:1105:
+		while (end_zone < pgdat->nr_zones - 1 &&
+			pages_more_aged(pgdat->node_zones + end_zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2657: FILE: mm/vmscan.c:1109:
+		while (begin_zone &&
+			pages_more_aged(pgdat->node_zones + begin_zone,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143389.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 66 warnings, 75 checks, 2378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143389.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
