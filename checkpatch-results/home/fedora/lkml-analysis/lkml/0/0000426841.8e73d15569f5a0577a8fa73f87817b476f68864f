WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: mm/slab.c:12:
+ * ^I(c) 2002 Manfred Spraul$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: mm/slab.c:49:
+ * The c_cpuarray may not be read with enabled local interrupts - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#145: FILE: mm/slab.c:108:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: mm/slab.c:200:
+	void * entries[BOOT_CPUCACHE_ENTRIES];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: mm/slab.c:209:
+ * ^Iuse the alternate cpudata cache if wrong$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/slab.c:216:
+ * They provide some aging, and hopefully reduce the $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#218: FILE: mm/slab.c:230:
+#define LIST3_INIT(parent) \
+	{ \
+		.slabs_full	= LIST_HEAD_INIT(parent.slabs_full), \
+		.slabs_partial	= LIST_HEAD_INIT(parent.slabs_partial), \
+		.slabs_free	= LIST_HEAD_INIT(parent.slabs_free) \
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: mm/slab.c:248:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: mm/slab.c:309:
+/* Optimization question: fewer reaps means less $

WARNING:TYPO_SPELLING: 'OTHO' may be misspelled - perhaps 'OTOH'?
#322: FILE: mm/slab.c:312:
+ * OTHO the cpuarrays can contain lots of objects,
    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#325: FILE: mm/slab.c:315:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#326: FILE: mm/slab.c:316:
+#define REAPTIMEOUT_LIST3	(4*HZ)
                          	  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#334: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#334: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#334: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#395: FILE: mm/slab.c:468:
+static kmem_cache_t *clock_searchp[NR_CPUS] = { [0 ... NR_CPUS -1] = &cache_cache};
                                                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: mm/slab.c:489:
+static void cache_estimate (unsigned long gfporder, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/slab.c:490:
+static void cache_estimate (unsigned long gfporder, size_t size,
 		 int flags, size_t *left_over, unsigned int *num)

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: mm/slab.c:520:
+	int cpu = smp_processor_id();
+	if (reap_timer[cpu].function == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#434: FILE: mm/slab.c:521:
+		printk(KERN_INFO "slab: reap timer started for cpu %d.\n", cpu);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#436: FILE: mm/slab.c:523:
+		reap_timer[cpu].expires = jiffies + HZ + 3*cpu;
 		                                          ^

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#445: FILE: mm/slab.c:532:
+	void (*fnc)(void*arg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#456: FILE: mm/slab.c:543:
+	BUG_ON(smp_processor_id() != info->cpu);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: mm/slab.c:553:
+	struct cpucall_info *info;
+	info = kmalloc(sizeof(*info), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#468: FILE: mm/slab.c:555:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#468: FILE: mm/slab.c:555:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: mm/slab.c:556:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",
+				cpu, fnc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#476: FILE: mm/slab.c:563:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#476: FILE: mm/slab.c:563:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: mm/slab.c:564:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",
+				cpu, fnc);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: mm/slab.c:569:
+}
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: mm/slab.c:570:
+ * CPU HOTPLUG: $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#489: FILE: mm/slab.c:576:
+static int __devinit cpuup_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: mm/slab.c:577:
+static int __devinit cpuup_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: mm/slab.c:581:
+	int cpu = (int)hcpu;
+	if (action == CPU_ONLINE) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#504: FILE: mm/slab.c:591:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: mm/slab.c:592:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#505: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#505: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: mm/slab.c:629:
+	cache_estimate(0, cache_cache.objsize, 0,
 			&left_over, &cache_cache.num);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#577: FILE: mm/slab.c:691:
+		void * ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: mm/slab.c:692:
+^I^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#579: FILE: mm/slab.c:693:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#581: FILE: mm/slab.c:695:
+		BUG_ON(cc_data(&cache_cache) != &cpuarray_cache.cache);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: mm/slab.c:699:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#586: FILE: mm/slab.c:700:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#588: FILE: mm/slab.c:702:
+		BUG_ON(cc_data(cache_sizes[0].cs_cachep) != &cpuarray_generic.cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: mm/slab.c:704:
+		memcpy(ptr, cc_data(cache_sizes[0].cs_cachep),
+				sizeof(struct cpucache_int));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#603: FILE: mm/slab.c:712:
+	struct list_head* p;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#611: FILE: mm/slab.c:720:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: mm/slab.c:721:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+		enable_cpucache(cachep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: mm/slab.c:724:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: mm/slab.c:725:
+^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#621: FILE: mm/slab.c:730:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#621: FILE: mm/slab.c:730:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#621: FILE: mm/slab.c:730:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#621: FILE: mm/slab.c:730:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#621: FILE: mm/slab.c:730:
+	for (i=0;i<NR_CPUS;i++) {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#631: FILE: mm/slab.c:739:
+__initcall(cpucache_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#640: FILE: mm/slab.c:783:
+static void poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#649: FILE: mm/slab.c:794:
+static int check_poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#658: FILE: mm/slab.c:813:
+static void slab_destroy (kmem_cache_t *cachep, slab_t *slabp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#666: FILE: mm/slab.c:817:
+	int i;
+	for (i = 0; i < cachep->num; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#667: FILE: mm/slab.c:818:
+		void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#667: FILE: mm/slab.c:818:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#667: FILE: mm/slab.c:818:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#668: FILE: mm/slab.c:819:
+		void* objp = slabp->s_mem+cachep->objsize*i;
+		if (cachep->flags & SLAB_POISON)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#672: FILE: mm/slab.c:823:
+			if (*((unsigned long*)(objp)) != RED_MAGIC1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#673: FILE: mm/slab.c:824:
+				BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#674: FILE: mm/slab.c:825:
+			if (*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: mm/slab.c:827:
+				BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#680: FILE: mm/slab.c:831:
+			(cachep->dtor)(objp, cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#707: FILE: mm/slab.c:838:
+			(cachep->dtor)(objp, cachep, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: mm/slab.c:842:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#722: FILE: mm/slab.c:929:
+	BUG_ON(flags & ~CREATE_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: mm/slab.c:986:
+		cache_estimate(cachep->gfporder, size, flags,
 						&left_over, &cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#785: FILE: mm/slab.c:1066:
+			cc_data(cachep) = kmalloc(sizeof(struct cpucache_int),GFP_KERNEL);
 			                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#787: FILE: mm/slab.c:1068:
+		BUG_ON(!cc_data(cachep));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#794: FILE: mm/slab.c:1075:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#794: FILE: mm/slab.c:1075:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 		                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#794: FILE: mm/slab.c:1075:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: mm/slab.c:1076:
+^I} $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#798: FILE: mm/slab.c:1079:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#848: FILE: mm/slab.c:1124:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#879: FILE: mm/slab.c:1131:
+	BUG_ON(irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#915: FILE: mm/slab.c:1139:
+	BUG_ON(spin_trylock(&cachep->spinlock));

ERROR:SPACING: space required before the open parenthesis '('
#933: FILE: mm/slab.c:1154:
+	for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: mm/slab.c:1162:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#969: FILE: mm/slab.c:1185:
+	BUG_ON(!cachep || in_interrupt());

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: mm/slab.c:1208:
+	int i;
+	BUG_ON(!cachep || in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#983: FILE: mm/slab.c:1208:
+	BUG_ON(!cachep || in_interrupt());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#992: FILE: mm/slab.c:1214:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#992: FILE: mm/slab.c:1214:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#992: FILE: mm/slab.c:1214:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#992: FILE: mm/slab.c:1214:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#992: FILE: mm/slab.c:1214:
+	for (i=0;i<NR_CPUS;i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: mm/slab.c:1217:
+			clock_searchp[i] = list_entry(cachep->next.next,
+							kmem_cache_t, next);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1028: FILE: mm/slab.c:1246:
+static inline slab_t * alloc_slabmgmt (kmem_cache_t *cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1028: FILE: mm/slab.c:1246:
+static inline slab_t * alloc_slabmgmt (kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: mm/slab.c:1247:
+static inline slab_t * alloc_slabmgmt (kmem_cache_t *cachep,
 			void *objp, int colour_off, int local_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1048: FILE: mm/slab.c:1268:
+static inline void cache_init_objs (kmem_cache_t * cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1048: FILE: mm/slab.c:1268:
+static inline void cache_init_objs (kmem_cache_t * cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: mm/slab.c:1269:
+static inline void cache_init_objs (kmem_cache_t * cachep,
 			slab_t * slabp, unsigned long ctor_flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1111: FILE: mm/slab.c:1315:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: mm/slab.c:1318:
+			BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1124: FILE: mm/slab.c:1327:
+static int cache_grow (kmem_cache_t * cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1124: FILE: mm/slab.c:1327:
+static int cache_grow (kmem_cache_t * cachep, int flags)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1197: FILE: mm/slab.c:1383:
+	if (!(slabp = alloc_slabmgmt(cachep, objp, offset, local_flags)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1257: FILE: mm/slab.c:1428:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1258: FILE: mm/slab.c:1429:
+^I^I^I(unsigned long)objp);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1258: FILE: mm/slab.c:1429:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",
+			(unsigned long)objp);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: mm/slab.c:1430:
+^I^IBUG();^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: mm/slab.c:1430:
+		BUG();	

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1263: FILE: mm/slab.c:1434:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n", (unsigned long)objp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1272: FILE: mm/slab.c:1437:
+#endif $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1277: FILE: mm/slab.c:1440:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1277: FILE: mm/slab.c:1440:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1277: FILE: mm/slab.c:1440:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1289: FILE: mm/slab.c:1450:
+	BUG_ON(GET_PAGE_CACHE(page) != cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1299: FILE: mm/slab.c:1458:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1305: FILE: mm/slab.c:1464:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1305: FILE: mm/slab.c:1464:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1307: FILE: mm/slab.c:1466:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1308: FILE: mm/slab.c:1467:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1308: FILE: mm/slab.c:1467:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1315: FILE: mm/slab.c:1474:
+		cachep->ctor(objp, cachep, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 		                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1323: FILE: mm/slab.c:1482:
+	if (cachep->flags & SLAB_POISON) {
+		poison_obj(cachep, objp);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1335: FILE: mm/slab.c:1494:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1340: FILE: mm/slab.c:1499:
+		BUG_ON(entries > cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1342: FILE: mm/slab.c:1501:
+	BUG_ON(entries != cachep->num - slabp->inuse);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1347: FILE: mm/slab.c:1505:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1347: FILE: mm/slab.c:1505:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: mm/slab.c:1506:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,
 						slab_t *slabp)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1370: FILE: mm/slab.c:1527:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1377: FILE: mm/slab.c:1534:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1377: FILE: mm/slab.c:1534:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1396: FILE: mm/slab.c:1553:
+	BUG_ON(cc->avail > 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1425: FILE: mm/slab.c:1582:
+		int x;
+		x = cache_grow(cachep, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1426: FILE: mm/slab.c:1583:
+^I^I$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1427: FILE: mm/slab.c:1584:
+		// cache_grow can reenable interrupts, then cc could change.
 		                  ^^^^^^^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1446: FILE: mm/slab.c:1603:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1446: FILE: mm/slab.c:1603:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1449: FILE: mm/slab.c:1606:
+^Iif (!objp)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1468: FILE: mm/slab.c:1627:
+^I^I}^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1536: FILE: mm/slab.c:1634:
+static inline void * __cache_alloc (kmem_cache_t *cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1536: FILE: mm/slab.c:1634:
+static inline void * __cache_alloc (kmem_cache_t *cachep, int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1605: FILE: mm/slab.c:1657:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1635: FILE: mm/slab.c:1662:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1635: FILE: mm/slab.c:1662:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1635: FILE: mm/slab.c:1662:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1660: FILE: mm/slab.c:1670:
+		slab_t* slabp;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1683: FILE: mm/slab.c:1676:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1683: FILE: mm/slab.c:1676:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: mm/slab.c:1690:
+				list_add(&slabp->list,
+						&list3_data_ptr(cachep, objp)->slabs_free);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1731: FILE: mm/slab.c:1703:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1731: FILE: mm/slab.c:1703:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1739: FILE: mm/slab.c:1708:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1739: FILE: mm/slab.c:1708:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1749: FILE: mm/slab.c:1714:
+	BUG_ON(!batchcount || batchcount > cc->avail);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1765: FILE: mm/slab.c:1730:
+			BUG_ON(slabp->inuse);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: mm/slab.c:1741:
+	memmove(&cc_entry(cc)[0], &cc_entry(cc)[batchcount],
+			sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1776: FILE: mm/slab.c:1741:
+			sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1776: FILE: mm/slab.c:1741:
+			sizeof(void*)*cc->avail);
 			             ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1789: FILE: mm/slab.c:1751:
+static inline void __cache_free (kmem_cache_t *cachep, void* objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1789: FILE: mm/slab.c:1751:
+static inline void __cache_free (kmem_cache_t *cachep, void* objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1845: FILE: mm/slab.c:1815:
+		BUG_ON(csizep->cs_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#1845: FILE: mm/slab.c:1815:
+		BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1875: FILE: mm/slab.c:1857:
+	__cache_free(c, (void*)objp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1895: FILE: mm/slab.c:1897:
+		BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1904: FILE: mm/slab.c:1902:
+	kmem_cache_t *cachep = (kmem_cache_t*)arg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1929: FILE: mm/slab.c:1916:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1942: FILE: mm/slab.c:1929:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1947: FILE: mm/slab.c:1934:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1948: FILE: mm/slab.c:1935:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1948: FILE: mm/slab.c:1935:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1967: FILE: mm/slab.c:1941:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1968: FILE: mm/slab.c:1942:
+		cpucache_t* ccnew;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1970: FILE: mm/slab.c:1944:
+		ccnew = kmalloc(sizeof(void*)*limit+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1970: FILE: mm/slab.c:1944:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1970: FILE: mm/slab.c:1944:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1973: FILE: mm/slab.c:1947:
+			for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1985: FILE: mm/slab.c:1959:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1990: FILE: mm/slab.c:1964:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1990: FILE: mm/slab.c:1964:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 	                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1990: FILE: mm/slab.c:1964:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2012: FILE: mm/slab.c:1979:
 
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2035: FILE: mm/slab.c:1994:
+	err = do_tune_cpucache(cachep, limit, limit/2);
 	                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2073: FILE: mm/slab.c:2010:
+static inline void cache_reap (void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2090: FILE: mm/slab.c:2016:
+	BUG_ON(!in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2091: FILE: mm/slab.c:2017:
+	BUG_ON(in_irq());

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2095: FILE: mm/slab.c:2021:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2095: FILE: mm/slab.c:2021:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2095: FILE: mm/slab.c:2021:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2126: FILE: mm/slab.c:2039:
+			tofree = (cc->limit+4)/5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2126: FILE: mm/slab.c:2039:
+			tofree = (cc->limit+4)/5;
 			                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2127: FILE: mm/slab.c:2040:
+			if (tofree > cc->avail) {
+				tofree = (cc->avail+1)/2;
+			}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2128: FILE: mm/slab.c:2041:
+				tofree = (cc->avail+1)/2;
 				                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2128: FILE: mm/slab.c:2041:
+				tofree = (cc->avail+1)/2;
 				                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2133: FILE: mm/slab.c:2046:
+			memmove(&cc_entry(cc)[0], &cc_entry(cc)[tofree],
+					sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2133: FILE: mm/slab.c:2046:
+					sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2133: FILE: mm/slab.c:2046:
+					sizeof(void*)*cc->avail);
 					             ^

ERROR:SPACING: space required before the open parenthesis '('
#2135: FILE: mm/slab.c:2048:
+		if(time_after(searchp->lists.next_reap, jiffies))

ERROR:SPACING: space required before the open parenthesis '('
#2139: FILE: mm/slab.c:2052:
+		if(time_after(searchp->lists.next_reap, jiffies)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2139: FILE: mm/slab.c:2052:
+		if(time_after(searchp->lists.next_reap, jiffies)) {
 			goto next_unlock;
 		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2159: FILE: mm/slab.c:2061:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2159: FILE: mm/slab.c:2061:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2159: FILE: mm/slab.c:2061:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2159: FILE: mm/slab.c:2061:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2159: FILE: mm/slab.c:2061:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2173: FILE: mm/slab.c:2068:
+			BUG_ON(slabp->inuse);

ERROR:SPACING: space required before the open parenthesis '('
#2206: FILE: mm/slab.c:2081:
+		} while(--tofree > 0);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2262: FILE: mm/slab.c:2099:
+	reap_timer[smp_processor_id()].expires = jiffies + REAPTIMEOUT_CPUC/REAP_SCANLEN;
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2288: FILE: mm/slab.c:2165:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2288: FILE: mm/slab.c:2165:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2292: FILE: mm/slab.c:2167:
+		BUG_ON(slabp->inuse != cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2297: FILE: mm/slab.c:2171:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2297: FILE: mm/slab.c:2171:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2300: FILE: mm/slab.c:2173:
+		BUG_ON(slabp->inuse == cachep->num || slabp->inuse == 0);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2305: FILE: mm/slab.c:2177:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2305: FILE: mm/slab.c:2177:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2309: FILE: mm/slab.c:2179:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2314: FILE: mm/slab.c:2184:
+	BUG_ON(num_objs - active_objs != cachep->lists.free_objects);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2351: FILE: mm/slab.c:2214:
+^I^I^I^Ihigh, allocs, grown, reaped, errors, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2351: FILE: mm/slab.c:2214:
+		seq_printf(m, " : %6lu %7lu %5lu %4lu %4lu %4lu %4lu",
+				high, allocs, grown, reaped, errors, 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 76 errors, 81 warnings, 68 checks, 2276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
