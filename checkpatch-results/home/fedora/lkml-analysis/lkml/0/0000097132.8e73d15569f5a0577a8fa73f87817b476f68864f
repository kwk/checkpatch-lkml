WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: drivers/char/raw.c:256:
+^I.aio_write = ^Igeneric_file_aio_write_nolock,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: fs/block_dev.c:794:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: fs/block_dev.c:794:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/block_dev.c:794:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: fs/nfs/file.c:44:
+static ssize_t nfs_file_read(struct kiocb *, const struct iovec *,
+		unsigned long, loff_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: fs/nfs/file.c:46:
+static ssize_t nfs_file_write(struct kiocb *, const struct iovec *,
+		unsigned long, loff_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/nfs/file.c:219:
+nfs_file_read(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: fs/nfs/file.c:231:
+	dfprintk(VFS, "nfs: read(%s/%s)\n",
+		dentry->d_parent->d_name.name, dentry->d_name.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/nfs/file.c:339:
+nfs_file_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: fs/nfs/file.c:351:
+	dfprintk(VFS, "nfs: write(%s/%s(%ld))\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#446: FILE: fs/xfs/linux-2.6/xfs_file.c:89:
+	return __linvfs_read(iocb, iov, nr_segs, IO_ISAIO|IO_INVIS, pos);
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#500: FILE: fs/xfs/linux-2.6/xfs_file.c:132:
+	return __linvfs_write(iocb, iov, nr_segs, IO_ISAIO|IO_INVIS, pos);
 	                                                  ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#515: FILE: include/linux/fs.h:1003:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#515: FILE: include/linux/fs.h:1003:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#515: FILE: include/linux/fs.h:1003:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#515: FILE: include/linux/fs.h:1003:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#515: FILE: include/linux/fs.h:1003:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#516: FILE: include/linux/fs.h:1004:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#516: FILE: include/linux/fs.h:1004:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#516: FILE: include/linux/fs.h:1004:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#516: FILE: include/linux/fs.h:1004:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#516: FILE: include/linux/fs.h:1004:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/fs.h:1564:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#525: FILE: include/linux/fs.h:1564:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#525: FILE: include/linux/fs.h:1564:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#525: FILE: include/linux/fs.h:1564:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#525: FILE: include/linux/fs.h:1564:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: include/linux/fs.h:1566:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#528: FILE: include/linux/fs.h:1566:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#528: FILE: include/linux/fs.h:1566:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#528: FILE: include/linux/fs.h:1566:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#528: FILE: include/linux/fs.h:1566:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: mm/filemap.c:1069:
+generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: mm/filemap.c:2135:
+ssize_t generic_file_aio_write_nolock(struct kiocb *iocb,
+		const struct iovec *iov, unsigned long nr_segs, loff_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#588: FILE: mm/filemap.c:2142:
+	BUG_ON(iocb->ki_pos != pos);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mm/filemap.c:2191:
+ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: net/socket.c:102:
+static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
+			 unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: net/socket.c:104:
+static ssize_t sock_aio_write(struct kiocb *iocb, const struct iovec *iov,
+			  unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: net/socket.c:713:
+static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
+			 unsigned long nr_segs, loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#726: FILE: net/socket.c:723:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: net/socket.c:772:
+static ssize_t sock_aio_write(struct kiocb *iocb, const struct iovec *iov,
+			  unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: fs/nfs/direct.c:678:
+nfs_file_direct_read(struct kiocb *iocb, const struct iovec *iov,
+			unsigned long nr_segs, loff_t pos)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#835: FILE: fs/nfs/direct.c:688:
+	dprintk("nfs: direct read(%s/%s, @%Ld)\n",

CHECK:SPACING: No space is necessary after a cast
#839: FILE: fs/nfs/direct.c:691:
+		(long long) pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: fs/nfs/direct.c:739:
+nfs_file_direct_write(struct kiocb *iocb, const struct iovec *iov,
+			unsigned long nr_segs, loff_t pos)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#884: FILE: fs/nfs/direct.c:749:
+	dfprintk(VFS, "nfs: direct write(%s/%s, @%Ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: fs/nfs/direct.c:750:
+	dfprintk(VFS, "nfs: direct write(%s/%s, @%Ld)\n",
 		file->f_dentry->d_parent->d_name.name,

CHECK:SPACING: No space is necessary after a cast
#888: FILE: fs/nfs/direct.c:752:
+		(long long) pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#937: FILE: include/linux/nfs_fs.h:372:
+extern ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#937: FILE: include/linux/nfs_fs.h:372:
+extern ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: include/linux/nfs_fs.h:373:
+extern ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *,
+			unsigned long nr_segs, loff_t pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: include/linux/nfs_fs.h:374:
+extern ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#939: FILE: include/linux/nfs_fs.h:374:
+extern ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: include/linux/nfs_fs.h:375:
+extern ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *,
+			unsigned long nr_segs, loff_t pos);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#953: FILE: drivers/usb/gadget/inode.c:532:
+^Istruct iovec ^I^I*iv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#954: FILE: drivers/usb/gadget/inode.c:533:
+^Iunsigned long ^I^Icount;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#975: FILE: drivers/usb/gadget/inode.c:568:
+	for (i=0; i < priv->count; i++) {
 	      ^

WARNING:MINMAX: min() should probably be min_t(size_t, priv->iv[i].iov_len, total)
#976: FILE: drivers/usb/gadget/inode.c:569:
+		ssize_t this = min(priv->iv[i].iov_len, (size_t)total);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1004: FILE: drivers/usb/gadget/inode.c:635:
+^Iunsigned long ^Icount$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: drivers/usb/gadget/inode.c:697:
+ep_aio_read(struct kiocb *iocb, const struct iovec *iv,
+		unsigned long count, loff_t o)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1048: FILE: drivers/usb/gadget/inode.c:718:
+ep_aio_write(struct kiocb *iocb, const struct iovec *iv,
+		unsigned long count, loff_t o)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1067: FILE: drivers/usb/gadget/inode.c:733:
+	for (i=0; i < count; i++) {
 	      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: drivers/usb/gadget/inode.c:735:
+		if (unlikely(copy_from_user(&buf[len], iv[i]->iov_base,
+				iv[i]->iov_len) != 0)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 30 warnings, 30 checks, 923 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
