WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#73: 
> > diff --exclude=CVS -urN linux-2.5.orig/drivers/base/Makefile linux-2.5.mine/drivers/base/Makefile

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#185: 
		lots of formating changes.
		        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: drivers/base/base.h:9:
+	return container_of(obj,struct class_device,kobj);
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: drivers/base/base.h:9:
+	return container_of(obj,struct class_device,kobj);
 	                                           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#247: FILE: drivers/base/base.h:11:
+}
+static inline

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: drivers/base/base.h:14:
+	return container_of(_attr,struct class_device_attribute,attr);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: drivers/base/base.h:14:
+	return container_of(_attr,struct class_device_attribute,attr);
 	                                                       ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#275: FILE: drivers/base/Kconfig.lib:5:
+config FW_LOADER
+	tristate "Hotplug firmware loading support"
+	---help---
+	  This option is provided for the case where no in-kernel-tree modules
+	  require hotplug firmware loading support, but a module built outside
+	  the kernel tree does.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#282: FILE: drivers/base/Kconfig.lib:12:
+config FW_LOADER_SAMPLE
+	tristate "Hotplug firmware loading samples"
+	---help---
+	  This should not get in the kernel, it is just here to make playing
+	  with firmware loading easier.
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#308: FILE: include/linux/sysfs.h:26:
+int sysfs_create_bin_file(struct kobject * kobj, struct bin_attribute * attr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#308: FILE: include/linux/sysfs.h:26:
+int sysfs_create_bin_file(struct kobject * kobj, struct bin_attribute * attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: include/linux/sysfs.h:27:
+int sysfs_remove_bin_file(struct kobject * kobj, struct bin_attribute * attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: include/linux/sysfs.h:27:
+int sysfs_remove_bin_file(struct kobject * kobj, struct bin_attribute * attr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#366: FILE: drivers/base/firmware_class.c:39:
 }
+static ssize_t

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#419: FILE: drivers/base/firmware_class.c:80:
 }
+static ssize_t

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#471: FILE: drivers/base/firmware_class.c:131:
 }
+static int

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#485: FILE: drivers/base/firmware_class.c:141:
+		printk(KERN_ERR "%s: unable to alloc buffer\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#485: FILE: drivers/base/firmware_class.c:141:
+	if (!new_data) {
+		printk(KERN_ERR "%s: unable to alloc buffer\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#485: FILE: drivers/base/firmware_class.c:141:
+		printk(KERN_ERR "%s: unable to alloc buffer\n", __FUNCTION__);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#503: FILE: drivers/base/firmware_class.c:155:
 }
+static ssize_t

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#535: FILE: drivers/base/firmware_class.c:183:
 };
+static void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#547: FILE: drivers/base/firmware_class.c:191:
 }
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#558: FILE: drivers/base/firmware_class.c:198:
 }
+static int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: drivers/base/firmware_class.c:203:
+	struct firmware_priv *fw_priv = kmalloc(sizeof (struct firmware_priv),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_priv)...) over kmalloc(sizeof (struct firmware_priv)...)
#564: FILE: drivers/base/firmware_class.c:203:
+	struct firmware_priv *fw_priv = kmalloc(sizeof (struct firmware_priv),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#574: FILE: drivers/base/firmware_class.c:210:
+	memset(fw_priv, 0, sizeof (*fw_priv));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#575: FILE: drivers/base/firmware_class.c:211:
+	memset(class_dev, 0, sizeof (*class_dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#580: FILE: drivers/base/firmware_class.c:215:
+	       sizeof (firmware_attr_data_tmpl));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#624: FILE: drivers/base/firmware_class.c:251:
+	fw_priv->fw = kmalloc(sizeof (struct firmware), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_priv->fw)...) over kmalloc(sizeof (struct firmware)...)
#624: FILE: drivers/base/firmware_class.c:251:
+	fw_priv->fw = kmalloc(sizeof (struct firmware), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#632: FILE: drivers/base/firmware_class.c:258:
+	memset(fw_priv->fw, 0, sizeof (*fw_priv->fw));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#645: FILE: drivers/base/firmware_class.c:273:
 }
+static void

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#661: FILE: drivers/base/firmware_class.c:287:
+	struct class_device *class_dev = kmalloc(sizeof (struct class_device),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*class_dev)...) over kmalloc(sizeof (struct class_device)...)
#661: FILE: drivers/base/firmware_class.c:287:
+	struct class_device *class_dev = kmalloc(sizeof (struct class_device),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#745: FILE: drivers/base/firmware_class.c:372:
+request_firmware_nowait(

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: drivers/base/firmware_class.c:377:
+	struct firmware_work *fw_work = kmalloc(sizeof (struct firmware_work),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_work)...) over kmalloc(sizeof (struct firmware_work)...)
#751: FILE: drivers/base/firmware_class.c:377:
+	struct firmware_work *fw_work = kmalloc(sizeof (struct firmware_work),

WARNING:BRACES: braces {} are not necessary for single statement blocks
#783: FILE: drivers/base/firmware_class.c:404:
+	if (error) {
+		printk(KERN_ERR "%s: class_register failed\n", __FUNCTION__);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#784: FILE: drivers/base/firmware_class.c:405:
+		printk(KERN_ERR "%s: class_register failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#784: FILE: drivers/base/firmware_class.c:405:
+		printk(KERN_ERR "%s: class_register failed\n", __FUNCTION__);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#798: FILE: drivers/base/firmware_class.c:416:
 }
+static void __exit

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 19 warnings, 15 checks, 573 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
