CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#29: 
On Tue, 7 September 2004 13:09:13 +0200, Jörn Engel wrote:
                                          ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#38: 
Jörn
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#51: 
Signed-off-by: Jörn Engel <joern@wohnheim.fh-wedel.de>
                ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#69: FILE: fs/read_write.c:569:
+ssize_t inline __vfs_sendfile(struct file *in_file, loff_t *ppos, size_t count,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: fs/read_write.c:570:
+ssize_t inline __vfs_sendfile(struct file *in_file, loff_t *ppos, size_t count,
+		read_actor_t actor, struct file *out_file)

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: fs/read_write.c:573:
+	ssize_t done = 0, ret;
+	while (count) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(size_t, count, 4096)
#74: FILE: fs/read_write.c:574:
+		size_t n = min(count, (size_t)4096);

WARNING:LINE_SPACING: Missing a blank line after declarations
#75: FILE: fs/read_write.c:575:
+		size_t n = min(count, (size_t)4096);
+		ret = in_file->f_op->sendfile(in_file, ppos, n, actor,out_file);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#75: FILE: fs/read_write.c:575:
+		ret = in_file->f_op->sendfile(in_file, ppos, n, actor,out_file);
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#86: FILE: fs/read_write.c:586:
+		if ((ret == 0) || signal_pending(current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 3 warnings, 5 checks, 43 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
