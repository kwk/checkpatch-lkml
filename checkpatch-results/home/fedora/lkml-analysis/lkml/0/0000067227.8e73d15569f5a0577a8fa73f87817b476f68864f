WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:49:
+ * ^I1) append a copy of the verbs reply message$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:50:
+ * ^I2) mark that the reply is ready$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:51:
+ * ^I3) wake up the kernel verbs handler blocked awaiting the reply.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:54:
+ * The kernel verbs handlers do a "get" to put a 2nd reference on the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:61:
+ * kernel verb handler that is blocked awaiting the verb reply.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:63:
+ * NOTE:  If we guarantee that the kernel verb handler will never bail before $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:67:
+ * VQ Request objects are freed by the kernel verbs handlers only $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:69:
+ * does not reply.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:74:
+ * VQ Reply bufs are local host memory copies of a $

CHECK:SPACING: No space is necessary after a cast
#127: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:85:
+		(char) ('0' + c2dev->devnum));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#131: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:89:
+	if (c2dev->host_msg_cache == NULL) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c2dev->host_msg_cache"
#131: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:89:
+	if (c2dev->host_msg_cache == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*r)...) over kmalloc(sizeof(struct c2_vq_req)...)
#149: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:107:
+	r = kmalloc(sizeof(struct c2_vq_req), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#152: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:110:
+		r->reply_msg = (u64) NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#162: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:120:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#168: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:126:
+	r->reply_msg = (u64) NULL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#169: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:127:
+	if (atomic_dec_and_test(&r->refcnt)) {
+		kfree(r);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:132:
+/* vq_req_get - reference a VQ Request Object.  Done $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#182: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:140:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:143:
+ * This is only called by handle_vq() on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:145:
+ * a verb reply message.  If the associated $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:147:
+ * then this put will actually free the VQ $

CHECK:SPACING: No space is necessary after a cast
#196: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:154:
+		if (r->reply_msg != (u64) NULL)

CHECK:SPACING: No space is necessary after a cast
#198: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:156:
+				       (void *) (unsigned long) r->reply_msg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:161:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:174:
+ * When the adapter drains the Verbs Request Queue, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:195:
+^I * When a messages are available, the int handler will wake_up() $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#240: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:198:
+	while (msg == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:200:
+		pr_debug("%s:%d no available msg in VQ, waiting...\n",
+		       __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#242: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:200:
+		       __FUNCTION__, __LINE__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#248: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:206:
+			if (!c2_mq_full(&c2dev->req_vq)) {
+				break;
+			}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:240:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:242:
+ * vq_wait_for_reply - block until the adapter posts a Verb Reply Message.  $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#290: FILE: drivers/infiniband/hw/amso1100/c2_vq.c:248:
+				60*HZ))
 				  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#309: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:50:
+extern int vq_init(struct c2_dev *c2dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:51:
+extern void vq_term(struct c2_dev *c2dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:53:
+extern struct c2_vq_req *vq_req_alloc(struct c2_dev *c2dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:54:
+extern void vq_req_free(struct c2_dev *c2dev, struct c2_vq_req *req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:55:
+extern void vq_req_get(struct c2_dev *c2dev, struct c2_vq_req *req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:56:
+extern void vq_req_put(struct c2_dev *c2dev, struct c2_vq_req *req);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:57:
+extern int vq_send_wr(struct c2_dev *c2dev, union c2wr * wr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:57:
+extern int vq_send_wr(struct c2_dev *c2dev, union c2wr * wr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:59:
+extern void *vq_repbuf_alloc(struct c2_dev *c2dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:60:
+extern void vq_repbuf_free(struct c2_dev *c2dev, void *reply);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#370: FILE: drivers/infiniband/hw/amso1100/c2_vq.h:62:
+extern int vq_wait_for_reply(struct c2_dev *c2dev, struct c2_vq_req *req);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000067227.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 10 warnings, 24 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000067227.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
