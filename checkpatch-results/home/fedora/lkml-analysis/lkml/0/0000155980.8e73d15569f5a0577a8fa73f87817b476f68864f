WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
diff -up --recursive 2.6.13-rc5-mm1.clean/fs/sysfs/Makefile 2.6.13-rc5-mm1/fs/sysfs/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/sysfs/sysfs.c:1:
+#include <linux/fs.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: fs/sysfs/sysfs.c:10:
+ char *link_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: fs/sysfs/sysfs.c:11:
+ struct kobject *sl_target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: fs/sysfs/sysfs.c:16:
+ struct sysfs_dirent *sd = dentry->d_fsdata;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#62: FILE: fs/sysfs/sysfs.c:17:
+ struct sysfs_dirent *sd = dentry->d_fsdata;
+ return ((struct kobject *)sd->s_element);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: fs/sysfs/sysfs.c:17:
+ return ((struct kobject *)sd->s_element);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: fs/sysfs/sysfs.c:23:
+	struct sysfs_dirent *sd = dentry->d_fsdata;
+	return ((struct attribute *)sd->s_element);

WARNING:LINE_SPACING: Missing a blank line after declarations
#78: FILE: fs/sysfs/sysfs.c:33:
+		struct sysfs_dirent *sd = dentry->d_fsdata;
+		if (sd->s_type & SYSFS_KOBJ_LINK) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#78: FILE: fs/sysfs/sysfs.c:33:
+		if (sd->s_type & SYSFS_KOBJ_LINK) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: fs/sysfs/sysfs.c:35:
+			struct sysfs_symlink *sl = sd->s_element;
+			kobj = kobject_get(sl->sl_target);

CHECK:BRACES: Unbalanced braces around else statement
#81: FILE: fs/sysfs/sysfs.c:36:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: fs/sysfs/sysfs.c:50:
+		struct sysfs_symlink *sl = sd->s_element;
+		kfree(sl->link_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/sysfs/sysfs.c:60:
+ if (sd) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#105: FILE: fs/sysfs/sysfs.c:60:
+ if (sd) {
+  WARN_ON(!atomic_read(&sd->s_count));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/sysfs/sysfs.c:61:
+  WARN_ON(!atomic_read(&sd->s_count));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/sysfs/sysfs.c:62:
+  atomic_inc(&sd->s_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/sysfs/sysfs.c:63:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: fs/sysfs/sysfs.c:64:
+ return sd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/sysfs/sysfs.c:69:
+ WARN_ON(!atomic_read(&sd->s_count));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: fs/sysfs/sysfs.c:70:
+ if (atomic_dec_and_test(&sd->s_count))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#115: FILE: fs/sysfs/sysfs.c:70:
+ if (atomic_dec_and_test(&sd->s_count))
+  release_sysfs_dirent(sd);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: fs/sysfs/sysfs.c:71:
+  release_sysfs_dirent(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/sysfs/sysfs.c:80:
+ struct inode *inode = dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: fs/sysfs/sysfs.c:81:
+ struct sysfs_dirent *sd = dentry->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/sysfs/sysfs.c:82:
+ struct iattr *sd_iattr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/sysfs/sysfs.c:83:
+ unsigned int ia_valid = iattr->ia_valid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/sysfs/sysfs.c:84:
+ int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/sysfs/sysfs.c:86:
+ if (!sd)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#131: FILE: fs/sysfs/sysfs.c:86:
+ if (!sd)
+  return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/sysfs/sysfs.c:87:
+  return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/sysfs/sysfs.c:89:
+ sd_iattr = sd->s_iattr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/sysfs/sysfs.c:91:
+ error = inode_change_ok(inode, iattr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/sysfs/sysfs.c:92:
+ if (error)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#137: FILE: fs/sysfs/sysfs.c:92:
+ if (error)
+  return error;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/sysfs/sysfs.c:93:
+  return error;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sd_iattr)...) over kmalloc(sizeof(struct iattr)...)
#146: FILE: fs/sysfs/sysfs.c:101:
+		sd_iattr = kmalloc(sizeof(struct iattr), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#154: FILE: fs/sysfs/sysfs.c:109:
+		sd_iattr->ia_atime = sd_iattr->ia_mtime = sd_iattr->ia_ctime =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#159: FILE: fs/sysfs/sysfs.c:114:
+	/* attributes were changed atleast once in past */
 	                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/sysfs/sysfs.c:125:
+          inode->i_sb->s_time_gran);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: fs/sysfs/sysfs.c:125:
+		sd_iattr->ia_mtime = timespec_trunc(iattr->ia_mtime,
+          inode->i_sb->s_time_gran);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/sysfs/sysfs.c:125:
+          inode->i_sb->s_time_gran);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: fs/sysfs/sysfs.c:126:
+ if (ia_valid & ATTR_CTIME)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#171: FILE: fs/sysfs/sysfs.c:126:
+ if (ia_valid & ATTR_CTIME)
+  sd_iattr->ia_ctime = timespec_trunc(iattr->ia_ctime,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: fs/sysfs/sysfs.c:127:
+  sd_iattr->ia_ctime = timespec_trunc(iattr->ia_ctime,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/sysfs/sysfs.c:128:
+          inode->i_sb->s_time_gran);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: fs/sysfs/sysfs.c:128:
+  sd_iattr->ia_ctime = timespec_trunc(iattr->ia_ctime,
+          inode->i_sb->s_time_gran);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: fs/sysfs/sysfs.c:128:
+          inode->i_sb->s_time_gran);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: fs/sysfs/sysfs.c:129:
+ if (ia_valid & ATTR_MODE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#174: FILE: fs/sysfs/sysfs.c:129:
+ if (ia_valid & ATTR_MODE) {
+  umode_t mode = iattr->ia_mode;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/sysfs/sysfs.c:130:
+  umode_t mode = iattr->ia_mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/sysfs/sysfs.c:132:
+  if (!in_group_p(inode->i_gid) && !capable(CAP_FSETID))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#177: FILE: fs/sysfs/sysfs.c:132:
+  if (!in_group_p(inode->i_gid) && !capable(CAP_FSETID))
+   mode &= ~S_ISGID;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/sysfs/sysfs.c:133:
+   mode &= ~S_ISGID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/sysfs/sysfs.c:134:
+  sd_iattr->ia_mode = sd->s_mode = mode;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#179: FILE: fs/sysfs/sysfs.c:134:
+  sd_iattr->ia_mode = sd->s_mode = mode;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/sysfs/sysfs.c:135:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/sysfs/sysfs.c:137:
+ return error;$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#185: FILE: fs/sysfs/sysfs.c:140:
+static struct inode_operations sysfs_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/sysfs/sysfs.c:141:
+ .setattr = sysfs_setattr,$

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#191: FILE: fs/sysfs/sysfs.c:146:
+static struct address_space_operations sysfs_aops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/sysfs/sysfs.c:147:
+ .readpage = simple_readpage,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/sysfs/sysfs.c:148:
+ .prepare_write = simple_prepare_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/sysfs/sysfs.c:149:
+ .commit_write = simple_commit_write$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/sysfs/sysfs.c:153:
+ .ra_pages = 0,  /* No readahead */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/sysfs/sysfs.c:154:
+ .capabilities = BDI_CAP_NO_ACCT_DIRTY | BDI_CAP_NO_WRITEBACK,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/sysfs/sysfs.c:159:
+ struct inode *inode = new_inode(sysfs_sb);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#215: FILE: fs/sysfs/sysfs.c:170:
+			 * in sysfs_dirent */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: fs/sysfs/sysfs.c:172:
+			struct iattr *iattr = sd->s_iattr;
+			inode->i_mode = iattr->ia_mode;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#227: FILE: fs/sysfs/sysfs.c:182:
+			inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/sysfs/sysfs.c:190:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: fs/sysfs/sysfs.c:191:
+ struct inode *inode = NULL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/sysfs/sysfs.c:192:
+ struct inode *inode = NULL;
+ if (dentry) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: fs/sysfs/sysfs.c:192:
+ if (dentry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#237: FILE: fs/sysfs/sysfs.c:192:
+ if (dentry) {
+  if (!dentry->d_inode) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#237: FILE: fs/sysfs/sysfs.c:192:
+ if (dentry) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: fs/sysfs/sysfs.c:193:
+  if (!dentry->d_inode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#238: FILE: fs/sysfs/sysfs.c:193:
+  if (!dentry->d_inode) {
+   struct sysfs_dirent *sd = dentry->d_fsdata;

CHECK:BRACES: braces {} should be used on all arms of this statement
#238: FILE: fs/sysfs/sysfs.c:193:
+  if (!dentry->d_inode) {
[...]
+  } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: fs/sysfs/sysfs.c:194:
+   struct sysfs_dirent *sd = dentry->d_fsdata;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: fs/sysfs/sysfs.c:195:
+   struct sysfs_dirent *sd = dentry->d_fsdata;
+   if ((inode = sysfs_new_inode(mode, sd))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/sysfs/sysfs.c:195:
+   if ((inode = sysfs_new_inode(mode, sd))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#240: FILE: fs/sysfs/sysfs.c:195:
+   if ((inode = sysfs_new_inode(mode, sd))) {
+    if (dentry->d_parent

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#240: FILE: fs/sysfs/sysfs.c:195:
+   if ((inode = sysfs_new_inode(mode, sd))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#240: FILE: fs/sysfs/sysfs.c:195:
+   if ((inode = sysfs_new_inode(mode, sd))) {
[...]
+   } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: fs/sysfs/sysfs.c:196:
+    if (dentry->d_parent$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 5)
#241: FILE: fs/sysfs/sysfs.c:196:
+    if (dentry->d_parent
[...]
+     struct inode *p_inode =

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/sysfs/sysfs.c:197:
+        && dentry->d_parent->d_inode) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#242: FILE: fs/sysfs/sysfs.c:197:
+    if (dentry->d_parent
+        && dentry->d_parent->d_inode) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/sysfs/sysfs.c:197:
+        && dentry->d_parent->d_inode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: fs/sysfs/sysfs.c:198:
+     struct inode *p_inode =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: fs/sysfs/sysfs.c:199:
+         dentry->d_parent->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: fs/sysfs/sysfs.c:199:
+         dentry->d_parent->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: fs/sysfs/sysfs.c:200:
+     p_inode->i_mtime = p_inode->i_ctime =$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#245: FILE: fs/sysfs/sysfs.c:200:
+     p_inode->i_mtime = p_inode->i_ctime =

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: fs/sysfs/sysfs.c:201:
+         CURRENT_TIME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: fs/sysfs/sysfs.c:201:
+         CURRENT_TIME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: fs/sysfs/sysfs.c:202:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: fs/sysfs/sysfs.c:203:
+    goto Proceed;$

CHECK:CAMELCASE: Avoid CamelCase: <Proceed>
#248: FILE: fs/sysfs/sysfs.c:203:
+    goto Proceed;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: fs/sysfs/sysfs.c:204:
+   } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#249: FILE: fs/sysfs/sysfs.c:204:
+   } else
+    error = -ENOMEM;

CHECK:BRACES: Unbalanced braces around else statement
#249: FILE: fs/sysfs/sysfs.c:204:
+   } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: fs/sysfs/sysfs.c:205:
+    error = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: fs/sysfs/sysfs.c:206:
+  } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#251: FILE: fs/sysfs/sysfs.c:206:
+  } else
+   error = -EEXIST;

CHECK:BRACES: Unbalanced braces around else statement
#251: FILE: fs/sysfs/sysfs.c:206:
+  } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: fs/sysfs/sysfs.c:207:
+   error = -EEXIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: fs/sysfs/sysfs.c:208:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#253: FILE: fs/sysfs/sysfs.c:208:
+ } else
+  error = -ENOENT;

CHECK:BRACES: Unbalanced braces around else statement
#253: FILE: fs/sysfs/sysfs.c:208:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: fs/sysfs/sysfs.c:209:
+  error = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: fs/sysfs/sysfs.c:210:
+ goto Done;$

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#255: FILE: fs/sysfs/sysfs.c:210:
+ goto Done;

WARNING:INDENTED_LABEL: labels should not be indented
#257: FILE: fs/sysfs/sysfs.c:212:
+      Proceed:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/sysfs/sysfs.c:213:
+ if (init)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#258: FILE: fs/sysfs/sysfs.c:213:
+ if (init)
+  error = init(inode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: fs/sysfs/sysfs.c:214:
+  error = init(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: fs/sysfs/sysfs.c:215:
+ if (!error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#260: FILE: fs/sysfs/sysfs.c:215:
+ if (!error) {
+  d_instantiate(dentry, inode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#260: FILE: fs/sysfs/sysfs.c:215:
+ if (!error) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: fs/sysfs/sysfs.c:216:
+  d_instantiate(dentry, inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: fs/sysfs/sysfs.c:217:
+  if (S_ISDIR(mode)) /* pin only directory dentry in core */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#262: FILE: fs/sysfs/sysfs.c:217:
+  if (S_ISDIR(mode)) /* pin only directory dentry in core */
+   dget(dentry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: fs/sysfs/sysfs.c:218:
+   dget(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: fs/sysfs/sysfs.c:219:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#264: FILE: fs/sysfs/sysfs.c:219:
+ } else
+  iput(inode);

CHECK:BRACES: Unbalanced braces around else statement
#264: FILE: fs/sysfs/sysfs.c:219:
+ } else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#265: FILE: fs/sysfs/sysfs.c:220:
+  iput(inode);
   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: fs/sysfs/sysfs.c:220:
+  iput(inode);$

WARNING:INDENTED_LABEL: labels should not be indented
#266: FILE: fs/sysfs/sysfs.c:221:
+      Done:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: fs/sysfs/sysfs.c:222:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: fs/sysfs/sysfs.c:230:
+ struct attribute *attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: fs/sysfs/sysfs.c:231:
+ struct bin_attribute *bin_attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: fs/sysfs/sysfs.c:232:
+ struct sysfs_symlink *sl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: fs/sysfs/sysfs.c:234:
+ if (!sd || !sd->s_element)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#279: FILE: fs/sysfs/sysfs.c:234:
+ if (!sd || !sd->s_element)
+  BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: fs/sysfs/sysfs.c:235:
+  BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#280: FILE: fs/sysfs/sysfs.c:235:
+  BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: fs/sysfs/sysfs.c:237:
+ switch (sd->s_type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: fs/sysfs/sysfs.c:238:
+ case SYSFS_DIR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: fs/sysfs/sysfs.c:240:
+  return sd->s_dentry->d_name.name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: fs/sysfs/sysfs.c:242:
+ case SYSFS_KOBJ_ATTR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: fs/sysfs/sysfs.c:243:
+  attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: fs/sysfs/sysfs.c:244:
+  return attr->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: fs/sysfs/sysfs.c:246:
+ case SYSFS_KOBJ_BIN_ATTR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: fs/sysfs/sysfs.c:247:
+  bin_attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: fs/sysfs/sysfs.c:248:
+  return bin_attr->attr.name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: fs/sysfs/sysfs.c:250:
+ case SYSFS_KOBJ_LINK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: fs/sysfs/sysfs.c:251:
+  sl = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: fs/sysfs/sysfs.c:252:
+  return sl->link_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: fs/sysfs/sysfs.c:253:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: fs/sysfs/sysfs.c:254:
+ return NULL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: fs/sysfs/sysfs.c:308:
+	int depth = 0;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: fs/sysfs/sysfs.c:318:
+	int length = 1;
+	do {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#363: FILE: fs/sysfs/sysfs.c:318:
+	do {
+  length += strlen(kobject_name(p)) + 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: fs/sysfs/sysfs.c:319:
+  length += strlen(kobject_name(p)) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: fs/sysfs/sysfs.c:320:
+  p = p->parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: fs/sysfs/sysfs.c:321:
+ } while (p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: fs/sysfs/sysfs.c:322:
+ return length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: fs/sysfs/sysfs.c:327:
+ struct kobject *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: fs/sysfs/sysfs.c:329:
+ --length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: fs/sysfs/sysfs.c:330:
+ for (p = kobj; p; p = p->parent) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#375: FILE: fs/sysfs/sysfs.c:330:
+ for (p = kobj; p; p = p->parent) {
+  int cur = strlen(kobject_name(p));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: fs/sysfs/sysfs.c:331:
+  int cur = strlen(kobject_name(p));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: fs/sysfs/sysfs.c:334:
+  length -= cur;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: fs/sysfs/sysfs.c:335:
+  strncpy(buffer + length, kobject_name(p), cur);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: fs/sysfs/sysfs.c:336:
+  *(buffer + --length) = '/';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: fs/sysfs/sysfs.c:337:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: fs/sysfs/sysfs.c:342:
+ char *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: fs/sysfs/sysfs.c:343:
+ int depth, size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: fs/sysfs/sysfs.c:345:
+ depth = object_depth(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: fs/sysfs/sysfs.c:346:
+ size = object_path_length(target) + depth * 3 - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: fs/sysfs/sysfs.c:347:
+ if (size > PATH_MAX)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#392: FILE: fs/sysfs/sysfs.c:347:
+ if (size > PATH_MAX)
+  return -ENAMETOOLONG;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: fs/sysfs/sysfs.c:348:
+  return -ENAMETOOLONG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: fs/sysfs/sysfs.c:350:
+ pr_debug("%s: depth = %d, size = %d\n", __FUNCTION__, depth, size);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#395: FILE: fs/sysfs/sysfs.c:350:
+ pr_debug("%s: depth = %d, size = %d\n", __FUNCTION__, depth, size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: fs/sysfs/sysfs.c:352:
+ for (s = path; depth--; s += 3)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#397: FILE: fs/sysfs/sysfs.c:352:
+ for (s = path; depth--; s += 3)
+  strcpy(s, "../");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: fs/sysfs/sysfs.c:353:
+  strcpy(s, "../");$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#401: FILE: fs/sysfs/sysfs.c:356:
+	pr_debug("%s: path = '%s'\n", __FUNCTION__, path);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#431: FILE: fs/sysfs/sysfs.c:386:
+
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#433: FILE: fs/sysfs/sysfs.c:388:
+static int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: fs/sysfs/sysfs.c:392:
+	unsigned long page = get_zeroed_page(GFP_KERNEL);
+	if (page)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#437: FILE: fs/sysfs/sysfs.c:392:
+	if (page)
+  error = sysfs_getlink(dentry, (char *)page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: fs/sysfs/sysfs.c:393:
+  error = sysfs_getlink(dentry, (char *)page);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#439: FILE: fs/sysfs/sysfs.c:394:
+ nd_set_link(nd, error ? ERR_PTR(error) : (char *)page);
              ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: fs/sysfs/sysfs.c:394:
+ nd_set_link(nd, error ? ERR_PTR(error) : (char *)page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: fs/sysfs/sysfs.c:395:
+ return 0;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#443: FILE: fs/sysfs/sysfs.c:398:
+static void sysfs_put_link(struct dentry *dentry, struct nameidata *nd)
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#445: FILE: fs/sysfs/sysfs.c:400:
+ char *page = nd_get_link(nd);
                           ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/sysfs/sysfs.c:400:
+ char *page = nd_get_link(nd);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#446: FILE: fs/sysfs/sysfs.c:401:
+ char *page = nd_get_link(nd);
+ if (!IS_ERR(page))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: fs/sysfs/sysfs.c:401:
+ if (!IS_ERR(page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#446: FILE: fs/sysfs/sysfs.c:401:
+ if (!IS_ERR(page))
+  free_page((unsigned long)page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: fs/sysfs/sysfs.c:402:
+  free_page((unsigned long)page);$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#450: FILE: fs/sysfs/sysfs.c:405:
+static struct inode_operations sysfs_symlink_inode_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: fs/sysfs/sysfs.c:406:
+ .readlink = generic_readlink,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: fs/sysfs/sysfs.c:407:
+ .follow_link = sysfs_follow_link,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: fs/sysfs/sysfs.c:408:
+ .put_link = sysfs_put_link,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: fs/sysfs/sysfs.c:413:
+ inode->i_op = &sysfs_symlink_inode_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: fs/sysfs/sysfs.c:414:
+ return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: fs/sysfs/sysfs.c:426:
+ * These operations allow subsystems to have files that can be $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: fs/sysfs/sysfs.c:427:
+ * read/written. $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: fs/sysfs/sysfs.c:430:
+static ssize_t subsys_attr_show(struct kobject *kobj, struct attribute *attr,
+    char *page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: fs/sysfs/sysfs.c:430:
+    char *page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: fs/sysfs/sysfs.c:432:
+ struct subsystem *s = to_subsys(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: fs/sysfs/sysfs.c:433:
+ struct subsys_attribute *sattr = to_sattr(attr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: fs/sysfs/sysfs.c:434:
+ ssize_t ret = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: fs/sysfs/sysfs.c:436:
+ if (sattr->show)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#481: FILE: fs/sysfs/sysfs.c:436:
+ if (sattr->show)
+  ret = sattr->show(s, page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: fs/sysfs/sysfs.c:437:
+  ret = sattr->show(s, page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: fs/sysfs/sysfs.c:438:
+ return ret;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: fs/sysfs/sysfs.c:442:
+static ssize_t subsys_attr_store(struct kobject *kobj, struct attribute *attr,
+     const char *page, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: fs/sysfs/sysfs.c:442:
+     const char *page, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: fs/sysfs/sysfs.c:444:
+ struct subsystem *s = to_subsys(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: fs/sysfs/sysfs.c:445:
+ struct subsys_attribute *sattr = to_sattr(attr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: fs/sysfs/sysfs.c:446:
+ ssize_t ret = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: fs/sysfs/sysfs.c:448:
+ if (sattr->store)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#493: FILE: fs/sysfs/sysfs.c:448:
+ if (sattr->store)
+  ret = sattr->store(s, page, count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: fs/sysfs/sysfs.c:449:
+  ret = sattr->store(s, page, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: fs/sysfs/sysfs.c:450:
+ return ret;$

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#498: FILE: fs/sysfs/sysfs.c:453:
+static struct sysfs_ops subsys_sysfs_ops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: fs/sysfs/sysfs.c:454:
+ .show = subsys_attr_show,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: fs/sysfs/sysfs.c:455:
+ .store = subsys_attr_store,$

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#511: FILE: fs/sysfs/sysfs.c:466:
+	struct sysfs_ops *ops;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#525: FILE: fs/sysfs/sysfs.c:480:
+	struct sysfs_ops *ops = buffer->ops;

CHECK:SPACING: No space is necessary after a cast
#536: FILE: fs/sysfs/sysfs.c:491:
+	BUG_ON(count > (ssize_t) PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#536: FILE: fs/sysfs/sysfs.c:491:
+	BUG_ON(count > (ssize_t) PAGE_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: fs/sysfs/sysfs.c:506:
+        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: fs/sysfs/sysfs.c:506:
+static int flush_read_buffer(struct sysfs_buffer *buffer, char __user *buf,
+        size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: fs/sysfs/sysfs.c:506:
+        size_t count, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/sysfs/sysfs.c:508:
+ int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: fs/sysfs/sysfs.c:510:
+ if (*ppos > buffer->count)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#555: FILE: fs/sysfs/sysfs.c:510:
+ if (*ppos > buffer->count)
+  return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: fs/sysfs/sysfs.c:511:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: fs/sysfs/sysfs.c:513:
+ if (count > (buffer->count - *ppos))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#558: FILE: fs/sysfs/sysfs.c:513:
+ if (count > (buffer->count - *ppos))
+  count = buffer->count - *ppos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: fs/sysfs/sysfs.c:514:
+  count = buffer->count - *ppos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: fs/sysfs/sysfs.c:516:
+ error = copy_to_user(buf, buffer->page + *ppos, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: fs/sysfs/sysfs.c:517:
+ if (!error)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#562: FILE: fs/sysfs/sysfs.c:517:
+ if (!error)
+  *ppos += count;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: fs/sysfs/sysfs.c:518:
+  *ppos += count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: fs/sysfs/sysfs.c:519:
+ return error ? -EFAULT : count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: fs/sysfs/sysfs.c:527:
+        size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: fs/sysfs/sysfs.c:527:
+static int fill_write_buffer(struct sysfs_buffer *buffer, const char __user *buf,
+        size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: fs/sysfs/sysfs.c:527:
+        size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: fs/sysfs/sysfs.c:529:
+ int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: fs/sysfs/sysfs.c:531:
+ if (!buffer->page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#576: FILE: fs/sysfs/sysfs.c:531:
+ if (!buffer->page)
+  buffer->page = (char *)get_zeroed_page(GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: fs/sysfs/sysfs.c:532:
+  buffer->page = (char *)get_zeroed_page(GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: fs/sysfs/sysfs.c:533:
+ if (!buffer->page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#578: FILE: fs/sysfs/sysfs.c:533:
+ if (!buffer->page)
+  return -ENOMEM;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: fs/sysfs/sysfs.c:534:
+  return -ENOMEM;$

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#598: FILE: fs/sysfs/sysfs.c:553:
+	struct sysfs_ops *ops = buffer->ops;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#608: FILE: fs/sysfs/sysfs.c:563:
+	struct sysfs_ops *ops = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#612: FILE: fs/sysfs/sysfs.c:567:
+		goto Einval;

CHECK:CAMELCASE: Avoid CamelCase: <Eaccess>
#634: FILE: fs/sysfs/sysfs.c:589:
+		goto Eaccess;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: fs/sysfs/sysfs.c:595:
+	if (file->f_mode & FMODE_WRITE) {
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#641: FILE: fs/sysfs/sysfs.c:596:
+		if (!(inode->i_mode & S_IWUGO) || !ops->store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#644: FILE: fs/sysfs/sysfs.c:599:
+
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#651: FILE: fs/sysfs/sysfs.c:606:
+		if (!(inode->i_mode & S_IRUGO) || !ops->show)

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#656: FILE: fs/sysfs/sysfs.c:611:
+	/* No error? Great, allocate a buffer for the file, and store it
+	 * it in file->private_data for easy access.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*buffer)...) over kmalloc(sizeof(struct sysfs_buffer)...)
#658: FILE: fs/sysfs/sysfs.c:613:
+	buffer = kmalloc(sizeof(struct sysfs_buffer), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#659: FILE: fs/sysfs/sysfs.c:614:
+	if (buffer) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: fs/sysfs/sysfs.c:617:
+  buffer->needs_read_fill = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: fs/sysfs/sysfs.c:618:
+  buffer->ops = ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: fs/sysfs/sysfs.c:619:
+  file->private_data = buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: fs/sysfs/sysfs.c:620:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#665: FILE: fs/sysfs/sysfs.c:620:
+ } else
+  error = -ENOMEM;

CHECK:BRACES: Unbalanced braces around else statement
#665: FILE: fs/sysfs/sysfs.c:620:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: fs/sysfs/sysfs.c:621:
+  error = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: fs/sysfs/sysfs.c:622:
+ goto Done;$

WARNING:INDENTED_LABEL: labels should not be indented
#669: FILE: fs/sysfs/sysfs.c:624:
+      Einval:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: fs/sysfs/sysfs.c:625:
+ error = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: fs/sysfs/sysfs.c:626:
+ goto Done;$

WARNING:INDENTED_LABEL: labels should not be indented
#672: FILE: fs/sysfs/sysfs.c:627:
+      Eaccess:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: fs/sysfs/sysfs.c:628:
+ error = -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: fs/sysfs/sysfs.c:629:
+ module_put(attr->owner);$

WARNING:INDENTED_LABEL: labels should not be indented
#675: FILE: fs/sysfs/sysfs.c:630:
+      Done:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: fs/sysfs/sysfs.c:631:
+ if (error && kobj)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#676: FILE: fs/sysfs/sysfs.c:631:
+ if (error && kobj)
+  kobject_put(kobj);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: fs/sysfs/sysfs.c:632:
+  kobject_put(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: fs/sysfs/sysfs.c:633:
+ return error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: fs/sysfs/sysfs.c:649:
+          size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: fs/sysfs/sysfs.c:649:
+static ssize_t sysfs_read_file(struct file *file, char __user *buf,
+          size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: fs/sysfs/sysfs.c:649:
+          size_t count, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: fs/sysfs/sysfs.c:651:
+ struct sysfs_buffer *buffer = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: fs/sysfs/sysfs.c:652:
+ ssize_t retval = 0;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#701: FILE: fs/sysfs/sysfs.c:656:
+		if ((retval = fill_read_buffer(file->f_dentry, buffer)))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#705: FILE: fs/sysfs/sysfs.c:660:
+		 __FUNCTION__, count, *ppos, buffer->page);

WARNING:INDENTED_LABEL: labels should not be indented
#707: FILE: fs/sysfs/sysfs.c:662:
+      out:

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#720: FILE: fs/sysfs/sysfs.c:675:
+ *	Hint: if you're writing a value, first read the file, modify only the
+ *	the value you're changing, then write entire buffer back.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: fs/sysfs/sysfs.c:683:
+ count = fill_write_buffer(buffer, buf, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: fs/sysfs/sysfs.c:684:
+ if (count > 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#729: FILE: fs/sysfs/sysfs.c:684:
+ if (count > 0)
+  count = flush_write_buffer(file->f_dentry, buffer, count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: fs/sysfs/sysfs.c:685:
+  count = flush_write_buffer(file->f_dentry, buffer, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: fs/sysfs/sysfs.c:686:
+ if (count > 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#731: FILE: fs/sysfs/sysfs.c:686:
+ if (count > 0)
+  *ppos += count;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: fs/sysfs/sysfs.c:687:
+  *ppos += count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: fs/sysfs/sysfs.c:688:
+ up(&buffer->sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: fs/sysfs/sysfs.c:689:
+ return count;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#737: FILE: fs/sysfs/sysfs.c:692:
+static int sysfs_open_file(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#739: FILE: fs/sysfs/sysfs.c:694:
+ return check_perm(inode, filp);
                           ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: fs/sysfs/sysfs.c:694:
+ return check_perm(inode, filp);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#742: FILE: fs/sysfs/sysfs.c:697:
+static int sysfs_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: fs/sysfs/sysfs.c:699:
+ struct kobject *kobj = to_kobj(filp->f_dentry->d_parent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: fs/sysfs/sysfs.c:700:
+ struct attribute *attr = to_attr(filp->f_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: fs/sysfs/sysfs.c:701:
+ struct module *owner = attr->owner;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: fs/sysfs/sysfs.c:702:
+ struct sysfs_buffer *buffer = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: fs/sysfs/sysfs.c:704:
+ if (kobj)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#749: FILE: fs/sysfs/sysfs.c:704:
+ if (kobj)
+  kobject_put(kobj);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: fs/sysfs/sysfs.c:705:
+  kobject_put(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: fs/sysfs/sysfs.c:707:
+ module_put(owner);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: fs/sysfs/sysfs.c:709:
+ if (buffer) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#754: FILE: fs/sysfs/sysfs.c:709:
+ if (buffer) {
+  if (buffer->page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: fs/sysfs/sysfs.c:710:
+  if (buffer->page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#755: FILE: fs/sysfs/sysfs.c:710:
+  if (buffer->page)
+   free_page((unsigned long)buffer->page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: fs/sysfs/sysfs.c:711:
+   free_page((unsigned long)buffer->page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: fs/sysfs/sysfs.c:712:
+  kfree(buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: fs/sysfs/sysfs.c:713:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: fs/sysfs/sysfs.c:714:
+ return 0;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#762: FILE: fs/sysfs/sysfs.c:717:
+static struct file_operations sysfs_file_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: fs/sysfs/sysfs.c:718:
+ .read = sysfs_read_file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: fs/sysfs/sysfs.c:719:
+ .write = sysfs_write_file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: fs/sysfs/sysfs.c:720:
+ .llseek = generic_file_llseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: fs/sysfs/sysfs.c:721:
+ .open = sysfs_open_file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: fs/sysfs/sysfs.c:722:
+ .release = sysfs_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: fs/sysfs/sysfs.c:727:
+ inode->i_size = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: fs/sysfs/sysfs.c:728:
+ inode->i_fop = &sysfs_file_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: fs/sysfs/sysfs.c:729:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: fs/sysfs/sysfs.c:734:
+ struct sysfs_dirent *sd = dentry->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: fs/sysfs/sysfs.c:736:
+ if (sd) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#781: FILE: fs/sysfs/sysfs.c:736:
+ if (sd) {
+  BUG_ON(sd->s_dentry != dentry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: fs/sysfs/sysfs.c:737:
+  BUG_ON(sd->s_dentry != dentry);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#782: FILE: fs/sysfs/sysfs.c:737:
+  BUG_ON(sd->s_dentry != dentry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: fs/sysfs/sysfs.c:738:
+  sd->s_dentry = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: fs/sysfs/sysfs.c:739:
+  sysfs_put(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: fs/sysfs/sysfs.c:740:
+ }$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#786: FILE: fs/sysfs/sysfs.c:741:
+ iput(inode);
  ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: fs/sysfs/sysfs.c:741:
+ iput(inode);$

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#789: FILE: fs/sysfs/sysfs.c:744:
+static struct dentry_operations sysfs_dentry_ops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: fs/sysfs/sysfs.c:745:
+ .d_iput = sysfs_d_iput,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: fs/sysfs/sysfs.c:756:
+ sd = kmem_cache_alloc(sysfs_dir_cachep, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: fs/sysfs/sysfs.c:757:
+ if (!sd)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#802: FILE: fs/sysfs/sysfs.c:757:
+ if (!sd)
+  return NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: fs/sysfs/sysfs.c:758:
+  return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: fs/sysfs/sysfs.c:760:
+ memset(sd, 0, sizeof(*sd));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: fs/sysfs/sysfs.c:761:
+ atomic_set(&sd->s_count, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: fs/sysfs/sysfs.c:762:
+ INIT_LIST_HEAD(&sd->s_children);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: fs/sysfs/sysfs.c:763:
+ list_add(&sd->s_sibling, &parent_sd->s_children);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: fs/sysfs/sysfs.c:764:
+ sd->s_element = element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: fs/sysfs/sysfs.c:766:
+ return sd;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/sysfs/sysfs.c:770:
+int sysfs_make_dirent(struct sysfs_dirent *parent_sd, struct dentry *dentry,
+ void *element, umode_t mode, int type)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: fs/sysfs/sysfs.c:770:
+ void *element, umode_t mode, int type)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: fs/sysfs/sysfs.c:772:
+ struct sysfs_dirent *sd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: fs/sysfs/sysfs.c:774:
+ sd = sysfs_new_dirent(parent_sd, element);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: fs/sysfs/sysfs.c:775:
+ if (!sd)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#820: FILE: fs/sysfs/sysfs.c:775:
+ if (!sd)
+  return -ENOMEM;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: fs/sysfs/sysfs.c:776:
+  return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: fs/sysfs/sysfs.c:778:
+ sd->s_mode = mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: fs/sysfs/sysfs.c:779:
+ sd->s_type = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: fs/sysfs/sysfs.c:780:
+ sd->s_dentry = dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: fs/sysfs/sysfs.c:781:
+ if (dentry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#826: FILE: fs/sysfs/sysfs.c:781:
+ if (dentry) {
+  dentry->d_fsdata = sysfs_get(sd);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: fs/sysfs/sysfs.c:782:
+  dentry->d_fsdata = sysfs_get(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: fs/sysfs/sysfs.c:783:
+  dentry->d_op = &sysfs_dentry_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: fs/sysfs/sysfs.c:784:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: fs/sysfs/sysfs.c:786:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: fs/sysfs/sysfs.c:791:
+ struct sysfs_dirent *parent_sd = dir->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: fs/sysfs/sysfs.c:792:
+ umode_t mode = (attr->mode & S_IALLUGO) | S_IFREG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: fs/sysfs/sysfs.c:793:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: fs/sysfs/sysfs.c:795:
+ down(&dir->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: fs/sysfs/sysfs.c:796:
+ error = sysfs_make_dirent(parent_sd, NULL, (void *)attr, mode, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: fs/sysfs/sysfs.c:797:
+ up(&dir->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#844: FILE: fs/sysfs/sysfs.c:799:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: fs/sysfs/sysfs.c:804:
+ BUG_ON(!kobj || !kobj->dentry || !attr);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#849: FILE: fs/sysfs/sysfs.c:804:
+ BUG_ON(!kobj || !kobj->dentry || !attr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: fs/sysfs/sysfs.c:806:
+ return sysfs_add_file(kobj->dentry, attr, SYSFS_KOBJ_ATTR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: fs/sysfs/sysfs.c:811:
+ struct sysfs_dirent *parent_sd = parent->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: fs/sysfs/sysfs.c:812:
+ struct sysfs_symlink *sl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: fs/sysfs/sysfs.c:813:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: fs/sysfs/sysfs.c:815:
+ error = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: fs/sysfs/sysfs.c:816:
+ sl = kmalloc(sizeof(*sl), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: fs/sysfs/sysfs.c:817:
+ if (!sl)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#862: FILE: fs/sysfs/sysfs.c:817:
+ if (!sl)
+  goto exit1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: fs/sysfs/sysfs.c:818:
+  goto exit1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: fs/sysfs/sysfs.c:820:
+ sl->link_name = kmalloc(strlen(name) + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: fs/sysfs/sysfs.c:821:
+ if (!sl->link_name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#866: FILE: fs/sysfs/sysfs.c:821:
+ if (!sl->link_name)
+  goto exit2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: fs/sysfs/sysfs.c:822:
+  goto exit2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: fs/sysfs/sysfs.c:824:
+ strcpy(sl->link_name, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: fs/sysfs/sysfs.c:825:
+ sl->sl_target = kobject_get(target);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#872: FILE: fs/sysfs/sysfs.c:827:
+	error = sysfs_make_dirent(parent_sd, NULL, sl, S_IFLNK | S_IRWXUGO,

WARNING:INDENTED_LABEL: labels should not be indented
#878: FILE: fs/sysfs/sysfs.c:833:
+      exit2:

WARNING:INDENTED_LABEL: labels should not be indented
#880: FILE: fs/sysfs/sysfs.c:835:
+      exit1:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: fs/sysfs/sysfs.c:836:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: fs/sysfs/sysfs.c:845:
+ struct dentry *dentry = file->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: fs/sysfs/sysfs.c:846:
+ struct sysfs_dirent *parent_sd = dentry->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: fs/sysfs/sysfs.c:848:
+ down(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: fs/sysfs/sysfs.c:849:
+ file->private_data = sysfs_new_dirent(parent_sd, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: fs/sysfs/sysfs.c:850:
+ up(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: fs/sysfs/sysfs.c:852:
+ return file->private_data ? 0 : -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: fs/sysfs/sysfs.c:857:
+ struct dentry *dentry = file->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: fs/sysfs/sysfs.c:858:
+ struct sysfs_dirent *cursor = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: fs/sysfs/sysfs.c:860:
+ down(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: fs/sysfs/sysfs.c:861:
+ list_del_init(&cursor->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: fs/sysfs/sysfs.c:862:
+ up(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: fs/sysfs/sysfs.c:864:
+ release_sysfs_dirent(cursor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: fs/sysfs/sysfs.c:866:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: fs/sysfs/sysfs.c:872:
+ return (sd->s_mode >> 12) & 15;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#920: FILE: fs/sysfs/sysfs.c:875:
+static int sysfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                       ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: fs/sysfs/sysfs.c:877:
+ struct dentry *dentry = filp->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: fs/sysfs/sysfs.c:878:
+ struct sysfs_dirent *parent_sd = dentry->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: fs/sysfs/sysfs.c:879:
+ struct sysfs_dirent *cursor = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: fs/sysfs/sysfs.c:880:
+ struct list_head *p, *q = &cursor->s_sibling;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: fs/sysfs/sysfs.c:881:
+ ino_t ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: fs/sysfs/sysfs.c:882:
+ int i = filp->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: fs/sysfs/sysfs.c:884:
+ switch (i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: fs/sysfs/sysfs.c:885:
+ case 0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: fs/sysfs/sysfs.c:886:
+  ino = dentry->d_inode->i_ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: fs/sysfs/sysfs.c:887:
+  if (filldir(dirent, ".", 1, i, ino, DT_DIR) < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#932: FILE: fs/sysfs/sysfs.c:887:
+  if (filldir(dirent, ".", 1, i, ino, DT_DIR) < 0)
+   break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: fs/sysfs/sysfs.c:888:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: fs/sysfs/sysfs.c:889:
+  filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: fs/sysfs/sysfs.c:890:
+  i++;$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#936: FILE: fs/sysfs/sysfs.c:891:
+  /* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: fs/sysfs/sysfs.c:892:
+ case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: fs/sysfs/sysfs.c:893:
+  ino = parent_ino(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: fs/sysfs/sysfs.c:894:
+  if (filldir(dirent, "..", 2, i, ino, DT_DIR) < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#939: FILE: fs/sysfs/sysfs.c:894:
+  if (filldir(dirent, "..", 2, i, ino, DT_DIR) < 0)
+   break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: fs/sysfs/sysfs.c:895:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: fs/sysfs/sysfs.c:896:
+  filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: fs/sysfs/sysfs.c:897:
+  i++;$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#943: FILE: fs/sysfs/sysfs.c:898:
+  /* fallthrough */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: fs/sysfs/sysfs.c:900:
+  if (filp->f_pos == 2) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#945: FILE: fs/sysfs/sysfs.c:900:
+  if (filp->f_pos == 2) {
+   list_del(q);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: fs/sysfs/sysfs.c:901:
+   list_del(q);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: fs/sysfs/sysfs.c:902:
+   list_add(q, &parent_sd->s_children);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: fs/sysfs/sysfs.c:903:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: fs/sysfs/sysfs.c:904:
+  for (p = q->next; p != &parent_sd->s_children; p = p->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#949: FILE: fs/sysfs/sysfs.c:904:
+  for (p = q->next; p != &parent_sd->s_children; p = p->next) {
+   struct sysfs_dirent *next;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: fs/sysfs/sysfs.c:905:
+   struct sysfs_dirent *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: fs/sysfs/sysfs.c:906:
+   const char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: fs/sysfs/sysfs.c:907:
+   int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: fs/sysfs/sysfs.c:909:
+   next = list_entry(p, struct sysfs_dirent, s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: fs/sysfs/sysfs.c:910:
+   if (!next->s_element)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#955: FILE: fs/sysfs/sysfs.c:910:
+   if (!next->s_element)
+    continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: fs/sysfs/sysfs.c:911:
+    continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: fs/sysfs/sysfs.c:913:
+   name = sysfs_get_name(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: fs/sysfs/sysfs.c:914:
+   len = strlen(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: fs/sysfs/sysfs.c:915:
+   if (next->s_dentry)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#960: FILE: fs/sysfs/sysfs.c:915:
+   if (next->s_dentry)
+    ino = next->s_dentry->d_inode->i_ino;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: fs/sysfs/sysfs.c:916:
+    ino = next->s_dentry->d_inode->i_ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: fs/sysfs/sysfs.c:917:
+   else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#962: FILE: fs/sysfs/sysfs.c:917:
+   else
+    ino = iunique(sysfs_sb, 2);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: fs/sysfs/sysfs.c:918:
+    ino = iunique(sysfs_sb, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: fs/sysfs/sysfs.c:920:
+   if (filldir(dirent, name, len, filp->f_pos, ino,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#965: FILE: fs/sysfs/sysfs.c:920:
+   if (filldir(dirent, name, len, filp->f_pos, ino,
[...]
+    return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: fs/sysfs/sysfs.c:921:
+        dt_type(next)) < 0)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: fs/sysfs/sysfs.c:921:
+   if (filldir(dirent, name, len, filp->f_pos, ino,
+        dt_type(next)) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: fs/sysfs/sysfs.c:921:
+        dt_type(next)) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: fs/sysfs/sysfs.c:922:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: fs/sysfs/sysfs.c:924:
+   list_del(q);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: fs/sysfs/sysfs.c:925:
+   list_add(q, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: fs/sysfs/sysfs.c:926:
+   p = q;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: fs/sysfs/sysfs.c:927:
+   filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: fs/sysfs/sysfs.c:928:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: fs/sysfs/sysfs.c:929:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: fs/sysfs/sysfs.c:930:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: fs/sysfs/sysfs.c:935:
+ struct dentry *dentry = file->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: fs/sysfs/sysfs.c:937:
+ down(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: fs/sysfs/sysfs.c:938:
+ switch (origin) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: fs/sysfs/sysfs.c:939:
+ case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: fs/sysfs/sysfs.c:940:
+  offset += file->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: fs/sysfs/sysfs.c:941:
+ case 0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: fs/sysfs/sysfs.c:942:
+  if (offset >= 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#987: FILE: fs/sysfs/sysfs.c:942:
+  if (offset >= 0)
+   break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: fs/sysfs/sysfs.c:943:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: fs/sysfs/sysfs.c:945:
+  up(&file->f_dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: fs/sysfs/sysfs.c:946:
+  return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: fs/sysfs/sysfs.c:947:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: fs/sysfs/sysfs.c:948:
+ if (offset != file->f_pos) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#993: FILE: fs/sysfs/sysfs.c:948:
+ if (offset != file->f_pos) {
+  file->f_pos = offset;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: fs/sysfs/sysfs.c:949:
+  file->f_pos = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: fs/sysfs/sysfs.c:950:
+  if (file->f_pos >= 2) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 24)
#995: FILE: fs/sysfs/sysfs.c:950:
+  if (file->f_pos >= 2) {
+			struct sysfs_dirent *sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1005: FILE: fs/sysfs/sysfs.c:960:
+				struct sysfs_dirent *next;
+				next = list_entry(p, struct sysfs_dirent,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1018: FILE: fs/sysfs/sysfs.c:973:
+static struct file_operations sysfs_dir_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1037: FILE: fs/sysfs/sysfs.c:992:
+	struct sysfs_dirent *sd = dentry->d_fsdata;
+	return ((struct bin_attribute *)sd->s_element);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#1046: FILE: fs/sysfs/sysfs.c:1001:
+	if (!attr->read)
+  return -EIO;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: fs/sysfs/sysfs.c:1002:
+  return -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: fs/sysfs/sysfs.c:1004:
+ return attr->read(kobj, buffer, off, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: fs/sysfs/sysfs.c:1009:
+ char *buffer = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: fs/sysfs/sysfs.c:1010:
+ struct dentry *dentry = file->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: fs/sysfs/sysfs.c:1011:
+ int size = dentry->d_inode->i_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: fs/sysfs/sysfs.c:1012:
+ loff_t offs = *off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: fs/sysfs/sysfs.c:1013:
+ int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: fs/sysfs/sysfs.c:1015:
+ if (count > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1060: FILE: fs/sysfs/sysfs.c:1015:
+ if (count > PAGE_SIZE)
+  count = PAGE_SIZE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: fs/sysfs/sysfs.c:1016:
+  count = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: fs/sysfs/sysfs.c:1018:
+ if (size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1063: FILE: fs/sysfs/sysfs.c:1018:
+ if (size) {
+  if (offs > size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: fs/sysfs/sysfs.c:1019:
+  if (offs > size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1064: FILE: fs/sysfs/sysfs.c:1019:
+  if (offs > size)
+   return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: fs/sysfs/sysfs.c:1020:
+   return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: fs/sysfs/sysfs.c:1021:
+  if (offs + count > size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1066: FILE: fs/sysfs/sysfs.c:1021:
+  if (offs + count > size)
+   count = size - offs;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: fs/sysfs/sysfs.c:1022:
+   count = size - offs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: fs/sysfs/sysfs.c:1023:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/sysfs/sysfs.c:1025:
+ ret = fill_read(dentry, buffer, offs, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/sysfs/sysfs.c:1026:
+ if (ret < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1071: FILE: fs/sysfs/sysfs.c:1026:
+ if (ret < 0)
+  return ret;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: fs/sysfs/sysfs.c:1027:
+  return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: fs/sysfs/sysfs.c:1028:
+ count = ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: fs/sysfs/sysfs.c:1030:
+ if (copy_to_user(userbuf, buffer, count))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1075: FILE: fs/sysfs/sysfs.c:1030:
+ if (copy_to_user(userbuf, buffer, count))
+  return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/sysfs/sysfs.c:1031:
+  return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: fs/sysfs/sysfs.c:1033:
+ pr_debug("offs = %lld, *off = %lld, count = %zd\n", offs, *off, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: fs/sysfs/sysfs.c:1035:
+ *off = offs + count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: fs/sysfs/sysfs.c:1037:
+ return count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: fs/sysfs/sysfs.c:1042:
+ struct bin_attribute *attr = to_bin_attr(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: fs/sysfs/sysfs.c:1043:
+ struct kobject *kobj = to_kobj(dentry->d_parent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: fs/sysfs/sysfs.c:1045:
+ if (!attr->write)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1090: FILE: fs/sysfs/sysfs.c:1045:
+ if (!attr->write)
+  return -EIO;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: fs/sysfs/sysfs.c:1046:
+  return -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: fs/sysfs/sysfs.c:1048:
+ return attr->write(kobj, buffer, offset, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: fs/sysfs/sysfs.c:1053:
+ char *buffer = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: fs/sysfs/sysfs.c:1054:
+ struct dentry *dentry = file->f_dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: fs/sysfs/sysfs.c:1055:
+ int size = dentry->d_inode->i_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: fs/sysfs/sysfs.c:1056:
+ loff_t offs = *off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: fs/sysfs/sysfs.c:1058:
+ if (count > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1103: FILE: fs/sysfs/sysfs.c:1058:
+ if (count > PAGE_SIZE)
+  count = PAGE_SIZE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: fs/sysfs/sysfs.c:1059:
+  count = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: fs/sysfs/sysfs.c:1060:
+ if (size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1105: FILE: fs/sysfs/sysfs.c:1060:
+ if (size) {
+  if (offs > size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: fs/sysfs/sysfs.c:1061:
+  if (offs > size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1106: FILE: fs/sysfs/sysfs.c:1061:
+  if (offs > size)
+   return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: fs/sysfs/sysfs.c:1062:
+   return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: fs/sysfs/sysfs.c:1063:
+  if (offs + count > size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1108: FILE: fs/sysfs/sysfs.c:1063:
+  if (offs + count > size)
+   count = size - offs;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: fs/sysfs/sysfs.c:1064:
+   count = size - offs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: fs/sysfs/sysfs.c:1065:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: fs/sysfs/sysfs.c:1067:
+ if (copy_from_user(buffer, userbuf, count))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1112: FILE: fs/sysfs/sysfs.c:1067:
+ if (copy_from_user(buffer, userbuf, count))
+  return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1113: FILE: fs/sysfs/sysfs.c:1068:
+  return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1115: FILE: fs/sysfs/sysfs.c:1070:
+ count = flush_write(dentry, buffer, offs, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: fs/sysfs/sysfs.c:1071:
+ if (count > 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1116: FILE: fs/sysfs/sysfs.c:1071:
+ if (count > 0)
+  *off = offs + count;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: fs/sysfs/sysfs.c:1072:
+  *off = offs + count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1118: FILE: fs/sysfs/sysfs.c:1073:
+ return count;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#1139: FILE: fs/sysfs/sysfs.c:1094:
+	if (!kobj || !attr)
+  goto Done;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: fs/sysfs/sysfs.c:1095:
+  goto Done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: fs/sysfs/sysfs.c:1098:
+ error = -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: fs/sysfs/sysfs.c:1099:
+ if (!try_module_get(attr->attr.owner))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1144: FILE: fs/sysfs/sysfs.c:1099:
+ if (!try_module_get(attr->attr.owner))
+  goto Done;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: fs/sysfs/sysfs.c:1100:
+  goto Done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: fs/sysfs/sysfs.c:1102:
+ error = -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: fs/sysfs/sysfs.c:1103:
+ if ((file->f_mode & FMODE_WRITE) && !(attr->write || attr->mmap))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1148: FILE: fs/sysfs/sysfs.c:1103:
+ if ((file->f_mode & FMODE_WRITE) && !(attr->write || attr->mmap))
+  goto Error;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: fs/sysfs/sysfs.c:1104:
+  goto Error;$

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#1149: FILE: fs/sysfs/sysfs.c:1104:
+  goto Error;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: fs/sysfs/sysfs.c:1105:
+ if ((file->f_mode & FMODE_READ) && !(attr->read || attr->mmap))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1150: FILE: fs/sysfs/sysfs.c:1105:
+ if ((file->f_mode & FMODE_READ) && !(attr->read || attr->mmap))
+  goto Error;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: fs/sysfs/sysfs.c:1106:
+  goto Error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: fs/sysfs/sysfs.c:1108:
+ error = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: fs/sysfs/sysfs.c:1109:
+ file->private_data = kmalloc(PAGE_SIZE, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: fs/sysfs/sysfs.c:1110:
+ if (!file->private_data)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1155: FILE: fs/sysfs/sysfs.c:1110:
+ if (!file->private_data)
+  goto Error;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: fs/sysfs/sysfs.c:1111:
+  goto Error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: fs/sysfs/sysfs.c:1113:
+ error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1159: FILE: fs/sysfs/sysfs.c:1114:
+ goto Done;$

WARNING:INDENTED_LABEL: labels should not be indented
#1161: FILE: fs/sysfs/sysfs.c:1116:
+      Error:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: fs/sysfs/sysfs.c:1117:
+ module_put(attr->attr.owner);$

WARNING:INDENTED_LABEL: labels should not be indented
#1163: FILE: fs/sysfs/sysfs.c:1118:
+      Done:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: fs/sysfs/sysfs.c:1119:
+ if (error && kobj)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1164: FILE: fs/sysfs/sysfs.c:1119:
+ if (error && kobj)
+  kobject_put(kobj);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: fs/sysfs/sysfs.c:1120:
+  kobject_put(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: fs/sysfs/sysfs.c:1121:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: fs/sysfs/sysfs.c:1126:
+ struct kobject *kobj = to_kobj(file->f_dentry->d_parent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: fs/sysfs/sysfs.c:1127:
+ struct bin_attribute *attr = to_bin_attr(file->f_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: fs/sysfs/sysfs.c:1128:
+ u8 *buffer = file->private_data;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1182: FILE: fs/sysfs/sysfs.c:1137:
+struct file_operations bin_fops = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1193: FILE: fs/sysfs/sysfs.c:1148:
+	BUG_ON(!kobj || !kobj->dentry || !attr);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1211: FILE: fs/sysfs/sysfs.c:1166:
+	int (*init) (struct inode *) = NULL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#1225: FILE: fs/sysfs/sysfs.c:1180:
+	if (error) {
+  sysfs_put(sd);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: fs/sysfs/sysfs.c:1181:
+  sysfs_put(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: fs/sysfs/sysfs.c:1182:
+  return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: fs/sysfs/sysfs.c:1183:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: fs/sysfs/sysfs.c:1185:
+ if (bin_attr) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1230: FILE: fs/sysfs/sysfs.c:1185:
+ if (bin_attr) {
+  dentry->d_inode->i_size = bin_attr->size;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: fs/sysfs/sysfs.c:1186:
+  dentry->d_inode->i_size = bin_attr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: fs/sysfs/sysfs.c:1187:
+  dentry->d_inode->i_fop = &bin_fops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: fs/sysfs/sysfs.c:1188:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: fs/sysfs/sysfs.c:1189:
+ dentry->d_op = &sysfs_dentry_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: fs/sysfs/sysfs.c:1190:
+ d_rehash(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: fs/sysfs/sysfs.c:1192:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: fs/sysfs/sysfs.c:1197:
+ int err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: fs/sysfs/sysfs.c:1199:
+ dentry->d_fsdata = sysfs_get(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: fs/sysfs/sysfs.c:1200:
+ sd->s_dentry = dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: fs/sysfs/sysfs.c:1201:
+ err = sysfs_create(dentry, S_IFLNK | S_IRWXUGO, init_symlink);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1246: FILE: fs/sysfs/sysfs.c:1201:
+ err = sysfs_create(dentry, S_IFLNK | S_IRWXUGO, init_symlink);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: fs/sysfs/sysfs.c:1202:
+ if (!err) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1247: FILE: fs/sysfs/sysfs.c:1202:
+ if (!err) {
+  dentry->d_op = &sysfs_dentry_ops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1247: FILE: fs/sysfs/sysfs.c:1202:
+ if (!err) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1248: FILE: fs/sysfs/sysfs.c:1203:
+  dentry->d_op = &sysfs_dentry_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: fs/sysfs/sysfs.c:1204:
+  d_rehash(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: fs/sysfs/sysfs.c:1205:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1250: FILE: fs/sysfs/sysfs.c:1205:
+ } else
+  sysfs_put(sd);

CHECK:BRACES: Unbalanced braces around else statement
#1250: FILE: fs/sysfs/sysfs.c:1205:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: fs/sysfs/sysfs.c:1206:
+  sysfs_put(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: fs/sysfs/sysfs.c:1208:
+ return err;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1257: FILE: fs/sysfs/sysfs.c:1212:
+       struct nameidata *nd)
                          ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1257: FILE: fs/sysfs/sysfs.c:1212:
+static struct dentry *sysfs_lookup(struct inode *dir, struct dentry *dentry,
+       struct nameidata *nd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: fs/sysfs/sysfs.c:1212:
+       struct nameidata *nd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: fs/sysfs/sysfs.c:1214:
+ struct sysfs_dirent *parent_sd = dentry->d_parent->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: fs/sysfs/sysfs.c:1215:
+ struct sysfs_dirent *sd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: fs/sysfs/sysfs.c:1216:
+ int err = 0;$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1281: FILE: fs/sysfs/sysfs.c:1236:
+struct inode_operations sysfs_dir_inode_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1289: FILE: fs/sysfs/sysfs.c:1244:
+ inode->i_fop = &sysfs_dir_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1292: FILE: fs/sysfs/sysfs.c:1247:
+ inode->i_nlink++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1293: FILE: fs/sysfs/sysfs.c:1248:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: fs/sysfs/sysfs.c:1253:
+ int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1299: FILE: fs/sysfs/sysfs.c:1254:
+ umode_t mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1299: FILE: fs/sysfs/sysfs.c:1254:
+ umode_t mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1301: FILE: fs/sysfs/sysfs.c:1256:
+ down(&p->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: fs/sysfs/sysfs.c:1257:
+ *d = lookup_one_len(n, p, strlen(n));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1303: FILE: fs/sysfs/sysfs.c:1258:
+ if (!IS_ERR(*d)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1303: FILE: fs/sysfs/sysfs.c:1258:
+ if (!IS_ERR(*d)) {
+  error = sysfs_make_dirent(p->d_fsdata, *d, k, mode, SYSFS_DIR);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1303: FILE: fs/sysfs/sysfs.c:1258:
+ if (!IS_ERR(*d)) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1304: FILE: fs/sysfs/sysfs.c:1259:
+  error = sysfs_make_dirent(p->d_fsdata, *d, k, mode, SYSFS_DIR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1305: FILE: fs/sysfs/sysfs.c:1260:
+  if (!error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1305: FILE: fs/sysfs/sysfs.c:1260:
+  if (!error) {
+   error = sysfs_create(*d, mode, init_dir);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: fs/sysfs/sysfs.c:1261:
+   error = sysfs_create(*d, mode, init_dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: fs/sysfs/sysfs.c:1262:
+   if (!error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#1307: FILE: fs/sysfs/sysfs.c:1262:
+   if (!error) {
+    p->d_inode->i_nlink++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: fs/sysfs/sysfs.c:1263:
+    p->d_inode->i_nlink++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: fs/sysfs/sysfs.c:1264:
+    (*d)->d_op = &sysfs_dentry_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: fs/sysfs/sysfs.c:1265:
+    d_rehash(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: fs/sysfs/sysfs.c:1266:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: fs/sysfs/sysfs.c:1267:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: fs/sysfs/sysfs.c:1268:
+  if (error && (error != -EEXIST)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1313: FILE: fs/sysfs/sysfs.c:1268:
+  if (error && (error != -EEXIST)) {
+   sysfs_put((*d)->d_fsdata);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: fs/sysfs/sysfs.c:1269:
+   sysfs_put((*d)->d_fsdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1315: FILE: fs/sysfs/sysfs.c:1270:
+   d_drop(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: fs/sysfs/sysfs.c:1271:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: fs/sysfs/sysfs.c:1272:
+  dput(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: fs/sysfs/sysfs.c:1273:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1318: FILE: fs/sysfs/sysfs.c:1273:
+ } else
+  error = PTR_ERR(*d);

CHECK:BRACES: Unbalanced braces around else statement
#1318: FILE: fs/sysfs/sysfs.c:1273:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: fs/sysfs/sysfs.c:1274:
+  error = PTR_ERR(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1320: FILE: fs/sysfs/sysfs.c:1275:
+ up(&p->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: fs/sysfs/sysfs.c:1276:
+ return error;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1337: FILE: fs/sysfs/sysfs.c:1292:
+	BUG_ON(!kobj);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: fs/sysfs/sysfs.c:1322:
+ up(&parent->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: fs/sysfs/sysfs.c:1323:
+ dput(parent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: fs/sysfs/sysfs.c:1328:
+ remove_dir(d);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: fs/sysfs/sysfs.c:1333:
+ * @kobj: object. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1380: FILE: fs/sysfs/sysfs.c:1335:
+ * The only thing special about this is that we remove any files in $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: fs/sysfs/sysfs.c:1340:
+ struct dentry *dentry = dget(kobj->dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: fs/sysfs/sysfs.c:1341:
+ struct sysfs_dirent *parent_sd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: fs/sysfs/sysfs.c:1342:
+ struct sysfs_dirent *sd, *tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1389: FILE: fs/sysfs/sysfs.c:1344:
+ if (!dentry)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1389: FILE: fs/sysfs/sysfs.c:1344:
+ if (!dentry)
+  return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1390: FILE: fs/sysfs/sysfs.c:1345:
+  return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: fs/sysfs/sysfs.c:1347:
+ pr_debug("sysfs %s: removing dir\n", dentry->d_name.name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: fs/sysfs/sysfs.c:1348:
+ down(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: fs/sysfs/sysfs.c:1349:
+ parent_sd = dentry->d_fsdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: fs/sysfs/sysfs.c:1350:
+ list_for_each_entry_safe(sd, tmp, &parent_sd->s_children, s_sibling) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1395: FILE: fs/sysfs/sysfs.c:1350:
+ list_for_each_entry_safe(sd, tmp, &parent_sd->s_children, s_sibling) {
+  if (!sd->s_element || !(sd->s_type & SYSFS_NOT_PINNED))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: fs/sysfs/sysfs.c:1351:
+  if (!sd->s_element || !(sd->s_type & SYSFS_NOT_PINNED))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1396: FILE: fs/sysfs/sysfs.c:1351:
+  if (!sd->s_element || !(sd->s_type & SYSFS_NOT_PINNED))
+   continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: fs/sysfs/sysfs.c:1352:
+   continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: fs/sysfs/sysfs.c:1353:
+  list_del_init(&sd->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: fs/sysfs/sysfs.c:1354:
+  sysfs_drop_dentry(sd, dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: fs/sysfs/sysfs.c:1355:
+  sysfs_put(sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1401: FILE: fs/sysfs/sysfs.c:1356:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: fs/sysfs/sysfs.c:1366:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: fs/sysfs/sysfs.c:1367:
+ struct dentry *new_dentry, *parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1414: FILE: fs/sysfs/sysfs.c:1369:
+ if (!strcmp(kobject_name(kobj), new_name))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1414: FILE: fs/sysfs/sysfs.c:1369:
+ if (!strcmp(kobject_name(kobj), new_name))
+  return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: fs/sysfs/sysfs.c:1370:
+  return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1417: FILE: fs/sysfs/sysfs.c:1372:
+ if (!kobj->parent)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1417: FILE: fs/sysfs/sysfs.c:1372:
+ if (!kobj->parent)
+  return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1418: FILE: fs/sysfs/sysfs.c:1373:
+  return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1420: FILE: fs/sysfs/sysfs.c:1375:
+ down_write(&sysfs_rename_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1421: FILE: fs/sysfs/sysfs.c:1376:
+ parent = kobj->parent->dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1423: FILE: fs/sysfs/sysfs.c:1378:
+ down(&parent->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1425: FILE: fs/sysfs/sysfs.c:1380:
+ new_dentry = lookup_one_len(new_name, parent, strlen(new_name));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1426: FILE: fs/sysfs/sysfs.c:1381:
+ if (!IS_ERR(new_dentry)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1426: FILE: fs/sysfs/sysfs.c:1381:
+ if (!IS_ERR(new_dentry)) {
+  if (!new_dentry->d_inode) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1427: FILE: fs/sysfs/sysfs.c:1382:
+  if (!new_dentry->d_inode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1427: FILE: fs/sysfs/sysfs.c:1382:
+  if (!new_dentry->d_inode) {
+   error = kobject_set_name(kobj, "%s", new_name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1427: FILE: fs/sysfs/sysfs.c:1382:
+  if (!new_dentry->d_inode) {
[...]
+  } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1428: FILE: fs/sysfs/sysfs.c:1383:
+   error = kobject_set_name(kobj, "%s", new_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1429: FILE: fs/sysfs/sysfs.c:1384:
+   if (!error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#1429: FILE: fs/sysfs/sysfs.c:1384:
+   if (!error) {
+    d_add(new_dentry, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1429: FILE: fs/sysfs/sysfs.c:1384:
+   if (!error) {
[...]
+   } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1430: FILE: fs/sysfs/sysfs.c:1385:
+    d_add(new_dentry, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1431: FILE: fs/sysfs/sysfs.c:1386:
+    d_move(kobj->dentry, new_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1432: FILE: fs/sysfs/sysfs.c:1387:
+   } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#1432: FILE: fs/sysfs/sysfs.c:1387:
+   } else
+    d_drop(new_dentry);

CHECK:BRACES: Unbalanced braces around else statement
#1432: FILE: fs/sysfs/sysfs.c:1387:
+   } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1433: FILE: fs/sysfs/sysfs.c:1388:
+    d_drop(new_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1434: FILE: fs/sysfs/sysfs.c:1389:
+  } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1434: FILE: fs/sysfs/sysfs.c:1389:
+  } else
+   error = -EEXIST;

CHECK:BRACES: Unbalanced braces around else statement
#1434: FILE: fs/sysfs/sysfs.c:1389:
+  } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1435: FILE: fs/sysfs/sysfs.c:1390:
+   error = -EEXIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1436: FILE: fs/sysfs/sysfs.c:1391:
+  dput(new_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1437: FILE: fs/sysfs/sysfs.c:1392:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1438: FILE: fs/sysfs/sysfs.c:1393:
+ up(&parent->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1439: FILE: fs/sysfs/sysfs.c:1394:
+ up_write(&sysfs_rename_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1441: FILE: fs/sysfs/sysfs.c:1396:
+ return error;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'victim->d_parent->d_inode == dir->d_inode'
#1459: FILE: fs/sysfs/sysfs.c:1414:
+		if (victim->d_inode &&
+		    (victim->d_parent->d_inode == dir->d_inode)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1459: FILE: fs/sysfs/sysfs.c:1414:
+		if (victim->d_inode &&
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1469: FILE: fs/sysfs/sysfs.c:1424:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'victim->d_parent->d_inode == dir->d_inode'
#1500: FILE: fs/sysfs/sysfs.c:1455:
+		if (victim->d_inode &&
+		    (victim->d_parent->d_inode == dir->d_inode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1535: FILE: fs/sysfs/sysfs.c:1490:
+ * This file is released undert the GPL v2. $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: fs/sysfs/sysfs.c:1495:
+ struct attribute *const *attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1542: FILE: fs/sysfs/sysfs.c:1497:
+ for (attr = grp->attrs; *attr; attr++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1542: FILE: fs/sysfs/sysfs.c:1497:
+ for (attr = grp->attrs; *attr; attr++)
+  sysfs_hash_and_remove(dir, (*attr)->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1543: FILE: fs/sysfs/sysfs.c:1498:
+  sysfs_hash_and_remove(dir, (*attr)->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1548: FILE: fs/sysfs/sysfs.c:1503:
+ struct attribute *const *attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1549: FILE: fs/sysfs/sysfs.c:1504:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1551: FILE: fs/sysfs/sysfs.c:1506:
+ for (attr = grp->attrs; *attr && !error; attr++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1551: FILE: fs/sysfs/sysfs.c:1506:
+ for (attr = grp->attrs; *attr && !error; attr++) {
+  error = sysfs_add_file(dir, *attr, SYSFS_KOBJ_ATTR);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1551: FILE: fs/sysfs/sysfs.c:1506:
+ for (attr = grp->attrs; *attr && !error; attr++) {
+  error = sysfs_add_file(dir, *attr, SYSFS_KOBJ_ATTR);
+ }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1552: FILE: fs/sysfs/sysfs.c:1507:
+  error = sysfs_add_file(dir, *attr, SYSFS_KOBJ_ATTR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1553: FILE: fs/sysfs/sysfs.c:1508:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: fs/sysfs/sysfs.c:1509:
+ if (error)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1554: FILE: fs/sysfs/sysfs.c:1509:
+ if (error)
+  remove_files(dir, grp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1555: FILE: fs/sysfs/sysfs.c:1510:
+  remove_files(dir, grp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1556: FILE: fs/sysfs/sysfs.c:1511:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1561: FILE: fs/sysfs/sysfs.c:1516:
+ struct dentry *dir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1562: FILE: fs/sysfs/sysfs.c:1517:
+ int error;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1564: FILE: fs/sysfs/sysfs.c:1519:
+	BUG_ON(!kobj || !kobj->dentry);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1566: FILE: fs/sysfs/sysfs.c:1521:
+	if (grp->name) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1570: FILE: fs/sysfs/sysfs.c:1525:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1573: FILE: fs/sysfs/sysfs.c:1528:
+	if ((error = create_files(dir, grp))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1591: FILE: fs/sysfs/sysfs.c:1546:
+ remove_files(dir, grp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1592: FILE: fs/sysfs/sysfs.c:1547:
+ if (grp->name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1592: FILE: fs/sysfs/sysfs.c:1547:
+ if (grp->name)
+  sysfs_remove_subdir(dir);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1593: FILE: fs/sysfs/sysfs.c:1548:
+  sysfs_remove_subdir(dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1595: FILE: fs/sysfs/sysfs.c:1550:
+ dput(dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1605: FILE: fs/sysfs/sysfs.c:1560:
+ .statfs = simple_statfs,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1606: FILE: fs/sysfs/sysfs.c:1561:
+ .drop_inode = generic_delete_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1610: FILE: fs/sysfs/sysfs.c:1565:
+ .s_sibling = LIST_HEAD_INIT(sysfs_root.s_sibling),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1611: FILE: fs/sysfs/sysfs.c:1566:
+ .s_children = LIST_HEAD_INIT(sysfs_root.s_children),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1612: FILE: fs/sysfs/sysfs.c:1567:
+ .s_type = SYSFS_ROOT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1617: FILE: fs/sysfs/sysfs.c:1572:
+ struct inode *inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1618: FILE: fs/sysfs/sysfs.c:1573:
+ struct dentry *root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1620: FILE: fs/sysfs/sysfs.c:1575:
+ sb->s_blocksize = PAGE_CACHE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1621: FILE: fs/sysfs/sysfs.c:1576:
+ sb->s_blocksize_bits = PAGE_CACHE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1622: FILE: fs/sysfs/sysfs.c:1577:
+ sb->s_magic = SYSFS_MAGIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1623: FILE: fs/sysfs/sysfs.c:1578:
+ sb->s_op = &sysfs_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1624: FILE: fs/sysfs/sysfs.c:1579:
+ sb->s_time_gran = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1625: FILE: fs/sysfs/sysfs.c:1580:
+ sysfs_sb = sb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1627: FILE: fs/sysfs/sysfs.c:1582:
+ inode = sysfs_new_inode(S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO, &sysfs_root);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1627: FILE: fs/sysfs/sysfs.c:1582:
+ inode = sysfs_new_inode(S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO, &sysfs_root);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: fs/sysfs/sysfs.c:1583:
+ if (inode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1628: FILE: fs/sysfs/sysfs.c:1583:
+ if (inode) {
+  inode->i_op = &sysfs_dir_inode_operations;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1629: FILE: fs/sysfs/sysfs.c:1584:
+  inode->i_op = &sysfs_dir_inode_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1630: FILE: fs/sysfs/sysfs.c:1585:
+  inode->i_fop = &sysfs_dir_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1632: FILE: fs/sysfs/sysfs.c:1587:
+  inode->i_nlink++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1633: FILE: fs/sysfs/sysfs.c:1588:
+ } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1633: FILE: fs/sysfs/sysfs.c:1588:
+ } else {
+  pr_debug("sysfs: could not get root inode\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1634: FILE: fs/sysfs/sysfs.c:1589:
+  pr_debug("sysfs: could not get root inode\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1635: FILE: fs/sysfs/sysfs.c:1590:
+  return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1636: FILE: fs/sysfs/sysfs.c:1591:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1638: FILE: fs/sysfs/sysfs.c:1593:
+ root = d_alloc_root(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1639: FILE: fs/sysfs/sysfs.c:1594:
+ if (!root) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1639: FILE: fs/sysfs/sysfs.c:1594:
+ if (!root) {
+  pr_debug("%s: could not get root dentry!\n", __FUNCTION__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1640: FILE: fs/sysfs/sysfs.c:1595:
+  pr_debug("%s: could not get root dentry!\n", __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1640: FILE: fs/sysfs/sysfs.c:1595:
+  pr_debug("%s: could not get root dentry!\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1641: FILE: fs/sysfs/sysfs.c:1596:
+  iput(inode);
   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: fs/sysfs/sysfs.c:1596:
+  iput(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: fs/sysfs/sysfs.c:1597:
+  return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: fs/sysfs/sysfs.c:1598:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: fs/sysfs/sysfs.c:1599:
+ root->d_fsdata = &sysfs_root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: fs/sysfs/sysfs.c:1600:
+ sb->s_root = root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1646: FILE: fs/sysfs/sysfs.c:1601:
+ return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1650: FILE: fs/sysfs/sysfs.c:1605:
+static struct super_block *sysfs_get_sb(struct file_system_type *fs_type,
+ int flags, const char *dev_name, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1650: FILE: fs/sysfs/sysfs.c:1605:
+ int flags, const char *dev_name, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1652: FILE: fs/sysfs/sysfs.c:1607:
+ return get_sb_single(fs_type, flags, data, sysfs_fill_super);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1656: FILE: fs/sysfs/sysfs.c:1611:
+ .name = "sysfs",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: fs/sysfs/sysfs.c:1612:
+ .get_sb = sysfs_get_sb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: fs/sysfs/sysfs.c:1613:
+ .kill_sb = kill_litter_super,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1663: FILE: fs/sysfs/sysfs.c:1618:
+ int err = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1665: FILE: fs/sysfs/sysfs.c:1620:
+ sysfs_dir_cachep = kmem_cache_create("sysfs_dir_cache",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: fs/sysfs/sysfs.c:1621:
+ sysfs_dir_cachep = kmem_cache_create("sysfs_dir_cache",
+  sizeof(struct sysfs_dirent), 0, 0, NULL, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1666: FILE: fs/sysfs/sysfs.c:1621:
+  sizeof(struct sysfs_dirent), 0, 0, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1667: FILE: fs/sysfs/sysfs.c:1622:
+ if (!sysfs_dir_cachep)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1667: FILE: fs/sysfs/sysfs.c:1622:
+ if (!sysfs_dir_cachep)
+  goto out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1668: FILE: fs/sysfs/sysfs.c:1623:
+  goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1670: FILE: fs/sysfs/sysfs.c:1625:
+ err = register_filesystem(&sysfs_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1671: FILE: fs/sysfs/sysfs.c:1626:
+ if (err)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1671: FILE: fs/sysfs/sysfs.c:1626:
+ if (err)
+  goto out_err;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1672: FILE: fs/sysfs/sysfs.c:1627:
+  goto out_err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: fs/sysfs/sysfs.c:1628:
+ sysfs_mount = kern_mount(&sysfs_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1674: FILE: fs/sysfs/sysfs.c:1629:
+ if (IS_ERR(sysfs_mount)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1674: FILE: fs/sysfs/sysfs.c:1629:
+ if (IS_ERR(sysfs_mount)) {
+  printk(KERN_ERR "sysfs: could not mount!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1675: FILE: fs/sysfs/sysfs.c:1630:
+  printk(KERN_ERR "sysfs: could not mount!\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1675: FILE: fs/sysfs/sysfs.c:1630:
+  printk(KERN_ERR "sysfs: could not mount!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1676: FILE: fs/sysfs/sysfs.c:1631:
+  err = PTR_ERR(sysfs_mount);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: fs/sysfs/sysfs.c:1632:
+  sysfs_mount = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1678: FILE: fs/sysfs/sysfs.c:1633:
+  unregister_filesystem(&sysfs_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1679: FILE: fs/sysfs/sysfs.c:1634:
+  goto out_err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: fs/sysfs/sysfs.c:1635:
+ }$

WARNING:INDENTED_LABEL: labels should not be indented
#1681: FILE: fs/sysfs/sysfs.c:1636:
+      out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1682: FILE: fs/sysfs/sysfs.c:1637:
+ return err;$

WARNING:INDENTED_LABEL: labels should not be indented
#1683: FILE: fs/sysfs/sysfs.c:1638:
+      out_err:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1684: FILE: fs/sysfs/sysfs.c:1639:
+ kmem_cache_destroy(sysfs_dir_cachep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1685: FILE: fs/sysfs/sysfs.c:1640:
+ sysfs_dir_cachep = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1686: FILE: fs/sysfs/sysfs.c:1641:
+ goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1697: FILE: fs/sysfs/sysfs.c:1652:
+ struct dentry *dentry = kobj->dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1698: FILE: fs/sysfs/sysfs.c:1653:
+ int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1700: FILE: fs/sysfs/sysfs.c:1655:
+ BUG_ON(!kobj || !kobj->dentry || !name);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1700: FILE: fs/sysfs/sysfs.c:1655:
+ BUG_ON(!kobj || !kobj->dentry || !name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1702: FILE: fs/sysfs/sysfs.c:1657:
+ down(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1703: FILE: fs/sysfs/sysfs.c:1658:
+ error = sysfs_add_link(dentry, name, target);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1704: FILE: fs/sysfs/sysfs.c:1659:
+ up(&dentry->d_inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1705: FILE: fs/sysfs/sysfs.c:1660:
+ return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1710: FILE: fs/sysfs/sysfs.c:1665:
+ sysfs_hash_and_remove(kobj->dentry, name);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1713: FILE: fs/sysfs/sysfs.c:1668:
+EXPORT_SYMBOL_GPL(sysfs_create_bin_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1714: FILE: fs/sysfs/sysfs.c:1669:
+EXPORT_SYMBOL_GPL(sysfs_remove_bin_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1715: FILE: fs/sysfs/sysfs.c:1670:
+EXPORT_SYMBOL_GPL(sysfs_create_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1716: FILE: fs/sysfs/sysfs.c:1671:
+EXPORT_SYMBOL_GPL(sysfs_remove_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1717: FILE: fs/sysfs/sysfs.c:1672:
+EXPORT_SYMBOL_GPL(sysfs_rename_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1718: FILE: fs/sysfs/sysfs.c:1673:
+EXPORT_SYMBOL_GPL(sysfs_chmod_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1719: FILE: fs/sysfs/sysfs.c:1674:
+EXPORT_SYMBOL_GPL(sysfs_create_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1720: FILE: fs/sysfs/sysfs.c:1675:
+EXPORT_SYMBOL_GPL(sysfs_remove_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1721: FILE: fs/sysfs/sysfs.c:1676:
+EXPORT_SYMBOL_GPL(sysfs_update_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1722: FILE: fs/sysfs/sysfs.c:1677:
+EXPORT_SYMBOL_GPL(sysfs_create_group);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1723: FILE: fs/sysfs/sysfs.c:1678:
+EXPORT_SYMBOL_GPL(sysfs_remove_group);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1724: FILE: fs/sysfs/sysfs.c:1679:
+EXPORT_SYMBOL_GPL(sysfs_create_link);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1725: FILE: fs/sysfs/sysfs.c:1680:
+EXPORT_SYMBOL_GPL(sysfs_remove_link);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155980.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 766 warnings, 54 checks, 1686 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155980.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
