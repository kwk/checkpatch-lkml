WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ru --exclude-from=/home/anton/ppc64/exclude linux-2.4_tux/arch/ppc/kernel/misc.S linux-2.4_tux_work/arch/ppc/kernel/misc.S

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#122: FILE: net/tux/accept.c:67:
+		printk(KERN_ERR "TUX: error %d binding socket. This means that probably some other process is (or was a short time ago) using addr %s://%d.%d.%d.%d:%d.\n", err, proto->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: net/tux/accept.c:68:
+		printk(KERN_ERR "TUX: error %d binding socket. This means that probably some other process is (or was a short time ago) using addr %s://%d.%d.%d.%d:%d.\n", err, proto->name,
+#ifdef __BIG_ENDIAN

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: net/tux/accept.c:69:
+^I^I^IIP(0), IP(1), IP(2), IP(3), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: net/tux/accept.c:71:
+^I^I^IIP(3), IP(2), IP(1), IP(0), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: net/tux/accept.c:96:
+^I^Inr, proto->name, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: net/tux/accept.c:98:
+^I^IIP(0), IP(1), IP(2), IP(3), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: net/tux/accept.c:100:
+^I^IIP(3), IP(2), IP(1), IP(0), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: net/tux/proc.c:1009:
+^I^IIP(0), IP(1), IP(2), IP(3), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: net/tux/proc.c:1011:
+^I^IIP(3), IP(2), IP(1), IP(0), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != LOG_ID1'
#233: FILE: tux2w3c.c:167:
+		if ((id != LOG_ID1) && (id != LOG_ID2) &&
+				(id != LOG_ID3) && (id != LOG_ID4))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != LOG_ID2'
#233: FILE: tux2w3c.c:167:
+		if ((id != LOG_ID1) && (id != LOG_ID2) &&
+				(id != LOG_ID3) && (id != LOG_ID4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != LOG_ID3'
#233: FILE: tux2w3c.c:167:
+		if ((id != LOG_ID1) && (id != LOG_ID2) &&
+				(id != LOG_ID3) && (id != LOG_ID4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != LOG_ID4'
#233: FILE: tux2w3c.c:167:
+		if ((id != LOG_ID1) && (id != LOG_ID2) &&
+				(id != LOG_ID3) && (id != LOG_ID4))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: tux2w3c.c:168:
+		if ((id != LOG_ID1) && (id != LOG_ID2) &&
+				(id != LOG_ID3) && (id != LOG_ID4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == LOG_ID2'
#238: FILE: tux2w3c.c:171:
+		if ((id == LOG_ID2) || (id == LOG_ID4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == LOG_ID4'
#238: FILE: tux2w3c.c:171:
+		if ((id == LOG_ID2) || (id == LOG_ID4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == LOG_ID4'
#242: FILE: tux2w3c.c:174:
+		if ((id == LOG_ID4) || (id == LOG_ID3))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == LOG_ID3'
#242: FILE: tux2w3c.c:174:
+		if ((id == LOG_ID4) || (id == LOG_ID3))

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#253: FILE: tuxmodule.h:111:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#271: FILE: tuxmodule.h:130:
+extern __inline__ void TUXAPI_down (int *sem)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#271: FILE: tuxmodule.h:130:
+extern __inline__ void TUXAPI_down (int *sem)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: tuxmodule.h:136:
+extern __inline__ void TUXAPI_up (int *sem)

WARNING:INLINE: plain inline is preferred over __inline__
#277: FILE: tuxmodule.h:136:
+extern __inline__ void TUXAPI_up (int *sem)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#279: FILE: tuxmodule.h:138:
+	*((volatile int *)sem) = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: tuxmodule.h:143:
+extern __inline__ void TUXAPI_down (int *sem)

WARNING:INLINE: plain inline is preferred over __inline__
#284: FILE: tuxmodule.h:143:
+extern __inline__ void TUXAPI_down (int *sem)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#288: FILE: tuxmodule.h:147:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#289: FILE: tuxmodule.h:148:
+	"b		2f\n\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#300: FILE: tuxmodule.h:159:
+	: "r"((volatile int *)sem), "r"(1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: tuxmodule.h:163:
+extern __inline__ void TUXAPI_up (int *sem)

WARNING:INLINE: plain inline is preferred over __inline__
#304: FILE: tuxmodule.h:163:
+extern __inline__ void TUXAPI_up (int *sem)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#306: FILE: tuxmodule.h:165:
+	__asm__ __volatile__("lwsync": : :"memory");
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#306: FILE: tuxmodule.h:165:
+	__asm__ __volatile__("lwsync": : :"memory");
 	                                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#307: FILE: tuxmodule.h:166:
+	*((volatile int *)sem) = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: tuxmodule.h:173:
+extern __inline__ int test_and_set_bit(int nr, volatile void * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#314: FILE: tuxmodule.h:173:
+extern __inline__ int test_and_set_bit(int nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#314: FILE: tuxmodule.h:173:
+extern __inline__ int test_and_set_bit(int nr, volatile void * addr)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 16 warnings, 12 checks, 248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
