WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: drivers/block/as-iosched.c:2075:
+^I^I.elevator_merge_fn = ^I^Ias_merge,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: drivers/block/as-iosched.c:2081:
+^I^I.elevator_requeue_req_fn = ^Ias_requeue_request,$

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#435: FILE: drivers/block/cfq-iosched.c:748:
+	if (crq_pool)
+		kmem_cache_destroy(crq_pool);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#437: FILE: drivers/block/cfq-iosched.c:750:
+	if (cfq_mpool)
+		mempool_destroy(cfq_mpool);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#439: FILE: drivers/block/cfq-iosched.c:752:
+	if (cfq_pool)
+		kmem_cache_destroy(cfq_pool);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: drivers/block/cfq-iosched.c:753:
+}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: drivers/block/cfq-iosched.c:880:
+^I^I.elevator_merge_fn = ^I^Icfq_merge,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: drivers/block/deadline-iosched.c:911:
+^I^I.elevator_merge_fn = ^I^Ideadline_merge,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#669: FILE: drivers/block/deadline-iosched.c:921:
+^I^I.elevator_put_req_fn = ^I^Ideadline_put_request,$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*eq)...) over kmalloc(sizeof(struct elevator_queue)...)
#826: FILE: drivers/block/elevator.c:151:
+	eq = kmalloc(sizeof(struct elevator_queue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1068: FILE: drivers/block/elevator.c:449:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1073: FILE: drivers/block/elevator.c:454:
+	printk("io scheduler %s registered\n", e->elevator_name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1092: FILE: drivers/block/elevator.c:473:
+		printk("elevator: out of memory\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1144: FILE: drivers/block/elevator.c:525:
+		printk("elevator: type %s not found\n", elevator_name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1165: FILE: drivers/block/elevator.c:546:
+			len += sprintf(name+len, "[%s] ", elv->elevator_name);
 			                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1167: FILE: drivers/block/elevator.c:548:
+			len += sprintf(name+len, "%s ", __e->elevator_name);
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1171: FILE: drivers/block/elevator.c:552:
+	len += sprintf(len+name, "\n");
 	                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1249: FILE: drivers/block/ll_rw_blk.c:1507:
+		printk("Using %s io scheduler\n", chosen_elevator);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1257: FILE: drivers/block/ll_rw_blk.c:1624:
+	if (unlikely(waitqueue_active(&rl->drain)) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: drivers/block/ll_rw_blk.c:2527:
+		prepare_to_wait_exclusive(&rl->drain, &wait,
+				TASK_UNINTERRUPTIBLE);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1405: FILE: drivers/block/ll_rw_blk.c:3336:
+	.attr = {.name = "scheduler", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1494: FILE: include/linux/blkdev.h:23:
+typedef struct elevator_queue elevator_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1527: FILE: include/linux/blkdev.h:622:
+extern void blk_wait_queue_drained(request_queue_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1527: FILE: include/linux/blkdev.h:622:
+extern void blk_wait_queue_drained(request_queue_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1528: FILE: include/linux/blkdev.h:623:
+extern void blk_finish_queue_drain(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1528: FILE: include/linux/blkdev.h:623:
+extern void blk_finish_queue_drain(request_queue_t *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1561: FILE: include/linux/elevator.h:59:
+struct elevator_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#1572: FILE: include/linux/elevator.h:69:
+ * each queue has an elevator_queue assoicated with it
                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1575: FILE: include/linux/elevator.h:72:
+struct elevator_queue
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1602: FILE: include/linux/elevator.h:104:
+extern int elv_register(struct elevator_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct elevator_type *' should also have an identifier name
#1602: FILE: include/linux/elevator.h:104:
+extern int elv_register(struct elevator_type *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1603: FILE: include/linux/elevator.h:105:
+extern void elv_unregister(struct elevator_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct elevator_type *' should also have an identifier name
#1603: FILE: include/linux/elevator.h:105:
+extern void elv_unregister(struct elevator_type *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1610: FILE: include/linux/elevator.h:110:
+extern ssize_t elv_iosched_show(request_queue_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1610: FILE: include/linux/elevator.h:110:
+extern ssize_t elv_iosched_show(request_queue_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1610: FILE: include/linux/elevator.h:110:
+extern ssize_t elv_iosched_show(request_queue_t *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1611: FILE: include/linux/elevator.h:111:
+extern ssize_t elv_iosched_store(request_queue_t *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1611: FILE: include/linux/elevator.h:111:
+extern ssize_t elv_iosched_store(request_queue_t *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1611: FILE: include/linux/elevator.h:111:
+extern ssize_t elv_iosched_store(request_queue_t *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1611: FILE: include/linux/elevator.h:111:
+extern ssize_t elv_iosched_store(request_queue_t *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1615: FILE: include/linux/elevator.h:113:
+extern int elevator_init(request_queue_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1615: FILE: include/linux/elevator.h:113:
+extern int elevator_init(request_queue_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1615: FILE: include/linux/elevator.h:113:
+extern int elevator_init(request_queue_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/linux/elevator.h:114:
+extern void elevator_exit(elevator_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elevator_t *' should also have an identifier name
#1616: FILE: include/linux/elevator.h:114:
+extern void elevator_exit(elevator_t *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249135.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 29 warnings, 13 checks, 1437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249135.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
