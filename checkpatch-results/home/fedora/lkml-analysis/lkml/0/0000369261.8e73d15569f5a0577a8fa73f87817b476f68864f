ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#80: FILE: mm/slab.c:1200:
+static void drain_array_locked(kmem_cache_t* cachep, struct array_cache *ac);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: mm/slab.c:1666:
+		struct array_cache *shared_array = l3->shared;
+		if (shared_array->avail) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: mm/slab.c:1672:
+			memcpy(ac_entry(ac), &ac_entry(shared_array)[shared_array->avail],
+					sizeof(void*)*batchcount);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#126: FILE: mm/slab.c:1672:
+					sizeof(void*)*batchcount);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#126: FILE: mm/slab.c:1672:
+					sizeof(void*)*batchcount);
 					             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#179: FILE: mm/slab.c:1855:
+		int max = shared_array->limit-shared_array->avail;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: mm/slab.c:1856:
+		int max = shared_array->limit-shared_array->avail;
+		if (max) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: mm/slab.c:1860:
+			memcpy(&ac_entry(shared_array)[shared_array->avail],
+					&ac_entry(ac)[0],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#185: FILE: mm/slab.c:1861:
+					sizeof(void*)*batchcount);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: mm/slab.c:1861:
+					sizeof(void*)*batchcount);
 					             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#232: FILE: mm/slab.c:2170:
+	new_shared = kmalloc(sizeof(void*)*batchcount*SHARED_ARRAY_FACTOR+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: mm/slab.c:2170:
+	new_shared = kmalloc(sizeof(void*)*batchcount*SHARED_ARRAY_FACTOR+
 	                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: mm/slab.c:2170:
+	new_shared = kmalloc(sizeof(void*)*batchcount*SHARED_ARRAY_FACTOR+
 	                                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#232: FILE: mm/slab.c:2170:
+	new_shared = kmalloc(sizeof(void*)*batchcount*SHARED_ARRAY_FACTOR+
 	                                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: mm/slab.c:2174:
+		struct array_cache *old;
+		new_shared->avail = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#237: FILE: mm/slab.c:2175:
+		new_shared->limit = batchcount*SHARED_ARRAY_FACTOR;
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: mm/slab.c:2238:
+		tofree = (ac->limit+4)/5;
 		                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#265: FILE: mm/slab.c:2238:
+		tofree = (ac->limit+4)/5;
 		                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#266: FILE: mm/slab.c:2239:
+		if (tofree > ac->avail) {
+			tofree = (ac->avail+1)/2;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#267: FILE: mm/slab.c:2240:
+			tofree = (ac->avail+1)/2;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#267: FILE: mm/slab.c:2240:
+			tofree = (ac->avail+1)/2;
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: mm/slab.c:2247:
+		memmove(&ac_entry(ac)[0], &ac_entry(ac)[tofree],
+					sizeof(void*)*ac->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#274: FILE: mm/slab.c:2247:
+					sizeof(void*)*ac->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#274: FILE: mm/slab.c:2247:
+					sizeof(void*)*ac->avail);
 					             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#286: FILE: mm/slab.c:2259:
+		tofree = (ac->limit+4)/5;
 		                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#286: FILE: mm/slab.c:2259:
+		tofree = (ac->limit+4)/5;
 		                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: mm/slab.c:2260:
+		if (tofree > ac->avail) {
+			tofree = (ac->avail+1)/2;
+		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#288: FILE: mm/slab.c:2261:
+			tofree = (ac->avail+1)/2;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#288: FILE: mm/slab.c:2261:
+			tofree = (ac->avail+1)/2;
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: mm/slab.c:2266:
+		memmove(&ac_entry(ac)[0], &ac_entry(ac)[tofree],
+					sizeof(void*)*ac->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#293: FILE: mm/slab.c:2266:
+					sizeof(void*)*ac->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#293: FILE: mm/slab.c:2266:
+					sizeof(void*)*ac->avail);
 					             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#297: FILE: mm/slab.c:2270:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 5 warnings, 22 checks, 265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
