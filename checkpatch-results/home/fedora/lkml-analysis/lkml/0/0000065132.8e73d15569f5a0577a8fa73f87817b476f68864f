WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: usr/include/arch/s390/klibc/archconfig.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: usr/include/arch/s390/klibc/archsetjmp.h:1:
+/*

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#79: FILE: usr/include/arch/s390/klibc/archsetjmp.h:8:
+#ifndef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#82: FILE: usr/include/arch/s390/klibc/archsetjmp.h:11:
+	uint32_t __gregs[10];	/* general registers r6-r15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#83: FILE: usr/include/arch/s390/klibc/archsetjmp.h:12:
+	uint64_t __fpregs[2];	/* fp registers f4 and f6   */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#89: FILE: usr/include/arch/s390/klibc/archsetjmp.h:18:
+	uint64_t __gregs[10]; /* general registers r6-r15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#90: FILE: usr/include/arch/s390/klibc/archsetjmp.h:19:
+	uint64_t __fpregs[4]; /* fp registers f1, f3, f5, f7 */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#95: FILE: usr/include/arch/s390/klibc/archsetjmp.h:24:
+typedef struct __jmp_buf jmp_buf[1];

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: usr/include/arch/s390/klibc/archsignal.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: usr/include/arch/s390/klibc/archstat.h:1:
+#ifndef _KLIBC_ARCHSTAT_H

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#131: FILE: usr/include/arch/s390/klibc/archstat.h:8:
+#ifndef __s390x__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: usr/include/arch/s390/klibc/archstat.h:14:
+	__stdev64	(st_dev);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: usr/include/arch/s390/klibc/archstat.h:15:
+        unsigned int    __pad1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: usr/include/arch/s390/klibc/archstat.h:15:
+        unsigned int    __pad1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: usr/include/arch/s390/klibc/archstat.h:17:
+        unsigned long   __st_ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: usr/include/arch/s390/klibc/archstat.h:17:
+        unsigned long   __st_ino;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: usr/include/arch/s390/klibc/archstat.h:18:
+        unsigned int    st_mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: usr/include/arch/s390/klibc/archstat.h:18:
+        unsigned int    st_mode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: usr/include/arch/s390/klibc/archstat.h:19:
+        unsigned int    st_nlink;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: usr/include/arch/s390/klibc/archstat.h:19:
+        unsigned int    st_nlink;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: usr/include/arch/s390/klibc/archstat.h:20:
+        unsigned long   st_uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: usr/include/arch/s390/klibc/archstat.h:20:
+        unsigned long   st_uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: usr/include/arch/s390/klibc/archstat.h:21:
+        unsigned long   st_gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: usr/include/arch/s390/klibc/archstat.h:21:
+        unsigned long   st_gid;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: usr/include/arch/s390/klibc/archstat.h:22:
+	__stdev64	(st_rdev);

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: usr/include/arch/s390/klibc/archstat.h:23:
+        unsigned int    __pad3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: usr/include/arch/s390/klibc/archstat.h:23:
+        unsigned int    __pad3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: usr/include/arch/s390/klibc/archstat.h:24:
+        long long^Ist_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: usr/include/arch/s390/klibc/archstat.h:24:
+        long long^Ist_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: usr/include/arch/s390/klibc/archstat.h:25:
+        unsigned long   st_blksize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: usr/include/arch/s390/klibc/archstat.h:25:
+        unsigned long   st_blksize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: usr/include/arch/s390/klibc/archstat.h:26:
+        unsigned char   __pad4[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: usr/include/arch/s390/klibc/archstat.h:26:
+        unsigned char   __pad4[4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: usr/include/arch/s390/klibc/archstat.h:27:
+        unsigned long   __pad5;     /* future possible st_blocks high bits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: usr/include/arch/s390/klibc/archstat.h:27:
+        unsigned long   __pad5;     /* future possible st_blocks high bits */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: usr/include/arch/s390/klibc/archstat.h:28:
+        unsigned long   st_blocks;  /* Number 512-byte blocks allocated. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: usr/include/arch/s390/klibc/archstat.h:28:
+        unsigned long   st_blocks;  /* Number 512-byte blocks allocated. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: usr/include/arch/s390/klibc/archstat.h:32:
+        unsigned long long^Ist_ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: usr/include/arch/s390/klibc/archstat.h:32:
+        unsigned long long^Ist_ino;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: usr/include/arch/s390/klibc/archstat.h:38:
+	__stdev64	(st_dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: usr/include/arch/s390/klibc/archstat.h:45:
+	unsigned int	__pad1;
+	__stdev64	(st_rdev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#168: FILE: usr/include/arch/s390/klibc/archstat.h:45:
+	__stdev64	(st_rdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: usr/include/arch/s390/klibc/archsys.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#196: FILE: usr/include/arch/s390/klibc/archsys.h:11:
+/* S/390 only has five syscall parameters, and uses a structure for
+   6-argument syscalls. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: usr/include/arch/s390/klibc/archsys.h:11:
+   6-argument syscalls. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
                                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg6' - possible side-effects?
#200: FILE: usr/include/arch/s390/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,\
+                  type4,arg4,type5,arg5,type6,arg6)          \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \
+	unsigned long  __arg[6] = {			     \
+		(unsigned long) arg1, 			     \
+		(unsigned long) arg2, 			     \
+		(unsigned long) arg3, 			     \
+		(unsigned long) arg4, 			     \
+		(unsigned long) arg5,			     \
+		(unsigned long) arg6 			     \
+	};						     \
+	register void *__argp asm("2") = &__arg;	     \
+	long __res;					     \
+	__asm__ __volatile__ (               	             \
+                "    svc %b1\n"                              \
+                "    la  %0,2"                               \
+                : "=d" (__res)                               \
+                : "i" (__NR_##name),                         \
+                  "d" (__argp)				     \
+		: _svc_clobber);			     \
+	__syscall_return(type, __res);			     \
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: usr/include/arch/s390/klibc/archsys.h:16:
+                  type4,arg4,type5,arg5,type6,arg6)          \
                                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#202: FILE: usr/include/arch/s390/klibc/archsys.h:17:
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
+          type5 arg5, type6 arg6) {			     \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: usr/include/arch/s390/klibc/archsys.h:18:
+          type5 arg5, type6 arg6) {^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: usr/include/arch/s390/klibc/archsys.h:18:
+          type5 arg5, type6 arg6) {^I^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: usr/include/arch/s390/klibc/archsys.h:20:
+^I^I(unsigned long) arg1, ^I^I^I     \$

CHECK:SPACING: No space is necessary after a cast
#205: FILE: usr/include/arch/s390/klibc/archsys.h:20:
+		(unsigned long) arg1, 			     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: usr/include/arch/s390/klibc/archsys.h:21:
+^I^I(unsigned long) arg2, ^I^I^I     \$

CHECK:SPACING: No space is necessary after a cast
#206: FILE: usr/include/arch/s390/klibc/archsys.h:21:
+		(unsigned long) arg2, 			     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: usr/include/arch/s390/klibc/archsys.h:22:
+^I^I(unsigned long) arg3, ^I^I^I     \$

CHECK:SPACING: No space is necessary after a cast
#207: FILE: usr/include/arch/s390/klibc/archsys.h:22:
+		(unsigned long) arg3, 			     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: usr/include/arch/s390/klibc/archsys.h:23:
+^I^I(unsigned long) arg4, ^I^I^I     \$

CHECK:SPACING: No space is necessary after a cast
#208: FILE: usr/include/arch/s390/klibc/archsys.h:23:
+		(unsigned long) arg4, 			     \

CHECK:SPACING: No space is necessary after a cast
#209: FILE: usr/include/arch/s390/klibc/archsys.h:24:
+		(unsigned long) arg5,			     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: usr/include/arch/s390/klibc/archsys.h:25:
+^I^I(unsigned long) arg6 ^I^I^I     \$

CHECK:SPACING: No space is necessary after a cast
#210: FILE: usr/include/arch/s390/klibc/archsys.h:25:
+		(unsigned long) arg6 			     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: usr/include/arch/s390/klibc/archsys.h:29:
+^I__asm__ __volatile__ (               ^I             \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: usr/include/arch/s390/klibc/archsys.h:30:
+                "    svc %b1\n"                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: usr/include/arch/s390/klibc/archsys.h:30:
+                "    svc %b1\n"                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: usr/include/arch/s390/klibc/archsys.h:31:
+                "    la  %0,2"                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: usr/include/arch/s390/klibc/archsys.h:31:
+                "    la  %0,2"                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: usr/include/arch/s390/klibc/archsys.h:32:
+                : "=d" (__res)                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: usr/include/arch/s390/klibc/archsys.h:32:
+                : "=d" (__res)                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: usr/include/arch/s390/klibc/archsys.h:33:
+                : "i" (__NR_##name),                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: usr/include/arch/s390/klibc/archsys.h:33:
+                : "i" (__NR_##name),                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: usr/include/arch/s390/klibc/archsys.h:34:
+                  "d" (__argp)^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: usr/include/arch/s390/klibc/archsys.h:34:
+                  "d" (__argp)^I^I^I^I     \$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#307: FILE: usr/klibc/arch/s390/crt0.S:1:
+#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#348: FILE: usr/klibc/arch/s390/mmap.c:1:
+#include <errno.h>

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#361: FILE: usr/klibc/arch/s390/mmap.c:14:
+#ifndef __s390x__

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: usr/klibc/arch/s390/mmap.c:45:
+void * mmap(void * addr, size_t len, int prot, int flags,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: usr/klibc/arch/s390/mmap.c:45:
+void * mmap(void * addr, size_t len, int prot, int flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: usr/klibc/arch/s390/mmap.c:46:
+void * mmap(void * addr, size_t len, int prot, int flags,
+						 int fd, off_t offset)

CHECK:SPACING: No space is necessary after a cast
#396: FILE: usr/klibc/arch/s390/mmap.c:49:
+		(unsigned long) addr,

CHECK:SPACING: No space is necessary after a cast
#397: FILE: usr/klibc/arch/s390/mmap.c:50:
+		(unsigned long) len,

CHECK:SPACING: No space is necessary after a cast
#398: FILE: usr/klibc/arch/s390/mmap.c:51:
+		(unsigned long) prot,

CHECK:SPACING: No space is necessary after a cast
#399: FILE: usr/klibc/arch/s390/mmap.c:52:
+		(unsigned long) flags,

CHECK:SPACING: No space is necessary after a cast
#400: FILE: usr/klibc/arch/s390/mmap.c:53:
+		(unsigned long) fd,

CHECK:SPACING: No space is necessary after a cast
#401: FILE: usr/klibc/arch/s390/mmap.c:54:
+		(unsigned long) offset,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#408: FILE: usr/klibc/arch/s390/mmap.c:61:
+	__asm__ __volatile__ (

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#429: FILE: usr/klibc/arch/s390/setjmp.S:1:
+#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#501: FILE: usr/klibc/arch/s390/syscall.c:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 44 warnings, 27 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
