WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#133: 
   Zone     4kB     8kB    16kB    32kB    64kB   128kB   256kB   512kB  1024kB  2048kB Tot Pages/kb

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: linux/mm.h:422:
+extern int proc_memareas(char * buffer);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: linux/mm.h:422:
+extern int proc_memareas(char * buffer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: page_alloc.c:681:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: page_alloc.c:683:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: page_alloc.c:684:
+int proc_memareas_core(char * buffer, pg_data_t *pgdat)

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: page_alloc.c:686:
+ ^Iunsigned long order;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#235: FILE: page_alloc.c:686:
+ ^Iunsigned long order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: page_alloc.c:686:
+ ^Iunsigned long order;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: page_alloc.c:687:
+	unsigned type;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#238: FILE: page_alloc.c:689:
+	int len=0;
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: page_alloc.c:691:
+	len += sprintf(buffer+len,
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: page_alloc.c:692:
+		       "%7s ","Zone");
 		             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#243: FILE: page_alloc.c:694:
+	for (order = 0; order < MAX_ORDER; order++) {
+	  len += sprintf(buffer+len,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: page_alloc.c:695:
+	  len += sprintf(buffer+len,
 	                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#246: FILE: page_alloc.c:697:
+			 (PAGE_SIZE>>10) << order);
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: page_alloc.c:700:
+	len += sprintf(buffer+len,
 	                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: page_alloc.c:706:
+ ^I^Iunsigned long nr, total, flags, smaller, pages[MAX_ORDER];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: page_alloc.c:706:
+ ^I^Iunsigned long nr, total, flags, smaller, pages[MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: page_alloc.c:706:
+ ^I^Iunsigned long nr, total, flags, smaller, pages[MAX_ORDER];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: page_alloc.c:708:
+		len += sprintf(buffer+len,
 		                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: page_alloc.c:715:
+^I^I ^Ifor (order = 0; order < MAX_ORDER; order++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: page_alloc.c:715:
+^I^I ^Ifor (order = 0; order < MAX_ORDER; order++) {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#278: FILE: page_alloc.c:729:
+				len += sprintf(buffer+len,
 				                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: page_alloc.c:734:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#284: FILE: page_alloc.c:735:
+			len+=sprintf(buffer+len,
 			   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: page_alloc.c:735:
+			len+=sprintf(buffer+len,
 			                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: page_alloc.c:741:
+^I^I ^Ifor (order = 0; order < MAX_ORDER; order++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: page_alloc.c:741:
+^I^I ^Ifor (order = 0; order < MAX_ORDER; order++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#290: FILE: page_alloc.c:741:
+		 	for (order = 0; order < MAX_ORDER; order++) {
[...]
+			  len+=sprintf(buffer+len,

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#296: FILE: page_alloc.c:747:
+			  len+=sprintf(buffer+len,
 			     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#296: FILE: page_alloc.c:747:
+			  len+=sprintf(buffer+len,
 			                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#298: FILE: page_alloc.c:749:
+				       ((smaller*100)+(total>>1))
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: page_alloc.c:749:
+				       ((smaller*100)+(total>>1))
 				                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#298: FILE: page_alloc.c:749:
+				       ((smaller*100)+(total>>1))
 				                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:ExV)
#299: FILE: page_alloc.c:750:
+				       /(total?total:1));
 				       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#299: FILE: page_alloc.c:750:
+				       /(total?total:1));
 				              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#299: FILE: page_alloc.c:750:
+				       /(total?total:1));
 				                    ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#304: FILE: page_alloc.c:755:
+			len+=sprintf(buffer+len, "  %8lukB\n",
 			   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#304: FILE: page_alloc.c:755:
+			len+=sprintf(buffer+len, "  %8lukB\n",
 			                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#305: FILE: page_alloc.c:756:
+				     total * (PAGE_SIZE>>10)
 				                       ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#308: FILE: page_alloc.c:759:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#308: FILE: page_alloc.c:759:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#309: FILE: page_alloc.c:760:
+			len+=sprintf(buffer+len,
 			   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#309: FILE: page_alloc.c:760:
+			len+=sprintf(buffer+len,
 			                   ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#314: FILE: page_alloc.c:765:
+
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: page_alloc.c:770:
+int proc_memareas(char * buffer)

ERROR:SPACING: space prohibited after that open parenthesis '('
#321: FILE: page_alloc.c:772:
+	return ( proc_memareas_core(buffer, pgdat_list) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#321: FILE: page_alloc.c:772:
+	return ( proc_memareas_core(buffer, pgdat_list) );

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#321: FILE: page_alloc.c:772:
+	return ( proc_memareas_core(buffer, pgdat_list) );

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: proc/proc_misc.c:139:
+static int memareas_read_proc(char *page, char **start, off_t off,
+		       int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: proc/proc_misc.c:142:
+	int len = proc_memareas(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#340: FILE: proc/proc_misc.c:145:
+
+

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#365: FILE: page_alloc.c:72:
+	int addfront=1;
 	            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#373: FILE: page_alloc.c:116:
 		if (!__test_and_change_bit(index, area->map))
+		 {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 19)
#373: FILE: page_alloc.c:116:
 		if (!__test_and_change_bit(index, area->map))
[...]
+		    */

WARNING:TABSTOP: Statements should start on a tabstop
#378: FILE: page_alloc.c:117:
+		 {

WARNING:TABSTOP: Statements should start on a tabstop
#391: FILE: page_alloc.c:130:
+		   if (mask & 1) /* not order 0 merge */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (19, 21)
#391: FILE: page_alloc.c:130:
+		   if (mask & 1) /* not order 0 merge */
+		     addfront = ( !test_bit((index^1)<<1,

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#392: FILE: page_alloc.c:131:
+		     addfront = ( !test_bit((index^1)<<1,
 		                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#392: FILE: page_alloc.c:131:
+		     addfront = ( !test_bit((index^1)<<1,
 		                                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#392: FILE: page_alloc.c:131:
+		     addfront = ( !test_bit((index^1)<<1,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#393: FILE: page_alloc.c:132:
+					    (area-1)->map) &&
 					         ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#394: FILE: page_alloc.c:133:
+				  !test_bit(((index^1)<<1) | 1,
 				                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#394: FILE: page_alloc.c:133:
+				  !test_bit(((index^1)<<1) | 1,
 				                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: page_alloc.c:134:
+					    (area-1)->map) );
 					         ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#395: FILE: page_alloc.c:134:
+					    (area-1)->map) );

WARNING:TABSTOP: Statements should start on a tabstop
#396: FILE: page_alloc.c:135:
+		   else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (19, 21)
#396: FILE: page_alloc.c:135:
+		   else
+		     addfront = !( PageInactiveDirty(base+(page_idx^-mask)) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#397: FILE: page_alloc.c:136:
+		     addfront = !( PageInactiveDirty(base+(page_idx^-mask)) ||
 		                                         ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxO)
#397: FILE: page_alloc.c:136:
+		     addfront = !( PageInactiveDirty(base+(page_idx^-mask)) ||
 		                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#397: FILE: page_alloc.c:136:
+		     addfront = !( PageInactiveDirty(base+(page_idx^-mask)) ||
 		                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#397: FILE: page_alloc.c:136:
+		     addfront = !( PageInactiveDirty(base+(page_idx^-mask)) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#398: FILE: page_alloc.c:137:
+				   PageInactiveClean(base+(page_idx^-mask)) );
 				                         ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxO)
#398: FILE: page_alloc.c:137:
+				   PageInactiveClean(base+(page_idx^-mask)) );
 				                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#398: FILE: page_alloc.c:137:
+				   PageInactiveClean(base+(page_idx^-mask)) );
 				                                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#398: FILE: page_alloc.c:137:
+				   PageInactiveClean(base+(page_idx^-mask)) );

WARNING:TABSTOP: Statements should start on a tabstop
#399: FILE: page_alloc.c:138:
+		   break;

WARNING:TABSTOP: Statements should start on a tabstop
#400: FILE: page_alloc.c:139:
+		 }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: page_alloc.c:157:
+       if (addfront)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 9)
#410: FILE: page_alloc.c:157:
+       if (addfront)
+	 memlist_add_head(&(base + page_idx)->list, &area->free_list);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: page_alloc.c:159:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 9)
#412: FILE: page_alloc.c:159:
+       else
+	 memlist_add_tail(&(base + page_idx)->list, &area->free_list);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#423: FILE: page_alloc.c:169:
+	if (memory_pressure > (NR_CPUS << order))

ERROR:SPACING: spaces required around that '-=' (ctx:VxW)
#424: FILE: page_alloc.c:170:
+		memory_pressure-= 1<<order;
 		               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#424: FILE: page_alloc.c:170:
+		memory_pressure-= 1<<order;
 		                   ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#433: FILE: page_alloc.c:316:
+	memory_pressure+= 1<<order;
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#433: FILE: page_alloc.c:316:
+	memory_pressure+= 1<<order;
 	                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 28 warnings, 36 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
