WARNING:TYPO_SPELLING: 'patchs' may be misspelled - perhaps 'patches'?
#49: 
o What happens if Linus accepts the patchs to fs/* but the ext2/* or
                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Additionaly' may be misspelled - perhaps 'Additionally'?
#66: 
Additionaly you may wonder why I have choosen to examine "." and ".." in 
^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'choosen' may be misspelled - perhaps 'chosen'?
#66: 
Additionaly you may wonder why I have choosen to examine "." and ".." in 
                                      ^^^^^^^

WARNING:TYPO_SPELLING: 'unecessary' may be misspelled - perhaps 'unnecessary'?
#73: 
I have avoided using the existing wait_queue (to avoid unecessary
                                                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#74: 
wakeups) and created a seperate poll wait_queue.  Good? Bad? Ugly?
                       ^^^^^^^^

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#97: 
--- /usr/src/linux-2.4.0/fs/read_write.c	Wed Feb  7 10:17:24 2001

CHECK:LINE_SPACING: Please don't use multiple blank lines
#103: FILE: usr/src/linux/fs/read_write.c:22:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: usr/src/linux/fs/readdir.c:19:
+	struct linux_dirent * current_dir;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: usr/src/linux/fs/readdir.c:20:
+	struct linux_dirent * previous;

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: usr/src/linux/fs/readdir.c:46:
+                       ino_t ino, unsigned int d_type)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: usr/src/linux/fs/readdir.c:46:
+                       ino_t ino, unsigned int d_type)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: usr/src/linux/fs/readdir.c:48:
+        struct getdents_callback *buf = (struct getdents_callback *)__buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: usr/src/linux/fs/readdir.c:48:
+        struct getdents_callback *buf = (struct getdents_callback *)__buf;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: usr/src/linux/fs/readdir.c:49:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#146: FILE: usr/src/linux/fs/readdir.c:51:
+	if (name && strcmp(name, ".") && strcmp(name, "..")){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#153: FILE: usr/src/linux/fs/readdir.c:58:
+unsigned int generic_poll_dir(struct file *filp, struct poll_table_struct *ptbl){
                                            ^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#153: FILE: usr/src/linux/fs/readdir.c:58:
+unsigned int generic_poll_dir(struct file *filp, struct poll_table_struct *ptbl){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#153: FILE: usr/src/linux/fs/readdir.c:58:
+unsigned int generic_poll_dir(struct file *filp, struct poll_table_struct *ptbl){

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: usr/src/linux/fs/readdir.c:59:
+        unsigned int mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: usr/src/linux/fs/readdir.c:59:
+        unsigned int mask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: usr/src/linux/fs/readdir.c:60:
+        struct inode *inode = filp->f_dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: usr/src/linux/fs/readdir.c:60:
+        struct inode *inode = filp->f_dentry->d_inode;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: usr/src/linux/fs/readdir.c:64:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: usr/src/linux/fs/readdir.c:66:
+	if(!S_ISDIR(inode->i_mode))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#164: FILE: usr/src/linux/fs/readdir.c:69:
+	poll_wait(filp, &(inode->i_pollwait), ptbl);
 	          ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_pollwait
#164: FILE: usr/src/linux/fs/readdir.c:69:
+	poll_wait(filp, &(inode->i_pollwait), ptbl);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: usr/src/linux/fs/readdir.c:72:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#175: FILE: usr/src/linux/fs/readdir.c:80:
+	llseek(filp, 0, 0);
 	       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#176: FILE: usr/src/linux/fs/readdir.c:81:
+	vfs_readdir(filp, fillpolldir, &buf);
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#177: FILE: usr/src/linux/fs/readdir.c:82:
+	llseek(filp, curpos, 0);
 	       ^^^^

ERROR:SPACING: space required before the open brace '{'
#178: FILE: usr/src/linux/fs/readdir.c:83:
+	if(buf.count > 0){

ERROR:SPACING: space required before the open parenthesis '('
#178: FILE: usr/src/linux/fs/readdir.c:83:
+	if(buf.count > 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#178: FILE: usr/src/linux/fs/readdir.c:83:
+	if(buf.count > 0){
+		mask = POLLIN | POLLRDNORM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: usr/src/linux/fs/readdir.c:86:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: usr/src/linux/fs/readdir.c:87:
+        return mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: usr/src/linux/fs/readdir.c:87:
+        return mask;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: usr/src/linux/fs/readdir.c:89:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: usr/src/linux/fs/readdir.c:89:
+      $

ERROR:SPACING: space required before the open brace '{'
#218: FILE: usr/src/linux/fs/namei.c:920:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#220: FILE: usr/src/linux/fs/namei.c:922:
+		wake_up_interruptible(&(dir->i_pollwait));

ERROR:SPACING: space required before the open brace '{'
#230: FILE: usr/src/linux/fs/namei.c:1202:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#232: FILE: usr/src/linux/fs/namei.c:1204:
+		wake_up_interruptible(&(dir->i_pollwait));

ERROR:SPACING: space required before the open brace '{'
#243: FILE: usr/src/linux/fs/namei.c:1274:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#245: FILE: usr/src/linux/fs/namei.c:1276:
+		wake_up_interruptible(&(dir->i_pollwait));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#255: FILE: usr/src/linux/fs/namei.c:1369:
+		wake_up_interruptible(&(dir->i_pollwait));

ERROR:SPACING: space required before the open brace '{'
#264: FILE: usr/src/linux/fs/namei.c:1441:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#266: FILE: usr/src/linux/fs/namei.c:1443:
+		wake_up_interruptible(&(dir->i_pollwait));

ERROR:SPACING: space required before the open brace '{'
#276: FILE: usr/src/linux/fs/namei.c:1511:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#278: FILE: usr/src/linux/fs/namei.c:1513:
+		wake_up_interruptible(&(dir->i_pollwait));

ERROR:SPACING: space required before the open brace '{'
#288: FILE: usr/src/linux/fs/namei.c:1587:
+	if (!error){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dir->i_pollwait
#290: FILE: usr/src/linux/fs/namei.c:1589:
+		wake_up_interruptible(&(dir->i_pollwait));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around old_dir->i_pollwait
#300: FILE: usr/src/linux/fs/namei.c:1810:
+		wake_up_interruptible(&(old_dir->i_pollwait));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#311: FILE: usr/src/linux/fs/ext2/dir.c:35:
+	poll:		generic_poll_dir,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#311: FILE: usr/src/linux/fs/ext2/dir.c:35:
+	poll:		generic_poll_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#321: FILE: usr/src/linux/fs/reiserfs/dir.c:30:
+    poll:	generic_poll_dir,
         ^

WARNING:INDENTED_LABEL: labels should not be indented
#321: FILE: usr/src/linux/fs/reiserfs/dir.c:30:
+    poll:	generic_poll_dir,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: usr/src/linux/include/linux/fs.h:1190:
+extern loff_t llseek(struct file *file, loff_t offset, int origin);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#349: FILE: usr/src/linux/include/linux/fs.h:1278:
+extern unsigned int generic_poll_dir(struct file *filp, struct poll_table_struct *ptbl);
                                                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: usr/src/linux/include/linux/fs.h:1278:
+extern unsigned int generic_poll_dir(struct file *filp, struct poll_table_struct *ptbl);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550117.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 21 warnings, 13 checks, 223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550117.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
