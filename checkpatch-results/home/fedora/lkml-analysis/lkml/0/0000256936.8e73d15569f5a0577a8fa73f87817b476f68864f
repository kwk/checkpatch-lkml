WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> have a few comments, but otherwise I think we should move forward with it.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#80: FILE: kernel/kallsyms.c:26:
+extern u8 kallsyms_names[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#80: FILE: kernel/kallsyms.c:26:
+extern u8 kallsyms_names[] __attribute__((weak));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#82: FILE: kernel/kallsyms.c:28:
+extern u8 kallsyms_token_table[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: kernel/kallsyms.c:28:
+extern u8 kallsyms_token_table[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#83: FILE: kernel/kallsyms.c:29:
+extern u16 kallsyms_token_index[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: kernel/kallsyms.c:29:
+extern u16 kallsyms_token_index[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#85: FILE: kernel/kallsyms.c:31:
+extern unsigned long kallsyms_markers[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: kernel/kallsyms.c:31:
+extern unsigned long kallsyms_markers[] __attribute__((weak));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: kernel/kallsyms.c:57:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#100: FILE: kernel/kallsyms.c:58:
+	len=*data++;
 	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '*' (ctx:OxV)
#100: FILE: kernel/kallsyms.c:58:
+	len=*data++;
 	    ^

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: kernel/kallsyms.c:60:
+	while(len) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#103: FILE: kernel/kallsyms.c:61:
+		tptr=&kallsyms_token_table[kallsyms_token_index[*data]];
 		    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#103: FILE: kernel/kallsyms.c:61:
+		tptr=&kallsyms_token_table[kallsyms_token_index[*data]];
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#107: FILE: kernel/kallsyms.c:65:
+		tlen=*tptr++;
 		    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#107: FILE: kernel/kallsyms.c:65:
+		tlen=*tptr++;
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: kernel/kallsyms.c:66:
+		while(tlen) {

ERROR:SPACING: spaces required around that '=' (ctx:OxO)
#109: FILE: kernel/kallsyms.c:67:
+			*result++=*tptr++;
 			         ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#109: FILE: kernel/kallsyms.c:67:
+			*result++=*tptr++;
 			          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#124: FILE: kernel/kallsyms.c:82:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];
 	                                            ^

ERROR:SPACING: space prohibited after that open square bracket '['
#124: FILE: kernel/kallsyms.c:82:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#124: FILE: kernel/kallsyms.c:82:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#125: FILE: kernel/kallsyms.c:83:
+	for(i = 0; i < (pos&0xFF); i++)
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: kernel/kallsyms.c:83:
+	for(i = 0; i < (pos&0xFF); i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#167: FILE: kernel/kallsyms.c:120:
+		unsigned long symbol_end=0;
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#177: FILE: kernel/kallsyms.c:125:
+		while (high-low > 1) {
 		           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#179: FILE: kernel/kallsyms.c:127:
+			if (kallsyms_addresses[mid] <= addr) low = mid;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#180: FILE: kernel/kallsyms.c:128:
+			else high = mid;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#182: FILE: kernel/kallsyms.c:130:
+		while (low && kallsyms_addresses[low-1] == kallsyms_addresses[low])
 		                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#230: FILE: kernel/kallsyms.c:218:
+	unsigned off = iter->nameoff;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#249: FILE: kernel/kallsyms.c:233:
+static void reset_iter(struct kallsym_iter *iter, loff_t new_pos)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'tunning' may be misspelled - perhaps 'tuning'?
#313: FILE: scripts/kallsyms.c:23:
+/* compression tunning settings */
                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#318: FILE: scripts/kallsyms.c:28:
+/* we use only a subset of the complete symbol table to gather the token count,
+   to speed up compression, at the expense of a little compression ratio

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#324: FILE: scripts/kallsyms.c:34:
+#define HASH_TABLE_SIZE		(1 << HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#327: FILE: scripts/kallsyms.c:37:
+#define HASH_FOLD(a)		((a)&(HASH_MASK))
                     		    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: scripts/kallsyms.c:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: scripts/kallsyms.c:69:
+unsigned char best_table[256][MAX_TOK_SIZE+1];
                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: scripts/kallsyms.c:72:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: scripts/kallsyms.c:159:
+	printf(".globl %s\n",label);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: scripts/kallsyms.c:161:
+	printf("%s:\n",label);
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#387: FILE: scripts/kallsyms.c:166:
+	int c, rlen, total=0;
 	                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#391: FILE: scripts/kallsyms.c:170:
+		if (best_table[c][0]==c && best_table_len[c]==1) {
 		                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#391: FILE: scripts/kallsyms.c:170:
+		if (best_table[c][0]==c && best_table_len[c]==1) {
 		                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#402: FILE: scripts/kallsyms.c:181:
+	*result=0;
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#415: FILE: scripts/kallsyms.c:192:
+	char buf[KSYM_NAME_LEN+1];
 	                      ^

CHECK:SPACING: No space is necessary after a cast
#452: FILE: scripts/kallsyms.c:219:
+	markers = (unsigned int *) malloc(sizeof(unsigned int)*((valid + 255) / 256));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#452: FILE: scripts/kallsyms.c:219:
+	markers = (unsigned int *) malloc(sizeof(unsigned int)*((valid + 255) / 256));
 	                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: scripts/kallsyms.c:220:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: scripts/kallsyms.c:251:
+		expand_symbol(best_table[i],best_table_len[i],buf);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: scripts/kallsyms.c:251:
+		expand_symbol(best_table[i],best_table_len[i],buf);
 		                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: scripts/kallsyms.c:264:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#513: FILE: scripts/kallsyms.c:274:
+	unsigned int hash=HASH_BASE_OFFSET;
 	                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->len == len'
#529: FILE: scripts/kallsyms.c:290:
+		if ((ptr->len == len) && (memcmp(ptr->data, data, len) == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#531: FILE: scripts/kallsyms.c:292:
+		ptr=ptr->next;
 		   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#553: FILE: scripts/kallsyms.c:314:
+	struct token *ptr,*last_ptr;
 	                 ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#553: FILE: scripts/kallsyms.c:314:
+	struct token *ptr,*last_ptr;
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#563: FILE: scripts/kallsyms.c:324:
+		hash = rehash_token(hash, data[i-1]);
 		                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#573: FILE: scripts/kallsyms.c:334:
+		if (!ptr) ptr = find_token_hash(data, i, hash);

CHECK:SPACING: No space is necessary after a cast
#576: FILE: scripts/kallsyms.c:337:
+			ptr = (struct token *) malloc(sizeof(*ptr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->profit < 0'
#588: FILE: scripts/kallsyms.c:349:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newprofit >= 0'
#588: FILE: scripts/kallsyms.c:349:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#588: FILE: scripts/kallsyms.c:349:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#590: FILE: scripts/kallsyms.c:351:
+				insert_token_in_group(&good_head,ptr);
 				                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#595: FILE: scripts/kallsyms.c:356:
+		if (last_ptr) last_ptr->smaller = ptr;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#606: FILE: scripts/kallsyms.c:367:
+	unsigned int hash=0;
 	                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#608: FILE: scripts/kallsyms.c:369:
+	if (len > MAX_TOK_SIZE) len = MAX_TOK_SIZE;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#614: FILE: scripts/kallsyms.c:375:
+	for (i = len; i >= 2; i--) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->profit >= 0'
#616: FILE: scripts/kallsyms.c:377:
+		if ((ptr->profit >= 0) && (newprofit < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newprofit < 0'
#616: FILE: scripts/kallsyms.c:377:
+		if ((ptr->profit >= 0) && (newprofit < 0)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#620: FILE: scripts/kallsyms.c:381:
+		ptr->profit=newprofit;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#622: FILE: scripts/kallsyms.c:383:
+		ptr=ptr->smaller;
 		   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#649: FILE: scripts/kallsyms.c:410:
+		if (table[i].valid) valid++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#673: FILE: scripts/kallsyms.c:434:
+		if (!table[i].valid) continue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: scripts/kallsyms.c:435:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#680: FILE: scripts/kallsyms.c:441:
+			p = (unsigned char *) strstr((char *) p, (char *) str);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#681: FILE: scripts/kallsyms.c:442:
+			if (!p) break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: scripts/kallsyms.c:455:
+^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#697: FILE: scripts/kallsyms.c:458:
+		if(learn) {

ERROR:SPACING: space required before the open parenthesis '('
#699: FILE: scripts/kallsyms.c:460:
+			if(table[i].sample) learn_symbol(table[i].sym, len);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#699: FILE: scripts/kallsyms.c:460:
+			if(table[i].sample) learn_symbol(table[i].sym, len);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#706: FILE: scripts/kallsyms.c:467:
+	struct token *ptr,*best,*head;
 	                 ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#706: FILE: scripts/kallsyms.c:467:
+	struct token *ptr,*best,*head;
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#706: FILE: scripts/kallsyms.c:467:
+	struct token *ptr,*best,*head;
 	                       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#706: FILE: scripts/kallsyms.c:467:
+	struct token *ptr,*best,*head;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#709: FILE: scripts/kallsyms.c:470:
+	bestprofit=-10000;
 	          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#709: FILE: scripts/kallsyms.c:470:
+	bestprofit=-10000;
 	           ^

ERROR:SPACING: space required before the open parenthesis '('
#712: FILE: scripts/kallsyms.c:473:
+	if(good_head.right == &good_head) head = &bad_head;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#712: FILE: scripts/kallsyms.c:473:
+	if(good_head.right == &good_head) head = &bad_head;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#713: FILE: scripts/kallsyms.c:474:
+	else head = &good_head;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#734: FILE: scripts/kallsyms.c:495:
+	/* using the '\0' symbol last allows compress_symbols to use standard
+	   fast string functions

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#743: FILE: scripts/kallsyms.c:504:
+			/* zero terminate the token so that we can use strstr
+			   in compress_symbols */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#743: FILE: scripts/kallsyms.c:504:
+			   in compress_symbols */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#744: FILE: scripts/kallsyms.c:505:
+			best_table[i][best_table_len[i]]='\0';
 			                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#762: FILE: scripts/kallsyms.c:523:
+				best_table[c][0]=c;
 				                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#763: FILE: scripts/kallsyms.c:524:
+				best_table_len[c]=1;
 				                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#786: FILE: scripts/kallsyms.c:547:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 15 warnings, 23 checks, 717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
