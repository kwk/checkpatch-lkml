CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#135: FILE: drivers/char/consolemap.c:299:
+	if (!access_ok(VERIFY_READ, arg, E_TABSZ*sizeof(unsigned short)))
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#147: FILE: drivers/char/consolemap.c:317:
+	if (!access_ok(VERIFY_WRITE, arg, E_TABSZ*sizeof(unsigned short)))
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: drivers/char/mem.c:364:
+	if (!access_ok(VERIFY_READ,buf,count))
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: drivers/char/mem.c:364:
+	if (!access_ok(VERIFY_READ,buf,count))
 	                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/compat_ioctl.c:2347:
+        if (!access_ok(VERIFY_WRITE, d32, sizeof(struct compat_dirent)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/compat_ioctl.c:2347:
+        if (!access_ok(VERIFY_WRITE, d32, sizeof(struct compat_dirent)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/compat_ioctl.c:2348:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/compat_ioctl.c:2348:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/compat_ioctl.c:2407:
+        if (!access_ok(VERIFY_READ, user_req, sizeof(struct raw32_config_request)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/compat_ioctl.c:2407:
+        if (!access_ok(VERIFY_READ, user_req, sizeof(struct raw32_config_request)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/compat_ioctl.c:2408:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/compat_ioctl.c:2408:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: fs/compat_ioctl.c:2421:
+        if (!access_ok(VERIFY_WRITE, user_req, sizeof(struct raw32_config_request)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: fs/compat_ioctl.c:2421:
+        if (!access_ok(VERIFY_WRITE, user_req, sizeof(struct raw32_config_request)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: fs/compat_ioctl.c:2422:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: fs/compat_ioctl.c:2422:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: fs/compat_ioctl.c:2494:
+                if (!access_ok(VERIFY_READ, ss32, sizeof(SS32)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/compat_ioctl.c:2494:
+                if (!access_ok(VERIFY_READ, ss32, sizeof(SS32)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/compat_ioctl.c:2508:
+                if (!access_ok(VERIFY_WRITE, ss32, sizeof(SS32)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/compat_ioctl.c:2508:
+                if (!access_ok(VERIFY_WRITE, ss32, sizeof(SS32)))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/compat.c:30:
+	return (!access_ok(VERIFY_READ, cts, sizeof(*cts)) ||
 			__get_user(ts->tv_sec, &cts->tv_sec) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: kernel/compat.c:37:
+	return (!access_ok(VERIFY_WRITE, cts, sizeof(*cts)) ||
 			__put_user(ts->tv_sec, &cts->tv_sec) ||

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#438: FILE: fs/compat.c:1155:
+	if (!access_ok(VERIFY_READ, uvector, nr_segs*sizeof(*uvector)))
 	                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#447: FILE: fs/compat.c:1540:
+		if (!access_ok(VERIFY_WRITE, ufdset, nr*sizeof(compat_ulong_t)))
 		                                       ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#459: FILE: fs/compat.c:1630:
+		if (!access_ok(VERIFY_READ, tvp, sizeof(*tvp))
+		    || __get_user(sec, &tvp->tv_sec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: fs/compat.c:1631:
+^I^I    || __get_user(usec, &tvp->tv_usec)) {^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#460: FILE: fs/compat.c:1631:
+		    || __get_user(sec, &tvp->tv_sec)
+		    || __get_user(usec, &tvp->tv_usec)) {	

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#477: FILE: fs/select.c:306:
+		if (!access_ok(VERIFY_READ, tvp, sizeof(*tvp))
+		    || __get_user(sec, &tvp->tv_sec)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#478: FILE: fs/select.c:307:
+		    || __get_user(sec, &tvp->tv_sec)
+		    || __get_user(usec, &tvp->tv_usec)) {

WARNING:SIZEOF_PARENTHESIS: sizeof *uattr should be sizeof(*uattr)
#492: FILE: ipc/compat_mq.c:28:
+	if (!access_ok(VERIFY_READ, uattr, sizeof *uattr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \
                               	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \
                               	                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#525: FILE: arch/i386/math-emu/fpu_system.h:69:
+#define FPU_verify_area(x,y,z)	if ( !access_ok(x,y,z) ) \
 				math_abort(FPU_info,SIGSEGV)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 9 warnings, 10 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
