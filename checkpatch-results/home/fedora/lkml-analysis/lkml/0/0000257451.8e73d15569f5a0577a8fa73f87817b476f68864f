WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This is the third release of the page fault scalability patches. The scalability

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-generic/pgtable.h:89:
+static inline pte_t ptep_xchg(pte_t *ptep,pte_t pteval)
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#102: FILE: include/asm-generic/pgtable.h:92:
+	pte_t pte = *ptep;
+	set_pte(ptep, pteval);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#130: FILE: include/asm-generic/pgtable.h:122:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: include/asm-generic/pgtable.h:127:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: include/asm-ia64/pgtable.h:391:
+ptep_xchg (pte_t *ptep,pte_t pteval)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: include/asm-ia64/pgtable.h:391:
+ptep_xchg (pte_t *ptep,pte_t pteval)
                       ^

CHECK:SPACING: No space is necessary after a cast
#169: FILE: include/asm-ia64/pgtable.h:394:
+	return __pte(xchg((long *) ptep, pteval.pte));

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: include/asm-ia64/pgtable.h:397:
+	pte_t pte = *ptep;
+	set_pte(ptep,pteval);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: include/asm-ia64/pgtable.h:397:
+	set_pte(ptep,pteval);
 	            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#179: FILE: include/asm-ia64/pgtable.h:404:
+ptep_cmpxchg (pte_t *ptep, pte_t oldval, pte_t newval)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#213: FILE: include/asm-i386/pgtable-3level.h:93:
+	return cmpxchg(&ptep->pte_low, (long)oldval, (long)newval)==(long)oldval;
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#227: FILE: include/asm-i386/pgtable-2level.h:43:
+#define ptep_xchg(xp,a)       __pte(xchg(&(xp)->pte_low, (a).pte_low))
                     ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#229: FILE: include/asm-i386/pgtable-2level.h:45:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: include/asm-i386/pgtable-2level.h:45:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: include/asm-i386/pgtable-2level.h:45:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                               ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#229: FILE: include/asm-i386/pgtable-2level.h:45:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                                                                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oldpte' - possible side-effects?
#229: FILE: include/asm-i386/pgtable-2level.h:45:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#320: FILE: mm/memory.c:1440:
+	if (!ptep_cmpxchg(page_table, orig_entry, entry))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: mm/memory.c:1485:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: mm/memory.c:1485:
+        pmd_t *pmd, pte_t orig_entry)$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#446: FILE: mm/memory.c:1667:
+	entry= *pte;
 	     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#471: FILE: mm/memory.c:1708:
+	if (unlikely(pgd_none(*pgd))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'satify' may be misspelled - perhaps 'satisfy'?
#473: FILE: mm/memory.c:1710:
+		 * This is a rare case. We need to satify the entry and exit requirement
 		                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: mm/memory.c:1716:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#483: FILE: mm/memory.c:1720:
+		pte_t * pte;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: mm/memory.c:1722:
+		if (unlikely(!pmd_present(*pmd))) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#492: FILE: mm/memory.c:1726:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#538: FILE: mm/rmap.c:511:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#656: FILE: mm/memory.c:1447:
+		printk(KERN_INFO "do_anon_page: cmpxchg failed. Backing out.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: mm/rmap.c:723:
+			while (atomic_read(&vma->vm_mm->mm_rss) &&
 				cursor < max_nl_cursor &&

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#837: FILE: fs/proc/task_mmu.c:40:
+		(unsigned long)atomic_read(&mm->mm_rss) << (PAGE_SHIFT-10),
 		                                                      ^

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#890: FILE: fs/proc/array.c:387:
+		mm ? (unsigned long)atomic_read(&mm->mm_rss) : 0, /* you might want to shift this left 3 */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#902: FILE: include/asm-ia64/tlb.h:48:
+#include <asm/atomic.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 11 warnings, 10 checks, 684 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
