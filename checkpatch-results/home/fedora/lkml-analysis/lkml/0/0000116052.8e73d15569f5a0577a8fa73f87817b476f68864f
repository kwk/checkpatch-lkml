ERROR:INITIALISED_STATIC: do not initialise statics to 0
#94: FILE: drivers/usb/atm/speedtch.c:77:
+static unsigned int altsetting = 0; /* zero means: use the default */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#100: FILE: drivers/usb/atm/speedtch.c:82:
+module_param(altsetting, uint, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#113: FILE: drivers/usb/atm/speedtch.c:93:
+module_param(enable_isoc, bool, S_IRUGO | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/usb/atm/speedtch.c:95:
+MODULE_PARM_DESC(enable_isoc,
+		"Use isochronous transfers if available (default: "

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: drivers/usb/atm/speedtch.c:718:
+	if (!(data_intf = usb_ifnum_to_if(usb_dev, INTERFACE_DATA))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#177: FILE: drivers/usb/atm/speedtch.c:760:
+		if ((ret = usb_set_interface(usb_dev, INTERFACE_DATA, DEFAULT_ISOC_ALTSETTING)) < 0) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#177: FILE: drivers/usb/atm/speedtch.c:760:
+		if ((ret = usb_set_interface(usb_dev, INTERFACE_DATA, DEFAULT_ISOC_ALTSETTING)) < 0) {

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#178: FILE: drivers/usb/atm/speedtch.c:761:
+			usb_dbg(usbatm, "%s: setting interface to %2d failed (%d)!\n", __func__, DEFAULT_ISOC_ALTSETTING, ret);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#190: FILE: drivers/usb/atm/speedtch.c:772:
+		for (i=0; i<desc->desc.bNumEndpoints; i++) {
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#190: FILE: drivers/usb/atm/speedtch.c:772:
+		for (i=0; i<desc->desc.bNumEndpoints; i++) {
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#190: FILE: drivers/usb/atm/speedtch.c:772:
+		for (i=0; i<desc->desc.bNumEndpoints; i++) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#191: FILE: drivers/usb/atm/speedtch.c:773:
+			const struct usb_endpoint_descriptor *endpoint_desc = &desc->endpoint[i].desc;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'endpoint_desc->bEndpointAddress == target_address'
#193: FILE: drivers/usb/atm/speedtch.c:775:
+			if ((endpoint_desc->bEndpointAddress == target_address)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#193: FILE: drivers/usb/atm/speedtch.c:775:
+			if ((endpoint_desc->bEndpointAddress == target_address)) {

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#193: FILE: drivers/usb/atm/speedtch.c:775:
+			if ((endpoint_desc->bEndpointAddress == target_address)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#194: FILE: drivers/usb/atm/speedtch.c:776:
+				use_isoc = (endpoint_desc->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) ==

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#194: FILE: drivers/usb/atm/speedtch.c:776:
+				use_isoc = (endpoint_desc->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) ==

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#205: FILE: drivers/usb/atm/speedtch.c:787:
+		if ((ret = usb_set_interface(usb_dev, INTERFACE_DATA, DEFAULT_BULK_ALTSETTING)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#205: FILE: drivers/usb/atm/speedtch.c:787:
+		if ((ret = usb_set_interface(usb_dev, INTERFACE_DATA, DEFAULT_BULK_ALTSETTING)) < 0) {

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#206: FILE: drivers/usb/atm/speedtch.c:788:
+			usb_err(usbatm, "%s: setting interface to %2d failed (%d)!\n", __func__, DEFAULT_BULK_ALTSETTING, ret);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#306: FILE: drivers/usb/atm/usbatm.c:1107:
+		unsigned int iso_packets = usb_pipeisoc(channel->endpoint) ? channel->buf_size / channel->packet_size : 0;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#339: FILE: drivers/usb/atm/usbatm.h:90:
+#define UDSL_USE_ISOC		(1<<1)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#339: FILE: drivers/usb/atm/usbatm.h:90:
+#define UDSL_USE_ISOC		(1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: drivers/usb/atm/usbatm.h:122:
+        int bulk_in;^I/* bulk rx endpoint */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: drivers/usb/atm/usbatm.h:122:
+        int bulk_in;^I/* bulk rx endpoint */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: drivers/usb/atm/usbatm.h:123:
+        int isoc_in;^I/* isochronous rx endpoint */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: drivers/usb/atm/usbatm.h:123:
+        int isoc_in;^I/* isochronous rx endpoint */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: drivers/usb/atm/usbatm.h:124:
+        int bulk_out;^I/* bulk tx endpoint */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: drivers/usb/atm/usbatm.h:124:
+        int bulk_out;^I/* bulk tx endpoint */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000116052.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 13 warnings, 7 checks, 281 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000116052.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
