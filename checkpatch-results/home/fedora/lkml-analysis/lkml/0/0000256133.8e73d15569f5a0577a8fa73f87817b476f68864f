WARNING:TYPO_SPELLING: 'exisiting' may be misspelled - perhaps 'existing'?
#36: 
in the kernel. The code can be trivially shared if the exisiting users
                                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -uNp -X /home/rl/data/doc/kernel/dontdiff-2.6 linux-2.6.8/include/linux/netlink.h linux-2.6.8-nproc/include/linux/netlink.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: include/linux/nproc.h:1:
+#ifndef _LINUX_NPROC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: include/linux/nproc.h:9:
+#define NPROC_GET_LIST		(NPROC_BASE+0)
                       		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#72: FILE: include/linux/nproc.h:10:
+#define NPROC_GET_LABEL		(NPROC_BASE+1)
                        		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: include/linux/nproc.h:11:
+#define NPROC_GET_GLOBAL	(NPROC_BASE+2)
                         	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#74: FILE: include/linux/nproc.h:12:
+#define NPROC_GET_PS		(NPROC_BASE+3)
                     		           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: kernel/nproc.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#188: FILE: kernel/nproc.c:18:
+#define pdebug(x,args...) printk(KERN_DEBUG "%s:%d " x, __func__ , __LINE__, ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: kernel/nproc.c:18:
+#define pdebug(x,args...) printk(KERN_DEBUG "%s:%d " x, __func__ , __LINE__, ##args)
                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#188: FILE: kernel/nproc.c:18:
+#define pdebug(x,args...) printk(KERN_DEBUG "%s:%d " x, __func__ , __LINE__, ##args)
                                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#189: FILE: kernel/nproc.c:19:
+#define pwarn(x,args...) printk(KERN_WARNING "%s:%d " x, __func__ , __LINE__, ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#189: FILE: kernel/nproc.c:19:
+#define pwarn(x,args...) printk(KERN_WARNING "%s:%d " x, __func__ , __LINE__, ##args)
                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#189: FILE: kernel/nproc.c:19:
+#define pwarn(x,args...) printk(KERN_WARNING "%s:%d " x, __func__ , __LINE__, ##args)
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: kernel/nproc.c:21:
+#define pdebug(x,args...)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#192: FILE: kernel/nproc.c:22:
+#define pwarn(x,args...)
                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#195: FILE: kernel/nproc.c:25:
+#define perror(x,args...) printk(KERN_ERR "%s:%d " x, __func__ , __LINE__, ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: kernel/nproc.c:25:
+#define perror(x,args...) printk(KERN_ERR "%s:%d " x, __func__ , __LINE__, ##args)
                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#195: FILE: kernel/nproc.c:25:
+#define perror(x,args...) printk(KERN_ERR "%s:%d " x, __func__ , __LINE__, ##args)
                                                                ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#197: FILE: kernel/nproc.c:27:
+static struct sock *nproc_sock = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: kernel/nproc.c:50:
+	struct mm_struct *mm = get_task_mm(tsk);
+	if (mm) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: kernel/nproc.c:57:
+			unsigned long len = (vma->vm_end - vma->vm_start) >> 10;
+			if (!vma->vm_file) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: kernel/nproc.c:85:
+	struct mm_struct *mm = get_task_mm(tsk);
+	if (mm) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#256: FILE: kernel/nproc.c:86:
+		res->vmsize = mm->total_vm << (PAGE_SHIFT-10);
 		                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#257: FILE: kernel/nproc.c:87:
+		res->vmlock = mm->locked_vm << (PAGE_SHIFT-10);
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#258: FILE: kernel/nproc.c:88:
+		res->vmrss = mm->rss << (PAGE_SHIFT-10);
 		                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: kernel/nproc.c:101:
+	struct page_state *ps;
+	ps = kmalloc(sizeof(*ps), GFP_KERNEL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#307: FILE: kernel/nproc.c:137:
+#define mstore(value, id, buf)						\
+({									\
+	u32 _type = id & NPROC_TYPE_MASK;				\
+	switch (_type) {						\
+		case NPROC_TYPE_U32: {					\
+			__u32 *p = (u32 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_UL: {					\
+			unsigned long *p = (unsigned long *)buf;	\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_U64: {					\
+			__u64 *p = (u64 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		default:						\
+			perror("Huh? Bad type!\n");			\
+	}								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#307: FILE: kernel/nproc.c:137:
+#define mstore(value, id, buf)						\
+({									\
+	u32 _type = id & NPROC_TYPE_MASK;				\
+	switch (_type) {						\
+		case NPROC_TYPE_U32: {					\
+			__u32 *p = (u32 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_UL: {					\
+			unsigned long *p = (unsigned long *)buf;	\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_U64: {					\
+			__u64 *p = (u64 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		default:						\
+			perror("Huh? Bad type!\n");			\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#307: FILE: kernel/nproc.c:137:
+#define mstore(value, id, buf)						\
+({									\
+	u32 _type = id & NPROC_TYPE_MASK;				\
+	switch (_type) {						\
+		case NPROC_TYPE_U32: {					\
+			__u32 *p = (u32 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_UL: {					\
+			unsigned long *p = (unsigned long *)buf;	\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		case NPROC_TYPE_U64: {					\
+			__u64 *p = (u64 *)buf;				\
+			*p = value;					\
+			buf = (char *)++p;				\
+			break;						\
+		}							\
+		default:						\
+			perror("Huh? Bad type!\n");			\
+	}								\
+})

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#310: FILE: kernel/nproc.c:140:
+	switch (_type) {						\
[...]
+		default:						\

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required one side of that '++' (ctx:VxV)
#314: FILE: kernel/nproc.c:144:
+			buf = (char *)++p;				\
 			              ^

ERROR:SPACING: space required one side of that '++' (ctx:VxV)
#320: FILE: kernel/nproc.c:150:
+			buf = (char *)++p;				\
 			              ^

ERROR:SPACING: space required one side of that '++' (ctx:VxV)
#326: FILE: kernel/nproc.c:156:
+			buf = (char *)++p;				\
 			              ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#361: FILE: kernel/nproc.c:191:
+		switch (fields[i]) {
+			case NPROC_PID:
[...]
+			case NPROC_VMSIZE:
+			case NPROC_VMLOCK:
+			case NPROC_VMRSS:
[...]
+			case NPROC_VMDATA:
+			case NPROC_VMSTACK:
+			case NPROC_VMEXE:
+			case NPROC_VMLIB:
[...]
+			case NPROC_JIFFIES:
[...]
+			case NPROC_WCHAN:
[...]
+			case NPROC_NAME:
[...]
+			default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#370: FILE: kernel/nproc.c:200:
+				switch (fields[i]) {
+					case NPROC_VMSIZE:
[...]
+					case NPROC_VMLOCK:
[...]
+					case NPROC_VMRSS:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#388: FILE: kernel/nproc.c:218:
+				switch (fields[i]) {
+					case NPROC_VMDATA:
[...]
+					case NPROC_VMSTACK:
[...]
+					case NPROC_VMEXE:
[...]
+					case NPROC_VMLIB:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: kernel/nproc.c:239:
+				pdebug("pid %d wchan: %lu.\n", tsk->pid,
+						get_wchan(tsk));

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: kernel/nproc.c:281:
+		task_t *tsk;
+		tsk = find_task_by_pid(pids[i]);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#471: FILE: kernel/nproc.c:301:
+	switch (id) {
+		case NPROC_NAME:
[...]
+		default:

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#474: FILE: kernel/nproc.c:304:
+				sizeof(((struct task_struct*)0)->comm);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: kernel/nproc.c:318:
+static u32 *__reply_size (u32 *data, u32 *left, u32 *len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: kernel/nproc.c:341:
+		u32 type = id & NPROC_TYPE_MASK;
+		pdebug("        %#8.8x.\n", fields[i]);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#512: FILE: kernel/nproc.c:342:
+		switch (type) {
+			case NPROC_TYPE_U32:
[...]
+			case NPROC_TYPE_UL:
[...]
+			case NPROC_TYPE_U64:

WARNING:LINE_SPACING: Missing a blank line after declarations
#524: FILE: kernel/nproc.c:354:
+				u32 slen;
+				slen = __reply_size_special(id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#550: FILE: kernel/nproc.c:380:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#557: FILE: kernel/nproc.c:387:
+	switch (*sdata) {
[...]
+		case NPROC_SELECT_ALL:
[...]
+		case NPROC_SELECT_PID:
[...]
+		case NPROC_SELECT_UID:
[...]
+		default:

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#558: FILE: kernel/nproc.c:388:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: kernel/nproc.c:395:
+			err = nproc_select_pid(nlh, left, data, len,
+					sdata + 1);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#567: FILE: kernel/nproc.c:397:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#615: FILE: kernel/nproc.c:445:
+		u32 id = fields[i];
+		switch (id) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#615: FILE: kernel/nproc.c:445:
+		switch (id) {
+			case NPROC_NR_DIRTY:
+			case NPROC_NR_WRITEBACK:
+			case NPROC_NR_UNSTABLE:
+			case NPROC_NR_PG_TABLE_PGS:
+			case NPROC_NR_MAPPED:
+			case NPROC_NR_SLAB:
[...]
+			case NPROC_MEMFREE:
[...]
+			case NPROC_PAGESIZE:
[...]
+			case NPROC_JIFFIES:
[...]
+			default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#624: FILE: kernel/nproc.c:454:
+				switch (id) {
+					case NPROC_NR_DIRTY:
[...]
+					case NPROC_NR_WRITEBACK:
[...]
+					case NPROC_NR_UNSTABLE:
[...]
+					case NPROC_NR_PG_TABLE_PGS:
[...]
+					case NPROC_NR_MAPPED:
[...]
+					case NPROC_NR_SLAB:

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#635: FILE: kernel/nproc.c:465:
+						mstore(ps->nr_page_table_pages, NPROC_NR_PG_TABLE_PGS, buf);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: kernel/nproc.c:486:
+				pwarn("Unknown field requested %#x.\n",
+						fields[i]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: kernel/nproc.c:523:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#709: FILE: kernel/nproc.c:539:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#710: FILE: kernel/nproc.c:540:
+	}
+	else if (ltype == NPROC_LABEL_KSYM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: kernel/nproc.c:544:
+		char namebuf[128];
+		if (left < sizeof(unsigned long))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: kernel/nproc.c:549:
+		label = kallsyms_lookup(wchan, &size, &offset, &modname,
+				namebuf);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#725: FILE: kernel/nproc.c:555:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#725: FILE: kernel/nproc.c:555:
+	else {

WARNING:INLINE: plain inline is preferred over __inline__
#779: FILE: kernel/nproc.c:609:
+static __inline__ int nproc_process_msg(struct sk_buff *skb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: kernel/nproc.c:610:
+static __inline__ int nproc_process_msg(struct sk_buff *skb,
+		struct nlmsghdr *nlh)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#789: FILE: kernel/nproc.c:619:
+	switch (nlh->nlmsg_type) {
+		case NPROC_GET_LIST:
[...]
+		case NPROC_GET_LABEL:
[...]
+		case NPROC_GET_GLOBAL:
[...]
+		case NPROC_GET_PS:
[...]
+		default:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#808: FILE: kernel/nproc.c:638:
+
+}

ERROR:SPACING: space required before the open brace '{'
#819: FILE: kernel/nproc.c:649:
+	if (skb->len < nlh->nlmsg_len || nlh->nlmsg_len < sizeof(*nlh)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: kernel/nproc.c:657:
+		pdebug("err %d, type %#x, flags %#x, seq %#x.\n", err,
+				nlh->nlmsg_type, nlh->nlmsg_flags,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#868: FILE: init/Kconfig:144:
+config NPROC
+	bool "Netlink interface to /proc information"
+	depends on PROC_FS && EXPERIMENTAL
+	default y
+	help
+	  Nproc is a netlink interface to /proc information.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 22 warnings, 20 checks, 810 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
