WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -uNr linux-2.6.8.1-mm2-e820-64bit.x86_64/MAINTAINERS linux-2.6.8.1-mm2-kexec-generic/MAINTAINERS

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#37: FILE: MAINTAINERS:1250:
+P:	Randy Dunlap
+M:	ebiederm@xmission.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#41: FILE: MAINTAINERS:1254:
+W:	http://developer.osdl.org/rddunlap/kexec/
+L:	linux-kernel@vger.kernel.org

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/kexec.h:1:
+#ifndef LINUX_KEXEC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#65: FILE: include/linux/kexec.h:14:
+typedef unsigned long kimage_entry_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: include/linux/kexec.h:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/kexec.h:48:
+extern void machine_kexec(struct kimage *image);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/kexec.h:49:
+extern int machine_kexec_prepare(struct kimage *image);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/kexec.h:50:
+extern void machine_kexec_cleanup(struct kimage *image);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/kexec.h:53:
+extern struct page *kimage_alloc_control_pages(struct kimage *image, unsigned int order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/reboot.h:54:
+extern void machine_shutdown(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#135: FILE: kernel/kexec.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#153: FILE: kernel/kexec.c:19:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#154: FILE: kernel/kexec.c:20:
+#include <asm/io.h>

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#172: FILE: kernel/kexec.c:38:
+ * The code for the transition from the current kernel to the
+ * the new kernel is placed in the control_code_buffer, whose size

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#203: FILE: kernel/kexec.c:69:
+static int kimage_is_destination_range(

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#205: FILE: kernel/kexec.c:71:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long dest);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#207: FILE: kernel/kexec.c:73:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: kernel/kexec.c:75:
+static int kimage_alloc(struct kimage **rimage,
+	unsigned long nr_segments, struct kexec_segment *segments)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#219: FILE: kernel/kexec.c:85:
+	if (!image) {
+		goto out;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#233: FILE: kernel/kexec.c:99:
+	/* Initialize the list of unuseable pages */
 	                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before that '*' (ctx:VxV)
#238: FILE: kernel/kexec.c:104:
+	segment_bytes = nr_segments * sizeof*segments;
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: kernel/kexec.c:118:
+		unsigned long mend;
+		mend = ((unsigned long)(image->segment[i].mem)) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: kernel/kexec.c:131:
+	image->control_code_page = kimage_alloc_control_pages(image,
+		get_order(KEXEC_CONTROL_CODE_SIZE));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#267: FILE: kernel/kexec.c:133:
+		printk(KERN_ERR "Could not allocate control_code_buffer\n");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#273: FILE: kernel/kexec.c:139:
+	if (result == 0) {
[...]
+	} else {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#281: FILE: kernel/kexec.c:147:
+static int kimage_is_destination_range(

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: kernel/kexec.c:154:
+		unsigned long mstart, mend;
+		mstart = (unsigned long)image->segment[i].mem;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > mstart'
#290: FILE: kernel/kexec.c:156:
+		if ((end > mstart) && (start < mend)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < mend'
#290: FILE: kernel/kexec.c:156:
+		if ((end > mstart) && (start < mend)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#290: FILE: kernel/kexec.c:156:
+		if ((end > mstart) && (start < mend)) {
+			return 1;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: kernel/kexec.c:166:
+	struct page *pages;
+	pages = alloc_pages(gfp_mask, order);

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: kernel/kexec.c:169:
+		unsigned int count, i;
+		pages->mapping = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: kernel/kexec.c:172:
+		for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#306: FILE: kernel/kexec.c:172:
+		for(i = 0; i < count; i++) {
+			SetPageReserved(pages + i);
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: kernel/kexec.c:182:
+	unsigned int order, count, i;
+	order = page->private;

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: kernel/kexec.c:184:
+	for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#318: FILE: kernel/kexec.c:184:
+	for(i = 0; i < count; i++) {
+		ClearPageReserved(page + i);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: kernel/kexec.c:193:
+	struct list_head *pos, *next;
+	list_for_each_safe(pos, next, list) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: kernel/kexec.c:202:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: kernel/kexec.c:230:
+		unsigned long pfn, epfn, addr, eaddr;
+		pages = kimage_alloc_pages(GFP_KERNEL, order);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#371: FILE: kernel/kexec.c:237:
+		if ((epfn >= (KEXEC_CONTROL_MEMORY_LIMIT >> PAGE_SHIFT)) ||
+			kimage_is_destination_range(image, addr, eaddr))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: kernel/kexec.c:238:
+		if ((epfn >= (KEXEC_CONTROL_MEMORY_LIMIT >> PAGE_SHIFT)) ||
+			kimage_is_destination_range(image, addr, eaddr))

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: kernel/kexec.c:243:
+	} while(!pages);

WARNING:TYPO_SPELLING: 'everyting' may be misspelled - perhaps 'everything'?
#392: FILE: kernel/kexec.c:258:
+	 * page allocations, and add everyting to image->dest_pages.
 	                             ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: kernel/kexec.c:259:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: kernel/kexec.c:264:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#399: FILE: kernel/kexec.c:265:
+	
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#403: FILE: kernel/kexec.c:269:
+	if (*image->entry != 0) {
+		image->entry++;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#409: FILE: kernel/kexec.c:275:
+		struct page *page;
+		page = kimage_alloc_page(image, GFP_KERNEL, KIMAGE_NO_DEST);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#410: FILE: kernel/kexec.c:276:
+		if (!page) {
+			return -ENOMEM;
+		}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#417: FILE: kernel/kexec.c:283:
+			ind_page + ((PAGE_SIZE/sizeof(kimage_entry_t)) - 1);
 			                      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#425: FILE: kernel/kexec.c:291:
+static int kimage_set_destination(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#432: FILE: kernel/kexec.c:298:
+	if (result == 0) {
+		image->destination = destination;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#438: FILE: kernel/kexec.c:304:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#445: FILE: kernel/kexec.c:311:
+	if (result == 0) {
+		image->destination += PAGE_SIZE;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#451: FILE: kernel/kexec.c:317:
+
+

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#457: FILE: kernel/kexec.c:323:
+	/* Walk through and free any unuseable pages I have cached */
 	                             ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#460: FILE: kernel/kexec.c:326:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#461: FILE: kernel/kexec.c:327:
+}
+static int kimage_terminate(struct kimage *image)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'image' may be better as '(image)' to avoid precedence issues
#474: FILE: kernel/kexec.c:340:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#474: FILE: kernel/kexec.c:340:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#474: FILE: kernel/kexec.c:340:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#476: FILE: kernel/kexec.c:342:
+		ptr = (entry & IND_INDIRECTION)? \
 		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#477: FILE: kernel/kexec.c:343:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#477: FILE: kernel/kexec.c:343:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#498: FILE: kernel/kexec.c:364:
+			if (ind & IND_INDIRECTION) {
+				kimage_free_entry(ind);
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#506: FILE: kernel/kexec.c:372:
+		}
+		else if (entry & IND_SOURCE) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#511: FILE: kernel/kexec.c:377:
+	if (ind & IND_INDIRECTION) {
+		kimage_free_entry(ind);
+	}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#532: FILE: kernel/kexec.c:398:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#533: FILE: kernel/kexec.c:399:
+			if (page == destination) {
+				return ptr;
+			}

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#542: FILE: kernel/kexec.c:408:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long destination)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#582: FILE: kernel/kexec.c:448:
+		if (!page) {
+			return 0;
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#623: FILE: kernel/kexec.c:489:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#623: FILE: kernel/kexec.c:489:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: kernel/kexec.c:500:
+static int kimage_load_segment(struct kimage *image,
+	struct kexec_segment *segment)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#649: FILE: kernel/kexec.c:515:
+	if (result < 0) {
+		goto out;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: kernel/kexec.c:522:
+		size_t size, leader;
+		page = kimage_alloc_page(image, GFP_HIGHUSER, mstart + offset);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#662: FILE: kernel/kexec.c:528:
+		if (result < 0) {
+			goto out;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == 0'
#674: FILE: kernel/kexec.c:540:
+		if ((offset == 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#674: FILE: kernel/kexec.c:540:
+		if ((offset == 0)) {
+			leader = mstart & ~PAGE_MASK;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#683: FILE: kernel/kexec.c:549:
+		if (size > (segment->bufsz - offset)) {
+			size = segment->bufsz - offset;
+		}

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#721: FILE: kernel/kexec.c:587:
+struct kimage *kexec_image = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: kernel/kexec.c:590:
+asmlinkage long sys_kexec_load(unsigned long entry, unsigned long nr_segments,
+	struct kexec_segment *segments, unsigned long flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#748: FILE: kernel/kexec.c:614:
+		unsigned long i;
+		result = kimage_alloc(&image, nr_segments, segments);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#749: FILE: kernel/kexec.c:615:
+		if (result) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#753: FILE: kernel/kexec.c:619:
+		if (result) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#759: FILE: kernel/kexec.c:625:
+			if (result) {
+				goto out;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#764: FILE: kernel/kexec.c:630:
+		if (result) {
+			goto out;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#803: FILE: kernel/sys.c:520:
+		struct kimage *image;
+		image = xchg(&kexec_image, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#811: FILE: kernel/sys.c:528:
+		printk(KERN_EMERG "Starting new kernel\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 48 warnings, 29 checks, 767 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
