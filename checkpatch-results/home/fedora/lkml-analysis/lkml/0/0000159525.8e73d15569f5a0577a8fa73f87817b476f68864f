WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
On the face of it, neither is particularly more attractive than the other.  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: drivers/base/dd.c:30:
+static int __device_bind_driver(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: drivers/base/dd.c:32:
+	struct device_driver * drv = dev->driver;

CHECK:BRACES: braces {} should be used on all arms of this statement
#101: FILE: drivers/base/dd.c:38:
+	if (klist_node_attached(&drv->knode_bus)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: drivers/base/dd.c:46:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: drivers/base/dd.c:63:
+int device_bind_driver(struct device * dev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#148: FILE: drivers/base/dd.c:69:
+	 * a different driver */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#180: FILE: drivers/base/dd.c:105:
+		goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#199: FILE: drivers/base/dd.c:126:
+				printk(KERN_WARNING "%s: probe of %s failed "

WARNING:SPLIT_STRING: quoted string split across lines
#200: FILE: drivers/base/dd.c:127:
+				printk(KERN_WARNING "%s: probe of %s failed "
+					"with error %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: drivers/base/dd.c:174:
+	struct device_driver * drv = dev->driver;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#271: FILE: drivers/base/dd.c:183:
+			drv = dev->driver = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: drivers/base/dd.c:229:
+static void __device_release_driver(struct device * dev, void * driver)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: drivers/base/dd.c:229:
+static void __device_release_driver(struct device * dev, void * driver)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: drivers/base/dd.c:231:
+	struct device_driver * drv = driver;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: drivers/base/dd.c:263:
+	struct device_driver * drv = dev->driver;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#380: FILE: drivers/base/dd.c:279:
+	 * of that routine are forbidden to unbind the device. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: drivers/base/dd.c:282:
+		if (list_empty(&drv->devlist))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: drivers/base/dd.c:284:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/base/dd.c:286:
+			dev = list_entry(drv->devlist.prev,
+					struct device, node_driver);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#448: FILE: drivers/base/driver.c:39:
+	struct list_head * ptr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#477: FILE: drivers/base/driver.c:79:
+	struct list_head * ptr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#540: FILE: include/linux/device.h:282:
+					 * its driver. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#549: FILE: include/linux/device.h:336:
+extern int  device_bind_driver(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/linux/device.h:336:
+extern int  device_bind_driver(struct device * dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: lib/klist.c:131:
+struct klist_node * klist_get(struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: lib/klist.c:131:
+struct klist_node * klist_get(struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: lib/klist.c:133:
+	struct klist * k = n->n_klist;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#623: FILE: lib/klist.c:146:
+EXPORT_SYMBOL_GPL(klist_get);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#625: FILE: lib/klist.c:148:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#638: FILE: include/linux/klist.h:37:
+extern struct klist_node * klist_get(struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#638: FILE: include/linux/klist.h:37:
+extern struct klist_node * klist_get(struct klist_node * n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/linux/klist.h:37:
+extern struct klist_node * klist_get(struct klist_node * n);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 7 warnings, 10 checks, 519 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
