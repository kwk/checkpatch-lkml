WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
- Be more permissive about ioctl handling to allow device type drivers to do

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#86: FILE: arch/i386/pci/fixup.c:102:
 static void __devinit  pci_fixup_latency(struct pci_dev *d)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#96: FILE: arch/i386/pci/fixup.c:177:
+ 	{ PCI_FIXUP_HEADER,	PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82801CA_10,	pci_fixup_ide_trash },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: arch/i386/pci/fixup.c:177:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_10,^Ipci_fixup_ide_trash },$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: arch/i386/pci/fixup.c:177:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_10,^Ipci_fixup_ide_trash },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: arch/i386/pci/fixup.c:177:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_10,^Ipci_fixup_ide_trash },$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#97: FILE: arch/i386/pci/fixup.c:178:
+ 	{ PCI_FIXUP_HEADER,	PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82801CA_11,	pci_fixup_ide_trash },

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: arch/i386/pci/fixup.c:178:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_11,^Ipci_fixup_ide_trash },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: arch/i386/pci/fixup.c:178:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_11,^Ipci_fixup_ide_trash },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/i386/pci/fixup.c:178:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801CA_11,^Ipci_fixup_ide_trash },$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#98: FILE: arch/i386/pci/fixup.c:179:
+ 	{ PCI_FIXUP_HEADER,	PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82801DB_9,	pci_fixup_ide_trash },

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: arch/i386/pci/fixup.c:179:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801DB_9,^Ipci_fixup_ide_trash },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#98: FILE: arch/i386/pci/fixup.c:179:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801DB_9,^Ipci_fixup_ide_trash },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/i386/pci/fixup.c:179:
+ ^I{ PCI_FIXUP_HEADER,^IPCI_VENDOR_ID_INTEL,^IPCI_DEVICE_ID_INTEL_82801DB_9,^Ipci_fixup_ide_trash },$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/ide/ali14xx.c:53:
+^Iu8 reg, data; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#224: FILE: drivers/ide/ali14xx.c:129:
+	printk(KERN_DEBUG "%s: PIO mode%d, t1=%dns, t2=%dns, cycles = %d+%d, %d+%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: drivers/ide/ali14xx.c:130:
+	printk(KERN_DEBUG "%s: PIO mode%d, t1=%dns, t2=%dns, cycles = %d+%d, %d+%d\n",
 		drive->name, pio - XFER_PIO_0, time1, time2, param1, param2, param3, param4);

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: drivers/ide/ali14xx.c:162:
+				u8 t;
+				reg_port = base_port + 4;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: drivers/ide/ali14xx.c:203:
+		printk(KERN_ERR "ali14xx: not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#335: FILE: drivers/ide/ali14xx.c:207:
+	printk(KERN_DEBUG "ali14xx: base=%#03x, reg_on=%#02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: drivers/ide/ali14xx.c:208:
+	printk(KERN_DEBUG "ali14xx: base=%#03x, reg_on=%#02x\n",
+		base_port, reg_on);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: drivers/ide/ali14xx.c:218:
+		printk(KERN_ERR "ali14xx: Chip initialization failed\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#375: FILE: drivers/ide/ide.c:562:
+		return ata_error(drive, rq, __FUNCTION__);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#409: FILE: drivers/ide/ide-disk.c:102:
+		if (drive->status & (ERR_STAT|DRQ_STAT))
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#410: FILE: drivers/ide/ide-disk.c:103:
+			return ata_error(drive, rq, __FUNCTION__);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#413: FILE: drivers/ide/ide-disk.c:106:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: drivers/ide/ide-disk.c:107:
+			printk("task_in_intr to Soon wait for next interrupt\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_in_intr', this function's name, in a string
#414: FILE: drivers/ide/ide-disk.c:107:
+			printk("task_in_intr to Soon wait for next interrupt\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#422: FILE: drivers/ide/ide-disk.c:115:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#423: FILE: drivers/ide/ide-disk.c:116:
+	printk("Read: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#423: FILE: drivers/ide/ide-disk.c:116:
+	printk("Read: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#435: FILE: drivers/ide/ide-disk.c:128:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#436: FILE: drivers/ide/ide-disk.c:129:
+		printk("Request Ended stat: %02x\n", drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#457: FILE: drivers/ide/ide-disk.c:150:
+		return ata_error(drive, rq, __FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->nr_sectors == 1'
#463: FILE: drivers/ide/ide-disk.c:156:
+	if ((rq->nr_sectors == 1) != (drive->status & DRQ_STAT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#465: FILE: drivers/ide/ide-disk.c:158:
+#if 0

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#466: FILE: drivers/ide/ide-disk.c:159:
+		printk("write: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

CHECK:SPACING: No space is necessary after a cast
#466: FILE: drivers/ide/ide-disk.c:159:
+		printk("write: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#466: FILE: drivers/ide/ide-disk.c:159:
+		printk("write: %p, rq->current_nr_sectors: %d\n", buf, (int) rq->current_nr_sectors);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#490: FILE: drivers/ide/ide-disk.c:183:
+		if (drive->status & (ERR_STAT|DRQ_STAT))
 		                             ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#491: FILE: drivers/ide/ide-disk.c:184:
+			return ata_error(drive, rq, __FUNCTION__);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#508: FILE: drivers/ide/ide-disk.c:201:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: drivers/ide/ide-disk.c:202:
+		printk("Multiread: %p, nsect: %d , rq->current_nr_sectors: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: drivers/ide/ide-disk.c:203:
+		printk("Multiread: %p, nsect: %d , rq->current_nr_sectors: %d\n",
+			buf, nsect, rq->current_nr_sectors);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: drivers/ide/ide-disk.c:216:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#538: FILE: drivers/ide/ide-disk.c:231:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#550: FILE: drivers/ide/ide-disk.c:243:
+			startstop = ata_error(drive, rq, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#936: FILE: drivers/ide/ide-taskfile.c:191:
+			return ata_error(drive, rq, __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#993: FILE: drivers/ide/ide-taskfile.c:206:
+	 * FIXME: why not?! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/ide/ide-taskfile.c:220:
+	OUT_BYTE((ar->taskfile.device_head & (drive->addressing ? 0xE0 : 0xEF)) | drive->select.all,
+			IDE_SELECT_REG);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1046: FILE: drivers/ide/ide-taskfile.c:249:
+			if (ide_wait_stat(&startstop, drive, rq, DATA_READY, drive->bad_wstat, WAIT_DRQ)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1047: FILE: drivers/ide/ide-taskfile.c:250:
+				printk(KERN_ERR "%s: no DRQ after issuing %s\n",

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#1048: FILE: drivers/ide/ide-taskfile.c:251:
+						drive->name, drive->mult_count ? "MULTWRITE" : "WRITE");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1048: FILE: drivers/ide/ide-taskfile.c:251:
+				printk(KERN_ERR "%s: no DRQ after issuing %s\n",
+						drive->name, drive->mult_count ? "MULTWRITE" : "WRITE");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1068: FILE: drivers/ide/ide-taskfile.c:271:
+				return ide_started;
+			} else {

WARNING:TYPO_SPELLING: 'driectly' may be misspelled - perhaps 'directly'?
#1074: FILE: drivers/ide/ide-taskfile.c:277:
+				 * handler driectly therafter.
 				           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1084: FILE: drivers/ide/ide-taskfile.c:287:
+				if (!drive_is_ready(drive)) {
+					printk(KERN_ERR "DISASTER WAITING TO HAPPEN!\n");
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1085: FILE: drivers/ide/ide-taskfile.c:288:
+					printk(KERN_ERR "DISASTER WAITING TO HAPPEN!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1519: FILE: drivers/ide/ioctl.c:166:
+^I^I        if (!capable(CAP_SYS_ADMIN))$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1730: FILE: include/linux/ide.h:698:
+extern ide_startstop_t task_no_data_intr(struct ata_device *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452237.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 42 warnings, 13 checks, 1595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452237.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
