WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
 include/asm-i386/trace.h    |  131 ++++++++++++++++++++++++++++++++++++++++++++

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: arch/i386/kernel/entry.S:255:
+no_syscall_exit_trace:^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: arch/i386/kernel/irq.c:207:
+ ^ITRACE_IRQ_ENTRY(irq, !(user_mode(regs)));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: arch/i386/kernel/irq.c:207:
+ ^ITRACE_IRQ_ENTRY(irq, !(user_mode(regs)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: arch/i386/kernel/irq.c:207:
+ ^ITRACE_IRQ_ENTRY(irq, !(user_mode(regs)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/i386/kernel/irq.c:221:
+ ^ITRACE_IRQ_EXIT();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#108: FILE: arch/i386/kernel/irq.c:221:
+ ^ITRACE_IRQ_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/i386/kernel/irq.c:221:
+ ^ITRACE_IRQ_EXIT();$

ERROR:SPACING: space required before the open parenthesis '('
#129: FILE: arch/i386/kernel/process.c:230:
+	if(!IS_ERR(p))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#130: FILE: arch/i386/kernel/process.c:231:
+		TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, p->pid, (int) fn);

CHECK:SPACING: No space is necessary after a cast
#187: FILE: arch/i386/kernel/traps.c:305:
+	trace_syscall_event.syscall_id = (uint8_t) regs->orig_eax;

CHECK:SPACING: No space is necessary after a cast
#201: FILE: arch/i386/kernel/traps.c:319:
+			     (void *) &lower_bound,

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/i386/kernel/traps.c:320:
+			     (void *) &upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#206: FILE: arch/i386/kernel/traps.c:324:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#206: FILE: arch/i386/kernel/traps.c:324:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:SPACING: No space is necessary after a cast
#208: FILE: arch/i386/kernel/traps.c:326:
+		stack = (unsigned long *) regs->esp;

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#210: FILE: arch/i386/kernel/traps.c:328:
+		/* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#213: FILE: arch/i386/kernel/traps.c:331:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < current->mm->end_code'
#213: FILE: arch/i386/kernel/traps.c:331:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#214: FILE: arch/i386/kernel/traps.c:332:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#216: FILE: arch/i386/kernel/traps.c:334:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#216: FILE: arch/i386/kernel/traps.c:334:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#216: FILE: arch/i386/kernel/traps.c:334:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#216: FILE: arch/i386/kernel/traps.c:334:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#216: FILE: arch/i386/kernel/traps.c:334:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#217: FILE: arch/i386/kernel/traps.c:335:
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: arch/i386/kernel/traps.c:335:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:BRACES: Unbalanced braces around else statement
#223: FILE: arch/i386/kernel/traps.c:341:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: arch/i386/kernel/traps.c:393:
+        TRACE_TRAP_ENTRY(trapnr, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/i386/kernel/traps.c:393:
+        TRACE_TRAP_ENTRY(trapnr, regs->eip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: arch/i386/kernel/traps.c:505:
+        TRACE_TRAP_ENTRY(13, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: arch/i386/kernel/traps.c:505:
+        TRACE_TRAP_ENTRY(13, regs->eip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: arch/i386/kernel/traps.c:507:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/i386/kernel/traps.c:507:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/i386/kernel/traps.c:511:
+        TRACE_TRAP_ENTRY(13, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/i386/kernel/traps.c:511:
+        TRACE_TRAP_ENTRY(13, regs->eip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: arch/i386/kernel/traps.c:513:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: arch/i386/kernel/traps.c:513:
+        TRACE_TRAP_EXIT();$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#302: FILE: arch/i386/kernel/traps.c:576:
+/* On an machines with APIC enabled, NMIs are used to implement a watchdog
+and will hang the machine if traced. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#302: FILE: arch/i386/kernel/traps.c:576:
+and will hang the machine if traced. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: arch/i386/kernel/traps.c:593:
+^I        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: arch/i386/kernel/traps.c:611:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: arch/i386/kernel/traps.c:611:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: arch/i386/kernel/traps.c:713:
+        TRACE_TRAP_ENTRY(1, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: arch/i386/kernel/traps.c:713:
+        TRACE_TRAP_ENTRY(1, regs->eip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: arch/i386/kernel/traps.c:715:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: arch/i386/kernel/traps.c:715:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: arch/i386/kernel/traps.c:727:
+        TRACE_TRAP_ENTRY(1, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/i386/kernel/traps.c:727:
+        TRACE_TRAP_ENTRY(1, regs->eip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: arch/i386/kernel/traps.c:729:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/i386/kernel/traps.c:729:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: arch/i386/kernel/traps.c:878:
+        TRACE_TRAP_ENTRY(16, regs->eip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: arch/i386/kernel/traps.c:878:
+        TRACE_TRAP_ENTRY(16, regs->eip);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: arch/i386/kernel/traps.c:883:
+        TRACE_TRAP_EXIT();^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: arch/i386/kernel/traps.c:883:
+        TRACE_TRAP_EXIT();^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: arch/i386/kernel/traps.c:883:
+        TRACE_TRAP_EXIT();^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: arch/i386/kernel/traps.c:912:
+        TRACE_TRAP_ENTRY(7, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: arch/i386/kernel/traps.c:912:
+        TRACE_TRAP_ENTRY(7, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: arch/i386/kernel/traps.c:915:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: arch/i386/kernel/traps.c:915:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: arch/i386/mm/fault.c:279:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: arch/i386/mm/fault.c:279:
+        TRACE_TRAP_EXIT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: arch/i386/mm/fault.c:398:
+        TRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: arch/i386/mm/fault.c:398:
+        TRACE_TRAP_EXIT();$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#456: FILE: include/asm-i386/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#457: FILE: include/asm-i386/trace.h:2:
+ * linux/include/asm-i386/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: include/asm-i386/trace.h:17:
+#ifdef CONFIG_X86_TSC /* Is there x86 TSC support? */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: include/asm-i386/trace.h:26:
+ *^Itime difference between the current time and the buffer start time $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#489: FILE: include/asm-i386/trace.h:34:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: include/asm-i386/trace.h:34:
+	if((using_tsc == 1) && cpu_has_tsc)

CHECK:BRACES: braces {} should be used on all arms of this statement
#489: FILE: include/asm-i386/trace.h:34:
+	if((using_tsc == 1) && cpu_has_tsc)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: include/asm-i386/trace.h:36:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: include/asm-i386/trace.h:50:
+ *^Ipointed to by tsc to the tsc associated with that time, if the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: include/asm-i386/trace.h:53:
+static inline void get_timestamp(struct timeval *now, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#513: FILE: include/asm-i386/trace.h:58:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:SPACING: space required before the open parenthesis '('
#513: FILE: include/asm-i386/trace.h:58:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: include/asm-i386/trace.h:71:
+static inline void get_time_or_tsc(struct timeval *now, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#529: FILE: include/asm-i386/trace.h:74:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: include/asm-i386/trace.h:74:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: include/asm-i386/trace.h:82:
+ *^I@time_delta: previously calculated or retrieved time delta $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#544: FILE: include/asm-i386/trace.h:89:
+	if((using_tsc == 1) && cpu_has_tsc)

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: include/asm-i386/trace.h:89:
+	if((using_tsc == 1) && cpu_has_tsc)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#551: FILE: include/asm-i386/trace.h:96:
+ *	have_tsc: - Does this platform have a useable TSC?
   	                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#553: FILE: include/asm-i386/trace.h:98:
+ *	Returns 1 if this platform has a useable TSC counter for
   	                                 ^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: include/asm-i386/trace.h:103:
+	if(cpu_has_tsc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: include/asm-i386/trace.h:109:
+extern void init_ltt_percpu_timer(void * dummy);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#564: FILE: include/asm-i386/trace.h:109:
+extern void init_ltt_percpu_timer(void * dummy);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: include/asm-i386/trace.h:114:
+ *^ISets up the timers needed on each CPU for checking asynchronous $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: include/asm-i386/trace.h:115:
+ *^Itasks needing attention.  This is only the case when TSC timestamping $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'using_tsc == 1'
#575: FILE: include/asm-i386/trace.h:120:
+	if((using_tsc == 1) && cpu_has_tsc) {

ERROR:SPACING: space required before the open parenthesis '('
#575: FILE: include/asm-i386/trace.h:120:
+	if((using_tsc == 1) && cpu_has_tsc) {

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: include/asm-i386/trace.h:124:
+		if(smp_call_function(init_ltt_percpu_timer, NULL, 1, 1) != 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#580: FILE: include/asm-i386/trace.h:125:
+			printk(KERN_ALERT "Tracer: Couldn't initialize all per-CPU timers\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 30 warnings, 25 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
