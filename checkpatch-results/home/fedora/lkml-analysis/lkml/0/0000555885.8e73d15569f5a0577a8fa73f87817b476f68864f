WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
  - add magic to in-memory version of cramfs superblock (for initrd support)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/cramfs/inode.c:111:
+	struct buffer_head * read_array[BLKS_PER_BUF];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: fs/cramfs/inode.c:112:
+	unsigned i, blocknr, buffer, unread;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: fs/cramfs/inode.c:115:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: fs/cramfs/inode.c:210:
+			printk(KERN_ERR "cramfs: wrong magic\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: fs/cramfs/inode.c:217:
+		printk(KERN_ERR "cramfs: unsupported filesystem features\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: fs/cramfs/inode.c:223:
+		printk(KERN_ERR "cramfs: root is not a directory\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#298: FILE: fs/cramfs/inode.c:228:
+		sb->CRAMFS_SB_SIZE=super.size;
 		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#299: FILE: fs/cramfs/inode.c:229:
+		sb->CRAMFS_SB_BLOCKS=super.fsid.blocks;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#300: FILE: fs/cramfs/inode.c:230:
+		sb->CRAMFS_SB_FILES=super.fsid.files;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#302: FILE: fs/cramfs/inode.c:232:
+		sb->CRAMFS_SB_SIZE=1<<28;
 		                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: fs/cramfs/inode.c:232:
+		sb->CRAMFS_SB_SIZE=1<<28;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#303: FILE: fs/cramfs/inode.c:233:
+		sb->CRAMFS_SB_BLOCKS=0;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#304: FILE: fs/cramfs/inode.c:234:
+		sb->CRAMFS_SB_FILES=0;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#306: FILE: fs/cramfs/inode.c:236:
+	sb->CRAMFS_SB_MAGIC=super.magic;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#307: FILE: fs/cramfs/inode.c:237:
+	sb->CRAMFS_SB_FLAGS=super.flags;
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#312: FILE: fs/cramfs/inode.c:239:
+		printk(KERN_INFO "cramfs: empty filesystem");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#313: FILE: fs/cramfs/inode.c:240:
+	else if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
+		 ((root_offset != sizeof(struct cramfs_super)) &&
+		  (root_offset != 512 + sizeof(struct cramfs_super))))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#317: FILE: fs/cramfs/inode.c:244:
+		printk(KERN_ERR "cramfs: bad root offset %lu\n", root_offset);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_name.name[0] < name[0]'
#354: FILE: fs/cramfs/inode.c:340:
+		if (sorted && (dentry->d_name.name[0] < name[0]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#384: FILE: include/linux/cramfs_fs.h:1:
+#ifndef __CRAMFS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#413: FILE: include/linux/cramfs_fs.h:30:
+	u32 mode:CRAMFS_MODE_WIDTH, uid:CRAMFS_UID_WIDTH;
 	                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#415: FILE: include/linux/cramfs_fs.h:32:
+	u32 size:CRAMFS_SIZE_WIDTH, gid:CRAMFS_GID_WIDTH;
 	                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: include/linux/cramfs_fs.h:34:
+           rounded up.  (cramfs doesn't support hard links.) */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#417: FILE: include/linux/cramfs_fs.h:34:
+	/* NAMELEN is the length of the file name, divided by 4 and
+           rounded up.  (cramfs doesn't support hard links.) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#417: FILE: include/linux/cramfs_fs.h:34:
+           rounded up.  (cramfs doesn't support hard links.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#419: FILE: include/linux/cramfs_fs.h:36:
+	/* OFFSET: For symlinks and non-empty regular files, this
+	   contains the offset (divided by 4) of the file data in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#423: FILE: include/linux/cramfs_fs.h:40:
+	   directory.  For anything else, offset is zero. */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#424: FILE: include/linux/cramfs_fs.h:41:
+	u32 namelen:CRAMFS_NAMELEN_WIDTH, offset:CRAMFS_OFFSET_WIDTH;
 	                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#477: FILE: include/linux/cramfs_fs_sb.h:1:
+#ifndef _CRAMFS_FS_SB

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#530: FILE: scripts/cramfs/cramfsck.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#546: FILE: scripts/cramfs/cramfsck.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#547: FILE: scripts/cramfs/cramfsck.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#590: FILE: scripts/cramfs/cramfsck.c:61:
+static int opt_verbose = 0;	/* 1 = verbose (-v), 2+ = very verbose (-vv) */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#592: FILE: scripts/cramfs/cramfsck.c:63:
+static int opt_extract = 0;	/* extract cramfs (-x) */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#593: FILE: scripts/cramfs/cramfsck.c:64:
+char *extract_dir = NULL;	/* extraction directory (-x) */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#596: FILE: scripts/cramfs/cramfsck.c:67:
+unsigned long end_inode = 0;		/* end of the directory structure */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#598: FILE: scripts/cramfs/cramfsck.c:69:
+unsigned long end_data = 0;		/* end of the data */

CHECK:BIT_MACRO: Prefer using the BIT macro
#607: FILE: scripts/cramfs/cramfsck.c:78:
+#define ROMBUFFERSIZE	(1 << ROMBUFFER_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#608: FILE: scripts/cramfs/cramfsck.c:79:
+#define ROMBUFFERMASK	(ROMBUFFERSIZE-1)
                      	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#613: FILE: scripts/cramfs/cramfsck.c:84:
+static char outbuffer[PAGE_CACHE_SIZE*2];
                                      ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#623: FILE: scripts/cramfs/cramfsck.c:94:
+	fprintf(stream, "usage: %s [-hv] [-x dir] file\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#641: FILE: scripts/cramfs/cramfsck.c:112:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#641: FILE: scripts/cramfs/cramfsck.c:112:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: scripts/cramfs/cramfsck.c:127:
+	unsigned int block = offset >> ROMBUFFER_BITS;
+	if (block != read_buffer_block) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#664: FILE: scripts/cramfs/cramfsck.c:135:
+static struct cramfs_inode *cramfs_iget(struct cramfs_inode * i)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#676: FILE: scripts/cramfs/cramfsck.c:147:
+void iput(struct cramfs_inode *inode)
      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#706: FILE: scripts/cramfs/cramfsck.c:177:
+	stream.next_out = (unsigned char *) outbuffer;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#707: FILE: scripts/cramfs/cramfsck.c:178:
+	stream.avail_out = PAGE_CACHE_SIZE*2;
 	                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <inflateReset>
#709: FILE: scripts/cramfs/cramfsck.c:180:
+	inflateReset(&stream);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#750: FILE: scripts/cramfs/cramfsck.c:221:
+	unsigned long next = *(u32 *) romfs_read(offset);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#753: FILE: scripts/cramfs/cramfsck.c:224:
+	if (next > end_data) {
+		end_data = next;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#773: FILE: scripts/cramfs/cramfsck.c:244:
+		if (opt_verbose > 1) {
+			printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);
+		}

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#774: FILE: scripts/cramfs/cramfsck.c:245:
+			printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#788: FILE: scripts/cramfs/cramfsck.c:259:
+	if (S_ISCHR(i->mode)) {
[...]
+	else if (S_ISBLK(i->mode)) {
[...]
+	else if (S_ISFIFO(i->mode))
[...]
+	else if (S_ISSOCK(i->mode))
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#792: FILE: scripts/cramfs/cramfsck.c:263:
+	}
+	else if (S_ISBLK(i->mode)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#796: FILE: scripts/cramfs/cramfsck.c:267:
+	}
+	else if (S_ISFIFO(i->mode))

CHECK:BRACES: Unbalanced braces around else statement
#800: FILE: scripts/cramfs/cramfsck.c:271:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#805: FILE: scripts/cramfs/cramfsck.c:276:
+	if (opt_verbose) {
+		print_node(type, i, path);
+	}

CHECK:SPACING: No space is necessary after a cast
#824: FILE: scripts/cramfs/cramfsck.c:295:
+		unsigned long next = *(u32 *) romfs_read(offset);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#826: FILE: scripts/cramfs/cramfsck.c:297:
+		if (next > end_data) {
+			end_data = next;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#832: FILE: scripts/cramfs/cramfsck.c:303:
+			if (opt_verbose > 1) {
+				printf("  hole at %ld (%d)\n", curr, PAGE_CACHE_SIZE);
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#839: FILE: scripts/cramfs/cramfsck.c:310:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#839: FILE: scripts/cramfs/cramfsck.c:310:
+		else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#840: FILE: scripts/cramfs/cramfsck.c:311:
+			if (opt_verbose > 1) {
+				printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);
+			}

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#841: FILE: scripts/cramfs/cramfsck.c:312:
+				printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#852: FILE: scripts/cramfs/cramfsck.c:323:
+				fprintf(stderr, "%s: Non-size (%ld vs %ld) bytes\n", filename, out, size);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#857: FILE: scripts/cramfs/cramfsck.c:328:
+		if (opt_extract) {
+			write(fd, outbuffer, out);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#871: FILE: scripts/cramfs/cramfsck.c:342:
+		if (count > 0 && offset < start_inode) {
+			start_inode = offset;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#878: FILE: scripts/cramfs/cramfsck.c:349:
+		if (opt_verbose) {
+			print_node('d', inode, path);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#905: FILE: scripts/cramfs/cramfsck.c:376:
+			if (offset > end_inode) {
+				end_inode = offset;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#915: FILE: scripts/cramfs/cramfsck.c:386:
+		if (offset > 0 && offset < start_data) {
+			start_data = offset;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#918: FILE: scripts/cramfs/cramfsck.c:389:
+		if (opt_verbose) {
+			print_node('f', inode, path);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#921: FILE: scripts/cramfs/cramfsck.c:392:
+		if (opt_extract) {
+			fd = open(path, O_WRONLY | O_CREAT | O_TRUNC, inode->mode);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#924: FILE: scripts/cramfs/cramfsck.c:395:
+		if (inode->size) {
+			do_uncompress(fd, offset, inode->size);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#936: FILE: scripts/cramfs/cramfsck.c:407:
+		if (offset < start_data) {
+			start_data = offset;
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#942: FILE: scripts/cramfs/cramfsck.c:413:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#942: FILE: scripts/cramfs/cramfsck.c:413:
+	else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1002: FILE: scripts/cramfs/cramfsck.c:473:
+			fprintf(stderr, "%s: warning--unable to determine filesystem size \n", filename);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1002: FILE: scripts/cramfs/cramfsck.c:473:
+			fprintf(stderr, "%s: warning--unable to determine filesystem size \n", filename);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1007: FILE: scripts/cramfs/cramfsck.c:478:
+	}
+	else if (S_ISREG(st.st_mode)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1010: FILE: scripts/cramfs/cramfsck.c:481:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1010: FILE: scripts/cramfs/cramfsck.c:481:
+	else {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1022: FILE: scripts/cramfs/cramfsck.c:493:
+		buf = mmap(NULL, length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1025: FILE: scripts/cramfs/cramfsck.c:496:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1025: FILE: scripts/cramfs/cramfsck.c:496:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1031: FILE: scripts/cramfs/cramfsck.c:502:
+	if (((struct cramfs_super *) buf)->magic == CRAMFS_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: scripts/cramfs/cramfsck.c:504:
+		super = (struct cramfs_super *) buf;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1035: FILE: scripts/cramfs/cramfsck.c:506:
+	else if (length >= (PAD_SIZE + sizeof(struct cramfs_super)) &&
+		 ((((struct cramfs_super *) (buf + PAD_SIZE))->magic == CRAMFS_MAGIC)))
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1035: FILE: scripts/cramfs/cramfsck.c:506:
+	}
+	else if (length >= (PAD_SIZE + sizeof(struct cramfs_super)) &&

CHECK:SPACING: No space is necessary after a cast
#1036: FILE: scripts/cramfs/cramfsck.c:507:
+		 ((((struct cramfs_super *) (buf + PAD_SIZE))->magic == CRAMFS_MAGIC)))

CHECK:SPACING: No space is necessary after a cast
#1039: FILE: scripts/cramfs/cramfsck.c:510:
+		super = (struct cramfs_super *) (buf + PAD_SIZE);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1041: FILE: scripts/cramfs/cramfsck.c:512:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1041: FILE: scripts/cramfs/cramfsck.c:512:
+	else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1052: FILE: scripts/cramfs/cramfsck.c:523:
+		}
+		else if (length > super->size) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1053: FILE: scripts/cramfs/cramfsck.c:524:
+			fprintf(stderr, "%s: warning--file length too long, padded image?\n", filename);

CHECK:SPACING: No space is necessary after a cast
#1060: FILE: scripts/cramfs/cramfsck.c:531:
+		crc_new = crc32(crc_new, (unsigned char *) buf+start, super->size - start);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1060: FILE: scripts/cramfs/cramfsck.c:531:
+		crc_new = crc32(crc_new, (unsigned char *) buf+start, super->size - start);
 		                                              ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1066: FILE: scripts/cramfs/cramfsck.c:537:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1066: FILE: scripts/cramfs/cramfsck.c:537:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1072: FILE: scripts/cramfs/cramfsck.c:543:
+	super = (struct cramfs_super *) malloc(sizeof(struct cramfs_super));

CHECK:SPACING: No space is necessary after a cast
#1073: FILE: scripts/cramfs/cramfsck.c:544:
+	if (((struct cramfs_super *) buf)->magic == CRAMFS_MAGIC) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1073: FILE: scripts/cramfs/cramfsck.c:544:
+	if (((struct cramfs_super *) buf)->magic == CRAMFS_MAGIC) {
[...]
+	else if (length >= (PAD_SIZE + sizeof(struct cramfs_super)) &&
[...]

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1076: FILE: scripts/cramfs/cramfsck.c:547:
+	else if (length >= (PAD_SIZE + sizeof(struct cramfs_super)) &&
+		 ((((struct cramfs_super *) (buf + PAD_SIZE))->magic == CRAMFS_MAGIC)))
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1076: FILE: scripts/cramfs/cramfsck.c:547:
+	}
+	else if (length >= (PAD_SIZE + sizeof(struct cramfs_super)) &&

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: scripts/cramfs/cramfsck.c:548:
+		 ((((struct cramfs_super *) (buf + PAD_SIZE))->magic == CRAMFS_MAGIC)))

CHECK:CAMELCASE: Avoid CamelCase: <inflateInit>
#1095: FILE: scripts/cramfs/cramfsck.c:566:
+	inflateInit(&stream);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1097: FILE: scripts/cramfs/cramfsck.c:568:
+	if (!extract_dir) {
+		extract_dir = "root";
+	}

CHECK:CAMELCASE: Avoid CamelCase: <inflateEnd>
#1102: FILE: scripts/cramfs/cramfsck.c:573:
+	inflateEnd(&stream);

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1105: FILE: scripts/cramfs/cramfsck.c:576:
+		fprintf(stderr, "%s: invalid cramfs--directory data end (%ld) != file data start (%ld)\n", filename, end_inode, start_data);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1122: FILE: scripts/cramfs/mkcramfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1138: FILE: scripts/cramfs/mkcramfs.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1139: FILE: scripts/cramfs/mkcramfs.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#1186: FILE: scripts/cramfs/mkcramfs.c:47:
+	fprintf(stream, "usage: %s [-h] [-e edition] [-i file] [-n name] dirname outfile\n"

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1204: FILE: scripts/cramfs/mkcramfs.c:65:
+static int image_length = 0;

WARNING:REPEATED_WORD: Possible repeated word: 'most'
#1209: FILE: scripts/cramfs/mkcramfs.c:70:
+ * saving than most most filesystems).

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1214: FILE: scripts/cramfs/mkcramfs.c:75:
+static int opt_holes = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1215: FILE: scripts/cramfs/mkcramfs.c:76:
+static int opt_edition = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1216: FILE: scripts/cramfs/mkcramfs.c:77:
+static int opt_pad = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1217: FILE: scripts/cramfs/mkcramfs.c:78:
+static char *opt_name = NULL, *opt_image = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1245: FILE: scripts/cramfs/mkcramfs.c:127:
+                if(orig->size && orig->uncompressed)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: scripts/cramfs/mkcramfs.c:127:
+                if(orig->size && orig->uncompressed)$

ERROR:SPACING: space required before the open parenthesis '('
#1245: FILE: scripts/cramfs/mkcramfs.c:127:
+                if(orig->size && orig->uncompressed)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1256: FILE: scripts/cramfs/mkcramfs.c:138:
+static int cramsort (const void *a, const void *b)

CHECK:SPACING: No space is necessary after a cast
#1258: FILE: scripts/cramfs/mkcramfs.c:140:
+	return strcmp ((*(const struct dirent **) a)->d_name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1258: FILE: scripts/cramfs/mkcramfs.c:140:
+	return strcmp ((*(const struct dirent **) a)->d_name,

CHECK:SPACING: No space is necessary after a cast
#1259: FILE: scripts/cramfs/mkcramfs.c:141:
+		       (*(const struct dirent **) b)->d_name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1286: FILE: scripts/cramfs/mkcramfs.c:163:
+        /* read in the directory and sort */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1287: FILE: scripts/cramfs/mkcramfs.c:164:
+        dircount = scandir(name, &dirlist, 0, cramsort);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1287: FILE: scripts/cramfs/mkcramfs.c:164:
+        dircount = scandir(name, &dirlist, 0, cramsort);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1337: FILE: scripts/cramfs/mkcramfs.c:279:
+			if (entry->size & -(1<<CRAMFS_SIZE_WIDTH))
 			                     ^

ERROR:SPACING: space required before the open parenthesis '('
#1350: FILE: scripts/cramfs/mkcramfs.c:287:
+			if(entry->size)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1351: FILE: scripts/cramfs/mkcramfs.c:288:
+				*fslen_ub += (4+26)*blocks + entry->size + 3;
 				               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1351: FILE: scripts/cramfs/mkcramfs.c:288:
+				*fslen_ub += (4+26)*blocks + entry->size + 3;
 				                   ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1385: FILE: scripts/cramfs/mkcramfs.c:307:
+	if (opt_pad) {
+		offset += opt_pad;
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1447: FILE: scripts/cramfs/mkcramfs.c:439:
+static int is_zero(char const *begin, unsigned len)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1464: FILE: scripts/cramfs/mkcramfs.c:443:
+		/* Returns non-zero iff the first LEN bytes from BEGIN are
+		   all NULs. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1464: FILE: scripts/cramfs/mkcramfs.c:443:
+		   all NULs. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1507: FILE: scripts/cramfs/mkcramfs.c:552:
+	close (fd);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1527: FILE: scripts/cramfs/mkcramfs.c:570:
+		  + (1 << CRAMFS_SIZE_WIDTH) * 4 / PAGE_CACHE_SIZE /* block pointers */ )

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1547: FILE: scripts/cramfs/mkcramfs.c:590:
+	loff_t fslen_ub = blksize; /* initial guess (upper-bound) of
+				      required filesystem size */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1547: FILE: scripts/cramfs/mkcramfs.c:590:
+				      required filesystem size */

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1617: FILE: scripts/cramfs/mkcramfs.c:655:
+			"warning: guestimate of required size (upper bound) is %LdMB, but maximum image size is %uMB.  We might die prematurely.\n",

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1635: FILE: scripts/cramfs/mkcramfs.c:674:
+	rom_image = mmap(NULL, fslen_ub?fslen_ub:1, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1635: FILE: scripts/cramfs/mkcramfs.c:674:
+	rom_image = mmap(NULL, fslen_ub?fslen_ub:1, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 	                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1635: FILE: scripts/cramfs/mkcramfs.c:674:
+	rom_image = mmap(NULL, fslen_ub?fslen_ub:1, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1664: FILE: scripts/cramfs/mkcramfs.c:705:
+	write_superblock(root_entry, rom_image+opt_pad, offset);
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1668: FILE: scripts/cramfs/mkcramfs.c:709:
+	crc = crc32(crc, (rom_image+opt_pad), (offset-opt_pad));
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1668: FILE: scripts/cramfs/mkcramfs.c:709:
+	crc = crc32(crc, (rom_image+opt_pad), (offset-opt_pad));
 	                                             ^

CHECK:SPACING: No space is necessary after a cast
#1669: FILE: scripts/cramfs/mkcramfs.c:710:
+	((struct cramfs_super *) (rom_image+opt_pad))->fsid.crc = crc;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1669: FILE: scripts/cramfs/mkcramfs.c:710:
+	((struct cramfs_super *) (rom_image+opt_pad))->fsid.crc = crc;
 	                                   ^

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#1674: FILE: scripts/cramfs/mkcramfs.c:715:
+		fprintf(stderr, "not enough space allocated for ROM image (%Ld allocated, %d used)\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1674: FILE: scripts/cramfs/mkcramfs.c:715:
+		fprintf(stderr, "not enough space allocated for ROM image (%Ld allocated, %d used)\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000555885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 59 warnings, 46 checks, 1504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000555885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
