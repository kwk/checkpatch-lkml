WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> Your mailer does horrible things to whitespace (word wrap etc). Please fix

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#90: FILE: ./kernel/signal.c:162:
+	if (info && (unsigned long)info != 1
+	    && info->si_code != SI_TKILL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#120: FILE: ./kernel/signal.c:669:
+		if (!thread_group_leader(p)) {
+                       struct task_struct *tg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: ./kernel/signal.c:670:
+                       struct task_struct *tg;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: ./kernel/signal.c:670:
+                       struct task_struct *tg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: ./kernel/signal.c:671:
+                       tg = find_task_by_pid(p->tgid);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: ./kernel/signal.c:671:
+                       struct task_struct *tg;
+                       tg = find_task_by_pid(p->tgid);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: ./kernel/signal.c:671:
+                       tg = find_task_by_pid(p->tgid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: ./kernel/signal.c:672:
+                       if (tg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: ./kernel/signal.c:672:
+                       if (tg)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#123: FILE: ./kernel/signal.c:672:
+                       if (tg)
+                               p = tg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: ./kernel/signal.c:673:
+                               p = tg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: ./kernel/signal.c:673:
+                               p = tg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: ./kernel/signal.c:674:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: ./kernel/signal.c:674:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: ./kernel/signal.c:1030:
+       struct siginfo info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: ./kernel/signal.c:1031:
+       int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: ./kernel/signal.c:1032:
+       struct task_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: ./kernel/signal.c:1035:
+       if (pid <= 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#157: FILE: ./kernel/signal.c:1035:
+       if (pid <= 0)
+           return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: ./kernel/signal.c:1036:
+           return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: ./kernel/signal.c:1036:
+           return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: ./kernel/signal.c:1038:
+       info.si_signo = sig;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: ./kernel/signal.c:1039:
+       info.si_errno = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: ./kernel/signal.c:1040:
+       info.si_code = SI_TKILL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: ./kernel/signal.c:1041:
+       info.si_pid = current->pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: ./kernel/signal.c:1042:
+       info.si_uid = current->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: ./kernel/signal.c:1044:
+       read_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: ./kernel/signal.c:1045:
+       p = find_task_by_pid(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: ./kernel/signal.c:1046:
+       error = -ESRCH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: ./kernel/signal.c:1047:
+       if (p) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#169: FILE: ./kernel/signal.c:1047:
+       if (p) {
+               error = send_sig_info(sig, &info, p);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#169: FILE: ./kernel/signal.c:1047:
+       if (p) {
+               error = send_sig_info(sig, &info, p);
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: ./kernel/signal.c:1048:
+               error = send_sig_info(sig, &info, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: ./kernel/signal.c:1048:
+               error = send_sig_info(sig, &info, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: ./kernel/signal.c:1049:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: ./kernel/signal.c:1050:
+       read_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: ./kernel/signal.c:1051:
+       return error;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: ./include/linux/sched.h:567:
+extern void sig_exit(int, int, struct siginfo *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#183: FILE: ./include/linux/sched.h:567:
+extern void sig_exit(int, int, struct siginfo *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#183: FILE: ./include/linux/sched.h:567:
+extern void sig_exit(int, int, struct siginfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#183: FILE: ./include/linux/sched.h:567:
+extern void sig_exit(int, int, struct siginfo *);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#191: FILE: ./include/linux/sched.h:843:
+#define for_each_thread(task) \
+	for (task = next_thread(current) ; task != current ; task = 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#191: FILE: ./include/linux/sched.h:843:
+#define for_each_thread(task) \
+	for (task = next_thread(current) ; task != current ; task = 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: ./include/linux/sched.h:844:
+^Ifor (task = next_thread(current) ; task != current ; task = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#193: FILE: ./include/linux/sched.h:844:
next_thread(task))

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#198: FILE: ./include/linux/sched.h:849:
+#define thread_group_leader(p)	(p->pid == p->tgid)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#198: FILE: ./include/linux/sched.h:849:
+#define thread_group_leader(p)	(p->pid == p->tgid)

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux>
#229: FILE: ./include/asm-mips/unistd.h:236:
+#define __NR_gettid			(__NR_Linux + 221)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux_syscalls>
#421: FILE: ./include/asm-mips64/unistd.h:470:
+#define __NR_Linux_syscalls		215

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#500: FILE: ./include/asm-s390x/unistd.h:185:
+#define __NR_tkill ^I        227$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 34 warnings, 7 checks, 689 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
