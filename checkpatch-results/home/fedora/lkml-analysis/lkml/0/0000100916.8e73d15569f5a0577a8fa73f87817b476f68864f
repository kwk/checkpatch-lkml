WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/gfs2/quota.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'controlable' may be misspelled - perhaps 'controllable'?
#61: FILE: fs/gfs2/quota.c:17:
+ * multiple nodes to overrun their quota, but that overrun is controlable.
                                                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#112: FILE: fs/gfs2/quota.c:68:
+	uint64_t offset;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qd)...) over kzalloc(sizeof(struct gfs2_quota_data)...)
#126: FILE: fs/gfs2/quota.c:82:
+	qd = kzalloc(sizeof(struct gfs2_quota_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/gfs2/quota.c:93:
+	error = gfs2_glock_get(sdp, 2 * (uint64_t)id + !user,
+			      &gfs2_quota_glops, CREATE, &qd->qd_gl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: fs/gfs2/quota.c:171:
+	struct gfs2_sbd *sdp = qd->qd_gl->gl_sbd;
+	spin_lock(&sdp->sd_quota_spin);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#293: FILE: fs/gfs2/quota.c:249:
+	uint64_t dblock;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#306: FILE: fs/gfs2/quota.c:262:
+	offset = qd->qd_slot % sdp->sd_qc_per_block;;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#574: FILE: fs/gfs2/quota.c:530:
+	int64_t x;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: fs/gfs2/quota.c:562:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#617: FILE: fs/gfs2/quota.c:573:
+			     int64_t change, struct gfs2_quota_data *qd)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#622: FILE: fs/gfs2/quota.c:578:
+	unsigned offset = loc & (PAGE_CACHE_SHIFT - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#623: FILE: fs/gfs2/quota.c:579:
+	unsigned blocksize, iblock, pos;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#674: FILE: fs/gfs2/quota.c:630:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: fs/gfs2/quota.c:656:
+	gfs2_write_calc_reserv(ip, sizeof(struct gfs2_quota),
+			      &data_blocks, &ind_blocks);

WARNING:LINE_SPACING: Missing a blank line after declarations
#814: FILE: fs/gfs2/quota.c:770:
+		loff_t pos;
+		gfs2_glock_dq_uninit(q_gh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: fs/gfs2/quota.c:772:
+		error = gfs2_glock_nq_init(qd->qd_gl,
+					  LM_ST_EXCLUSIVE, GL_NOCACHE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: fs/gfs2/quota.c:778:
+		error = gfs2_glock_nq_init(get_v2ip(sdp->sd_quota_inode)->i_gl,
+					  LM_ST_SHARED, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: fs/gfs2/quota.c:786:
+		error = gfs2_internal_read(get_v2ip(sdp->sd_quota_inode),
+					    &ra_state, buf,

CHECK:BRACES: braces {} should be used on all arms of this statement
#888: FILE: fs/gfs2/quota.c:844:
+	if (!error)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#890: FILE: fs/gfs2/quota.c:846:
+	else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#903: FILE: fs/gfs2/quota.c:859:
+	int64_t value;

CHECK:BRACES: braces {} should be used on all arms of this statement
#919: FILE: fs/gfs2/quota.c:875:
+	if (value < 0)
[...]
+	else if (qd->qd_qb.qb_value >= (int64_t)qd->qd_qb.qb_limit)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#923: FILE: fs/gfs2/quota.c:879:
+	else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#979: FILE: fs/gfs2/quota.c:935:
+	len = snprintf(line, MAX_LINE-1, "GFS2: fsid=%s: quota %s for %s %u\r\n",
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#983: FILE: fs/gfs2/quota.c:939:
+	line[MAX_LINE-1] = 0;
 	             ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#999: FILE: fs/gfs2/quota.c:955:
+	int64_t value;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: fs/gfs2/quota.c:962:
+        if (sdp->sd_args.ar_quota != GFS2_QUOTA_ON)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: fs/gfs2/quota.c:962:
+        if (sdp->sd_args.ar_quota != GFS2_QUOTA_ON)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: fs/gfs2/quota.c:963:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: fs/gfs2/quota.c:963:
+                return 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1038: FILE: fs/gfs2/quota.c:994:
+		       uint32_t uid, uint32_t gid)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != current->fsuid'
#1130: FILE: fs/gfs2/quota.c:1086:
+	if (((user) ? (id != current->fsuid) : (!in_group_p(id))) &&
+	    !capable(CAP_SYS_ADMIN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1165: FILE: fs/gfs2/quota.c:1121:
+	uint64_t dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1166: FILE: fs/gfs2/quota.c:1122:
+	uint32_t extlen = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: fs/gfs2/quota.c:1129:
+^I^Ireturn -EIO;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1197: FILE: fs/gfs2/quota.c:1153:
+			int new = 0;
+			error = gfs2_block_map(ip, x, &new, &dblock, &extlen);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1270: FILE: fs/gfs2/quota.c:1226:
+^I^I^I        gfs2_tune_get(sdp, gt_quota_cache_secs) * HZ)) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1315: FILE: fs/gfs2/quota.c:1271:
+		if (!qd->qd_count) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1318: FILE: fs/gfs2/quota.c:1274:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1341: FILE: fs/gfs2/quota.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1363: FILE: fs/gfs2/quota.h:23:
+		       uint32_t uid, uint32_t gid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1378: FILE: fs/gfs2/lvb.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1396: FILE: fs/gfs2/lvb.c:19:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'struct' may be better as '(struct)' to avoid precedence issues
#1396: FILE: fs/gfs2/lvb.c:19:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1396: FILE: fs/gfs2/lvb.c:19:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1396: FILE: fs/gfs2/lvb.c:19:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1396: FILE: fs/gfs2/lvb.c:19:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1429: FILE: fs/gfs2/lvb.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1444: FILE: fs/gfs2/lvb.h:16:
+	uint32_t qb_magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1445: FILE: fs/gfs2/lvb.h:17:
+	uint32_t __pad;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1446: FILE: fs/gfs2/lvb.h:18:
+	uint64_t qb_limit;      /* Hard limit of # blocks to alloc */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1447: FILE: fs/gfs2/lvb.h:19:
+	uint64_t qb_warn;       /* Warn user when alloc is above this # */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1448: FILE: fs/gfs2/lvb.h:20:
+	int64_t qb_value;       /* Current # blocks allocated */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 16 warnings, 33 checks, 1403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
