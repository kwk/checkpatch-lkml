CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#28: 
On Wed, Jun 09, 2004 at 02:20:02PM +0200, Jörn Engel wrote:
                                           ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
* some code used large structure (with embeded 256 bytes for filename) while

WARNING:TYPO_SPELLING: 'embeded' may be misspelled - perhaps 'embedded'?
#46: 
* some code used large structure (with embeded 256 bytes for filename) while
                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <volNumber>
#68: FILE: fs/ncpfs/dir.c:770:
+		__u32 volNumber, dirEntNum, DosDirNum;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <dirEntNum>
#68: FILE: fs/ncpfs/dir.c:770:
+		__u32 volNumber, dirEntNum, DosDirNum;

CHECK:CAMELCASE: Avoid CamelCase: <DosDirNum>
#68: FILE: fs/ncpfs/dir.c:770:
+		__u32 volNumber, dirEntNum, DosDirNum;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#102: FILE: fs/ncpfs/ioctl.c:33:
+ncp_get_fs_info(struct ncp_server* server, struct inode* inode, struct ncp_fs_info* arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#102: FILE: fs/ncpfs/ioctl.c:33:
+ncp_get_fs_info(struct ncp_server* server, struct inode* inode, struct ncp_fs_info* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#102: FILE: fs/ncpfs/ioctl.c:33:
+ncp_get_fs_info(struct ncp_server* server, struct inode* inode, struct ncp_fs_info* arg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#106: FILE: fs/ncpfs/ioctl.c:37:
+	if ((permission(inode, MAY_WRITE, NULL) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#107: FILE: fs/ncpfs/ioctl.c:38:
+	if ((permission(inode, MAY_WRITE, NULL) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: fs/ncpfs/ioctl.c:61:
+ncp_get_fs_info_v2(struct ncp_server* server, struct inode* inode, struct ncp_fs_info_v2* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: fs/ncpfs/ioctl.c:61:
+ncp_get_fs_info_v2(struct ncp_server* server, struct inode* inode, struct ncp_fs_info_v2* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: fs/ncpfs/ioctl.c:61:
+ncp_get_fs_info_v2(struct ncp_server* server, struct inode* inode, struct ncp_fs_info_v2* arg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#134: FILE: fs/ncpfs/ioctl.c:65:
+	if ((permission(inode, MAY_WRITE, NULL) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#135: FILE: fs/ncpfs/ioctl.c:66:
+	if ((permission(inode, MAY_WRITE, NULL) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#150: FILE: fs/ncpfs/ioctl.c:81:
+	info2.dummy1 = info2.dummy2 = info2.dummy3 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#162: FILE: fs/ncpfs/ioctl.c:93:
+ncp_set_charsets(struct ncp_server* server, struct ncp_nls_ioctl* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#162: FILE: fs/ncpfs/ioctl.c:93:
+ncp_set_charsets(struct ncp_server* server, struct ncp_nls_ioctl* arg)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: fs/ncpfs/ioctl.c:100:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#180: FILE: fs/ncpfs/ioctl.c:111:
+	if (!user.codepage[0] || !strcmp(user.codepage, "default"))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: fs/ncpfs/ioctl.c:113:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#184: FILE: fs/ncpfs/ioctl.c:115:
+		if (!codepage) {
+			return -EBADRQC;
+		}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#220: FILE: fs/ncpfs/ioctl.c:151:
+ncp_get_charsets(struct ncp_server* server, struct ncp_nls_ioctl* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#220: FILE: fs/ncpfs/ioctl.c:151:
+ncp_get_charsets(struct ncp_server* server, struct ncp_nls_ioctl* arg)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/ncpfs/ioctl.c:152:
+{^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: fs/ncpfs/ioctl.c:165:
+	if (NCP_IS_FLAG(server, NCP_FLAG_UTF8))
[...]
+	else if (server->nls_io && server->nls_io->charset) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <srcNS>
#465: FILE: fs/ncpfs/ncplib_kernel.c:540:
+		 __u8 volNumber, __u8 srcNS, __u32 dirEntNum,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#466: FILE: fs/ncpfs/ncplib_kernel.c:541:
+		 __u32* volume, __u32* newDirEnt, __u32* newDosEnt)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#466: FILE: fs/ncpfs/ncplib_kernel.c:541:
+		 __u32* volume, __u32* newDirEnt, __u32* newDosEnt)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#466: FILE: fs/ncpfs/ncplib_kernel.c:541:
+		 __u32* volume, __u32* newDirEnt, __u32* newDosEnt)

CHECK:CAMELCASE: Avoid CamelCase: <newDirEnt>
#466: FILE: fs/ncpfs/ncplib_kernel.c:541:
+		 __u32* volume, __u32* newDirEnt, __u32* newDosEnt)

CHECK:CAMELCASE: Avoid CamelCase: <newDosEnt>
#466: FILE: fs/ncpfs/ncplib_kernel.c:541:
+		 __u32* volume, __u32* newDirEnt, __u32* newDosEnt)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: fs/ncpfs/ncplib_kernel.c:561:
+		    __u32* volume, __u32* dirent, __u32* dosdirent)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: fs/ncpfs/ncplib_kernel.c:561:
+		    __u32* volume, __u32* dirent, __u32* dosdirent)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: fs/ncpfs/ncplib_kernel.c:561:
+		    __u32* volume, __u32* dirent, __u32* dosdirent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: fs/ncpfs/ncplib_kernel.c:589:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: fs/ncpfs/ncplib_kernel.c:591:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: fs/ncpfs/ncplib_kernel.c:598:
+int $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: fs/ncpfs/ncplib_kernel.c:606:
+	result = ncp_get_volume_root(server, volname,
+			&target->volNumber, &target->dirEntNum, &target->DosDirNum);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#536: FILE: fs/ncpfs/ncplib_kernel.c:607:
+	if (result) {
+		return result;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: fs/ncpfs/ncplib_kernel.h:73:
+int ncp_get_volume_root(struct ncp_server *server, const char *volname, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ncp_server *' should also have an identifier name
#552: FILE: fs/ncpfs/ncplib_kernel.h:75:
+int ncp_lookup_volume(struct ncp_server *, const char *, struct nw_info_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#552: FILE: fs/ncpfs/ncplib_kernel.h:75:
+int ncp_lookup_volume(struct ncp_server *, const char *, struct nw_info_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nw_info_struct *' should also have an identifier name
#552: FILE: fs/ncpfs/ncplib_kernel.h:75:
+int ncp_lookup_volume(struct ncp_server *, const char *, struct nw_info_struct *);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#563: FILE: fs/ncpfs/ncplib_kernel.h:117:
+		 __u32* volume, __u32* dirent, __u32* dosdirent);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#563: FILE: fs/ncpfs/ncplib_kernel.h:117:
+		 __u32* volume, __u32* dirent, __u32* dosdirent);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#563: FILE: fs/ncpfs/ncplib_kernel.h:117:
+		 __u32* volume, __u32* dirent, __u32* dosdirent);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 7 warnings, 16 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
