WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#293: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#298: FILE: arch/i386/kernel/tsc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#310: FILE: arch/i386/kernel/tsc.c:13:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#321: FILE: arch/i386/kernel/tsc.c:24:
+int tsc_disable __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#326: FILE: arch/i386/kernel/tsc.c:29:
+	printk(KERN_WARNING "notsc: Kernel compiled with CONFIG_X86_TSC, "

WARNING:SPLIT_STRING: quoted string split across lines
#327: FILE: arch/i386/kernel/tsc.c:30:
+	printk(KERN_WARNING "notsc: Kernel compiled with CONFIG_X86_TSC, "
+				"cannot disable TSC.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#343: FILE: arch/i386/kernel/tsc.c:46:
+__setup("notsc", tsc_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#345: FILE: arch/i386/kernel/tsc.c:48:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'percision' may be misspelled - perhaps 'precision'?
#378: FILE: arch/i386/kernel/tsc.c:81:
+ *  We can use khz divisor instead of mhz to keep a better percision, since
                                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#390: FILE: arch/i386/kernel/tsc.c:93:
+	cyc2ns_scale = (1000000 << CYC2NS_SCALE_FACTOR)/cpu_khz;
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#448: FILE: arch/i386/kernel/tsc.c:151:
+	if (delta64 > (1ULL<<32))
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#455: FILE: arch/i386/kernel/tsc.c:158:
+	delta64 += CALIBRATE_TIME_MSEC/2; /* round for do_div */
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: arch/i386/kernel/tsc.c:159:
+	do_div(delta64,CALIBRATE_TIME_MSEC);
 	              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#466: FILE: arch/i386/kernel/tsc.c:169:
+	if (cpu_has_tsc) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/i386/kernel/tsc.c:174:
+			cpufreq_scale(cpu_data[0].loops_per_jiffy,
+					cpu_khz_old, cpu_khz);

CHECK:BRACES: Unbalanced braces around else statement
#473: FILE: arch/i386/kernel/tsc.c:176:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#480: FILE: arch/i386/kernel/tsc.c:183:
+EXPORT_SYMBOL(recalibrate_cpu_khz);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: arch/i386/kernel/tsc.c:196:
+	printk("Detected %lu.%03lu MHz processor.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: arch/i386/kernel/tsc.c:197:
+	printk("Detected %lu.%03lu MHz processor.\n",
+				(unsigned long)cpu_khz / 1000,

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#502: FILE: arch/i386/kernel/tsc.c:205:
+static unsigned int cpufreq_delayed_issched = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#503: FILE: arch/i386/kernel/tsc.c:206:
+static unsigned int cpufreq_init = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#525: FILE: arch/i386/kernel/tsc.c:228:
+		printk(KERN_DEBUG "Checking if CPU frequency changed.\n");

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#534: FILE: arch/i386/kernel/tsc.c:237:
+static unsigned int ref_freq = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#535: FILE: arch/i386/kernel/tsc.c:238:
+static unsigned long loops_per_jiffy_ref = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#536: FILE: arch/i386/kernel/tsc.c:239:
+static unsigned long cpu_khz_ref = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CPUFREQ_RESUMECHANGE'
#552: FILE: arch/i386/kernel/tsc.c:255:
+	if ((val == CPUFREQ_PRECHANGE  && freq->old < freq->new) ||
+	    (val == CPUFREQ_POSTCHANGE && freq->old > freq->new) ||
+	    (val == CPUFREQ_RESUMECHANGE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#556: FILE: arch/i386/kernel/tsc.c:259:
+			cpu_data[freq->cpu].loops_per_jiffy = cpufreq_scale(loops_per_jiffy_ref, ref_freq, freq->new);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#559: FILE: arch/i386/kernel/tsc.c:262:
+		if (cpu_khz) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: arch/i386/kernel/tsc.c:265:
+				cpu_khz = cpufreq_scale(cpu_khz_ref,
+						ref_freq, freq->new);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#627: FILE: include/asm-i386/mach-default/mach_timer.h:20:
+	((CLOCK_TICK_RATE * CALIBRATE_TIME_MSEC + 1000/2)/1000)
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#627: FILE: include/asm-i386/mach-default/mach_timer.h:20:
+	((CLOCK_TICK_RATE * CALIBRATE_TIME_MSEC + 1000/2)/1000)
 	                                                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#717: FILE: include/asm-i386/tsc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#718: FILE: include/asm-i386/tsc.h:2:
+ * linux/include/asm-i386/tsc.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#726: FILE: include/asm-i386/tsc.h:10:
+#include <asm/processor.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#742: FILE: include/asm-i386/tsc.h:26:
+typedef unsigned long long cycles_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#762: FILE: include/asm-i386/tsc.h:46:
+extern void tsc_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#763: FILE: include/asm-i386/tsc.h:47:
+extern void mark_tsc_unstable(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 13 warnings, 17 checks, 654 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
