WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -Nur --exclude-from=/usr/src/.dontdiff linux-2.5.44-base/arch/i386/kernel/cpu/common.c linux-2.5.44-core_additions/arch/i386/kernel/cpu/common.c

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#127: FILE: drivers/base/cpu.c:2:
+ * drivers/base/cpu.c - basic CPU class support

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#135: FILE: drivers/base/cpu.c:10:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: drivers/base/cpu.c:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: drivers/base/cpu.c:29:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: drivers/base/memblk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#190: FILE: drivers/base/memblk.c:2:
+ * drivers/base/memblk.c - basic Memory Block class support

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#199: FILE: drivers/base/memblk.c:11:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: drivers/base/memblk.c:13:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: drivers/base/memblk.c:14:
+static int memblk_add_device(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#206: FILE: drivers/base/memblk.c:18:
+}
+struct device_class memblk_devclass = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: drivers/base/memblk.c:23:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: drivers/base/memblk.c:30:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: drivers/base/memblk.c:49:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: drivers/base/node.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#249: FILE: drivers/base/node.c:2:
+ * drivers/base/node.c - basic Node class support

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#258: FILE: drivers/base/node.c:11:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: drivers/base/node.c:13:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: drivers/base/node.c:14:
+static int node_add_device(struct device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#265: FILE: drivers/base/node.c:18:
+}
+struct device_class node_devclass = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: drivers/base/node.c:23:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: drivers/base/node.c:30:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: drivers/base/node.c:31:
+static ssize_t node_read_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: drivers/base/node.c:31:
+static ssize_t node_read_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: drivers/base/node.c:34:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: drivers/base/node.c:34:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: drivers/base/node.c:34:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: drivers/base/node.c:34:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);
                                             ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'node_read_cpumap' to 'cpumap_show'
#282: FILE: drivers/base/node.c:35:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: drivers/base/node.c:36:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: drivers/base/node.c:36:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: drivers/base/node.c:36:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#283: FILE: drivers/base/node.c:36:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: drivers/base/node.c:38:
+
+

ERROR:SPACING: space required before the open brace '{'
#302: FILE: drivers/base/node.c:55:
+	if (!sys_register_root(&node->sysroot)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#302: FILE: drivers/base/node.c:55:
+	if (!sys_register_root(&node->sysroot)){
+		device_create_file(&node->sysroot.dev, &dev_attr_cpumap);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: drivers/base/node.c:60:
+
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#333: FILE: include/linux/cpu.h:2:
+ * include/linux/cpu.h - generic cpu definition

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: include/linux/cpu.h:30:
+extern void register_cpu(struct cpu *, int, struct node *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpu *' should also have an identifier name
#356: FILE: include/linux/cpu.h:30:
+extern void register_cpu(struct cpu *, int, struct node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#356: FILE: include/linux/cpu.h:30:
+extern void register_cpu(struct cpu *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#356: FILE: include/linux/cpu.h:30:
+extern void register_cpu(struct cpu *, int, struct node *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#363: FILE: include/linux/memblk.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#364: FILE: include/linux/memblk.h:2:
+ * include/linux/memblk.h - generic memblk definition

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: include/linux/memblk.h:4:
+ * This is mainly for topological representation. We define the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: include/linux/memblk.h:5:
+ * basic 'struct memblk' here, which can be embedded in per-arch $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: include/linux/memblk.h:9:
+ * and system devices are handled in drivers/base/sys.c. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: include/linux/memblk.h:12:
+ * directory. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: include/linux/memblk.h:14:
+ * Per-memblk interfaces can be implemented using a struct device_interface. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: include/linux/memblk.h:15:
+ * See the following for how to do this: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: include/linux/memblk.h:16:
+ * - drivers/base/intf.c $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#392: FILE: include/linux/memblk.h:30:
+extern void register_memblk(struct memblk *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct memblk *' should also have an identifier name
#392: FILE: include/linux/memblk.h:30:
+extern void register_memblk(struct memblk *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#392: FILE: include/linux/memblk.h:30:
+extern void register_memblk(struct memblk *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#392: FILE: include/linux/memblk.h:30:
+extern void register_memblk(struct memblk *, int, struct node *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: include/linux/node.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#400: FILE: include/linux/node.h:2:
+ * include/linux/node.h - generic node definition

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: include/linux/node.h:4:
+ * This is mainly for topological representation. We define the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: include/linux/node.h:5:
+ * basic 'struct node' here, which can be embedded in per-arch $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: include/linux/node.h:9:
+ * and system devices are handled in drivers/base/sys.c. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: include/linux/node.h:12:
+ * directory. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: include/linux/node.h:14:
+ * Per-node interfaces can be implemented using a struct device_interface. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: include/linux/node.h:15:
+ * See the following for how to do this: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: include/linux/node.h:16:
+ * - drivers/base/intf.c $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#427: FILE: include/linux/node.h:29:
+extern void register_node(struct node *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#427: FILE: include/linux/node.h:29:
+extern void register_node(struct node *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#427: FILE: include/linux/node.h:29:
+extern void register_node(struct node *, int, struct node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#427: FILE: include/linux/node.h:29:
+extern void register_node(struct node *, int, struct node *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420200.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 27 warnings, 16 checks, 306 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420200.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
