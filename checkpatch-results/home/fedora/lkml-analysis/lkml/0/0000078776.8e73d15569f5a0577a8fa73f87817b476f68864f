WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
Make it possible to avoid ENFILE checking for kernel specific open files, such

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#103: FILE: fs/file_table.c:83:
+int proc_files_kernel(ctl_table *table, int write, struct file *filp,
                                                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#103: FILE: fs/file_table.c:83:
 }
+int proc_files_kernel(ctl_table *table, int write, struct file *filp,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#107: FILE: fs/file_table.c:87:
+	return proc_dointvec(table, write, filp, buffer, lenp, ppos);
 	                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#115: FILE: fs/file_table.c:95:
+int proc_files_kernel(ctl_table *table, int write, struct file *filp,
                                                                 ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: fs/file_table.c:95:
 }
+int proc_files_kernel(ctl_table *table, int write, struct file *filp,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#118: FILE: fs/file_table.c:98:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#201: FILE: fs/open.c:986:
+	if (f == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#235: FILE: include/linux/fs.h:37:
 };
+struct files_kernel_stat_struct {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: include/linux/fs.h:1392:
+extern struct file * dentry_open_kernel(struct dentry *, struct vfsmount *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/linux/fs.h:1392:
+extern struct file * dentry_open_kernel(struct dentry *, struct vfsmount *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#264: FILE: include/linux/fs.h:1392:
+extern struct file * dentry_open_kernel(struct dentry *, struct vfsmount *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#264: FILE: include/linux/fs.h:1392:
+extern struct file * dentry_open_kernel(struct dentry *, struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#264: FILE: include/linux/fs.h:1392:
+extern struct file * dentry_open_kernel(struct dentry *, struct vfsmount *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: include/linux/fs.h:1594:
+extern struct file * get_empty_kernel_filp(unsigned short fkflags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/fs.h:1594:
+extern struct file * get_empty_kernel_filp(unsigned short fkflags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/fs.h:1620:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#280: FILE: include/linux/fs.h:1620:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#280: FILE: include/linux/fs.h:1620:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#280: FILE: include/linux/fs.h:1620:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#292: FILE: include/linux/sysctl.h:790:
+	FS_FILE_KERNEL=21,	/* int: number of internal kernel files */
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#304: FILE: kernel/sysctl.c:56:
+extern int proc_files_kernel(ctl_table *table, int write, struct file *filp,
                                                                        ^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#304: FILE: kernel/sysctl.c:56:
+extern int proc_files_kernel(ctl_table *table, int write, struct file *filp,

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: kernel/sysctl.c:57:
+                     void __user *buffer, size_t *lenp, loff_t *ppos);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/sysctl.c:57:
+extern int proc_files_kernel(ctl_table *table, int write, struct file *filp,
+                     void __user *buffer, size_t *lenp, loff_t *ppos);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: kernel/sysctl.c:57:
+                     void __user *buffer, size_t *lenp, loff_t *ppos);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#317: FILE: kernel/sysctl.c:965:
+		.maxlen		= 1*sizeof(int),
 		       		   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078776.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 15 warnings, 9 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078776.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
