WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: drivers/dma/iovlock.c:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#51: FILE: drivers/dma/iovlock.c:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#65: FILE: drivers/dma/iovlock.c:16:
+this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#80: FILE: drivers/dma/iovlock.c:31:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#81: FILE: drivers/dma/iovlock.c:32:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#85: FILE: drivers/dma/iovlock.c:36:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#85: FILE: drivers/dma/iovlock.c:36:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'length' may be better as '(length)' to avoid precedence issues
#85: FILE: drivers/dma/iovlock.c:36:
+#define NUM_PAGES_SPANNED(start, length) \
+	((PAGE_ALIGN((unsigned long)start + length) - \
+	((unsigned long)start & PAGE_MASK)) >> PAGE_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: drivers/dma/iovlock.c:70:
+^I^I                                      iov[nr_iovecs].iov_len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: drivers/dma/iovlock.c:76:
+		+ (nr_iovecs * sizeof (struct dma_page_list))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#126: FILE: drivers/dma/iovlock.c:77:
+		+ (iovec_pages_used * sizeof (struct page*)), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: drivers/dma/iovlock.c:77:
+		+ (iovec_pages_used * sizeof (struct page*)), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#131: FILE: drivers/dma/iovlock.c:82:
+	pages = (struct page **) &local_list->page_list[nr_iovecs];

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: drivers/dma/iovlock.c:98:
+^I^I                                        iov[i].iov_len);$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#155: FILE: drivers/dma/iovlock.c:106:
+		ret = get_user_pages(

CHECK:SPACING: No space is necessary after a cast
#158: FILE: drivers/dma/iovlock.c:109:
+			(unsigned long) iov[i].iov_base,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#166: FILE: drivers/dma/iovlock.c:117:
+		if (ret != page_list->nr_pages) {
+			goto mem_error;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: drivers/dma/iovlock.c:141:
+		struct dma_page_list *page_list = &locked_list->page_list[i];
+		for (j = 0; j < page_list->nr_pages; j++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#200: FILE: drivers/dma/iovlock.c:151:
+	iovec *iov, unsigned char *kdata, size_t len)
 	      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#207: FILE: drivers/dma/iovlock.c:158:
+			int copy = min_t(unsigned int, iov->iov_len, len);
+			dma_cookie = dma_async_memcpy_buf_to_buf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#207: FILE: drivers/dma/iovlock.c:158:
+			dma_cookie = dma_async_memcpy_buf_to_buf(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/dma/iovlock.c:183:
+dma_cookie_t dma_memcpy_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, unsigned char *kdata, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: drivers/dma/iovlock.c:218:
+			dma_cookie = dma_async_memcpy_buf_to_pg(chan,
+					page_list->pages[page_idx],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: drivers/dma/iovlock.c:238:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/dma/iovlock.c:243:
+dma_cookie_t dma_memcpy_pg_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, struct page *page,

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: drivers/dma/iovlock.c:257:
+		u8 *vaddr = kmap(page);
+		err = memcpy_toiovec(iov, vaddr + offset, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/dma/iovlock.c:282:
+			dma_cookie = dma_async_memcpy_pg_to_pg(chan,
+					page_list->pages[page_idx],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: drivers/dma/iovlock.c:303:
+	BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#366: FILE: drivers/dma/iovlock.c:317:
+void dma_unlock_iovec_pages(struct dma_locked_list* locked_list)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#381: FILE: include/linux/dmaengine.h:325:
+struct dma_page_list
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#388: FILE: include/linux/dmaengine.h:332:
+struct dma_locked_list
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: include/linux/dmaengine.h:338:
+int dma_lock_iovec_pages(struct iovec *iov, size_t len,
+	struct dma_locked_list	**locked_list);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#395: FILE: include/linux/dmaengine.h:339:
+void dma_unlock_iovec_pages(struct dma_locked_list* locked_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: include/linux/dmaengine.h:341:
+dma_cookie_t dma_memcpy_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, unsigned char *kdata, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: include/linux/dmaengine.h:343:
+dma_cookie_t dma_memcpy_pg_toiovec(struct dma_chan *chan, struct iovec *iov,
+	struct dma_locked_list *locked_list, struct page *page,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#419: FILE: include/net/netdma.h:37:
+int dma_skb_copy_datagram_iovec(struct dma_chan* chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: include/net/netdma.h:38:
+int dma_skb_copy_datagram_iovec(struct dma_chan* chan,
+		const struct sk_buff *skb, int offset, struct iovec *to,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#444: FILE: net/core/user_dma.c:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#445: FILE: net/core/user_dma.c:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#459: FILE: net/core/user_dma.c:16:
+this program; if not, write to the Free Software Foundation, Inc., 59$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#467: FILE: net/core/user_dma.c:24:
+/*
+ * This code allows the net stack to make use of a DMA engine for

CHECK:LINE_SPACING: Please don't use multiple blank lines
#476: FILE: net/core/user_dma.c:33:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: net/core/user_dma.c:47:
+int dma_skb_copy_datagram_iovec(struct dma_chan *chan,
+			struct sk_buff *skb, int offset, struct iovec *to,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#501: FILE: net/core/user_dma.c:58:
+		if ((cookie = dma_memcpy_toiovec(chan, to, locked_list,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: net/core/user_dma.c:59:
+		if ((cookie = dma_memcpy_toiovec(chan, to, locked_list,
+		     skb->data + offset, copy)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#504: FILE: net/core/user_dma.c:61:
+		if ((len -= copy) == 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#516: FILE: net/core/user_dma.c:73:
+		if ((copy = end - offset) > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: net/core/user_dma.c:81:
+			cookie = dma_memcpy_pg_toiovec(chan, to, locked_list, page,
+					frag->page_offset + offset - start, copy);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#527: FILE: net/core/user_dma.c:84:
+			if (!(len -= copy))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#543: FILE: net/core/user_dma.c:100:
+			if ((copy = end - offset) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#546: FILE: net/core/user_dma.c:103:
+				if ((cookie = dma_skb_copy_datagram_iovec(chan, list,

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: net/core/user_dma.c:104:
+^I^I^I^I^I        offset - start, to, copy, locked_list)) < 0)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: net/core/user_dma.c:104:
+				if ((cookie = dma_skb_copy_datagram_iovec(chan, list,
+					        offset - start, to, copy, locked_list)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#549: FILE: net/core/user_dma.c:106:
+				if ((len -= copy) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: net/core/user_dma.c:121:
+ ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#564: FILE: net/core/user_dma.c:121:
+ ^Ireturn -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: net/core/user_dma.c:121:
+ ^Ireturn -EFAULT;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: net/core/user_dma.c:127:
+int dma_skb_copy_datagram_iovec(struct dma_chan *chan,
+			const struct sk_buff *skb, int offset, struct iovec *to,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000098348.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 18 warnings, 22 checks, 508 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000098348.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
