ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#54: FILE: drivers/pci/msi.c:508:
+	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0 ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#55: FILE: drivers/pci/msi.c:509:
+	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0 ||
+			dev->no_msi)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#64: FILE: drivers/pci/msi.c:518:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msi_state', this function's name, in a string
#64: FILE: drivers/pci/msi.c:518:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#64: FILE: drivers/pci/msi.c:518:
+	if (!cap) {
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#71: FILE: drivers/pci/msi.c:525:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#74: FILE: drivers/pci/msi.c:528:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#89: FILE: drivers/pci/msi.c:543:
+	if (!cap || (pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#94: FILE: drivers/pci/msi.c:548:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#97: FILE: drivers/pci/msi.c:551:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#113: FILE: drivers/pci/msi.c:567:
+	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) <= 0 ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/pci/msi.c:568:
+	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) <= 0 ||
+		dev->no_msi)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#122: FILE: drivers/pci/msi.c:576:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msix_state', this function's name, in a string
#122: FILE: drivers/pci/msi.c:576:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!control"
#144: FILE: drivers/pci/msi.c:598:
+	if (control == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: drivers/pci/msi.c:603:
+	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSIX)) <= 0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#156: FILE: drivers/pci/msi.c:610:
+	vector = head = dev->irq;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/pci/msi.c:624:
+		writel(address.lo_address.value,
+			base + j * PCI_MSIX_ENTRY_SIZE +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/pci/msi.c:627:
+		writel(address.hi_address,
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#175: FILE: drivers/pci/msi.c:629:
+		writel(*(u32*)&data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/pci/msi.c:630:
+		writel(*(u32*)&data,
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: drivers/pci/msi.c:649:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: drivers/pci/msi.c:649:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/pci/msi.c:649:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: drivers/pci/msi.c:657:
+	pci_write_config_dword(dev, msi_lower_address_reg(pos),
+			address.lo_address.value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: drivers/pci/msi.c:660:
+		pci_write_config_dword(dev,
+			msi_upper_address_reg(pos), address.hi_address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/pci/msi.c:662:
+		pci_write_config_word(dev,
+			msi_data_reg(pos, 1), *((u32*)&data));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#208: FILE: drivers/pci/msi.c:662:
+			msi_data_reg(pos, 1), *((u32*)&data));

CHECK:BRACES: Unbalanced braces around else statement
#209: FILE: drivers/pci/msi.c:663:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/pci/msi.c:665:
+		pci_write_config_word(dev,
+			msi_data_reg(pos, 0), *((u32*)&data));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#211: FILE: drivers/pci/msi.c:665:
+			msi_data_reg(pos, 0), *((u32*)&data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: drivers/pci/msi.c:670:
+		pci_read_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/pci/msi.c:676:
+		pci_write_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#290: FILE: drivers/pci/pci.c:441:
+	if ((i = pci_save_msi_state(dev)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#292: FILE: drivers/pci/pci.c:443:
+	if ((i = pci_save_msix_state(dev)) != 0)

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#333: FILE: include/linux/pci.h:138:
+	void		*saved_cap_space[PCI_CAP_ID_MAX + 1]; /* ext config space saved at suspend time */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000122332.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 8 warnings, 18 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000122332.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
