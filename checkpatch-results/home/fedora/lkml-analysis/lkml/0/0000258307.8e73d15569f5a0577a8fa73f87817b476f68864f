WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#88: FILE: kernel/signal.c:1458:
+	BUG_ON(tsk->state == TASK_STOPPED);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#119: FILE: kernel/signal.c:1474:
+	if (tsk->exit_code & 0x80)
[...]
+	else if (tsk->exit_code & 0x7f)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#123: FILE: kernel/signal.c:1478:
+	else {

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#202: FILE: kernel/signal.c:1896:
v+ */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: kernel/signal.c:1915:
+		BUG_ON((info->si_code & 0x7f) != SIGTRAP);

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#243: FILE: kernel/signal.c:1937:
+	memset(&info, 0, sizeof info);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#262: FILE: kernel/signal.c:1960:
+EXPORT_SYMBOL(ptrace_notify_info);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/ptrace.h:86:
+extern void ptrace_notify_info(siginfo_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'siginfo_t *' should also have an identifier name
#457: FILE: include/linux/ptrace.h:86:
+extern void ptrace_notify_info(siginfo_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 3 checks, 350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
