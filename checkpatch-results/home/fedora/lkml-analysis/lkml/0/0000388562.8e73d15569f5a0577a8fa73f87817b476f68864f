WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# aioretry.patch : Core aio infrastructure modifications

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#54: FILE: fs/aio.c:317:
+	printk("wait_on_sync_iocb\n");

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsKicked>
#55: FILE: fs/aio.c:318:
+	while ((iocb->ki_users) && !kiocbIsKicked(iocb)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: fs/aio.c:568:
+^I^Ilist_add_tail(&iocb->ki_run_list, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/aio.c:569:
+		list_add_tail(&iocb->ki_run_list, 
+			&ctx->run_list);

CHECK:CAMELCASE: Avoid CamelCase: <kiocbTryStart>
#117: FILE: fs/aio.c:587:
+		if (!kiocbTryStart(iocb)) {

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearKicked>
#118: FILE: fs/aio.c:588:
+			kiocbClearKicked(iocb);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#125: FILE: fs/aio.c:595:
+					printk("can't delete iocb in use\n");

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearStarted>
#128: FILE: fs/aio.c:598:
+			kiocbClearStarted(iocb);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: fs/aio.c:602:
+			printk("iocb already started\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#141: FILE: fs/aio.c:609:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: fs/aio.c:623:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#169: FILE: fs/aio.c:636:
+		if (waitqueue_active(&ctx->wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: fs/aio.c:653:
 
+

CHECK:CAMELCASE: Avoid CamelCase: <kiocbTryKick>
#192: FILE: fs/aio.c:654:
+	if (!kiocbTryKick(iocb) && !kiocbIsStarted(iocb)) {

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsStarted>
#192: FILE: fs/aio.c:654:
+	if (!kiocbTryKick(iocb) && !kiocbIsStarted(iocb)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#192: FILE: fs/aio.c:654:
+	if (!kiocbTryKick(iocb) && !kiocbIsStarted(iocb)) {
[...]
+	} else {
[...]

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#208: FILE: fs/aio.c:692:
+			ret = (0 == iocb->ki_users);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: fs/aio.c:914:
+^I^I^I/* accelerate kicked iocbs for this ctx */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/aio.c:1040:
+^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#248: FILE: fs/aio.c:1041:
+	if (iocb->ki_retried++ > 1024*1024) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: fs/aio.c:1042:
+		printk("Maximal retry count. Bytes done %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/aio.c:1043:
+		printk("Maximal retry count. Bytes done %d\n",
+			iocb->ki_nbytes - iocb->ki_left);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: fs/aio.c:1048:
+		printk("%ld aio retries completed %d bytes of %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: fs/aio.c:1049:
+^I^I^Iiocb->ki_retried, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/aio.c:1049:
+		printk("%ld aio retries completed %d bytes of %d\n",
+			iocb->ki_retried, 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: fs/aio.c:1053:
+	BUG_ON(current->iocb != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->iocb"
#260: FILE: fs/aio.c:1053:
+	BUG_ON(current->iocb != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/aio.c:1054:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: fs/aio.c:1063:
+^I^Iif (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: fs/aio.c:1064:
+		if (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, 
+			iocb->ki_left)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/aio.c:1076:
+^I^Iif (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/aio.c:1077:
+		if (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, 
+			iocb->ki_left)))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_process_iocb', this function's name, in a string
#306: FILE: fs/aio.c:1099:
+	pr_debug("aio_process_iocb: fop ret %d\n", ret);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: fs/aio.c:1109:
+^I^Iif (iocb->ki_left $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#316: FILE: fs/aio.c:1109:
+		if (iocb->ki_left 
+		/* may have copied out data but not completed writing */
+			|| ((iocb->ki_left == 0) &&
+			(iocb->ki_opcode = IOCB_CMD_PWRITE)) ){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#316: FILE: fs/aio.c:1109:
+		if (iocb->ki_left 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#318: FILE: fs/aio.c:1111:
+		/* may have copied out data but not completed writing */
+			|| ((iocb->ki_left == 0) &&

ERROR:SPACING: space required before the open brace '{'
#319: FILE: fs/aio.c:1112:
+			(iocb->ki_opcode = IOCB_CMD_PWRITE)) ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#319: FILE: fs/aio.c:1112:
+			(iocb->ki_opcode = IOCB_CMD_PWRITE)) ){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/aio.c:1118:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#326: FILE: fs/aio.c:1119:
+		
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: fs/aio.c:1121:
+^Iif (ret >= 0) $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#334: FILE: fs/aio.c:1127:
+	if ((-EIOCBQUEUED == ret) && list_empty(&iocb->ki_wait.task_list)) {
+		kiocbSetKicked(iocb);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetKicked>
#335: FILE: fs/aio.c:1128:
+		kiocbSetKicked(iocb);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#341: FILE: fs/aio.c:1134:
+int aio_wake_function(wait_queue_t *wait, unsigned mode, int sync)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#369: FILE: fs/aio.c:1192:
+	req->ki_left = req->ki_nbytes = iocb->aio_nbytes;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetStarted>
#375: FILE: fs/aio.c:1198:
+	kiocbSetStarted(req);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#424: FILE: fs/aio.c:1208:
+			run =__queue_kicked_iocb(req);
 			    ^

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearLocked>
#460: FILE: include/linux/aio.h:43:
+#define kiocbClearLocked(iocb)	clear_bit(KIF_LOCKED, &(iocb)->ki_flags)

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearCancelled>
#462: FILE: include/linux/aio.h:45:
+#define kiocbClearCancelled(iocb)	clear_bit(KIF_CANCELLED, &(iocb)->ki_flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: include/linux/aio.h:70:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: include/linux/aio.h:73:
+^Isize_t^I^I^Iki_nbytes; ^I/* copy of iocb->aio_nbytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: include/linux/aio.h:74:
+^Ichar ^I^I^I*ki_buf;^I/* remaining iocb->aio_buf */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#481: FILE: include/linux/aio.h:75:
+^Isize_t^I^I^Iki_left; ^I/* remaining bytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#483: FILE: include/linux/aio.h:77:
+^Ilong^I^I^Iki_retried; ^I/* just for testing */$

CHECK:BRACES: Unbalanced braces around else statement
#526: FILE: kernel/fork.c:131:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wait == &current->iocb->ki_wait'
#527: FILE: kernel/fork.c:132:
+		if (current->iocb && (wait == &current->iocb->ki_wait))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: kernel/fork.c:133:
+			printk("prepare_to_wait: iocb->ki_wait in use\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388562.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 18 warnings, 26 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388562.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
