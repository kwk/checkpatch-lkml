WARNING:TYPO_SPELLING: 'diretory' may be misspelled - perhaps 'directory'?
#29: 
on whether the diretory represents a kobject or an attribute_group.
               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#47: 
runing the tests that you previously suggested (loading and unloading
^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: fs/sysfs/dir.c:94:
+static int create_dir(void *element, struct dentry * p,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: fs/sysfs/dir.c:95:
+		      const char * n, struct dentry ** d, int type)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#86: FILE: fs/sysfs/dir.c:95:
+		      const char * n, struct dentry ** d, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/sysfs/dir.c:123:
+int sysfs_create_subdir(struct kobject * k,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#114: FILE: fs/sysfs/dir.c:125:
+			struct dentry ** d)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: fs/sysfs/dir.c:151:
+	error = create_dir(kobj,parent,kobject_name(kobj),&dentry, SYSFS_DIR);
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: fs/sysfs/dir.c:151:
+	error = create_dir(kobj,parent,kobject_name(kobj),&dentry, SYSFS_DIR);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#130: FILE: fs/sysfs/dir.c:151:
+	error = create_dir(kobj,parent,kobject_name(kobj),&dentry, SYSFS_DIR);
 	                                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#130: FILE: fs/sysfs/dir.c:151:
+	error = create_dir(kobj,parent,kobject_name(kobj),&dentry, SYSFS_DIR);
 	                                                  ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#167: FILE: fs/sysfs/inode.c:103:
 	switch (sd->s_type) {
[...]
+		case SYSFS_ATTR_GROUP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct dentry **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#192: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct dentry **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute_group *' should also have an identifier name
#192: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#192: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct dentry **);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: fs/sysfs/sysfs.h:41:
+	BUG_ON(sd->s_type != SYSFS_DIR);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: fs/sysfs/sysfs.h:66:
+			BUG_ON(sd->s_type != SYSFS_DIR);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225987.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 7 warnings, 1 checks, 146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225987.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
