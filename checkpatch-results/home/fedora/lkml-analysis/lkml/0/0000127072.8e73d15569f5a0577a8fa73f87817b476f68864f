WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: arch/s390/crypto/crypt_s390.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#154: FILE: arch/s390/crypto/crypt_s390.h:101:
+#ifndef __s390x__

Architecture specific defines should be avoided wherever
possible.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#156: FILE: arch/s390/crypto/crypt_s390.h:103:
+	".section .fixup,\"ax\" \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#157: FILE: arch/s390/crypto/crypt_s390.h:104:
+	"7:	lhi	%0,%h[e1] \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#158: FILE: arch/s390/crypto/crypt_s390.h:105:
+	"	bras	1,9f \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#159: FILE: arch/s390/crypto/crypt_s390.h:106:
+	"	.long	6b \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#160: FILE: arch/s390/crypto/crypt_s390.h:107:
+	"8:	lhi	%0,%h[e2] \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#161: FILE: arch/s390/crypto/crypt_s390.h:108:
+	"	bras	1,9f \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#162: FILE: arch/s390/crypto/crypt_s390.h:109:
+	"	.long	6b \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#163: FILE: arch/s390/crypto/crypt_s390.h:110:
+	"9:	l	1,0(1) \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#164: FILE: arch/s390/crypto/crypt_s390.h:111:
+	"	br	1 \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#165: FILE: arch/s390/crypto/crypt_s390.h:112:
+	".previous \n"			\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#166: FILE: arch/s390/crypto/crypt_s390.h:113:
+	".section __ex_table,\"a\" \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#167: FILE: arch/s390/crypto/crypt_s390.h:114:
+	"	.align	4 \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#168: FILE: arch/s390/crypto/crypt_s390.h:115:
+	"	.long	0b,7b \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#169: FILE: arch/s390/crypto/crypt_s390.h:116:
+	"	.long	1b,8b \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#173: FILE: arch/s390/crypto/crypt_s390.h:120:
+	".section .fixup,\"ax\" \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#174: FILE: arch/s390/crypto/crypt_s390.h:121:
+	"7:	lhi	%0,%h[e1] \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#175: FILE: arch/s390/crypto/crypt_s390.h:122:
+	"	jg	6b \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#176: FILE: arch/s390/crypto/crypt_s390.h:123:
+	"8:	lhi	%0,%h[e2] \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#177: FILE: arch/s390/crypto/crypt_s390.h:124:
+	"	jg	6b \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#179: FILE: arch/s390/crypto/crypt_s390.h:126:
+	".section __ex_table,\"a\" \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#180: FILE: arch/s390/crypto/crypt_s390.h:127:
+	"	.align	8 \n"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#181: FILE: arch/s390/crypto/crypt_s390.h:128:
+	"	.quad	0b,7b \n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#182: FILE: arch/s390/crypto/crypt_s390.h:129:
+	"	.quad	1b,8b \n"	\

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#192: FILE: arch/s390/crypto/crypt_s390.h:139:
+#ifndef __s390x__

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#194: FILE: arch/s390/crypto/crypt_s390.h:141:
+	"	lr	%0,%[result] \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#197: FILE: arch/s390/crypto/crypt_s390.h:144:
+	"	lgr	%0,%[result] \n"

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: arch/s390/crypto/crypt_s390.h:155:
+ * ^Ifor encryption/decryption funcs$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#211: FILE: arch/s390/crypto/crypt_s390.h:158:
+crypt_s390_km(long func, void* param, u8* dest, const u8* src, long src_len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#211: FILE: arch/s390/crypto/crypt_s390.h:158:
+crypt_s390_km(long func, void* param, u8* dest, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#211: FILE: arch/s390/crypto/crypt_s390.h:158:
+crypt_s390_km(long func, void* param, u8* dest, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#214: FILE: arch/s390/crypto/crypt_s390.h:161:
+	register void* __param asm("1") = param;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#215: FILE: arch/s390/crypto/crypt_s390.h:162:
+	register u8* __dest asm("4") = dest;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#216: FILE: arch/s390/crypto/crypt_s390.h:163:
+	register const u8* __src asm("2") = src;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#221: FILE: arch/s390/crypto/crypt_s390.h:168:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#222: FILE: arch/s390/crypto/crypt_s390.h:169:
+		"0:	.insn	rre,0xB92E0000,%1,%2 \n" /* KM opcode */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#223: FILE: arch/s390/crypto/crypt_s390.h:170:
+		"1:	brc	1,0b \n" /* handle partial completion */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#225: FILE: arch/s390/crypto/crypt_s390.h:172:
+		"6:	\n"

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#229: FILE: arch/s390/crypto/crypt_s390.h:176:
+		: [e1] "K" (-EFAULT), [e2] "K" (-ENOSYS), "d" (__func),

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required before the open brace '{'
#233: FILE: arch/s390/crypto/crypt_s390.h:180:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#233: FILE: arch/s390/crypto/crypt_s390.h:180:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){
+		ret = src_len - ret;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: arch/s390/crypto/crypt_s390.h:194:
+ * ^Ifor encryption/decryption funcs$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#250: FILE: arch/s390/crypto/crypt_s390.h:197:
+crypt_s390_kmc(long func, void* param, u8* dest, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#250: FILE: arch/s390/crypto/crypt_s390.h:197:
+crypt_s390_kmc(long func, void* param, u8* dest, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#250: FILE: arch/s390/crypto/crypt_s390.h:197:
+crypt_s390_kmc(long func, void* param, u8* dest, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#253: FILE: arch/s390/crypto/crypt_s390.h:200:
+	register void* __param asm("1") = param;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#254: FILE: arch/s390/crypto/crypt_s390.h:201:
+	register u8* __dest asm("4") = dest;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#255: FILE: arch/s390/crypto/crypt_s390.h:202:
+	register const u8* __src asm("2") = src;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#260: FILE: arch/s390/crypto/crypt_s390.h:207:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#261: FILE: arch/s390/crypto/crypt_s390.h:208:
+		"0:	.insn	rre,0xB92F0000,%1,%2 \n" /* KMC opcode */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#262: FILE: arch/s390/crypto/crypt_s390.h:209:
+		"1:	brc	1,0b \n" /* handle partial completion */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#264: FILE: arch/s390/crypto/crypt_s390.h:211:
+		"6:	\n"

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#268: FILE: arch/s390/crypto/crypt_s390.h:215:
+		: [e1] "K" (-EFAULT), [e2] "K" (-ENOSYS), "d" (__func),

ERROR:SPACING: space required before the open brace '{'
#272: FILE: arch/s390/crypto/crypt_s390.h:219:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#272: FILE: arch/s390/crypto/crypt_s390.h:219:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){
+		ret = src_len - ret;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: arch/s390/crypto/crypt_s390.h:233:
+ * ^Ifor digest funcs$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#289: FILE: arch/s390/crypto/crypt_s390.h:236:
+crypt_s390_kimd(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#289: FILE: arch/s390/crypto/crypt_s390.h:236:
+crypt_s390_kimd(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#292: FILE: arch/s390/crypto/crypt_s390.h:239:
+	register void* __param asm("1") = param;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#293: FILE: arch/s390/crypto/crypt_s390.h:240:
+	register const u8* __src asm("2") = src;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#298: FILE: arch/s390/crypto/crypt_s390.h:245:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#299: FILE: arch/s390/crypto/crypt_s390.h:246:
+		"0:	.insn	rre,0xB93E0000,%1,%1 \n" /* KIMD opcode */

WARNING:TYPO_SPELLING: 'partical' may be misspelled - perhaps 'partial'?
#300: FILE: arch/s390/crypto/crypt_s390.h:247:
+		"1:	brc	1,0b \n" /* handle partical completion */
 		   	   	                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#300: FILE: arch/s390/crypto/crypt_s390.h:247:
+		"1:	brc	1,0b \n" /* handle partical completion */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#302: FILE: arch/s390/crypto/crypt_s390.h:249:
+		"6:	\n"

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#305: FILE: arch/s390/crypto/crypt_s390.h:252:
+		: [e1] "K" (-EFAULT), [e2] "K" (-ENOSYS), "d" (__func),

ERROR:SPACING: space required before the open brace '{'
#309: FILE: arch/s390/crypto/crypt_s390.h:256:
+	if (ret >= 0 && (func & CRYPT_S390_FUNC_MASK)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#309: FILE: arch/s390/crypto/crypt_s390.h:256:
+	if (ret >= 0 && (func & CRYPT_S390_FUNC_MASK)){
+		ret = src_len - ret;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: arch/s390/crypto/crypt_s390.h:269:
+ * ^Ifor digest funcs$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#325: FILE: arch/s390/crypto/crypt_s390.h:272:
+crypt_s390_klmd(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#325: FILE: arch/s390/crypto/crypt_s390.h:272:
+crypt_s390_klmd(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#328: FILE: arch/s390/crypto/crypt_s390.h:275:
+	register void* __param asm("1") = param;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#329: FILE: arch/s390/crypto/crypt_s390.h:276:
+	register const u8* __src asm("2") = src;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#334: FILE: arch/s390/crypto/crypt_s390.h:281:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#335: FILE: arch/s390/crypto/crypt_s390.h:282:
+		"0:	.insn	rre,0xB93F0000,%1,%1 \n" /* KLMD opcode */

WARNING:TYPO_SPELLING: 'partical' may be misspelled - perhaps 'partial'?
#336: FILE: arch/s390/crypto/crypt_s390.h:283:
+		"1:	brc	1,0b \n" /* handle partical completion */
 		   	   	                   ^^^^^^^^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#336: FILE: arch/s390/crypto/crypt_s390.h:283:
+		"1:	brc	1,0b \n" /* handle partical completion */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#338: FILE: arch/s390/crypto/crypt_s390.h:285:
+		"6:	\n"

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#341: FILE: arch/s390/crypto/crypt_s390.h:288:
+		: [e1] "K" (-EFAULT), [e2] "K" (-ENOSYS), "d" (__func),

ERROR:SPACING: space required before the open brace '{'
#345: FILE: arch/s390/crypto/crypt_s390.h:292:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#345: FILE: arch/s390/crypto/crypt_s390.h:292:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){
+		ret = src_len - ret;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: arch/s390/crypto/crypt_s390.h:306:
+ * ^Ifor digest funcs$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#362: FILE: arch/s390/crypto/crypt_s390.h:309:
+crypt_s390_kmac(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#362: FILE: arch/s390/crypto/crypt_s390.h:309:
+crypt_s390_kmac(long func, void* param, const u8* src, long src_len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#365: FILE: arch/s390/crypto/crypt_s390.h:312:
+	register void* __param asm("1") = param;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#366: FILE: arch/s390/crypto/crypt_s390.h:313:
+	register const u8* __src asm("2") = src;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#371: FILE: arch/s390/crypto/crypt_s390.h:318:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#372: FILE: arch/s390/crypto/crypt_s390.h:319:
+		"0:	.insn	rre,0xB91E0000,%5,%5 \n" /* KMAC opcode */

WARNING:TYPO_SPELLING: 'partical' may be misspelled - perhaps 'partial'?
#373: FILE: arch/s390/crypto/crypt_s390.h:320:
+		"1:	brc	1,0b \n" /* handle partical completion */
 		   	   	                   ^^^^^^^^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#373: FILE: arch/s390/crypto/crypt_s390.h:320:
+		"1:	brc	1,0b \n" /* handle partical completion */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#375: FILE: arch/s390/crypto/crypt_s390.h:322:
+		"6:	\n"

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#378: FILE: arch/s390/crypto/crypt_s390.h:325:
+		: [e1] "K" (-EFAULT), [e2] "K" (-ENOSYS), "d" (__func),

ERROR:SPACING: space required before the open brace '{'
#382: FILE: arch/s390/crypto/crypt_s390.h:329:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#382: FILE: arch/s390/crypto/crypt_s390.h:329:
+	if (ret >= 0 && func & CRYPT_S390_FUNC_MASK){
+		ret = src_len - ret;
+	}

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#402: FILE: arch/s390/crypto/crypt_s390.h:349:
+	switch (func & CRYPT_S390_OP_MASK){
+		case CRYPT_S390_KM:
[...]
+		case CRYPT_S390_KMC:
[...]
+		case CRYPT_S390_KIMD:
[...]
+		case CRYPT_S390_KLMD:
[...]
+		case CRYPT_S390_KMAC:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#402: FILE: arch/s390/crypto/crypt_s390.h:349:
+	switch (func & CRYPT_S390_OP_MASK){

ERROR:SPACING: space required before the open brace '{'
#422: FILE: arch/s390/crypto/crypt_s390.h:369:
+	if (ret >= 0){

ERROR:SPACING: space required before the open brace '{'
#425: FILE: arch/s390/crypto/crypt_s390.h:372:
+		if (func < 64){

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#425: FILE: arch/s390/crypto/crypt_s390.h:372:
+		if (func < 64){
[...]
+		} else {
[...]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#441: FILE: arch/s390/crypto/crypt_s390_query.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#464: FILE: arch/s390/crypto/crypt_s390_query.c:24:
+	printk(KERN_INFO "#####################\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#467: FILE: arch/s390/crypto/crypt_s390_query.c:27:
+	printk(KERN_INFO "KM_QUERY: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: arch/s390/crypto/crypt_s390_query.c:28:
+	printk(KERN_INFO "KM_QUERY: %d\n",
+		crypt_s390_func_available(KM_QUERY));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#469: FILE: arch/s390/crypto/crypt_s390_query.c:29:
+	printk(KERN_INFO "KM_DEA: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: arch/s390/crypto/crypt_s390_query.c:30:
+	printk(KERN_INFO "KM_DEA: %d\n",
+		crypt_s390_func_available(KM_DEA_ENCRYPT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#471: FILE: arch/s390/crypto/crypt_s390_query.c:31:
+	printk(KERN_INFO "KM_TDEA_128: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: arch/s390/crypto/crypt_s390_query.c:32:
+	printk(KERN_INFO "KM_TDEA_128: %d\n",
+		crypt_s390_func_available(KM_TDEA_128_ENCRYPT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#473: FILE: arch/s390/crypto/crypt_s390_query.c:33:
+	printk(KERN_INFO "KM_TDEA_192: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: arch/s390/crypto/crypt_s390_query.c:34:
+	printk(KERN_INFO "KM_TDEA_192: %d\n",
+		crypt_s390_func_available(KM_TDEA_192_ENCRYPT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#477: FILE: arch/s390/crypto/crypt_s390_query.c:37:
+	printk(KERN_INFO "KMC_QUERY: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: arch/s390/crypto/crypt_s390_query.c:38:
+	printk(KERN_INFO "KMC_QUERY: %d\n",
+		crypt_s390_func_available(KMC_QUERY));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#479: FILE: arch/s390/crypto/crypt_s390_query.c:39:
+	printk(KERN_INFO "KMC_DEA: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: arch/s390/crypto/crypt_s390_query.c:40:
+	printk(KERN_INFO "KMC_DEA: %d\n",
+		crypt_s390_func_available(KMC_DEA_ENCRYPT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#481: FILE: arch/s390/crypto/crypt_s390_query.c:41:
+	printk(KERN_INFO "KMC_TDEA_128: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: arch/s390/crypto/crypt_s390_query.c:42:
+	printk(KERN_INFO "KMC_TDEA_128: %d\n",
+		crypt_s390_func_available(KMC_TDEA_128_ENCRYPT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#483: FILE: arch/s390/crypto/crypt_s390_query.c:43:
+	printk(KERN_INFO "KMC_TDEA_192: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: arch/s390/crypto/crypt_s390_query.c:44:
+	printk(KERN_INFO "KMC_TDEA_192: %d\n",
+		crypt_s390_func_available(KMC_TDEA_192_ENCRYPT));

WARNING:TYPO_SPELLING: 'fucntions' may be misspelled - perhaps 'functions'?
#486: FILE: arch/s390/crypto/crypt_s390_query.c:46:
+	/* query available KIMD fucntions */
 	                        ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#487: FILE: arch/s390/crypto/crypt_s390_query.c:47:
+	printk(KERN_INFO "KIMD_QUERY: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/s390/crypto/crypt_s390_query.c:48:
+	printk(KERN_INFO "KIMD_QUERY: %d\n",
+		crypt_s390_func_available(KIMD_QUERY));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#489: FILE: arch/s390/crypto/crypt_s390_query.c:49:
+	printk(KERN_INFO "KIMD_SHA_1: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: arch/s390/crypto/crypt_s390_query.c:50:
+	printk(KERN_INFO "KIMD_SHA_1: %d\n",
+		crypt_s390_func_available(KIMD_SHA_1));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#493: FILE: arch/s390/crypto/crypt_s390_query.c:53:
+	printk(KERN_INFO "KLMD_QUERY: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: arch/s390/crypto/crypt_s390_query.c:54:
+	printk(KERN_INFO "KLMD_QUERY: %d\n",
+		crypt_s390_func_available(KLMD_QUERY));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#495: FILE: arch/s390/crypto/crypt_s390_query.c:55:
+	printk(KERN_INFO "KLMD_SHA_1: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: arch/s390/crypto/crypt_s390_query.c:56:
+	printk(KERN_INFO "KLMD_SHA_1: %d\n",
+		crypt_s390_func_available(KLMD_SHA_1));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#499: FILE: arch/s390/crypto/crypt_s390_query.c:59:
+	printk(KERN_INFO "KMAC_QUERY: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: arch/s390/crypto/crypt_s390_query.c:60:
+	printk(KERN_INFO "KMAC_QUERY: %d\n",
+		crypt_s3990_func_available(KMAC_QUERY));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#501: FILE: arch/s390/crypto/crypt_s390_query.c:61:
+	printk(KERN_INFO "KMAC_DEA: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: arch/s390/crypto/crypt_s390_query.c:62:
+	printk(KERN_INFO "KMAC_DEA: %d\n",
+		crypt_s390_func_available(KMAC_DEA));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#503: FILE: arch/s390/crypto/crypt_s390_query.c:63:
+	printk(KERN_INFO "KMAC_TDEA_128: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: arch/s390/crypto/crypt_s390_query.c:64:
+	printk(KERN_INFO "KMAC_TDEA_128: %d\n",
+		crypt_s390_func_available(KMAC_TDEA_128));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#505: FILE: arch/s390/crypto/crypt_s390_query.c:65:
+	printk(KERN_INFO "KMAC_TDEA_192: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: arch/s390/crypto/crypt_s390_query.c:66:
+	printk(KERN_INFO "KMAC_TDEA_192: %d\n",
+		crypt_s390_func_available(KMAC_TDEA_192));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#516: FILE: arch/s390/crypto/crypt_s390_query.c:76:
+	printk(KERN_INFO "crypt_s390: querying available crypto functions\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#518: FILE: arch/s390/crypto/crypt_s390_query.c:78:
+	printk(KERN_INFO "KM:\t%016llx %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: arch/s390/crypto/crypt_s390_query.c:79:
+	printk(KERN_INFO "KM:\t%016llx %016llx\n",
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#519: FILE: arch/s390/crypto/crypt_s390_query.c:79:
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#520: FILE: arch/s390/crypto/crypt_s390_query.c:80:
+			(unsigned long long) status.low);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#521: FILE: arch/s390/crypto/crypt_s390_query.c:81:
+	status.high = status.low = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#523: FILE: arch/s390/crypto/crypt_s390_query.c:83:
+	printk(KERN_INFO "KMC:\t%016llx %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: arch/s390/crypto/crypt_s390_query.c:84:
+	printk(KERN_INFO "KMC:\t%016llx %016llx\n",
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#524: FILE: arch/s390/crypto/crypt_s390_query.c:84:
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#525: FILE: arch/s390/crypto/crypt_s390_query.c:85:
+			(unsigned long long) status.low);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#526: FILE: arch/s390/crypto/crypt_s390_query.c:86:
+	status.high = status.low = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#528: FILE: arch/s390/crypto/crypt_s390_query.c:88:
+	printk(KERN_INFO "KIMD:\t%016llx %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: arch/s390/crypto/crypt_s390_query.c:89:
+	printk(KERN_INFO "KIMD:\t%016llx %016llx\n",
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#529: FILE: arch/s390/crypto/crypt_s390_query.c:89:
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#530: FILE: arch/s390/crypto/crypt_s390_query.c:90:
+			(unsigned long long) status.low);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#531: FILE: arch/s390/crypto/crypt_s390_query.c:91:
+	status.high = status.low = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#533: FILE: arch/s390/crypto/crypt_s390_query.c:93:
+	printk(KERN_INFO "KLMD:\t%016llx %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: arch/s390/crypto/crypt_s390_query.c:94:
+	printk(KERN_INFO "KLMD:\t%016llx %016llx\n",
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#534: FILE: arch/s390/crypto/crypt_s390_query.c:94:
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#535: FILE: arch/s390/crypto/crypt_s390_query.c:95:
+			(unsigned long long) status.low);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#536: FILE: arch/s390/crypto/crypt_s390_query.c:96:
+	status.high = status.low = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#538: FILE: arch/s390/crypto/crypt_s390_query.c:98:
+	printk(KERN_INFO "KMAC:\t%016llx %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: arch/s390/crypto/crypt_s390_query.c:99:
+	printk(KERN_INFO "KMAC:\t%016llx %016llx\n",
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#539: FILE: arch/s390/crypto/crypt_s390_query.c:99:
+			(unsigned long long) status.high,

CHECK:SPACING: No space is necessary after a cast
#540: FILE: arch/s390/crypto/crypt_s390_query.c:100:
+			(unsigned long long) status.low);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1051: FILE: arch/s390/crypto/des_s390.c:1:
+/*

ERROR:SPACING: space required before the open brace '{'
#1108: FILE: arch/s390/crypto/des_s390.c:58:
+	if (ret == 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1108: FILE: arch/s390/crypto/des_s390.c:58:
+	if (ret == 0){
+		memcpy(dctx->key, key, keylen);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1114: FILE: arch/s390/crypto/des_s390.c:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1143: FILE: arch/s390/crypto/des_s390.c:93:
+^I.cia_setkey^I^I= ^Ides_setkey,$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1165: FILE: arch/s390/crypto/des_s390.c:115:
+	const u8* temp_key = key;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1169: FILE: arch/s390/crypto/des_s390.c:119:
+	if (!(memcmp(key, &key[DES_KEY_SIZE], DES_KEY_SIZE))) {
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1188: FILE: arch/s390/crypto/des_s390.c:138:
+	crypt_s390_km(KM_TDEA_128_ENCRYPT, dctx->key, dst, (void*)src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1189: FILE: arch/s390/crypto/des_s390.c:139:
+	crypt_s390_km(KM_TDEA_128_ENCRYPT, dctx->key, dst, (void*)src,
+			DES3_128_BLOCK_SIZE);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1198: FILE: arch/s390/crypto/des_s390.c:148:
+	crypt_s390_km(KM_TDEA_128_DECRYPT, dctx->key, dst, (void*)src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: arch/s390/crypto/des_s390.c:149:
+	crypt_s390_km(KM_TDEA_128_DECRYPT, dctx->key, dst, (void*)src,
+			DES3_128_BLOCK_SIZE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1212: FILE: arch/s390/crypto/des_s390.c:162:
+^I.cia_setkey^I^I= ^Ides3_128_setkey,$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1235: FILE: arch/s390/crypto/des_s390.c:185:
+	const u8* temp_key;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: arch/s390/crypto/des_s390.c:190:
+	if (!(memcmp(key, &key[DES_KEY_SIZE], DES_KEY_SIZE) &&
+	    memcmp(&key[DES_KEY_SIZE], &key[DES_KEY_SIZE * 2],

ERROR:CODE_INDENT: code indent should use tabs where possible
#1241: FILE: arch/s390/crypto/des_s390.c:191:
+^I    ^I^I^I^I^IDES_KEY_SIZE))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1241: FILE: arch/s390/crypto/des_s390.c:191:
+^I    ^I^I^I^I^IDES_KEY_SIZE))) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: arch/s390/crypto/des_s390.c:191:
+	    memcmp(&key[DES_KEY_SIZE], &key[DES_KEY_SIZE * 2],
+	    					DES_KEY_SIZE))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1242: FILE: arch/s390/crypto/des_s390.c:192:
+	    					DES_KEY_SIZE))) {
+

ERROR:SPACING: space required before the open brace '{'
#1248: FILE: arch/s390/crypto/des_s390.c:198:
+		if (ret < 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1248: FILE: arch/s390/crypto/des_s390.c:198:
+		if (ret < 0){
+			return ret;
+		}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1262: FILE: arch/s390/crypto/des_s390.c:212:
+	crypt_s390_km(KM_TDEA_192_ENCRYPT, dctx->key, dst, (void*)src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: arch/s390/crypto/des_s390.c:213:
+	crypt_s390_km(KM_TDEA_192_ENCRYPT, dctx->key, dst, (void*)src,
+			DES3_192_BLOCK_SIZE);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1272: FILE: arch/s390/crypto/des_s390.c:222:
+	crypt_s390_km(KM_TDEA_192_DECRYPT, dctx->key, dst, (void*)src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1273: FILE: arch/s390/crypto/des_s390.c:223:
+	crypt_s390_km(KM_TDEA_192_DECRYPT, dctx->key, dst, (void*)src,
+			DES3_192_BLOCK_SIZE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1286: FILE: arch/s390/crypto/des_s390.c:236:
+^I.cia_setkey^I^I= ^Ides3_192_setkey,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1291: FILE: arch/s390/crypto/des_s390.c:241:
+
+

ERROR:SPACING: space required before the open brace '{'
#1300: FILE: arch/s390/crypto/des_s390.c:250:
+	    !crypt_s390_func_available(KM_TDEA_192_ENCRYPT)){

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1301: FILE: arch/s390/crypto/des_s390.c:251:
+		return -ENOSYS;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1305: FILE: arch/s390/crypto/des_s390.c:255:
+	ret |= (crypto_register_alg(&des_alg) == 0)? 0:1;
 	                                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1305: FILE: arch/s390/crypto/des_s390.c:255:
+	ret |= (crypto_register_alg(&des_alg) == 0)? 0:1;
 	                                              ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1306: FILE: arch/s390/crypto/des_s390.c:256:
+	ret |= (crypto_register_alg(&des3_128_alg) == 0)? 0:2;
 	                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1306: FILE: arch/s390/crypto/des_s390.c:256:
+	ret |= (crypto_register_alg(&des3_128_alg) == 0)? 0:2;
 	                                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1307: FILE: arch/s390/crypto/des_s390.c:257:
+	ret |= (crypto_register_alg(&des3_192_alg) == 0)? 0:4;
 	                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1307: FILE: arch/s390/crypto/des_s390.c:257:
+	ret |= (crypto_register_alg(&des3_192_alg) == 0)? 0:4;
 	                                                   ^

ERROR:SPACING: space required before the open brace '{'
#1308: FILE: arch/s390/crypto/des_s390.c:258:
+	if (ret){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1315: FILE: arch/s390/crypto/des_s390.c:265:
+	printk(KERN_INFO "crypt_s390: des_s390 loaded.\n");

WARNING:TYPO_SPELLING: 'EDE' may be misspelled - perhaps 'EDGE'?
#1334: FILE: arch/s390/crypto/des_s390.c:284:
+MODULE_DESCRIPTION("DES & Triple DES EDE Cipher Algorithms");
                                      ^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1641: FILE: arch/s390/crypto/sha1_s390.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1711: FILE: arch/s390/crypto/sha1_s390.c:71:
+		memcpy(sctx->buffer + sctx->buf_len, data,
+				SHA1_BLOCK_SIZE - sctx->buf_len);

ERROR:SPACING: space required before the open brace '{'
#1721: FILE: arch/s390/crypto/sha1_s390.c:81:
+	if (imd_len){

ERROR:SPACING: space required before the open brace '{'
#1727: FILE: arch/s390/crypto/sha1_s390.c:87:
+	if (len){

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1728: FILE: arch/s390/crypto/sha1_s390.c:88:
+		memcpy(sctx->buffer + sctx->buf_len , data, len);
 		                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1733: FILE: arch/s390/crypto/sha1_s390.c:93:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1735: FILE: arch/s390/crypto/sha1_s390.c:95:
+pad_message(struct crypt_s390_sha1_ctx* sctx)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#1740: FILE: arch/s390/crypto/sha1_s390.c:100:
+	sctx->buf_len = (sctx->buf_len < 56)?
 	                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1741: FILE: arch/s390/crypto/sha1_s390.c:101:
+		SHA1_BLOCK_SIZE:2 * SHA1_BLOCK_SIZE;
 		               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1749: FILE: arch/s390/crypto/sha1_s390.c:109:
+	memcpy(sctx->buffer + sctx->buf_len - 8, &sctx->count,
+			sizeof sctx->count);

WARNING:SIZEOF_PARENTHESIS: sizeof sctx->count should be sizeof(sctx->count)
#1749: FILE: arch/s390/crypto/sha1_s390.c:109:
+			sizeof sctx->count);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1754: FILE: arch/s390/crypto/sha1_s390.c:114:
+sha1_final(void* ctx, u8 *out)

WARNING:SIZEOF_PARENTHESIS: sizeof *sctx should be sizeof(*sctx)
#1764: FILE: arch/s390/crypto/sha1_s390.c:124:
+	memset(sctx, 0, sizeof *sctx);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1776: FILE: arch/s390/crypto/sha1_s390.c:136:
+^I.dia_init   ^I= ^Isha1_init,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1777: FILE: arch/s390/crypto/sha1_s390.c:137:
+^I.dia_update ^I=^Isha1_update,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1778: FILE: arch/s390/crypto/sha1_s390.c:138:
+^I.dia_final  ^I=^Isha1_final } }$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1784: FILE: arch/s390/crypto/sha1_s390.c:144:
+	int ret = -ENOSYS;

ERROR:SPACING: space required before the open brace '{'
#1786: FILE: arch/s390/crypto/sha1_s390.c:146:
+	if (crypt_s390_func_available(KIMD_SHA_1)){

ERROR:SPACING: space required before the open brace '{'
#1788: FILE: arch/s390/crypto/sha1_s390.c:148:
+		if (ret == 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1788: FILE: arch/s390/crypto/sha1_s390.c:148:
+		if (ret == 0){
+			printk(KERN_INFO "crypt_s390: sha1_s390 loaded.\n");
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1789: FILE: arch/s390/crypto/sha1_s390.c:149:
+			printk(KERN_INFO "crypt_s390: sha1_s390 loaded.\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2007: FILE: crypto/Kconfig:43:
+config CRYPTO_SHA1_S390
+	tristate "SHA1 digest algorithm (s390)"
 	depends on CRYPTO && ARCH_S390
 	help
 	  SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2).

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2018: FILE: crypto/Kconfig:101:
+config CRYPTO_DES_S390
+	tristate "DES and Triple DES cipher algorithms (s390)"
 	depends on CRYPTO && ARCH_S390
 	help

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 106 warnings, 59 checks, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
