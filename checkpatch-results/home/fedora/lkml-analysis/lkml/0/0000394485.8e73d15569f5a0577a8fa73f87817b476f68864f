ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#77: FILE: drivers/block/ll_rw_blk.c:1282:
+	if ((ret = elevator_init(q, &iosched_cfq))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: drivers/block/cfq-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#97: FILE: drivers/block/cfq-iosched.c:2:
+ *  linux/drivers/block/cfq-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/block/cfq-iosched.c:32:
+#define CFQ_QHASH_ENTRIES	(1 << CFQ_QHASH_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/block/cfq-iosched.c:37:
+#define CFQ_MHASH_ENTRIES	(1 << CFQ_MHASH_SHIFT)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: drivers/block/cfq-iosched.c:38:
+#define CFQ_MHASH_FN(sec)	(hash_long(CFQ_MHASH_BLOCK((sec)),CFQ_MHASH_SHIFT))
                          	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#135: FILE: drivers/block/cfq-iosched.c:40:
+#define rq_hash_key(rq)		((rq)->sector + (rq)->nr_sectors)

CHECK:SPACING: No space is necessary after a cast
#140: FILE: drivers/block/cfq-iosched.c:45:
+#define RQ_DATA(rq)		((struct cfq_rq *) (rq)->elevator_private)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#151: FILE: drivers/block/cfq-iosched.c:56:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: drivers/block/cfq-iosched.c:106:
+	BUG_ON(ON_MHASH(crq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: drivers/block/cfq-iosched.c:121:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#217: FILE: drivers/block/cfq-iosched.c:122:
+		BUG_ON(!ON_MHASH(crq));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#234: FILE: drivers/block/cfq-iosched.c:139:
+#define RB_EMPTY(root)	((root)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cfq_queue"
#236: FILE: drivers/block/cfq-iosched.c:141:
+#define ON_RB(crq)	((crq)->cfq_queue != NULL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#238: FILE: drivers/block/cfq-iosched.c:143:
+#define rq_rb_key(rq)		(rq)->sector

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#326: FILE: drivers/block/cfq-iosched.c:231:
+		BUG_ON(__rq->sector + __rq->nr_sectors != bio->bi_sector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#415: FILE: drivers/block/cfq-iosched.c:320:
+	queued = ret = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: drivers/block/cfq-iosched.c:326:
+		BUG_ON(RB_EMPTY(&cfqq->sort_list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'queued < cfq_quantum'
#434: FILE: drivers/block/cfq-iosched.c:339:
+	if ((queued < cfq_quantum) && good_queues)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->crq_hash)...) over kmalloc(sizeof(struct list_head)...)
#633: FILE: drivers/block/cfq-iosched.c:538:
+	cfqd->crq_hash = kmalloc(sizeof(struct list_head) * CFQ_MHASH_ENTRIES, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->cfq_hash)...) over kmalloc(sizeof(struct list_head)...)
#637: FILE: drivers/block/cfq-iosched.c:542:
+	cfqd->cfq_hash = kmalloc(sizeof(struct list_head) * CFQ_QHASH_ENTRIES, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: drivers/block/cfq-iosched.c:584:
+	crq_pool = kmem_cache_create("crq_pool", sizeof(struct cfq_rq), 0, 0,
+					NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/block/cfq-iosched.c:590:
+	cfq_pool = kmem_cache_create("cfq_pool", sizeof(struct cfq_queue), 0, 0,
+					NULL, NULL);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#701: FILE: drivers/block/cfq-iosched.c:606:
+^I.elevator_merge_fn = ^I^Icfq_merge,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#714: FILE: drivers/block/cfq-iosched.c:619:
+EXPORT_SYMBOL(iosched_cfq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 12 checks, 644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
