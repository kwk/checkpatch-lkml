WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# size vmlinux.org vmlinux

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
8d 83 40 02 00 00 lea    0x240(%ebx),%eax         8d b3 40 02 00 00 lea    0x240(%ebx),%esi

CHECK:SPACING: No space is necessary after a cast
#110: FILE: include/asm-i386/string.h:207:
+	: "0" (n/4), "g" (n), "1" ((long) to), "2" ((long) from)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#110: FILE: include/asm-i386/string.h:207:
+	: "0" (n/4), "g" (n), "1" ((long) to), "2" ((long) from)
 	        ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#134: FILE: include/asm-i386/string.h:218:
+#if 1	/* want to do small copies with non-string ops? */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#135: FILE: include/asm-i386/string.h:219:
+	switch (n) {
+		case 0: return to;
+		case 1: *(char*)to = *(char*)from; return to;
+		case 2: *(short*)to = *(short*)from; return to;
+		case 4: *(int*)to = *(int*)from; return to;
[...]
+		case 3: *(short*)to = *(short*)from;
[...]
+		case 5: *(int*)to = *(int*)from;
[...]
+		case 6: *(int*)to = *(int*)from;
[...]
+		case 8: *(int*)to = *(int*)from;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#137: FILE: include/asm-i386/string.h:221:
+		case 1: *(char*)to = *(char*)from; return to;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#137: FILE: include/asm-i386/string.h:221:
+		case 1: *(char*)to = *(char*)from; return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#137: FILE: include/asm-i386/string.h:221:
+		case 1: *(char*)to = *(char*)from; return to;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#138: FILE: include/asm-i386/string.h:222:
+		case 2: *(short*)to = *(short*)from; return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#138: FILE: include/asm-i386/string.h:222:
+		case 2: *(short*)to = *(short*)from; return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#138: FILE: include/asm-i386/string.h:222:
+		case 2: *(short*)to = *(short*)from; return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: include/asm-i386/string.h:223:
+		case 4: *(int*)to = *(int*)from; return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: include/asm-i386/string.h:223:
+		case 4: *(int*)to = *(int*)from; return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#139: FILE: include/asm-i386/string.h:223:
+		case 4: *(int*)to = *(int*)from; return to;

WARNING:IF_1: Consider removing the #if 1 and its #endif
#140: FILE: include/asm-i386/string.h:224:
+#if 1	/* including those doable with two moves? */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#141: FILE: include/asm-i386/string.h:225:
+		case 3: *(short*)to = *(short*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#141: FILE: include/asm-i386/string.h:225:
+		case 3: *(short*)to = *(short*)from;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#141: FILE: include/asm-i386/string.h:225:
+		case 3: *(short*)to = *(short*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: include/asm-i386/string.h:226:
+			*((char*)to+2) = *((char*)from+2); return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: include/asm-i386/string.h:226:
+			*((char*)to+2) = *((char*)from+2); return to;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: include/asm-i386/string.h:226:
+			*((char*)to+2) = *((char*)from+2); return to;
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: include/asm-i386/string.h:226:
+			*((char*)to+2) = *((char*)from+2); return to;
 			                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: include/asm-i386/string.h:227:
+		case 5: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: include/asm-i386/string.h:227:
+		case 5: *(int*)to = *(int*)from;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#143: FILE: include/asm-i386/string.h:227:
+		case 5: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#144: FILE: include/asm-i386/string.h:228:
+			*((char*)to+4) = *((char*)from+4); return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#144: FILE: include/asm-i386/string.h:228:
+			*((char*)to+4) = *((char*)from+4); return to;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: include/asm-i386/string.h:228:
+			*((char*)to+4) = *((char*)from+4); return to;
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: include/asm-i386/string.h:228:
+			*((char*)to+4) = *((char*)from+4); return to;
 			                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#145: FILE: include/asm-i386/string.h:229:
+		case 6: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#145: FILE: include/asm-i386/string.h:229:
+		case 6: *(int*)to = *(int*)from;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#145: FILE: include/asm-i386/string.h:229:
+		case 6: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#146: FILE: include/asm-i386/string.h:230:
+			*((short*)to+2) = *((short*)from+2); return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#146: FILE: include/asm-i386/string.h:230:
+			*((short*)to+2) = *((short*)from+2); return to;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: include/asm-i386/string.h:230:
+			*((short*)to+2) = *((short*)from+2); return to;
 			            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: include/asm-i386/string.h:230:
+			*((short*)to+2) = *((short*)from+2); return to;
 			                                ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#147: FILE: include/asm-i386/string.h:231:
+		case 8: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#147: FILE: include/asm-i386/string.h:231:
+		case 8: *(int*)to = *(int*)from;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#147: FILE: include/asm-i386/string.h:231:
+		case 8: *(int*)to = *(int*)from;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#148: FILE: include/asm-i386/string.h:232:
+			*((int*)to+1) = *((int*)from+1); return to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#148: FILE: include/asm-i386/string.h:232:
+			*((int*)to+1) = *((int*)from+1); return to;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: include/asm-i386/string.h:232:
+			*((int*)to+1) = *((int*)from+1); return to;
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: include/asm-i386/string.h:232:
+			*((int*)to+1) = *((int*)from+1); return to;
 			                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: include/asm-i386/string.h:236:
+	if (!n) return to;

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: include/asm-i386/string.h:241:
+		int esi, edi;
+		__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#157: FILE: include/asm-i386/string.h:241:
+		__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#160: FILE: include/asm-i386/string.h:244:
+			: "0" ((long) to),"1" ((long) from)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: include/asm-i386/string.h:244:
+			: "0" ((long) to),"1" ((long) from)
 			                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#164: FILE: include/asm-i386/string.h:248:
+	if (n >= 5*4) {
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: include/asm-i386/string.h:251:
+		int ecx;
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#167: FILE: include/asm-i386/string.h:251:
+		__asm__ __volatile__(

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#170: FILE: include/asm-i386/string.h:254:
+			: "0" (n/4)
 			        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#174: FILE: include/asm-i386/string.h:258:
+		if (n >= 4*4) __asm__ __volatile__("movsl");
 		          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#174: FILE: include/asm-i386/string.h:258:
+		if (n >= 4*4) __asm__ __volatile__("movsl");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#175: FILE: include/asm-i386/string.h:259:
+		if (n >= 3*4) __asm__ __volatile__("movsl");
 		          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#175: FILE: include/asm-i386/string.h:259:
+		if (n >= 3*4) __asm__ __volatile__("movsl");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#176: FILE: include/asm-i386/string.h:260:
+		if (n >= 2*4) __asm__ __volatile__("movsl");
 		          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#176: FILE: include/asm-i386/string.h:260:
+		if (n >= 2*4) __asm__ __volatile__("movsl");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#177: FILE: include/asm-i386/string.h:261:
+		if (n >= 1*4) __asm__ __volatile__("movsl");
 		          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#177: FILE: include/asm-i386/string.h:261:
+		if (n >= 1*4) __asm__ __volatile__("movsl");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#179: FILE: include/asm-i386/string.h:263:
 	switch (n % 4) {
[...]
+		case 0: return to;
+		case 1: __asm__ __volatile__("movsb"); return to;
+		case 2: __asm__ __volatile__("movsw"); return to;
+		default: __asm__ __volatile__("movsw\n\tmovsb"); return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#186: FILE: include/asm-i386/string.h:266:
+		case 1: __asm__ __volatile__("movsb"); return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#187: FILE: include/asm-i386/string.h:267:
+		case 2: __asm__ __volatile__("movsw"); return to;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#188: FILE: include/asm-i386/string.h:268:
+		default: __asm__ __volatile__("movsw\n\tmovsb"); return to;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194857.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 6 warnings, 19 checks, 103 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194857.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
