WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: include/linux/rtmutex.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#97: FILE: include/linux/rtmutex.h:27:
+	spinlock_t		wait_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: include/linux/rtmutex.h:34:
+^Iconst char ^I^I*name, *file;$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#116: FILE: include/linux/rtmutex.h:46:
+# define rt_mutex_init(mutex)			__rt_mutex_init(mutex, __FUNCTION__)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: include/linux/rtmutex.h:47:
+ extern void rt_mutex_debug_task_free(struct task_struct *tsk);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/rtmutex.h:47:
+ extern void rt_mutex_debug_task_free(struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mutexname' - possible side-effects?
#124: FILE: include/linux/rtmutex.h:54:
+#define __RT_MUTEX_INITIALIZER(mutexname) \
+	{ .wait_lock = SPIN_LOCK_UNLOCKED \
+	, .wait_list = PLIST_HEAD_INIT(mutexname.wait_list) \
+	, .owner = NULL \
+	__DEBUG_RT_MUTEX_INITIALIZER(mutexname)}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mutexname' - possible side-effects?
#130: FILE: include/linux/rtmutex.h:60:
+#define DEFINE_RT_MUTEX(mutexname) \
+	struct rt_mutex mutexname = __RT_MUTEX_INITIALIZER(mutexname)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lock->owner"
#141: FILE: include/linux/rtmutex.h:71:
+	return lock->owner != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/rtmutex.h:74:
+extern void fastcall __rt_mutex_init(struct rt_mutex *lock, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/rtmutex.h:75:
+extern void fastcall rt_mutex_destroy(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/rtmutex.h:77:
+extern void fastcall rt_mutex_lock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/rtmutex.h:78:
+extern int fastcall rt_mutex_lock_interruptible(struct rt_mutex *lock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/rtmutex.h:80:
+extern int fastcall rt_mutex_timed_lock(struct rt_mutex *lock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/rtmutex.h:84:
+extern int fastcall rt_mutex_trylock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/rtmutex.h:86:
+extern void fastcall rt_mutex_unlock(struct rt_mutex *lock);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#159: FILE: include/linux/rtmutex.h:89:
+# define rt_mutex_init_task(p)						\
+ do {									\
+	spin_lock_init(&p->pi_lock);					\
+	plist_head_init(&p->pi_waiters);				\
+	p->pi_blocked_on = NULL;					\
+	p->pi_locked_by = NULL;						\
+	INIT_LIST_HEAD(&p->pi_lock_chain);				\
+ } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#159: FILE: include/linux/rtmutex.h:89:
+# define rt_mutex_init_task(p)						\
+ do {									\
+	spin_lock_init(&p->pi_lock);					\
+	plist_head_init(&p->pi_waiters);				\
+	p->pi_blocked_on = NULL;					\
+	p->pi_locked_by = NULL;						\
+	INIT_LIST_HEAD(&p->pi_lock_chain);				\
+ } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/linux/rtmutex.h:90:
+ do {^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: include/linux/rtmutex.h:96:
+ } while (0)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#167: FILE: include/linux/rtmutex.h:97:
+# define INIT_RT_MUTEXES(tsk)						\
+	.pi_waiters	= PLIST_HEAD_INIT(tsk.pi_waiters),		\
+	.pi_lock	= SPIN_LOCK_UNLOCKED,				\
+	.pi_lock_chain	= LIST_HEAD_INIT(tsk.pi_lock_chain),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: include/linux/rtmutex_internal.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#221: FILE: include/linux/rtmutex_internal.h:40:
+#define rt_mutex_has_waiters(lock)	(!plist_head_empty(&lock->wait_list))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/linux/rtmutex_internal.h:42:
+#define rt_mutex_top_waiter(lock) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#223: FILE: include/linux/rtmutex_internal.h:42:
+#define rt_mutex_top_waiter(lock) 	\
+({ struct rt_mutex_waiter *__w = plist_first_entry(&lock->wait_list, \
+					struct rt_mutex_waiter, list_entry); \
+	BUG_ON(__w->lock != lock);	\
+	__w;				\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#223: FILE: include/linux/rtmutex_internal.h:42:
+#define rt_mutex_top_waiter(lock) 	\
+({ struct rt_mutex_waiter *__w = plist_first_entry(&lock->wait_list, \
+					struct rt_mutex_waiter, list_entry); \
+	BUG_ON(__w->lock != lock);	\
+	__w;				\
+})

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: include/linux/rtmutex_internal.h:45:
+	BUG_ON(__w->lock != lock);	\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#230: FILE: include/linux/rtmutex_internal.h:49:
+#define task_has_pi_waiters(task)	(!plist_head_empty(&task->pi_waiters))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: include/linux/rtmutex_internal.h:51:
+#define task_top_pi_waiter(task) ^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#232: FILE: include/linux/rtmutex_internal.h:51:
+#define task_top_pi_waiter(task) 	\
+	plist_first_entry(&task->pi_waiters, struct rt_mutex_waiter, pi_list_entry)

ERROR:SPACING: space required after that ',' (ctx:OxV)
#267: FILE: include/linux/rtmutex_internal.h:86:
+	typecheck(struct rt_mutex *,(lock));				\
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: include/linux/rtmutex_internal.h:87:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_OWNER_MASKALL)); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: include/linux/rtmutex_internal.h:87:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_OWNER_MASKALL)); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: include/linux/rtmutex_internal.h:87:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_OWNER_MASKALL)); \$

ERROR:SPACING: space required after that ',' (ctx:OxV)
#273: FILE: include/linux/rtmutex_internal.h:92:
+	typecheck(struct rt_mutex *,(lock));				\
 	                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: include/linux/rtmutex_internal.h:93:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_HAS_WAITERS)); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: include/linux/rtmutex_internal.h:93:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_HAS_WAITERS)); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/linux/rtmutex_internal.h:93:
+ ^I((struct task_struct *)((unsigned long)((lock)->owner) & ~RT_MUTEX_HAS_WAITERS)); \$

ERROR:SPACING: space required after that ',' (ctx:OxV)
#279: FILE: include/linux/rtmutex_internal.h:98:
+	typecheck(struct rt_mutex *,(lock));				\
 	                           ^

CHECK:SPACING: No space is necessary after a cast
#286: FILE: include/linux/rtmutex_internal.h:105:
+	unsigned long val = ((unsigned long) owner) | msk;

CHECK:SPACING: No space is necessary after a cast
#298: FILE: include/linux/rtmutex_internal.h:117:
+	owner = ((unsigned long) lock->owner) & ~RT_MUTEX_HAS_WAITERS;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: include/linux/rtmutex_internal.h:133:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: include/linux/rtmutex_internal.h:133:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#314: FILE: include/linux/rtmutex_internal.h:133:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#314: FILE: include/linux/rtmutex_internal.h:133:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:SPACING: No space is necessary after a cast
#318: FILE: include/linux/rtmutex_internal.h:137:
+	unsigned long owner, *p = (unsigned long *) &lock->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: include/linux/rtmutex_internal.h:146:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: include/linux/rtmutex_internal.h:146:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                              ^

CHECK:SPACING: No space is necessary after a cast
#331: FILE: include/linux/rtmutex_internal.h:150:
+	unsigned long owner = ((unsigned long) lock->owner)| RT_MUTEX_HAS_WAITERS;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#331: FILE: include/linux/rtmutex_internal.h:150:
+	unsigned long owner = ((unsigned long) lock->owner)| RT_MUTEX_HAS_WAITERS;
 	                                                   ^

CHECK:SPACING: No space is necessary after a cast
#333: FILE: include/linux/rtmutex_internal.h:152:
+	lock->owner = (struct task_struct *) owner;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#425: FILE: kernel/rtmutex.c:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: kernel/rtmutex.c:124:
+		BUG_ON(owner->pi_locked_by);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#550: FILE: kernel/rtmutex.c:126:
+		BUG_ON(!list_empty(&owner->pi_lock_chain));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#625: FILE: kernel/rtmutex.c:201:
+		BUG_ON(!owner->pi_locked_by);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: kernel/rtmutex.c:249:
+		if (top_waiter != waiter &&
+				waiter != rt_mutex_top_waiter(lock))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1032: FILE: kernel/rtmutex.c:608:
+static int fastcall noinline __sched

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1052: FILE: kernel/rtmutex.c:628:
+	BUG_ON(rt_mutex_owner(lock) == current);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1146: FILE: kernel/rtmutex.c:722:
+	if (likely(rt_mutex_owner(lock) != current)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1165: FILE: kernel/rtmutex.c:741:
+static void fastcall noinline __sched

CHECK:BRACES: braces {} should be used on all arms of this statement
#1203: FILE: kernel/rtmutex.c:779:
+	if (!detect_deadlock && likely(rt_mutex_cmpxchg(lock, NULL, current))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1206: FILE: kernel/rtmutex.c:782:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1217: FILE: kernel/rtmutex.c:793:
+	if (!detect_deadlock && likely(rt_mutex_cmpxchg(lock, NULL, current))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1220: FILE: kernel/rtmutex.c:796:
+	} else

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1261: FILE: kernel/rtmutex.c:837:
+ * @lock: ^I^Ithe rt_mutex to be locked$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1265: FILE: kernel/rtmutex.c:841:
+ *  0 ^I^Ion success$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1266: FILE: kernel/rtmutex.c:842:
+ * -EINTR ^Iwhen interrupted by a signal$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1284: FILE: kernel/rtmutex.c:860:
+ * @lock: ^I^Ithe rt_mutex to be locked$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1289: FILE: kernel/rtmutex.c:865:
+ *  0 ^I^Ion success$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1290: FILE: kernel/rtmutex.c:866:
+ * -EINTR ^Iwhen interrupted by a signal$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1305: FILE: kernel/rtmutex.c:881:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1346: FILE: kernel/rtmutex.c:922:
+EXPORT_SYMBOL_GPL(rt_mutex_destroy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1371: FILE: kernel/rtmutex.h:1:
+/*

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1395: FILE: kernel/rtmutex.h:25:
+#define debug_rt_mutex_deadlock(d, a ,l)		do { } while (0)
                                      ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1395: FILE: kernel/rtmutex.h:25:
+#define debug_rt_mutex_deadlock(d, a ,l)		do { } while (0)
                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090530.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 27 warnings, 35 checks, 1298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090530.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
