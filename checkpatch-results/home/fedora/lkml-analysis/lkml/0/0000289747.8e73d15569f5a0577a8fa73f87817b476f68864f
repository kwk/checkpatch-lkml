WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
--- working-2.6.orig/arch/ppc64/mm/hugetlbpage.c	2004-04-08 12:01:17.000000000 +1000

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: arch/ppc64/mm/hugetlbpage.c:243:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/ppc64/mm/hugetlbpage.c:243:
+  $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#67: FILE: arch/ppc64/mm/hugetlbpage.c:247:
+	unsigned long end = (seg+1) << SID_SHIFT;
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#77: FILE: arch/ppc64/mm/hugetlbpage.c:252:
+	BUG_ON(seg >= 16);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start < end'
#84: FILE: arch/ppc64/mm/hugetlbpage.c:256:
+	if (vma && (vma->vm_start < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#114: FILE: arch/ppc64/mm/hugetlbpage.c:301:
+	if (! newsegs)
 	    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#136: FILE: arch/ppc64/mm/hugetlbpage.c:322:
+	else if ((addr < 0x100000000) && ((addr+len) < 0x100000000)) {
 	                                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: arch/ppc64/mm/hugetlbpage.c:325:
+		 * 64-bit arithmetic */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#143: FILE: arch/ppc64/mm/hugetlbpage.c:329:
+			printk(KERN_DEBUG "prepare_hugepage_range(%lx, %lx)"

WARNING:SPLIT_STRING: quoted string split across lines
#144: FILE: arch/ppc64/mm/hugetlbpage.c:330:
+			printk(KERN_DEBUG "prepare_hugepage_range(%lx, %lx)"
+			       " failed (segs: 0x%04hx)\n", addr, len,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: arch/ppc64/mm/hugetlbpage.c:580:
+ * non-huge mmap()s evade the hugepage reserved regions. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#168: FILE: arch/ppc64/mm/hugetlbpage.c:596:
+		if (((TASK_SIZE - len) >= addr)
+		    && (!vma || (addr+len) <= vma->vm_start)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: arch/ppc64/mm/hugetlbpage.c:596:
+		    && (!vma || (addr+len) <= vma->vm_start)
 		                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#169: FILE: arch/ppc64/mm/hugetlbpage.c:597:
+		    && (!vma || (addr+len) <= vma->vm_start)
+		    && !is_hugepage_only_range(addr,len))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: arch/ppc64/mm/hugetlbpage.c:597:
+		    && !is_hugepage_only_range(addr,len))
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: arch/ppc64/mm/hugetlbpage.c:605:
+		BUG_ON(vma && (addr >= vma->vm_end));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#192: FILE: arch/ppc64/mm/hugetlbpage.c:608:
+			addr = ALIGN(addr+1, 1<<SID_SHIFT);
 			                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#192: FILE: arch/ppc64/mm/hugetlbpage.c:608:
+			addr = ALIGN(addr+1, 1<<SID_SHIFT);
 			                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#222: FILE: arch/ppc64/mm/hugetlbpage.c:630:
+		start_addr = addr = TASK_UNMAPPED_BASE;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: arch/ppc64/mm/hugetlbpage.c:643:
+		BUG_ON(vma && (addr >= vma->vm_end)); /* invariant */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#237: FILE: arch/ppc64/mm/hugetlbpage.c:645:
+		if (! __within_hugepage_low_range(addr, len, segmask)) {
 		    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: arch/ppc64/mm/hugetlbpage.c:646:
+			addr = ALIGN(addr+1, 1<<SID_SHIFT);
 			                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#238: FILE: arch/ppc64/mm/hugetlbpage.c:646:
+			addr = ALIGN(addr+1, 1<<SID_SHIFT);
 			                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: arch/ppc64/mm/hugetlbpage.c:656:
+		 * some VMAs */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/ppc64/mm/hugetlbpage.c:667:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: arch/ppc64/mm/hugetlbpage.c:669:
+^Ifor (vma = find_vma(current->mm, addr); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: arch/ppc64/mm/hugetlbpage.c:672:
+		BUG_ON(vma && (addr >= vma->vm_end)); /* invariant */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#265: FILE: arch/ppc64/mm/hugetlbpage.c:673:
+		BUG_ON(! within_hugepage_high_range(addr, len));

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#265: FILE: arch/ppc64/mm/hugetlbpage.c:673:
+		BUG_ON(! within_hugepage_high_range(addr, len));
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: arch/ppc64/mm/hugetlbpage.c:674:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#271: FILE: arch/ppc64/mm/hugetlbpage.c:679:
+		 * should not skip us over any VMAs */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#316: FILE: arch/ppc64/mm/hugetlbpage.c:700:
+		 * low hpage segments */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#325: FILE: arch/ppc64/mm/hugetlbpage.c:705:
+		for (segmask = LOW_ESID_MASK(0x100000000UL-len, len);
 		                                          ^

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#326: FILE: arch/ppc64/mm/hugetlbpage.c:706:
+		     ! lastshift; segmask >>=1) {
 		     ^

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#326: FILE: arch/ppc64/mm/hugetlbpage.c:706:
+		     ! lastshift; segmask >>=1) {
 		                          ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#332: FILE: arch/ppc64/mm/hugetlbpage.c:712:
+			if ((addr != -ENOMEM)
+			    && open_low_hpage_segs(current->mm, segmask) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#335: FILE: arch/ppc64/mm/hugetlbpage.c:715:
+		printk(KERN_DEBUG "hugetlb_get_unmapped_area() unable to open"

WARNING:SPLIT_STRING: quoted string split across lines
#336: FILE: arch/ppc64/mm/hugetlbpage.c:716:
+		printk(KERN_DEBUG "hugetlb_get_unmapped_area() unable to open"
+		       " enough segments\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
                                 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
                                 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
                                 	                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
+	   	                	- (1U << GET_ESID(addr))) & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
+	   	                	- (1U << GET_ESID(addr))) & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#384: FILE: include/asm-ppc64/page.h:40:
+#define LOW_ESID_MASK(addr, len)	(((1U << (GET_ESID(addr+len-1)+1)) \
+	   	                	- (1U << GET_ESID(addr))) & 0xffff)

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: include/asm-ppc64/page.h:41:
+^I   ^I                ^I- (1U << GET_ESID(addr))) & 0xffff)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: include/asm-ppc64/page.h:41:
+^I   ^I                ^I- (1U << GET_ESID(addr))) & 0xffff)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'segmask' - possible side-effects?
#398: FILE: include/asm-ppc64/page.h:51:
+#define __within_hugepage_low_range(addr, len, segmask) \
+	((LOW_ESID_MASK((addr), (len)) | (segmask)) == (segmask))

ERROR:SPACING: space prohibited after that open parenthesis '('
#419: FILE: include/asm-ppc64/page.h:67:
+	 ( (((addr) >= TASK_HPAGE_BASE) && ((addr) < TASK_HPAGE_END)) || \

ERROR:SPACING: space prohibited after that open parenthesis '('
#420: FILE: include/asm-ppc64/page.h:68:
+	   ( ((addr) < 0x100000000L) && \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#421: FILE: include/asm-ppc64/page.h:69:
+	     ((1 << GET_ESID(addr)) & (context).htlb_segs) ) ) )

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 20 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
