WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: Documentation/powerop.txt:30:
+NOTE: PowerOP cpufreq integration does _not_ change cpufreq user interface - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: Documentation/powerop.txt:32:
+set. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: Documentation/powerop.txt:61:
+as userspace policy managers. $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: include/linux/powerop.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: include/linux/powerop.h:44:
+int powerop_register_point(const char *id, $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: include/linux/powerop_sysfs.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: include/linux/powerop_sysfs.h:2:
+ * PowerOP SysFS interface to register power parameter names available on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: include/linux/powerop_sysfs.h:30:
+powerop_sysfs_unregister_pwr_params(struct attribute **param_attrs) $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#224: FILE: kernel/power/Kconfig:140:
+config POWEROP
+	tristate "PowerOP Core"
+	help
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#228: FILE: kernel/power/Kconfig:144:
+config POWEROP_SYSFS
+	bool "Enable PowerOP sysfs interface"
+	depends on PM && POWEROP && SYSFS
+	help
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#233: FILE: kernel/power/Kconfig:149:
+config POWEROP_SYSFS_OP_CREATE
+	bool "Enable creation of operating point via sysfs interface"
+	depends on POWEROP_SYSFS
+	help
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#238: FILE: kernel/power/Kconfig:154:
+config POWEROP_SYSFS_OP_DEBUG_IF
+	bool "Enable special hw operating point"
+	depends on POWEROP_SYSFS
+	help 
+	"hw point(ro) is used to get snapshots of power parameter values"
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: kernel/power/Kconfig:157:
+^Ihelp $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: kernel/power/powerop.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: kernel/power/powerop.c:5:
+ * 2006 (C) Nomad Global Solutions, Inc. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: kernel/power/powerop.c:23:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: kernel/power/powerop.c:24:
+ * FIXME: temporary limit. next implementation will handle unlimited number $

WARNING:TYPO_SPELLING: 'paramenters' may be misspelled - perhaps 'parameters'?
#363: FILE: kernel/power/powerop.c:74:
+ * access_point - get/set value of specified power paramenters
                                                    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: kernel/power/powerop.c:80:
+ * @op: type of operation: get/set $

WARNING:TYPO_SPELLING: 'paramenters' may be misspelled - perhaps 'parameters'?
#371: FILE: kernel/power/powerop.c:82:
+ * Get value of specified power paramenters of operating
                                 ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: kernel/power/powerop.c:92:
+^I^Ipowerop_driver->access_point(md_opt, pwr_params, size, op) : $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "powerop_driver"
#392: FILE: kernel/power/powerop.c:103:
+	if (powerop_driver != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#395: FILE: kernel/power/powerop.c:106:
+	if (p == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#401: FILE: kernel/power/powerop.c:112:
+	printk(KERN_INFO "PowerOP registering driver %s.\n", p->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#411: FILE: kernel/power/powerop.c:122:
+		printk(KERN_INFO "PowerOP unregistering driver %s\n", p->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: kernel/power/powerop.c:139:
+ * arch dependent part of new operating point and links new named operating $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: kernel/power/powerop.c:143:
+int powerop_register_point(const char *id, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!powerop_initialized'
#439: FILE: kernel/power/powerop.c:150:
+	if ((!powerop_initialized) || (id == NULL) ||
+	    (strlen(id) > POWEROP_MAX_OPT_NAME_LENGTH) ||
+	    (registered_opt_number >= POWEROP_MAX_OPT_NUMBER))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == NULL'
#439: FILE: kernel/power/powerop.c:150:
+	if ((!powerop_initialized) || (id == NULL) ||
+	    (strlen(id) > POWEROP_MAX_OPT_NAME_LENGTH) ||
+	    (registered_opt_number >= POWEROP_MAX_OPT_NUMBER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'registered_opt_number >= POWEROP_MAX_OPT_NUMBER'
#439: FILE: kernel/power/powerop.c:150:
+	if ((!powerop_initialized) || (id == NULL) ||
+	    (strlen(id) > POWEROP_MAX_OPT_NAME_LENGTH) ||
+	    (registered_opt_number >= POWEROP_MAX_OPT_NUMBER))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#439: FILE: kernel/power/powerop.c:150:
+	if ((!powerop_initialized) || (id == NULL) ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#457: FILE: kernel/power/powerop.c:168:
+	if ((opt = kzalloc(sizeof(struct powerop_point), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*opt)...) over kzalloc(sizeof(struct powerop_point)...)
#457: FILE: kernel/power/powerop.c:168:
+	if ((opt = kzalloc(sizeof(struct powerop_point), GFP_KERNEL)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#460: FILE: kernel/power/powerop.c:171:
+	if ((registered_names[registered_opt_number] =

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt->md_opt"
#469: FILE: kernel/power/powerop.c:180:
+	if (opt->md_opt == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#494: FILE: kernel/power/powerop.c:205:
+      fail_set_name:

WARNING:INDENTED_LABEL: labels should not be indented
#497: FILE: kernel/power/powerop.c:208:
+      fail_opt_create:

WARNING:INDENTED_LABEL: labels should not be indented
#500: FILE: kernel/power/powerop.c:211:
+      fail_name_nomem:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: kernel/power/powerop.c:217:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: kernel/power/powerop.c:221:
+ * Search for operating point with specified name and remove it from $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!powerop_initialized'
#519: FILE: kernel/power/powerop.c:230:
+	if ((!powerop_initialized) || (id == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == NULL'
#519: FILE: kernel/power/powerop.c:230:
+	if ((!powerop_initialized) || (id == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#519: FILE: kernel/power/powerop.c:230:
+	if ((!powerop_initialized) || (id == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: kernel/power/powerop.c:265:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: kernel/power/powerop.c:282:
+/** $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!powerop_initialized'
#584: FILE: kernel/power/powerop.c:295:
+	if ((!powerop_initialized) || (id == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == NULL'
#584: FILE: kernel/power/powerop.c:295:
+	if ((!powerop_initialized) || (id == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#584: FILE: kernel/power/powerop.c:295:
+	if ((!powerop_initialized) || (id == NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/power/powerop.c:306:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: kernel/power/powerop.c:313:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: kernel/power/powerop.c:320:
+ * Search for operating point with specified name $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "id"
#628: FILE: kernel/power/powerop.c:339:
+	if (id != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: kernel/power/powerop.c:373:
+/** $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#735: FILE: kernel/power/powerop_point.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#777: FILE: kernel/power/powerop_sysfs.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: kernel/power/powerop_sysfs.c:6:
+ * Integration with updated PowerOP interface by $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#806: FILE: kernel/power/powerop_sysfs.c:30:
+extern struct subsystem power_subsys;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:RETURN_VOID: void function return statements are not generally useful
#830: FILE: kernel/power/powerop_sysfs.c:54:
+	return;
+}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#866: FILE: kernel/power/powerop_sysfs.c:90:
+	if ((ret = sscanf(buf, "%d", &pwr_param.value)) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#866: FILE: kernel/power/powerop_sysfs.c:90:
+	if ((ret = sscanf(buf, "%d", &pwr_param.value)) == 1) {
+		pwr_param.attr = attr;
+		ret = powerop_set_pwr_params(kobject_name(&opt->kobj),
+					    &pwr_param, 1);
+		if (ret == 0) 
+			return count;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: kernel/power/powerop_sysfs.c:93:
+		ret = powerop_set_pwr_params(kobject_name(&opt->kobj),
+					    &pwr_param, 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: kernel/power/powerop_sysfs.c:94:
+^I^Iif (ret == 0) $

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#876: FILE: kernel/power/powerop_sysfs.c:100:
+	return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#880: FILE: kernel/power/powerop_sysfs.c:104:
+static struct sysfs_ops powerop_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: kernel/power/powerop_sysfs.c:168:
+^I^Iif ((error = sysfs_create_group(kobj, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#944: FILE: kernel/power/powerop_sysfs.c:168:
+		if ((error = sysfs_create_group(kobj, 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#946: FILE: kernel/power/powerop_sysfs.c:170:
+			printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#966: FILE: kernel/power/powerop_sysfs.c:190:
+	if ((error = kobject_register(&op->kobj))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#967: FILE: kernel/power/powerop_sysfs.c:191:
+		printk(KERN_ERR "PowerOP kobject_register for op %s failed.\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1014: FILE: kernel/power/powerop_sysfs.c:238:
+	if ((error =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1016: FILE: kernel/power/powerop_sysfs.c:240:
+		printk(KERN_ERR "PowerOP subsys sysfs_create_group failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1021: FILE: kernel/power/powerop_sysfs.c:245:
+		printk(KERN_ERR "PowerOP subsys HW point creation failed\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1038: FILE: kernel/power/powerop_sysfs_point.h:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1063: FILE: kernel/power/powerop_sysfs_point.h:26:
+}
+static inline int powerop_sysfs_unregister_point(struct powerop_point *opt)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1067: FILE: kernel/power/powerop_sysfs_point.h:30:
+}
+static inline void powerop_sysfs_set_activeop(const char *id)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1070: FILE: kernel/power/powerop_sysfs_point.h:33:
+}
+static inline int powerop_sysfs_init(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1074: FILE: kernel/power/powerop_sysfs_point.h:37:
+}
+static inline void powerop_sysfs_exit(void)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 27 warnings, 21 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
