WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This is an update/cleanup based off a patch submitted by Daniel Ferenci a few years ago.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/net/x25.h:210:
+extern void x25_clear_forwards(struct net_device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#57: FILE: include/net/x25.h:210:
+extern void x25_clear_forwards(struct net_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: include/net/x25.h:211:
+extern struct x25_neigh *x25_find_forward(int, struct x25_neigh *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#58: FILE: include/net/x25.h:211:
+extern struct x25_neigh *x25_find_forward(int, struct x25_neigh *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_neigh *' should also have an identifier name
#58: FILE: include/net/x25.h:211:
+extern struct x25_neigh *x25_find_forward(int, struct x25_neigh *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/net/x25.h:212:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_address *' should also have an identifier name
#59: FILE: include/net/x25.h:212:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_neigh *' should also have an identifier name
#59: FILE: include/net/x25.h:212:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#59: FILE: include/net/x25.h:212:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#59: FILE: include/net/x25.h:212:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,
+				struct sk_buff *, int);

WARNING:LINE_SPACING: Missing a blank line after declarations
#82: FILE: net/x25/af_x25.c:854:
+	struct sk_buff *skbn;
+	skbn = skb_clone(skb, GFP_ATOMIC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#91: FILE: net/x25/af_x25.c:881:
+	if (sk != NULL && sk_acceptq_is_full(sk)) {
+		goto out_sock_put;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk"
#91: FILE: net/x25/af_x25.c:881:
+	if (sk != NULL && sk_acceptq_is_full(sk)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#102: FILE: net/x25/af_x25.c:889:
+	if (sk == NULL) {

WARNING:TYPO_SPELLING: 'fowarded' may be misspelled - perhaps 'forwarded'?
#104: FILE: net/x25/af_x25.c:891:
+			/* Call was fowarded, dont process it any more */
 			            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#106: FILE: net/x25/af_x25.c:893:
+			return 0;
+		} else {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: net/x25/x25_dev.c:70:
+^I * ^IIts not a Call Request, nor is it a control frame.$

ERROR:SPACING: space prohibited after that open parenthesis '('
#155: FILE: net/x25/x25_dev.c:74:
+	if (( to_neigh = x25_find_forward(lci, nb)) != NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#155: FILE: net/x25/x25_dev.c:74:
+	if (( to_neigh = x25_find_forward(lci, nb)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#156: FILE: net/x25/x25_dev.c:75:
+		struct sk_buff *skbn = pskb_copy (skb, GFP_ATOMIC);

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: net/x25/x25_dev.c:76:
+		struct sk_buff *skbn = pskb_copy (skb, GFP_ATOMIC);
+		x25_transmit_link(skbn, to_neigh);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#158: FILE: net/x25/x25_dev.c:77:
+		if (frametype == X25_CLEAR_CONFIRMATION) {
+			x25_clear_forwards(nb->dev);
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: net/x25/x25_forward.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: net/x25/x25_forward.c:19:
+int x25_forward_call(struct x25_address *dest_addr, struct x25_neigh *from,
+			struct sk_buff *skbn, int lci)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#197: FILE: net/x25/x25_forward.c:27:
+	if ((rt = x25_get_route(dest_addr)) != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#197: FILE: net/x25/x25_forward.c:27:
+	if ((rt = x25_get_route(dest_addr)) != NULL) {
[...]
+	} else
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#198: FILE: net/x25/x25_forward.c:28:
+	if ((rt = x25_get_route(dest_addr)) != NULL) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#199: FILE: net/x25/x25_forward.c:29:
+		if ((neigh_new = x25_get_neigh(rt->dev)) == NULL) {

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#200: FILE: net/x25/x25_forward.c:30:
+			/* This shouldnt happen, if it occurs somehow
 			        ^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#209: FILE: net/x25/x25_forward.c:39:
+		if (rt->dev == from->dev) {
+			return 1;
+		}

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#214: FILE: net/x25/x25_forward.c:44:
+		 * established LCI? It shouldnt happen, just in case..
 		                       ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#220: FILE: net/x25/x25_forward.c:50:
+				printk(KERN_WARNING "X.25: call request for lci which is already registered!, transmitting but not registering new pair\n");

ERROR:SPACING: space required before the open brace '{'
#227: FILE: net/x25/x25_forward.c:57:
+		if (!same_lci){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#228: FILE: net/x25/x25_forward.c:58:
+			if ((new_frwd = kmalloc(sizeof(struct x25_forward), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_frwd)...) over kmalloc(sizeof(struct x25_forward)...)
#228: FILE: net/x25/x25_forward.c:58:
+			if ((new_frwd = kmalloc(sizeof(struct x25_forward), GFP_ATOMIC)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Unbalanced braces around else statement
#241: FILE: net/x25/x25_forward.c:71:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: net/x25/x25_forward.c:75:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#246: FILE: net/x25/x25_forward.c:76:
+struct x25_neigh *x25_find_forward(int lci, struct x25_neigh *from) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#247: FILE: net/x25/x25_forward.c:77:
+struct x25_neigh *x25_find_forward(int lci, struct x25_neigh *from) {
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#257: FILE: net/x25/x25_forward.c:87:
+			if (from->dev == frwd->dev1) {
[...]
+			} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#269: FILE: net/x25/x25_forward.c:99:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: net/x25/x25_forward.c:105:
+        /* Remove any related forwards */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#280: FILE: net/x25/x25_forward.c:110:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fwd->dev1 == dev'
#280: FILE: net/x25/x25_forward.c:110:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fwd->dev2 == dev'
#280: FILE: net/x25/x25_forward.c:110:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#280: FILE: net/x25/x25_forward.c:110:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){
+			list_del(&fwd->node);
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004662.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 23 warnings, 16 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004662.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
