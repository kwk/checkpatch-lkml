CHECK:SPACING: No space is necessary after a cast
#251: FILE: kernel/sched.c:94:
+#define task_hot(p, now, sd) ((long long) ((now) - (p)->timestamp)	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: kernel/sched.c:498:
+static unsigned long ns_diff(const unsigned long long v1,
+	const unsigned long long v2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: kernel/sched.c:501:
+	unsigned long long vdiff;
+	if (likely(v1 > v2)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: kernel/sched.c:554:
 
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#530: FILE: kernel/sched.c:598:
+	slice = rr = rr_interval(p);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: kernel/sched.c:610:
+static void fastcall inc_bonus(task_t *p, const unsigned long totalrun,
+	const unsigned long sleep)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#648: FILE: kernel/sched.c:715:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: kernel/sched.c:1634:
+static void pull_task(runqueue_t *src_rq, task_t *p, runqueue_t *this_rq,
+	const int this_cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: kernel/sched.c:2511:
+static inline unsigned long smt_slice(const task_t *p,
+	const struct sched_domain *sd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1262: FILE: kernel/sched.c:2548:
+	p = list_entry(this_rq->queue[sched_find_first_bit(this_rq->bitmap)].next,
 		task_t, run_list);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1421: FILE: kernel/sched.c:3220:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1430: FILE: kernel/sched.c:3229:
+		p->bonus= bonus(p);
 		        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1444: FILE: kernel/sched.c:3355:
+	BUG_ON(task_queued(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#1450: FILE: kernel/sched.c:3360:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1477: FILE: kernel/sched.c:3437:
+	if ((queued = task_queued(p)))

CHECK:BRACES: Unbalanced braces around else statement
#1492: FILE: kernel/sched.c:3451:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1542: FILE: kernel/sched.c:3724:
+	if (newprio != current->prio) {
[...]
 	} else
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1636: FILE: kernel/sched.c:5764:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO)*sizeof(long));
 		                                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1661: FILE: kernel/sched.c:5823:
+		if ((queued = task_queued(p)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 2 warnings, 13 checks, 1549 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
