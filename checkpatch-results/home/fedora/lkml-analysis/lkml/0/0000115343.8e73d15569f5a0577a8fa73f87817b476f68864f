WARNING:TYPO_SPELLING: 'hald' may be misspelled - perhaps 'held'?
#46: 
named devnode.  This is to facilitate hald auto configuring cdrw drives 
                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
diff -ru udftools-1.0.0b3.orig/cdrwtool/cdrwtool.h udftools-1.0.0b3/cdrwtool/cdrwtool.h

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#105: FILE: cdrwtool/main.c:60:
+			if (write_blocks(fd, buffer, lastpacket * cdisc->packet_size, cdisc->packet_size) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#118: FILE: cdrwtool/main.c:72:
+				if (write_blocks(fd, buffer, lastpacket * cdisc->packet_size, cdisc->packet_size) < 0)

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#124: FILE: cdrwtool/main.c:77:
+			offset = ((uint64_t)(ext->start + desc->offset) - (packet * cdisc->packet_size)) << disc->blocksize_bits;

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#131: FILE: cdrwtool/main.c:83:
+					if (write_blocks(fd, buffer, packet * cdisc->packet_size, cdisc->packet_size) < 0)

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#143: FILE: cdrwtool/main.c:100:
+					if (write_blocks(fd, buffer, packet * cdisc->packet_size, cdisc->packet_size) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: doc/cdrwtool.1:132:
+more usable space on the disc, but may slow down access to smaller files.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: doc/pktsetup.8:56:
+and bind it to \fI/dev/cdrom\fP.  $

WARNING:TYPO_SPELLING: 'availible' may be misspelled - perhaps 'available'?
#287: FILE: doc/pktsetup.8:62:
+This form will bind the next availible pkcdvd minor device to
                              ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: doc/pktsetup.8:64:
+node will be created, that job is left up to udev.  $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#340: FILE: pktsetup/pktsetup.c:258:
+		if( pkt_device )
+		  mknod(pkt_dev_name(pkt_device), S_IFBLK | 0640, c.pkt_dev);

ERROR:SPACING: space prohibited after that open parenthesis '('
#340: FILE: pktsetup/pktsetup.c:258:
+		if( pkt_device )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#340: FILE: pktsetup/pktsetup.c:258:
+		if( pkt_device )

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: pktsetup/pktsetup.c:258:
+		if( pkt_device )

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#342: FILE: pktsetup/pktsetup.c:260:
+		else
+		  printf("Assigned device number %d:%d\n", MAJOR(c.pkt_dev), MINOR(c.pkt_dev) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#343: FILE: pktsetup/pktsetup.c:261:
+		  printf("Assigned device number %d:%d\n", MAJOR(c.pkt_dev), MINOR(c.pkt_dev) );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#368: FILE: pktsetup/pktsetup.c:342:
+	if( argc == 2 )
+	    setup_dev_chardev(NULL, argv[1], 0 );

ERROR:SPACING: space prohibited after that open parenthesis '('
#368: FILE: pktsetup/pktsetup.c:342:
+	if( argc == 2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#368: FILE: pktsetup/pktsetup.c:342:
+	if( argc == 2 )

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: pktsetup/pktsetup.c:342:
+	if( argc == 2 )

CHECK:BRACES: braces {} should be used on all arms of this statement
#368: FILE: pktsetup/pktsetup.c:342:
+	if( argc == 2 )
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#369: FILE: pktsetup/pktsetup.c:343:
+	    setup_dev_chardev(NULL, argv[1], 0 );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#370: FILE: pktsetup/pktsetup.c:344:
+	else {
+	  pkt_device = argv[optind];

CHECK:BRACES: Unbalanced braces around else statement
#370: FILE: pktsetup/pktsetup.c:344:
+	else {

WARNING:TABSTOP: Statements should start on a tabstop
#373: FILE: pktsetup/pktsetup.c:347:
+	  if (strchr(pkt_device, '/'))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#373: FILE: pktsetup/pktsetup.c:347:
+	  if (strchr(pkt_device, '/'))
+	    setup_dev(pkt_device, device, rem);

WARNING:TABSTOP: Statements should start on a tabstop
#375: FILE: pktsetup/pktsetup.c:349:
+	  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#375: FILE: pktsetup/pktsetup.c:349:
+	  else
+	    setup_dev_chardev(pkt_device, device, rem);

WARNING:TABSTOP: Statements should start on a tabstop
#377: FILE: pktsetup/pktsetup.c:351:
+	  return 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115343.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 17 warnings, 2 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115343.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
