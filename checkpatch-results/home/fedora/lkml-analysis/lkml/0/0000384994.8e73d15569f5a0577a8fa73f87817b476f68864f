WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
On Fri, 14 Mar 2003 18:01:32 +1100 Stephen Rothwell <sfr@canb.auug.org.au> wrote:

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#31: 
> These are just some cleanups fo the code that went in recently.  They
                               ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/net/compat_socket.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#238: FILE: include/net/compat_socket.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct compat_msghdr *' should also have an identifier name
#238: FILE: include/net/compat_socket.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/net/compat_socket.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#239: FILE: include/net/compat_socket.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iovec *' should also have an identifier name
#239: FILE: include/net/compat_socket.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#239: FILE: include/net/compat_socket.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#239: FILE: include/net/compat_socket.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#240: FILE: include/net/compat_socket.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: include/net/compat_socket.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);
                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#240: FILE: include/net/compat_socket.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);
                                                                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#241: FILE: include/net/compat_socket.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: include/net/compat_socket.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);
                                              ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#241: FILE: include/net/compat_socket.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);
                                                                     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr*' should also have an identifier name
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#243: FILE: include/net/compat_socket.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/net/compat_socket.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#244: FILE: include/net/compat_socket.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct compat_msghdr *' should also have an identifier name
#244: FILE: include/net/compat_socket.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#244: FILE: include/net/compat_socket.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: include/net/compat_socket.h:37:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,
+		unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/net/compat_socket.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#246: FILE: include/net/compat_socket.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#246: FILE: include/net/compat_socket.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#246: FILE: include/net/compat_socket.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: include/net/compat_socket.h:39:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,
+		int);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'msg' - possible side-effects?
#328: FILE: net/compat.c:122:
+#define CMSG_COMPAT_FIRSTHDR(msg)			\
+	(((msg)->msg_controllen) >= sizeof(struct compat_cmsghdr) ?	\
+	 (struct compat_cmsghdr *)((msg)->msg_control) :		\
+	 (struct compat_cmsghdr *)NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: net/compat.c:128:
+static inline struct compat_cmsghdr *cmsg_compat_nxthdr(struct msghdr *msg,
+		struct compat_cmsghdr *cmsg, int cmsg_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: net/compat.c:389:
+int put_compat_msg_controllen(struct msghdr *msg_sys,
+		struct compat_msghdr *msg_compat, unsigned long cmsg_ptr)

CHECK:SPACING: No space is necessary after a cast
#389: FILE: net/compat.c:397:
+	uclen = (compat_size_t) (ucmsg_ptr - cmsg_ptr);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#397: FILE: net/compat.c:405:
+/*
+ * For now, we assume that the compatibility and native version

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#492: FILE: net/compat.c:463:
+	/*
+	 * Since struct ipt_counters just contains two u_int64_t members

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: net/compat.c:470:
+	if (!access_ok(VERIFY_WRITE, krepl->counters,
+			krepl->num_counters * sizeof(struct ipt_counters)))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#521: FILE: net/compat.c:484:
+/*
+ * A struct sock_filter is architecture independent.

WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#559: FILE: net/compat.c:508:
+	 * Since struct sock_filter is architecure independent,
 	                               ^^^^^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#559: FILE: net/compat.c:508:
+	/*
+	 * Since struct sock_filter is architecure independent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: net/compat.c:513:
+	if (!access_ok(VERIFY_READ, kfprog.filter,
+			kfprog.len * sizeof(struct sock_filter)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: net/compat.c:575:
+asmlinkage long compat_sys_setsockopt(int fd, int level, int optname,
 				char *optval, int optlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: net/compat.c:593:
+				       void * optval, int *optlen);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: net/compat.c:596:
+static int do_get_sock_timeout(int fd, int level, int optname, char *optval,
+		int *optlen)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#662: FILE: net/compat.c:639:
+extern asmlinkage long sys_connect(int, struct sockaddr *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: net/compat.c:640:
+extern asmlinkage long sys_accept(int, struct sockaddr *, int *); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#663: FILE: net/compat.c:640:
+extern asmlinkage long sys_accept(int, struct sockaddr *, int *); 

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#664: FILE: net/compat.c:641:
+extern asmlinkage long sys_getsockname(int, struct sockaddr *, int *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#665: FILE: net/compat.c:642:
+extern asmlinkage long sys_getpeername(int, struct sockaddr *, int *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#666: FILE: net/compat.c:643:
+extern asmlinkage long sys_send(int, void *, size_t, unsigned);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#666: FILE: net/compat.c:643:
+extern asmlinkage long sys_send(int, void *, size_t, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#667: FILE: net/compat.c:644:
+extern asmlinkage long sys_sendto(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#667: FILE: net/compat.c:644:
+extern asmlinkage long sys_sendto(int, void *, size_t, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#669: FILE: net/compat.c:646:
+extern asmlinkage long sys_recv(int, void *, size_t, unsigned);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#669: FILE: net/compat.c:646:
+extern asmlinkage long sys_recv(int, void *, size_t, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#670: FILE: net/compat.c:647:
+extern asmlinkage long sys_recvfrom(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#670: FILE: net/compat.c:647:
+extern asmlinkage long sys_recvfrom(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#672: FILE: net/compat.c:649:
+extern asmlinkage long sys_socket(int, int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#673: FILE: net/compat.c:650:
+extern asmlinkage long sys_socketpair(int, int, int, int [2]);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#674: FILE: net/compat.c:651:
+extern asmlinkage long sys_shutdown(int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#675: FILE: net/compat.c:652:
+extern asmlinkage long sys_listen(int, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384994.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 42 warnings, 15 checks, 611 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384994.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
