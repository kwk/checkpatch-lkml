WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This moves the register shuffling code into arch/um/os-Linux/sys-$(SUBARCH),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#35: FILE: arch/um/include/registers.h:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: arch/um/include/registers.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: arch/um/include/registers.h:11:
+extern void init_thread_registers(union uml_pt_regs *to);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: arch/um/include/registers.h:12:
+extern void save_registers(int pid, union uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#47: FILE: arch/um/include/registers.h:13:
+extern void restore_registers(int pid, union uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#48: FILE: arch/um/include/registers.h:14:
+extern void init_registers(int pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: arch/um/os-Linux/sys-i386/Makefile:1:
+# $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: arch/um/os-Linux/sys-i386/registers.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: arch/um/os-Linux/sys-i386/registers.c:1:
+/* 

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: arch/um/os-Linux/sys-i386/registers.c:26:
+	if(have_fpx_regs)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: arch/um/os-Linux/sys-i386/registers.c:30:
+static int move_registers(int pid, int int_op, union uml_pt_regs *regs, $

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: arch/um/os-Linux/sys-i386/registers.c:33:
+	if(ptrace(int_op, pid, 0, regs->skas.regs) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: arch/um/os-Linux/sys-i386/registers.c:36:
+	if(ptrace(fp_op, pid, 0, fp_regs) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#330: FILE: arch/um/os-Linux/sys-i386/registers.c:39:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open brace '{'
#338: FILE: arch/um/os-Linux/sys-i386/registers.c:47:
+	if(have_fpx_regs){

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: arch/um/os-Linux/sys-i386/registers.c:47:
+	if(have_fpx_regs){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#342: FILE: arch/um/os-Linux/sys-i386/registers.c:51:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: arch/um/os-Linux/sys-i386/registers.c:51:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: arch/um/os-Linux/sys-i386/registers.c:57:
+	if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_registers', this function's name, in a string
#349: FILE: arch/um/os-Linux/sys-i386/registers.c:58:
+		panic("save_registers - saving registers failed, errno = %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#358: FILE: arch/um/os-Linux/sys-i386/registers.c:67:
+	if(have_fpx_regs){

ERROR:SPACING: space required before the open parenthesis '('
#358: FILE: arch/um/os-Linux/sys-i386/registers.c:67:
+	if(have_fpx_regs){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#362: FILE: arch/um/os-Linux/sys-i386/registers.c:71:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: arch/um/os-Linux/sys-i386/registers.c:71:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: arch/um/os-Linux/sys-i386/registers.c:77:
+	if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'restore_registers', this function's name, in a string
#369: FILE: arch/um/os-Linux/sys-i386/registers.c:78:
+		panic("restore_registers - saving registers failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#370: FILE: arch/um/os-Linux/sys-i386/registers.c:79:
+		panic("restore_registers - saving registers failed, "
+		      "errno = %d\n", -err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: arch/um/os-Linux/sys-i386/registers.c:87:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: arch/um/os-Linux/sys-i386/registers.c:88:
+^I^Ipanic("check_ptrace : PTRACE_GETREGS failed, errno = %d", $

ERROR:SPACING: space required before the open parenthesis '('
#383: FILE: arch/um/os-Linux/sys-i386/registers.c:92:
+	if(!err)

ERROR:SPACING: space required before the open parenthesis '('
#387: FILE: arch/um/os-Linux/sys-i386/registers.c:96:
+	if(err != EIO)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: arch/um/os-Linux/sys-i386/registers.c:97:
+^I^Ipanic("check_ptrace : PTRACE_GETFPXREGS failed, errno = %d", $

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: arch/um/os-Linux/sys-i386/registers.c:101:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: arch/um/os-Linux/sys-i386/registers.c:102:
+^I^Ipanic("check_ptrace : PTRACE_GETFPREGS failed, errno = %d", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: arch/um/os-Linux/sys-x86_64/Makefile:1:
+# $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: arch/um/os-Linux/sys-x86_64/registers.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#428: FILE: arch/um/os-Linux/sys-x86_64/registers.c:1:
+/* 

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: arch/um/os-Linux/sys-x86_64/registers.c:29:
+	if(ptrace(int_op, pid, 0, regs->skas.regs) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#459: FILE: arch/um/os-Linux/sys-x86_64/registers.c:32:
+	if(ptrace(fp_op, pid, 0, regs->skas.fp) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#462: FILE: arch/um/os-Linux/sys-x86_64/registers.c:35:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#470: FILE: arch/um/os-Linux/sys-x86_64/registers.c:43:
+	if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_registers', this function's name, in a string
#471: FILE: arch/um/os-Linux/sys-x86_64/registers.c:44:
+		panic("save_registers - saving registers failed, errno = %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#480: FILE: arch/um/os-Linux/sys-x86_64/registers.c:53:
+	if(err)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'restore_registers', this function's name, in a string
#481: FILE: arch/um/os-Linux/sys-x86_64/registers.c:54:
+		panic("restore_registers - saving registers failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#482: FILE: arch/um/os-Linux/sys-x86_64/registers.c:55:
+		panic("restore_registers - saving registers failed, "
+		      "errno = %d\n", -err);

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: arch/um/os-Linux/sys-x86_64/registers.c:63:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: arch/um/os-Linux/sys-x86_64/registers.c:64:
+^I^Ipanic("check_ptrace : PTRACE_GETREGS failed, errno = %d", $

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: arch/um/os-Linux/sys-x86_64/registers.c:68:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: arch/um/os-Linux/sys-x86_64/registers.c:69:
+^I^Ipanic("check_ptrace : PTRACE_GETFPREGS failed, errno = %d", $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 10 warnings, 6 checks, 423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
