WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch makes it possible for a module to bind safely to the AFS syscall,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: include/linux/syscallstub.h:1:
+/* syscallstub.h: system call stub management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/syscallstub.h:22:
+extern int register_afs_syscall_handler(afs_syscall_handler_t handler, struct module *owner);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/syscallstub.h:23:
+extern void unregister_afs_syscall_handler(afs_syscall_handler_t handler, struct module *owner);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#64: FILE: include/linux/syscallstub.h:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: kernel/syscallstub.c:1:
+/* syscallstub.c: module providable syscall stub management

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#125: FILE: kernel/syscallstub.c:43:
+EXPORT_SYMBOL(register_afs_syscall_handler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#131: FILE: kernel/syscallstub.c:49:
+	if (afs_syscall_handler==handler && afs_syscall_owner==owner) {
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#131: FILE: kernel/syscallstub.c:49:
+	if (afs_syscall_handler==handler && afs_syscall_owner==owner) {
 	                                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#135: FILE: kernel/syscallstub.c:53:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#135: FILE: kernel/syscallstub.c:53:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#136: FILE: kernel/syscallstub.c:54:
+		printk("module %s tried to free AFS syscall which it did not own\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#143: FILE: kernel/syscallstub.c:61:
+EXPORT_SYMBOL(unregister_afs_syscall_handler);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#152: FILE: kernel/syscallstub.c:70:
+	ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#156: FILE: kernel/syscallstub.c:74:
+	if (handler && try_module_get(owner))
+			ret = 0;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#160: FILE: kernel/syscallstub.c:78:
+	if (ret<0)
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: kernel/syscallstub.c:81:
+	va_start(va,cmd);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: kernel/syscallstub.c:82:
+	ret = handler(cmd,va);
 	                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 8 warnings, 4 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
