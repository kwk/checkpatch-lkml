CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: include/linux/slab.h:66:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/slab.h:84:
+extern void *__kmalloc_node(size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#57: FILE: include/linux/slab.h:84:
+extern void *__kmalloc_node(size_t, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#57: FILE: include/linux/slab.h:84:
+extern void *__kmalloc_node(size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#57: FILE: include/linux/slab.h:84:
+extern void *__kmalloc_node(size_t, int, int);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#66: FILE: include/linux/slab.h:93:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#66: FILE: include/linux/slab.h:93:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#66: FILE: include/linux/slab.h:93:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#66: FILE: include/linux/slab.h:93:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/slab.h:101:
+			extern void __you_cannot_kmalloc_that_much(void);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#128: FILE: mm/slab.c:291:
+	spinlock_t      list_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: mm/slab.c:292:
+^Iunsigned int ^Ifree_limit;$

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: mm/slab.c:311:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#155: FILE: mm/slab.c:313:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		if(list_empty(&(cachep->nodelists[nodeid]->slab)))	\
+			INIT_LIST_HEAD(listp);		\
+		else {	listp->next->prev = listp;	\
+			listp->prev->next = listp;	\
+		}					\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listp' - possible side-effects?
#155: FILE: mm/slab.c:313:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		if(list_empty(&(cachep->nodelists[nodeid]->slab)))	\
+			INIT_LIST_HEAD(listp);		\
+		else {	listp->next->prev = listp;	\
+			listp->prev->next = listp;	\
+		}					\
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'slab' may be better as '(slab)' to avoid precedence issues
#155: FILE: mm/slab.c:313:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		if(list_empty(&(cachep->nodelists[nodeid]->slab)))	\
+			INIT_LIST_HEAD(listp);		\
+		else {	listp->next->prev = listp;	\
+			listp->prev->next = listp;	\
+		}					\
+	}while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]->slab
#157: FILE: mm/slab.c:315:
+		if(list_empty(&(cachep->nodelists[nodeid]->slab)))	\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#157: FILE: mm/slab.c:315:
+		if(list_empty(&(cachep->nodelists[nodeid]->slab)))	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: mm/slab.c:317:
+		else {	listp->next->prev = listp;	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that close brace '}'
#162: FILE: mm/slab.c:320:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: mm/slab.c:320:
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cachep' - possible side-effects?
#164: FILE: mm/slab.c:322:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#164: FILE: mm/slab.c:322:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodeid' - possible side-effects?
#164: FILE: mm/slab.c:322:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#165: FILE: mm/slab.c:323:
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\

ERROR:SPACING: space required after that close brace '}'
#169: FILE: mm/slab.c:327:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: mm/slab.c:327:
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#182: FILE: mm/slab.c:339:
+#define is_node_online(node) \
+	({ BUG_ON(node != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: mm/slab.c:340:
+	({ BUG_ON(node != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: mm/slab.c:354:
+^Iunsigned int ^I^Ishared;$

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#268: FILE: mm/slab.c:747:
+		/* we need to do this right in the begining since
 		                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: mm/slab.c:757:
+			if(!cachep->nodelists[node]) {

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: mm/slab.c:758:
+				if(!(l3 = kmalloc_node(memsize,	node, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#280: FILE: mm/slab.c:758:
+				if(!(l3 = kmalloc_node(memsize,	node, GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#284: FILE: mm/slab.c:762:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#290: FILE: mm/slab.c:768:
+			cachep->nodelists[node]->free_limit = (1 + nr_cpus_node(node))*cachep->batchcount

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#290: FILE: mm/slab.c:768:
+			cachep->nodelists[node]->free_limit = (1 + nr_cpus_node(node))*cachep->batchcount
 			                                                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#298: FILE: mm/slab.c:776:
+			BUG_ON(!l3);

ERROR:SPACING: space required before the open parenthesis '('
#299: FILE: mm/slab.c:777:
+			if(!l3->shared) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#300: FILE: mm/slab.c:778:
+				if(!(nc = alloc_arraycache(cpu, cachep->shared*cachep->batchcount, 0xbaadf00d)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#300: FILE: mm/slab.c:778:
+				if(!(nc = alloc_arraycache(cpu, cachep->shared*cachep->batchcount, 0xbaadf00d)))
 				                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#300: FILE: mm/slab.c:778:
+				if(!(nc = alloc_arraycache(cpu, cachep->shared*cachep->batchcount, 0xbaadf00d)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: mm/slab.c:778:
+				if(!(nc = alloc_arraycache(cpu, cachep->shared*cachep->batchcount, 0xbaadf00d)))

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#303: FILE: mm/slab.c:781:
+				/*we are serialised from CPU_DEAD or CPU_UP_CANCELLED by the cpucontrol lock*/

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#334: FILE: mm/slab.c:812:
+			if(!l3)

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#337: FILE: mm/slab.c:815:
+			l3->free_limit -= cachep->batchcount;		//Free limit for this kmem_list3

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: mm/slab.c:816:
+			if(nc)

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: mm/slab.c:818:
+			if(!cpus_empty(mask)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: mm/slab.c:819:
+                                spin_unlock(&l3->list_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: mm/slab.c:819:
+                                spin_unlock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: mm/slab.c:820:
+                                goto unlock_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: mm/slab.c:820:
+                                goto unlock_cache;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: mm/slab.c:821:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: mm/slab.c:821:
+                        }$

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: mm/slab.c:823:
+			if(!l3->shared)

ERROR:SPACING: space required before the open parenthesis '('
#351: FILE: mm/slab.c:829:
+			if(__cache_shrink(cachep, node)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: mm/slab.c:857:
+	BUG_ON((cachep->nodelists[nodeid]) != list);

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#372: FILE: mm/slab.c:858:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), nodeid ,GFP_KERNEL);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#372: FILE: mm/slab.c:858:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), nodeid ,GFP_KERNEL);
 	                                                     ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*ptr)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#372: FILE: mm/slab.c:858:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), nodeid ,GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: mm/slab.c:859:
+	BUG_ON(!ptr);

ERROR:SPACING: space required before the open parenthesis '('
#391: FILE: mm/slab.c:878:
+	for(i = 0; i < NUM_INIT_LISTS; i++)

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: mm/slab.c:881:
+	for(i = 0; i < MAX_NUMNODES; i++) {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#439: FILE: mm/slab.c:981:
+		for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: mm/slab.c:981:
+		int i, j;
+		for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#439: FILE: mm/slab.c:981:
+		for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: mm/slab.c:981:
+		for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#439: FILE: mm/slab.c:981:
+		for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: mm/slab.c:983:
+		BUG_ON(!malloc_sizes[i].cs_size);

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: mm/slab.c:986:
+		if(i) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#445: FILE: mm/slab.c:987:
+			init_list(malloc_sizes[0].cs_cachep, &initkmem_list3[SIZE_32], numa_node_id());

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#446: FILE: mm/slab.c:988:
+			init_list(malloc_sizes[0].cs_dmacachep, &initkmem_list3[SIZE_DMA_32], numa_node_id());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#449: FILE: mm/slab.c:991:
+		for( j=0; j < MAX_NUMNODES; j++) {
 		      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#449: FILE: mm/slab.c:991:
+		for( j=0; j < MAX_NUMNODES; j++) {

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: mm/slab.c:991:
+		for( j=0; j < MAX_NUMNODES; j++) {

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: mm/slab.c:992:
+			if(is_node_online(j))

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: mm/slab.c:1314:
+	int i;
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: mm/slab.c:1314:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#470: FILE: mm/slab.c:1315:
+		if(is_node_online(i)) {

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#473: FILE: mm/slab.c:1318:
+				((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 				                       ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#507: FILE: mm/slab.c:1603:
+			for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#507: FILE: mm/slab.c:1603:
+			for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);
 			     ^

ERROR:SPACING: space required before the open parenthesis '('
#507: FILE: mm/slab.c:1603:
+			for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#507: FILE: mm/slab.c:1603:
+			for(i=0 ; malloc_sizes[i].cs_size && (malloc_sizes[i].cs_size < sizeof(struct kmem_list3)); i++);

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: mm/slab.c:1604:
+			if(i == 0) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#512: FILE: mm/slab.c:1608:
+			}
+			else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: mm/slab.c:1608:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: mm/slab.c:1616:
+			if(cpucache_up_64 == SIZE_DMA_32) {

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: mm/slab.c:1620:
+			else if(cpucache_up_64 == SIZE_64) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#524: FILE: mm/slab.c:1620:
+			}
+			else if(cpucache_up_64 == SIZE_64) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#528: FILE: mm/slab.c:1624:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#528: FILE: mm/slab.c:1624:
+			else {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#529: FILE: mm/slab.c:1625:
+				cachep->nodelists[numa_node_id()] = kmalloc(sizeof(struct kmem_list3),GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#529: FILE: mm/slab.c:1625:
+				cachep->nodelists[numa_node_id()] = kmalloc(sizeof(struct kmem_list3),GFP_KERNEL);
 				                                                                     ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cachep->nodelists[numa_node_id()])...) over kmalloc(sizeof(struct kmem_list3)...)
#529: FILE: mm/slab.c:1625:
+				cachep->nodelists[numa_node_id()] = kmalloc(sizeof(struct kmem_list3),GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#534: FILE: mm/slab.c:1630:
+			((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: mm/slab.c:1633:
+		BUG_ON(!cachep->nodelists[numa_node_id()]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: mm/slab.c:1698:
+	BUG_ON(spin_trylock(&list3_data(cachep)->list_lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#567: FILE: mm/slab.c:1706:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[node]
#567: FILE: mm/slab.c:1706:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

ERROR:SPACING: space required before the open parenthesis '('
#575: FILE: mm/slab.c:1714:
+#define check_spinlock_acquired_node(x, y) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#610: FILE: mm/slab.c:1759:
+	for(i = 0; i < MAX_NUMNODES; i++)  {

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: mm/slab.c:1781:
+	if(nodeid == -1)

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: mm/slab.c:1787:
+		if(!is_node_online(i))

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: mm/slab.c:1792:
+		for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#668: FILE: mm/slab.c:1802:
+				BUG();

ERROR:SPACING: space required after that close brace '}'
#689: FILE: mm/slab.c:1814:
+	}while(++i < MAX_NUMNODES && nodeid == -1);

ERROR:SPACING: space required before the open parenthesis '('
#689: FILE: mm/slab.c:1814:
+	}while(++i < MAX_NUMNODES && nodeid == -1);

ERROR:SPACING: space required before the open parenthesis '('
#725: FILE: mm/slab.c:1890:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#726: FILE: mm/slab.c:1891:
+		if((l3 = cachep->nodelists[i])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#726: FILE: mm/slab.c:1891:
+		if((l3 = cachep->nodelists[i])) {

WARNING:TYPO_SPELLING: 'Attmept' may be misspelled - perhaps 'Attempt'?
#761: FILE: mm/slab.c:2061:
+	 * Attmept to allocate a physical page from 'nodeid',
 	   ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#762: FILE: mm/slab.c:2062:
+	 * Attmept to allocate a physical page from 'nodeid',
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#785: FILE: mm/slab.c:2083:
+	list_add_tail(&slabp->list, &(l3->slabs_free));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#808: FILE: mm/slab.c:2236:
+	BUG_ON(ac->avail > 0 || !l3);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#848: FILE: mm/slab.c:2406:
+	BUG_ON(!l3);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#868: FILE: mm/slab.c:2426:
+	BUG_ON(slabp->inuse == cachep->num);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#871: FILE: mm/slab.c:2429:
+	obj =  slabp->s_mem + slabp->free*cachep->objsize;
 	                                 ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#883: FILE: mm/slab.c:2441:
+	if (slabp->free == BUFCTL_END) {
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#886: FILE: mm/slab.c:2444:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#886: FILE: mm/slab.c:2444:
+	else {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#904: FILE: mm/slab.c:2462:
+}
+/*

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#992: FILE: mm/slab.c:2551:
+		while (p != &(l3->slabs_free)) {

ERROR:SPACING: space required before the open parenthesis '('
#1025: FILE: mm/slab.c:2589:
+	if(unlikely(slabp->nodeid != numa_node_id())) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: mm/slab.c:2592:
+		int nodeid = slabp->nodeid;
+		spin_lock(&(cachep->nodelists[nodeid])->list_lock);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1028: FILE: mm/slab.c:2592:
+		spin_lock(&(cachep->nodelists[nodeid])->list_lock);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1030: FILE: mm/slab.c:2594:
+		spin_unlock(&(cachep->nodelists[nodeid])->list_lock);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1032: FILE: mm/slab.c:2596:
+	}
+	else if (likely(ac->avail < ac->limit)) {

ERROR:SPACING: space required before the open parenthesis '('
#1111: FILE: mm/slab.c:2682:
+	if(nodeid == numa_node_id() || nodeid == -1)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1133: FILE: mm/slab.c:2740:
+void * __kmalloc_node (size_t size, int nodeid, int flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1133: FILE: mm/slab.c:2740:
+void * __kmalloc_node (size_t size, int nodeid, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1148: FILE: mm/slab.c:2755:
+		BUG_ON(csizep->cs_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#1148: FILE: mm/slab.c:2755:
+		BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#1151: FILE: mm/slab.c:2758:
+		if(nodeid == numa_node_id() || nodeid == -1)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1164: FILE: mm/slab.c:2771:
+EXPORT_SYMBOL(__kmalloc_node);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1193: FILE: mm/slab.c:2920:
+	for(i=0; i < NR_CPUS; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#1193: FILE: mm/slab.c:2920:
+	for(i=0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1193: FILE: mm/slab.c:2920:
+	for(i=0; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1194: FILE: mm/slab.c:2921:
+		if(cpu_online(i)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1196: FILE: mm/slab.c:2923:
+			struct array_cache *nc = NULL, *new;
+			node = cpu_to_node(i);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1197: FILE: mm/slab.c:2924:
+			if(!(new = alloc_arraycache(i, (cachep->shared*cachep->batchcount), 0xbaadf00d)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1197: FILE: mm/slab.c:2924:
+			if(!(new = alloc_arraycache(i, (cachep->shared*cachep->batchcount), 0xbaadf00d)))
 			                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#1197: FILE: mm/slab.c:2924:
+			if(!(new = alloc_arraycache(i, (cachep->shared*cachep->batchcount), 0xbaadf00d)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1197: FILE: mm/slab.c:2924:
+			if(!(new = alloc_arraycache(i, (cachep->shared*cachep->batchcount), 0xbaadf00d)))

ERROR:SPACING: space required before the open parenthesis '('
#1200: FILE: mm/slab.c:2927:
+			if((l3 = cachep->nodelists[node])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1200: FILE: mm/slab.c:2927:
+			if((l3 = cachep->nodelists[node])) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1201: FILE: mm/slab.c:2928:
+			if((l3 = cachep->nodelists[node])) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1204: FILE: mm/slab.c:2931:
+				if((nc = cachep->nodelists[node]->shared))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1204: FILE: mm/slab.c:2931:
+				if((nc = cachep->nodelists[node]->shared))

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1208: FILE: mm/slab.c:2935:
+				l3->free_limit = (1 + nr_cpus_node(node))*cachep->batchcount + cachep->num;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1208: FILE: mm/slab.c:2935:
+				l3->free_limit = (1 + nr_cpus_node(node))*cachep->batchcount + cachep->num;
 				                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1214: FILE: mm/slab.c:2941:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3), node, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1214: FILE: mm/slab.c:2941:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3), node, GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*l3)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#1214: FILE: mm/slab.c:2941:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3), node, GFP_KERNEL)))

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1218: FILE: mm/slab.c:2945:
+			l3->next_reap = jiffies + REAPTIMEOUT_LIST3 + ((unsigned long)cachep)%REAPTIMEOUT_LIST3;

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1218: FILE: mm/slab.c:2945:
+			l3->next_reap = jiffies + REAPTIMEOUT_LIST3 + ((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 			                                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1220: FILE: mm/slab.c:2947:
+			l3->free_limit = (1 + nr_cpus_node(node))*cachep->batchcount + cachep->num;
 			                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1277: FILE: mm/slab.c:3015:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: mm/slab.c:3016:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",
+				cachep->name, -err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1279: FILE: mm/slab.c:3017:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1318: FILE: mm/slab.c:3135:
+		if(time_after(l3->next_reap, jiffies))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1337: FILE: mm/slab.c:3148:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1337: FILE: mm/slab.c:3148:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1337: FILE: mm/slab.c:3148:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1337: FILE: mm/slab.c:3148:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1337: FILE: mm/slab.c:3148:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1342: FILE: mm/slab.c:3151:
+			if (p == &(l3->slabs_free))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1401: FILE: mm/slab.c:3248:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1401: FILE: mm/slab.c:3248:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1401: FILE: mm/slab.c:3248:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1401: FILE: mm/slab.c:3248:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1403: FILE: mm/slab.c:3250:
+		if(!l3 || !is_node_online(i))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1408: FILE: mm/slab.c:3255:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1408: FILE: mm/slab.c:3255:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1415: FILE: mm/slab.c:3262:
+		list_for_each(q,&l3->slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1415: FILE: mm/slab.c:3262:
+		list_for_each(q,&l3->slabs_partial) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1424: FILE: mm/slab.c:3271:
+		list_for_each(q,&l3->slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1424: FILE: mm/slab.c:3271:
+		list_for_each(q,&l3->slabs_free) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: mm/slab.c:3298:
+	seq_printf(m, " : slabdata %6lu %6lu %6lu",
+			active_slabs, num_slabs, shared_avail);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1464: FILE: mm/slab.c:3310:
+		seq_printf(m, " : globalstat %7lu %6lu %5lu %4lu %4lu %4lu %4lu",
 				allocs, high, grown, reaped, errors,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 85 errors, 49 warnings, 46 checks, 1373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
