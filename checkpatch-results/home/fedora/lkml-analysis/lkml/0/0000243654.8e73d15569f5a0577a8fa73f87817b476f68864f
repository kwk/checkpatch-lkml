WARNING:TYPO_SPELLING: 'supprt' may be misspelled - perhaps 'support'?
#54: 
For supprt such holes in memmap, pfn_valid() is used when HOLES_IN_ZONE is
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#88: FILE: mm/page_alloc.c:163:
+static inline unsigned long page_order(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#92: FILE: mm/page_alloc.c:167:
+static inline void set_page_order(struct page *page, int order) {

CHECK:CAMELCASE: Avoid CamelCase: <__SetPagePrivate>
#94: FILE: mm/page_alloc.c:169:
+	__SetPagePrivate(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPagePrivate>
#99: FILE: mm/page_alloc.c:174:
+	__ClearPagePrivate(page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#102: FILE: mm/page_alloc.c:177:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#110: FILE: mm/page_alloc.c:185:
+ * Because page_count(page) == 0, and zone->lock is aquired.
                                                     ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mm/page_alloc.c:190:
+       if (PagePrivate(page)           &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#115: FILE: mm/page_alloc.c:190:
+       if (PagePrivate(page)           &&
[...]
+               return 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: mm/page_alloc.c:191:
+           (page_order(page) == order) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: mm/page_alloc.c:191:
+           (page_order(page) == order) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: mm/page_alloc.c:192:
+           !PageReserved(page)         &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: mm/page_alloc.c:192:
+           !PageReserved(page)         &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: mm/page_alloc.c:193:
+            page_count(page) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: mm/page_alloc.c:193:
+            page_count(page) == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: mm/page_alloc.c:194:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: mm/page_alloc.c:194:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: mm/page_alloc.c:195:
+       return 0;$

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#135: FILE: mm/page_alloc.c:211:
+ * free page of lenght (1 << order) and marked with PG_Private.page's order
                 ^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: mm/page_alloc.c:234:
+	BUG_ON(page_idx & (order_size - 1));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: mm/page_alloc.c:235:
+	BUG_ON(bad_range(zone, page));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#174: FILE: mm/page_alloc.c:238:
+	while (order < MAX_ORDER-1) {
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: mm/page_alloc.c:241:
+		int buddy_idx;
+		buddy_idx = (page_idx ^ (1 << order));

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: mm/page_alloc.c:343:
+ ^Iint low, int high, struct free_area *area)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: mm/page_alloc.c:343:
+ ^Iint low, int high, struct free_area *area)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: mm/page_alloc.c:343:
+ ^Iint low, int high, struct free_area *area)$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#317: FILE: mm/page_alloc.c:1455:
+	for (order = 0; order < MAX_ORDER ; order++) {
 		INIT_LIST_HEAD(&zone->free_area[order].free_list);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 16 warnings, 4 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
