WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> submit a patch to Andrew?  Whenever he merges the kthread stuff to mainline

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: drivers/md/dm-crypt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: drivers/md/dm-crypt.c:91:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: drivers/md/dm-crypt.c:107:
+                          struct scatterlist *in, unsigned int length,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/md/dm-crypt.c:107:
+                          struct scatterlist *in, unsigned int length,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: drivers/md/dm-crypt.c:108:
+                          int write, sector_t sector)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/md/dm-crypt.c:108:
+                          int write, sector_t sector)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: drivers/md/dm-crypt.c:134:
+                   struct bio *bio_out, struct bio *bio_in,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: drivers/md/dm-crypt.c:134:
+                   struct bio *bio_out, struct bio *bio_in,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: drivers/md/dm-crypt.c:135:
+                   sector_t sector, int write)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: drivers/md/dm-crypt.c:135:
+                   sector_t sector, int write)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: drivers/md/dm-crypt.c:151:
+                         struct convert_context *ctx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/md/dm-crypt.c:151:
+                         struct convert_context *ctx)$

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: drivers/md/dm-crypt.c:155:
+	while(ctx->idx_in < ctx->bio_in->bi_vcnt &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/md/dm-crypt.c:183:
+^I^I                              ctx->write, ctx->sector);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: drivers/md/dm-crypt.c:200:
+                   struct bio *base_bio, int *bio_vec_idx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/md/dm-crypt.c:200:
+                   struct bio *base_bio, int *bio_vec_idx)$

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: drivers/md/dm-crypt.c:231:
+	for(i = bio->bi_idx; i < nr_iovecs; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: drivers/md/dm-crypt.c:275:
+                                    struct bio *bio, unsigned int bytes)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: drivers/md/dm-crypt.c:275:
+                                    struct bio *bio, unsigned int bytes)$

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: drivers/md/dm-crypt.c:301:
+	for(i = start; i < end; i++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: drivers/md/dm-crypt.c:303:
+		BUG_ON(!bv->bv_page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#359: FILE: drivers/md/dm-crypt.c:315:
+	struct crypt_config *cc = (struct crypt_config *) io->target->private;

ERROR:SPACING: space required before the open parenthesis '('
#418: FILE: drivers/md/dm-crypt.c:374:
+	for(;;) {

CHECK:SPACING: No space is necessary after a cast
#436: FILE: drivers/md/dm-crypt.c:392:
+			io = (struct crypt_io *) bio->bi_private;

CHECK:SPACING: No space is necessary after a cast
#437: FILE: drivers/md/dm-crypt.c:393:
+			cc = (struct crypt_config *) io->target->private;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: drivers/md/dm-crypt.c:396:
+			crypt_convert_init(cc, &ctx, io->bio, io->bio,
+				io->bio->bi_sector - io->target->begin, 0);

ERROR:SPACING: space required before the open parenthesis '('
#465: FILE: drivers/md/dm-crypt.c:421:
+	for(i = 0; i < size; i++) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#469: FILE: drivers/md/dm-crypt.c:425:
+		key[i] = (u8)simple_strtoul(buffer, &endp, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#486: FILE: drivers/md/dm-crypt.c:442:
+	static char hex_digits[] = "0123456789abcdef";

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: drivers/md/dm-crypt.c:445:
+	for(i = 0; i < size; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cc"
#527: FILE: drivers/md/dm-crypt.c:483:
+	if (cc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#533: FILE: drivers/md/dm-crypt.c:489:
+	if (!mode || strcmp(mode, "plain") == 0)
[...]
+	else if (strcmp(mode, "ecb") == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#537: FILE: drivers/md/dm-crypt.c:493:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: drivers/md/dm-crypt.c:511:
+^I^Icc->iv_size = max(crypto_tfm_alg_ivsize(tfm), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: drivers/md/dm-crypt.c:512:
+^I^I                  (unsigned int)(sizeof(u32) / sizeof(u8)));$

CHECK:BRACES: Unbalanced braces around else statement
#557: FILE: drivers/md/dm-crypt.c:513:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#582: FILE: drivers/md/dm-crypt.c:538:
+	if ((key_size == 0 && strcmp(argv[1], "-") != 0)
+	    || crypt_decode_key(cc->key, argv[1], key_size) < 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: drivers/md/dm-crypt.c:559:
+^I                  dm_table_get_mode(ti->table), &cc->dev)) {$

CHECK:SPACING: No space is necessary after a cast
#624: FILE: drivers/md/dm-crypt.c:580:
+	struct crypt_config *cc = (struct crypt_config *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#636: FILE: drivers/md/dm-crypt.c:592:
+	struct crypt_io *io = (struct crypt_io *) bio->bi_private;

CHECK:SPACING: No space is necessary after a cast
#637: FILE: drivers/md/dm-crypt.c:593:
+	struct crypt_config *cc = (struct crypt_config *) io->target->private;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#654: FILE: drivers/md/dm-crypt.c:610:
+	if ((bio_rw(bio) == READ || bio_rw(bio) == READA)
+	    && bio_flagged(bio, BIO_UPTODATE)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: drivers/md/dm-crypt.c:623:
+                     union map_info *map_context)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: drivers/md/dm-crypt.c:623:
+                     union map_info *map_context)$

CHECK:SPACING: No space is necessary after a cast
#669: FILE: drivers/md/dm-crypt.c:625:
+	struct crypt_config *cc = (struct crypt_config *) ti->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#692: FILE: drivers/md/dm-crypt.c:648:
+		if (bio_rw(bio) == WRITE) {
[...]
+		} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: drivers/md/dm-crypt.c:650:
+^I^I^I                           io->first_clone,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: drivers/md/dm-crypt.c:651:
+^I^I^I                           &bio_vec_idx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: drivers/md/dm-crypt.c:657:
+^I^I^I^I^I                        clone->bi_size);$

CHECK:BRACES: Unbalanced braces around else statement
#706: FILE: drivers/md/dm-crypt.c:662:
+		} else

CHECK:SPACING: No space is necessary after a cast
#755: FILE: drivers/md/dm-crypt.c:711:
+	struct crypt_config *cc = (struct crypt_config *) ti->private;

ERROR:SPACING: space required before the open parenthesis '('
#769: FILE: drivers/md/dm-crypt.c:725:
+		switch(cc->tfm->crt_u.cipher.cit_mode) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: drivers/md/dm-crypt.c:733:
+			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: drivers/md/dm-crypt.c:753:
+^I^I         " %s " SECTOR_FORMAT, cc->iv_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: drivers/md/dm-crypt.c:754:
+^I^I         buffer, cc->start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: drivers/md/dm-crypt.c:774:
+^I                                   sizeof(struct crypt_io),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: drivers/md/dm-crypt.c:775:
+^I                                   0, 0, NULL, NULL);$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#867: FILE: drivers/md/Kconfig:173:
+config DM_CRYPT
+	tristate "Crypt target support"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	select CRYPTO
+	---help---
+	  This device-mapper target allows you to create a device that
+	  transparently encrypts the data on it. You'll need to activate
+	  the required ciphers in the cryptoapi configuration in order to
+	  be able to use it.
+
+	  If unsure, say N.
+
 endmenu
 

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303776.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 15 warnings, 18 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303776.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
