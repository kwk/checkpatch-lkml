WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -u linux-2.6.5-numa/include/linux/swap.h-o linux-2.6.5-numa/include/linux/swap.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#42: FILE: include/linux/swap.h:155:
+extern void swapin_readahead(swp_entry_t, unsigned long, struct vm_area_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#42: FILE: include/linux/swap.h:155:
+extern void swapin_readahead(swp_entry_t, unsigned long, struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#42: FILE: include/linux/swap.h:155:
+extern void swapin_readahead(swp_entry_t, unsigned long, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#42: FILE: include/linux/swap.h:155:
+extern void swapin_readahead(swp_entry_t, unsigned long, struct vm_area_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: include/linux/swap.h:219:
+extern struct page * read_swap_cache_async(swp_entry_t, struct vm_area_struct *vma, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: include/linux/swap.h:219:
+extern struct page * read_swap_cache_async(swp_entry_t, struct vm_area_struct *vma, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/linux/swap.h:219:
+extern struct page * read_swap_cache_async(swp_entry_t, struct vm_area_struct *vma, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#51: FILE: include/linux/swap.h:219:
+extern struct page * read_swap_cache_async(swp_entry_t, struct vm_area_struct *vma, 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: include/linux/swap.h:261:
+#define read_swap_cache_async(swp,vma,addr)	NULL
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: include/linux/swap.h:261:
+#define read_swap_cache_async(swp,vma,addr)	NULL
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: mm/memory.c:1059:
+	new_page = alloc_page_vma(GFP_HIGHUSER,vma,address);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: mm/memory.c:1059:
+	new_page = alloc_page_vma(GFP_HIGHUSER,vma,address);
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: mm/memory.c:1213:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: mm/memory.c:1216:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: mm/memory.c:1219:
+void swapin_readahead(swp_entry_t entry, unsigned long addr,struct vm_area_struct *vma) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: mm/memory.c:1219:
+void swapin_readahead(swp_entry_t entry, unsigned long addr,struct vm_area_struct *vma) 
                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: mm/memory.c:1235:
+^I^I^I^I^I^I^I   offset), vma, addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: mm/memory.c:1240:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: mm/memory.c:1244:
+^I^Iif (addr == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: mm/memory.c:1246:
+^I^Iif (vma) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: mm/memory.c:1247:
+^I^I^Iif (addr >= vma->vm_end) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: mm/memory.c:1251:
+^I^I^Iif (vma && addr < vma->vm_start) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: mm/memory.c:1252:
+^I^I^I^Ivma = NULL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: mm/memory.c:1253:
+^I^I} else { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: mm/memory.c:1254:
+^I^I^Iif (next_vma && addr >= next_vma->vm_start) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: mm/memory.c:1258:
+^I^I} $

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: mm/memory.c:1282:
+ ^I^Iswapin_readahead(entry, address, vma);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: mm/memory.c:1282:
+ ^I^Iswapin_readahead(entry, address, vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: mm/memory.c:1282:
+ ^I^Iswapin_readahead(entry, address, vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: mm/memory.c:1283:
+ ^I^Ipage = read_swap_cache_async(entry, vma, address);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: mm/memory.c:1283:
+ ^I^Ipage = read_swap_cache_async(entry, vma, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: mm/memory.c:1283:
+ ^I^Ipage = read_swap_cache_async(entry, vma, address);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: mm/memory.c:1388:
+		page = alloc_page_vma(GFP_HIGHUSER,vma,addr);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: mm/memory.c:1388:
+		page = alloc_page_vma(GFP_HIGHUSER,vma,addr);
 		                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: mm/memory.c:1480:
+		struct page * page = alloc_page_vma(GFP_HIGHUSER,vma,address);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: mm/memory.c:1480:
+		struct page * page = alloc_page_vma(GFP_HIGHUSER,vma,address);
 		                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: mm/memory.c:1480:
+		struct page * page = alloc_page_vma(GFP_HIGHUSER,vma,address);
 		                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: mm/swap_state.c:334:
+struct page * $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 9 warnings, 2 checks, 134 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
