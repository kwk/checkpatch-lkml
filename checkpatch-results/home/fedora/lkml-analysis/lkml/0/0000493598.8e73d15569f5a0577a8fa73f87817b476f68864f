WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
diff -Naur linux-2.5.0/arch/alpha/kernel/smp.c linux-2.5.0-mq/arch/alpha/kernel/smp.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: arch/s390/kernel/smp.c:534:
+        del_from_runqueue(idle);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: arch/s390/kernel/smp.c:534:
+        del_from_runqueue(idle);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/s390x/kernel/smp.c:513:
+        del_from_runqueue(idle);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/s390x/kernel/smp.c:513:
+        del_from_runqueue(idle);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: include/linux/sched.h:135:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#333: FILE: include/linux/sched.h:471:
+    cpus_allowed:	ALL_CPUS_ALLOWED,				\
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#333: FILE: include/linux/sched.h:471:
+    cpus_allowed:	ALL_CPUS_ALLOWED,				\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->run_list.next"
#344: FILE: include/linux/sched.h:872:
+	return (p->run_list.next != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#349: FILE: include/linux/sched.h:877:
+ * ^IOne runqueue per CPU in the system.  Size should be a multiple$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#353: FILE: include/linux/sched.h:881:
+typedef union runqueue_data {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: include/linux/sched.h:889:
+		struct task_struct * max_na_ptr; /* pointer to task which */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#375: FILE: include/linux/sched.h:903:
+	char __pad [SMP_CACHE_BYTES];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#392: FILE: include/linux/sched.h:920:
+#define INIT_RUNQUEUE_DATA_SMP(n) {				\
+	max_na_goodness((n)) = MIN_GOODNESS;		\
+	max_na_ptr((n)) = NULL;					\
+	/* max_na_cpus_allowed need not be initialized */	\
+	running_non_idle((n)) = 0;				\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: include/linux/sched.h:927:
+#define INIT_RUNQUEUE_DATA_SMP(n) ^Ido {} while (0) /* NOOP */$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#401: FILE: include/linux/sched.h:929:
+#define INIT_RUNQUEUE_DATA(n) {					\
+	nt_running((n)) = 0;					\
+	INIT_LIST_HEAD(&runqueue((n)));				\
+	runqueue_lock((n)) = SPIN_LOCK_UNLOCKED;		\
+	INIT_RUNQUEUE_DATA_SMP((n));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#407: FILE: include/linux/sched.h:935:
+}
+#define N_RUNQUEUES		NR_CPUS

WARNING:NEW_TYPEDEFS: do not add new typedefs
#420: FILE: include/linux/sched.h:948:
+typedef union aligned_data {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: include/linux/sched.h:950:
+		struct task_struct * curr;	/* current task on this CPU */

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#430: FILE: include/linux/sched.h:958:
+	char __pad [SMP_CACHE_BYTES];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: include/linux/sched.h:972:
+#define INIT_ALIGNED_DATA_SMP(n) ^Ido {} while (0) /* NOOP */$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#446: FILE: include/linux/sched.h:974:
+#define INIT_ALIGNED_DATA(n) {				\
+	cpu_curr((n)) = &init_task;			\
+	last_schedule((n)) = 0;				\
+	INIT_ALIGNED_DATA_SMP((n));			\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#463: FILE: include/linux/sched.h:991:
+}
+#define TASK_RQ(t)	runqueue(task_to_runqueue((t)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#472: FILE: include/linux/sched.h:1000:
+	int tot=nt_running(cpu_logical_map(0));
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#474: FILE: include/linux/sched.h:1002:
+	for(i=1; i<smp_num_cpus; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#474: FILE: include/linux/sched.h:1002:
+	for(i=1; i<smp_num_cpus; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#474: FILE: include/linux/sched.h:1002:
+	for(i=1; i<smp_num_cpus; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#474: FILE: include/linux/sched.h:1002:
+	for(i=1; i<smp_num_cpus; i++) {
+		tot += nt_running(cpu_logical_map(i));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#490: FILE: include/linux/sched.h:1018:
+static inline int base_goodness(struct task_struct * t)

WARNING:TYPO_SPELLING: 'nuber' may be misspelled - perhaps 'number'?
#499: FILE: include/linux/sched.h:1027:
+	 * base_goodness is based on the nuber of ticks left.
 	                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: include/linux/sched.h:1034:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: include/linux/sched.h:1048:
+static inline int na_goodness(struct task_struct * t)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#525: FILE: include/linux/sched.h:1053:
+	if ((t->policy & ~SCHED_YIELD) == SCHED_OTHER) {
+		return (base_goodness(t));
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#526: FILE: include/linux/sched.h:1054:
+		return (base_goodness(t));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: include/linux/sched.h:1068:
+static inline int local_goodness(struct task_struct * t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: include/linux/sched.h:1069:
+static inline int local_goodness(struct task_struct * t,
+						struct mm_struct *this_mm)

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: include/linux/sched.h:1074:
+        if ((t->policy & ~SCHED_YIELD) == SCHED_OTHER) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: include/linux/sched.h:1074:
+        if ((t->policy & ~SCHED_YIELD) == SCHED_OTHER) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#550: FILE: include/linux/sched.h:1077:
+		if (weight > 0) {
+			weight += MM_GOODNESS(t, this_mm);
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#555: FILE: include/linux/sched.h:1082:
+		return (RT_GOODNESS(t));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#572: FILE: include/linux/sched.h:1099:
+static inline int goodness(struct task_struct * t, int this_cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/linux/sched.h:1100:
+static inline int goodness(struct task_struct * t, int this_cpu,
+						struct mm_struct *this_mm)

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: include/linux/sched.h:1107:
+		int weight = base_goodness(t);
+		if (weight > 0) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#599: FILE: include/linux/sched.h:1126:
+static inline void add_to_runqueue_common(struct task_struct * p, int upd)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk_na_goodness > max_na_goodness(rq)'
#605: FILE: include/linux/sched.h:1132:
+	if (upd &&
+	    !task_has_cpu(p) && (tsk_na_goodness > max_na_goodness(rq))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#615: FILE: include/linux/sched.h:1142:
+}
+static inline void add_to_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#615: FILE: include/linux/sched.h:1142:
+static inline void add_to_runqueue(struct task_struct * p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#619: FILE: include/linux/sched.h:1146:
+}
+static inline void add_to_runqueue_noupd(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: include/linux/sched.h:1146:
+static inline void add_to_runqueue_noupd(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: include/linux/sched.h:1155:
+static inline void del_from_runqueue_common(struct task_struct * p, int upd)

WARNING:TYPO_SPELLING: 'valies' may be misspelled - perhaps 'values'?
#641: FILE: include/linux/sched.h:1168:
+			 * If we want to update max_na_* valies for the
 			                                 ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: include/linux/sched.h:1179:
+				t = list_entry(tmp, struct task_struct,
+								run_list);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#679: FILE: include/linux/sched.h:1206:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: include/linux/sched.h:1211:
+static inline void del_from_runqueue(struct task_struct * p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#688: FILE: include/linux/sched.h:1215:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#692: FILE: include/linux/sched.h:1219:
+static inline void del_from_runqueue_update(struct task_struct * p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#706: FILE: include/linux/sched.h:1231:
 }
+static inline void unlock_rq(int rq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#715: FILE: include/linux/sched.h:1240:
+}
+static inline void unlock_rq_irq(int rq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#724: FILE: include/linux/sched.h:1249:
+}
+static inline void unlock_rq_irqrestore(int rq, unsigned long flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#744: FILE: include/linux/sched.h:1269:
+}
+static inline void unlock_task_rq(struct task_struct *t)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#753: FILE: include/linux/sched.h:1278:
+}
+static inline void unlock_task_rq_irq(struct task_struct *t)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#774: FILE: include/linux/sched.h:1299:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: include/linux/sched.h:1301:
+static inline void lock_task_rq_irqsave_verify(struct task_struct *t,
+						unsigned long *flags)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#850: FILE: kernel/sched.c:96:
+runqueue_data_t runqueue_data [N_RUNQUEUES] __cacheline_aligned;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#851: FILE: kernel/sched.c:97:
+aligned_data_t aligned_data [N_ALIGNED_DATA] __cacheline_aligned;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tcpu' may be better as '(tcpu)' to avoid precedence issues
#859: FILE: kernel/sched.c:107:
+#define this_cpu_allowed(ca, tcpu) ((ca) & (1 << tcpu))

WARNING:REPEATED_WORD: Possible repeated word: 'should'
#944: FILE: kernel/sched.c:129:
+ * reschedule_idle - Determine which CPU the specified task should
+ * should run on.  The runqueue lock must be held upon entry to this

WARNING:BRACES: braces {} are not necessary for single statement blocks
#971: FILE: kernel/sched.c:152:
+		if (!task_on_runqueue(p)) {
+			add_to_runqueue(p);
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk_cpu != this_cpu'
#977: FILE: kernel/sched.c:158:
+		if ((tsk_cpu != this_cpu) && !need_resched) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#977: FILE: kernel/sched.c:158:
+		if ((tsk_cpu != this_cpu) && !need_resched) {
+			smp_send_reschedule(tsk_cpu);
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1025: FILE: kernel/sched.c:189:
+			if (tmp_cycles > INT_MAX) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1035: FILE: kernel/sched.c:199:
+			if (cpu != tsk_cpu) {
+				stack_list[cpu] += PROC_CHANGE_PENALTY;
+			}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1063: FILE: kernel/sched.c:218:
+		if (target_cpu == tsk_cpu &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1075: FILE: kernel/sched.c:230:
+			if (!task_on_runqueue(p)) {
+				add_to_runqueue(p);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1080: FILE: kernel/sched.c:235:
+			if (target_cpu != this_cpu) {
+				smp_send_reschedule(target_cpu);
+			}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk == idle_task(target_cpu)'
#1107: FILE: kernel/sched.c:246:
+			if ((tsk == idle_task(target_cpu)) ||
+			     (preemption_goodness(tsk, p, target_cpu) > 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: kernel/sched.c:247:
+			if ((tsk == idle_task(target_cpu)) ||
+			     (preemption_goodness(tsk, p, target_cpu) > 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1114: FILE: kernel/sched.c:253:
+				if (task_on_runqueue(p)) {
+					del_from_runqueue_update(p);
+				}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'target_cpu != this_cpu'
#1130: FILE: kernel/sched.c:266:
+				if ((target_cpu != this_cpu) &&
+				    ((tsk != idle_task(target_cpu)) ||
+				      !need_resched)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk != idle_task(target_cpu)'
#1130: FILE: kernel/sched.c:266:
+				if ((target_cpu != this_cpu) &&
+				    ((tsk != idle_task(target_cpu)) ||
+				      !need_resched)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1178: FILE: kernel/sched.c:305:
+	if (!task_on_runqueue(p)) {
+		add_to_runqueue(p);
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1190: FILE: kernel/sched.c:315:
+	if (preemption_goodness(tsk, p, this_cpu) > 0) {
 		tsk->need_resched = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1193: FILE: kernel/sched.c:318:
+	if (!task_on_runqueue(p)) {
+		add_to_runqueue(p);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: kernel/sched.c:547:
+static struct task_struct *examine_rmt_rqs(int this_cpu, int *cg,
+					struct task_struct *next)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1343: FILE: kernel/sched.c:596:
+^I^I^Iif (max_na_goodness(rrq) > *cg && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1345: FILE: kernel/sched.c:598:
+			    this_cpu_allowed(max_na_cpus_allowed(rrq),
+								this_cpu)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1351: FILE: kernel/sched.c:604:
+^I^I^I^Iif (!task_has_cpu(next) && $

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1359: FILE: kernel/sched.c:612:
+				next = max_na_ptr(rrq);;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next == idle_task(this_cpu)'
#1401: FILE: kernel/sched.c:654:
+	if ((next == idle_task(this_cpu)) && premature_idle) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1422: FILE: kernel/sched.c:675:
+static struct task_struct *scan_runqueue(int this_cpu, int *cg,
+						struct task_struct *prev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1439: FILE: kernel/sched.c:692:
+			int weight = local_goodness(p, prev->active_mm);
+			if (weight > *cg) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1474: FILE: kernel/sched.c:727:
+	if (*cg > 0) {
+		*cg += PROC_CHANGE_PENALTY;
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1496: FILE: kernel/sched.c:749:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1503: FILE: kernel/sched.c:756:
+static inline struct task_struct *scan_runqueue(int this_cpu, int *cg,
+					struct task_struct *prev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1612: FILE: kernel/sched.c:871:
+        if (unlikely(!(prev->cpus_allowed & (1UL << this_cpu)))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1612: FILE: kernel/sched.c:871:
+        if (unlikely(!(prev->cpus_allowed & (1UL << this_cpu)))) {$

WARNING:TYPO_SPELLING: 'procesor' may be misspelled - perhaps 'processor'?
#1615: FILE: kernel/sched.c:874:
+		 * delete it from THIS runqueue, and set the procesor
 		                                             ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1628: FILE: kernel/sched.c:887:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: kernel/sched.c:887:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1639: FILE: kernel/sched.c:905:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1639: FILE: kernel/sched.c:905:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1639: FILE: kernel/sched.c:905:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#1704: FILE: kernel/sched.c:1299:
+	// Substract non-idle processes running on other CPUs.
 	   ^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1786: FILE: kernel/timer.c:591:
+		if (curr_na_goodness(cpu) != MIN_GOODNESS) {
+			curr_na_goodness(cpu) = na_goodness(p);
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493598.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 37 warnings, 34 checks, 1642 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493598.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
