WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#36: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5413:
+ * implemention of the ioctl to get the stats values from the driver
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#43: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5420:
+	if ((ret = copy_to_user(ustats, &ipath_stats, sizeof(ipath_stats)))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#66: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5443:
+	uint16_t lkey = key & 0x7FFF;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#126: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5503:
+				return 0;
+			} else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#153: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5530:
+			uint64_t pkey;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#157: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5534:
+			pd->port_pkeys[pidx] = dd->ipath_pkeys[i] = key;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#159: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5536:
+			    (uint64_t) dd->ipath_pkeys[0] |

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#160: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5537:
+			    ((uint64_t) dd->ipath_pkeys[1] << 16) |

CHECK:SPACING: No space is necessary after a cast
#161: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5538:
+			    ((uint64_t) dd->ipath_pkeys[2] << 32) |

CHECK:SPACING: No space is necessary after a cast
#162: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5539:
+			    ((uint64_t) dd->ipath_pkeys[3] << 48);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5560:
+static int ipath_manage_rcvq(struct ipath_portdata * pd, uint16_t start_stop)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#190: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5567:
+	volatile uint64_t tval;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#190: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5567:
+	volatile uint64_t tval;

CHECK:BRACES: Unbalanced braces around else statement
#213: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5590:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5622:
+static int ipath_create_user_egr(struct ipath_portdata * pd)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#249: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5626:
+	uint64_t __iomem *egrbase;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#250: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5627:
+	uint64_t egroff, lenvalid;

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#251: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5628:
+	unsigned e, egrcnt, alloced, order, egrperchunk, chunk;
 	                    ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5628:
+	unsigned e, egrcnt, alloced, order, egrperchunk, chunk;

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#276: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5653:
+	alloced = ALIGN(dd->ipath_rcvegrbufsize * egrcnt,
 	^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#303: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5680:
+		if (!

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5721:
+		struct page *p;
+		p = pd->port_rcvegrbuf_pages[chunk];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#371: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5748:
+		yield();	/* don't hog the cpu */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5765:
+static int ipath_create_port0_egr(struct ipath_portdata * pd)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#391: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5768:
+	uint64_t __iomem *egrbase;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#392: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5769:
+	uint64_t egroff;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#393: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5770:
+	unsigned e, egrcnt;

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5778:
+	egrbase = (uint64_t __iomem *) ((char __iomem *)(dd->ipath_kregbase) +

CHECK:BRACES: braces {} should be used on all arms of this statement
#408: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5785:
+	if (skbs == NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skbs"
#408: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5785:
+	if (skbs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#410: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5787:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skbs[e]"
#423: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5800:
+			if (skbs[e] == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#447: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5824:
+		uint64_t lenvalid;	/* in words */

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#469: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5846:
+		yield();	/* don't hog the cpu */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#479: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5856:
+static int ipath_create_rcvhdrq(struct ipath_portdata * pd)

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#486: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5863:
+	amt = ALIGN(devdata[pd->port_unit].ipath_rcvhdrcnt * devdata[pd->port_unit].ipath_rcvhdrentsize * sizeof(uint32_t), PAGE_SIZE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#492: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5869:
+		 * "forever".  There isn't an inbetween, unfortunately.
 		                              ^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#573: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5950:
+	uint16_t reg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5951:
+	uint16_t reg;
+	_IPATH_DBG("%s\n", what);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#576: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5953:
+		uint64_t v = ipath_kget_kreg64(t, reg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#577: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5954:
+		uint64_t v = ipath_kget_kreg64(t, reg);
+		if (!(reg % 4))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#578: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5955:
+			printk("\n%3x: ", reg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5956:
+		printk("%16llx  ", v);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#581: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5958:
+	printk("\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#593: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5970:
+	uint32_t val32, kpiobufs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#594: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5971:
+	uint64_t val, atmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#595: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5972:
+	uint32_t __iomem *piobuf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#596: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5973:
+	uint32_t pioincr;

WARNING:SIZEOF_PARENTHESIS: sizeof ipath_core_version should be sizeof(ipath_core_version)
#606: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:5983:
+		chip_driver_size = sizeof ipath_core_version - i;

CHECK:BRACES: braces {} should be used on all arms of this statement
#654: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6031:
+	if (!infinipath_cfgports)
[...]
+	else if (infinipath_cfgports <= dd->ipath_portcnt) {
[...]
+	} else {
[...]

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#676: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6053:
+	dd->ipath_lastegrheads = kmalloc(sizeof(*dd->ipath_lastegrheads)
+					 * dd->ipath_cfgports, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#678: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6055:
+	dd->ipath_lastrcvhdrqtails = kmalloc(sizeof(*dd->ipath_lastrcvhdrqtails)
+					     * dd->ipath_cfgports, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dd->ipath_pd[0])...) over kmalloc(sizeof(struct ipath_portdata)...)
#692: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6069:
+	dd->ipath_pd[0] = kmalloc(sizeof(struct ipath_portdata), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#717: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6094:
+	dd->ipath_piobase = (((char __iomem *) dd->ipath_kregbase) +

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#725: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6102:
+	if (((dd->ipath_revision >> INFINIPATH_R_SOFTWARE_SHIFT) & INFINIPATH_R_SOFTWARE_MASK) != IPATH_CHIP_SWVERSION) {	/* >= maybe, someday */

WARNING:TYPO_SPELLING: 'failng' may be misspelled - perhaps 'failing'?
#727: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6104:
+				  "Driver only handles version %d, chip swversion is %d (%llx), failng\n",
 				                                                                ^^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_revision'
#730: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6107:
+				  (int)(dd->
+					ipath_revision >>

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#734: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6111:
+		ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#737: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6114:
+	dd->ipath_majrev = (uint8_t) ((dd->ipath_revision >>

CHECK:SPACING: No space is necessary after a cast
#741: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6118:
+	    (uint8_t) ((dd->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_revision'
#742: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6119:
+	    (uint8_t) ((dd->
+			ipath_revision >> INFINIPATH_R_CHIPREVMINOR_SHIFT) &

CHECK:SPACING: No space is necessary after a cast
#745: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6122:
+	    (uint8_t) ((dd->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_revision'
#746: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6123:
+	    (uint8_t) ((dd->
+			ipath_revision >> INFINIPATH_R_BOARDID_SHIFT) &

WARNING:SIZEOF_PARENTHESIS: sizeof boardn should be sizeof(boardn)
#749: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6126:
+	ipath_get_boardname(t, boardn, sizeof boardn);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6132:
+			 (unsigned)(dd->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_revision'
#756: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6133:
+			 (unsigned)(dd->
+				    ipath_revision >> INFINIPATH_R_ARCH_SHIFT) &

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6136:
+			 (unsigned)(dd->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_revision'
#760: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6137:
+			 (unsigned)(dd->
+				    ipath_revision >>

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#764: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6141:
+
+	}

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#836: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6213:
+	dd->ipath_pioavregs = ALIGN(val, sizeof(uint64_t) * BITS_PER_BYTE / 2) / (sizeof(uint64_t) * BITS_PER_BYTE / 2);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#843: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6220:
+		dd->ipath_piobcnt = dd->ipath_pioavregs * sizeof(uint64_t) * BITS_PER_BYTE >> 1;	/* 2 bits/reg */

CHECK:BRACES: braces {} should be used on all arms of this statement
#849: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6226:
+	if (!infinipath_kpiobufs) {
[...]
+	} else if (dd->ipath_piobcnt <
[...]
+	} else
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#851: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6228:
+		kpiobufs = infinipath_kpiobufs = 1;

CHECK:BRACES: Unbalanced braces around else statement
#859: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6236:
+	} else

WARNING:LONG_LINE_STRING: line length of 112 exceeds 100 columns
#870: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6247:
+		    ("Allocating %d PIO bufs for kernel leaves too few for %d user ports (%d each); using %u\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#907: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6284:
+	if (!(dd->ipath_pioavailregs_dma = kmalloc(val * sizeof(uint64_t),

CHECK:SPACING: No space is necessary after a cast
#914: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6291:
+	if ((PAGE_SIZE - 1) & (uint64_t) dd->ipath_pioavailregs_dma) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#914: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6291:
+	if ((PAGE_SIZE - 1) & (uint64_t) dd->ipath_pioavailregs_dma) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#917: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6294:
+		    ALIGN((uint64_t) dd->ipath_pioavailregs_dma, PAGE_SIZE);

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6295:
+	} else

CHECK:SPACING: No space is necessary after a cast
#930: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6307:
+	dd->ipath_statusp = (uint64_t *) ((char *)dd->ipath_pioavailregs_dma +

CHECK:SPACING: No space is necessary after a cast
#1022: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6399:
+	piobuf = (uint32_t __iomem *) (((char __iomem *)(dd->ipath_kregbase)) +

WARNING:TYPO_SPELLING: 'interrups' may be misspelled - perhaps 'interrupts'?
#1055: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6432:
+	/* clear any interrups up to this point (ints still not enabled) */
 	             ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'make'
#1062: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6439:
+	 * previous entries. It make make more sense to move the pageshadow

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1078: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6455:
+	if (!(ret = ipath_create_rcvhdrq(dd->ipath_pd[0])))

CHECK:BRACES: Unbalanced braces around else statement
#1083: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6460:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1139: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6516:
+			} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1191: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6568:
+			   uint64_t bits_to_wait_for, uint64_t * valp)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1191: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6568:
+			   uint64_t bits_to_wait_for, uint64_t * valp)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1193: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6570:
+	uint64_t timeout, lastval, val;

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1206: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6583:
+		yield();

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENODEV)
#1211: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6588:
+			return ENODEV;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1222: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6599:
+	uint64_t timeout;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1223: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6600:
+	uint64_t val;

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1230: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6607:
+		yield();

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENODEV)
#1233: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6610:
+			return ENODEV;

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#1247: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6624:
+	 * other than explictly than explictly changing linkinitcmd,
 	              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#1247: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6624:
+	 * other than explictly than explictly changing linkinitcmd,
 	                             ^^^^^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dd->ipath_flags'
#1270: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6647:
+		    (dd->
+		     ipath_flags & (IPATH_LINKINIT | IPATH_LINKARMED |

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1283: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6660:
+	} else if (which & (INFINIPATH_IBCC_LINKINITCMD_MASK << INFINIPATH_IBCC_LINKINITCMD_SHIFT)) {	/* down, disable, etc. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1285: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6662:
+		if (((which & INFINIPATH_IBCC_LINKINITCMD_MASK) >>
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1289: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6666:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6678:
+	dd->ipath_ibcctrl |= ((uint64_t) which & INFINIPATH_IBCC_LINKCMD_MASK)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1305: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6682:
+	_IPATH_SMADBG("Trying to move unit %u to %s, current ltstate is %s\n",
+			t, what, ipath_ibcstatus_str[(ipath_kget_kreg64(t, kr_ibcstatus)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1314: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6691:
+	uint64_t val, ibc;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1363: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6740:
+	if (ret)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1365: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6742:
+	else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1392: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6769:
+	uint64_t val;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1462: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6839:
+void ipath_free_pddata(struct ipath_devdata * dd, uint32_t port, int freehdrq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1479: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6856:
+		int i, n = 1 << pd->port_rcvhdrq_order;
+		_IPATH_VDBG("free closed port %d rcvhdrq @ %p (order=%u)\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1491: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6868:
+		unsigned e, i, n = 1 << pd->port_rcvegrbuf_order;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1492: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6869:
+		unsigned e, i, n = 1 << pd->port_rcvegrbuf_order;
+		if (pd->port_rcvegrbuf_virt) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1516: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6893:
+		unsigned e;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around infinipath_driver.driver
#1559: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6936:
+	driver_create_file(&(infinipath_driver.driver), &driver_attr_version);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1561: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6938:
+	if ((r = register_chrdev(ipath_major, MODNAME, &ipath_fops)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1564: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6941:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around infinipath_driver.driver
#1581: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6958:
+	driver_remove_file(&(infinipath_driver.driver), &driver_attr_version);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1582: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6959:
+	if ((r = unregister_chrdev(ipath_major, MODNAME)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1585: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6962:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1593: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6970:
+		uint64_t val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1595: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:6972:
+		struct ipath_devdata *dd = &devdata[m];
+		if (dd->ipath_kregbase) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1652: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7029:
+						if (tmpp[i]) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7031:
+							ipath_putpages(1,
+								      &tmpp[i]);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1667: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7044:
+				if (ipath_stats.sps_pagelocks
+				    || ipath_stats.sps_pageunlocks)

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#1669: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7046:
+					    ("%llu pages locked, %llu unlocked via ipath_m{un}lock\n",

CHECK:BRACES: Unbalanced braces around else statement
#1699: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7076:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#1710: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7087:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1728: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7105:
+ * multiple chip types.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1737: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7114:
+EXPORT_SYMBOL(infinipath_debug);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1738: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:7115:
+EXPORT_SYMBOL(ipath_get_boardname);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 55 warnings, 64 checks, 1709 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
