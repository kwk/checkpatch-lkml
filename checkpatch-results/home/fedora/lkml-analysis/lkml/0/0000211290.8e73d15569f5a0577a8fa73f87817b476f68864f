WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#53: 
This does not implement SMB Alert, which should improve the performace 
                                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
--- linux-2.6.11-rc2.orig/drivers/i2c/i2c-core.c	2005-01-26 15:59:53.000000000 -0600

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: drivers/i2c/i2c-core.c:36:
+static int i2c_stop_timer(struct i2c_adapter * adap);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: drivers/i2c/i2c-core.c:37:
+static void i2c_start_timer(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: drivers/i2c/i2c-core.c:38:
+			    struct i2c_op_q_entry * entry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: drivers/i2c/i2c-core.c:155:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: drivers/i2c/i2c-core.c:620:
+static void i2c_start_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: drivers/i2c/i2c-core.c:621:
+			    struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: drivers/i2c/i2c-core.c:641:
+static void i2c_entry_inc(struct i2c_adapter * adapter,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: drivers/i2c/i2c-core.c:642:
+			  struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#188: FILE: drivers/i2c/i2c-core.c:648:
+/* Get the first entry off the head of the queue and lock it there.
+   The entry is guaranteed to remain first in the list and the handler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: drivers/i2c/i2c-core.c:649:
+   not be called until i2c_entry_put() is called. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: drivers/i2c/i2c-core.c:650:
+static struct i2c_op_q_entry *_i2c_entry_get(struct i2c_adapter * adap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: drivers/i2c/i2c-core.c:652:
+	struct i2c_op_q_entry * entry = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: drivers/i2c/i2c-core.c:655:
+		struct list_head * link = adap->q.next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: drivers/i2c/i2c-core.c:656:
+		struct list_head * link = adap->q.next;
+		entry = list_entry(link, struct i2c_op_q_entry, link);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_i2c_entry_get', this function's name, in a string
#204: FILE: drivers/i2c/i2c-core.c:662:
+	pr_debug("_i2c_entry_get %p %p\n", adap, entry);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: drivers/i2c/i2c-core.c:666:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: drivers/i2c/i2c-core.c:669:
+	struct i2c_op_q_entry * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: drivers/i2c/i2c-core.c:677:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: drivers/i2c/i2c-core.c:678:
+		   struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: drivers/i2c/i2c-core.c:681:
+	struct i2c_op_q_entry * new_entry = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: drivers/i2c/i2c-core.c:695:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: drivers/i2c/i2c-core.c:709:
+static void i2c_start_timer(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: drivers/i2c/i2c-core.c:710:
+			    struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#263: FILE: drivers/i2c/i2c-core.c:721:
+	/* This won't be polled from the user code, so
+	   start a timer to poll it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#263: FILE: drivers/i2c/i2c-core.c:721:
+	   start a timer to poll it. */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#265: FILE: drivers/i2c/i2c-core.c:723:
+	if (! t->running) {
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#267: FILE: drivers/i2c/i2c-core.c:725:
+		t->timer.data = (unsigned long) adap;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#278: FILE: drivers/i2c/i2c-core.c:736:
+/* Returns true if the timer is stopped (or was not running), false if
+   not.  Must be called with the timer lock held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#278: FILE: drivers/i2c/i2c-core.c:736:
+   not.  Must be called with the timer lock held. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: drivers/i2c/i2c-core.c:737:
+static int i2c_stop_timer(struct i2c_adapter * adap)

CHECK:SPACING: No space is necessary after a cast
#286: FILE: drivers/i2c/i2c-core.c:744:
+	struct i2c_timer      * t = (void *) data;

ERROR:POINTER_LOCATION: "foo      * bar" should be "foo      *bar"
#286: FILE: drivers/i2c/i2c-core.c:744:
+	struct i2c_timer      * t = (void *) data;

ERROR:POINTER_LOCATION: "foo    * bar" should be "foo    *bar"
#287: FILE: drivers/i2c/i2c-core.c:745:
+	struct i2c_adapter    * adap;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: drivers/i2c/i2c-core.c:747:
+	struct i2c_op_q_entry * entry;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_handle_timer', this function's name, in a string
#305: FILE: drivers/i2c/i2c-core.c:763:
+	pr_debug("i2c_handle_timer: %p %p\n", adap, entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#317: FILE: drivers/i2c/i2c-core.c:775:
+		/* We raced in timer deletion, just restart the
+		   timer if necessary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#317: FILE: drivers/i2c/i2c-core.c:775:
+		   timer if necessary. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_op_done', this function's name, in a string
#328: FILE: drivers/i2c/i2c-core.c:786:
+	pr_debug("i2c_op_done: %p %p\n", adap, e);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#330: FILE: drivers/i2c/i2c-core.c:788:
+	if (! e->completed) {
 	    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: drivers/i2c/i2c-core.c:797:
+			struct i2c_timer *t = adap->timer;
+			spin_lock_irqsave(&t->lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: drivers/i2c/i2c-core.c:800:
+				/* If we are unable to stop the timer, that
+				   means the timer has gone off but has not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#345: FILE: drivers/i2c/i2c-core.c:803:
+				   can detect this. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: drivers/i2c/i2c-core.c:814:
+static void i2c_wait_complete(struct i2c_op_q_entry * entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: drivers/i2c/i2c-core.c:817:
+	struct completion *done = entry->handler_data;
+	pr_debug("i2c_wait_complete %p\n", entry);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_wait_complete', this function's name, in a string
#359: FILE: drivers/i2c/i2c-core.c:817:
+	pr_debug("i2c_wait_complete %p\n", entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: drivers/i2c/i2c-core.c:821:
+static void i2c_perform_op_wait(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#364: FILE: drivers/i2c/i2c-core.c:822:
+				struct i2c_op_q_entry * entry)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_perform_op_wait', this function's name, in a string
#370: FILE: drivers/i2c/i2c-core.c:828:
+	pr_debug("i2c_perform_op_wait %p %p\n", adap, entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: drivers/i2c/i2c-core.c:847:
+		struct completion start;
+		init_completion(&start);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#398: FILE: drivers/i2c/i2c-core.c:856:
+			/* Operation was interrupted.  There
+			   is a race, we can't use the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: drivers/i2c/i2c-core.c:857:
+			   wait_for_completion return code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: drivers/i2c/i2c-core.c:866:
+	/* Once the operation is started, we will not
+	   interrupt it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: drivers/i2c/i2c-core.c:866:
+	   interrupt it. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: drivers/i2c/i2c-core.c:869:
+		unsigned int timeout = entry->call_again_us;
+		timeout += (USEC_PER_JIFFIE - 1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: drivers/i2c/i2c-core.c:880:
+static int i2c_transfer_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#423: FILE: drivers/i2c/i2c-core.c:881:
+			      struct i2c_op_q_entry * entry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: drivers/i2c/i2c-core.c:890:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: drivers/i2c/i2c-core.c:890:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/i2c/i2c-core.c:890:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#446: FILE: drivers/i2c/i2c-core.c:905:
+int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg msgs[],int num)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: drivers/i2c/i2c-core.c:905:
+int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg msgs[],int num)
                                                                  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#452: FILE: drivers/i2c/i2c-core.c:911:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#453: FILE: drivers/i2c/i2c-core.c:912:
+	    return -ENOMEM;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#497: FILE: drivers/i2c/i2c-core.c:937:
+	if (ret < 0)
+	    return ret;

WARNING:TABSTOP: Statements should start on a tabstop
#498: FILE: drivers/i2c/i2c-core.c:938:
+	    return ret;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#503: FILE: drivers/i2c/i2c-core.c:943:
+	return (ret == 1 )? count : ret;
 	                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#503: FILE: drivers/i2c/i2c-core.c:943:
+	return (ret == 1 )? count : ret;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#536: FILE: drivers/i2c/i2c-core.c:962:
+	if (ret < 0)
+	    return ret;

WARNING:TABSTOP: Statements should start on a tabstop
#537: FILE: drivers/i2c/i2c-core.c:963:
+	    return ret;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#553: FILE: drivers/i2c/i2c-core.c:971:
+	return (ret == 1 )? count : ret;
 	                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#553: FILE: drivers/i2c/i2c-core.c:971:
+	return (ret == 1 )? count : ret;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#588: FILE: drivers/i2c/i2c-core.c:1365:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#589: FILE: drivers/i2c/i2c-core.c:1366:
+static void i2c_smbus_complete_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#590: FILE: drivers/i2c/i2c-core.c:1367:
+				     struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: drivers/i2c/i2c-core.c:1372:
+	if(entry->result >= 0 && entry->swpec &&

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: drivers/i2c/i2c-core.c:1378:
+		if(i2c_smbus_check_pec(entry->smbus.addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: drivers/i2c/i2c-core.c:1387:
+static void i2c_smbus_format_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: drivers/i2c/i2c-core.c:1388:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: drivers/i2c/i2c-core.c:1393:
+	if((entry->smbus.flags & I2C_CLIENT_PEC) &&

ERROR:SPACING: space required before the open parenthesis '('
#619: FILE: drivers/i2c/i2c-core.c:1396:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#619: FILE: drivers/i2c/i2c-core.c:1396:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&
[...]
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)
[...]
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {
[...]
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#622: FILE: drivers/i2c/i2c-core.c:1399:
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: drivers/i2c/i2c-core.c:1401:
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#626: FILE: drivers/i2c/i2c-core.c:1403:
+			unsigned char *data = entry->smbus.data->block;
+			i2c_smbus_add_pec(entry->smbus.addr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: drivers/i2c/i2c-core.c:1405:
+^I^I                          I2C_SMBUS_BLOCK_DATA,$

ERROR:SPACING: space required before the open parenthesis '('
#632: FILE: drivers/i2c/i2c-core.c:1409:
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: drivers/i2c/i2c-core.c:1410:
+^I^I          entry->smbus.size != I2C_SMBUS_QUICK &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: drivers/i2c/i2c-core.c:1411:
+^I^I          entry->smbus.size != I2C_SMBUS_I2C_BLOCK_DATA)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: drivers/i2c/i2c-core.c:1422:
+static void i2c_smbus_emu_complete(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: drivers/i2c/i2c-core.c:1423:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#657: FILE: drivers/i2c/i2c-core.c:1432:
+	switch(entry->smbus.size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: drivers/i2c/i2c-core.c:1439:
+^Icase I2C_SMBUS_WORD_DATA: $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: drivers/i2c/i2c-core.c:1441:
+		entry->smbus.data->word = msgbuf1[0]|(msgbuf1[1] << 8);
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#672: FILE: drivers/i2c/i2c-core.c:1447:
+			entry->smbus.data->block[i+1] = msgbuf1[i];
 			                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#681: FILE: drivers/i2c/i2c-core.c:1456:
+				struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#684: FILE: drivers/i2c/i2c-core.c:1459:
+	/* So we need to generate a series of msgs. In the case of
+	   writing, we need to use only one message; when reading, we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#686: FILE: drivers/i2c/i2c-core.c:1461:
+	   keep the code below somewhat simpler. */

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#689: FILE: drivers/i2c/i2c-core.c:1464:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#689: FILE: drivers/i2c/i2c-core.c:1464:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#705: FILE: drivers/i2c/i2c-core.c:1480:
+	switch(entry->smbus.size) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#711: FILE: drivers/i2c/i2c-core.c:1485:
+				((entry->smbus.read_write==I2C_SMBUS_READ)
 				                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#726: FILE: drivers/i2c/i2c-core.c:1497:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#736: FILE: drivers/i2c/i2c-core.c:1505:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#778: FILE: drivers/i2c/i2c-core.c:1536:
+			if(entry->smbus.size == I2C_SMBUS_BLOCK_DATA_PEC)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#782: FILE: drivers/i2c/i2c-core.c:1539:
+				msgbuf0[i] = entry->smbus.data->block[i-1];
 				                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: drivers/i2c/i2c-core.c:1577:
+/* Simulate a SMBus command using the i2c protocol $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#852: FILE: drivers/i2c/i2c-core.c:1578:
+/* Simulate a SMBus command using the i2c protocol 
+   No checking of parameters is done!  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#852: FILE: drivers/i2c/i2c-core.c:1578:
+   No checking of parameters is done!  */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#853: FILE: drivers/i2c/i2c-core.c:1579:
+static s32 i2c_smbus_xfer_emulated(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#854: FILE: drivers/i2c/i2c-core.c:1580:
+				   struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#867: FILE: drivers/i2c/i2c-core.c:1592:
+s32 i2c_smbus_xfer(struct i2c_adapter * adap, u16 addr, unsigned short flags,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#914: FILE: drivers/i2c/i2c-core.c:1600:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#916: FILE: drivers/i2c/i2c-core.c:1602:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#917: FILE: drivers/i2c/i2c-core.c:1603:
+	    return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "adap->algo->poll"
#953: FILE: drivers/i2c/i2c-core.c:1638:
+	return adap->algo->poll != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: drivers/i2c/i2c-core.c:1646:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: drivers/i2c/i2c-core.c:1646:
+    $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#976: FILE: drivers/i2c/i2c-core.c:1661:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#999: FILE: drivers/i2c/i2c-core.c:1684:
+	if (adap->q.next == &entry->link) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1003: FILE: drivers/i2c/i2c-core.c:1688:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1014: FILE: drivers/i2c/i2c-core.c:1720:
+EXPORT_SYMBOL(i2c_op_done);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1022: FILE: drivers/i2c/i2c-core.c:1741:
+EXPORT_SYMBOL(i2c_non_blocking_capable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1023: FILE: drivers/i2c/i2c-core.c:1742:
+EXPORT_SYMBOL(i2c_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1024: FILE: drivers/i2c/i2c-core.c:1743:
+EXPORT_SYMBOL(i2c_non_blocking_op);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1041: FILE: include/linux/i2c.h:39:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1058: FILE: include/linux/i2c.h:63:
+extern int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msg,int num);
                                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1058: FILE: include/linux/i2c.h:63:
+extern int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msg,int num);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1067: FILE: include/linux/i2c.h:104:
+/* Non-blocking interface.  The user should fill out the public
+   portions of the entry structure.  All data in the entry structure

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1069: FILE: include/linux/i2c.h:106:
+   called with the entry. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: include/linux/i2c.h:109:
+extern int i2c_non_blocking_op(struct i2c_client *client,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1076: FILE: include/linux/i2c.h:113:
+extern int i2c_non_blocking_capable(struct i2c_adapter *adap);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1079: FILE: include/linux/i2c.h:116:
+/* Poll the i2c interface.  This should only be called in a situation
+   where scheduling and interrupts are off.  You should put the amount

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1080: FILE: include/linux/i2c.h:117:
+   of microseconds between calls in us_since_last_call. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1081: FILE: include/linux/i2c.h:118:
+extern void i2c_poll(struct i2c_client *client,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1084: FILE: include/linux/i2c.h:121:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: include/linux/i2c.h:215:
+ * $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1106: FILE: include/linux/i2c.h:222:
+/* Called from an non-blocking interface to get the current working
+   entry.  Returns NULL if there is none.  This is primarily for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1109: FILE: include/linux/i2c.h:225:
+   must call i2c_entry_put() on it. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1110: FILE: include/linux/i2c.h:226:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1111: FILE: include/linux/i2c.h:227:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1112: FILE: include/linux/i2c.h:228:
+		   struct i2c_op_q_entry * entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1115: FILE: include/linux/i2c.h:231:
+/* Called from an non-blocking interface to report that an operation
+   has completed.  Can be called from interrupt context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1115: FILE: include/linux/i2c.h:231:
+   has completed.  Can be called from interrupt context. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: include/linux/i2c.h:248:
+^Iint (*master_xfer)(struct i2c_adapter *adap,struct i2c_msg *msgs, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1136: FILE: include/linux/i2c.h:248:
+	int (*master_xfer)(struct i2c_adapter *adap,struct i2c_msg *msgs, 
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1138: FILE: include/linux/i2c.h:250:
+^Iint (*smbus_xfer)(struct i2c_adapter *adap, u16 addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1140: FILE: include/linux/i2c.h:252:
+			  u8 command, int size, union i2c_smbus_data * data);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1143: FILE: include/linux/i2c.h:255:
+	/* These are like the previous calls, but they will only start
+	   the operation.  The poll call will be called periodically

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1152: FILE: include/linux/i2c.h:264:
+	   should set the result and call i2c_op_done(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1158: FILE: include/linux/i2c.h:270:
+	/* us_since_last_poll is the amount of time since the last
+	   time poll was called. Note that this may be *less* than the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1162: FILE: include/linux/i2c.h:274:
+	   poll.  The value may be zero. */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1178: FILE: include/linux/i2c.h:296:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1196: FILE: include/linux/i2c.h:323:
+	spinlock_t q_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1202: FILE: include/linux/i2c.h:328:
+	/* Used to time non-blocking operations.  The sequence is used
+	   to handle race conditions in the timer handler. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1202: FILE: include/linux/i2c.h:328:
+	   to handle race conditions in the timer handler. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1235: FILE: include/linux/i2c.h:509:
+	/* The result will be set to the result of the operation when
+	   it completes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1235: FILE: include/linux/i2c.h:509:
+	   it completes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1240: FILE: include/linux/i2c.h:514:
+	/* Public interface.  The user should set these up (and the
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1240: FILE: include/linux/i2c.h:514:
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1244: FILE: include/linux/i2c.h:518:
+	/* Handler may be called from interrupt context, so be
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1244: FILE: include/linux/i2c.h:518:
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1249: FILE: include/linux/i2c.h:523:
+	/* Note that this is not a union because an smbus operation
+	   may be converted into an i2c operation (thus both

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1251: FILE: include/linux/i2c.h:525:
+	   by the driver. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1258: FILE: include/linux/i2c.h:532:
+		/* Addr and flags are filled in by the non-blocking
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1258: FILE: include/linux/i2c.h:532:
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1266: FILE: include/linux/i2c.h:540:
+		/* Note that the size is *not* the length of the data.
+		   It is the transaction type, like I2C_SMBUS_QUICK

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1270: FILE: include/linux/i2c.h:544:
+		   and receive. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1277: FILE: include/linux/i2c.h:551:
+	/* For use by the bus interface.  The bus interface sets the
+	   timeout in microseconds until the next poll operation.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1282: FILE: include/linux/i2c.h:556:
+	   yet. */

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#1299: FILE: include/linux/i2c.h:573:
+	/* It's wierd, but we use a usecount to track if an q entry is
 	        ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1300: FILE: include/linux/i2c.h:574:
+	/* It's wierd, but we use a usecount to track if an q entry is
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1300: FILE: include/linux/i2c.h:574:
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1304: FILE: include/linux/i2c.h:578:
+	/* These are here for SMBus emulation over I2C.  I don't like
+	   them taking this much room in the data structure, but they

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1305: FILE: include/linux/i2c.h:579:
+	   need to be available in this case. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1335: FILE: include/linux/i2c.h:614:
+                             I2C_FUNC_SMBUS_WRITE_BYTE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1335: FILE: include/linux/i2c.h:614:
+                             I2C_FUNC_SMBUS_WRITE_BYTE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1337: FILE: include/linux/i2c.h:616:
+                                  I2C_FUNC_SMBUS_WRITE_BYTE_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1337: FILE: include/linux/i2c.h:616:
+                                  I2C_FUNC_SMBUS_WRITE_BYTE_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1339: FILE: include/linux/i2c.h:618:
+                                  I2C_FUNC_SMBUS_WRITE_WORD_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1339: FILE: include/linux/i2c.h:618:
+                                  I2C_FUNC_SMBUS_WRITE_WORD_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1341: FILE: include/linux/i2c.h:620:
+                                   I2C_FUNC_SMBUS_WRITE_BLOCK_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1341: FILE: include/linux/i2c.h:620:
+                                   I2C_FUNC_SMBUS_WRITE_BLOCK_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1343: FILE: include/linux/i2c.h:622:
+                                  I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1343: FILE: include/linux/i2c.h:622:
+                                  I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1345: FILE: include/linux/i2c.h:624:
+                                    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: include/linux/i2c.h:624:
+                                    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1347: FILE: include/linux/i2c.h:626:
+                                       I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1347: FILE: include/linux/i2c.h:626:
+                                       I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1349: FILE: include/linux/i2c.h:628:
+                                       I2C_FUNC_SMBUS_WRITE_WORD_DATA_PEC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: include/linux/i2c.h:628:
+                                       I2C_FUNC_SMBUS_WRITE_WORD_DATA_PEC)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1366: FILE: include/linux/i2c.h:638:
+                             I2C_FUNC_SMBUS_BYTE | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: include/linux/i2c.h:638:
+                             I2C_FUNC_SMBUS_BYTE | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1367: FILE: include/linux/i2c.h:639:
+                             I2C_FUNC_SMBUS_BYTE_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: include/linux/i2c.h:639:
+                             I2C_FUNC_SMBUS_BYTE_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: include/linux/i2c.h:640:
+                             I2C_FUNC_SMBUS_WORD_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: include/linux/i2c.h:640:
+                             I2C_FUNC_SMBUS_WORD_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: include/linux/i2c.h:641:
+                             I2C_FUNC_SMBUS_PROC_CALL | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: include/linux/i2c.h:641:
+                             I2C_FUNC_SMBUS_PROC_CALL | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1370: FILE: include/linux/i2c.h:642:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1370: FILE: include/linux/i2c.h:642:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1371: FILE: include/linux/i2c.h:643:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: include/linux/i2c.h:643:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1372: FILE: include/linux/i2c.h:644:
+                             I2C_FUNC_SMBUS_I2C_BLOCK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: include/linux/i2c.h:644:
+                             I2C_FUNC_SMBUS_I2C_BLOCK)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000211290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 87 errors, 96 warnings, 23 checks, 1264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000211290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
