WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .4756-linux-2.5.75-bk3/include/asm-generic/local.h .4756-linux-2.5.75-bk3.updated/include/asm-generic/local.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/asm-generic/local.h:1:
+#ifndef _ASM_GENERIC_LOCAL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#74: FILE: include/asm-generic/local.h:10:
+ * CPU.  Usually used in combination with per-cpu variables. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#80: FILE: include/asm-generic/local.h:16:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#81: FILE: include/asm-generic/local.h:17:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: include/asm-generic/local.h:24:
+#define local_set(l,i)	atomic_set((&(l)->a),(i))
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: include/asm-generic/local.h:24:
+#define local_set(l,i)	atomic_set((&(l)->a),(i))
                       	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: include/asm-generic/local.h:27:
+#define local_add(i,l)	atomic_add((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: include/asm-generic/local.h:27:
+#define local_add(i,l)	atomic_add((i),(&(l)->a))
                       	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/asm-generic/local.h:28:
+#define local_sub(i,l)	atomic_sub((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/asm-generic/local.h:28:
+#define local_sub(i,l)	atomic_sub((i),(&(l)->a))
                       	              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/asm-generic/local.h:31:
+ * in interrupt, etc.  Some archs can optimize this case well. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#96: FILE: include/asm-generic/local.h:32:
+#define __local_inc(l)		local_set((l), local_read(l) + 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#97: FILE: include/asm-generic/local.h:33:
+#define __local_dec(l)		local_set((l), local_read(l) - 1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: include/asm-generic/local.h:34:
+#define __local_add(i,l)	local_set((l), local_read(l) + (i))
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#98: FILE: include/asm-generic/local.h:34:
+#define __local_add(i,l)	local_set((l), local_read(l) + (i))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-generic/local.h:35:
+#define __local_sub(i,l)	local_set((l), local_read(l) - (i))
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#99: FILE: include/asm-generic/local.h:35:
+#define __local_sub(i,l)	local_set((l), local_read(l) - (i))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: include/asm-generic/local.h:39:
+/* Implement in terms of three variables.
+   Another option would be to use local_irq_save/restore. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: include/asm-generic/local.h:39:
+   Another option would be to use local_irq_save/restore. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#105: FILE: include/asm-generic/local.h:41:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#106: FILE: include/asm-generic/local.h:42:
+typedef struct
+{

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#123: FILE: include/asm-generic/local.h:59:
+	l->v[1] = l->v[2] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: include/asm-generic/local.h:91:
+ * in interrupt, etc.  Some archs can optimize this case well. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: include/asm-generic/local.h:94:
+#define __local_add(i,l)	((l)->v[0] += (i))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: include/asm-generic/local.h:95:
+#define __local_sub(i,l)	((l)->v[0] -= (i))
                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#187: FILE: include/asm-i386/local.h:1:
+#ifndef _ARCH_I386_LOCAL_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#192: FILE: include/asm-i386/local.h:6:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#193: FILE: include/asm-i386/local.h:7:
+typedef struct
+{

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#194: FILE: include/asm-i386/local.h:8:
+	volatile unsigned long counter;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: include/asm-i386/local.h:14:
+#define local_set(v,i)	(((v)->counter) = (i))
                    ^

WARNING:INLINE: plain inline is preferred over __inline__
#202: FILE: include/asm-i386/local.h:16:
+static __inline__ void local_inc(local_t *v)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#204: FILE: include/asm-i386/local.h:18:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#206: FILE: include/asm-i386/local.h:20:
+		:"=m" (v->counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#207: FILE: include/asm-i386/local.h:21:
+		:"m" (v->counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#210: FILE: include/asm-i386/local.h:24:
+static __inline__ void local_dec(local_t *v)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#212: FILE: include/asm-i386/local.h:26:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#214: FILE: include/asm-i386/local.h:28:
+		:"=m" (v->counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#215: FILE: include/asm-i386/local.h:29:
+		:"m" (v->counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#218: FILE: include/asm-i386/local.h:32:
+static __inline__ void local_add(unsigned long i, local_t *v)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#220: FILE: include/asm-i386/local.h:34:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#222: FILE: include/asm-i386/local.h:36:
+		:"=m" (v->counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#223: FILE: include/asm-i386/local.h:37:
+		:"ir" (i), "m" (v->counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#226: FILE: include/asm-i386/local.h:40:
+static __inline__ void local_sub(unsigned long i, local_t *v)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#228: FILE: include/asm-i386/local.h:42:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#230: FILE: include/asm-i386/local.h:44:
+		:"=m" (v->counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#231: FILE: include/asm-i386/local.h:45:
+		:"ir" (i), "m" (v->counter));
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: include/asm-i386/local.h:51:
+#define __local_add(i,l)	local_add((i),(l))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: include/asm-i386/local.h:51:
+#define __local_add(i,l)	local_add((i),(l))
                         	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: include/asm-i386/local.h:52:
+#define __local_sub(i,l)	local_sub((i),(l))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: include/asm-i386/local.h:52:
+#define __local_sub(i,l)	local_sub((i),(l))
                         	             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 16 warnings, 9 checks, 188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
