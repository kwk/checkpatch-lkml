WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -urpN --exclude-from=/home/davej/.exclude bk-linus/arch/i386/kernel/cpu/cpufreq/p4-clockmod.c sched/arch/i386/kernel/cpu/cpufreq/p4-clockmod.c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: include/linux/capability.h:358:
+extern int capable(int cap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#503: FILE: include/linux/wait.h:110:
+extern int FASTCALL(wake_up_state(struct task_struct * tsk, unsigned int state));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/linux/wait.h:110:
+extern int FASTCALL(wake_up_state(struct task_struct * tsk, unsigned int state));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#504: FILE: include/linux/wait.h:111:
+extern int FASTCALL(wake_up_process(struct task_struct * tsk));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#504: FILE: include/linux/wait.h:111:
+extern int FASTCALL(wake_up_process(struct task_struct * tsk));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: include/linux/wait.h:112:
+extern void FASTCALL(wake_up_forked_process(struct task_struct * tsk));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/linux/wait.h:112:
+extern void FASTCALL(wake_up_forked_process(struct task_struct * tsk));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: include/linux/wait.h:114:
+ extern void kick_process(struct task_struct *tsk);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: include/linux/wait.h:114:
+ extern void kick_process(struct task_struct *tsk);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: include/linux/wait.h:115:
+ extern void FASTCALL(wake_up_forked_thread(struct task_struct * tsk));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#508: FILE: include/linux/wait.h:115:
+ extern void FASTCALL(wake_up_forked_thread(struct task_struct * tsk));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/wait.h:115:
+ extern void FASTCALL(wake_up_forked_thread(struct task_struct * tsk));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: include/linux/wait.h:117:
+ static inline void kick_process(struct task_struct *tsk) { }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/linux/wait.h:118:
+ static inline void wake_up_forked_thread(struct task_struct * tsk)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#511: FILE: include/linux/wait.h:118:
+ static inline void wake_up_forked_thread(struct task_struct * tsk)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: include/linux/wait.h:119:
+ {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: include/linux/wait.h:121:
+ }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 6 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
