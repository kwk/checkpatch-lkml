WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#113: FILE: kernel/bc/Makefile:2:
+# kernel/bc/Makefile

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: include/bc/beancounter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#125: FILE: include/bc/beancounter.h:2:
+ * include/bc/beancounter.h

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#162: FILE: include/bc/beancounter.h:39:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: include/bc/beancounter.h:70:
+	int	(*bcr_change)(struct beancounter *bc,
+			unsigned long new_bar, unsigned long new_lim);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: include/bc/beancounter.h:73:
+	int	(*bcr_limit_hit)(struct beancounter *bc, unsigned long val,
+			unsigned long flags);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#208: FILE: include/bc/beancounter.h:85:
+	spinlock_t		bc_lock;

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#233: FILE: include/bc/beancounter.h:110:
+static inline void bc_adjust_maxheld(struct bc_resource_parm *parm)
                                                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#239: FILE: include/bc/beancounter.h:116:
+static inline void bc_adjust_minheld(struct bc_resource_parm *parm)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#245: FILE: include/bc/beancounter.h:122:
+static inline void bc_init_resource(struct bc_resource_parm *parm,
                                                              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: include/bc/beancounter.h:123:
+static inline void bc_init_resource(struct bc_resource_parm *parm,
+		unsigned long bar, unsigned long lim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: include/bc/beancounter.h:134:
+int bc_change_param(struct beancounter *bc, int res,
+		unsigned long bar, unsigned long lim);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: include/bc/beancounter.h:137:
+int __must_check bc_charge_locked(struct beancounter *bc, int res_id,
+		unsigned long val, int strict, unsigned long flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: include/bc/beancounter.h:139:
+static inline int __must_check bc_charge(struct beancounter *bc, int res_id,
+		unsigned long val, int strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: include/bc/beancounter.h:151:
+void __must_check bc_uncharge_locked(struct beancounter *bc, int res_id,
+		unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: include/bc/beancounter.h:153:
+static inline void bc_uncharge(struct beancounter *bc, int res_id,
+		unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: include/bc/beancounter.h:166:
+static inline int __must_check bc_charge_locked(struct beancounter *bc, int res,
+		unsigned long val, int strict, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: include/bc/beancounter.h:172:
+static inline int __must_check bc_charge(struct beancounter *bc, int res,
+		unsigned long val, int strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: include/bc/beancounter.h:178:
+static inline void bc_uncharge_locked(struct beancounter *bc, int res,
+		unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: include/bc/beancounter.h:183:
+static inline void bc_uncharge(struct beancounter *bc, int res,
+		unsigned long val)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#342: FILE: kernel/bc/beancounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#343: FILE: kernel/bc/beancounter.c:2:
+ * kernel/bc/beancounter.c

CHECK:BIT_MACRO: Prefer using the BIT macro
#361: FILE: kernel/bc/beancounter.c:20:
+#define BC_HASH_SIZE	(1 << BC_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: kernel/bc/beancounter.c:61:
+		int err;
+		if ((err = bc_resources[i]->bcr_init(new_bc, i))) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#402: FILE: kernel/bc/beancounter.c:61:
+		if ((err = bc_resources[i]->bcr_init(new_bc, i))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: kernel/bc/beancounter.c:79:
+	struct beancounter *bc = container_bc(cont);
+	kmem_cache_free(bc_cache, bc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: kernel/bc/beancounter.c:83:
+int bc_charge_locked(struct beancounter *bc, int res, unsigned long val,
+		int strict, unsigned long flags)

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#426: FILE: kernel/bc/beancounter.c:85:
+	struct bc_resource_parm *parm;
 	                         ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: kernel/bc/beancounter.c:88:
+	BUG_ON(val > BC_MAXVALUE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#431: FILE: kernel/bc/beancounter.c:90:
+	parm = &bc->bc_parms[res];
 	^^^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#438: FILE: kernel/bc/beancounter.c:97:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: kernel/bc/beancounter.c:103:
+			if (parm->held < parm->barrier &&
+					bc_resources[res]->bcr_barrier_hit)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#447: FILE: kernel/bc/beancounter.c:106:
+		/* fallthrough */

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#450: FILE: kernel/bc/beancounter.c:109:
+		bc_adjust_maxheld(parm);
 		                  ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#453: FILE: kernel/bc/beancounter.c:112:
+		BUG();

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#465: FILE: kernel/bc/beancounter.c:124:
+	struct bc_resource_parm *parm;
 	                         ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: kernel/bc/beancounter.c:126:
+	BUG_ON(val > BC_MAXVALUE);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#469: FILE: kernel/bc/beancounter.c:128:
+	parm = &bc->bc_parms[res];
 	^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#471: FILE: kernel/bc/beancounter.c:130:
+		printk(KERN_ERR "BC: Uncharging too much of %s: %lu vs %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: kernel/bc/beancounter.c:131:
+		printk(KERN_ERR "BC: Uncharging too much of %s: %lu vs %lu\n",
+				bc_resources[res]->bcr_name,

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#478: FILE: kernel/bc/beancounter.c:137:
+	bc_adjust_minheld(parm);
 	                  ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#522: FILE: kernel/bc/beancounter.c:181:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

ERROR:SPACING: space required before the open parenthesis '('
#527: FILE: kernel/bc/beancounter.c:186:
+	switch(idx) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#549: FILE: kernel/bc/beancounter.c:208:
+		goto out;
+		break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#552: FILE: kernel/bc/beancounter.c:211:
+	retval = simple_read_from_buffer(userbuf, nbytes, ppos, page, s-page);
 	                                                               ^

CHECK:SPACING: No space is necessary after a cast
#554: FILE: kernel/bc/beancounter.c:213:
+	free_page((unsigned long) page);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#589: FILE: kernel/bc/beancounter.c:248:
+	val = simple_strtoul(buffer, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: kernel/bc/beancounter.c:272:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: kernel/bc/beancounter.c:277:
+	int attr;
+	BUG_ON(bc_resources[res_id] != &bc_dummy_res);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: kernel/bc/beancounter.c:277:
+	BUG_ON(bc_resources[res_id] != &bc_dummy_res);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: kernel/bc/beancounter.c:278:
+	BUG_ON(res_id >= BC_RESOURCES);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#625: FILE: kernel/bc/beancounter.c:284:
+	for (attr = 0; attr < BC_ATTRS; attr++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#628: FILE: kernel/bc/beancounter.c:287:
+		 * "bc.<resname>.<attrname>" */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#632: FILE: kernel/bc/beancounter.c:291:
+		const char *attrname;
+		cft->private = attr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#650: FILE: kernel/bc/beancounter.c:309:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#668: FILE: kernel/bc/beancounter.c:327:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#673: FILE: kernel/bc/beancounter.c:332:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: kernel/bc/beancounter.c:337:
+	bc_cache = kmem_cache_create("beancounters",
+			sizeof(struct beancounter), 0,

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#683: FILE: kernel/bc/beancounter.c:342:
+__initcall(bc_init_late);

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: kernel/bc/beancounter.c:348:
+	int attr, res;
+	for (res = 0; res < BC_RESOURCES; res++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#694: FILE: kernel/bc/beancounter.c:353:
+			struct cftype *cft = &bcr->cft_attrs[attr];
+			if (!cft->name[0]) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#694: FILE: kernel/bc/beancounter.c:353:
+			if (!cft->name[0]) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#696: FILE: kernel/bc/beancounter.c:355:
+			if (err < 0) return err;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#710: FILE: kernel/bc/beancounter.c:369:
+EXPORT_SYMBOL(bc_resources);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#711: FILE: kernel/bc/beancounter.c:370:
+EXPORT_SYMBOL(init_bc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#712: FILE: kernel/bc/beancounter.c:371:
+EXPORT_SYMBOL(bc_change_param);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#718: FILE: include/bc/misc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#719: FILE: include/bc/misc.h:2:
+ * include/bc/misc.h

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#732: FILE: include/bc/misc.h:15:
+void bc_file_uncharge(struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#750: FILE: kernel/bc/misc.c:1:
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: kernel/bc/misc.c:41:
+	bc_init_resource(&bc->bc_parms[BC_NUMFILES],
+			BC_NUMFILES_BARRIER, BC_NUMFILES_LIMIT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: kernel/bc/misc.c:53:
+ ^Ireturn 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#802: FILE: kernel/bc/misc.c:53:
+ ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: kernel/bc/misc.c:53:
+ ^Ireturn 0;$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#805: FILE: kernel/bc/misc.c:56:
+__initcall(bc_misc_init_resource);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 44 warnings, 25 checks, 747 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
