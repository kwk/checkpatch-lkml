WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#	           ChangeSet	1.1192  -> 1.1193 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	include/linux/isdn_ppp.h	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	drivers/isdn/isdn_ppp.h	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	drivers/isdn/Config.in	1.20    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	drivers/isdn/isdn_ppp.c	1.21    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	Documentation/Configure.help	1.182   -> 1.183  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	drivers/isdn/isdn_net.c	1.16    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# 03/06/03	kaber@trash.net	1.1193

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# [ISDN] isdn ppp filter

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#71: 
--- a/Documentation/Configure.help	Tue Jun  3 07:03:12 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#114: FILE: drivers/isdn/isdn_net.c:1304:
+						isdn_net_unreachable(ndev, skb, "dial rejected: packet filtered");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#179: FILE: drivers/isdn/isdn_ppp.c:390:
+	if (is->pass_filter.filter) {
+		kfree(is->pass_filter.filter);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#183: FILE: drivers/isdn/isdn_ppp.c:394:
+	if (is->active_filter.filter) {
+		kfree(is->active_filter.filter);

CHECK:SPACING: No space is necessary after a cast
#202: FILE: drivers/isdn/isdn_ppp.c:615:
+				if (copy_from_user(&uprog, (void *) arg, sizeof(uprog)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!code"
#207: FILE: drivers/isdn/isdn_ppp.c:620:
+					if (code == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#219: FILE: drivers/isdn/isdn_ppp.c:632:
+				filtp = (cmd == PPPIOCSPASS) ? &is->pass_filter : &is->active_filter;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#221: FILE: drivers/isdn/isdn_ppp.c:634:
+				if (filtp->filter)
+					kfree(filtp->filter);

CHECK:SPACING: No space is necessary after a cast
#243: FILE: drivers/isdn/isdn_ppp.c:1041:
+		mlp = (isdn_net_local *) lp->master->priv;

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: drivers/isdn/isdn_ppp.c:1042:
+ ^I^Islot = mlp->ppp_slot;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: drivers/isdn/isdn_ppp.c:1042:
+ ^I^Islot = mlp->ppp_slot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/isdn/isdn_ppp.c:1042:
+ ^I^Islot = mlp->ppp_slot;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: drivers/isdn/isdn_ppp.c:1139:
+	 * a four-byte PPP header on each packet (which is still present) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#263: FILE: drivers/isdn/isdn_ppp.c:1144:
+	if (is->pass_filter.filter
+	    && sk_run_filter(skb, is->pass_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: drivers/isdn/isdn_ppp.c:1145:
+^I                    is->pass_filter.len) == 0) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#266: FILE: drivers/isdn/isdn_ppp.c:1147:
+			printk(KERN_DEBUG "IPPP: inbound frame filtered.\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#271: FILE: drivers/isdn/isdn_ppp.c:1152:
+	if (!(is->active_filter.filter
+	      && sk_run_filter(skb, is->active_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: drivers/isdn/isdn_ppp.c:1153:
+^I                       is->active_filter.len) == 0)) {$

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#274: FILE: drivers/isdn/isdn_ppp.c:1155:
+			printk(KERN_DEBUG "IPPP: link-active filter: reseting huptimer.\n");
 			                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#274: FILE: drivers/isdn/isdn_ppp.c:1155:
+			printk(KERN_DEBUG "IPPP: link-active filter: reseting huptimer.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#311: FILE: drivers/isdn/isdn_ppp.c:1281:
+	 * a four-byte PPP header on each packet */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: drivers/isdn/isdn_ppp.c:1286:
+^Iif (ipt->pass_filter.filter $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#317: FILE: drivers/isdn/isdn_ppp.c:1287:
+	if (ipt->pass_filter.filter 
+	    && sk_run_filter(skb, ipt->pass_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: drivers/isdn/isdn_ppp.c:1288:
+^I^I             ipt->pass_filter.len) == 0) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#320: FILE: drivers/isdn/isdn_ppp.c:1290:
+			printk(KERN_DEBUG "IPPP: outbound frame filtered.\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#325: FILE: drivers/isdn/isdn_ppp.c:1295:
+	if (!(ipt->active_filter.filter
+	      && sk_run_filter(skb, ipt->active_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: drivers/isdn/isdn_ppp.c:1296:
+^I^I               ipt->active_filter.len) == 0)) {$

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#328: FILE: drivers/isdn/isdn_ppp.c:1298:
+			printk(KERN_DEBUG "IPPP: link-active filter: reseting huptimer.\n");
 			                                             ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#328: FILE: drivers/isdn/isdn_ppp.c:1298:
+			printk(KERN_DEBUG "IPPP: link-active filter: reseting huptimer.\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#351: FILE: drivers/isdn/isdn_ppp.c:1455:
+	u_int16_t proto;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: drivers/isdn/isdn_ppp.c:1466:
+		printk(KERN_ERR "isdn_ppp_autodial_filter: unsupported protocol 0x%x.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'isdn_ppp_autodial_filter', this function's name, in a string
#362: FILE: drivers/isdn/isdn_ppp.c:1466:
+		printk(KERN_ERR "isdn_ppp_autodial_filter: unsupported protocol 0x%x.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: drivers/isdn/isdn_ppp.c:1479:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: drivers/isdn/isdn_ppp.c:1481:
+^I        && sk_run_filter(skb, is->pass_filter.filter,$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#377: FILE: drivers/isdn/isdn_ppp.c:1481:
+	drop |= is->pass_filter.filter
+	        && sk_run_filter(skb, is->pass_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: drivers/isdn/isdn_ppp.c:1482:
+^I                         is->pass_filter.len) == 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: drivers/isdn/isdn_ppp.c:1484:
+^I        && sk_run_filter(skb, is->active_filter.filter,$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#380: FILE: drivers/isdn/isdn_ppp.c:1484:
+	drop |= is->active_filter.filter
+	        && sk_run_filter(skb, is->active_filter.filter,

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: drivers/isdn/isdn_ppp.c:1485:
+^I                         is->active_filter.len) == 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: drivers/isdn/isdn_ppp.c:1486:
+^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: drivers/isdn/isdn_ppp.h:22:
+extern int isdn_ppp_autodial_filter(struct sk_buff *, isdn_net_local *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#397: FILE: drivers/isdn/isdn_ppp.h:22:
+extern int isdn_ppp_autodial_filter(struct sk_buff *, isdn_net_local *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'isdn_net_local *' should also have an identifier name
#397: FILE: drivers/isdn/isdn_ppp.h:22:
+extern int isdn_ppp_autodial_filter(struct sk_buff *, isdn_net_local *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: include/linux/isdn_ppp.h:230:
+  struct sock_fprog pass_filter;^I/* filter for packets to pass */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: include/linux/isdn_ppp.h:231:
+  struct sock_fprog active_filter;^I/* filter for pkts to reset idle */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: options.c:304:
+static int setpassfilter __P((int,char **));
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#621: FILE: options.c:305:
+static int setactivefilter __P((int,char **));
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: options.c:487:
+    { "pass-filter", 1, setpassfilter},^I^I/* pass filter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: options.c:488:
+    { "active-filter", 1, setactivefilter},^I/* link-active filter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: options.c:2640:
+    int argc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: options.c:2641:
+    char **argv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: options.c:2643:
+    if (pcap_compile_nopcap(PPP_HDRLEN, DLT_PPP, &pass_filter, *argv, 1, netmask) == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: options.c:2644:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: options.c:2644:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: options.c:2645:
+    option_error("error in pass-filter expression.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: options.c:2646:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: options.c:2654:
+    int argc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: options.c:2655:
+    char **argv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: options.c:2657:
+    if (pcap_compile_nopcap(PPP_HDRLEN, DLT_PPP, &active_filter, *argv, 1, netmask) == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: options.c:2658:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: options.c:2658:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: options.c:2659:
+    option_error("error in active-filter expression.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: options.c:2660:
+    return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: sys-linux.c:529:
+{       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: sys-linux.c:530:
+        struct sock_fprog fp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: sys-linux.c:530:
+        struct sock_fprog fp;$

CHECK:SPACING: No space is necessary after a cast
#721: FILE: sys-linux.c:540:
+		fp.filter = (struct sock_filter *) pass->bf_insns;

CHECK:SPACING: No space is necessary after a cast
#729: FILE: sys-linux.c:548:
+		fp.filter = (struct sock_filter *) active->bf_insns;

ERROR:CODE_INDENT: code indent should use tabs where possible
#732: FILE: sys-linux.c:551:
+^I        ^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#732: FILE: sys-linux.c:551:
+^I        ^Ireturn 0;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365389.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 56 warnings, 13 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365389.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
