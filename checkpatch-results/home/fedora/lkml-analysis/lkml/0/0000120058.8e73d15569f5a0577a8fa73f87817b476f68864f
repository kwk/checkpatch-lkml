CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#44: FILE: arch/um/include/kern.h:20:
+extern int printf(const char *fmt, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: arch/um/include/os.h:218:
+extern int umid_file_name(char *name, char *buf, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: arch/um/include/os.h:219:
+extern int set_umid(char *name, int (*printer)(const char *fmt, ...));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: arch/um/include/os.h:220:
+extern char *get_umid(int only_if_set);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#170: FILE: arch/um/kernel/umid.c:14:
+int umid_is_random = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open parenthesis '('
#191: FILE: arch/um/kernel/umid.c:21:
+	if(umid_inited)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#204: FILE: arch/um/kernel/umid.c:26:
+	if(err == -EEXIST){

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: arch/um/kernel/umid.c:26:
+	if(err == -EEXIST){

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: arch/um/kernel/umid.c:26:
+	if(err == -EEXIST){
[...]
+	else if(!err)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: arch/um/kernel/umid.c:30:
+	else if(!err)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#208: FILE: arch/um/kernel/umid.c:30:
+	}
+	else if(!err)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#504: FILE: arch/um/os-Linux/umid.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open brace '{'
#533: FILE: arch/um/os-Linux/umid.c:30:
+	if(*uml_dir == '~'){

ERROR:SPACING: space required before the open parenthesis '('
#533: FILE: arch/um/os-Linux/umid.c:30:
+	if(*uml_dir == '~'){

ERROR:SPACING: space required before the open brace '{'
#536: FILE: arch/um/os-Linux/umid.c:33:
+		if(home == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#536: FILE: arch/um/os-Linux/umid.c:33:
+		if(home == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!home"
#536: FILE: arch/um/os-Linux/umid.c:33:
+		if(home == NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_uml_dir', this function's name, in a string
#537: FILE: arch/um/os-Linux/umid.c:34:
+			printf("make_uml_dir : no value in environment for "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: arch/um/os-Linux/umid.c:35:
+			printf("make_uml_dir : no value in environment for "
+			       "$HOME\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#541: FILE: arch/um/os-Linux/umid.c:38:
+		strlcpy(dir, home, sizeof(dir));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uml_dir"
#550: FILE: arch/um/os-Linux/umid.c:47:
+	if (uml_dir == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_uml_dir', this function's name, in a string
#551: FILE: arch/um/os-Linux/umid.c:48:
+		printf("make_uml_dir : malloc failed, errno = %d\n", errno);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: arch/um/os-Linux/umid.c:52:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#556: FILE: arch/um/os-Linux/umid.c:53:
+	if((mkdir(uml_dir, 0777) < 0) && (errno != EEXIST)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno != EEXIST'
#556: FILE: arch/um/os-Linux/umid.c:53:
+	if((mkdir(uml_dir, 0777) < 0) && (errno != EEXIST)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#556: FILE: arch/um/os-Linux/umid.c:53:
+	if((mkdir(uml_dir, 0777) < 0) && (errno != EEXIST)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: arch/um/os-Linux/umid.c:54:
+^I        printf("Failed to mkdir '%s': %s\n", uml_dir, strerror(errno));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#571: FILE: arch/um/os-Linux/umid.c:68:
+	if(directory == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#571: FILE: arch/um/os-Linux/umid.c:68:
+	if(directory == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!directory"
#571: FILE: arch/um/os-Linux/umid.c:68:
+	if(directory == NULL){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: arch/um/os-Linux/umid.c:69:
+		printk("actually_do_remove : couldn't open directory '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'actually_do_remove', this function's name, in a string
#572: FILE: arch/um/os-Linux/umid.c:69:
+		printk("actually_do_remove : couldn't open directory '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#573: FILE: arch/um/os-Linux/umid.c:70:
+		printk("actually_do_remove : couldn't open directory '%s', "
+		       "errno = %d\n", dir, errno);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#574: FILE: arch/um/os-Linux/umid.c:71:
+		return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open brace '{'
#576: FILE: arch/um/os-Linux/umid.c:73:
+	while((ent = readdir(directory)) != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#576: FILE: arch/um/os-Linux/umid.c:73:
+	while((ent = readdir(directory)) != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#577: FILE: arch/um/os-Linux/umid.c:74:
+		if(!strcmp(ent->d_name, ".") || !strcmp(ent->d_name, ".."))

ERROR:SPACING: space required before the open brace '{'
#580: FILE: arch/um/os-Linux/umid.c:77:
+		if(len > sizeof(file)){

ERROR:SPACING: space required before the open parenthesis '('
#580: FILE: arch/um/os-Linux/umid.c:77:
+		if(len > sizeof(file)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#581: FILE: arch/um/os-Linux/umid.c:78:
+			printk("Not deleting '%s' from '%s' - name too long\n",

ERROR:SPACING: space required before the open brace '{'
#586: FILE: arch/um/os-Linux/umid.c:83:
+		if(unlink(file) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#586: FILE: arch/um/os-Linux/umid.c:83:
+		if(unlink(file) < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#587: FILE: arch/um/os-Linux/umid.c:84:
+			printk("actually_do_remove : couldn't remove '%s' "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'actually_do_remove', this function's name, in a string
#587: FILE: arch/um/os-Linux/umid.c:84:
+			printk("actually_do_remove : couldn't remove '%s' "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: arch/um/os-Linux/umid.c:85:
+^I^I^I       "from '%s', errno = %d\n", ent->d_name, dir, $

WARNING:SPLIT_STRING: quoted string split across lines
#588: FILE: arch/um/os-Linux/umid.c:85:
+			printk("actually_do_remove : couldn't remove '%s' "
+			       "from '%s', errno = %d\n", ent->d_name, dir, 

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#590: FILE: arch/um/os-Linux/umid.c:87:
+			return(1);

ERROR:SPACING: space required before the open brace '{'
#593: FILE: arch/um/os-Linux/umid.c:90:
+	if(rmdir(dir) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#593: FILE: arch/um/os-Linux/umid.c:90:
+	if(rmdir(dir) < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: arch/um/os-Linux/umid.c:91:
+		printk("actually_do_remove : couldn't rmdir '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'actually_do_remove', this function's name, in a string
#594: FILE: arch/um/os-Linux/umid.c:91:
+		printk("actually_do_remove : couldn't rmdir '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#595: FILE: arch/um/os-Linux/umid.c:92:
+		printk("actually_do_remove : couldn't rmdir '%s', "
+		       "errno = %d\n", dir, errno);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#596: FILE: arch/um/os-Linux/umid.c:93:
+		return(1);

ERROR:SPACING: space required before the open brace '{'
#612: FILE: arch/um/os-Linux/umid.c:109:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#612: FILE: arch/um/os-Linux/umid.c:109:
+	if(fd < 0){

ERROR:SPACING: space required before the open brace '{'
#613: FILE: arch/um/os-Linux/umid.c:110:
+		if(fd != -ENOENT){

ERROR:SPACING: space required before the open parenthesis '('
#613: FILE: arch/um/os-Linux/umid.c:110:
+		if(fd != -ENOENT){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: arch/um/os-Linux/umid.c:111:
+			printk("not_dead_yet : couldn't open pid file '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_dead_yet', this function's name, in a string
#614: FILE: arch/um/os-Linux/umid.c:111:
+			printk("not_dead_yet : couldn't open pid file '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#615: FILE: arch/um/os-Linux/umid.c:112:
+			printk("not_dead_yet : couldn't open pid file '%s', "
+			       "err = %d\n", file, -fd);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#616: FILE: arch/um/os-Linux/umid.c:113:
+			return(1);

ERROR:SPACING: space required before the open brace '{'
#620: FILE: arch/um/os-Linux/umid.c:117:
+	if(fd > 0){

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: arch/um/os-Linux/umid.c:117:
+	if(fd > 0){

ERROR:SPACING: space required before the open brace '{'
#622: FILE: arch/um/os-Linux/umid.c:119:
+		if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#622: FILE: arch/um/os-Linux/umid.c:119:
+		if(n < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: arch/um/os-Linux/umid.c:120:
+			printk("not_dead_yet : couldn't read pid file '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_dead_yet', this function's name, in a string
#623: FILE: arch/um/os-Linux/umid.c:120:
+			printk("not_dead_yet : couldn't read pid file '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#624: FILE: arch/um/os-Linux/umid.c:121:
+			printk("not_dead_yet : couldn't read pid file '%s', "
+			       "err = %d\n", file, -n);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#625: FILE: arch/um/os-Linux/umid.c:122:
+			return(1);

ERROR:SPACING: space required before the open brace '{'
#628: FILE: arch/um/os-Linux/umid.c:125:
+		if(end == pid){

ERROR:SPACING: space required before the open parenthesis '('
#628: FILE: arch/um/os-Linux/umid.c:125:
+		if(end == pid){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: arch/um/os-Linux/umid.c:126:
+			printk("not_dead_yet : couldn't parse pid file '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_dead_yet', this function's name, in a string
#629: FILE: arch/um/os-Linux/umid.c:126:
+			printk("not_dead_yet : couldn't parse pid file '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#630: FILE: arch/um/os-Linux/umid.c:127:
+			printk("not_dead_yet : couldn't parse pid file '%s', "
+			       "errno = %d\n", file, errno);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == ESRCH'
#633: FILE: arch/um/os-Linux/umid.c:130:
+		if(((kill(p, 0) < 0) && (errno == ESRCH)) ||
+		   (p == CHOOSE_MODE(tracing_pid, os_getpid())))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p == CHOOSE_MODE(tracing_pid, os_getpid())'
#633: FILE: arch/um/os-Linux/umid.c:130:
+		if(((kill(p, 0) < 0) && (errno == ESRCH)) ||
+		   (p == CHOOSE_MODE(tracing_pid, os_getpid())))

ERROR:SPACING: space required before the open parenthesis '('
#633: FILE: arch/um/os-Linux/umid.c:130:
+		if(((kill(p, 0) < 0) && (errno == ESRCH)) ||

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: arch/um/os-Linux/umid.c:134:
+	if(!dead)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#639: FILE: arch/um/os-Linux/umid.c:136:
+	return(actually_do_remove(dir));

ERROR:SPACING: space required before the open parenthesis '('
#648: FILE: arch/um/os-Linux/umid.c:145:
+	if(umid_file_name("pid", file, sizeof(file)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: arch/um/os-Linux/umid.c:148:
+^Ifd = os_open_file(file, of_create(of_excl(of_rdwr(OPENFLAGS()))), $

ERROR:SPACING: space required before the open brace '{'
#653: FILE: arch/um/os-Linux/umid.c:150:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: arch/um/os-Linux/umid.c:150:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#661: FILE: arch/um/os-Linux/umid.c:158:
+	if(n != strlen(pid))

ERROR:SPACING: space required before the open parenthesis '('
#668: FILE: arch/um/os-Linux/umid.c:165:
+	if(strlen(name) > UMID_LEN - 1)

WARNING:SPLIT_STRING: quoted string split across lines
#670: FILE: arch/um/os-Linux/umid.c:167:
+		(*printer)("Unique machine name is being truncated to %d "
+			   "characters\n", UMID_LEN);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#671: FILE: arch/um/os-Linux/umid.c:168:
+	strlcpy(umid, name, sizeof(umid));

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#676: FILE: arch/um/os-Linux/umid.c:173:
+static int umid_setup = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required before the open brace '{'
#685: FILE: arch/um/os-Linux/umid.c:182:
+	if(*umid == '\0'){

ERROR:SPACING: space required before the open parenthesis '('
#685: FILE: arch/um/os-Linux/umid.c:182:
+	if(*umid == '\0'){

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#686: FILE: arch/um/os-Linux/umid.c:183:
+		strlcpy(tmp, uml_dir, sizeof(tmp));

ERROR:SPACING: space required before the open brace '{'
#689: FILE: arch/um/os-Linux/umid.c:186:
+		if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#689: FILE: arch/um/os-Linux/umid.c:186:
+		if(fd < 0){

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_umid', this function's name, in a string
#690: FILE: arch/um/os-Linux/umid.c:187:
+			(*printer)("make_umid - mkstemp(%s) failed: %s\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: arch/um/os-Linux/umid.c:188:
+				   tmp,strerror(errno));
 				      ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#692: FILE: arch/um/os-Linux/umid.c:189:
+			return(1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: arch/um/os-Linux/umid.c:200:
+^I$

ERROR:SPACING: space required before the open brace '{'
#706: FILE: arch/um/os-Linux/umid.c:203:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: arch/um/os-Linux/umid.c:203:
+	if(err < 0){

ERROR:SPACING: space required before the open brace '{'
#707: FILE: arch/um/os-Linux/umid.c:204:
+		if(errno == EEXIST){

ERROR:SPACING: space required before the open parenthesis '('
#707: FILE: arch/um/os-Linux/umid.c:204:
+		if(errno == EEXIST){

ERROR:SPACING: space required before the open parenthesis '('
#708: FILE: arch/um/os-Linux/umid.c:205:
+			if(not_dead_yet(tmp))

ERROR:SPACING: space required before the open brace '{'
#713: FILE: arch/um/os-Linux/umid.c:210:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#713: FILE: arch/um/os-Linux/umid.c:210:
+	if(err < 0){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#729: FILE: arch/um/os-Linux/umid.c:226:
+	return(0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#732: FILE: arch/um/os-Linux/umid.c:229:
+__initcall(make_umid_init);

ERROR:SPACING: space required before the open brace '{'
#738: FILE: arch/um/os-Linux/umid.c:235:
+	if(!umid_setup){

ERROR:SPACING: space required before the open parenthesis '('
#738: FILE: arch/um/os-Linux/umid.c:235:
+	if(!umid_setup){

ERROR:SPACING: space required before the open parenthesis '('
#740: FILE: arch/um/os-Linux/umid.c:237:
+		if(err)

ERROR:SPACING: space required before the open brace '{'
#745: FILE: arch/um/os-Linux/umid.c:242:
+	if(n > len){

ERROR:SPACING: space required before the open parenthesis '('
#745: FILE: arch/um/os-Linux/umid.c:242:
+	if(n > len){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#746: FILE: arch/um/os-Linux/umid.c:243:
+		printk("umid_file_name : buffer too short\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'umid_file_name', this function's name, in a string
#746: FILE: arch/um/os-Linux/umid.c:243:
+		printk("umid_file_name : buffer too short\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#751: FILE: arch/um/os-Linux/umid.c:248:
+	return(0);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#754: FILE: arch/um/os-Linux/umid.c:251:
+extern int umid_is_random;

ERROR:SPACING: space required before the open parenthesis '('
#758: FILE: arch/um/os-Linux/umid.c:255:
+	if(only_if_set && umid_is_random)

ERROR:SPACING: space required before the open brace '{'
#765: FILE: arch/um/os-Linux/umid.c:262:
+	if((strlen(name) > 0) && (name[strlen(name) - 1] != '/')){

ERROR:SPACING: space required before the open parenthesis '('
#765: FILE: arch/um/os-Linux/umid.c:262:
+	if((strlen(name) > 0) && (name[strlen(name) - 1] != '/')){

CHECK:BRACES: braces {} should be used on all arms of this statement
#765: FILE: arch/um/os-Linux/umid.c:262:
+	if((strlen(name) > 0) && (name[strlen(name) - 1] != '/')){
[...]
+	else uml_dir = name;
[...]

ERROR:SPACING: space required before the open brace '{'
#767: FILE: arch/um/os-Linux/umid.c:264:
+		if(uml_dir == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#767: FILE: arch/um/os-Linux/umid.c:264:
+		if(uml_dir == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uml_dir"
#767: FILE: arch/um/os-Linux/umid.c:264:
+		if(uml_dir == NULL){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#774: FILE: arch/um/os-Linux/umid.c:271:
+			return(0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#778: FILE: arch/um/os-Linux/umid.c:275:
+	else uml_dir = name;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#778: FILE: arch/um/os-Linux/umid.c:275:
+	}
+	else uml_dir = name;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#779: FILE: arch/um/os-Linux/umid.c:276:
+	return(0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/um/os-Linux/umid.c:280:
+__uml_setup("uml_dir=", set_uml_dir,
+"uml_dir=<directory>\n"

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120058.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 81 errors, 32 warnings, 14 checks, 451 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120058.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
