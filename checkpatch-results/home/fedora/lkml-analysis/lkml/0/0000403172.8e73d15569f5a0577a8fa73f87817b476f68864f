WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
To show the aperiodic nature of the stallouts, I've replaced my simple dot test:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
#	           ChangeSet	1.757.33.12 -> 1.757.33.13

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
#	      kernel/ksyms.c	1.65    -> 1.66   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
#	  include/linux/fs.h	1.70    -> 1.71   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
#	        net/socket.c	1.12    -> 1.12.1.1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
#	          fs/super.c	1.46    -> 1.47   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
#	          fs/inode.c	1.35    -> 1.36   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
# 02/11/29	hch@sgi.com	1.757.33.13

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
# [PATCH] backport 2.5 inode allocation changes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
# This patch adds ->alloc_inode and ->destroy_inode super operations to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
# allow the filesystem control the allocation of struct inode, e.g. to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
# have it's private inode and the VFS one n the same slab cache.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
# It allows to break worst-offenders like NFS out of the big inode union

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
# and make VM balancing better by wasting less ram for inodes.  It also

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
# speedups filesystems that don't want to touch that union in struct

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
# inode, like JFS, XFS or FreeVxFS (once switched over).  It is a straight

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
# backport from Al's code in 2.5 and has proven stable in Red Hat's

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#145: 
# recent beta releases (limbo, null).  Al has ACKed my patch submission.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
# Credits go to Daniel Phillips for the initial design.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#149: 
# NOTE: you want my b_inode removal patch applied before this one.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#150: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#151: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#153: 
--- a/fs/inode.c	Fri Jan  3 18:08:59 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#163: FILE: fs/inode.c:80:
+	static struct address_space_operations empty_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#164: FILE: fs/inode.c:81:
+	static struct inode_operations empty_iops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#165: FILE: fs/inode.c:82:
+	static struct file_operations empty_fops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#168: FILE: fs/inode.c:85:
+	if (sb->s_op->alloc_inode)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#170: FILE: fs/inode.c:87:
+	else {

CHECK:SPACING: No space is necessary after a cast
#171: FILE: fs/inode.c:88:
+		inode = (struct inode *) kmem_cache_alloc(inode_cachep, SLAB_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: fs/inode.c:810:
+ *^Inew_inode ^I- obtain an inode$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: fs/inode.c:816:
+struct inode * new_inode(struct super_block *sb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: include/linux/fs.h:882:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: include/linux/fs.h:882:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: include/linux/fs.h:882:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#396: FILE: include/linux/fs.h:883:
+	void (*destroy_inode)(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/fs.h:1373:
+extern void inode_init_once(struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#405: FILE: include/linux/fs.h:1373:
+extern void inode_init_once(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/linux/fs.h:1387:
+extern struct inode *new_inode(struct super_block *sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: fs/buffer.c:597:
+ * The caller must have the lru_list lock before calling the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: fs/reiserfs/inode.c:105:
+    struct reiserfs_journal *j = SB_JOURNAL(inode->i_sb) ;$

WARNING:SPACING: space prohibited before semicolon
#619: FILE: fs/reiserfs/inode.c:105:
+    struct reiserfs_journal *j = SB_JOURNAL(inode->i_sb) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: fs/reiserfs/inode.c:107:
+    buffer_insert_list(bh, &j->j_dirty_buffers) ;$

WARNING:SPACING: space prohibited before semicolon
#622: FILE: fs/reiserfs/inode.c:107:
+    buffer_insert_list(bh, &j->j_dirty_buffers) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: fs/reiserfs/journal.c:1940:
+  INIT_LIST_HEAD(&SB_JOURNAL(p_s_sb)->j_dirty_buffers) ;$

WARNING:SPACING: space prohibited before semicolon
#634: FILE: fs/reiserfs/journal.c:1940:
+  INIT_LIST_HEAD(&SB_JOURNAL(p_s_sb)->j_dirty_buffers) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: fs/reiserfs/journal.c:2936:
+  fsync_buffers_list(&(SB_JOURNAL(p_s_sb)->j_dirty_buffers)) ;$

WARNING:SPACING: space prohibited before semicolon
#643: FILE: fs/reiserfs/journal.c:2936:
+  fsync_buffers_list(&(SB_JOURNAL(p_s_sb)->j_dirty_buffers)) ;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/fs.h:1174:
+extern void FASTCALL(buffer_insert_list(struct buffer_head *, struct list_head *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#673: FILE: include/linux/fs.h:1174:
+extern void FASTCALL(buffer_insert_list(struct buffer_head *, struct list_head *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#673: FILE: include/linux/fs.h:1174:
+extern void FASTCALL(buffer_insert_list(struct buffer_head *, struct list_head *));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: include/linux/reiserfs_fs_sb.h:315:
+  struct list_head j_dirty_buffers ;$

WARNING:SPACING: space prohibited before semicolon
#717: FILE: include/linux/reiserfs_fs_sb.h:315:
+  struct list_head j_dirty_buffers ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 53 warnings, 6 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
