ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/fs/Kconfig	Thu Oct 31 06:48:19 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#149: FILE: fs/fscaps.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#161: FILE: fs/fscaps.c:13:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#166: FILE: fs/fscaps.c:18:
+	struct inode_operations rootdir_envelop;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#167: FILE: fs/fscaps.c:19:
+	struct inode_operations *rootdir_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#168: FILE: fs/fscaps.c:20:
+	struct inode_operations cap_envelop;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#169: FILE: fs/fscaps.c:21:
+	struct inode_operations *cap_iops;

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#172: FILE: fs/fscaps.c:24:
+static char __capname[] = ".capabilities";

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#189: FILE: fs/fscaps.c:41:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: fs/fscaps.c:42:
+	struct inode_operations *iops;
+	if ((mask & MAY_WRITE) && !capable(CAP_SETFCAP))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#203: FILE: fs/fscaps.c:55:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: fs/fscaps.c:56:
+	struct inode_operations *iops;
+	if (info->dentry) {

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#218: FILE: fs/fscaps.c:70:
+		printk(KERN_WARNING "%s: negative dentry. Disabling capabilities on %s.\n", __FUNCTION__, info->mnt->mnt_mountpoint->d_name.name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#218: FILE: fs/fscaps.c:70:
+		printk(KERN_WARNING "%s: negative dentry. Disabling capabilities on %s.\n", __FUNCTION__, info->mnt->mnt_mountpoint->d_name.name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#218: FILE: fs/fscaps.c:70:
+		printk(KERN_WARNING "%s: negative dentry. Disabling capabilities on %s.\n", __FUNCTION__, info->mnt->mnt_mountpoint->d_name.name);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#224: FILE: fs/fscaps.c:76:
+	info->cap_iops = iops = inode->i_op;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#235: FILE: fs/fscaps.c:87:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/fscaps.c:89:
+	int err, iscapdb = __is_capname(dentry->d_name.name);
+	if (iscapdb && !capable(CAP_SETFCAP))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#251: FILE: fs/fscaps.c:103:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: fs/fscaps.c:105:
+	int err, iscapdb = __is_capname(new_dentry->d_name.name);
+	if (iscapdb && !capable(CAP_SETFCAP))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#266: FILE: fs/fscaps.c:118:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: fs/fscaps.c:120:
+	int err, iscapdb = __is_capentry(dentry);
+	if (iscapdb && !capable(CAP_SETFCAP))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#281: FILE: fs/fscaps.c:133:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: fs/fscaps.c:134:
+	struct inode_operations *iops;
+	if (__is_capname(dentry->d_name.name))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#292: FILE: fs/fscaps.c:144:
+	struct inode_operations *iops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: fs/fscaps.c:145:
+	struct inode_operations *iops;
+	if (__is_capentry(old_dentry) || __is_capname(new_dentry->d_name.name))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#302: FILE: fs/fscaps.c:154:
+	struct inode_operations *iops = dir->i_op;

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: fs/fscaps.c:155:
+	struct inode_operations *iops = dir->i_op;
+	info->rootdir_iops = iops;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct fscap_info)...)
#317: FILE: fs/fscaps.c:169:
+	struct fscap_info *info = kmalloc(sizeof(struct fscap_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: fs/fscaps.c:170:
+	struct fscap_info *info = kmalloc(sizeof(struct fscap_info), GFP_KERNEL);
+	if (info) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: fs/fscaps.c:188:
+static inline struct fscap_info *__info_lookup(struct super_block *sb) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: fs/fscaps.c:193:
+static int __fscap_lookup(struct vfsmount *mnt, struct nameidata *nd)
                                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#346: FILE: fs/fscaps.c:198:
+	return path_walk(__capname, nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#359: FILE: fs/fscaps.c:211:
+static void __fscap_read(struct file *filp, struct linux_binprm *bprm)
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#363: FILE: fs/fscaps.c:215:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 	                    ^^^^

CHECK:SPACING: No space is necessary after a cast
#363: FILE: fs/fscaps.c:215:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: fs/fscaps.c:216:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
+	if (n == sizeof(fscaps)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: fs/fscaps.c:224:
+static int kernel_write(struct file *file, unsigned long offset,
+		 char *addr, unsigned long count)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#385: FILE: fs/fscaps.c:237:
+static void __fscap_drop(struct file *filp, struct inode *inode)
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#389: FILE: fs/fscaps.c:241:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 	                    ^^^^

CHECK:SPACING: No space is necessary after a cast
#389: FILE: fs/fscaps.c:241:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: fs/fscaps.c:242:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
+	if (n == sizeof(fscaps) && (fscaps[0][0] || fscaps[1][0] || fscaps[2][0])) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#392: FILE: fs/fscaps.c:244:
+		kernel_write(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 		             ^^^^

CHECK:SPACING: No space is necessary after a cast
#392: FILE: fs/fscaps.c:244:
+		kernel_write(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#398: FILE: fs/fscaps.c:250:
+	struct nameidata nd;
 	                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: fs/fscaps.c:251:
+	struct nameidata nd;
+	if (__info_lookup(mnt->mnt_sb))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#402: FILE: fs/fscaps.c:254:
+	if (__fscap_lookup(mnt, &nd))
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#405: FILE: fs/fscaps.c:257:
+	__info_init(mnt, nd.dentry);
 	                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: fs/fscaps.c:263:
+	struct fscap_info *info = __info_lookup(sb);
+	__info_free(info);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#416: FILE: fs/fscaps.c:268:
+	struct file *filp;
 	             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: fs/fscaps.c:270:
+	struct fscap_info *info = __info_lookup(bprm->file->f_vfsmnt->mnt_sb);
+	if (!info || !info->dentry)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#421: FILE: fs/fscaps.c:273:
+	filp = __fscap_open(info->dentry, info->mnt, O_RDONLY);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#422: FILE: fs/fscaps.c:274:
+	if (filp && !IS_ERR(filp)) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#422: FILE: fs/fscaps.c:274:
+	if (filp && !IS_ERR(filp)) {
 	                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#423: FILE: fs/fscaps.c:275:
+		__fscap_read(filp, bprm);
 		             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#424: FILE: fs/fscaps.c:276:
+		filp_close(filp, 0);
 		           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#430: FILE: fs/fscaps.c:282:
+	struct file *filp;
 	             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#432: FILE: fs/fscaps.c:284:
+	struct fscap_info *info = __info_lookup(inode->i_sb);
+	if (!info || !info->dentry)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#435: FILE: fs/fscaps.c:287:
+	filp = __fscap_open(info->dentry, info->mnt, O_RDWR);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#436: FILE: fs/fscaps.c:288:
+	if (filp && !IS_ERR(filp)) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#436: FILE: fs/fscaps.c:288:
+	if (filp && !IS_ERR(filp)) {
 	                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#437: FILE: fs/fscaps.c:289:
+		__fscap_drop(filp, inode);
 		             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#438: FILE: fs/fscaps.c:290:
+		filp_close(filp, 0);
 		           ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: fs/fscaps.c:294:
+EXPORT_SYMBOL(fscap_mount);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#443: FILE: fs/fscaps.c:295:
+EXPORT_SYMBOL(fscap_umount);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: fs/fscaps.c:296:
+EXPORT_SYMBOL(fscap_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: fs/fscaps.c:297:
+EXPORT_SYMBOL(fscap_drop);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: include/linux/fscaps.h:1:
+/*

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#551: FILE: include/linux/fscaps.h:17:
+#if defined(CONFIG_FS_CAPABILITIES) || defined(CONFIG_FS_CAPABILITIES_MODULE)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#552: FILE: include/linux/fscaps.h:18:
+extern void fscap_mount(struct vfsmount *mnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#553: FILE: include/linux/fscaps.h:19:
+extern void fscap_umount(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: include/linux/fscaps.h:20:
+extern void fscap_read(struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#555: FILE: include/linux/fscaps.h:21:
+extern void fscap_drop(struct inode *inode);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: include/linux/fscaps.h:22:
+#else^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 61 warnings, 10 checks, 511 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
