WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
code as well as adding some extensions to the altix PCI provider abstaction.

WARNING:TYPO_SPELLING: 'abstaction' may be misspelled - perhaps 'abstraction'?
#24: 
code as well as adding some extensions to the altix PCI provider abstaction.
                                                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/msi.h> instead of <asm/msi.h>
#41: FILE: arch/ia64/sn/pci/msi.c:13:
+#include <asm/msi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sn_irq_info"
#68: FILE: arch/ia64/sn/pci/msi.c:40:
+	if (sn_irq_info == NULL || sn_irq_info->irq_int_bit >= 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#90: FILE: arch/ia64/sn/pci/msi.c:62:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bussoft"
#105: FILE: arch/ia64/sn/pci/msi.c:76:
+	if (bussoft == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!provider"
#108: FILE: arch/ia64/sn/pci/msi.c:79:
+	if (provider == NULL || provider->dma_map_consistent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!provider->dma_map_consistent"
#108: FILE: arch/ia64/sn/pci/msi.c:79:
+	if (provider == NULL || provider->dma_map_consistent == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sn_irq_info)...) over kzalloc(sizeof(struct sn_irq_info)...)
#121: FILE: arch/ia64/sn/pci/msi.c:92:
+	sn_irq_info = kzalloc(sizeof(struct sn_irq_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#122: FILE: arch/ia64/sn/pci/msi.c:93:
+	if (! sn_irq_info)
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#146: FILE: arch/ia64/sn/pci/msi.c:115:
+					SN_DMA_MSI|SN_DMA_ADDR_XIO);
 					          ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#147: FILE: arch/ia64/sn/pci/msi.c:116:
+	if (! bus_addr) {
 	    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sn_irq_info"
#186: FILE: arch/ia64/sn/pci/msi.c:155:
+	if (sn_irq_info == NULL || sn_irq_info->irq_int_bit >= 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: arch/ia64/sn/pci/msi.c:162:
+        sn_pdev = (struct pcidev_info *)sn_irq_info->irq_pciioinfo;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/ia64/sn/pci/msi.c:162:
+        sn_pdev = (struct pcidev_info *)sn_irq_info->irq_pciioinfo;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_irq_info"
#206: FILE: arch/ia64/sn/pci/msi.c:175:
+	if (new_irq_info == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#216: FILE: arch/ia64/sn/pci/msi.c:185:
+					SN_DMA_MSI|SN_DMA_ADDR_XIO);
 					          ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#236: FILE: arch/ia64/sn/pci/msi.c:205:
+	if (! sn_msi_info)
 	    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: arch/ia64/sn/kernel/irq.c:32:
+uint64_t sn_intr_alloc(nasid_t local_nasid, int local_widget,
+				     struct sn_irq_info *sn_irq_info,

CHECK:SPACING: No space is necessary after a cast
#279: FILE: arch/ia64/sn/kernel/irq.c:42:
+			(u64) local_widget, __pa(sn_irq_info), (u64) req_irq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: arch/ia64/sn/kernel/irq.c:49:
+void sn_intr_free(nasid_t local_nasid, int local_widget,
 				struct sn_irq_info *sn_irq_info)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#302: FILE: arch/ia64/sn/kernel/irq.c:122:
+	int64_t bridge;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_irq_info)...) over kmalloc(sizeof(struct sn_irq_info)...)
#310: FILE: arch/ia64/sn/kernel/irq.c:128:
+	new_irq_info = kmalloc(sizeof(struct sn_irq_info), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_irq_info"
#311: FILE: arch/ia64/sn/kernel/irq.c:129:
+	if (new_irq_info == NULL)

CHECK:SPACING: No space is necessary after a cast
#335: FILE: arch/ia64/sn/kernel/irq.c:134:
+	bridge = (uint64_t) new_irq_info->irq_bridge;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (pci_provider->target_interrupt)
#408: FILE: arch/ia64/sn/kernel/irq.c:176:
+		(pci_provider->target_interrupt)(new_irq_info);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#496: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:44:
+		   uint64_t paddr, size_t req_size, uint64_t flags, int dma_flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:86:
+^I    ^I^I^I^I^I      PHYS_TO_TIODMA(paddr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:86:
+^I    ^I^I^I^I^I      PHYS_TO_TIODMA(paddr);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:118:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#541: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:124:
+			uint64_t dma_attributes, int dma_flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:134:
+^I^I    ^I^IPHYS_TO_TIODMA(paddr) | dma_attributes;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:134:
+^I^I    ^I^IPHYS_TO_TIODMA(paddr) | dma_attributes;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#577: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:164:
+			uint64_t paddr, size_t req_size, uint64_t flags, int dma_flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:185:
+^I    ^I^I^I^I^I      PHYS_TO_TIODMA(paddr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#592: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:185:
+^I    ^I^I^I^I^I      PHYS_TO_TIODMA(paddr);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#603: FILE: arch/ia64/sn/pci/pcibr/pcibr_dma.c:359:
+pcibr_dma_map(struct pci_dev * hwdev, unsigned long phys_addr, size_t size, int dma_flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#686: FILE: arch/ia64/sn/pci/tioce_provider.c:56:
+	(((addr) & ~ATE_PAGEMASK(ps)) | (1UL << 63) | ((msi)?(1UL << 62):0))
 	                                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#686: FILE: arch/ia64/sn/pci/tioce_provider.c:56:
+	(((addr) & ~ATE_PAGEMASK(ps)) | (1UL << 63) | ((msi)?(1UL << 62):0))
 	                                                                ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#715: FILE: arch/ia64/sn/pci/tioce_provider.c:149:
+		uint64_t ct_addr, int len, int dma_flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nasid_t' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sn_irq_info *' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nasid_t' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#927: FILE: include/asm-ia64/sn/intr.h:58:
+extern uint64_t sn_intr_alloc(nasid_t, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#930: FILE: include/asm-ia64/sn/intr.h:61:
+extern void sn_intr_free(nasid_t, int, struct sn_irq_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nasid_t' should also have an identifier name
#930: FILE: include/asm-ia64/sn/intr.h:61:
+extern void sn_intr_free(nasid_t, int, struct sn_irq_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#930: FILE: include/asm-ia64/sn/intr.h:61:
+extern void sn_intr_free(nasid_t, int, struct sn_irq_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sn_irq_info *' should also have an identifier name
#930: FILE: include/asm-ia64/sn/intr.h:61:
+extern void sn_intr_free(nasid_t, int, struct sn_irq_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#931: FILE: include/asm-ia64/sn/intr.h:62:
+extern struct sn_irq_info *sn_retarget_vector(struct sn_irq_info *, nasid_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sn_irq_info *' should also have an identifier name
#931: FILE: include/asm-ia64/sn/intr.h:62:
+extern struct sn_irq_info *sn_retarget_vector(struct sn_irq_info *, nasid_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nasid_t' should also have an identifier name
#931: FILE: include/asm-ia64/sn/intr.h:62:
+extern struct sn_irq_info *sn_retarget_vector(struct sn_irq_info *, nasid_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#931: FILE: include/asm-ia64/sn/intr.h:62:
+extern struct sn_irq_info *sn_retarget_vector(struct sn_irq_info *, nasid_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#963: FILE: include/asm-ia64/sn/pcibr_provider.h:133:
+extern dma_addr_t pcibr_dma_map(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#963: FILE: include/asm-ia64/sn/pcibr_provider.h:133:
+extern dma_addr_t pcibr_dma_map(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#963: FILE: include/asm-ia64/sn/pcibr_provider.h:133:
+extern dma_addr_t pcibr_dma_map(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#963: FILE: include/asm-ia64/sn/pcibr_provider.h:133:
+extern dma_addr_t pcibr_dma_map(struct pci_dev *, unsigned long, size_t, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: include/asm-ia64/sn/pcibr_provider.h:134:
+extern dma_addr_t pcibr_dma_map_consistent(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#964: FILE: include/asm-ia64/sn/pcibr_provider.h:134:
+extern dma_addr_t pcibr_dma_map_consistent(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#964: FILE: include/asm-ia64/sn/pcibr_provider.h:134:
+extern dma_addr_t pcibr_dma_map_consistent(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#964: FILE: include/asm-ia64/sn/pcibr_provider.h:134:
+extern dma_addr_t pcibr_dma_map_consistent(struct pci_dev *, unsigned long, size_t, int type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#987: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:48:
+	dma_addr_t	(*dma_map)(struct pci_dev *, unsigned long, size_t, int flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#987: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:48:
+	dma_addr_t	(*dma_map)(struct pci_dev *, unsigned long, size_t, int flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#987: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:48:
+	dma_addr_t	(*dma_map)(struct pci_dev *, unsigned long, size_t, int flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#988: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:49:
+	dma_addr_t	(*dma_map_consistent)(struct pci_dev *, unsigned long, size_t, int flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#988: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:49:
+	dma_addr_t	(*dma_map_consistent)(struct pci_dev *, unsigned long, size_t, int flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#988: FILE: include/asm-ia64/sn/pcibus_provider_defs.h:49:
+	dma_addr_t	(*dma_map_consistent)(struct pci_dev *, unsigned long, size_t, int flags);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123069.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 31 warnings, 30 checks, 908 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123069.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
