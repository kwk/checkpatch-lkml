WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#42: FILE: drivers/net/Kconfig:2188:
+config RIONET
+	tristate "RapidIO Ethernet over messaging driver support"
+	depends on NETDEVICES && RAPIDIO
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/net/rionet.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#131: FILE: drivers/net/rionet.c:56:
+	spinlock_t lock;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#141: FILE: drivers/net/rionet.c:66:
+static int rionet_check = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#143: FILE: drivers/net/rionet.c:68:
+static struct net_device *sndev = NULL;

WARNING:REPEATED_WORD: Possible repeated word: 'for'
#146: FILE: drivers/net/rionet.c:71:
+ * This is a fast lookup table for for translating TX

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#146: FILE: drivers/net/rionet.c:71:
+/*
+ * This is a fast lookup table for for translating TX

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pef' - possible side-effects?
#153: FILE: drivers/net/rionet.c:78:
+#define is_rionet_capable(pef, src_ops, dst_ops)		\
+			((pef & RIO_PEF_INB_MBOX) &&		\
+			 (pef & RIO_PEF_INB_DOORBELL) &&	\
+			 (src_ops & RIO_SRC_OPS_DOORBELL) &&	\
+			 (dst_ops & RIO_DST_OPS_DOORBELL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pef' may be better as '(pef)' to avoid precedence issues
#153: FILE: drivers/net/rionet.c:78:
+#define is_rionet_capable(pef, src_ops, dst_ops)		\
+			((pef & RIO_PEF_INB_MBOX) &&		\
+			 (pef & RIO_PEF_INB_DOORBELL) &&	\
+			 (src_ops & RIO_SRC_OPS_DOORBELL) &&	\
+			 (dst_ops & RIO_DST_OPS_DOORBELL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'src_ops' may be better as '(src_ops)' to avoid precedence issues
#153: FILE: drivers/net/rionet.c:78:
+#define is_rionet_capable(pef, src_ops, dst_ops)		\
+			((pef & RIO_PEF_INB_MBOX) &&		\
+			 (pef & RIO_PEF_INB_DOORBELL) &&	\
+			 (src_ops & RIO_SRC_OPS_DOORBELL) &&	\
+			 (dst_ops & RIO_DST_OPS_DOORBELL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dst_ops' may be better as '(dst_ops)' to avoid precedence issues
#153: FILE: drivers/net/rionet.c:78:
+#define is_rionet_capable(pef, src_ops, dst_ops)		\
+			((pef & RIO_PEF_INB_MBOX) &&		\
+			 (pef & RIO_PEF_INB_DOORBELL) &&	\
+			 (src_ops & RIO_SRC_OPS_DOORBELL) &&	\
+			 (dst_ops & RIO_DST_OPS_DOORBELL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#158: FILE: drivers/net/rionet.c:83:
+#define dev_rionet_capable(dev) \
+	is_rionet_capable(dev->pef, dev->src_ops, dev->dst_ops)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#158: FILE: drivers/net/rionet.c:83:
+#define dev_rionet_capable(dev) \
+	is_rionet_capable(dev->pef, dev->src_ops, dev->dst_ops)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#161: FILE: drivers/net/rionet.c:86:
+#define RIONET_MAC_MATCH(x)	(*(u32 *)x == 0x00010001)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#162: FILE: drivers/net/rionet.c:87:
+#define RIONET_GET_DESTID(x)	(*(u16 *)(x + 4))

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: drivers/net/rionet.c:92:
+	struct rionet_private *rnet = ndev->priv;
+	return &rnet->stats;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#185: FILE: drivers/net/rionet.c:110:
+		if (!(data = rio_get_inb_message(rnet->mport, RIONET_MAILBOX)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#199: FILE: drivers/net/rionet.c:124:
+				printk(KERN_WARNING "%s: bad rx packet\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#249: FILE: drivers/net/rionet.c:174:
+		printk(KERN_INFO "%s: queued skb %8.8x len %8.8x\n", DRV_NAME,

CHECK:SPACING: No space is necessary after a cast
#250: FILE: drivers/net/rionet.c:175:
+		       (u32) skb, skb->len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#272: FILE: drivers/net/rionet.c:197:
+		/*
+		 * XXX Need to delay queuing if ring max is reached,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#311: FILE: drivers/net/rionet.c:236:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rionet_change_mtu', this function's name, in a string
#312: FILE: drivers/net/rionet.c:237:
+		       "%s: rionet_change_mtu(): not implemented\n", DRV_NAME);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#322: FILE: drivers/net/rionet.c:247:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rionet_set_multicast_list', this function's name, in a string
#323: FILE: drivers/net/rionet.c:248:
+		       "%s: rionet_set_multicast_list(): not implemented\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#335: FILE: drivers/net/rionet.c:260:
+		printk(KERN_INFO "%s: doorbell sid %4.4x tid %4.4x info %4.4x",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#350: FILE: drivers/net/rionet.c:275:
+			printk(KERN_WARNING "%s: unhandled doorbell\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#362: FILE: drivers/net/rionet.c:287:
+		printk(KERN_INFO "%s: inbound message event, mbox %d slot %d\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#366: FILE: drivers/net/rionet.c:291:
+	if ((n = rionet_rx_clean(ndev)) != rnet->rx_slot)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#379: FILE: drivers/net/rionet.c:304:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#406: FILE: drivers/net/rionet.c:331:
+		printk(KERN_INFO "%s: open\n", DRV_NAME);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: drivers/net/rionet.c:333:
+	if ((rc = rio_request_inb_dbell(rnet->mport,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: drivers/net/rionet.c:339:
+	if ((rc = rio_request_inb_mbox(rnet->mport,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: drivers/net/rionet.c:345:
+	if ((rc = rio_request_outb_mbox(rnet->mport,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#444: FILE: drivers/net/rionet.c:369:
+		if (!(peer->res = rio_request_outb_dbell(peer->rdev,
+							 RIONET_DOORBELL_JOIN,
+							 RIONET_DOORBELL_LEAVE)))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#444: FILE: drivers/net/rionet.c:369:
+		if (!(peer->res = rio_request_outb_dbell(peer->rdev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#448: FILE: drivers/net/rionet.c:373:
+			printk(KERN_ERR "%s: error requesting doorbells\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#454: FILE: drivers/net/rionet.c:379:
+		/*
+		 * If device has initialized inbound doorbells,

WARNING:INDENTED_LABEL: labels should not be indented
#462: FILE: drivers/net/rionet.c:387:
+      out:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#473: FILE: drivers/net/rionet.c:398:
+		printk(KERN_INFO "%s: close\n", DRV_NAME);

WARNING:CONST_STRUCT: struct ethtool_ops should normally be const
#547: FILE: drivers/net/rionet.c:472:
+static struct ethtool_ops rionet_ethtool_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ndev"
#563: FILE: drivers/net/rionet.c:488:
+	if (ndev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#564: FILE: drivers/net/rionet.c:489:
+		printk(KERN_INFO "%s: could not allocate ethernet device.\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#571: FILE: drivers/net/rionet.c:496:
+	/*
+	 * XXX hack, store point a static at ndev so we can get it...

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: drivers/net/rionet.c:534:
+	printk("%s: %s %s Version %s, MAC %02x:%02x:%02x:%02x:%02x:%02x\n",

WARNING:INDENTED_LABEL: labels should not be indented
#617: FILE: drivers/net/rionet.c:542:
+      out:

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#622: FILE: drivers/net/rionet.c:547:
+/*
+ * XXX Make multi-net safe

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#635: FILE: drivers/net/rionet.c:560:
+	/*
+	 * First time through, make sure local device is rionet

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#646: FILE: drivers/net/rionet.c:571:
+			printk(KERN_ERR

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#659: FILE: drivers/net/rionet.c:584:
+	/*
+	 * If the remote device has mailbox/doorbell capabilities,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: drivers/net/rionet.c:588:
+		if (!(peer = kmalloc(sizeof(struct rionet_peer), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*peer)...) over kmalloc(sizeof(struct rionet_peer)...)
#663: FILE: drivers/net/rionet.c:588:
+		if (!(peer = kmalloc(sizeof(struct rionet_peer), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:INDENTED_LABEL: labels should not be indented
#671: FILE: drivers/net/rionet.c:596:
+      out:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178918.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 31 warnings, 12 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178918.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
