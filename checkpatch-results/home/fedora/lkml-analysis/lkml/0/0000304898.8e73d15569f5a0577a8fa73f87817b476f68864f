WARNING:TYPO_SPELLING: 'messag' may be misspelled - perhaps 'message'?
#18: 
Subject: RE: 2.4.25-rc1: Inconsistent ioctl symbol usage in drivers/messag
                                                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#37: 
>  > > filp->f_op->ioctl(filp->f_dentry->d_inode, filp, cmd, arg)
                                                  ^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#66: FILE: drivers/message/fusion/linux_compat.h:12:
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#115: FILE: drivers/message/fusion/mptctl.c:2728:
+			unsigned long arg, struct file *filp)
 			                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/message/fusion/mptctl.c:2728:
+compat_mptctl_ioctl(unsigned int fd, unsigned int cmd,
+			unsigned long arg, struct file *filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#119: FILE: drivers/message/fusion/mptctl.c:2732:
+	return mptctl_ioctl(filp->f_dentry->d_inode, filp, cmd, arg);
 	                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/message/fusion/mptctl.c:2880:
+	err = register_ioctl32_conversion(MPTTARGETINFO,
 	if (++where && err) goto out_fail;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: drivers/message/fusion/mptctl.c:2884:
+	err = register_ioctl32_conversion(MPTEVENTQUERY,
 	if (++where && err) goto out_fail;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: drivers/message/fusion/mptctl.c:2886:
+	err = register_ioctl32_conversion(MPTEVENTENABLE,
 	if (++where && err) goto out_fail;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/message/fusion/mptctl.c:2888:
+	err = register_ioctl32_conversion(MPTEVENTREPORT,
 	if (++where && err) goto out_fail;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/message/fusion/mptctl.c:2890:
+	err = register_ioctl32_conversion(MPTHARDRESET,
 	if (++where && err) goto out_fail;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: drivers/message/fusion/mptctl.c:2897:
+	err = register_ioctl32_conversion(HP_GETHOSTINFO,
 	if (++where && err) goto out_fail;

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: drivers/message/fusion/mptctl.c:2899:
+^I    ^I^I^I^Icompat_mptctl_ioctl);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: drivers/message/fusion/mptctl.c:2899:
+^I    ^I^I^I^Icompat_mptctl_ioctl);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/message/fusion/mptctl.c:2899:
+	err = register_ioctl32_conversion(HP_GETTARGETINFO,
+	    				compat_mptctl_ioctl);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#187: FILE: drivers/message/fusion/mptscsih.c:917:
+			if((xfer_cnt == 0 ) || (sc->underflow > xfer_cnt)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xfer_cnt == 0'
#187: FILE: drivers/message/fusion/mptscsih.c:917:
+			if((xfer_cnt == 0 ) || (sc->underflow > xfer_cnt)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sc->underflow > xfer_cnt'
#187: FILE: drivers/message/fusion/mptscsih.c:917:
+			if((xfer_cnt == 0 ) || (sc->underflow > xfer_cnt)) {

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: drivers/message/fusion/mptscsih.c:917:
+			if((xfer_cnt == 0 ) || (sc->underflow > xfer_cnt)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#187: FILE: drivers/message/fusion/mptscsih.c:917:
+			if((xfer_cnt == 0 ) || (sc->underflow > xfer_cnt)) {
+				sc->result = DID_SOFT_ERROR << 16;
 			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000304898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 10 checks, 104 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000304898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
