WARNING:TYPO_SPELLING: 'arbitarily' may be misspelled - perhaps 'arbitrarily'?
#27: 
instead of copying and arbitarily imposing a name length limit on the
                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
I didn't audit the complete tree that modules do always destroy their caches

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: fs/bio.c:462:
+^I^Ichar *name = bvec_pool_names[i]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: fs/bio.c:469:
+		sprintf(name, "biovec-%d",bvec_pool_sizes[i]);
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: mm/slab.c:355:
 };
+/* Must match cache_sizes above. Out of line to keep cache footprint low. */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#114: FILE: mm/slab.c:356:
+#define CN(x) { x, x " (DMA)" }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: mm/slab.c:357:
+static char cache_names[][2][18] = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: mm/slab.c:373:
+}; $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#132: FILE: mm/slab.c:374:
+}; 
+#undef CN

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: mm/slab.c:472:
+^I^I^Ikmem_cache_create(cache_names[sizes-cache_sizes][0], $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#151: FILE: mm/slab.c:472:
+			kmem_cache_create(cache_names[sizes-cache_sizes][0], 
 			                                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#163: FILE: mm/slab.c:483:
+		sizes->cs_dmacachep = kmem_cache_create(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: mm/slab.c:484:
+^I^I    cache_names[sizes-cache_sizes][1], $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#164: FILE: mm/slab.c:484:
+		    cache_names[sizes-cache_sizes][1], 
 		                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#166: FILE: mm/slab.c:486:
+			SLAB_CACHE_DMA|SLAB_HWCACHE_ALIGN, NULL, NULL);
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: mm/slab.c:628:
+ * the module calling this has to destroy the cache before getting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: mm/slab.c:630:
+ * $

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#210: FILE: mm/slab.c:838:
+			   destroy its slab cache and noone else reuses the vmalloc
 			                              ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#210: FILE: mm/slab.c:838:
+			/* This happens when the module gets unloaded and doesn't
+			   destroy its slab cache and noone else reuses the vmalloc

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: mm/slab.c:839:
+			   area of the module. Print a warning. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: mm/slab.c:840:
+^I^I^Iif (__get_user(tmp,pc->name)) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: mm/slab.c:840:
+			if (__get_user(tmp,pc->name)) { 
 			                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: mm/slab.c:841:
+^I^I^I^Iprintk("SLAB: cache with size %d has lost its name\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: mm/slab.c:841:
+				printk("SLAB: cache with size %d has lost its name\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: mm/slab.c:842:
+^I^I^I^I^Ipc->objsize); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: mm/slab.c:842:
+				printk("SLAB: cache with size %d has lost its name\n", 
+					pc->objsize); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: mm/slab.c:843:
+^I^I^I^Icontinue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: mm/slab.c:844:
+^I^I^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: mm/slab.c:844:
+^I^I^I} ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: mm/slab.c:845:
+^I^I^Iif (!strcmp(pc->name,name)) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: mm/slab.c:845:
+			if (!strcmp(pc->name,name)) { 
 			                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: mm/slab.c:846:
+^I^I^I^Iprintk("kmem_cache_create: duplicate cache %s\n",name); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#218: FILE: mm/slab.c:846:
+				printk("kmem_cache_create: duplicate cache %s\n",name); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: mm/slab.c:846:
+				printk("kmem_cache_create: duplicate cache %s\n",name); 
 				                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: mm/slab.c:847:
+^I^I^I^Iup(&cache_chain_sem); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: mm/slab.c:848:
+^I^I^I^IBUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: mm/slab.c:848:
+				BUG(); 

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: mm/slab.c:849:
+^I^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: mm/slab.c:1913:
+^I^Iconst char *name; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: mm/slab.c:1942:
+^I^Iname = cachep->name; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: mm/slab.c:1944:
+^I^Ichar tmp; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: mm/slab.c:1945:
+^I^Iif (__get_user(tmp, name)) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: mm/slab.c:1945:
+		char tmp; 
+		if (__get_user(tmp, name)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: mm/slab.c:1946:
+^I^I^Iname = "broken"; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: mm/slab.c:1947:
+^I^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: mm/slab.c:1947:
+^I^I} ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: drivers/scsi/scsi.c:96:
+static char scsi_host_sg_names[SG_MEMPOOL_NR][18]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: drivers/scsi/scsi.c:2501:
+^I^Ichar *name = scsi_host_sg_names[i]; $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000480386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 11 warnings, 8 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000480386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
