WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.3/include/linux/smp.h working-2.5.3-percpu/include/linux/smp.h

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((section(".data.percpu")))
#39: FILE: include/linux/smp.h:75:
+#define __per_cpu_data	__attribute__((section(".data.percpu")))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: init/main.c:288:
+	extern char __per_cpu_start[], __per_cpu_end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#87: FILE: init/main.c:292:
+	ptr = alloc_bootmem(size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#89: FILE: init/main.c:294:
+	for (i = 0; i < NR_CPUS; i++, ptr += size) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#115: FILE: include/linux/compiler.h:17:
+/* This macro obfuscates arithmetic on a variable address so that gcc
+   shouldn't recognize the original var, and make assumptions about it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#115: FILE: include/linux/compiler.h:17:
+   shouldn't recognize the original var, and make assumptions about it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */
 	                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */
 	                                              ^

CHECK:SPACING: space preferred before that '/' (ctx:OxE)
#116: FILE: include/linux/compiler.h:18:
+	strcpy(s, "xxx"+X) => memcpy(s, "xxx"+X, 4-X) */
 	                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#117: FILE: include/linux/compiler.h:19:
+#define RELOC_HIDE(var, off)						\
+  ({ __typeof__(&(var)) __ptr;					\
+    __asm__ ("" : "=g"(__ptr) : "0"((void *)&(var) + (off)));	\
+    *__ptr; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/linux/compiler.h:20:
+  ({ __typeof__(&(var)) __ptr;^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#118: FILE: include/linux/compiler.h:20:
+  ({ __typeof__(&(var)) __ptr;					\
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/linux/compiler.h:21:
+    __asm__ ("" : "=g"(__ptr) : "0"((void *)&(var) + (off)));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/linux/compiler.h:22:
+    *__ptr; })$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))
                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))
                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))
                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#129: FILE: include/linux/cache.h:7:
+#define ALIGN(x,a) (((x)+(a)-1)&~((a)-1))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 11 warnings, 12 checks, 115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
