WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#32: 
This part has changed alot again:
                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->direct_IO'
#53: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->get_xip_page'
#53: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#66: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#66: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#66: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: include/linux/fs.h:334:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,
+			int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/fs.h:1501:
+extern ssize_t xip_file_aio_read(struct kiocb *iocb, char __user *buf,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#78: FILE: include/linux/fs.h:1503:
+extern ssize_t xip_file_readv(struct file *filp, const struct iovec *iov,
                                            ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/fs.h:1503:
+extern ssize_t xip_file_readv(struct file *filp, const struct iovec *iov,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/fs.h:1505:
+extern ssize_t xip_file_sendfile(struct file *in_file, loff_t *ppos,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/linux/fs.h:1508:
+extern int xip_file_mmap(struct file * file, struct vm_area_struct * vma);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/linux/fs.h:1508:
+extern int xip_file_mmap(struct file * file, struct vm_area_struct * vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/fs.h:1508:
+extern int xip_file_mmap(struct file * file, struct vm_area_struct * vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/fs.h:1509:
+extern ssize_t xip_file_aio_write(struct kiocb *iocb, const char __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/fs.h:1511:
+extern ssize_t xip_file_writev(struct file *file, const struct iovec *iov,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/fs.h:1513:
+extern int xip_truncate_page(struct address_space *mapping, loff_t from);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#103: FILE: include/linux/rmap.h:98:
+pte_t *page_check_address(struct page *, struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#103: FILE: include/linux/rmap.h:98:
+pte_t *page_check_address(struct page *, struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#103: FILE: include/linux/rmap.h:98:
+pte_t *page_check_address(struct page *, struct mm_struct *, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: include/linux/rmap.h:100:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#220: FILE: mm/filemap.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#235: FILE: mm/filemap.h:16:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: mm/filemap.h:19:
+__filemap_copy_from_user_iovec(char *vaddr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#245: FILE: mm/filemap.h:26:
+ * were sucessfully copied.  If a fault is encountered then clear the page
         ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: mm/filemap.h:31:
+filemap_copy_from_user(struct page *page, unsigned long offset,
+			const char __user *buf, unsigned bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#250: FILE: mm/filemap.h:31:
+			const char __user *buf, unsigned bytes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: mm/filemap.h:57:
+filemap_copy_from_user_iovec(struct page *page, unsigned long offset,
+			const struct iovec *iov, size_t base, size_t bytes)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#318: FILE: mm/filemap_xip.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#319: FILE: mm/filemap_xip.c:2:
+ *	linux/mm/filemap_xip.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: mm/filemap_xip.c:20:
+ * This is a file read routine for execute in place files, and uses $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#346: FILE: mm/filemap_xip.c:29:
+		    struct file *filp,
 		                 ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: mm/filemap_xip.c:38:
+	BUG_ON(!mapping->a_ops->get_xip_page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#375: FILE: mm/filemap_xip.c:58:
+			if (nr <= offset) {
+				goto out;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#382: FILE: mm/filemap_xip.c:65:
+			index*(PAGE_SIZE/512), 0);
 			     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#382: FILE: mm/filemap_xip.c:65:
+			index*(PAGE_SIZE/512), 0);
 			                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#385: FILE: mm/filemap_xip.c:68:
+		if (unlikely(IS_ERR(page))) {
[...]
+		} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#385: FILE: mm/filemap_xip.c:68:
+		if (unlikely(IS_ERR(page))) {

CHECK:BRACES: Unbalanced braces around else statement
#393: FILE: mm/filemap_xip.c:76:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: mm/filemap_xip.c:77:
+			BUG_ON(!PageUptodate(page));

CHECK:SPACING: No space is necessary after a cast
#429: FILE: mm/filemap_xip.c:112:
+	*ppos = ((loff_t) index << PAGE_CACHE_SHIFT) + offset;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#430: FILE: mm/filemap_xip.c:113:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#431: FILE: mm/filemap_xip.c:114:
+		file_accessed(filp);
 		              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: mm/filemap_xip.c:123:
+__xip_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#442: FILE: mm/filemap_xip.c:125:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#456: FILE: mm/filemap_xip.c:139:
+		if (unlikely((ssize_t)(count|iv->iov_len) < 0))
 		                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#478: FILE: mm/filemap_xip.c:161:
+			do_xip_mapping_read(filp->f_mapping, &filp->f_ra, filp,
 			                                                  ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: mm/filemap_xip.c:179:
+	BUG_ON(iocb->ki_pos != pos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#502: FILE: mm/filemap_xip.c:185:
+xip_file_readv(struct file *filp, const struct iovec *iov,
                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#507: FILE: mm/filemap_xip.c:190:
+	init_sync_kiocb(&kiocb, filp);
 	                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: mm/filemap_xip.c:197:
+xip_file_sendfile(struct file *in_file, loff_t *ppos,
+	     size_t count, read_actor_t actor, void *target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#542: FILE: mm/filemap_xip.c:225:
+__xip_unmap (struct address_space * mapping,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#542: FILE: mm/filemap_xip.c:225:
+__xip_unmap (struct address_space * mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: mm/filemap_xip.c:226:
+__xip_unmap (struct address_space * mapping,
+		     unsigned long pgoff)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#557: FILE: mm/filemap_xip.c:240:
+		BUG_ON(address < vma->vm_start || address >= vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: mm/filemap_xip.c:251:
+			BUG_ON(pte_dirty(pteval));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: mm/filemap_xip.c:266:
+xip_file_nopage(struct vm_area_struct * area,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: mm/filemap_xip.c:267:
+xip_file_nopage(struct vm_area_struct * area,
+		   unsigned long address,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#599: FILE: mm/filemap_xip.c:282:
+	if (pgoff >= size) {
+		return NULL;
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#603: FILE: mm/filemap_xip.c:286:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#603: FILE: mm/filemap_xip.c:286:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: mm/filemap_xip.c:288:
+		BUG_ON(!PageUptodate(page));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#613: FILE: mm/filemap_xip.c:296:
+	    (area->vm_flags & (VM_SHARED| VM_MAYSHARE)) &&
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: mm/filemap_xip.c:299:
+		page = mapping->a_ops->get_xip_page (mapping,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#617: FILE: mm/filemap_xip.c:300:
+			pgoff*(PAGE_SIZE/512), 1);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#617: FILE: mm/filemap_xip.c:300:
+			pgoff*(PAGE_SIZE/512), 1);
 			                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: mm/filemap_xip.c:303:
+		BUG_ON(!PageUptodate(page));

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#631: FILE: mm/filemap_xip.c:314:
+static struct vm_operations_struct xip_file_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: mm/filemap_xip.c:318:
+int xip_file_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: mm/filemap_xip.c:318:
+int xip_file_mmap(struct file * file, struct vm_area_struct * vma)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: mm/filemap_xip.c:320:
+	BUG_ON(!file->f_mapping->a_ops->get_xip_page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#651: FILE: mm/filemap_xip.c:334:
+	struct address_space * mapping = file->f_mapping;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#652: FILE: mm/filemap_xip.c:335:
+	struct address_space_operations *a_ops = mapping->a_ops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#653: FILE: mm/filemap_xip.c:336:
+^Istruct inode ^I*inode = mapping->host;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: mm/filemap_xip.c:345:
+	BUG_ON(!mapping->a_ops->get_xip_page);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#670: FILE: mm/filemap_xip.c:353:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#685: FILE: mm/filemap_xip.c:368:
+						    index*(PAGE_SIZE/512), 0);
 						         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#685: FILE: mm/filemap_xip.c:368:
+						    index*(PAGE_SIZE/512), 0);
 						                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#689: FILE: mm/filemap_xip.c:372:
+				index*(PAGE_SIZE/512), 1);
 				     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#689: FILE: mm/filemap_xip.c:372:
+				index*(PAGE_SIZE/512), 1);
 				                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#690: FILE: mm/filemap_xip.c:373:
+			if (!IS_ERR(page))
[...]
+			__xip_unmap(mapping, index);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#694: FILE: mm/filemap_xip.c:377:
+
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#701: FILE: mm/filemap_xip.c:384:
+		BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: mm/filemap_xip.c:391:
+			copied = filemap_copy_from_user_iovec(page, offset,
+						cur_iov, iov_base, bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: mm/filemap_xip.c:403:
+					filemap_set_next_iovec(&cur_iov,
+							&iov_base, status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: mm/filemap_xip.c:427:
+xip_file_aio_write_nolock(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#747: FILE: mm/filemap_xip.c:430:
+	struct address_space * mapping = file->f_mapping;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#750: FILE: mm/filemap_xip.c:433:
+^Istruct inode ^I*inode = mapping->host;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#765: FILE: mm/filemap_xip.c:448:
+		if (unlikely((ssize_t)(ocount|iv->iov_len) < 0))
 		                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#797: FILE: mm/filemap_xip.c:480:
+	written = do_xip_file_write (iocb, iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: mm/filemap_xip.c:481:
+	written = do_xip_file_write (iocb, iov,
+				  nr_segs, pos, ppos, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: mm/filemap_xip.c:498:
+xip_file_aio_write(struct kiocb *iocb, const char __user *buf,
+		       size_t count, loff_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#824: FILE: mm/filemap_xip.c:507:
+	BUG_ON(iocb->ki_pos != pos);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#856: FILE: mm/filemap_xip.c:539:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#856: FILE: mm/filemap_xip.c:539:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#857: FILE: mm/filemap_xip.c:540:
+	unsigned blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#858: FILE: mm/filemap_xip.c:541:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#863: FILE: mm/filemap_xip.c:546:
+	BUG_ON(!mapping->a_ops->get_xip_page);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#875: FILE: mm/filemap_xip.c:558:
+					    index*(PAGE_SIZE/512), 0);
 					         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#875: FILE: mm/filemap_xip.c:558:
+					    index*(PAGE_SIZE/512), 0);
 					                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#879: FILE: mm/filemap_xip.c:562:
+	if (unlikely(IS_ERR(page))) {
[...]
+	} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#879: FILE: mm/filemap_xip.c:562:
+	if (unlikely(IS_ERR(page))) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#883: FILE: mm/filemap_xip.c:566:
+			return 0;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#887: FILE: mm/filemap_xip.c:570:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#888: FILE: mm/filemap_xip.c:571:
+		BUG_ON(!PageUptodate(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 50 warnings, 45 checks, 833 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
