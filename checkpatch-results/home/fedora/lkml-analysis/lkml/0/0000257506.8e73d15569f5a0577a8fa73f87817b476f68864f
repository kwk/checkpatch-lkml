ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Jean Delvare <khali at linux-fr dot org>'
#39: 
Signed-off-by: Jean Delvare <khali at linux-fr dot org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: drivers/i2c/chips/smsc47m1.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#88: FILE: drivers/i2c/chips/smsc47m1.c:2:
+/*
+    smsc47m1.c - Part of lm_sensors, Linux kernel modules

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: drivers/i2c/chips/smsc47m1.c:3:
+                 for hardware monitoring$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: drivers/i2c/chips/smsc47m1.c:11:
+                        and Jean Delvare$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#110: FILE: drivers/i2c/chips/smsc47m1.c:24:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#111: FILE: drivers/i2c/chips/smsc47m1.c:25:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#120: FILE: drivers/i2c/chips/smsc47m1.c:34:
+#include <asm/io.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: drivers/i2c/chips/smsc47m1.c:107:
+#define MIN_FROM_REG(reg,div)		((reg)>=192 ? 0 : \
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#193: FILE: drivers/i2c/chips/smsc47m1.c:107:
+#define MIN_FROM_REG(reg,div)		((reg)>=192 ? 0 : \
                              		      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#193: FILE: drivers/i2c/chips/smsc47m1.c:107:
+#define MIN_FROM_REG(reg,div)		((reg)>=192 ? 0 : \
+					 983040/((192-(reg))*(div)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#194: FILE: drivers/i2c/chips/smsc47m1.c:108:
+					 983040/((192-(reg))*(div)))
 					       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#194: FILE: drivers/i2c/chips/smsc47m1.c:108:
+					 983040/((192-(reg))*(div)))
 					             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#194: FILE: drivers/i2c/chips/smsc47m1.c:108:
+					 983040/((192-(reg))*(div)))
 					                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
                             ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
                                      	      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
                                      	                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
+					 983040/(((reg)-(preload))*(div)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preload' - possible side-effects?
#195: FILE: drivers/i2c/chips/smsc47m1.c:109:
+#define FAN_FROM_REG(reg,div,preload)	((reg)<=(preload) || (reg)==255 ? 0 : \
+					 983040/(((reg)-(preload))*(div)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#196: FILE: drivers/i2c/chips/smsc47m1.c:110:
+					 983040/(((reg)-(preload))*(div)))
 					       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#196: FILE: drivers/i2c/chips/smsc47m1.c:110:
+					 983040/(((reg)-(preload))*(div)))
 					               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#196: FILE: drivers/i2c/chips/smsc47m1.c:110:
+					 983040/(((reg)-(preload))*(div)))
 					                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: drivers/i2c/chips/smsc47m1.c:131:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/i2c/chips/smsc47m1.c:141:
+static struct smsc47m1_data *smsc47m1_update_device(struct device *dev,
+		int init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#229: FILE: drivers/i2c/chips/smsc47m1.c:143:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#247: FILE: drivers/i2c/chips/smsc47m1.c:161:
+	/* This chip (stupidly) stops monitoring fan speed if PWM is
+	   enabled and duty cycle is 0%. This is fine if the monitoring

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: drivers/i2c/chips/smsc47m1.c:163:
+	   not (which could as well happen). */

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: drivers/i2c/chips/smsc47m1.c:182:
+	struct smsc47m1_data *data = smsc47m1_update_device(dev, 0);
+	return sprintf(buf, "%d\n", DIV_FROM_REG(data->fan_div[nr]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: drivers/i2c/chips/smsc47m1.c:188:
+	struct smsc47m1_data *data = smsc47m1_update_device(dev, 0);
+	return sprintf(buf, "%d\n", PWM_FROM_REG(data->pwm[nr]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: drivers/i2c/chips/smsc47m1.c:194:
+	struct smsc47m1_data *data = smsc47m1_update_device(dev, 0);
+	return sprintf(buf, "%d\n", PWM_EN_FROM_REG(data->pwm[nr]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: drivers/i2c/chips/smsc47m1.c:200:
+	struct smsc47m1_data *data = smsc47m1_update_device(dev, 0);
+	return sprintf(buf, "%d\n", data->alarms);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/i2c/chips/smsc47m1.c:204:
+static ssize_t set_fan_min(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#295: FILE: drivers/i2c/chips/smsc47m1.c:209:
+	long rpmdiv = simple_strtol(buf, NULL, 10)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#309: FILE: drivers/i2c/chips/smsc47m1.c:223:
+/* Note: we save and restore the fan minimum here, because its value is
+   determined in part by the fan clock divider.  This follows the principle

WARNING:TYPO_SPELLING: 'suprise' may be misspelled - perhaps 'surprise'?
#310: FILE: drivers/i2c/chips/smsc47m1.c:224:
+   of least suprise; the user doesn't expect the fan minimum to change just
             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#311: FILE: drivers/i2c/chips/smsc47m1.c:225:
+   because the divider changed. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/i2c/chips/smsc47m1.c:227:
+static ssize_t set_fan_div(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#318: FILE: drivers/i2c/chips/smsc47m1.c:232:
+	long new_div = simple_strtol(buf, NULL, 10), tmp;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#324: FILE: drivers/i2c/chips/smsc47m1.c:238:
+	case 1: data->fan_div[nr] = 0; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#325: FILE: drivers/i2c/chips/smsc47m1.c:239:
+	case 2: data->fan_div[nr] = 1; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#326: FILE: drivers/i2c/chips/smsc47m1.c:240:
+	case 4: data->fan_div[nr] = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#327: FILE: drivers/i2c/chips/smsc47m1.c:241:
+	case 8: data->fan_div[nr] = 3; break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/i2c/chips/smsc47m1.c:260:
+static ssize_t set_fan_pwm(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#351: FILE: drivers/i2c/chips/smsc47m1.c:265:
+	long val = simple_strtol(buf, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/i2c/chips/smsc47m1.c:279:
+static ssize_t set_fan_pwm_en(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#370: FILE: drivers/i2c/chips/smsc47m1.c:284:
+	long val = simple_strtol(buf, NULL, 10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: drivers/i2c/chips/smsc47m1.c:285:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#384: FILE: drivers/i2c/chips/smsc47m1.c:298:
+#define fan_present(offset)						\
+static ssize_t get_fan##offset (struct device *dev, char *buf)		\
+{									\
+	return get_fan(dev, buf, 0x##offset - 1);			\
+}									\
+static ssize_t get_fan##offset##_min (struct device *dev, char *buf)	\
+{									\
+	return get_fan_min(dev, buf, 0x##offset - 1);			\
+}									\
+static ssize_t set_fan##offset##_min (struct device *dev,		\
+		const char *buf, size_t count)				\
+{									\
+	return set_fan_min(dev, buf, count, 0x##offset - 1);		\
+}									\
+static ssize_t get_fan##offset##_div (struct device *dev, char *buf)	\
+{									\
+	return get_fan_div(dev, buf, 0x##offset - 1);			\
+}									\
+static ssize_t set_fan##offset##_div (struct device *dev,		\
+		const char *buf, size_t count)				\
+{									\
+	return set_fan_div(dev, buf, count, 0x##offset - 1);		\
+}									\
+static ssize_t get_fan##offset##_pwm (struct device *dev, char *buf)	\
+{									\
+	return get_fan_pwm(dev, buf, 0x##offset - 1);			\
+}									\
+static ssize_t set_fan##offset##_pwm (struct device *dev,		\
+		const char *buf, size_t count)				\
+{									\
+	return set_fan_pwm(dev, buf, count, 0x##offset - 1);		\
+}									\
+static ssize_t get_fan##offset##_pwm_en (struct device *dev, char *buf)	\
+{									\
+	return get_fan_pwm_en(dev, buf, 0x##offset - 1);		\
+}									\
+static ssize_t set_fan##offset##_pwm_en (struct device *dev,		\
+		const char *buf, size_t count)				\
+{									\
+	return set_fan_pwm_en(dev, buf, count, 0x##offset - 1);		\
+}									\
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, get_fan##offset,	\
+		NULL);							\
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR,		\
+		get_fan##offset##_min, set_fan##offset##_min);		\
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR,		\
+		get_fan##offset##_div, set_fan##offset##_div);		\
+static DEVICE_ATTR(fan##offset##_pwm, S_IRUGO | S_IWUSR,		\
+		get_fan##offset##_pwm, set_fan##offset##_pwm);		\
+static DEVICE_ATTR(fan##offset##_pwm_enable, S_IRUGO | S_IWUSR,		\
+		get_fan##offset##_pwm_en, set_fan##offset##_pwm_en);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#385: FILE: drivers/i2c/chips/smsc47m1.c:299:
+static ssize_t get_fan##offset (struct device *dev, char *buf)		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: drivers/i2c/chips/smsc47m1.c:303:
+static ssize_t get_fan##offset##_min (struct device *dev, char *buf)	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#393: FILE: drivers/i2c/chips/smsc47m1.c:307:
+static ssize_t set_fan##offset##_min (struct device *dev,		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#398: FILE: drivers/i2c/chips/smsc47m1.c:312:
+static ssize_t get_fan##offset##_div (struct device *dev, char *buf)	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#402: FILE: drivers/i2c/chips/smsc47m1.c:316:
+static ssize_t set_fan##offset##_div (struct device *dev,		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: drivers/i2c/chips/smsc47m1.c:321:
+static ssize_t get_fan##offset##_pwm (struct device *dev, char *buf)	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: drivers/i2c/chips/smsc47m1.c:325:
+static ssize_t set_fan##offset##_pwm (struct device *dev,		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: drivers/i2c/chips/smsc47m1.c:330:
+static ssize_t get_fan##offset##_pwm_en (struct device *dev, char *buf)	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: drivers/i2c/chips/smsc47m1.c:334:
+static ssize_t set_fan##offset##_pwm_en (struct device *dev,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#425: FILE: drivers/i2c/chips/smsc47m1.c:339:
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, get_fan##offset,	\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#427: FILE: drivers/i2c/chips/smsc47m1.c:341:
+static DEVICE_ATTR(fan##offset##_min, S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#429: FILE: drivers/i2c/chips/smsc47m1.c:343:
+static DEVICE_ATTR(fan##offset##_div, S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#431: FILE: drivers/i2c/chips/smsc47m1.c:345:
+static DEVICE_ATTR(fan##offset##_pwm, S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#433: FILE: drivers/i2c/chips/smsc47m1.c:347:
+static DEVICE_ATTR(fan##offset##_pwm_enable, S_IRUGO | S_IWUSR,		\

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'get_alarms' to 'alarms_show'
#439: FILE: drivers/i2c/chips/smsc47m1.c:353:
+static DEVICE_ATTR(alarms, S_IRUGO, get_alarms, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#439: FILE: drivers/i2c/chips/smsc47m1.c:353:
+static DEVICE_ATTR(alarms, S_IRUGO, get_alarms, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#461: FILE: drivers/i2c/chips/smsc47m1.c:375:
+	if (val == 0x51)
[...]
+	else if (val == 0x59)
[...]
+	else if (val == 0x5F)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#462: FILE: drivers/i2c/chips/smsc47m1.c:376:
+		printk(KERN_INFO "smsc47m1: Found SMSC47B27x\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#464: FILE: drivers/i2c/chips/smsc47m1.c:378:
+		printk(KERN_INFO "smsc47m1: Found SMSC47M10x/SMSC47M13x\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#466: FILE: drivers/i2c/chips/smsc47m1.c:380:
+		printk(KERN_INFO "smsc47m1: Found SMSC47M14x\n");

CHECK:BRACES: Unbalanced braces around else statement
#467: FILE: drivers/i2c/chips/smsc47m1.c:381:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#477: FILE: drivers/i2c/chips/smsc47m1.c:391:
+		printk(KERN_INFO "smsc47m1: Device is disabled, will not use\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#492: FILE: drivers/i2c/chips/smsc47m1.c:406:
+	if (!i2c_is_isa_adapter(adapter)) {
+		return 0;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#501: FILE: drivers/i2c/chips/smsc47m1.c:415:
+	if (!(data = kmalloc(sizeof(struct smsc47m1_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct smsc47m1_data)...)
#501: FILE: drivers/i2c/chips/smsc47m1.c:415:
+	if (!(data = kmalloc(sizeof(struct smsc47m1_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#515: FILE: drivers/i2c/chips/smsc47m1.c:429:
+	strlcpy(new_client->name, "smsc47m1", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#520: FILE: drivers/i2c/chips/smsc47m1.c:434:
+	if ((err = i2c_attach_client(new_client)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#524: FILE: drivers/i2c/chips/smsc47m1.c:438:
+	/* Some values (fan min, clock dividers, pwm registers) may be
+	   needed before any update is triggered, so we better read them

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#528: FILE: drivers/i2c/chips/smsc47m1.c:442:
+	   function. */

CHECK:BRACES: Unbalanced braces around else statement
#536: FILE: drivers/i2c/chips/smsc47m1.c:450:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: drivers/i2c/chips/smsc47m1.c:452:
+		dev_dbg(&new_client->dev, "Fan 1 not enabled by hardware, "
+			"skipping\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#545: FILE: drivers/i2c/chips/smsc47m1.c:459:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#547: FILE: drivers/i2c/chips/smsc47m1.c:461:
+		dev_dbg(&new_client->dev, "Fan 2 not enabled by hardware, "
+			"skipping\n");

CHECK:BRACES: Unbalanced braces around else statement
#553: FILE: drivers/i2c/chips/smsc47m1.c:467:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#555: FILE: drivers/i2c/chips/smsc47m1.c:469:
+		dev_dbg(&new_client->dev, "PWM 1 not enabled by hardware, "
+			"skipping\n");

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: drivers/i2c/chips/smsc47m1.c:474:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#562: FILE: drivers/i2c/chips/smsc47m1.c:476:
+		dev_dbg(&new_client->dev, "PWM 2 not enabled by hardware, "
+			"skipping\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#579: FILE: drivers/i2c/chips/smsc47m1.c:493:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#581: FILE: drivers/i2c/chips/smsc47m1.c:495:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

CHECK:SPACING: No space is necessary after a cast
#595: FILE: drivers/i2c/chips/smsc47m1.c:509:
+	down(&((struct smsc47m1_data *) i2c_get_clientdata(client))->lock);

CHECK:SPACING: No space is necessary after a cast
#597: FILE: drivers/i2c/chips/smsc47m1.c:511:
+	up(&((struct smsc47m1_data *) i2c_get_clientdata(client))->lock);

CHECK:SPACING: No space is necessary after a cast
#603: FILE: drivers/i2c/chips/smsc47m1.c:517:
+	down(&((struct smsc47m1_data *) i2c_get_clientdata(client))->lock);

CHECK:SPACING: No space is necessary after a cast
#605: FILE: drivers/i2c/chips/smsc47m1.c:519:
+	up(&((struct smsc47m1_data *) i2c_get_clientdata(client))->lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: drivers/i2c/chips/smsc47m1.c:523:
+static struct smsc47m1_data *smsc47m1_update_device(struct device *dev,
+		int init)

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: drivers/i2c/chips/smsc47m1.c:525:
+ ^Istruct i2c_client *client = to_i2c_client(dev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#611: FILE: drivers/i2c/chips/smsc47m1.c:525:
+ ^Istruct i2c_client *client = to_i2c_client(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: drivers/i2c/chips/smsc47m1.c:525:
+ ^Istruct i2c_client *client = to_i2c_client(dev);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#616: FILE: drivers/i2c/chips/smsc47m1.c:530:
+	if ((jiffies - data->last_updated > HZ + HZ / 2) ||
+	    (jiffies < data->last_updated) || init) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#617: FILE: drivers/i2c/chips/smsc47m1.c:531:
+	    (jiffies < data->last_updated) || init) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: drivers/i2c/chips/smsc47m1.c:536:
+			data->fan[i] = smsc47m1_read_value(client,
+				       SMSC47M1_REG_FAN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/i2c/chips/smsc47m1.c:538:
+			data->fan_preload[i] = smsc47m1_read_value(client,
+					       SMSC47M1_REG_FAN_PRELOAD(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/i2c/chips/smsc47m1.c:540:
+			data->pwm[i] = smsc47m1_read_value(client,
+				       SMSC47M1_REG_PWM(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: drivers/i2c/chips/smsc47m1.c:548:
+		data->alarms = smsc47m1_read_value(client,
+			       SMSC47M1_REG_ALARM) >> 6;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#648: FILE: drivers/i2c/chips/smsc47m1.c:562:
+	if (smsc47m1_find(normal_isa)) {
+		return -ENODEV;
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 50 warnings, 33 checks, 605 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
