CHECK:LINE_SPACING: Please don't use multiple blank lines
#88: FILE: include/linux/mm.h:404:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#103: FILE: include/linux/mm.h:419:
+#if SECTIONS_SHIFT+NODES_SHIFT+ZONES_SHIFT <= FLAGS_RESERVED
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#103: FILE: include/linux/mm.h:419:
+#if SECTIONS_SHIFT+NODES_SHIFT+ZONES_SHIFT <= FLAGS_RESERVED
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#118: FILE: include/linux/mm.h:434:
+#define SECTIONS_PGOFF		((sizeof(page_flags_t)*8) - SECTIONS_WIDTH)
                       		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: include/linux/mm.h:465:
+#if SECTIONS_WIDTH+NODES_WIDTH+ZONES_WIDTH > FLAGS_RESERVED
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: include/linux/mm.h:465:
+#if SECTIONS_WIDTH+NODES_WIDTH+ZONES_WIDTH > FLAGS_RESERVED
                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: include/linux/mm.h:478:
 }
+static inline struct zone *page_zone(struct page *page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#180: FILE: include/linux/mm.h:486:
+}
+static inline unsigned long page_to_section(struct page *page)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#190: FILE: include/linux/mm.h:510:
 }
+static inline void set_page_section(struct page *page, unsigned long section)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: include/linux/mmzone.h:441:
+ * SECTION_SHIFT    ^I^I#bits space required to store a section #$

CHECK:BIT_MACRO: Prefer using the BIT macro
#262: FILE: include/linux/mmzone.h:451:
+#define NR_MEM_SECTIONS	(1 << SECTIONS_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#264: FILE: include/linux/mmzone.h:453:
+#define PAGES_PER_SECTION       (1 << PFN_SECTION_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#265: FILE: include/linux/mmzone.h:454:
+#define PAGE_SECTION_MASK	(~(PAGES_PER_SECTION-1))
                          	                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: include/linux/mmzone.h:477:
+#define pfn_to_page(pfn) ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: include/linux/mmzone.h:478:
+({ ^I^I^I^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#293: FILE: include/linux/mmzone.h:482:
+#define page_to_pfn(page)						\
+({									\
+	page - mem_section[page_to_section(page)].section_mem_map;	\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#293: FILE: include/linux/mmzone.h:482:
+#define page_to_pfn(page)						\
+({									\
+	page - mem_section[page_to_section(page)].section_mem_map;	\
+})

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#330: FILE: include/linux/mmzone.h:519:
+unsigned long __init node_memmap_size_bytes(int, unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#330: FILE: include/linux/mmzone.h:519:
+unsigned long __init node_memmap_size_bytes(int, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#330: FILE: include/linux/mmzone.h:519:
+unsigned long __init node_memmap_size_bytes(int, unsigned long, unsigned long);

WARNING:TYPO_SPELLING: 'Discontigious' may be misspelled - perhaps 'Discontiguous'?
#427: FILE: mm/Kconfig:55:
+	  "Discontigious Memory".  This option provides some potential
 	   ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#519: FILE: mm/page_alloc.c:1617:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_nr' may be better as '(zone_nr)' to avoid precedence issues
#519: FILE: mm/page_alloc.c:1617:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: mm/page_alloc.c:1619:
+void zonetable_add(struct zone *zone, int nid, int zid, unsigned long pfn,
+		unsigned long size)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#592: FILE: mm/sparse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: mm/sparse.c:27:
+		unsigned long section = pfn_to_section_nr(pfn);
+		if (!mem_section[section].section_mem_map)

CHECK:SPACING: No space is necessary after a cast
#619: FILE: mm/sparse.c:28:
+			mem_section[section].section_mem_map = (void *) -1;

WARNING:TYPO_SPELLING: 'architecures' may be misspelled - perhaps 'architectures'?
#624: FILE: mm/sparse.c:33:
+ * Only used by the i386 NUMA architecures, but relatively
                               ^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: mm/sparse.c:37:
+unsigned long __init node_memmap_size_bytes(int nid, unsigned long start_pfn,
+						     unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: mm/sparse.c:71:
+			map = alloc_bootmem_node(NODE_DATA(nid),
+				sizeof(struct page) * PAGES_PER_SECTION);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185649.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 20 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185649.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
