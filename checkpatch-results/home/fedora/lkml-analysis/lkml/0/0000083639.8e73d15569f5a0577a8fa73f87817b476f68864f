WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/gfs2/lm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'arguements' may be misspelled - perhaps 'arguments'?
#78: FILE: fs/gfs2/lm.c:31:
+ * @args: mount arguements
                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#135: FILE: fs/gfs2/lm.c:88:
+		sdp->sd_lockstruct.ls_ops->lm_others_may_mount(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: fs/gfs2/lm.c:110:
+	BUG_ON(sdp->sd_args.ar_debug);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: fs/gfs2/lm.c:111:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: fs/gfs2/lm.c:112:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'oustanding' may be misspelled - perhaps 'outstanding'?
#162: FILE: fs/gfs2/lm.c:115:
+	/* FIXME: suspend dm device so oustanding bio's complete
 	                               ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#163: FILE: fs/gfs2/lm.c:116:
+	/* FIXME: suspend dm device so oustanding bio's complete
+	   and all further io requests fail */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#163: FILE: fs/gfs2/lm.c:116:
+	   and all further io requests fail */

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: fs/gfs2/lm.c:130:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#180: FILE: fs/gfs2/lm.c:133:
+		error = sdp->sd_lockstruct.ls_ops->lm_get_lock(

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: fs/gfs2/lm.c:149:
+	int ret;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: fs/gfs2/lm.c:162:
+	int ret;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: fs/gfs2/lm.c:178:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: fs/gfs2/lm.c:201:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#251: FILE: fs/gfs2/lm.c:204:
+		error = sdp->sd_lockstruct.ls_ops->lm_plock_get(

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: fs/gfs2/lm.c:214:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#264: FILE: fs/gfs2/lm.c:217:
+		error = sdp->sd_lockstruct.ls_ops->lm_plock(

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: fs/gfs2/lm.c:227:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#277: FILE: fs/gfs2/lm.c:230:
+		error = sdp->sd_lockstruct.ls_ops->lm_punlock(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#287: FILE: fs/gfs2/lm.c:240:
+		sdp->sd_lockstruct.ls_ops->lm_recovery_done(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#294: FILE: fs/gfs2/lm.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#310: FILE: fs/gfs2/lm.h:17:
+__attribute__ ((format(printf, 2, 3)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/gfs2/lm.h:19:
+int gfs2_lm_get_lock(struct gfs2_sbd *sdp,
+		    struct lm_lockname *name, lm_lock_t **lockp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/gfs2/lm.h:22:
+unsigned int gfs2_lm_lock(struct gfs2_sbd *sdp, lm_lock_t *lock,
+			 unsigned int cur_state, unsigned int req_state,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: fs/gfs2/lm.h:25:
+unsigned int gfs2_lm_unlock(struct gfs2_sbd *sdp, lm_lock_t *lock,
+			   unsigned int cur_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: fs/gfs2/lm.h:31:
+int gfs2_lm_plock_get(struct gfs2_sbd *sdp,
+		     struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: fs/gfs2/lm.h:34:
+int gfs2_lm_plock(struct gfs2_sbd *sdp,
+		 struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/gfs2/lm.h:37:
+int gfs2_lm_punlock(struct gfs2_sbd *sdp,
+		   struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: fs/gfs2/lm.h:40:
+void gfs2_lm_recovery_done(struct gfs2_sbd *sdp,
+			  unsigned int jid, unsigned int message);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#339: FILE: fs/gfs2/locking.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#366: FILE: fs/gfs2/locking.c:28:
+/* List of registered low-level locking protocols.  A file system selects one
+   of them by name at mount time, e.g. lock_nolock, lock_dlm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#366: FILE: fs/gfs2/locking.c:28:
+   of them by name at mount time, e.g. lock_nolock, lock_dlm. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#387: FILE: fs/gfs2/locking.c:49:
+			printk(KERN_INFO "GFS2: protocol %s already exists\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lw)...) over kzalloc(sizeof(struct lmh_wrapper)...)
#393: FILE: fs/gfs2/locking.c:55:
+	lw = kzalloc(sizeof(struct lmh_wrapper), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#430: FILE: fs/gfs2/locking.c:92:
+	printk(KERN_WARNING "GFS2: can't unregister lock protocol %s\n",

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#441: FILE: fs/gfs2/locking.c:103:
+ * @min_lvb_size - the mininum LVB size that the caller can deal with
                        ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#476: FILE: fs/gfs2/locking.c:138:
+		printk(KERN_INFO "GFS2: can't find protocol %s\n", proto_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#527: FILE: fs/gfs2/locking.c:189:
+EXPORT_SYMBOL_GPL(gfs_register_lockproto);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#528: FILE: fs/gfs2/locking.c:190:
+EXPORT_SYMBOL_GPL(gfs_unregister_lockproto);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#533: FILE: fs/gfs2/lm_interface.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#550: FILE: fs/gfs2/lm_interface.h:18:
+typedef void lm_lockspace_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#551: FILE: fs/gfs2/lm_interface.h:19:
+typedef void lm_lock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#552: FILE: fs/gfs2/lm_interface.h:20:
+typedef void lm_fsdata_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: fs/gfs2/lm_interface.h:161:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#695: FILE: fs/gfs2/lm_interface.h:163:
+	uint64_t ln_number;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name1' - possible side-effects?
#699: FILE: fs/gfs2/lm_interface.h:167:
+#define lm_name_equal(name1, name2) \
+	(((name1)->ln_number == (name2)->ln_number) && \
+	 ((name1)->ln_type == (name2)->ln_type)) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name2' - possible side-effects?
#699: FILE: fs/gfs2/lm_interface.h:167:
+#define lm_name_equal(name1, name2) \
+	(((name1)->ln_number == (name2)->ln_number) && \
+	 ((name1)->ln_type == (name2)->ln_type)) \
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#717: FILE: fs/gfs2/lm_interface.h:185:
+	int (*lm_mount) (char *table_name, char *host_data,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#723: FILE: fs/gfs2/lm_interface.h:191:
+	void (*lm_others_may_mount) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#725: FILE: fs/gfs2/lm_interface.h:193:
+	void (*lm_unmount) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#727: FILE: fs/gfs2/lm_interface.h:195:
+	void (*lm_withdraw) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#733: FILE: fs/gfs2/lm_interface.h:201:
+	int (*lm_get_lock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#736: FILE: fs/gfs2/lm_interface.h:204:
+	void (*lm_put_lock) (lm_lock_t *lock);

WARNING:SPACING: Unnecessary space before function pointer arguments
#738: FILE: fs/gfs2/lm_interface.h:206:
+	unsigned int (*lm_lock) (lm_lock_t *lock, unsigned int cur_state,

WARNING:SPACING: Unnecessary space before function pointer arguments
#741: FILE: fs/gfs2/lm_interface.h:209:
+	unsigned int (*lm_unlock) (lm_lock_t *lock, unsigned int cur_state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#743: FILE: fs/gfs2/lm_interface.h:211:
+	void (*lm_cancel) (lm_lock_t *lock);

WARNING:SPACING: Unnecessary space before function pointer arguments
#745: FILE: fs/gfs2/lm_interface.h:213:
+	int (*lm_hold_lvb) (lm_lock_t *lock, char **lvbp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#746: FILE: fs/gfs2/lm_interface.h:214:
+	void (*lm_unhold_lvb) (lm_lock_t *lock, char *lvb);

WARNING:SPACING: Unnecessary space before function pointer arguments
#747: FILE: fs/gfs2/lm_interface.h:215:
+	void (*lm_sync_lvb) (lm_lock_t *lock, char *lvb);

WARNING:SPACING: Unnecessary space before function pointer arguments
#753: FILE: fs/gfs2/lm_interface.h:221:
+	int (*lm_plock_get) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#757: FILE: fs/gfs2/lm_interface.h:225:
+	int (*lm_plock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#761: FILE: fs/gfs2/lm_interface.h:229:
+	int (*lm_punlock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#769: FILE: fs/gfs2/lm_interface.h:237:
+	void (*lm_recovery_done) (lm_lockspace_t *lockspace, unsigned int jid,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#831: FILE: fs/gfs2/glock.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#852: FILE: fs/gfs2/glock.c:22:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#878: FILE: fs/gfs2/glock.c:48:
+typedef void (*glock_examiner) (struct gfs2_glock * gl);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#889: FILE: fs/gfs2/glock.c:59:
+static inline int relaxed_state_ok(unsigned int actual, unsigned requested,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#958: FILE: fs/gfs2/glock.c:128:
+/* All work is done after the return from kref_put() so we
+   can release the write_lock before the free. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: fs/gfs2/glock.c:128:
+   can release the write_lock before the free. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#991: FILE: fs/gfs2/glock.c:161:
+		BUG_ON(spin_is_locked(&gl->gl_spin));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#991: FILE: fs/gfs2/glock.c:161:
+		BUG_ON(spin_is_locked(&gl->gl_spin));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:LINE_SPACING: Missing a blank line after declarations
#1020: FILE: fs/gfs2/glock.c:190:
+	int empty;
+	spin_lock(&gl->gl_spin);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1138: FILE: fs/gfs2/glock.c:308:
+	/* If this glock protects actual on-disk data or metadata blocks,
+	   create a VFS inode to manage the pages/buffers holding them. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1138: FILE: fs/gfs2/glock.c:308:
+	   create a VFS inode to manage the pages/buffers holding them. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: fs/gfs2/glock.c:343:
+^Ikmem_cache_free(gfs2_glock_cachep, gl);^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1187: FILE: fs/gfs2/glock.c:357:
+void gfs2_holder_init(struct gfs2_glock *gl, unsigned int state, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1217: FILE: fs/gfs2/glock.c:387:
+void gfs2_holder_reinit(unsigned int state, unsigned flags, struct gfs2_holder *gh)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gh)...) over kmalloc(sizeof(struct gfs2_holder)...)
#1260: FILE: fs/gfs2/glock.c:430:
+	gh = kmalloc(sizeof(struct gfs2_holder), gfp_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1296: FILE: fs/gfs2/glock.c:466:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1296: FILE: fs/gfs2/glock.c:466:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1298: FILE: fs/gfs2/glock.c:468:
+	printk(KERN_INFO "recursion %016llx, %u\n", gl->gl_name.ln_number,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: fs/gfs2/glock.c:469:
+	printk(KERN_INFO "recursion %016llx, %u\n", gl->gl_name.ln_number,
+		gl->gl_name.ln_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1339: FILE: fs/gfs2/glock.c:509:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1339: FILE: fs/gfs2/glock.c:509:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1424: FILE: fs/gfs2/glock.c:594:
+		struct gfs2_holder *next_gh;
+		if (gh->gh_flags & GL_LOCAL_EXCL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1428: FILE: fs/gfs2/glock.c:598:
+		if (next_gh->gh_flags & GL_LOCAL_EXCL)
+			 return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#1429: FILE: fs/gfs2/glock.c:599:
+			 return 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: fs/gfs2/glock.c:675:
+^Ispin_lock(&gl->gl_spin);^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1524: FILE: fs/gfs2/glock.c:694:
+		if (!list_empty(&gl->gl_waiters1)) {
[...]
+		} else if (!list_empty(&gl->gl_waiters2) &&
[...]
+		} else if (!list_empty(&gl->gl_waiters3)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1554: FILE: fs/gfs2/glock.c:724:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1617: FILE: fs/gfs2/glock.c:787:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1617: FILE: fs/gfs2/glock.c:787:
+	BUG_ON(!spin_is_locked(&gl->gl_spin));

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1650: FILE: fs/gfs2/glock.c:820:
+		new_gh = gfs2_holder_get(gl, state,
+					 LM_FLAG_TRY | GL_NEVER_RECURSE,
+					 GFP_KERNEL | __GFP_NOFAIL),
+		set_bit(HIF_DEMOTE, &new_gh->gh_iflags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1716: FILE: fs/gfs2/glock.c:886:
+		/* We might not want to do this here.
+		   Look at moving to the inode glops. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1716: FILE: fs/gfs2/glock.c:886:
+		   Look at moving to the inode glops. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1723: FILE: fs/gfs2/glock.c:893:
+	if (!gh)
[...]
+	else if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags))) {
[...]
+	} else if (test_bit(HIF_DEMOTE, &gh->gh_iflags)) {
[...]
+	} else if (ret & LM_OUT_CANCELED) {
[...]
+	} else if (relaxed_state_ok(gl->gl_state, gh->gh_state, gh->gh_flags)) {
[...]
+	} else if (gh->gh_flags & (LM_FLAG_TRY | LM_FLAG_TRY_1CB)) {
[...]
+	} else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1740: FILE: fs/gfs2/glock.c:910:
+		else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2070: FILE: fs/gfs2/glock.c:1240:
+^I^I^I          !(existing->gh_flags & LM_FLAG_ANY)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2070: FILE: fs/gfs2/glock.c:1240:
+	if (gfs2_assert_warn(sdp, (new->gh_flags & LM_FLAG_ANY) ||
+			          !(existing->gh_flags & LM_FLAG_ANY)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2074: FILE: fs/gfs2/glock.c:1244:
+	if (gfs2_assert_warn(sdp, (existing->gh_flags & GL_LOCAL_EXCL) ||
+				  !(new->gh_flags & GL_LOCAL_EXCL)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2102: FILE: fs/gfs2/glock.c:1272:
+	BUG_ON(!gh->gh_owner);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2138: FILE: fs/gfs2/glock.c:1308:
+^I^Ilist_add_tail(&gh->gh_list, &gl->gl_waiters3);^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2196: FILE: fs/gfs2/glock.c:1366:
+	if (test_bit(HIF_HOLDER, &gh->gh_iflags))
[...]
+	else if (list_empty(&gh->gh_list)) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#2199: FILE: fs/gfs2/glock.c:1369:
+		if (gh->gh_error == GLR_CANCELED) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2205: FILE: fs/gfs2/glock.c:1375:
+			return 0;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#2205: FILE: fs/gfs2/glock.c:1375:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gr)...) over kmalloc(sizeof(struct greedy)...)
#2377: FILE: fs/gfs2/glock.c:1547:
+	gr = kmalloc(sizeof(struct greedy), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'aquisition' may be misspelled - perhaps 'acquisition'?
#2412: FILE: fs/gfs2/glock.c:1582:
+ * @flags: modifier flags for the aquisition
                                   ^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2449: FILE: fs/gfs2/glock.c:1619:
+	if (a->ln_number > b->ln_number)
[...]
+	else if (a->ln_number < b->ln_number)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2453: FILE: fs/gfs2/glock.c:1623:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2544: FILE: fs/gfs2/glock.c:1714:
+		error = e[x] = glock_wait_internal(&ghs[x]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2561: FILE: fs/gfs2/glock.c:1731:
+	if (serious)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2563: FILE: fs/gfs2/glock.c:1733:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2566: FILE: fs/gfs2/glock.c:1736:
+			gfs2_holder_reinit(ghs[x].gh_state, ghs[x].gh_flags,
+					  &ghs[x]);

WARNING:TYPO_SPELLING: 'aquisition' may be misspelled - perhaps 'acquisition'?
#2611: FILE: fs/gfs2/glock.c:1781:
+ * @flags: modifier flags for the aquisition
                                   ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2836: FILE: fs/gfs2/glock.c:2006:
+		struct gfs2_inode *ip = i_gl->gl_object;
+		if (ip) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2866: FILE: fs/gfs2/glock.c:2036:
+		demote = time_after_eq(jiffies,
+				    gl->gl_stamp +

WARNING:LINE_SPACING: Missing a blank line after declarations
#2925: FILE: fs/gfs2/glock.c:2095:
+			struct gfs2_inode *ip = gl->gl_object;
+			if (ip && !atomic_read(&ip->i_count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#3006: FILE: fs/gfs2/glock.c:2176:
+			struct gfs2_inode *ip = gl->gl_object;
+			if (ip && !atomic_read(&ip->i_count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#3068: FILE: fs/gfs2/glock.c:2238:
+			struct gfs2_inode *ip = gl->gl_object;
+			if (ip && !atomic_read(&ip->i_count))

WARNING:SPLIT_STRING: quoted string split across lines
#3112: FILE: fs/gfs2/glock.c:2282:
+			fs_warn(sdp, "Unmount seems to be stalled. "
+				     "Dumping lock state...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3118: FILE: fs/gfs2/glock.c:2288:
+		/* invalidate_inodes() requires that the sb inodes list
+		   not change, but an async completion callback for an

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3120: FILE: fs/gfs2/glock.c:2290:
+		   can call iput() which will change the sb inodes list.
 		            ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3122: FILE: fs/gfs2/glock.c:2292:
+		   an invalidate_inodes() */

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#3127: FILE: fs/gfs2/glock.c:2297:
+		yield();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3148: FILE: fs/gfs2/glock.c:2318:
+	printk(KERN_INFO "  %s\n", str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3149: FILE: fs/gfs2/glock.c:2319:
+	printk(KERN_INFO "    owner = %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3150: FILE: fs/gfs2/glock.c:2320:
+	printk(KERN_INFO "    owner = %ld\n",
+		   (gh->gh_owner) ? (long)gh->gh_owner->pid : -1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3151: FILE: fs/gfs2/glock.c:2321:
+	printk(KERN_INFO "    gh_state = %u\n", gh->gh_state);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3152: FILE: fs/gfs2/glock.c:2322:
+	printk(KERN_INFO "    gh_flags =");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3155: FILE: fs/gfs2/glock.c:2325:
+			printk(" %u", x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3156: FILE: fs/gfs2/glock.c:2326:
+	printk(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3156: FILE: fs/gfs2/glock.c:2326:
+	printk(" \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3157: FILE: fs/gfs2/glock.c:2327:
+	printk(KERN_INFO "    error = %d\n", gh->gh_error);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3158: FILE: fs/gfs2/glock.c:2328:
+	printk(KERN_INFO "    gh_iflags =");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3161: FILE: fs/gfs2/glock.c:2331:
+			printk(" %u", x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3162: FILE: fs/gfs2/glock.c:2332:
+	printk(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3162: FILE: fs/gfs2/glock.c:2332:
+	printk(" \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3182: FILE: fs/gfs2/glock.c:2352:
+	printk(KERN_INFO "  Inode:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3183: FILE: fs/gfs2/glock.c:2353:
+	printk(KERN_INFO "    num = %llu %llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3184: FILE: fs/gfs2/glock.c:2354:
+	printk(KERN_INFO "    num = %llu %llu\n",
+		    ip->i_num.no_formal_ino, ip->i_num.no_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3185: FILE: fs/gfs2/glock.c:2355:
+	printk(KERN_INFO "    type = %u\n", IF2DT(ip->i_di.di_mode));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3186: FILE: fs/gfs2/glock.c:2356:
+	printk(KERN_INFO "    i_count = %d\n", atomic_read(&ip->i_count));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3187: FILE: fs/gfs2/glock.c:2357:
+	printk(KERN_INFO "    i_flags =");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3190: FILE: fs/gfs2/glock.c:2360:
+			printk(" %u", x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3191: FILE: fs/gfs2/glock.c:2361:
+	printk(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3191: FILE: fs/gfs2/glock.c:2361:
+	printk(" \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3192: FILE: fs/gfs2/glock.c:2362:
+	printk(KERN_INFO "    vnode = %s\n", (ip->i_vnode) ? "yes" : "no");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3215: FILE: fs/gfs2/glock.c:2385:
+	printk(KERN_INFO "Glock (%u, %llu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3216: FILE: fs/gfs2/glock.c:2386:
+	printk(KERN_INFO "Glock (%u, %llu)\n",
+		    gl->gl_name.ln_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3218: FILE: fs/gfs2/glock.c:2388:
+	printk(KERN_INFO "  gl_flags =");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3221: FILE: fs/gfs2/glock.c:2391:
+			printk(" %u", x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3222: FILE: fs/gfs2/glock.c:2392:
+	printk(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3222: FILE: fs/gfs2/glock.c:2392:
+	printk(" \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3223: FILE: fs/gfs2/glock.c:2393:
+	printk(KERN_INFO "  gl_ref = %d\n", atomic_read(&gl->gl_ref.refcount));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3224: FILE: fs/gfs2/glock.c:2394:
+	printk(KERN_INFO "  gl_state = %u\n", gl->gl_state);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3225: FILE: fs/gfs2/glock.c:2395:
+	printk(KERN_INFO "  req_gh = %s\n", (gl->gl_req_gh) ? "yes" : "no");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3226: FILE: fs/gfs2/glock.c:2396:
+	printk(KERN_INFO "  req_bh = %s\n", (gl->gl_req_bh) ? "yes" : "no");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3227: FILE: fs/gfs2/glock.c:2397:
+	printk(KERN_INFO "  lvb_count = %d\n", atomic_read(&gl->gl_lvb_count));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3228: FILE: fs/gfs2/glock.c:2398:
+	printk(KERN_INFO "  object = %s\n", (gl->gl_object) ? "yes" : "no");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3229: FILE: fs/gfs2/glock.c:2399:
+	printk(KERN_INFO "  le = %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3230: FILE: fs/gfs2/glock.c:2400:
+	printk(KERN_INFO "  le = %s\n",
+		   (list_empty(&gl->gl_le.le_list)) ? "no" : "yes");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3231: FILE: fs/gfs2/glock.c:2401:
+	printk(KERN_INFO "  reclaim = %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3232: FILE: fs/gfs2/glock.c:2402:
+	printk(KERN_INFO "  reclaim = %s\n",
+		    (list_empty(&gl->gl_reclaim)) ? "no" : "yes");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3234: FILE: fs/gfs2/glock.c:2404:
+		printk(KERN_INFO "  aspace = %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3235: FILE: fs/gfs2/glock.c:2405:
+		printk(KERN_INFO "  aspace = %lu\n",
+			    gl->gl_aspace->i_mapping->nrpages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3237: FILE: fs/gfs2/glock.c:2407:
+		printk(KERN_INFO "  aspace = no\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3238: FILE: fs/gfs2/glock.c:2408:
+	printk(KERN_INFO "  ail = %d\n", atomic_read(&gl->gl_ail_count));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3272: FILE: fs/gfs2/glock.c:2442:
+			printk(KERN_INFO "  Inode: busy\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3320: FILE: fs/gfs2/glock.c:2490:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3327: FILE: fs/gfs2/glock.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3340: FILE: fs/gfs2/glock.h:14:
+/* Flags for lock requests; used in gfs2_holder gh_flag field.
+   From lm_interface.h:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3345: FILE: fs/gfs2/glock.h:19:
+#define LM_FLAG_PRIORITY	0x00000010 */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3397: FILE: fs/gfs2/glock.h:71:
+	int ret;
+	spin_lock(&gl->gl_spin);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3406: FILE: fs/gfs2/glock.h:80:
+		   uint64_t number, struct gfs2_glock_operations *glops,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3410: FILE: fs/gfs2/glock.h:84:
+void gfs2_holder_init(struct gfs2_glock *gl, unsigned int state, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3412: FILE: fs/gfs2/glock.h:86:
+void gfs2_holder_reinit(unsigned int state, unsigned flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3438: FILE: fs/gfs2/glock.h:112:
+		      uint64_t number, struct gfs2_glock_operations *glops,

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#3450: FILE: fs/gfs2/glock.h:124:
+ * gfs2_glock_nq_init - intialize a holder and enqueue it on a glock
                         ^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083639.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 127 warnings, 47 checks, 3431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083639.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
