WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#20: 
I've got rid of a few bugs (including my mail formatter). I think I've changed 

WARNING:TYPO_SPELLING: 'Developement' may be misspelled - perhaps 'Development'?
#24: 
There's a machine running a 16 cpu setup in the Open Source Developement
                                                            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'devloper' may be misspelled - perhaps 'developer'?
#25: 
lab (http://www.osdlab.org) which is available to any devloper. It's running
                                                      ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: Documentation/Configure.help:125:
+  This option is used for getting Linux to run on a (IBM/Sequent) NUMA $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#64: FILE: arch/i386/boot/compressed/misc.c:127:
+static void *xquad_portio = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: arch/i386/kernel/apic.c:275:
+^Iif (!clustered_apic_mode && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: arch/i386/kernel/apic.c:287:
+^I^I * In clustered apic mode, the firmware does this for us $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#150: FILE: arch/i386/kernel/apic.c:298:
+		value |= (1<<(smp_processor_id()+24));
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: arch/i386/kernel/apic.c:298:
+		value |= (1<<(smp_processor_id()+24));
 		                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: arch/i386/kernel/apic.c:400:
+^I^Iif (esr_disable)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/i386/kernel/apic.c:401:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/i386/kernel/apic.c:402:
+^I^I^I * Something untraceble is creating bad interrupts on $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/i386/kernel/apic.c:407:
+			printk("Leaving ESR disabled.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/i386/kernel/apic.c:408:
+^I^Ielse $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: arch/i386/kernel/apic.c:409:
+			printk("No ESR for 82489DX.\n");

CHECK:SPACING: No space is necessary after a cast
#266: FILE: arch/i386/kernel/io_apic.c:1016:
+		phys_id_present_map = (u_long) 0xf;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#275: FILE: arch/i386/kernel/io_apic.c:1055:
+			printk("Setting %d in the phys_id_present_map\n", mp_ioapics[apic].mpc_apicid);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: arch/i386/kernel/io_apic.c:1055:
+			printk("Setting %d in the phys_id_present_map\n", mp_ioapics[apic].mpc_apicid);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: arch/i386/kernel/mpparse.c:197:
+		phys_cpu_present_map |= 1 << (num_processors-1);
 		                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: arch/i386/kernel/setup.c:2419:
+^I/* $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#364: FILE: arch/i386/kernel/setup.c:2487:
+unsigned long cpu_initialized __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: arch/i386/kernel/smp.c:165:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: arch/i386/kernel/smp.c:165:
 
+		

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: arch/i386/kernel/smp.c:170:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: arch/i386/kernel/smp.c:176:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: arch/i386/kernel/smp.c:181:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: arch/i386/kernel/smp.c:196:
+^I * Hack. The clustered APIC addressing mode doesn't allow us to send $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: arch/i386/kernel/smp.c:197:
+^I * to an arbitrary mask, so I do a unicasts to each CPU instead. This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: arch/i386/kernel/smp.c:199:
+^I */ $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#455: FILE: arch/i386/kernel/smp.c:204:
+	for (query_cpu = 0; query_cpu < NR_CPUS; ++query_cpu) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: arch/i386/kernel/smp.c:207:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#458: FILE: arch/i386/kernel/smp.c:207:
+		if (query_mask & mask) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: arch/i386/kernel/smp.c:212:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: arch/i386/kernel/smp.c:218:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: arch/i386/kernel/smp.c:220:
+^I^I^I * program the ICR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: arch/i386/kernel/smp.c:223:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: arch/i386/kernel/smp.c:235:
+^Iif (clustered_apic_mode) $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#524: FILE: arch/i386/kernel/smp.c:273:
+		for (cpu = 0; cpu < smp_num_cpus; ++cpu) {
+			send_IPI_mask(1 << cpu, vector);
+		}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#540: FILE: arch/i386/kernel/smpboot.c:32:
+ *^I^IMartin J. Bligh^I: ^IAdded support for multi-quad systems$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: arch/i386/kernel/smpboot.c:357:
+^Iif (!clustered_apic_mode) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#570: FILE: arch/i386/kernel/smpboot.c:358:
+		while (!atomic_read(&init_deasserted));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#580: FILE: arch/i386/kernel/smpboot.c:409:
+	 * bootstrap the CPUs, the APIC may be in a wierd state. Kick it.
 	                                            ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#596: FILE: arch/i386/kernel/smpboot.c:466:
+^I * in multiquad mode. Seems the console lock serialises the procs? $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: arch/i386/kernel/smpboot.c:471:
+		printk("Before tlbflush - processor: %d\n", current->processor);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: arch/i386/kernel/smpboot.c:478:
+		printk("After tlbflush - processor: %d\n", current->processor);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#618: FILE: arch/i386/kernel/smpboot.c:518:
+volatile int physical_apicid_2_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#620: FILE: arch/i386/kernel/smpboot.c:520:
+volatile int cpu_2_physical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#623: FILE: arch/i386/kernel/smpboot.c:523:
+volatile int logical_apicid_2_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#625: FILE: arch/i386/kernel/smpboot.c:525:
+volatile int cpu_2_logical_apicid[NR_CPUS];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#636: FILE: arch/i386/kernel/smpboot.c:536:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: arch/i386/kernel/smpboot.c:543:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: arch/i386/kernel/smpboot.c:549:
+^I^Ilogical_apicid_2_cpu[apicid] = cpu;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: arch/i386/kernel/smpboot.c:552:
+^I^Iphysical_apicid_2_cpu[apicid] = cpu;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: arch/i386/kernel/smpboot.c:558:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: arch/i386/kernel/smpboot.c:564:
+^I^Ilogical_apicid_2_cpu[apicid] = -1;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: arch/i386/kernel/smpboot.c:567:
+^I^Iphysical_apicid_2_cpu[apicid] = -1;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: arch/i386/kernel/smpboot.c:611:
+/* $

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#731: FILE: arch/i386/kernel/smpboot.c:627:
+	Dprintk("Waiting for send to finish...\n");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#735: FILE: arch/i386/kernel/smpboot.c:631:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#757: FILE: arch/i386/kernel/smpboot.c:638:
+	udelay(200);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#779: FILE: arch/i386/kernel/smpboot.c:651:
+		printk("APIC never delivered???\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#781: FILE: arch/i386/kernel/smpboot.c:653:
+		printk("APIC delivery error (%lx).\n", accept_status);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: arch/i386/kernel/smpboot.c:783:
+static void __init do_boot_cpu (int apicid) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#845: FILE: arch/i386/kernel/smpboot.c:783:
+static void __init do_boot_cpu (int apicid) 

CHECK:SPACING: No space is necessary after a cast
#878: FILE: arch/i386/kernel/smpboot.c:816:
+	idle->thread.eip = (unsigned long) start_secondary;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#888: FILE: arch/i386/kernel/smpboot.c:826:
+	printk("Booting processor %d/%d eip %lx\n", cpu, apicid, start_eip);

CHECK:SPACING: No space is necessary after a cast
#889: FILE: arch/i386/kernel/smpboot.c:827:
+	stack_start.esp = (void *) (1024 + PAGE_SIZE + (char *)idle);

CHECK:SPACING: No space is necessary after a cast
#902: FILE: arch/i386/kernel/smpboot.c:840:
+		nmi_high = *((volatile unsigned short *) TRAMPOLINE_HIGH);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#902: FILE: arch/i386/kernel/smpboot.c:840:
+		nmi_high = *((volatile unsigned short *) TRAMPOLINE_HIGH);

CHECK:SPACING: No space is necessary after a cast
#903: FILE: arch/i386/kernel/smpboot.c:841:
+		nmi_low = *((volatile unsigned short *) TRAMPOLINE_LOW);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#903: FILE: arch/i386/kernel/smpboot.c:841:
+		nmi_low = *((volatile unsigned short *) TRAMPOLINE_LOW);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: arch/i386/kernel/smpboot.c:842:
+^I} $

CHECK:SPACING: No space is necessary after a cast
#909: FILE: arch/i386/kernel/smpboot.c:847:
+	*((volatile unsigned short *) TRAMPOLINE_HIGH) = start_eip >> 4;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#909: FILE: arch/i386/kernel/smpboot.c:847:
+	*((volatile unsigned short *) TRAMPOLINE_HIGH) = start_eip >> 4;

CHECK:SPACING: No space is necessary after a cast
#911: FILE: arch/i386/kernel/smpboot.c:849:
+	*((volatile unsigned short *) TRAMPOLINE_LOW) = start_eip & 0xf;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#911: FILE: arch/i386/kernel/smpboot.c:849:
+	*((volatile unsigned short *) TRAMPOLINE_LOW) = start_eip & 0xf;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: arch/i386/kernel/smpboot.c:872:
+^Ielse $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#946: FILE: arch/i386/kernel/smpboot.c:899:
+			boot_error= 1;
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#975: FILE: arch/i386/kernel/smpboot.c:925:
+	if(clustered_apic_mode) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#976: FILE: arch/i386/kernel/smpboot.c:926:
+		printk("Restoring NMI vector\n");

CHECK:SPACING: No space is necessary after a cast
#977: FILE: arch/i386/kernel/smpboot.c:927:
+		*((volatile unsigned short *) TRAMPOLINE_HIGH) = nmi_high;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#977: FILE: arch/i386/kernel/smpboot.c:927:
+		*((volatile unsigned short *) TRAMPOLINE_HIGH) = nmi_high;

CHECK:SPACING: No space is necessary after a cast
#978: FILE: arch/i386/kernel/smpboot.c:928:
+		*((volatile unsigned short *) TRAMPOLINE_LOW) = nmi_low;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#978: FILE: arch/i386/kernel/smpboot.c:928:
+		*((volatile unsigned short *) TRAMPOLINE_LOW) = nmi_low;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1005: FILE: arch/i386/kernel/smpboot.c:994:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: arch/i386/kernel/smpboot.c:1043:
+^Iif (!clustered_apic_mode && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1068: FILE: arch/i386/kernel/smpboot.c:1092:
+^I * bits 0-3 are quad0, 4-7 are quad1, etc. A perverse twist on the $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1074: FILE: arch/i386/kernel/smpboot.c:1097:
+	for (bit = 0; bit < NR_CPUS; bit++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: arch/i386/kernel/smpboot.c:1116:
+		if ((boot_apicid_to_cpu(apicid) == -1) &&
+				(phys_cpu_present_map & (1 << bit)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1097: FILE: arch/i386/kernel/smpboot.c:1117:
+			printk("CPU #%d not responding - cannot use it.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: arch/i386/kernel/smpboot.c:1118:
+			printk("CPU #%d not responding - cannot use it.\n",
+								apicid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1123: FILE: include/asm-i386/apic.h:67:
+extern void clear_local_APIC(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1221: FILE: include/asm-i386/io.h:207:
+#define __FULL_SLOW_DOWN_IO __SLOW_DOWN_IO __SLOW_DOWN_IO __SLOW_DOWN_IO __SLOW_DOWN_IO

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1233: FILE: include/asm-i386/io.h:219:
+#define __OUT1(s,x) \
                 ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1234: FILE: include/asm-i386/io.h:220:
+static inline void out##s(unsigned x value, unsigned short port) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1235: FILE: include/asm-i386/io.h:221:
+static inline void out##s(unsigned x value, unsigned short port) {
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1236: FILE: include/asm-i386/io.h:222:
+#define __OUT2(s,s1,s2) \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1236: FILE: include/asm-i386/io.h:222:
+#define __OUT2(s,s1,s2) \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
+__OUTQ0(s,s,x) \
+__OUTQ0(s,s##_p,x) 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
+__OUTQ0(s,s,x) \
+__OUTQ0(s,s##_p,x) 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
+__OUTQ0(s,s,x) \
+__OUTQ0(s,s##_p,x) 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1241: FILE: include/asm-i386/io.h:227:
+#define __OUT(s,s1,x) \
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
+__OUTQ0(s,s,x) \
+__OUTQ0(s,s##_p,x) 

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1242: FILE: include/asm-i386/io.h:228:
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                                                        ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1242: FILE: include/asm-i386/io.h:228:
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1242: FILE: include/asm-i386/io.h:228:
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1242: FILE: include/asm-i386/io.h:228:
+__OUT1(s##_local,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                                ^

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1243: FILE: include/asm-i386/io.h:229:
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
                                                                              ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1243: FILE: include/asm-i386/io.h:229:
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1243: FILE: include/asm-i386/io.h:229:
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1243: FILE: include/asm-i386/io.h:229:
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1243: FILE: include/asm-i386/io.h:229:
+__OUT1(s##_p_local,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} \
                                                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1244: FILE: include/asm-i386/io.h:230:
+__OUTQ0(s,s,x) \
          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1244: FILE: include/asm-i386/io.h:230:
+__OUTQ0(s,s,x) \
            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1245: FILE: include/asm-i386/io.h:231:
+__OUTQ0(s,s##_p,x) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1245: FILE: include/asm-i386/io.h:231:
+__OUTQ0(s,s##_p,x) 
          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1245: FILE: include/asm-i386/io.h:231:
+__OUTQ0(s,s##_p,x) 
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1247: FILE: include/asm-i386/io.h:233:
+#define __OUT(s,s1,x) \
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1248: FILE: include/asm-i386/io.h:234:
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                                                ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1248: FILE: include/asm-i386/io.h:234:
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1248: FILE: include/asm-i386/io.h:234:
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1248: FILE: include/asm-i386/io.h:234:
+__OUT1(s,x) __OUT2(s,s1,"w") : : "a" (value), "Nd" (port)); } \
                        ^

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 
                                                                        ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 
                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1249: FILE: include/asm-i386/io.h:235:
+__OUT1(s##_p,x) __OUT2(s,s1,"w") __FULL_SLOW_DOWN_IO : : "a" (value), "Nd" (port));} 
                                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1253: FILE: include/asm-i386/io.h:239:
+#define __OUTQ0(s,ss,x)    /* Do the equivalent of the portio op on quad 0 */ \
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1253: FILE: include/asm-i386/io.h:239:
+#define __OUTQ0(s,ss,x)    /* Do the equivalent of the portio op on quad 0 */ \
                     ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1254: FILE: include/asm-i386/io.h:240:
+static inline void out##ss(unsigned x value, unsigned short port) { \

CHECK:SPACING: No space is necessary after a cast
#1256: FILE: include/asm-i386/io.h:242:
+		write##s(value, (unsigned long) xquad_portio + port); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: include/asm-i386/io.h:245:
+} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: include/asm-i386/io.h:247:
+#define __INQ0(s,ss)       /* Do the equivalent of the portio op on quad 0 */ \
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1261: FILE: include/asm-i386/io.h:247:
+#define __INQ0(s,ss)       /* Do the equivalent of the portio op on quad 0 */ \
+static inline RETURN_TYPE in##ss(unsigned short port) { \
+	if (xquad_portio) \
+		return read##s((unsigned long) xquad_portio + port); \
+	else               /* We're still in early boot, running on quad 0 */ \
+		return in##ss##_local(port); \
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1262: FILE: include/asm-i386/io.h:248:
+static inline RETURN_TYPE in##ss(unsigned short port) { \

CHECK:SPACING: No space is necessary after a cast
#1264: FILE: include/asm-i386/io.h:250:
+		return read##s((unsigned long) xquad_portio + port); \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1270: FILE: include/asm-i386/io.h:256:
+#define __IN1(s) \
+static inline RETURN_TYPE in##s(unsigned short port) { RETURN_TYPE _v;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1271: FILE: include/asm-i386/io.h:257:
+static inline RETURN_TYPE in##s(unsigned short port) { RETURN_TYPE _v;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1273: FILE: include/asm-i386/io.h:259:
+#define __IN2(s,s1,s2) \
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1273: FILE: include/asm-i386/io.h:259:
+#define __IN2(s,s1,s2) \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1277: FILE: include/asm-i386/io.h:263:
+#define __IN(s,s1,i...) \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1277: FILE: include/asm-i386/io.h:263:
+#define __IN(s,s1,i...) \
                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1277: FILE: include/asm-i386/io.h:263:
+#define __IN(s,s1,i...) \
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__INQ0(s,s) \
+__INQ0(s,s##_p) 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1277: FILE: include/asm-i386/io.h:263:
+#define __IN(s,s1,i...) \
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__INQ0(s,s) \
+__INQ0(s,s##_p) 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#1277: FILE: include/asm-i386/io.h:263:
+#define __IN(s,s1,i...) \
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__INQ0(s,s) \
+__INQ0(s,s##_p) 

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                 ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                            ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1278: FILE: include/asm-i386/io.h:264:
+__IN1(s##_local) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                                       ^^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                              ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1279: FILE: include/asm-i386/io.h:265:
+__IN1(s##_p_local) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1280: FILE: include/asm-i386/io.h:266:
+__INQ0(s,s) \
         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: include/asm-i386/io.h:267:
+__INQ0(s,s##_p) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1281: FILE: include/asm-i386/io.h:267:
+__INQ0(s,s##_p) 
         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1283: FILE: include/asm-i386/io.h:269:
+#define __IN(s,s1,i...) \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1283: FILE: include/asm-i386/io.h:269:
+#define __IN(s,s1,i...) \
                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1283: FILE: include/asm-i386/io.h:269:
+#define __IN(s,s1,i...) \
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1283: FILE: include/asm-i386/io.h:269:
+#define __IN(s,s1,i...) \
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#1283: FILE: include/asm-i386/io.h:269:
+#define __IN(s,s1,i...) \
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                         ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \
                                                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1284: FILE: include/asm-i386/io.h:270:
+__IN1(s) __IN2(s,s1,"w") : "=a" (_v) : "Nd" (port) ,##i ); return _v; } \

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 
                                                                 ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 
                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 
                                                                            ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 
                                                                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1285: FILE: include/asm-i386/io.h:271:
+__IN1(s##_p) __IN2(s,s1,"w") __FULL_SLOW_DOWN_IO : "=a" (_v) : "Nd" (port) ,##i ); return _v; } 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1289: FILE: include/asm-i386/io.h:275:
+static inline void ins##s(unsigned short port, void * addr, unsigned long count) \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1291: FILE: include/asm-i386/io.h:277:
+: "=D" (addr), "=c" (count) : "d" (port),"0" (addr),"1" (count)); }
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1291: FILE: include/asm-i386/io.h:277:
+: "=D" (addr), "=c" (count) : "d" (port),"0" (addr),"1" (count)); }
                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1294: FILE: include/asm-i386/io.h:280:
+static inline void outs##s(unsigned short port, const void * addr, unsigned long count) \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1296: FILE: include/asm-i386/io.h:282:
+: "=S" (addr), "=c" (count) : "d" (port),"0" (addr),"1" (count)); }
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1296: FILE: include/asm-i386/io.h:282:
+: "=S" (addr), "=c" (count) : "d" (port),"0" (addr),"1" (count)); }
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1299: FILE: include/asm-i386/io.h:285:
+__IN(b,"")
       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1302: FILE: include/asm-i386/io.h:288:
+__IN(w,"")
       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1305: FILE: include/asm-i386/io.h:291:
+__IN(l,"")
       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1308: FILE: include/asm-i386/io.h:294:
+__OUT(b,"b",char)
        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1308: FILE: include/asm-i386/io.h:294:
+__OUT(b,"b",char)
            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: include/asm-i386/io.h:295:
+__OUT(w,"w",short)
        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: include/asm-i386/io.h:295:
+__OUT(w,"w",short)
            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1310: FILE: include/asm-i386/io.h:296:
+__OUT(l,,int)
        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1310: FILE: include/asm-i386/io.h:296:
+__OUT(l,,int)
         ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1371: FILE: include/asm-i386/smp.h:75:
+extern volatile int cpu_to_physical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1372: FILE: include/asm-i386/smp.h:76:
+extern volatile int physical_apicid_to_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1373: FILE: include/asm-i386/smp.h:77:
+extern volatile int cpu_to_logical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1374: FILE: include/asm-i386/smp.h:78:
+extern volatile int logical_apicid_to_cpu[MAX_APICID];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1384: FILE: include/asm-i386/smp.h:88:
+#endif $

WARNING:INLINE: plain inline is preferred over __inline
#1394: FILE: include/asm-i386/smp.h:111:
+extern __inline int logical_smp_processor_id(void)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1397: FILE: include/asm-i386/smp.h:114:
+	return GET_APIC_LOGICAL_ID(*(unsigned long *)(APIC_BASE+APIC_LDR));
 	                                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1405: FILE: include/asm-i386/smpboot.h:1:
+#ifndef __ASM_SMPBOOT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1414: FILE: include/asm-i386/smpboot.h:10:
+#endif $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1415: FILE: include/asm-i386/smpboot.h:11:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: include/asm-i386/smpboot.h:11:
+ $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )
                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )
                                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )
                                                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )
                                                                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mps_cpu' - possible side-effects?
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mps_cpu' may be better as '(mps_cpu)' to avoid precedence issues
#1434: FILE: include/asm-i386/smpboot.h:30:
+ #define cpu_present_to_apicid(mps_cpu) ( ((mps_cpu/4)*16) + (1<<(mps_cpu%4)) )

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1443: FILE: include/asm-i386/smpboot.h:39:
+extern volatile int logical_apicid_2_cpu[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1444: FILE: include/asm-i386/smpboot.h:40:
+extern volatile int cpu_2_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1445: FILE: include/asm-i386/smpboot.h:41:
+extern volatile int physical_apicid_2_cpu[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1446: FILE: include/asm-i386/smpboot.h:42:
+extern volatile int cpu_2_physical_apicid[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1460: FILE: include/asm-i386/smpboot.h:56:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1465: FILE: include/asm-i386/smpboot.h:61:
+
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1475: FILE: init/main.c:494:
+void *xquad_portio = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1476: FILE: init/main.c:495:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1476: FILE: init/main.c:495:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1480: FILE: init/main.c:499:
+        if (clustered_apic_mode) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1480: FILE: init/main.c:499:
+        if (clustered_apic_mode) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1481: FILE: init/main.c:500:
+        ^I/* remap the 1st quad's 256k range for cross-quad I/O */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1481: FILE: init/main.c:500:
+        ^I/* remap the 1st quad's 256k range for cross-quad I/O */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1481: FILE: init/main.c:500:
+        ^I/* remap the 1st quad's 256k range for cross-quad I/O */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1482: FILE: init/main.c:501:
+		xquad_portio = ioremap (XQUAD_PORTIO_BASE, XQUAD_PORTIO_LEN);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1483: FILE: init/main.c:502:
+        ^Iprintk("Cross quad port I/O vaddr 0x%08lx, len %08lx\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1483: FILE: init/main.c:502:
+        ^Iprintk("Cross quad port I/O vaddr 0x%08lx, len %08lx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1483: FILE: init/main.c:502:
+        ^Iprintk("Cross quad port I/O vaddr 0x%08lx, len %08lx\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: init/main.c:502:
+        	printk("Cross quad port I/O vaddr 0x%08lx, len %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: init/main.c:503:
+        	printk("Cross quad port I/O vaddr 0x%08lx, len %08lx\n",
+			(u_long) xquad_portio, (u_long) XQUAD_PORTIO_LEN);

CHECK:SPACING: No space is necessary after a cast
#1484: FILE: init/main.c:503:
+			(u_long) xquad_portio, (u_long) XQUAD_PORTIO_LEN);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 136 errors, 61 warnings, 44 checks, 1350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
