WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
diff -ruN linux-2.5.50/include/linux/percpu.h kmalloc_percpu-2.5.50/include/linux/percpu.h

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: include/linux/percpu.h:21:
+        struct percpu_data *__p = (struct percpu_data *)~(unsigned long)(ptr); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: include/linux/percpu.h:21:
+        struct percpu_data *__p = (struct percpu_data *)~(unsigned long)(ptr); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: include/linux/percpu.h:22:
+        (__typeof__(ptr))__p->ptrs[(cpu)];^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: include/linux/percpu.h:22:
+        (__typeof__(ptr))__p->ptrs[(cpu)];^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/percpu.h:25:
+extern void *kmalloc_percpu(size_t size, int flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/percpu.h:26:
+extern void kfree_percpu(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#80: FILE: include/linux/percpu.h:26:
+extern void kfree_percpu(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/percpu.h:27:
+extern void kmalloc_percpu_init(void);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#89: FILE: include/linux/percpu.h:35:
+	return(kmalloc(size, flags));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#91: FILE: include/linux/percpu.h:37:
+}
+static inline void kfree_percpu(const void *ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/percpu.h:38:
+{^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#95: FILE: include/linux/percpu.h:41:
+}
+static inline void kmalloc_percpu_init(void) { }

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#145: FILE: kernel/ksyms.c:102:
+EXPORT_SYMBOL(kfree_percpu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#154: FILE: kernel/percpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#168: FILE: kernel/percpu.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#169: FILE: kernel/percpu.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: kernel/percpu.c:21:
+ * ^I^I^IRavikiran G. Thirumalai <kiran@in.ibm.com>$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#189: FILE: kernel/percpu.c:36:
+	spinlock_t lock;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: kernel/percpu.c:90:
+    sizeof (data_blklist) / sizeof (struct percpu_data_blklist);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: kernel/percpu.c:90:
+    sizeof (data_blklist) / sizeof (struct percpu_data_blklist);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: kernel/percpu.c:90:
+    sizeof (data_blklist) / sizeof (struct percpu_data_blklist);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: kernel/percpu.c:93:
+ * Allocate a block descriptor structure and initialize it.  $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: kernel/percpu.c:103:
+	if (!(blkp = kmalloc(sizeof (struct percpu_data_blk), flags)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: kernel/percpu.c:103:
+	if (!(blkp = kmalloc(sizeof (struct percpu_data_blk), flags)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*blkp)...) over kmalloc(sizeof (struct percpu_data_blk)...)
#256: FILE: kernel/percpu.c:103:
+	if (!(blkp = kmalloc(sizeof (struct percpu_data_blk), flags)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#296: FILE: kernel/percpu.c:143:
+	if (!(blkp = percpu_data_blk_alloc(blklist, flags)))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#299: FILE: kernel/percpu.c:146:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: kernel/percpu.c:155:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: kernel/percpu.c:156:
+^I * Now that we have the block successfully allocated $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: kernel/percpu.c:188:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: kernel/percpu.c:195:
+	int i;
+	for (i = 0; i < data_blklist_count; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: kernel/percpu.c:210:
+	int i;
+	for (i = 0; i < data_blklist_count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#363: FILE: kernel/percpu.c:210:
+	for (i = 0; i < data_blklist_count; i++) {
+		percpu_data_blklist_init(&data_blklist[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#380: FILE: kernel/percpu.c:227:
+	if (blkp->freehead < 0) {
+		blklist->firstnotfull = blkp->linkage.next;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: kernel/percpu.c:256:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: kernel/percpu.c:258:
+^I * head list, we should be getting an object alloc here. firstnotfull $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: kernel/percpu.c:259:
+^I * can be pointing to head of the list when all the blks are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: kernel/percpu.c:260:
+^I * full or when there're no blocks left $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#415: FILE: kernel/percpu.c:262:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#420: FILE: kernel/percpu.c:267:
+	percpu->blkp = (void *) blkp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: kernel/percpu.c:281:
+ * Returns NULL on failure. $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!blklist"
#442: FILE: kernel/percpu.c:289:
+	if (blklist == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#456: FILE: kernel/percpu.c:303:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#479: FILE: kernel/percpu.c:326:
+	blkp = (struct percpu_data_blk *) percpu->blkp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: kernel/percpu.c:337:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: kernel/percpu.c:339:
+^I^I * so make firstnotfull pt to this block and fix list accdly $

WARNING:RETURN_VOID: void function return statements are not generally useful
#521: FILE: kernel/percpu.c:368:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#530: FILE: kernel/percpu.c:377:
+	struct percpu_data_blk *blkp = percpu->blkp;
+	__percpu_interlaced_free(blkp->blklist, percpu);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#551: FILE: kernel/percpu.c:398:
+	struct percpu_data *pdata = kmalloc(sizeof (*pdata), flags);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#560: FILE: kernel/percpu.c:407:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#569: FILE: kernel/percpu.c:416:
+	return (void *) (~(unsigned long) pdata);

CHECK:SPACING: No space is necessary after a cast
#594: FILE: kernel/percpu.c:441:
+	struct percpu_data *p = (struct percpu_data *) (~(unsigned long) objp);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#599: FILE: kernel/percpu.c:446:
+		for (i = 0; i < NR_CPUS; i++) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 24 warnings, 12 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
