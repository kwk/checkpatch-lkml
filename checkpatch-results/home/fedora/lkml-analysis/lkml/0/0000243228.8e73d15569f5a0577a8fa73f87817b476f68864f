WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
An architecture with memory holes in a zone has to define CONFIG_HOLES_IN_ZONE.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#93: FILE: mm/page_alloc.c:165:
+static inline unsigned long page_order(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#97: FILE: mm/page_alloc.c:169:
+static inline void set_page_order(struct page *page, int order) {

CHECK:CAMELCASE: Avoid CamelCase: <__SetPagePrivate>
#99: FILE: mm/page_alloc.c:171:
+	__SetPagePrivate(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPagePrivate>
#104: FILE: mm/page_alloc.c:176:
+	__ClearPagePrivate(page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: mm/page_alloc.c:191:
+       if (PagePrivate(page)           &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#119: FILE: mm/page_alloc.c:191:
+       if (PagePrivate(page)           &&
[...]
+               return 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: mm/page_alloc.c:192:
+           (page_order(page) == order) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: mm/page_alloc.c:192:
+           (page_order(page) == order) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: mm/page_alloc.c:193:
+           !PageReserved(page)         &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: mm/page_alloc.c:193:
+           !PageReserved(page)         &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: mm/page_alloc.c:194:
+            page_count(page) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: mm/page_alloc.c:194:
+            page_count(page) == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: mm/page_alloc.c:195:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: mm/page_alloc.c:195:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: mm/page_alloc.c:196:
+       return 0;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: mm/page_alloc.c:235:
+	BUG_ON(page_idx & (order_size - 1));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: mm/page_alloc.c:236:
+	BUG_ON(bad_range(zone, page));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: mm/page_alloc.c:239:
+	while (order < MAX_ORDER-1) {
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: mm/page_alloc.c:242:
+		int buddy_idx;
+		buddy_idx = (page_idx ^ (1 << order));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: mm/page_alloc.c:344:
+ ^Iint low, int high, struct free_area *area)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: mm/page_alloc.c:344:
+ ^Iint low, int high, struct free_area *area)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: mm/page_alloc.c:344:
+ ^Iint low, int high, struct free_area *area)$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#319: FILE: mm/page_alloc.c:1454:
+	for (order = 0; order < MAX_ORDER ; order++) {
 		INIT_LIST_HEAD(&zone->free_area[order].free_list);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 3 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
