ERROR:TRAILING_WHITESPACE: trailing whitespace
#44: FILE: Documentation/Configure.help:1924:
+  If you want to compile this as a module, say M here and read $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#60: FILE: MAINTAINERS:575:
+P:	Joe Thornber
+M:	dm@uk.sistina.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#63: FILE: MAINTAINERS:578:
+W:	http://www.sistina.com/lvm
+S:	Maintained

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: drivers/md/dm-linear.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lc"
#158: FILE: drivers/md/dm-linear.c:35:
+	if (lc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#177: FILE: drivers/md/dm-linear.c:54:
+      bad:

CHECK:SPACING: No space is necessary after a cast
#184: FILE: drivers/md/dm-linear.c:61:
+	struct linear_c *lc = (struct linear_c *) ti->private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#193: FILE: drivers/md/dm-linear.c:70:
+	struct linear_c *lc = (struct linear_c *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#204: FILE: drivers/md/dm-linear.c:81:
+	struct linear_c *lc = (struct linear_c *) ti->private;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#250: FILE: drivers/md/dm-stripe.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#269: FILE: drivers/md/dm-stripe.c:20:
+	uint32_t stripes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#272: FILE: drivers/md/dm-stripe.c:23:
+	uint32_t stripe_width;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#275: FILE: drivers/md/dm-stripe.c:26:
+	uint32_t chunk_shift;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#346: FILE: drivers/md/dm-stripe.c:97:
+	uint32_t stripes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#347: FILE: drivers/md/dm-stripe.c:98:
+	uint32_t chunk_size;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#357: FILE: drivers/md/dm-stripe.c:108:
+	stripes = simple_strtoul(argv[0], &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#363: FILE: drivers/md/dm-stripe.c:114:
+	chunk_size = simple_strtoul(argv[1], &end, 10);

WARNING:TYPO_SPELLING: 'divisable' may be misspelled - perhaps 'divisible'?
#378: FILE: drivers/md/dm-stripe.c:129:
+		ti->error = "dm-stripe: Target length not divisable by "
 		                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#379: FILE: drivers/md/dm-stripe.c:130:
+		ti->error = "dm-stripe: Target length not divisable by "
+		    "number of stripes";

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: drivers/md/dm-stripe.c:145:
+		ti->error = "dm-stripe: Memory allocation for striped context "
+		    "failed";

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/md/dm-stripe.c:152:
+	sc->chunk_mask = ((sector_t) chunk_size) - 1;

WARNING:SPLIT_STRING: quoted string split across lines
#415: FILE: drivers/md/dm-stripe.c:166:
+			ti->error = "dm-stripe: Couldn't parse stripe "
+			    "destination";

CHECK:SPACING: No space is necessary after a cast
#430: FILE: drivers/md/dm-stripe.c:181:
+	struct stripe_c *sc = (struct stripe_c *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#441: FILE: drivers/md/dm-stripe.c:192:
+	struct stripe_c *sc = (struct stripe_c *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#444: FILE: drivers/md/dm-stripe.c:195:
+	uint32_t chunk = (uint32_t) (offset >> sc->chunk_shift);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#444: FILE: drivers/md/dm-stripe.c:195:
+	uint32_t chunk = (uint32_t) (offset >> sc->chunk_shift);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#445: FILE: drivers/md/dm-stripe.c:196:
+	uint32_t stripe = chunk % sc->stripes;	/* 32bit modulus */

WARNING:LINE_SPACING: Missing a blank line after declarations
#446: FILE: drivers/md/dm-stripe.c:197:
+	uint32_t stripe = chunk % sc->stripes;	/* 32bit modulus */
+	chunk = chunk / sc->stripes;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#457: FILE: drivers/md/dm-stripe.c:208:
+	struct stripe_c *sc = (struct stripe_c *) ti->private;

WARNING:RETURN_VOID: void function return statements are not generally useful
#507: FILE: drivers/md/dm-stripe.c:258:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#511: FILE: drivers/md/dm-table.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#524: FILE: drivers/md/dm-table.c:14:
+#include <asm/atomic.h>

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#555: FILE: drivers/md/dm-table.c:45:
+	void (*event_fn)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: No space is necessary after a cast
#601: FILE: drivers/md/dm-table.c:91:
+		return (sector_t) - 1;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#601: FILE: drivers/md/dm-table.c:91:
+		return (sector_t) - 1;
 		                  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#644: FILE: drivers/md/dm-table.c:134:
+int dm_table_create(struct dm_table **result, int mode, unsigned num_targets)

CHECK:SPACING: No space is necessary after a cast
#667: FILE: drivers/md/dm-table.c:157:
+	t->targets = (struct dm_target *) (t->highs + num_targets);

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: drivers/md/dm-table.c:170:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		next = tmp->next;

WARNING:SPLIT_STRING: quoted string split across lines
#708: FILE: drivers/md/dm-table.c:198:
+		DMWARN("devices still present during destroy: "
+		       "dm_table_remove_device calls missing");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#733: FILE: drivers/md/dm-table.c:223:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#736: FILE: drivers/md/dm-table.c:226:
+	if (!path_init(path, LOOKUP_FOLLOW, &nd))
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#739: FILE: drivers/md/dm-table.c:229:
+	if ((r = path_walk(path, &nd)))
 	                          ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#739: FILE: drivers/md/dm-table.c:229:
+	if ((r = path_walk(path, &nd)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#742: FILE: drivers/md/dm-table.c:232:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:INDENTED_LABEL: labels should not be indented
#755: FILE: drivers/md/dm-table.c:245:
+      out:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#756: FILE: drivers/md/dm-table.c:246:
+	path_release(&nd);
 	              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#769: FILE: drivers/md/dm-table.c:259:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		if (kdev_same(dd->dev, dev))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#782: FILE: drivers/md/dm-table.c:272:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#812: FILE: drivers/md/dm-table.c:302:
+	if (!(sizes = blk_size[major(dev)]) || !(dev_size = sizes[minor(dev)]))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#814: FILE: drivers/md/dm-table.c:304:
+		 * so give the benefit of the doubt */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#856: FILE: drivers/md/dm-table.c:346:
+	unsigned major, minor;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: drivers/md/dm-table.c:350:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#867: FILE: drivers/md/dm-table.c:357:
+		if ((r = lookup_device(path, &dev)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#881: FILE: drivers/md/dm-table.c:371:
+		if ((r = open_dev(dd))) {

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#908: FILE: drivers/md/dm-table.c:398:
+ * Decrement a devices use count and remove it if neccessary.
                                                   ^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#936: FILE: drivers/md/dm-table.c:426:
+static char **realloc_argv(unsigned *array_size, char **old_argv)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#939: FILE: drivers/md/dm-table.c:429:
+	unsigned new_size;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#942: FILE: drivers/md/dm-table.c:432:
+	argv = kmalloc(new_size * sizeof(*argv), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#958: FILE: drivers/md/dm-table.c:448:
+	unsigned array_size = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#976: FILE: drivers/md/dm-table.c:466:
+		end = out = start;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INDENTED_LABEL: labels should not be indented
#1059: FILE: drivers/md/dm-table.c:549:
+      bad:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1060: FILE: drivers/md/dm-table.c:550:
+	printk(KERN_ERR DM_NAME ": %s\n", tgt->error);

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: drivers/md/dm-table.c:567:
+	indexes = (sector_t *) dm_vcalloc(total, (unsigned long) NODE_SIZE);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1203: FILE: drivers/md/dm-table.c:693:
+EXPORT_SYMBOL(dm_get_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1204: FILE: drivers/md/dm-table.c:694:
+EXPORT_SYMBOL(dm_put_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1205: FILE: drivers/md/dm-table.c:695:
+EXPORT_SYMBOL(dm_table_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1206: FILE: drivers/md/dm-table.c:696:
+EXPORT_SYMBOL(dm_table_get_mode);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1210: FILE: drivers/md/dm-target.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#1292: FILE: drivers/md/dm-target.c:83:
+	struct tt_internal *ti = (struct tt_internal *) t;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1299: FILE: drivers/md/dm-target.c:90:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1303: FILE: drivers/md/dm-target.c:94:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1326: FILE: drivers/md/dm-target.c:117:
+	if (__find_target_type(t->name)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1329: FILE: drivers/md/dm-target.c:120:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1341: FILE: drivers/md/dm-target.c:132:
+	if (!(ti = __find_target_type(t->name))) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1396: FILE: drivers/md/dm-target.c:187:
+EXPORT_SYMBOL(dm_register_target);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1397: FILE: drivers/md/dm-target.c:188:
+EXPORT_SYMBOL(dm_unregister_target);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1401: FILE: drivers/md/dm.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1419: FILE: drivers/md/dm.c:19:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1430: FILE: drivers/md/dm.c:30:
+	void (*end_io) (struct buffer_head * bh, int uptodate);
 	                                             ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1430: FILE: drivers/md/dm.c:30:
+	void (*end_io) (struct buffer_head * bh, int uptodate);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#1430: FILE: drivers/md/dm.c:30:
+	void (*end_io) (struct buffer_head * bh, int uptodate);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1473: FILE: drivers/md/dm.c:73:
+	uint32_t event_nr;

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1486: FILE: drivers/md/dm.c:86:
+ * register more major numbers as neccessary.
                                   ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1487: FILE: drivers/md/dm.c:87:
+ *---------------------------------------------------------------*/

CHECK:BIT_MACRO: Prefer using the BIT macro
#1488: FILE: drivers/md/dm.c:88:
+#define MAX_MINORS (1 << MINORBITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:INDENTED_LABEL: labels should not be indented
#1623: FILE: drivers/md/dm.c:223:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'major > MAX_BLKDEV'
#1648: FILE: drivers/md/dm.c:248:
+	if (!major || (major > MAX_BLKDEV) || (minor >= MAX_MINORS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'minor >= MAX_MINORS'
#1648: FILE: drivers/md/dm.c:248:
+	if (!major || (major > MAX_BLKDEV) || (minor >= MAX_MINORS)) {

WARNING:INDENTED_LABEL: labels should not be indented
#1673: FILE: drivers/md/dm.c:273:
+      out:

CHECK:BRACES: Unbalanced braces around else statement
#1693: FILE: drivers/md/dm.c:293:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#1702: FILE: drivers/md/dm.c:302:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#1722: FILE: drivers/md/dm.c:322:
+      out:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1730: FILE: drivers/md/dm.c:330:
+ *---------------------------------------------------------------*/

WARNING:SPACING: Unnecessary space before function pointer arguments
#1760: FILE: drivers/md/dm.c:360:
+	int (*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1761: FILE: drivers/md/dm.c:361:
+	void (*exit) (void);

WARNING:INDENTED_LABEL: labels should not be indented
#1787: FILE: drivers/md/dm.c:387:
+      bad:

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1872: FILE: drivers/md/dm.c:472:
+		return blk_ioctl(dev, command, a);
+		break;

CHECK:SPACING: No space is necessary after a cast
#1876: FILE: drivers/md/dm.c:476:
+		if (copy_to_user((void *) a, &size, sizeof(long)))

CHECK:SPACING: No space is necessary after a cast
#1882: FILE: drivers/md/dm.c:482:
+		if (put_user((u64) ((u64) size) << 9, (u64 *) a))

CHECK:SPACING: No space is necessary after a cast
#1890: FILE: drivers/md/dm.c:490:
+		return dm_user_bmap(inode, (struct lv_bmap *) a);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1932: FILE: drivers/md/dm.c:532:
+static void dec_pending(struct buffer_head *bh, int uptodate)
                                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1939: FILE: drivers/md/dm.c:539:
+		r = endio(io->ti, bh, io->rw, uptodate ? 0 : -EIO,
 		                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1942: FILE: drivers/md/dm.c:542:
+			uptodate = 0;
 			^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1957: FILE: drivers/md/dm.c:557:
+	bh->b_end_io(bh, uptodate);
 	                 ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2021: FILE: drivers/md/dm.c:621:
+
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#2042: FILE: drivers/md/dm.c:642:
+	if (r < 0)
[...]
+	else if (!r) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2050: FILE: drivers/md/dm.c:650:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#2057: FILE: drivers/md/dm.c:657:
+      bad:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2087: FILE: drivers/md/dm.c:687:
+	if (test_bit(DMF_BLOCK_IO, &md->flags)) {
+		return -EPERM;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2091: FILE: drivers/md/dm.c:691:
+	if (!check_dev_size(dev, block)) {
+		return -EINVAL;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2101: FILE: drivers/md/dm.c:701:
+	bh.b_dev = bh.b_rdev = dev;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2208: FILE: drivers/md/dm.c:808:
+	list_for_each (tmp, devices) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2210: FILE: drivers/md/dm.c:810:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		size = get_hardsect_size(dd->dev);

CHECK:SPACING: No space is necessary after a cast
#2223: FILE: drivers/md/dm.c:823:
+	struct mapped_device *md = (struct mapped_device *) context;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2235: FILE: drivers/md/dm.c:835:
+	unsigned int major = major(md->dev);
+	md->map = t;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2259: FILE: drivers/md/dm.c:859:
+
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2438: FILE: drivers/md/dm.c:1038:
+ *---------------------------------------------------------------*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2441: FILE: drivers/md/dm.c:1041:
+	uint32_t r;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2468: FILE: drivers/md/dm.c:1068:
+	static char buffer[32];
+	sprintf(buffer, "%03d:%03d", MAJOR(dev), MINOR(dev));

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2495: FILE: drivers/md/dm.c:1095:
+struct block_device_operations dm_blk_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2512: FILE: drivers/md/dm.c:1112:
+EXPORT_SYMBOL(dm_kdevname);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2516: FILE: drivers/md/dm.h:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2533: FILE: drivers/md/dm.h:18:
+#define DMWARN(f, x...) printk(KERN_WARNING DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2533: FILE: drivers/md/dm.h:18:
+#define DMWARN(f, x...) printk(KERN_WARNING DM_NAME ": " f "\n" , ## x)
                                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2534: FILE: drivers/md/dm.h:19:
+#define DMERR(f, x...) printk(KERN_ERR DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2534: FILE: drivers/md/dm.h:19:
+#define DMERR(f, x...) printk(KERN_ERR DM_NAME ": " f "\n" , ## x)
                                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2535: FILE: drivers/md/dm.h:20:
+#define DMINFO(f, x...) printk(KERN_INFO DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2535: FILE: drivers/md/dm.h:20:
+#define DMINFO(f, x...) printk(KERN_INFO DM_NAME ": " f "\n" , ## x)
                                                              ^

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#2542: FILE: drivers/md/dm.h:27:
+#define SECTOR_FORMAT "%Lu"

CHECK:BIT_MACRO: Prefer using the BIT macro
#2548: FILE: drivers/md/dm.h:33:
+#define SECTOR_SIZE (1 << SECTOR_SHIFT)

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2550: FILE: drivers/md/dm.h:35:
+extern struct block_device_operations dm_blk_dops;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2570: FILE: drivers/md/dm.h:55:
+ *---------------------------------------------------------------*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2613: FILE: drivers/md/dm.h:98:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2614: FILE: drivers/md/dm.h:99:
+int dm_table_create(struct dm_table **result, int mode, unsigned num_targets);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2636: FILE: drivers/md/dm.h:121:
+ *---------------------------------------------------------------*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2642: FILE: drivers/md/dm.h:127:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2645: FILE: drivers/md/dm.h:130:
+ *---------------------------------------------------------------*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2658: FILE: drivers/md/dm.h:143:
+	unsigned long r = n % size;
+	return n + (r ? (size - r) : 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2691: FILE: include/linux/device-mapper.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2700: FILE: include/linux/device-mapper.h:10:
+typedef unsigned long sector_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2706: FILE: include/linux/device-mapper.h:16:
+typedef enum { STATUSTYPE_INFO, STATUSTYPE_TABLE } status_type_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2717: FILE: include/linux/device-mapper.h:27:
+typedef int (*dm_ctr_fn) (struct dm_target * target, unsigned int argc,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2724: FILE: include/linux/device-mapper.h:34:
+typedef void (*dm_dtr_fn) (struct dm_target * ti);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2732: FILE: include/linux/device-mapper.h:42:
+typedef int (*dm_map_fn) (struct dm_target * ti, struct buffer_head * bh,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2732: FILE: include/linux/device-mapper.h:42:
+typedef int (*dm_map_fn) (struct dm_target * ti, struct buffer_head * bh,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2742: FILE: include/linux/device-mapper.h:52:
+typedef int (*dm_endio_fn) (struct dm_target * ti,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2743: FILE: include/linux/device-mapper.h:53:
+			    struct buffer_head * bh, int rw, int error,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2747: FILE: include/linux/device-mapper.h:57:
+typedef int (*dm_status_fn) (struct dm_target * ti, status_type_t status_type,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 90 warnings, 40 checks, 2733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
