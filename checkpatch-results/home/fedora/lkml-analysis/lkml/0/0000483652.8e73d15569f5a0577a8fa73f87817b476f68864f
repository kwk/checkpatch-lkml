WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
For a quick example on how a new syscall is declared, I added the following 

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#56: 
parts are better seperated, add symbol versions, and resurrect the 
                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#115: FILE: Makefile:367:
+include/linux/version.h: ./Makefile include/linux/autoconf.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/i386/kernel/dynamic_syscall.c:1:
+/* arch/i386/kernel/dynamic_syscall.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#161: FILE: arch/i386/kernel/dynamic_syscall.c:1:
+/* arch/i386/kernel/dynamic_syscall.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#169: FILE: arch/i386/kernel/dynamic_syscall.c:9:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#175: FILE: arch/i386/kernel/dynamic_syscall.c:15:
+extern struct vsyscall_entry {

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: arch/i386/kernel/dynamic_syscall.c:41:
+^I^Ipr_debug("out of range %p <= %p < %p\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/i386/kernel/dynamic_syscall.c:42:
+		pr_debug("out of range %p <= %p < %p\n", 
+			&vsyscall_list_begin, ent,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/i386/kernel/dynamic_syscall.c:46:
+^I/* The entry should be valid now.  Verify that the caller's eip $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#225: FILE: arch/i386/kernel/dynamic_syscall.c:65:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#254: FILE: arch/i386/kernel/vsysdata.c:1:
+/* vsysdata.c	- declarations for variables shared with the kernel

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: arch/i386/kernel/vsysdata.c:3:
+ *^IItems placed in .data.vsyscall have a kernel virtual address $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: arch/i386/kernel/vsysdata.c:4:
+ *^Iand are read/write from kernel space only.  The copy placed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: arch/i386/kernel/vsysdata.c:5:
+ *^Iin .vsyscall_data are linked at a userspace address and are $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_data") over __attribute__((section(".vsyscall_data")))
#263: FILE: arch/i386/kernel/vsysdata.c:10:
+union vsys_union user_vsys_cpudata[256] __attribute__((section(".vsyscall_data")));

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#264: FILE: arch/i386/kernel/vsysdata.c:11:
+//asm(".globl vsys_cpudata ; bobbob = user_vsys_cpudata - vsyscall_text_begin ; vsys_cpudata = bobbob + VSYSCALL_text");

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: arch/i386/kernel/vunique.S:1:
+#include <linux/compile.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: arch/i386/vmlinux.lds:17:
+^I * We use two segments for the data liked at a kernel virtual address $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: arch/i386/vmlinux.lds.S:18:
+^I * We use two segments for the data liked at a kernel virtual address $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#430: FILE: drivers/char/mem.c:545:
+	extern unsigned char vsyscall_text_begin, vsyscall_text_end, VSYSCALL_text[];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: drivers/char/mem.c:560:
+	pr_debug("vm_start = 0x%lx, vm_end = 0x%lx\n",
+		vma->vm_start, vma->vm_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: drivers/char/mem.c:562:
+	pr_debug("va=%p  pa=0x%lx\n",
+		VSYSCALL_text + offset,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsys_mmap', this function's name, in a string
#451: FILE: drivers/char/mem.c:566:
+		pr_debug("vsys_mmap: start < begin\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsys_mmap', this function's name, in a string
#456: FILE: drivers/char/mem.c:571:
+		pr_debug("vsys_mmap: end < begin\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsys_mmap', this function's name, in a string
#461: FILE: drivers/char/mem.c:576:
+		pr_debug("vsys_mmap: end(%lx) > text_end(%p)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/char/mem.c:577:
+		pr_debug("vsys_mmap: end(%lx) > text_end(%p)\n",
+			vma->vm_end, &vsyscall_text_end);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsys_mmap', this function's name, in a string
#467: FILE: drivers/char/mem.c:582:
+		pr_debug("vsys_mmap: end\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#483: FILE: drivers/char/mem.c:598:
+			     vma->vm_end-vma->vm_start,
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/char/mem.c:603:
+	pr_debug("VSYSCALL_text(%p): %02x %02x %02x %02x\n",
+		VSYSCALL_text,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#495: FILE: drivers/char/mem.c:610:
+static struct file_operations vsys_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#496: FILE: drivers/char/mem.c:611:
+	mmap:		vsys_mmap,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#517: FILE: drivers/char/mem.c:670:
+	{9, "urandom", S_IRUGO | S_IWUSR,           &urandom_fops},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: drivers/char/mem.c:671:
+	{11,"vsys",    S_IRUGO | S_IWUSR,           &vsys_fops},
 	   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#518: FILE: drivers/char/mem.c:671:
+	{11,"vsys",    S_IRUGO | S_IWUSR,           &vsys_fops},

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#552: FILE: include/asm-i386/vsyscall.h:1:
+#ifndef __ASM__VSYSCALL_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#554: FILE: include/asm-i386/vsyscall.h:3:
+/* include/asm-i386/vsyscall.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: include/asm-i386/vsyscall.h:10:
+ * convention.  The .text.vsyscall section is mapped into userspace, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: include/asm-i386/vsyscall.h:11:
+ * whereas .data.vsyscall_list is a kernel-only array of the vsyscalls $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: include/asm-i386/vsyscall.h:12:
+ * and the valid userspace address to call them from.  All vsyscalls $

CHECK:CAMELCASE: Avoid CamelCase: <STRINGIFYa>
#569: FILE: include/asm-i386/vsyscall.h:18:
+#define STRINGIFYa(x)	#x

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#572: FILE: include/asm-i386/vsyscall.h:21:
+#define add_dynamic_syscall(name)				\
+	__asm__("						\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#573: FILE: include/asm-i386/vsyscall.h:22:
+	__asm__("						\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#573: FILE: include/asm-i386/vsyscall.h:22:
+	__asm__("						\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#574: FILE: include/asm-i386/vsyscall.h:23:
+	.section .vsyscall_text, \"xa\"				\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#575: FILE: include/asm-i386/vsyscall.h:24:
+	.globl v" #name "					\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#576: FILE: include/asm-i386/vsyscall.h:25:
+	v" #name ":						\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#579: FILE: include/asm-i386/vsyscall.h:28:
+		movl $" NR_dyn_sys ",%eax			\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#587: FILE: include/asm-i386/vsyscall.h:36:
+	.size v" #name ",.-v" #name "				\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#588: FILE: include/asm-i386/vsyscall.h:37:
+	.section .data.vsyscall_list,\"a\"			\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#589: FILE: include/asm-i386/vsyscall.h:38:
+	2:	.long	1b," #name "				\n\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#597: FILE: include/linux/vsyscall.h:1:
+#ifndef _LINUX__VSYSCALL_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.vsyscall") over __attribute__((section(".data.vsyscall")))
#612: FILE: include/linux/vsyscall.h:16:
+extern union vsys_union	vsys_cpudata[256] __attribute__((section(".data.vsyscall")));

WARNING:REPEATED_WORD: Possible repeated word: 'myln'
#646: FILE: ulib/Makefile:26:
+	cc -g -o myln myln.c -L. -lkernel

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#651: FILE: ulib/kso_init.c:1:
+#include <linux/compile.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: ulib/kso_init.c:19:
+        ^I  unsigned long, prot, unsigned long, flags,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#669: FILE: ulib/kso_init.c:19:
+        ^I  unsigned long, prot, unsigned long, flags,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: ulib/kso_init.c:19:
+	_syscall6(int, mmap2, unsigned long, addr, unsigned long, len,
+        	  unsigned long, prot, unsigned long, flags,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: ulib/kso_init.c:19:
+        ^I  unsigned long, prot, unsigned long, flags,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: ulib/kso_init.c:20:
+        ^I  unsigned long, fd, unsigned long, pgoff)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#670: FILE: ulib/kso_init.c:20:
+        ^I  unsigned long, fd, unsigned long, pgoff)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: ulib/kso_init.c:20:
+        ^I  unsigned long, fd, unsigned long, pgoff)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#688: FILE: ulib/kso_init.c:38:
+	for (i=0; i<sizeof(unique); i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#688: FILE: ulib/kso_init.c:38:
+	for (i=0; i<sizeof(unique); i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#703: FILE: ulib/myln.c:1:
+#include <sys/types.h>

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int main() should probably be int main(void)
#709: FILE: ulib/myln.c:7:
+int main ()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#709: FILE: ulib/myln.c:7:
+int main ()

WARNING:LINE_SPACING: Missing a blank line after declarations
#712: FILE: ulib/myln.c:10:
+	long ctx = 0;
+	extern long vsys_io_setup(long, long *);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#712: FILE: ulib/myln.c:10:
+	extern long vsys_io_setup(long, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#712: FILE: ulib/myln.c:10:
+	extern long vsys_io_setup(long, long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#712: FILE: ulib/myln.c:10:
+	extern long vsys_io_setup(long, long *);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#713: FILE: ulib/myln.c:11:
+	unsigned char *bob = (void*)&vsys_io_setup;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: ulib/myln.c:14:
+	int i;
+	printf("%p\n", bob);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#732: FILE: ulib/stub.S:1:
+/* stub.S */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 47 warnings, 9 checks, 598 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
