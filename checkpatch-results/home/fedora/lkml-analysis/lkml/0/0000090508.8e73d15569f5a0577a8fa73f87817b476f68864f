WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
>> >> while browsing through the xfs/linux source, I noticed that many macros do 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xbdp' - possible side-effects?
#68: FILE: dmapi/xfs_dm.c:55:
+#define XFS_BHV_LOOKUP(vp, xbdp) do { \
 	xbdp = vn_bhv_lookup(VN_BHV_HEAD(vp), &xfs_vnodeops); \
+	ASSERT(xbdp); \
+    } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: dmapi/xfs_dm.c:58:
+    } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: dmapi/xfs_dm.c:58:
+    } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: dmapi/xfs_dm.c:160:
+#define DM_EA_XLATE_ERR(err) do { if (err == ERANGE) err = E2BIG; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#81: FILE: dmapi/xfs_dm.c:160:
+#define DM_EA_XLATE_ERR(err) do { if (err == ERANGE) err = E2BIG; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'err' may be better as '(err)' to avoid precedence issues
#81: FILE: dmapi/xfs_dm.c:160:
+#define DM_EA_XLATE_ERR(err) do { if (err == ERANGE) err = E2BIG; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#93: FILE: support/qsort.c:58:
+#define swap(a, b) do {					\
 	if (swaptype == 0) {				\
 		long t = *(long *)(a);			\
 		*(long *)(a) = *(long *)(b);		\
 		*(long *)(b) = t;			\
 	} else						\
+		swapfunc(a, b, es, swaptype)		\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#93: FILE: support/qsort.c:58:
+#define swap(a, b) do {					\
 	if (swaptype == 0) {				\
 		long t = *(long *)(a);			\
 		*(long *)(a) = *(long *)(b);		\
 		*(long *)(b) = t;			\
 	} else						\
+		swapfunc(a, b, es, swaptype)		\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#101: FILE: support/qsort.c:65:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
     ASSERT(dir); \
     if (dir>0) { \
 	(mem)=INT_GET(buf, arch); \
     } else { \
 	INT_SET(buf, arch, mem); \
     } \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mem' - possible side-effects?
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
     ASSERT(dir); \
     if (dir>0) { \
 	(mem)=INT_GET(buf, arch); \
     } else { \
 	INT_SET(buf, arch, mem); \
     } \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
     ASSERT(dir); \
     if (dir>0) { \
 	(mem)=INT_GET(buf, arch); \
     } else { \
 	INT_SET(buf, arch, mem); \
     } \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arch' - possible side-effects?
#113: FILE: xfs_arch.h:164:
+#define INT_XLATE(buf,mem,dir,arch) do { \
     ASSERT(dir); \
     if (dir>0) { \
 	(mem)=INT_GET(buf, arch); \
     } else { \
 	INT_SET(buf, arch, mem); \
     } \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#121: FILE: xfs_arch.h:171:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: xfs_fs.h:125:
+#define GETBMAP_CONVERT(p1,p2) do {	\
                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p1' - possible side-effects?
#133: FILE: xfs_fs.h:125:
+#define GETBMAP_CONVERT(p1,p2) do {	\
 	p2.bmv_offset = p1.bmv_offset;	\
 	p2.bmv_block = p1.bmv_block;	\
 	p2.bmv_length = p1.bmv_length;	\
 	p2.bmv_count = p1.bmv_count;	\
+	p2.bmv_entries = p1.bmv_entries; \
+    } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p2' - possible side-effects?
#133: FILE: xfs_fs.h:125:
+#define GETBMAP_CONVERT(p1,p2) do {	\
 	p2.bmv_offset = p1.bmv_offset;	\
 	p2.bmv_block = p1.bmv_block;	\
 	p2.bmv_length = p1.bmv_length;	\
 	p2.bmv_count = p1.bmv_count;	\
+	p2.bmv_entries = p1.bmv_entries; \
+    } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: xfs_fs.h:131:
+    } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: xfs_fs.h:131:
+    } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#152: FILE: xfs_vfsops.c:952:
+#define IPOINTER_INSERT(ip, mp)	do { \
 		ASSERT(ipointer_in == B_FALSE); \
 		ipointer->ip_mnext = ip->i_mnext; \
 		ipointer->ip_mprev = ip; \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#152: FILE: xfs_vfsops.c:952:
+#define IPOINTER_INSERT(ip, mp)	do { \
 		ASSERT(ipointer_in == B_FALSE); \
 		ipointer->ip_mnext = ip->i_mnext; \
 		ipointer->ip_mprev = ip; \

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: xfs_vfsops.c:962:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#178: FILE: xfs_vfsops.c:984:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: xfs_vnodeops.c:2310:
+#define	REMOVE_DEBUG_TRACE(x)	do { remove_which_error_return = (x); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#190: FILE: xfs_vnodeops.c:2310:
+#define	REMOVE_DEBUG_TRACE(x)	do { remove_which_error_return = (x); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 10)
#202: FILE: xfsidbg.c:7357:
+do { \
 	  xfs_dquot_t	*dqp;\

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: xfsidbg.c:7370:
+} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090508.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 5 warnings, 13 checks, 123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090508.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
