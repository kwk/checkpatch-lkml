WARNING:TYPO_SPELLING: 'arbitraty' may be misspelled - perhaps 'arbitrary'?
#17: 
Subject: [PATCH] Define hash_mem in lib/hash.c to apply hash_long to an arbitraty piece of memory.
                                                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'noticably' may be misspelled - perhaps 'noticeably'?
#39: 
 hash_mem (as included here) is noticably faster than HASH_HALF_MD4 or
                                ^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
### Comments for ChangeSet

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
Define hash_mem in lib/hash.c to apply hash_long to an arbitraty piece of memory.

WARNING:TYPO_SPELLING: 'arbitraty' may be misspelled - perhaps 'arbitrary'?
#59: 
Define hash_mem in lib/hash.c to apply hash_long to an arbitraty piece of memory.
                                                       ^^^^^^^^^

WARNING:TYPO_SPELLING: 'achitectures' may be misspelled - perhaps 'architectures'?
#64: 
As some achitectures don't like dereferencing unalinged longs we
        ^^^^^^^^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#90: FILE: include/linux/hash.h:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/hash.h:60:
+extern unsigned long hash_mem(void *buf, unsigned int len, unsigned int bits);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: include/linux/string.h:86:
+#define hash_str(str,bits) hash_mem(str, strlen(str), bits)
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#104: FILE: include/linux/string.h:86:
+#define hash_str(str,bits) hash_mem(str, strlen(str), bits)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: lib/hash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#157: FILE: lib/hash.c:2:
+ * linux/lib/hash.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#168: FILE: lib/hash.c:13:
+#define BYTES_PER_LONG (BITS_PER_LONG/8)
                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#169: FILE: lib/hash.c:14:
+#define IsLongAligned(ptr) (((unsigned long)ptr & (BYTES_PER_LONG-1))==0)
                                                                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#169: FILE: lib/hash.c:14:
+#define IsLongAligned(ptr) (((unsigned long)ptr & (BYTES_PER_LONG-1))==0)
                                                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <IsLongAligned>
#169: FILE: lib/hash.c:14:
+#define IsLongAligned(ptr) (((unsigned long)ptr & (BYTES_PER_LONG-1))==0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#169: FILE: lib/hash.c:14:
+#define IsLongAligned(ptr) (((unsigned long)ptr & (BYTES_PER_LONG-1))==0)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#176: FILE: lib/hash.c:21:
+	if (unlikely(IsLongAligned(buf))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#195: FILE: lib/hash.c:40:
+		l=0;
 		 ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#196: FILE: lib/hash.c:41:
+		memcpy((char*)&l, buf, len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#202: FILE: lib/hash.c:47:
+EXPORT_SYMBOL(hash_mem);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402355.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 16 warnings, 8 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402355.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
