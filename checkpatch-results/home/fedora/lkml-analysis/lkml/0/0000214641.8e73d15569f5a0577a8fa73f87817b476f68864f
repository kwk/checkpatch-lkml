WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#285: FILE: include/linux/qsort.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: include/linux/qsort.h:36:
+extern void qsort (void *const pbase,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/qsort.h:36:
+extern void qsort (void *const pbase,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: include/linux/qsort.h:37:
+extern void qsort (void *const pbase,
+		    size_t total_elems,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#343: FILE: lib/qsort.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: lib/qsort.c:36:
+#define swapcode(TYPE, parmi, parmj, n) { ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: lib/qsort.c:37:
+^Ilong i = (n) / sizeof (TYPE); ^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#379: FILE: lib/qsort.c:37:
+	long i = (n) / sizeof (TYPE); 			\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: lib/qsort.c:38:
+^Iregister TYPE *pi = (TYPE *) (parmi); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#381: FILE: lib/qsort.c:39:
+^Iregister TYPE *pj = (TYPE *) (parmj); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#382: FILE: lib/qsort.c:40:
+^Ido { ^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: lib/qsort.c:44:
+        } while (--i > 0);^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: lib/qsort.c:44:
+        } while (--i > 0);^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#389: FILE: lib/qsort.c:47:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#389: FILE: lib/qsort.c:47:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'es' - possible side-effects?
#389: FILE: lib/qsort.c:47:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'es' may be better as '(es)' to avoid precedence issues
#389: FILE: lib/qsort.c:47:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#389: FILE: lib/qsort.c:47:
+#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#390: FILE: lib/qsort.c:48:
+	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;
 	                                          ^

WARNING:INLINE: plain inline is preferred over __inline
#392: FILE: lib/qsort.c:50:
+static __inline void

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: lib/qsort.c:53:
+^Iif (swaptype <= 1) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#401: FILE: lib/qsort.c:59:
+#define swap(a, b)					\
+	if (swaptype == 0) {				\
+		long t = *(long *)(a);			\
+		*(long *)(a) = *(long *)(b);		\
+		*(long *)(b) = t;			\
+	} else						\
+		swapfunc(a, b, es, swaptype)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#401: FILE: lib/qsort.c:59:
+#define swap(a, b)					\
+	if (swaptype == 0) {				\
+		long t = *(long *)(a);			\
+		*(long *)(a) = *(long *)(b);		\
+		*(long *)(b) = t;			\
+	} else						\
+		swapfunc(a, b, es, swaptype)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#401: FILE: lib/qsort.c:59:
+#define swap(a, b)					\
+	if (swaptype == 0) {				\
+		long t = *(long *)(a);			\
+		*(long *)(a) = *(long *)(b);		\
+		*(long *)(b) = t;			\
+	} else						\
+		swapfunc(a, b, es, swaptype)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: lib/qsort.c:67:
+#define vecswap(a, b, n) ^Iif ((n) > 0) swapfunc(a, b, n, swaptype)$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#409: FILE: lib/qsort.c:67:
+#define vecswap(a, b, n) 	if ((n) > 0) swapfunc(a, b, n, swaptype)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#409: FILE: lib/qsort.c:67:
+#define vecswap(a, b, n) 	if ((n) > 0) swapfunc(a, b, n, swaptype)

WARNING:INLINE: plain inline is preferred over __inline
#411: FILE: lib/qsort.c:69:
+static __inline char *

ERROR:SPACING: space prohibited before that close parenthesis ')'
#415: FILE: lib/qsort.c:73:
+	       (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a ))

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: lib/qsort.c:74:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: lib/qsort.c:74:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#416: FILE: lib/qsort.c:74:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));
               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#416: FILE: lib/qsort.c:74:
+              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));

CHECK:SPACING: No space is necessary after a cast
#429: FILE: lib/qsort.c:87:
+		for (pm = (char *)a + es; pm < (char *) a + n * es; pm += es)

CHECK:SPACING: No space is necessary after a cast
#430: FILE: lib/qsort.c:88:
+			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#448: FILE: lib/qsort.c:106:
+	pa = pb = (char *)a + es;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#450: FILE: lib/qsort.c:108:
+	pc = pd = (char *)a + (n - 1) * es;

CHECK:SPACING: No space is necessary after a cast
#476: FILE: lib/qsort.c:134:
+		for (pm = (char *) a + es; pm < (char *) a + n * es; pm += es)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: lib/qsort.c:135:
+^I^I^Ifor (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0; $

CHECK:SPACING: No space is necessary after a cast
#477: FILE: lib/qsort.c:135:
+			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0; 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#488: FILE: lib/qsort.c:146:
+	if ((r = pb - pa) > es)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: lib/qsort.c:148:
+^Iif ((r = pd - pc) > es) { $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#490: FILE: lib/qsort.c:148:
+	if ((r = pd - pc) > es) { 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214641.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 15 warnings, 14 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214641.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
