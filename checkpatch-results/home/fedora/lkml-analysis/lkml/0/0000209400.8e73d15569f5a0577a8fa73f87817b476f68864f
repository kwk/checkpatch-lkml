WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
> > > > > > > > I used your config advices from second mail, still it does not work as

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#108: 
--- a/arch/i386/Kconfig	2005-02-03 21:11:01 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#166: FILE: arch/i386/kernel/apic.c:937:
+	apic_timer_val = clocks/APIC_DIVISOR;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#269: FILE: arch/i386/kernel/time.c:307:
+void reprogram_pit_tick(int jiffies_to_skip);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: arch/i386/kernel/time.c:308:
+extern void replace_timer_interrupt(void * new_handler);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#270: FILE: arch/i386/kernel/time.c:308:
+extern void replace_timer_interrupt(void * new_handler);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: arch/i386/kernel/time.c:318:
+				printk("%u/%li ", skipped, dyn_tick->skip);}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#280: FILE: arch/i386/kernel/time.c:318:
+				printk("%u/%li ", skipped, dyn_tick->skip);}
 				                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: arch/i386/kernel/time.c:323:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#296: FILE: arch/i386/kernel/time.c:334:
+	volatile unsigned long long now;

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: arch/i386/kernel/time.c:336:
+	unsigned int skipped = 0;
+	write_seqlock_irqsave(&xtime_lock, flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#334: FILE: arch/i386/kernel/time.c:460:
+	extern spinlock_t i8253_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: arch/i386/kernel/time.c:462:
+	unsigned long flags;
+	spin_lock_irqsave(&i8253_lock, flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#351: FILE: arch/i386/kernel/time.c:477:
+	extern spinlock_t i8253_lock;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: arch/i386/kernel/time.c:481:
+	if (skip > 0xffff) {
+		skip = 0xffff;
+	}      

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: arch/i386/kernel/time.c:483:
+^I}      $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#376: FILE: arch/i386/kernel/time.c:502:
+		dyn_tick->max_skip = 0xffff/LATCH;	/* PIT timer length */
 		                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#377: FILE: arch/i386/kernel/time.c:503:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: arch/i386/kernel/time.c:545:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#408: FILE: arch/i386/kernel/time.c:546:
+		printk(KERN_INFO "dyn-tick: Cannot use timer %s\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: arch/i386/kernel/timers/timer_pm.c:250:
+	static unsigned int last_cycles;
+	now = read_pmtmr();

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: arch/i386/kernel/timers/timer_tsc.c:120:
+	unsigned long long hw_time;
+	rdtscll(hw_time);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#545: FILE: arch/i386/mach-default/setup.c:95:
+void replace_timer_interrupt(void * new_handler)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#582: FILE: include/linux/dyn-tick-timer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#583: FILE: include/linux/dyn-tick-timer.h:2:
+ * linux/include/linux/dyn-tick-timer.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#606: FILE: include/linux/dyn-tick-timer.h:25:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#607: FILE: include/linux/dyn-tick-timer.h:26:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:BIT_MACRO: Prefer using the BIT macro
#612: FILE: include/linux/dyn-tick-timer.h:31:
+#define DYN_TICK_USE_APIC	(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#613: FILE: include/linux/dyn-tick-timer.h:32:
+#define DYN_TICK_SKIPPING	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#614: FILE: include/linux/dyn-tick-timer.h:33:
+#define DYN_TICK_ENABLED	(1 << 0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#622: FILE: include/linux/dyn-tick-timer.h:41:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#622: FILE: include/linux/dyn-tick-timer.h:41:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#622: FILE: include/linux/dyn-tick-timer.h:41:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#627: FILE: include/linux/dyn-tick-timer.h:46:
+	int (*init) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: include/linux/dyn-tick-timer.h:49:
+extern struct dyn_tick_state * dyn_tick;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#631: FILE: include/linux/dyn-tick-timer.h:50:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#631: FILE: include/linux/dyn-tick-timer.h:50:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#633: FILE: include/linux/dyn-tick-timer.h:52:
+#define NS_TICK_LEN		((1 * 1000000000)/HZ)
                    		                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#670: FILE: kernel/dyn-tick-timer.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#696: FILE: kernel/dyn-tick-timer.c:27:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#697: FILE: kernel/dyn-tick-timer.c:28:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#714: FILE: kernel/dyn-tick-timer.c:45:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#718: FILE: kernel/dyn-tick-timer.c:49:
+#define VERSION	050227-1
                	      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#718: FILE: kernel/dyn-tick-timer.c:49:
+#define VERSION	050227-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#721: FILE: kernel/dyn-tick-timer.c:52:
+struct dyn_tick_state * dyn_tick = &dyn_tick_state;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#723: FILE: kernel/dyn-tick-timer.c:54:
+struct dyn_tick_timer * dyn_tick_cfg = &dyn_tick_timer;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#724: FILE: kernel/dyn-tick-timer.c:55:
+static void (*orig_idle) (void) = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: Unnecessary space before function pointer arguments
#724: FILE: kernel/dyn-tick-timer.c:55:
+static void (*orig_idle) (void) = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#725: FILE: kernel/dyn-tick-timer.c:56:
+extern void disable_pit_tick(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#726: FILE: kernel/dyn-tick-timer.c:57:
+extern void reprogram_pit_tick(int jiffies_to_skip);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#727: FILE: kernel/dyn-tick-timer.c:58:
+extern void reprogram_apic_timer(unsigned int count);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#728: FILE: kernel/dyn-tick-timer.c:59:
+extern void reprogram_pit_tick(int jiffies_to_skip);

CHECK:BRACES: braces {} should be used on all arms of this statement
#760: FILE: kernel/dyn-tick-timer.c:91:
+		if (jiffies > next) {
[...]
+		} else
[...]

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#760: FILE: kernel/dyn-tick-timer.c:91:
+		if (jiffies > next) {

CHECK:BRACES: Unbalanced braces around else statement
#764: FILE: kernel/dyn-tick-timer.c:95:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#769: FILE: kernel/dyn-tick-timer.c:100:
+			if (cpu_has_local_apic()) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#772: FILE: kernel/dyn-tick-timer.c:103:
+			} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: kernel/dyn-tick-timer.c:119:
+void __init dyn_tick_register(struct dyn_tick_timer * new_timer)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#791: FILE: kernel/dyn-tick-timer.c:122:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg->init"
#801: FILE: kernel/dyn-tick-timer.c:132:
+	if (dyn_tick_cfg->init == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#806: FILE: kernel/dyn-tick-timer.c:137:
+		printk(KERN_WARNING "dyn-tick: Init failed\n");

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#811: FILE: kernel/dyn-tick-timer.c:142:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#811: FILE: kernel/dyn-tick-timer.c:142:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#811: FILE: kernel/dyn-tick-timer.c:142:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10))
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#811: FILE: kernel/dyn-tick-timer.c:142:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#814: FILE: kernel/dyn-tick-timer.c:145:
+	printk(KERN_INFO "dyn-tick: Timer using dynamic tick\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000209400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 33 warnings, 15 checks, 650 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000209400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
