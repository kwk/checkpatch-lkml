WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff --exclude=.* --exclude=*.[^ch]* -urN kernel-2.4.3-works/linux.orig/arch/i386/kernel/irq.c linux-toolbox-current/arch/i386/kernel/irq.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/buffer.c:2758:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: include/linux/mm/reservation.h:1:
+#ifndef __LINUX__MM__RESERVATION_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#200: FILE: include/linux/mm/reservation.h:19:
+ *^Ialong with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#201: FILE: include/linux/mm/reservation.h:20:
+ *^IFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#211: FILE: include/linux/mm/reservation.h:30:
+	unsigned		avail, used;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/mm/reservation.h:37:
+extern void init_page_reservation(struct page_reservation *rsv, int flags, int zone);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/mm/reservation.h:38:
+extern void destroy_page_reservation(struct page_reservation *rsv);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#224: FILE: include/linux/mm/reservation.h:43:
+extern int reserve_pages(struct page_reservation *rsv, int gfp_mask, unsigned count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/mm/reservation.h:43:
+extern int reserve_pages(struct page_reservation *rsv, int gfp_mask, unsigned count);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: include/linux/mm/reservation.h:46:
+extern void put_reserved_pages(struct page_reservation *rsv, unsigned count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/mm/reservation.h:46:
+extern void put_reserved_pages(struct page_reservation *rsv, unsigned count);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: include/linux/sched.h:245:
+^Iin_fault_count:^IATOMIC_INIT(0), ^I^I\$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#271: FILE: include/linux/sched.h:245:
+	in_fault_count:	ATOMIC_INIT(0), 		\
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#271: FILE: include/linux/sched.h:245:
+	in_fault_count:	ATOMIC_INIT(0), 		\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#289: FILE: include/linux/sched.h:493:
+    alloc_lock:		SPIN_LOCK_UNLOCKED,				\
               ^

WARNING:INDENTED_LABEL: labels should not be indented
#289: FILE: include/linux/sched.h:493:
+    alloc_lock:		SPIN_LOCK_UNLOCKED,				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#290: FILE: include/linux/sched.h:494:
+    page_reservations:	NULL,						\
                      ^

WARNING:INDENTED_LABEL: labels should not be indented
#290: FILE: include/linux/sched.h:494:
+    page_reservations:	NULL,						\

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#309: FILE: init/main.c:92:
+extern struct page_reservation atomic_rsv;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#310: FILE: init/main.c:93:
+extern struct page_reservation swap_rsv;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#420: FILE: mm/page_alloc.c:142:
+	if (!order && (per_cpu->nr_pages < per_cpu->max_nr_pages) && list_empty(&zone->depleted_rsv_list)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#420: FILE: mm/page_alloc.c:142:
+	if (!order && (per_cpu->nr_pages < per_cpu->max_nr_pages) && list_empty(&zone->depleted_rsv_list)) {
+static int foo; if (foo++ < 5) printk("freeing per-cpu page\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'per_cpu->nr_pages < per_cpu->max_nr_pages'
#420: FILE: mm/page_alloc.c:142:
+	if (!order && (per_cpu->nr_pages < per_cpu->max_nr_pages) && list_empty(&zone->depleted_rsv_list)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#421: FILE: mm/page_alloc.c:143:
+static int foo; if (foo++ < 5) printk("freeing per-cpu page\n");
 		list_add(&page->list, &per_cpu->head);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#421: FILE: mm/page_alloc.c:143:
+static int foo; if (foo++ < 5) printk("freeing per-cpu page\n");

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#431: FILE: mm/page_alloc.c:154:
+		struct page_reservation *rsv = list_entry(zone->depleted_rsv_list.next, struct page_reservation, list);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#432: FILE: mm/page_alloc.c:155:
+static int foo; if (foo++ < 5) printk("updating reserve: %p %u %u\n", rsv, rsv->avail, rsv->used);
+		if (!rsv->used)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: mm/page_alloc.c:155:
+static int foo; if (foo++ < 5) printk("updating reserve: %p %u %u\n", rsv, rsv->avail, rsv->used);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: mm/page_alloc.c:157:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#452: FILE: mm/page_alloc.c:232:
+static FASTCALL(struct page * rmqueue(zone_t *zone, unsigned long order, struct page_reservation *rsv));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#452: FILE: mm/page_alloc.c:232:
+static FASTCALL(struct page * rmqueue(zone_t *zone, unsigned long order, struct page_reservation *rsv));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#453: FILE: mm/page_alloc.c:233:
+static struct page * rmqueue(zone_t *zone, unsigned long order, struct page_reservation *rsv)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#475: FILE: mm/page_alloc.c:267:
+	if (free_pages >= (1 << order)) do {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#483: FILE: mm/page_alloc.c:283:
+			if (rsv && (rsv->avail >= (1 << order))) {
+static int foo; if (foo++ < 5) printk("alloc from reserv: %p %u %u\n", rsv, rsv->avail, rsv->used);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#484: FILE: mm/page_alloc.c:284:
+static int foo; if (foo++ < 5) printk("alloc from reserv: %p %u %u\n", rsv, rsv->avail, rsv->used);
+				if (!rsv->used && (rsv->flags & RSV_MULTISHOT)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: mm/page_alloc.c:284:
+static int foo; if (foo++ < 5) printk("alloc from reserv: %p %u %u\n", rsv, rsv->avail, rsv->used);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 0)
#485: FILE: mm/page_alloc.c:285:
+				if (!rsv->used && (rsv->flags & RSV_MULTISHOT)) {
+static int foo; if (foo++ < 5) printk("multishot reserv: %p\n", rsv);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#486: FILE: mm/page_alloc.c:286:
+static int foo; if (foo++ < 5) printk("multishot reserv: %p\n", rsv);
+					list_add(&rsv->list, &zone->depleted_rsv_list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#486: FILE: mm/page_alloc.c:286:
+static int foo; if (foo++ < 5) printk("multishot reserv: %p\n", rsv);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#491: FILE: mm/page_alloc.c:291:
+}
+				zone->reserved_pages--;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#535: FILE: mm/page_alloc.c:368:
+extern struct page *get_reserved_page (void);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#561: FILE: mm/page_alloc.c:421:
+		} else if (z->free_pages - z->reserved_pages < z->pages_min &&
[...]
 				wake_up_interruptible(&kreclaimd_wait);

WARNING:LINE_SPACING: Missing a blank line after declarations
#609: FILE: mm/page_alloc.c:505:
+				zone_t *z = *(zone++);
+				if (!z)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 0)
#612: FILE: mm/page_alloc.c:508:
+				if (z == rsv->zone) {
+static int foo; if (foo++ < 5) printk("trying reservation: %p\n", current->page_reservations);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#613: FILE: mm/page_alloc.c:509:
+static int foo; if (foo++ < 5) printk("trying reservation: %p\n", current->page_reservations);
+					page = rmqueue(z, order, rsv);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: mm/page_alloc.c:509:
+static int foo; if (foo++ < 5) printk("trying reservation: %p\n", current->page_reservations);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#704: FILE: mm/page_alloc.c:704:
+		zone_t *z = pgdat->node_zones+zone_type;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#705: FILE: mm/page_alloc.c:705:
+		zone_t *z = pgdat->node_zones+zone_type;
+		sum += z->free_pages - z->reserved_pages;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: mm/page_alloc.c:824:
+	printk(	"%8u %8u %8u %8u %8u %8u\n"

ERROR:SPACING: space prohibited after that open parenthesis '('
#721: FILE: mm/page_alloc.c:824:
+	printk(	"%8u %8u %8u %8u %8u %8u\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: mm/page_alloc.c:850:
+ ^I^Iunsigned long nr, total, flags, reserved;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#748: FILE: mm/page_alloc.c:850:
+ ^I^Iunsigned long nr, total, flags, reserved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: mm/page_alloc.c:850:
+ ^I^Iunsigned long nr, total, flags, reserved;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#751: FILE: mm/page_alloc.c:852:
+		reserved = total = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#753: FILE: mm/page_alloc.c:854:
+			printk("Zone %s: ", zone->name);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#765: FILE: mm/page_alloc.c:873:
+		printk("= %lukB)  Reserved: %lukB\n", total * (PAGE_SIZE>>10), reserved * (PAGE_SIZE>>10));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#765: FILE: mm/page_alloc.c:873:
+		printk("= %lukB)  Reserved: %lukB\n", total * (PAGE_SIZE>>10), reserved * (PAGE_SIZE>>10));

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#765: FILE: mm/page_alloc.c:873:
+		printk("= %lukB)  Reserved: %lukB\n", total * (PAGE_SIZE>>10), reserved * (PAGE_SIZE>>10));
 		                                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#765: FILE: mm/page_alloc.c:873:
+		printk("= %lukB)  Reserved: %lukB\n", total * (PAGE_SIZE>>10), reserved * (PAGE_SIZE>>10));
 		                                                                                    ^

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#825: FILE: mm/page_alloc.c:1114:
+static int foo; if (foo++ < 5) printk("init_page_reservation(%p, %d, %d)\n", rsv, flags, zone);
+	INIT_LIST_HEAD(&rsv->list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#825: FILE: mm/page_alloc.c:1114:
+static int foo; if (foo++ < 5) printk("init_page_reservation(%p, %d, %d)\n", rsv, flags, zone);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_page_reservation', this function's name, in a string
#825: FILE: mm/page_alloc.c:1114:
+static int foo; if (foo++ < 5) printk("init_page_reservation(%p, %d, %d)\n", rsv, flags, zone);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#840: FILE: mm/page_alloc.c:1129:
+static int foo; if (foo++ < 5) printk("destroy_page_reservation(%p)\n", rsv);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'destroy_page_reservation', this function's name, in a string
#840: FILE: mm/page_alloc.c:1129:
+static int foo; if (foo++ < 5) printk("destroy_page_reservation(%p)\n", rsv);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#849: FILE: mm/page_alloc.c:1138:
+int reserve_pages(struct page_reservation *rsv, int gfp_mask, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#853: FILE: mm/page_alloc.c:1142:
+	unsigned orig = count;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: mm/page_alloc.c:1144:
+static int foo; if (foo++ < 5) printk("reserve_pages(%p, %d, %u)\n", rsv, gfp_mask, count);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reserve_pages', this function's name, in a string
#855: FILE: mm/page_alloc.c:1144:
+static int foo; if (foo++ < 5) printk("reserve_pages(%p, %d, %u)\n", rsv, gfp_mask, count);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#895: FILE: mm/page_alloc.c:1184:
+void put_reserved_pages(struct page_reservation *rsv, unsigned count)

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#899: FILE: mm/page_alloc.c:1188:
+static int foo; if (foo++ < 5) printk("put_reserved_pages(%p, %u)\n", rsv, count);
+	spin_lock_irqsave(&zone->lock, flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#899: FILE: mm/page_alloc.c:1188:
+static int foo; if (foo++ < 5) printk("put_reserved_pages(%p, %u)\n", rsv, count);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_reserved_pages', this function's name, in a string
#899: FILE: mm/page_alloc.c:1188:
+static int foo; if (foo++ < 5) printk("put_reserved_pages(%p, %u)\n", rsv, count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#911: FILE: mm/page_alloc.c:1200:
+		BUG();

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1134: FILE: mm/vmscan.c:906:
+					zone->free_pages - zone->reserved_pages < zone->pages_min+1)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1134: FILE: mm/vmscan.c:906:
+					zone->free_pages - zone->reserved_pages < zone->pages_min+1)) {
 					                                                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000532386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 54 warnings, 12 checks, 1056 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000532386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
