WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#66: FILE: fs/rcfs/rootdir.c:61:
+EXPORT_SYMBOL_GPL(rcfs_unregister_engine);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: fs/rcfs/tc_magic.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#99: FILE: fs/rcfs/tc_magic.c:2:
+ * fs/rcfs/tc_magic.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#132: FILE: fs/rcfs/tc_magic.c:35:
+#define TC_FILE_MODE (S_IFREG | S_IRUGO | S_IWUSR)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#196: FILE: include/linux/ckrm_tc.h:1:
+/* ckrm_tc.h - Header file to be used by task class users

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/ckrm_tc.h:38:
+extern int ckrm_forced_reclassify_pid(int, struct ckrm_task_class *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/ckrm_tc.h:38:
+extern int ckrm_forced_reclassify_pid(int, struct ckrm_task_class *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_task_class *' should also have an identifier name
#233: FILE: include/linux/ckrm_tc.h:38:
+extern int ckrm_forced_reclassify_pid(int, struct ckrm_task_class *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#296: FILE: kernel/ckrm/ckrm_tc.c:1:
+/* ckrm_tc.c - Class-based Kernel Resource Management (CKRM)

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#322: FILE: kernel/ckrm/ckrm_tc.c:27:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: kernel/ckrm/ckrm_tc.c:47:
+static int tc_forced_reclassify(struct ckrm_core_class * target,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: kernel/ckrm/ckrm_tc.c:94:
+ * ^I- tsk->ckrm_tsklock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: kernel/ckrm/ckrm_tc.c:95:
+ * ^I- core->ckrm_lock, if core is NULL then ckrm_dflt_class.ckrm_lock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: kernel/ckrm/ckrm_tc.c:96:
+ * ^I- tsk->taskclass->ckrm_lock$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curcls == NULL'
#417: FILE: kernel/ckrm/ckrm_tc.c:122:
+	if ((curcls == NULL) && (newcls == (void *)-1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curcls"
#417: FILE: kernel/ckrm/ckrm_tc.c:122:
+	if ((curcls == NULL) && (newcls == (void *)-1)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls != curcls'
#426: FILE: kernel/ckrm/ckrm_tc.c:131:
+	if (oldcls && (oldcls != curcls)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curcls != NULL'
#443: FILE: kernel/ckrm/ckrm_tc.c:148:
+	if ((drop_old_cls = (curcls != NULL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: kernel/ckrm/ckrm_tc.c:148:
+	if ((drop_old_cls = (curcls != NULL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curcls"
#443: FILE: kernel/ckrm/ckrm_tc.c:148:
+	if ((drop_old_cls = (curcls != NULL))) {

WARNING:INDENTED_LABEL: labels should not be indented
#482: FILE: kernel/ckrm/ckrm_tc.c:187:
+      rc_handling:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->res_ctlrs[i]"
#487: FILE: kernel/ckrm/ckrm_tc.c:192:
+			if (clstype->res_ctlrs[i] == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_res_class != new_res_class'
#495: FILE: kernel/ckrm/ckrm_tc.c:200:
+			if (rcbs && rcbs->change_resclass
+			    && (old_res_class != new_res_class))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#496: FILE: kernel/ckrm/ckrm_tc.c:201:
+			if (rcbs && rcbs->change_resclass
+			    && (old_res_class != new_res_class))

WARNING:INDENTED_LABEL: labels should not be indented
#503: FILE: kernel/ckrm/ckrm_tc.c:208:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#507: FILE: kernel/ckrm/ckrm_tc.c:212:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#514: FILE: kernel/ckrm/ckrm_tc.c:219:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid >= CKRM_MAX_RES_CTLRS'
#514: FILE: kernel/ckrm/ckrm_tc.c:219:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#514: FILE: kernel/ckrm/ckrm_tc.c:219:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#515: FILE: kernel/ckrm/ckrm_tc.c:220:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#531: FILE: kernel/ckrm/ckrm_tc.c:236:
+#define CE_CLASSIFY_TASK(event, tsk)					\
+do {									\
+	struct ckrm_task_class *newcls = NULL;				\
+ 	struct ckrm_task_class *oldcls = tsk->taskclass;		\
+									\
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
+	if (newcls) {							\
+		/* called synchrously. no need to get task struct */	\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);		\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#531: FILE: kernel/ckrm/ckrm_tc.c:236:
+#define CE_CLASSIFY_TASK(event, tsk)					\
+do {									\
+	struct ckrm_task_class *newcls = NULL;				\
+ 	struct ckrm_task_class *oldcls = tsk->taskclass;		\
+									\
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
+	if (newcls) {							\
+		/* called synchrously. no need to get task struct */	\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);		\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#531: FILE: kernel/ckrm/ckrm_tc.c:236:
+#define CE_CLASSIFY_TASK(event, tsk)					\
+do {									\
+	struct ckrm_task_class *newcls = NULL;				\
+ 	struct ckrm_task_class *oldcls = tsk->taskclass;		\
+									\
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
+	if (newcls) {							\
+		/* called synchrously. no need to get task struct */	\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);		\
+	}								\
+} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: kernel/ckrm/ckrm_tc.c:239:
+ ^Istruct ckrm_task_class *oldcls = tsk->taskclass;^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: kernel/ckrm/ckrm_tc.c:239:
+ ^Istruct ckrm_task_class *oldcls = tsk->taskclass;^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: kernel/ckrm/ckrm_tc.c:239:
+ ^Istruct ckrm_task_class *oldcls = tsk->taskclass;^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#536: FILE: kernel/ckrm/ckrm_tc.c:241:
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#536: FILE: kernel/ckrm/ckrm_tc.c:241:
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#536: FILE: kernel/ckrm/ckrm_tc.c:241:
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#536: FILE: kernel/ckrm/ckrm_tc.c:241:
+	CE_CLASSIFY_RET(newcls,&ct_taskclass,event,tsk);		\
 	                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: kernel/ckrm/ckrm_tc.c:248:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#547: FILE: kernel/ckrm/ckrm_tc.c:252:
+	CE_CLASSIFY_TASK(event,tsk);		\
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#565: FILE: kernel/ckrm/ckrm_tc.c:270:
+	if (cls == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cb_taskclass_fork', this function's name, in a string
#572: FILE: kernel/ckrm/ckrm_tc.c:277:
+		pr_debug("cb_taskclass_fork: BUG in cb_fork.. tsk (%s:%d> already linked\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: kernel/ckrm/ckrm_tc.c:278:
+		pr_debug("cb_taskclass_fork: BUG in cb_fork.. tsk (%s:%d> already linked\n",
+		       tsk->comm, tsk->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: kernel/ckrm/ckrm_tc.c:293:
+	pr_debug("%p:%d:%s <%s>\n", current, current->pid, current->comm,
+		   filename);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#643: FILE: kernel/ckrm/ckrm_tc.c:348:
+	extern int pid_max;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#652: FILE: kernel/ckrm/ckrm_tc.c:357:
+	if ((!capable(CAP_SYS_NICE)) && (!capable(CAP_SYS_RESOURCE))) {
+		return -EPERM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#657: FILE: kernel/ckrm/ckrm_tc.c:362:
+	if (curpidmax <= PID_MAX_DEFAULT) {
[...]
+	} else {
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#665: FILE: kernel/ckrm/ckrm_tc.c:370:
+      retry:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#671: FILE: kernel/ckrm/ckrm_tc.c:376:
+			if ((thread = find_task_by_pid(i)) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap"
#688: FILE: kernel/ckrm/ckrm_tc.c:393:
+		if (bitmap == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid < pid_start'
#709: FILE: kernel/ckrm/ckrm_tc.c:414:
+				if ((pid < pid_start) || (pid >= pid_end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid >= pid_end'
#709: FILE: kernel/ckrm/ckrm_tc.c:414:
+				if ((pid < pid_start) || (pid >= pid_end)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#710: FILE: kernel/ckrm/ckrm_tc.c:415:
+					if (pid >= pid_end) {
+						do_next = 1;
+					}

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#719: FILE: kernel/ckrm/ckrm_tc.c:424:
+			}
+			while_each_thread(proc, thread);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#731: FILE: kernel/ckrm/ckrm_tc.c:436:
+				if ((thread = find_task_by_pid(pid)) != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#744: FILE: kernel/ckrm/ckrm_tc.c:449:
+
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#775: FILE: kernel/ckrm/ckrm_tc.c:480:
+      next_task:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#801: FILE: kernel/ckrm/ckrm_tc.c:506:
+		if (newcls == NULL) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#819: FILE: kernel/ckrm/ckrm_tc.c:524:
+	return;
+}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#833: FILE: kernel/ckrm/ckrm_tc.c:538:
+	if ((tsk = find_task_by_pid(pid)) == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->user != tsk->user'
#843: FILE: kernel/ckrm/ckrm_tc.c:548:
+	if ((!capable(CAP_SYS_NICE)) &&
+	    (!capable(CAP_SYS_RESOURCE)) && (current->user != tsk->user)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#852: FILE: kernel/ckrm/ckrm_tc.c:557:
+	if (cls == NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#853: FILE: kernel/ckrm/ckrm_tc.c:558:
+		CE_CLASSIFY_TASK(CKRM_EVENT_RECLASSIFY,tsk);
 		                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#867: FILE: kernel/ckrm/ckrm_tc.c:572:
+	struct ckrm_task_class *taskcls;
+	taskcls = kmalloc(sizeof(struct ckrm_task_class), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*taskcls)...) over kmalloc(sizeof(struct ckrm_task_class)...)
#867: FILE: kernel/ckrm/ckrm_tc.c:572:
+	taskcls = kmalloc(sizeof(struct ckrm_task_class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!taskcls"
#868: FILE: kernel/ckrm/ckrm_tc.c:573:
+	if (taskcls == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#887: FILE: kernel/ckrm/ckrm_tc.c:592:
+	if (!ckrm_is_core_valid(core)) {
+		return (-EINVAL);		/* Invalid core */
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: kernel/ckrm/ckrm_tc.c:621:
+	pr_debug("...... Initializing ClassType<%s> ........\n",
+	       ct_taskclass.name);

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#917: FILE: kernel/ckrm/ckrm_tc.c:622:
+	/* intialize the default class */
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#926: FILE: kernel/ckrm/ckrm_tc.c:631:
+	 * note registeration of all resource controllers will be done
 	        ^^^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#951: FILE: kernel/ckrm/ckrm_tc.c:656:
+	pid = (pid_t) simple_strtol(obj, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#951: FILE: kernel/ckrm/ckrm_tc.c:656:
+	pid = (pid_t) simple_strtol(obj, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target"
#958: FILE: kernel/ckrm/ckrm_tc.c:663:
+		rc = (target == NULL) ? ckrm_reclassify_all_tasks() : -EINVAL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#961: FILE: kernel/ckrm/ckrm_tc.c:666:
+		struct ckrm_task_class *cls = NULL;
+		if (target)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: kernel/ckrm/ckrm_tc.c:668:
+		rc = ckrm_forced_reclassify_pid(pid,cls);
 		                                   ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#969: FILE: kernel/ckrm/ckrm_tc.c:674:
+#if 0

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_tasklist_sanity', this function's name, in a string
#985: FILE: kernel/ckrm/ckrm_tc.c:690:
+			pr_debug("check_tasklist_sanity: class %s empty list\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: kernel/ckrm/ckrm_tc.c:691:
+			pr_debug("check_tasklist_sanity: class %s empty list\n",
+			       core->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_tasklist_sanity', this function's name, in a string
#994: FILE: kernel/ckrm/ckrm_tc.c:699:
+				pr_debug("check_tasklist_sanity: CKRM taskclass list is CORRUPTED\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#999: FILE: kernel/ckrm/ckrm_tc.c:704:
+				const char *tclsname;
+				tclsname = (tsk->taskclass) ?

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1000: FILE: kernel/ckrm/ckrm_tc.c:705:
+					class_core(tsk->taskclass)->name:"NULL";
 					                                ^

WARNING:SPLIT_STRING: quoted string split across lines
#1002: FILE: kernel/ckrm/ckrm_tc.c:707:
+				pr_debug("sanity: task %s:%d has ckrm_core "
+				       "|%s| but in list |%s|\n", tsk->comm,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_debug_free_task_class', this function's name, in a string
#1015: FILE: kernel/ckrm/ckrm_tc.c:720:
+	pr_debug("ckrm_debug_free_task_class: Analyze Error <%s> %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: kernel/ckrm/ckrm_tc.c:721:
+	pr_debug("ckrm_debug_free_task_class: Analyze Error <%s> %d\n",
+	       class_core(tskcls)->name,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'thread->taskclass == tskcls'
#1023: FILE: kernel/ckrm/ckrm_tc.c:728:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tskcls == NULL'
#1023: FILE: kernel/ckrm/ckrm_tc.c:728:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tskcls"
#1023: FILE: kernel/ckrm/ckrm_tc.c:728:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1025: FILE: kernel/ckrm/ckrm_tc.c:730:
+			const char *tclsname;
+			tclsname = (thread->taskclass) ?

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1026: FILE: kernel/ckrm/ckrm_tc.c:731:
+				class_core(thread->taskclass)->name :"NULL";
 				                                    ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1027: FILE: kernel/ckrm/ckrm_tc.c:732:
+			pr_debug("ckrm-debug_free_task_class: %d thread=<%s:%d>  -> <%s> <%lx>\n", count,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: kernel/ckrm/ckrm_tc.c:733:
+			pr_debug("ckrm-debug_free_task_class: %d thread=<%s:%d>  -> <%s> <%lx>\n", count,
+			       thread->comm, thread->pid, tclsname,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_debug_free_task_class', this function's name, in a string
#1035: FILE: kernel/ckrm/ckrm_tc.c:740:
+	pr_debug("ckrm_debug_free_task_class: End Analyze Error <%s> %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: kernel/ckrm/ckrm_tc.c:741:
+	pr_debug("ckrm_debug_free_task_class: End Analyze Error <%s> %d\n",
+	       class_core(tskcls)->name,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 45 warnings, 39 checks, 960 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
