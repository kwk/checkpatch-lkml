WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
 linux-2.6-npiggin/kernel/sched.c            |  568 ++++++++++++++++------------

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: include/linux/sched.h:560:
+extern void FASTCALL(sched_fork(task_t * p));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/sched.h:560:
+extern void FASTCALL(sched_fork(task_t * p));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#104: FILE: include/linux/init_task.h:70:
+	.prio		= MAX_PRIO-30,					\
 	     		          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#105: FILE: include/linux/init_task.h:71:
+	.static_prio	= MAX_PRIO-30,					\
 	            	          ^

WARNING:TYPO_SPELLING: 'dicard' may be misspelled - perhaps 'discard'?
#245: FILE: kernel/sched.c:77:
+ * will moderate dicard freak events (eg. SIGSTOP)
                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#247: FILE: kernel/sched.c:79:
+#define MAX_SLEEP_AFFECT	(MAX_SLEEP/4)
                         	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#248: FILE: kernel/sched.c:80:
+#define MAX_RUN_AFFECT		(MAX_SLEEP/4)
                       		          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#249: FILE: kernel/sched.c:81:
+#define MAX_WAIT_AFFECT		(MAX_RUN_AFFECT/4)
                        		               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#257: FILE: kernel/sched.c:87:
+#define MIN_HISTORY		(MAX_SLEEP/2)
                    		          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#296: FILE: kernel/sched.c:106:
+	( (p)->prio < (rq)->curr->prio )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#296: FILE: kernel/sched.c:106:
+	( (p)->prio < (rq)->curr->prio )

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#303: FILE: kernel/sched.c:112:
+#define BITMAP_SIZE ((((MAX_PRIO+7)/8)+sizeof(long)-1)/sizeof(long))
                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#303: FILE: kernel/sched.c:112:
+#define BITMAP_SIZE ((((MAX_PRIO+7)/8)+sizeof(long)-1)/sizeof(long))
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#303: FILE: kernel/sched.c:112:
+#define BITMAP_SIZE ((((MAX_PRIO+7)/8)+sizeof(long)-1)/sizeof(long))
                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#303: FILE: kernel/sched.c:112:
+#define BITMAP_SIZE ((((MAX_PRIO+7)/8)+sizeof(long)-1)/sizeof(long))
                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#303: FILE: kernel/sched.c:112:
+#define BITMAP_SIZE ((((MAX_PRIO+7)/8)+sizeof(long)-1)/sizeof(long))
                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#353: FILE: kernel/sched.c:296:
+	p->total_time = (r*p->total_time + MAX_SLEEP/2) / MAX_SLEEP;
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#353: FILE: kernel/sched.c:296:
+	p->total_time = (r*p->total_time + MAX_SLEEP/2) / MAX_SLEEP;
 	                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#354: FILE: kernel/sched.c:297:
+	p->sleep_time = (r*p->sleep_time + MAX_SLEEP/2) / MAX_SLEEP;
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#354: FILE: kernel/sched.c:297:
+	p->sleep_time = (r*p->sleep_time + MAX_SLEEP/2) / MAX_SLEEP;
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: kernel/sched.c:330:
+	idx = min(find_next_bit(rq->active->bitmap, MAX_PRIO, MAX_RT_PRIO),
+		find_next_bit(rq->expired->bitmap, MAX_PRIO, MAX_RT_PRIO));

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: kernel/sched.c:392:
+	unsigned long sleep = now - p->timestamp;
+	p->timestamp = now;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#495: FILE: kernel/sched.c:457:
+ n*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#549: FILE: kernel/sched.c:594:
+	if (current->used_slice >= ts) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: kernel/sched.c:596:
+^I ^I * This case is rare, it happens when the parent has only$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: kernel/sched.c:596:
+^I ^I * This case is rare, it happens when the parent has only$

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: kernel/sched.c:597:
+^I ^I * a single jiffy left from its timeslice. Taking the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#552: FILE: kernel/sched.c:597:
+^I ^I * a single jiffy left from its timeslice. Taking the$

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: kernel/sched.c:605:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: kernel/sched.c:669:
+		runqueue_t *rq;
+		rq = task_rq_lock(p, &flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: kernel/sched.c:677:
+		add_task_time(p->parent,
+			MAX_SLEEP * (p->parent->sleep_avg - p->sleep_avg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: kernel/sched.c:882:
+ int i, minload, load, best_cpu, node, pnode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: kernel/sched.c:889:
+ minload = INT_MAX;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: kernel/sched.c:890:
+ node = pnode = cpu_to_node(best_cpu);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#672: FILE: kernel/sched.c:890:
+ node = pnode = cpu_to_node(best_cpu);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 2)
#673: FILE: kernel/sched.c:891:
 	for_each_node_with_cpus(i) {
[...]
+  load = NR_CPUS * (atomic_read(&node_nr_running[i]) + ((i != pnode) << 1)) / nr_cpus_node(i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: kernel/sched.c:901:
+  load = NR_CPUS * (atomic_read(&node_nr_running[i]) + ((i != pnode) << 1)) / nr_cpus_node(i);$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#686: FILE: kernel/sched.c:901:
+  load = NR_CPUS * (atomic_read(&node_nr_running[i]) + ((i != pnode) << 1)) / nr_cpus_node(i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: kernel/sched.c:908:
+ minload = INT_MAX;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: kernel/sched.c:948:
+  + (NR_CPUS * atomic_read(&node_nr_running[this_node])$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#712: FILE: kernel/sched.c:948:
+  + (NR_CPUS * atomic_read(&node_nr_running[this_node])

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: kernel/sched.c:955:
+   + (NR_CPUS * atomic_read(&node_nr_running[i])$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#720: FILE: kernel/sched.c:955:
+   + (NR_CPUS * atomic_read(&node_nr_running[i])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#733: FILE: kernel/sched.c:1055:
+	if (!idle && ((*imbalance)*4 < max_load)) {
 	                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta <= cache_decay_ticks'
#786: FILE: kernel/sched.c:1118:
+	if (!idle && (delta <= cache_decay_ticks))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#1012: FILE: kernel/sched.c:1712:
+	 * it wont have any effect on scheduling until the task is
 	      ^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 19 warnings, 23 checks, 957 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
