Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#41: 
the partition recognition code path just before msdos partitions are
                                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#42: 
recognized (this needs to happen as dynamic disks also have a normal msdos
                                                                     ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#44: 
and hence msdos.c would handle them if we don't get in before it does). 
          ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#56: 
created is much like the extended msdos partitions:
                                  ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#97: 
diff -urN linux-2.4.7-vanilla/Documentation/Configure.help linux/Documentation/Configure.help

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#176: FILE: fs/partitions/check.c:47:
+	ldm_partition,		/* this must come before msdos */
 	              		                         ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: fs/partitions/ldm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#185: FILE: fs/partitions/ldm.c:2:
+ * $Id: ldm.c,v 1.25 2001/07/25 23:32:02 flatcap Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#206: FILE: fs/partitions/ldm.c:23:
+ * in the file COPYING); if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#207: FILE: fs/partitions/ldm.c:24:
+ * Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#217: FILE: fs/partitions/ldm.c:34:
+#include "msdos.h"
           ^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#219: FILE: fs/partitions/ldm.c:36:
+#if 0 /* Fool kernel-doc since it doesn't do macros yet. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: fs/partitions/ldm.c:50:
+		printk(LDM_DEBUG " DEBUG (%s, %d): %s: ",		\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#234: FILE: fs/partitions/ldm.c:51:
+				__FILE__, __LINE__, __FUNCTION__);	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: fs/partitions/ldm.c:52:
+		printk(f, ##a);						\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/partitions/ldm.c:77:
+static int parse_vblk_part(const u8 *buffer, const int buf_size,
+		struct vblk *vb)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#264: FILE: fs/partitions/ldm.c:81:
+	if (0x34 >= buf_size)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#323: FILE: fs/partitions/ldm.c:140:
+	if (MAGIC_VBLK != BE32(buffer)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: fs/partitions/ldm.c:141:
+		printk(LDM_CRIT "Cannot find VBLK, database may be corrupt.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/partitions/ldm.c:179:
+static int create_data_partitions(struct gendisk *hd,
+		const unsigned long first_sector, int first_part_minor,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#373: FILE: fs/partitions/ldm.c:190:
+	vb = (struct vblk*)kmalloc(sizeof(struct vblk), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#373: FILE: fs/partitions/ldm.c:190:
+	vb = (struct vblk*)kmalloc(sizeof(struct vblk), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vb)...) over kmalloc(sizeof(struct vblk)...)
#373: FILE: fs/partitions/ldm.c:190:
+	vb = (struct vblk*)kmalloc(sizeof(struct vblk), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: fs/partitions/ldm.c:207:
+	printk(" <");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: fs/partitions/ldm.c:209:
+		if (!(bh = bread(dev, buffer + OFF_VBLK, LDM_BLOCKSIZE)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: fs/partitions/ldm.c:213:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#400: FILE: fs/partitions/ldm.c:217:
+			if (block + vsize > (u8*)bh->b_data + LDM_BLOCKSIZE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: fs/partitions/ldm.c:226:
+			if (create_partition(hd, first_part_minor,
+					first_sector + vb->start_sector +

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#416: FILE: fs/partitions/ldm.c:233:
+	printk(" >\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#425: FILE: fs/partitions/ldm.c:242:
+	printk(LDM_CRIT "Not enough memory to allocate required buffers.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: fs/partitions/ldm.c:245:
+	printk(LDM_CRIT "Disk read failed in create_partitions.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: fs/partitions/ldm.c:272:
+		printk(LDM_ERR "Illegal length in get_vnum(): %d.\n", length);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_vnum', this function's name, in a string
#455: FILE: fs/partitions/ldm.c:272:
+		printk(LDM_ERR "Illegal length in get_vnum(): %d.\n", length);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: fs/partitions/ldm.c:301:
+		printk(LDM_ERR "String too long for buffer in get_vstr(): "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_vstr', this function's name, in a string
#484: FILE: fs/partitions/ldm.c:301:
+		printk(LDM_ERR "String too long for buffer in get_vstr(): "

WARNING:SPLIT_STRING: quoted string split across lines
#485: FILE: fs/partitions/ldm.c:302:
+		printk(LDM_ERR "String too long for buffer in get_vstr(): "
+				"(%d/%d). Truncating.\n", length, buflen);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: fs/partitions/ldm.c:329:
+static int get_disk_objid(const kdev_t dev, const struct vmdb *vm,
+		const struct privhead *ph, struct ldmdisk *dk)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#521: FILE: fs/partitions/ldm.c:338:
+	disk_id = (u8*)kmalloc(DISK_ID_SIZE, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#521: FILE: fs/partitions/ldm.c:338:
+	disk_id = (u8*)kmalloc(DISK_ID_SIZE, GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#539: FILE: fs/partitions/ldm.c:356:
+		if (!(bh = bread(dev, buffer + OFF_VBLK, LDM_BLOCKSIZE)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: fs/partitions/ldm.c:380:
+			err = get_vstr(block + 0x18 + rel_name, disk_id,
+					DISK_ID_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: fs/partitions/ldm.c:389:
+				strncpy(dk->disk_id, ph->disk_id,
+						sizeof(dk->disk_id));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#588: FILE: fs/partitions/ldm.c:405:
+	printk(LDM_CRIT "Not enough memory to allocate required buffers.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#591: FILE: fs/partitions/ldm.c:408:
+	printk(LDM_CRIT "Disk read failed in get_disk_objid.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_disk_objid', this function's name, in a string
#591: FILE: fs/partitions/ldm.c:408:
+	printk(LDM_CRIT "Disk read failed in get_disk_objid.\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#612: FILE: fs/partitions/ldm.c:429:
+	if (MAGIC_VMDB != BE32(buffer)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: fs/partitions/ldm.c:430:
+		printk(LDM_CRIT "Cannot find VMDB, database may be corrupt.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vm->ver_major != 4'
#618: FILE: fs/partitions/ldm.c:435:
+	if ((vm->ver_major != 4) || (vm->ver_minor != 10)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vm->ver_minor != 10'
#618: FILE: fs/partitions/ldm.c:435:
+	if ((vm->ver_major != 4) || (vm->ver_minor != 10)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#619: FILE: fs/partitions/ldm.c:436:
+		printk(LDM_ERR "Expected VMDB version %d.%d, got %d.%d. "

WARNING:SPLIT_STRING: quoted string split across lines
#620: FILE: fs/partitions/ldm.c:437:
+		printk(LDM_ERR "Expected VMDB version %d.%d, got %d.%d. "
+				"Aborting.\n", 4, 10, vm->ver_major,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#647: FILE: fs/partitions/ldm.c:464:
+	if (!(bh = bread(dev, OFF_VMDB, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#648: FILE: fs/partitions/ldm.c:465:
+		printk(LDM_CRIT "Disk read failed in validate_vmdb.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_vmdb', this function's name, in a string
#648: FILE: fs/partitions/ldm.c:465:
+		printk(LDM_CRIT "Disk read failed in validate_vmdb.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: fs/partitions/ldm.c:483:
+static int compare_tocblocks(const struct tocblock *toc1,
+		const struct tocblock *toc2)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'toc1->bitmap1_start == toc2->bitmap1_start'
#668: FILE: fs/partitions/ldm.c:485:
+	if ((toc1->bitmap1_start == toc2->bitmap1_start)	&&
+	    (toc1->bitmap1_size  == toc2->bitmap1_size)		&&
+	    (toc1->bitmap2_start == toc2->bitmap2_start)	&&
+	    (toc1->bitmap2_size  == toc2->bitmap2_size)		&&
+	    !strncmp(toc1->bitmap1_name, toc2->bitmap1_name,
+			sizeof(toc1->bitmap1_name))		&&
+	    !strncmp(toc1->bitmap2_name, toc2->bitmap2_name,
+			sizeof(toc1->bitmap2_name)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'toc1->bitmap1_size  == toc2->bitmap1_size'
#668: FILE: fs/partitions/ldm.c:485:
+	if ((toc1->bitmap1_start == toc2->bitmap1_start)	&&
+	    (toc1->bitmap1_size  == toc2->bitmap1_size)		&&
+	    (toc1->bitmap2_start == toc2->bitmap2_start)	&&
+	    (toc1->bitmap2_size  == toc2->bitmap2_size)		&&
+	    !strncmp(toc1->bitmap1_name, toc2->bitmap1_name,
+			sizeof(toc1->bitmap1_name))		&&
+	    !strncmp(toc1->bitmap2_name, toc2->bitmap2_name,
+			sizeof(toc1->bitmap2_name)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'toc1->bitmap2_start == toc2->bitmap2_start'
#668: FILE: fs/partitions/ldm.c:485:
+	if ((toc1->bitmap1_start == toc2->bitmap1_start)	&&
+	    (toc1->bitmap1_size  == toc2->bitmap1_size)		&&
+	    (toc1->bitmap2_start == toc2->bitmap2_start)	&&
+	    (toc1->bitmap2_size  == toc2->bitmap2_size)		&&
+	    !strncmp(toc1->bitmap1_name, toc2->bitmap1_name,
+			sizeof(toc1->bitmap1_name))		&&
+	    !strncmp(toc1->bitmap2_name, toc2->bitmap2_name,
+			sizeof(toc1->bitmap2_name)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'toc1->bitmap2_size  == toc2->bitmap2_size'
#668: FILE: fs/partitions/ldm.c:485:
+	if ((toc1->bitmap1_start == toc2->bitmap1_start)	&&
+	    (toc1->bitmap1_size  == toc2->bitmap1_size)		&&
+	    (toc1->bitmap2_start == toc2->bitmap2_start)	&&
+	    (toc1->bitmap2_size  == toc2->bitmap2_size)		&&
+	    !strncmp(toc1->bitmap1_name, toc2->bitmap1_name,
+			sizeof(toc1->bitmap1_name))		&&
+	    !strncmp(toc1->bitmap2_name, toc2->bitmap2_name,
+			sizeof(toc1->bitmap2_name)))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#697: FILE: fs/partitions/ldm.c:514:
+	if (MAGIC_TOCBLOCK != BE64(buffer)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#698: FILE: fs/partitions/ldm.c:515:
+		printk(LDM_CRIT "Cannot find TOCBLOCK, database may be "

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: fs/partitions/ldm.c:516:
+		printk(LDM_CRIT "Cannot find TOCBLOCK, database may be "
+				"corrupt.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: fs/partitions/ldm.c:525:
+	if (strncmp(toc->bitmap1_name, TOC_BITMAP1,
+			sizeof(toc->bitmap1_name)) != 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#709: FILE: fs/partitions/ldm.c:526:
+		printk(LDM_CRIT "TOCBLOCK's first bitmap should be %s, but is "

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: fs/partitions/ldm.c:527:
+		printk(LDM_CRIT "TOCBLOCK's first bitmap should be %s, but is "
+				"%s.\n", TOC_BITMAP1, toc->bitmap1_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: fs/partitions/ldm.c:536:
+	if (strncmp(toc->bitmap2_name, TOC_BITMAP2,
+			sizeof(toc->bitmap2_name)) != 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#720: FILE: fs/partitions/ldm.c:537:
+		printk(LDM_CRIT "TOCBLOCK's second bitmap should be %s, but is "

WARNING:SPLIT_STRING: quoted string split across lines
#721: FILE: fs/partitions/ldm.c:538:
+		printk(LDM_CRIT "TOCBLOCK's second bitmap should be %s, but is "
+				"%s.\n", TOC_BITMAP2, toc->bitmap2_name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#744: FILE: fs/partitions/ldm.c:561:
+	toc2 = (struct tocblock*)kmalloc(sizeof(*toc2), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#744: FILE: fs/partitions/ldm.c:561:
+	toc2 = (struct tocblock*)kmalloc(sizeof(*toc2), GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#747: FILE: fs/partitions/ldm.c:564:
+	toc3 = (struct tocblock*)kmalloc(sizeof(*toc3), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#747: FILE: fs/partitions/ldm.c:564:
+	toc3 = (struct tocblock*)kmalloc(sizeof(*toc3), GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#750: FILE: fs/partitions/ldm.c:567:
+	toc4 = (struct tocblock*)kmalloc(sizeof(*toc4), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#750: FILE: fs/partitions/ldm.c:567:
+	toc4 = (struct tocblock*)kmalloc(sizeof(*toc4), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#754: FILE: fs/partitions/ldm.c:571:
+	if (!(bh = bread(devdb, OFF_TOCBLOCK1, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#755: FILE: fs/partitions/ldm.c:572:
+		printk(LDM_CRIT "Disk read 1 failed in validate_tocblocks.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_tocblocks', this function's name, in a string
#755: FILE: fs/partitions/ldm.c:572:
+		printk(LDM_CRIT "Disk read 1 failed in validate_tocblocks.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#763: FILE: fs/partitions/ldm.c:580:
+	if (!(bh = bread(devdb, OFF_TOCBLOCK2, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: fs/partitions/ldm.c:581:
+		printk(LDM_CRIT "Disk read 2 failed in validate_tocblocks.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_tocblocks', this function's name, in a string
#764: FILE: fs/partitions/ldm.c:581:
+		printk(LDM_CRIT "Disk read 2 failed in validate_tocblocks.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#772: FILE: fs/partitions/ldm.c:589:
+	if (!(bh = bread(devdb, OFF_TOCBLOCK3, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#773: FILE: fs/partitions/ldm.c:590:
+		printk(LDM_CRIT "Disk read 3 failed in validate_tocblocks.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_tocblocks', this function's name, in a string
#773: FILE: fs/partitions/ldm.c:590:
+		printk(LDM_CRIT "Disk read 3 failed in validate_tocblocks.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#781: FILE: fs/partitions/ldm.c:598:
+	if (!(bh = bread(devdb, OFF_TOCBLOCK4, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#782: FILE: fs/partitions/ldm.c:599:
+		printk(LDM_CRIT "Disk read 4 failed in validate_tocblocks.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_tocblocks', this function's name, in a string
#782: FILE: fs/partitions/ldm.c:599:
+		printk(LDM_CRIT "Disk read 4 failed in validate_tocblocks.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: fs/partitions/ldm.c:609:
+		printk(LDM_CRIT "First and second TOCBLOCKs don't match.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#797: FILE: fs/partitions/ldm.c:614:
+		printk(LDM_CRIT "Third and fourth TOCBLOCKs don't match.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#802: FILE: fs/partitions/ldm.c:619:
+		printk(LDM_CRIT "First and third TOCBLOCKs don't match.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#811: FILE: fs/partitions/ldm.c:628:
+	printk(LDM_CRIT "Not enough memory to allocate required buffers.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: fs/partitions/ldm.c:644:
+static int compare_privheads(const struct privhead *ph1,
+		const struct privhead *ph2)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->ver_major == ph2->ver_major'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->ver_minor == ph2->ver_minor'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->logical_disk_start == ph2->logical_disk_start'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->logical_disk_size  == ph2->logical_disk_size'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->config_start == ph2->config_start'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph1->config_size  == ph2->config_size'
#829: FILE: fs/partitions/ldm.c:646:
+	if ((ph1->ver_major == ph2->ver_major)			 &&
+	    (ph1->ver_minor == ph2->ver_minor)			 &&
+	    (ph1->logical_disk_start == ph2->logical_disk_start) &&
+	    (ph1->logical_disk_size  == ph2->logical_disk_size)	 &&
+	    (ph1->config_start == ph2->config_start)		 &&
+	    (ph1->config_size  == ph2->config_size)		 &&
+	    !strncmp(ph1->disk_id, ph2->disk_id, sizeof(ph1->disk_id)))

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#848: FILE: fs/partitions/ldm.c:665:
+ * Return 1 on succes and -1 on error.
                ^^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#856: FILE: fs/partitions/ldm.c:673:
+	ph2 = (struct privhead*)kmalloc(sizeof(*ph2), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#856: FILE: fs/partitions/ldm.c:673:
+	ph2 = (struct privhead*)kmalloc(sizeof(*ph2), GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#859: FILE: fs/partitions/ldm.c:676:
+	ph3 = (struct privhead*)kmalloc(sizeof(*ph3), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#859: FILE: fs/partitions/ldm.c:676:
+	ph3 = (struct privhead*)kmalloc(sizeof(*ph3), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#862: FILE: fs/partitions/ldm.c:679:
+	if (!(bh = bread(dev, OFF_PRIVHEAD2, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#863: FILE: fs/partitions/ldm.c:680:
+		printk(LDM_CRIT "Disk read 1 failed in validate_privheads.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_privheads', this function's name, in a string
#863: FILE: fs/partitions/ldm.c:680:
+		printk(LDM_CRIT "Disk read 1 failed in validate_privheads.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#870: FILE: fs/partitions/ldm.c:687:
+	if (!(bh = bread(dev, OFF_PRIVHEAD3, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#871: FILE: fs/partitions/ldm.c:688:
+		printk(LDM_CRIT "Disk read 2 failed in validate_privheads.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_privheads', this function's name, in a string
#871: FILE: fs/partitions/ldm.c:688:
+		printk(LDM_CRIT "Disk read 2 failed in validate_privheads.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#880: FILE: fs/partitions/ldm.c:697:
+		printk(LDM_CRIT "First and second PRIVHEADs don't match.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#885: FILE: fs/partitions/ldm.c:702:
+		printk(LDM_CRIT "First and third PRIVHEADs don't match.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#894: FILE: fs/partitions/ldm.c:711:
+	printk(LDM_CRIT "Not enough memory to allocate required buffers.\n");

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#912: FILE: fs/partitions/ldm.c:729:
+ * Return 1 on succes and -1 on error.
                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: fs/partitions/ldm.c:732:
+static int create_partition(struct gendisk *hd, const int minor,
+		const int start, const int size)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < 1'
#926: FILE: fs/partitions/ldm.c:743:
+	if ((start < 1) || ((start + size) > hd->part[disk_minor].nr_sects)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#927: FILE: fs/partitions/ldm.c:744:
+		printk(LDM_CRIT "LDM Partition exceeds physical disk. "

WARNING:SPLIT_STRING: quoted string split across lines
#928: FILE: fs/partitions/ldm.c:745:
+		printk(LDM_CRIT "LDM Partition exceeds physical disk. "
+				"Aborting.\n");

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#944: FILE: fs/partitions/ldm.c:761:
+ * Return 1 on succes and -1 on error, in which case @ph is undefined.
                ^^^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#948: FILE: fs/partitions/ldm.c:765:
+	if (MAGIC_PRIVHEAD != BE64(buffer)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#949: FILE: fs/partitions/ldm.c:766:
+		printk(LDM_ERR "Cannot find PRIVHEAD structure. LDM database "

WARNING:SPLIT_STRING: quoted string split across lines
#950: FILE: fs/partitions/ldm.c:767:
+		printk(LDM_ERR "Cannot find PRIVHEAD structure. LDM database "
+				"is corrupt. Aborting.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph->ver_major != 2'
#955: FILE: fs/partitions/ldm.c:772:
+	if ((ph->ver_major != 2) || (ph->ver_minor != 11)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ph->ver_minor != 11'
#955: FILE: fs/partitions/ldm.c:772:
+	if ((ph->ver_major != 2) || (ph->ver_minor != 11)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#956: FILE: fs/partitions/ldm.c:773:
+		printk(LDM_ERR "Expected PRIVHEAD version %d.%d, got %d.%d. "

WARNING:SPLIT_STRING: quoted string split across lines
#957: FILE: fs/partitions/ldm.c:774:
+		printk(LDM_ERR "Expected PRIVHEAD version %d.%d, got %d.%d. "
+				"Aborting.\n", 2, 11, ph->ver_major,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: fs/partitions/ldm.c:781:
+		printk(LDM_ERR "Database should be %u bytes, claims to be %Lu "

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#964: FILE: fs/partitions/ldm.c:781:
+		printk(LDM_ERR "Database should be %u bytes, claims to be %Lu "

WARNING:SPLIT_STRING: quoted string split across lines
#965: FILE: fs/partitions/ldm.c:782:
+		printk(LDM_ERR "Database should be %u bytes, claims to be %Lu "
+				"bytes. Aborting.\n", LDM_DB_SIZE,

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#990: FILE: fs/partitions/ldm.c:807:
+ * Return 1 on succes, 0 if device is not a dynamic disk and -1 on error.
                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: fs/partitions/ldm.c:810:
+static int create_db_partition(struct gendisk *hd, const kdev_t dev,
+		const unsigned long first_sector, const int first_part_minor,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#999: FILE: fs/partitions/ldm.c:816:
+	if (!(bh = bread(dev, OFF_PRIVHEAD1, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1000: FILE: fs/partitions/ldm.c:817:
+		printk(LDM_CRIT __FUNCTION__ "(): Device read failed.\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1000: FILE: fs/partitions/ldm.c:817:
+		printk(LDM_CRIT __FUNCTION__ "(): Device read failed.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1005: FILE: fs/partitions/ldm.c:822:
+		ldm_debug("Cannot find PRIVHEAD structure. Not a dynamic disk "
+				"or corrupt LDM database.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1033: FILE: fs/partitions/ldm.c:850:
+	if (!(bh = bread(dev, 0, LDM_BLOCKSIZE))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1035: FILE: fs/partitions/ldm.c:852:
+			printk(LDM_ERR "Unable to read partition table.\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1038: FILE: fs/partitions/ldm.c:855:
+	if (*(u16*)(bh->b_data + 0x01FE) != cpu_to_le16(MSDOS_LABEL_MAGIC)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1043: FILE: fs/partitions/ldm.c:860:
+	p = (struct partition*)(bh->b_data + 0x01BE);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1045: FILE: fs/partitions/ldm.c:862:
+		if (!SYS_IND(p+i) || SYS_IND(p+i) == WIN2K_EXTENDED_PARTITION)
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1045: FILE: fs/partitions/ldm.c:862:
+		if (!SYS_IND(p+i) || SYS_IND(p+i) == WIN2K_EXTENDED_PARTITION)
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1047: FILE: fs/partitions/ldm.c:864:
+		if (SYS_IND(p+i) == WIN2K_DYNAMIC_PARTITION) {
 		             ^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#1079: FILE: fs/partitions/ldm.c:896:
+ * in sequence as devices 5 and following. For example, if the device is hda,
                                                                          ^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1087: FILE: fs/partitions/ldm.c:904:
+ *	-1 if an error occured.
   	               ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: fs/partitions/ldm.c:907:
+int ldm_partition(struct gendisk *hd, kdev_t dev, unsigned long first_sector,
+		int first_part_minor)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: fs/partitions/ldm.c:921:
+		ldm_debug("Expected a blocksize of %d bytes, got %d instead.\n",
+				LDM_BLOCKSIZE, get_ptable_blocksize(dev));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1107: FILE: fs/partitions/ldm.c:924:
+^Ierr = get_hardsect_size(dev); $

WARNING:SPLIT_STRING: quoted string split across lines
#1110: FILE: fs/partitions/ldm.c:927:
+		ldm_debug("Expected a sector size of %d bytes, got %d "
+				"instead.\n", 512, get_hardsect_size(dev));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1117: FILE: fs/partitions/ldm.c:934:
+	if (!(ph = (struct privhead*)kmalloc(sizeof(*ph), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1117: FILE: fs/partitions/ldm.c:934:
+	if (!(ph = (struct privhead*)kmalloc(sizeof(*ph), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1117: FILE: fs/partitions/ldm.c:934:
+	if (!(ph = (struct privhead*)kmalloc(sizeof(*ph), GFP_KERNEL)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1130: FILE: fs/partitions/ldm.c:947:
+	if (!(toc = (struct tocblock*)kmalloc(sizeof(*toc), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1130: FILE: fs/partitions/ldm.c:947:
+	if (!(toc = (struct tocblock*)kmalloc(sizeof(*toc), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1130: FILE: fs/partitions/ldm.c:947:
+	if (!(toc = (struct tocblock*)kmalloc(sizeof(*toc), GFP_KERNEL)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1136: FILE: fs/partitions/ldm.c:953:
+	if (!(vm = (struct vmdb*)kmalloc(sizeof(*vm), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1136: FILE: fs/partitions/ldm.c:953:
+	if (!(vm = (struct vmdb*)kmalloc(sizeof(*vm), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1136: FILE: fs/partitions/ldm.c:953:
+	if (!(vm = (struct vmdb*)kmalloc(sizeof(*vm), GFP_KERNEL)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1142: FILE: fs/partitions/ldm.c:959:
+	if (!(dk = (struct ldmdisk*)kmalloc(sizeof(*dk), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1142: FILE: fs/partitions/ldm.c:959:
+	if (!(dk = (struct ldmdisk*)kmalloc(sizeof(*dk), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1142: FILE: fs/partitions/ldm.c:959:
+	if (!(dk = (struct ldmdisk*)kmalloc(sizeof(*dk), GFP_KERNEL)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1159: FILE: fs/partitions/ldm.c:976:
+	printk(LDM_CRIT "Not enough memory to allocate required buffers.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1168: FILE: fs/partitions/ldm.h:1:
+#ifndef _FS_PT_LDM_H_

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1171: FILE: fs/partitions/ldm.h:4:
+ * $Id: ldm.h,v 1.13 2001/07/23 19:49:49 antona Exp $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1192: FILE: fs/partitions/ldm.h:25:
+ * in the file COPYING); if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1193: FILE: fs/partitions/ldm.h:26:
+ * Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1202: FILE: fs/partitions/ldm.h:35:
+#define LDM_CRIT	KERN_CRIT	LDM_PREFIX /* critical conditions */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1203: FILE: fs/partitions/ldm.h:36:
+#define LDM_ERR		KERN_ERR	LDM_PREFIX /* error conditions */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1204: FILE: fs/partitions/ldm.h:37:
+#define LDM_DEBUG	KERN_DEBUG	LDM_PREFIX /* debug-level messages */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1223: FILE: fs/partitions/ldm.h:56:
+#define LDM_FIRST_PART_OFFSET	4		/* Add this to first_part_minor
+						   to get to the first data

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1224: FILE: fs/partitions/ldm.h:57:
+						   partition device minor. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1227: FILE: fs/partitions/ldm.h:60:
+#define OFF_PRIVHEAD1		3		/* Offset of the first privhead
+						   relative to the start of the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1229: FILE: fs/partitions/ldm.h:62:
+						   LDM_BLOCKSIZE. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1245: FILE: fs/partitions/ldm.h:78:
+#define WIN2K_EXTENDED_PARTITION	0x05	/* A standard extended
+						   partition. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1245: FILE: fs/partitions/ldm.h:78:
+						   partition. */

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#1250: FILE: fs/partitions/ldm.h:83:
+/* Borrowed from msdos.c */
                  ^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1251: FILE: fs/partitions/ldm.h:84:
+#define SYS_IND(p)		(get_unaligned(&p->sys_ind))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1252: FILE: fs/partitions/ldm.h:85:
+#define NR_SECTS(p)		({ __typeof__(p->nr_sects) __a =	\
+					get_unaligned(&p->nr_sects);	\
+					le32_to_cpu(__a);		\
+				})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1256: FILE: fs/partitions/ldm.h:89:
+#define START_SECT(p)		({ __typeof__(p->start_sect) __a =	\
+					get_unaligned(&p->start_sect);	\
+					le32_to_cpu(__a);		\
+				})

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1262: FILE: fs/partitions/ldm.h:95:
+#define BE16(x)			((u16)be16_to_cpu(get_unaligned((u16*)(x))))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1263: FILE: fs/partitions/ldm.h:96:
+#define BE32(x)			((u32)be32_to_cpu(get_unaligned((u32*)(x))))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1264: FILE: fs/partitions/ldm.h:97:
+#define BE64(x)			((u64)be64_to_cpu(get_unaligned((u64*)(x))))

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#1266: FILE: fs/partitions/ldm.h:99:
+/* Borrowed from msdos.c. */
                  ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: fs/partitions/ldm.h:159:
+int ldm_partition(struct gendisk *hd, kdev_t dev, unsigned long first_sector,
+		int first_part_minor);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 103 warnings, 37 checks, 1208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
