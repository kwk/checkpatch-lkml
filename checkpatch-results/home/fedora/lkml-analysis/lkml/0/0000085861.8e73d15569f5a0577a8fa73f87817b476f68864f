WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#46: FILE: mm/mem_init.c:649:
+			printk("start_pfn %lu >= %lu\n", early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#47: FILE: mm/mem_init.c:650:
+			printk("start_pfn %lu >= %lu\n", early_node_map[i].start_pfn,
+								max_low_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#53: FILE: mm/mem_init.c:655:
+			printk("end_pfn %lu going back to %lu\n", early_node_map[i].end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#54: FILE: mm/mem_init.c:656:
+			printk("end_pfn %lu going back to %lu\n", early_node_map[i].end_pfn,
+									max_low_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#59: FILE: mm/mem_init.c:661:
+		printk("free_bootmem_node(%d, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: mm/mem_init.c:662:
+		printk("free_bootmem_node(%d, %lu, %lu)\n",
+				early_node_map[i].nid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#72: FILE: mm/mem_init.c:675:
+		printk("memory_present(%d, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#73: FILE: mm/mem_init.c:676:
+		printk("memory_present(%d, %lu, %lu)\n",
+			early_node_map[i].nid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#89: FILE: mm/mem_init.c:757:
+			printk("prev_end > start_pfn : %lu > %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: mm/mem_init.c:758:
+			printk("prev_end > start_pfn : %lu > %lu\n",
+					prev_end_pfn,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#92: FILE: mm/mem_init.c:760:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#97: FILE: mm/mem_init.c:765:
+		printk("Hole found index %d: %lu -> %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: mm/mem_init.c:766:
+		printk("Hole found index %d: %lu -> %lu\n",
+				i, prev_end_pfn, start_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#106: FILE: mm/mem_init.c:917:
+	printk("add_active_range(%d, %lu, %lu): ",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_active_range', this function's name, in a string
#106: FILE: mm/mem_init.c:917:
+	printk("add_active_range(%d, %lu, %lu): ",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: mm/mem_init.c:918:
+	printk("add_active_range(%d, %lu, %lu): ",
+			nid, start_pfn, end_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: mm/mem_init.c:928:
+			printk("Merging forward\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#124: FILE: mm/mem_init.c:936:
+			printk("Merging backwards\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: mm/mem_init.c:952:
+	printk("New\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: mm/mem_init.c:983:
+	printk("Dumping sorted node map\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: mm/mem_init.c:985:
+		printk("entry %lu: %d  %lu -> %lu\n", num,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: mm/mem_init.c:986:
+		printk("entry %lu: %d  %lu -> %lu\n", num,
+				early_node_map[num].nid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: mm/mem_init.c:1027:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_area_init_nodes', this function's name, in a string
#155: FILE: mm/mem_init.c:1027:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: mm/mem_init.c:1028:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",
+			arch_max_dma_pfn, arch_max_dma32_pfn,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: mm/mem_init.c:1045:
+	printk("free_area_init_nodes(): find_min_pfn = %lu\n", find_min_pfn());

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_area_init_nodes', this function's name, in a string
#166: FILE: mm/mem_init.c:1045:
+	printk("free_area_init_nodes(): find_min_pfn = %lu\n", find_min_pfn());

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 18 warnings, 9 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
