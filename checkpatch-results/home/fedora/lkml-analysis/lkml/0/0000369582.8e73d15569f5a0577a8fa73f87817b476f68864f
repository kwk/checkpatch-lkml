WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .29343-linux-2.5.69-bk10/include/asm-generic/percpu.h .29343-linux-2.5.69-bk10.updated/include/asm-generic/percpu.h

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#139: FILE: include/linux/percpu.h:6:
+#include <asm/bug.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/percpu.h:25:
+extern void *__alloc_percpu(size_t size, size_t align);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/percpu.h:26:
+extern void free_percpu(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#164: FILE: include/linux/percpu.h:26:
+extern void free_percpu(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#186: FILE: include/linux/percpu.h:34:
+#define DEFINE_PER_CPU(type, name) \
+    __typeof__(type) name##__per_cpu

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: include/linux/percpu.h:35:
+    __typeof__(type) name##__per_cpu$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: include/linux/percpu.h:48:
+	BUG_ON(align > SMP_CACHE_BYTES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: include/linux/percpu.h:49:
+	BUG_ON(size > PERCPU_MAX);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#211: FILE: include/linux/percpu.h:55:
 }
+static inline void free_percpu(const void *ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#317: FILE: mm/percpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#324: FILE: mm/percpu.c:8:
+/* Simple linked list allocator: we don't stress it hard, but do want
+   it space-efficient.  We keep the bookkeeping separately. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: mm/percpu.c:8:
+   it space-efficient.  We keep the bookkeeping separately. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#347: FILE: mm/percpu.c:31:
+	return vmalloc(size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#360: FILE: mm/percpu.c:44:
+	ptr = alloc_bootmem(*size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#361: FILE: mm/percpu.c:45:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#362: FILE: mm/percpu.c:46:
+		__per_cpu_offset[i] = ptr + *size*i - (void *)__per_cpu_start;
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#363: FILE: mm/percpu.c:47:
+		memcpy(ptr + *size*i, __per_cpu_start,
 		                  ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#371: FILE: mm/percpu.c:55:
+struct pcpu_block
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#393: FILE: mm/percpu.c:77:
+			      + sizeof(b->size[0]) * b->num_allocated*2,
 			                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#400: FILE: mm/percpu.c:84:
+		memcpy(new->size, b->size, sizeof(b->size[0])*b->num_used);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#408: FILE: mm/percpu.c:92:
+	memmove(&b->size[i+1], &b->size[i],
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#412: FILE: mm/percpu.c:96:
+	b->size[i+1] -= size;
 	         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#423: FILE: mm/percpu.c:107:
+	b = kmalloc(sizeof(*b) + PERCPU_INIT_BLOCKS*sizeof(int), GFP_KERNEL);
 	                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: mm/percpu.c:141:
+	BUG_ON(align > SMP_CACHE_BYTES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: mm/percpu.c:142:
+	BUG_ON(size > PERCPU_MAX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: mm/percpu.c:143:
+	BUG_ON(!percpu_block_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: mm/percpu.c:155:
+			BUG_ON(i == 0 && extra != 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#477: FILE: mm/percpu.c:161:
+			if (b->size[i-1] < 0)
 			             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#478: FILE: mm/percpu.c:162:
+				b->size[i-1] -= extra;
 				         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#480: FILE: mm/percpu.c:164:
+				b->size[i-1] += extra;
 				         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: mm/percpu.c:171:
+				struct pcpu_block *realloc;
+				realloc = split_block(b, i, size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: mm/percpu.c:179:
+^I^I^I/* Pointer will be offset by this: compensate. */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: mm/percpu.c:180:
+^I^I^Iret = RELOC_HIDE(ptr, -(percpu_base $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#498: FILE: mm/percpu.c:182:
+			for (i = 0; i < NR_CPUS; i++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: mm/percpu.c:201:
+	BUG_ON(b->size[i] >= 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#521: FILE: mm/percpu.c:205:
+	if (i > 0 && b->size[i-1] >= 0) {
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#522: FILE: mm/percpu.c:206:
+		b->size[i-1] += b->size[i];
 		         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#524: FILE: mm/percpu.c:208:
+		memmove(&b->size[i], &b->size[i+1],
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: mm/percpu.c:213:
+	if (i+1 < b->num_used && b->size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: mm/percpu.c:213:
+	if (i+1 < b->num_used && b->size[i+1] >= 0) {
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: mm/percpu.c:214:
+		b->size[i] += b->size[i+1];
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: mm/percpu.c:216:
+		memmove(&b->size[i+1], &b->size[i+2],
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: mm/percpu.c:216:
+		memmove(&b->size[i+1], &b->size[i+2],
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#533: FILE: mm/percpu.c:217:
+			(b->num_used - (i+1)) * sizeof(b->size[0]));
 			                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: mm/percpu.c:221:
+		BUG_ON(b->base_ptr == percpu_base);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: mm/percpu.c:233:
+^I/* Pointer will be offset by this amount: compensate. */ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: mm/percpu.c:249:
+	BUG();

WARNING:IF_1: Consider removing the #if 1 and its #endif
#568: FILE: mm/percpu.c:252:
+#if 1

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#581: FILE: mm/percpu.c:265:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#585: FILE: mm/percpu.c:269:
+				BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#598: FILE: mm/percpu.c:282:
+	printk("Total blocks = %u\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: mm/percpu.c:295:
+			printk("Block %p has %u subs at %s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: mm/percpu.c:299:
+}^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: mm/percpu.c:304:
+	unsigned char *p = ptr;
+	while (len > 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: mm/percpu.c:309:
+}^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#642: FILE: mm/percpu.c:326:
+	allocs = frees = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: mm/percpu.c:328:
+	printk("This cpu = %p (%u)\n",

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#646: FILE: mm/percpu.c:330:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#647: FILE: mm/percpu.c:331:
+		printk("&ptr[i] == %p (%u)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: mm/percpu.c:337:
+	BUG_ON(allocs != frees);

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#655: FILE: mm/percpu.c:339:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: mm/percpu.c:341:
+		unsigned int j;
+		ptrs[i] = __alloc_percpu(i, 4);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#658: FILE: mm/percpu.c:342:
+		for (j = 0; j < NR_CPUS; j++) {

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#664: FILE: mm/percpu.c:348:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#666: FILE: mm/percpu.c:350:
+		unsigned int j;
+		for (j = 0; j < NR_CPUS; j++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#666: FILE: mm/percpu.c:350:
+		for (j = 0; j < NR_CPUS; j++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#668: FILE: mm/percpu.c:352:
+				BUG();

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#670: FILE: mm/percpu.c:354:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: mm/percpu.c:359:
+	BUG_ON(allocs != frees);

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: mm/percpu.c:364:
+		unsigned int j = random() % PERCPU_MAX;
+		if (!ptrs[j]) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#686: FILE: mm/percpu.c:370:
+			ptrs[j] = __alloc_percpu(sizes[j], 1<<(random()%L1_CACHE_SHIFT));
 			                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#686: FILE: mm/percpu.c:370:
+			ptrs[j] = __alloc_percpu(sizes[j], 1<<(random()%L1_CACHE_SHIFT));
 			                                               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#688: FILE: mm/percpu.c:372:
+			for (cpu = 0; cpu < NR_CPUS; cpu++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#689: FILE: mm/percpu.c:373:
+				memset(per_cpu_ptr(ptrs[j], cpu), j+cpu,
 				                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: mm/percpu.c:377:
+				printk("c\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#702: FILE: mm/percpu.c:386:
+		if (i % (10000/10) == 0)
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#703: FILE: mm/percpu.c:387:
+			printk(".\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#713: FILE: mm/percpu.c:397:
+	BUG_ON(allocs != frees);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#743: FILE: mm/percpu.c:427:
+	printk("Per-cpu data: %Zu of %lu bytes at %p\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#743: FILE: mm/percpu.c:427:
+	printk("Per-cpu data: %Zu of %lu bytes at %p\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#747: FILE: mm/percpu.c:431:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#747: FILE: mm/percpu.c:431:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#752: FILE: mm/percpu.c:436:
+	pcpu->size[1] = percpu_block_size-(__per_cpu_end - __per_cpu_start);
 	                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#996: FILE: net/ipv6/af_inet6.c:676:
+	if (snmp6_mib_init((void **)ipv6_statistics, sizeof (struct ipv6_mib),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1000: FILE: net/ipv6/af_inet6.c:679:
+	if (snmp6_mib_init((void **)icmpv6_statistics, sizeof (struct icmpv6_mib),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1004: FILE: net/ipv6/af_inet6.c:682:
+	if (snmp6_mib_init((void **)udp_stats_in6, sizeof (struct udp_mib),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 47 warnings, 30 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369582.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
