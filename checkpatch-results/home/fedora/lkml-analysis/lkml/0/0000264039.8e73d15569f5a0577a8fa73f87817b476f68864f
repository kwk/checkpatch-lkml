WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> > change: it is always exported now, and if !CONFIG_MODULE_UNLOAD, it reports

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#68: FILE: include/linux/module.h:213:
+	ssize_t (*show)(struct module *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#68: FILE: include/linux/module.h:213:
+	ssize_t (*show)(struct module *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#69: FILE: include/linux/module.h:214:
+	ssize_t (*store)(struct module *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#69: FILE: include/linux/module.h:214:
+	ssize_t (*store)(struct module *, const char *, size_t count);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#132: FILE: kernel/module.c:668:
+	return sprintf(buffer, "%u\n", module_refcount(mod)-1);
 	                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: kernel/module.c:1053:
+static struct attribute * default_attrs[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#174: FILE: kernel/module.c:1061:
+#define to_module_kobject(n) container_of(n, struct module_kobject, kobj);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: kernel/module.c:1067:
+^Istruct module_attribute *attribute; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: kernel/module.c:1099:
+        .default_attrs = default_attrs,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: kernel/module.c:1099:
+        .default_attrs = default_attrs,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: kernel/module.c:1104:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mod->mkobj)...) over kmalloc(sizeof(struct module_kobject)...)
#251: FILE: kernel/module.c:1111:
+	mod->mkobj = kmalloc(sizeof(struct module_kobject), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264039.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 3 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264039.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
