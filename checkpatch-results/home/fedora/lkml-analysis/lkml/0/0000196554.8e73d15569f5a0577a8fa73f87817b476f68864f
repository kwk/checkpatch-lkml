ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: arch/ppc64/kernel/setup.c:818:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: arch/ppc64/kernel/lmb.c:354:
+	extern unsigned long memory_limit;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lmb.memory
#133: FILE: arch/ppc64/kernel/lmb.c:356:
+	struct lmb_region *mem = &(lmb.memory);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#135: FILE: arch/ppc64/kernel/lmb.c:358:
+	if (! memory_limit)
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: arch/ppc64/kernel/lmb.c:367:
+^I^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/asm-ppc64/lmb.h:54:
+extern void __init lmb_apply_memory_limit(void);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_get_cmdline>
#178: FILE: arch/ppc64/kernel/iSeries_setup.c:287:
+static void __init iSeries_get_cmdline(void)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#186: FILE: arch/ppc64/kernel/iSeries_setup.c:307:
+	extern unsigned long memory_limit;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: arch/ppc64/kernel/iSeries_setup.c:357:
+^I$

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#198: FILE: arch/ppc64/kernel/iSeries_setup.c:359:
+	strlcpy(saved_command_line, cmd_line, COMMAND_LINE_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: arch/ppc64/kernel/iSeries_setup.c:360:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: arch/ppc64/kernel/iSeries_setup.c:363:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <physicalMemorySize>
#204: FILE: arch/ppc64/kernel/iSeries_setup.c:365:
+		if (memory_limit > systemcfg->physicalMemorySize)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: arch/ppc64/kernel/iSeries_setup.c:366:
+			printk("Ignoring 'mem' option, value %lu is too large.\n", memory_limit);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_bolt_kernel>
#211: FILE: arch/ppc64/kernel/iSeries_setup.c:372:
+	iSeries_bolt_kernel(0, systemcfg->physicalMemorySize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: arch/ppc64/kernel/iSeries_setup.c:373:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/ppc64/kernel/iSeries_setup.c:378:
+^I$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#255: FILE: arch/ppc64/kernel/prom.c:882:
+	extern unsigned long memory_limit, tce_alloc_start, tce_alloc_end;

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/ppc64/kernel/prom.c:899:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: arch/ppc64/kernel/prom.c:899:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/ppc64/kernel/prom.c:899:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#263: FILE: arch/ppc64/kernel/prom.c:899:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/ppc64/kernel/prom.c:900:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: arch/ppc64/kernel/prom.c:900:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/ppc64/kernel/prom.c:900:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: arch/ppc64/kernel/prom.c:901:
+ ^I^Imemory_limit = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: arch/ppc64/kernel/prom.c:901:
+ ^I^Imemory_limit = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/ppc64/kernel/prom.c:901:
+ ^I^Imemory_limit = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: arch/ppc64/kernel/prom.c:902:
+ ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: arch/ppc64/kernel/prom.c:902:
+ ^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: arch/ppc64/kernel/prom.c:902:
+ ^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: arch/ppc64/kernel/prom.c:903:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: arch/ppc64/kernel/prom.c:903:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: arch/ppc64/kernel/prom.c:903:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#267: FILE: arch/ppc64/kernel/prom.c:903:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/ppc64/kernel/prom.c:904:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: arch/ppc64/kernel/prom.c:904:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/ppc64/kernel/prom.c:904:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: arch/ppc64/kernel/prom.c:905:
+ ^I^Itce_alloc_start = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: arch/ppc64/kernel/prom.c:905:
+ ^I^Itce_alloc_start = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: arch/ppc64/kernel/prom.c:905:
+ ^I^Itce_alloc_start = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: arch/ppc64/kernel/prom.c:906:
+ ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: arch/ppc64/kernel/prom.c:906:
+ ^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: arch/ppc64/kernel/prom.c:906:
+ ^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/ppc64/kernel/prom.c:907:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: arch/ppc64/kernel/prom.c:907:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/ppc64/kernel/prom.c:907:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#271: FILE: arch/ppc64/kernel/prom.c:907:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/ppc64/kernel/prom.c:908:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: arch/ppc64/kernel/prom.c:908:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/ppc64/kernel/prom.c:908:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/ppc64/kernel/prom.c:909:
+ ^I^Itce_alloc_end = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: arch/ppc64/kernel/prom.c:909:
+ ^I^Itce_alloc_end = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/ppc64/kernel/prom.c:909:
+ ^I^Itce_alloc_end = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: arch/ppc64/kernel/prom.c:910:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: arch/ppc64/kernel/prom.c:910:
+ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#295: FILE: arch/ppc64/mm/hash_utils.c:153:
+	extern unsigned long tce_alloc_start, tce_alloc_end;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: arch/ppc64/mm/hash_utils.c:248:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: arch/ppc64/mm/hash_utils.c:251:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: arch/ppc64/mm/hash_utils.c:253:
+		create_pte_mapping(tce_alloc_start, tce_alloc_end,
+			mode_rw, use_largepages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: arch/ppc64/mm/hash_utils.c:255:
+^I$

WARNING:TYPO_SPELLING: 'wholy' may be misspelled - perhaps 'wholly'?
#348: FILE: arch/ppc64/mm/numa.c:294:
+ * discarded as it lies wholy above the memory limit.
                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: arch/ppc64/mm/numa.c:300:
+	 * having memory holes below the limit. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#355: FILE: arch/ppc64/mm/numa.c:301:
+	extern unsigned long memory_limit;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#357: FILE: arch/ppc64/mm/numa.c:303:
+	if (! memory_limit)
 	    ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_enforce_memory_limit', this function's name, in a string
#361: FILE: arch/ppc64/mm/numa.c:307:
+		dbg("numa_enforce_memory_limit() size = %lx\n", size);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_enforce_memory_limit', this function's name, in a string
#366: FILE: arch/ppc64/mm/numa.c:312:
+		dbg("numa_enforce_memory_limit() size = %lx\n", (unsigned long)0);

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)0' could be '0UL'
#366: FILE: arch/ppc64/mm/numa.c:312:
+		dbg("numa_enforce_memory_limit() size = %lx\n", (unsigned long)0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_enforce_memory_limit', this function's name, in a string
#370: FILE: arch/ppc64/mm/numa.c:316:
+	dbg("numa_enforce_memory_limit() size = %lx\n", lmb_end_of_DRAM() - start);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#381: FILE: arch/ppc64/mm/numa.c:408:
+		if (! (size = numa_enforce_memory_limit(start, size))) {
 		    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#381: FILE: arch/ppc64/mm/numa.c:408:
+		if (! (size = numa_enforce_memory_limit(start, size))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: arch/ppc64/mm/numa.c:655:
+ ^I^I^Iif ((mem_size = numa_enforce_memory_limit(mem_start, mem_size))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: arch/ppc64/mm/numa.c:655:
+ ^I^I^Iif ((mem_size = numa_enforce_memory_limit(mem_start, mem_size))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: arch/ppc64/mm/numa.c:655:
+ ^I^I^Iif ((mem_size = numa_enforce_memory_limit(mem_start, mem_size))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#413: FILE: arch/ppc64/mm/numa.c:655:
+ 			if ((mem_size = numa_enforce_memory_limit(mem_start, mem_size))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: arch/ppc64/mm/numa.c:656:
+ ^I^I^I^Iif (mem_start >= start_paddr &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: arch/ppc64/mm/numa.c:656:
+ ^I^I^I^Iif (mem_start >= start_paddr &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: arch/ppc64/mm/numa.c:656:
+ ^I^I^I^Iif (mem_start >= start_paddr &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: arch/ppc64/mm/numa.c:657:
+ ^I^I^I    ^I(mem_start + mem_size) <= end_paddr) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: arch/ppc64/mm/numa.c:657:
+ ^I^I^I    ^I(mem_start + mem_size) <= end_paddr) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: arch/ppc64/mm/numa.c:657:
+ 				if (mem_start >= start_paddr &&
+ 			    	(mem_start + mem_size) <= end_paddr) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: arch/ppc64/mm/numa.c:657:
+ ^I^I^I    ^I(mem_start + mem_size) <= end_paddr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: arch/ppc64/mm/numa.c:658:
+ ^I^I^I^I^I/* should be no overlaps ! */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: arch/ppc64/mm/numa.c:658:
+ ^I^I^I^I^I/* should be no overlaps ! */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: arch/ppc64/mm/numa.c:658:
+ ^I^I^I^I^I/* should be no overlaps ! */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: arch/ppc64/mm/numa.c:659:
+ ^I^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: arch/ppc64/mm/numa.c:659:
+ ^I^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: arch/ppc64/mm/numa.c:659:
+ ^I^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: arch/ppc64/mm/numa.c:660:
+ ^I^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: arch/ppc64/mm/numa.c:660:
+ ^I^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: arch/ppc64/mm/numa.c:660:
+ ^I^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: arch/ppc64/mm/numa.c:661:
+ ^I^I^I^I^I^I^I  mem_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: arch/ppc64/mm/numa.c:661:
+ ^I^I^I^I^I^I^I  mem_size);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: arch/ppc64/mm/numa.c:661:
+ 					free_bootmem_node(NODE_DATA(nid), mem_start,
+ 							  mem_size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: arch/ppc64/mm/numa.c:661:
+ ^I^I^I^I^I^I^I  mem_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: arch/ppc64/mm/numa.c:662:
+ ^I^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: arch/ppc64/mm/numa.c:662:
+ ^I^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: arch/ppc64/mm/numa.c:662:
+ ^I^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: arch/ppc64/mm/numa.c:663:
+  ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: arch/ppc64/mm/numa.c:663:
+  ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: arch/ppc64/mm/numa.c:663:
+  ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: arch/ppc64/mm/numa.c:664:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/ppc64/mm/numa.c:664:
+  $

WARNING:MISPLACED_INIT: __initdata should be placed after prom_memory_limit
#434: FILE: arch/ppc64/kernel/prom_init.c:180:
+static unsigned long __initdata prom_memory_limit;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after prom_tce_alloc_start
#435: FILE: arch/ppc64/kernel/prom_init.c:181:
+static unsigned long __initdata prom_tce_alloc_start;

WARNING:MISPLACED_INIT: __initdata should be placed after prom_tce_alloc_end
#436: FILE: arch/ppc64/kernel/prom_init.c:182:
+static unsigned long __initdata prom_tce_alloc_end;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#446: FILE: arch/ppc64/kernel/prom_init.c:392:
+#define isxdigit(c)	(('0' <= (c) && (c) <= '9') \
+			 || ('a' <= (c) && (c) <= 'f') \
+			 || ('A' <= (c) && (c) <= 'F'))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#447: FILE: arch/ppc64/kernel/prom_init.c:393:
+#define isxdigit(c)	(('0' <= (c) && (c) <= '9') \
+			 || ('a' <= (c) && (c) <= 'f') \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#448: FILE: arch/ppc64/kernel/prom_init.c:394:
+			 || ('a' <= (c) && (c) <= 'f') \
+			 || ('A' <= (c) && (c) <= 'F'))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/ppc64/kernel/prom_init.c:395:
+^I^I^I $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#450: FILE: arch/ppc64/kernel/prom_init.c:396:
+#define isdigit(c)	('0' <= (c) && (c) <= '9')

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#451: FILE: arch/ppc64/kernel/prom_init.c:397:
+#define islower(c)	('a' <= (c) && (c) <= 'z')

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#452: FILE: arch/ppc64/kernel/prom_init.c:398:
+#define toupper(c)	(islower(c) ? ((c) - 'a' + 'A') : (c))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: arch/ppc64/kernel/prom_init.c:403:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: arch/ppc64/kernel/prom_init.c:418:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/ppc64/kernel/prom_init.c:421:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: arch/ppc64/kernel/prom_init.c:485:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: arch/ppc64/kernel/prom_init.c:748:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: arch/ppc64/kernel/prom_init.c:754:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: arch/ppc64/kernel/prom_init.c:756:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: arch/ppc64/kernel/prom_init.c:760:
+			prom_printf("Ignoring mem=%x <= alloc_bottom.\n",
+				RELOC(prom_memory_limit));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: arch/ppc64/kernel/prom_init.c:764:
+			prom_printf("Ignoring mem=%x >= ram_top.\n",
+				RELOC(prom_memory_limit));

ERROR:SPACING: space prohibited after that open parenthesis '('
#576: FILE: arch/ppc64/kernel/prom_init.c:776:
+	if ( RELOC(of_platform) == PLATFORM_PSERIES_LPAR )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#576: FILE: arch/ppc64/kernel/prom_init.c:776:
+	if ( RELOC(of_platform) == PLATFORM_PSERIES_LPAR )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: arch/ppc64/kernel/prom_init.c:980:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: arch/ppc64/kernel/prom_init.c:1800:
+		prom_setprop(_prom->chosen, "linux,memory-limit",
+			PTRRELOC(&prom_memory_limit), sizeof(RELOC(prom_memory_limit)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: arch/ppc64/kernel/prom_init.c:1804:
+		prom_setprop(_prom->chosen, "linux,tce-alloc-start",
+			PTRRELOC(&prom_tce_alloc_start), sizeof(RELOC(prom_tce_alloc_start)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: arch/ppc64/kernel/prom_init.c:1806:
+		prom_setprop(_prom->chosen, "linux,tce-alloc-end",
+			PTRRELOC(&prom_tce_alloc_end), sizeof(RELOC(prom_tce_alloc_end)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 58 warnings, 19 checks, 504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
