WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#55: FILE: fs/fat/cache.c:57:
+		printk("FAT: bread(block %d) in fat_access failed\n", b);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#65: FILE: fs/fat/cache.c:65:
+			printk("FAT: bread(block %d) in fat_access failed\n",

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#78: FILE: fs/fat/cache.c:76:
+		if (next >= BAD_FAT32) next = FAT_ENT_EOF;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#86: FILE: fs/fat/cache.c:83:
+		if (next >= BAD_FAT16) next = FAT_ENT_EOF;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#93: FILE: fs/fat/cache.c:89:
+		if (next >= BAD_FAT12) next = FAT_ENT_EOF;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: fs/fat/cache.c:94:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: fs/fat/cache.c:292:
+		if (nr == FAT_ENT_EOF) {
[...]
+		} else if (nr == FAT_ENT_FREE) {
[...]
+		} else if (nr < 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#125: FILE: fs/fat/cache.c:294:
+				     __FUNCTION__, inode->i_ino);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#129: FILE: fs/fat/cache.c:298:
+				     __FUNCTION__, inode->i_ino);

CHECK:BRACES: braces {} should be used on all arms of this statement
#168: FILE: fs/fat/cache.c:349:
+		if (nr == FAT_ENT_EOF)
[...]
+		else if (nr == FAT_ENT_FREE) {
[...]
-		}
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#172: FILE: fs/fat/cache.c:353:
+				     __FUNCTION__, inode->i_ino);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#201: FILE: fs/fat/cache.c:375:
+				     __FUNCTION__, inode->i_ino);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#273: FILE: fs/fat/inode.c:142:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#389: FILE: fs/fat/inode.c:846:
+		iput(root_inode);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: fs/fat/misc.c:131:
+^I/* $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#474: FILE: fs/fat/misc.c:139:
+	last = file_cluster = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#475: FILE: fs/fat/misc.c:140:
+	if ((curr = MSDOS_I(inode)->i_start) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: fs/fat/misc.c:148:
+			if (curr < 0)
[...]
+			else if (curr == FAT_ENT_FREE) {
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#487: FILE: fs/fat/misc.c:152:
+				fat_fs_panic(sb, "%s: invalid cluster chain"
+					     " (ino %lu)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#488: FILE: fs/fat/misc.c:153:
+					     __FUNCTION__, inode->i_ino);

WARNING:SPLIT_STRING: quoted string split across lines
#493: FILE: fs/fat/misc.c:158:
+				fat_fs_panic(sb, "%s: bad cluster counts"
+					     " (ino %lu)",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#494: FILE: fs/fat/misc.c:159:
+					     __FUNCTION__, inode->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#607: FILE: fs/fat/misc.c:354:
+	if (*bh == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#608: FILE: fs/fat/misc.c:355:
+		printk("FAT: Directory bread(block %d) failed\n", sector);

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: fs/fat/misc.c:514:
+		if (start < 0)
[...]
+		else if (start == FAT_ENT_FREE) {
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#640: FILE: fs/fat/misc.c:518:
+				     __FUNCTION__);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#663: FILE: include/linux/msdos_fs.h:61:
+#define BAD_FAT(s) (MSDOS_SB(s)->fat_bits == 32 ? BAD_FAT32 : \
+	MSDOS_SB(s)->fat_bits == 16 ? BAD_FAT16 : BAD_FAT12)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 14 warnings, 7 checks, 604 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
