CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#88: FILE: include/linux/ipc.h:59:
+	spinlock_t	lock;

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: ipc/msg.c:812:
+			if(msq)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#238: FILE: ipc/msg.c:818:
+			if(!msq)

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: ipc/msg.c:828:
+	if(msq)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: ipc/sem.c:558:
+^I^I^Isem_unlock(sma);^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#450: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#450: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: ipc/util.c:129:
+^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#689: FILE: ipc/util.c:131:
+	wmb();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#694: FILE: ipc/util.c:134:
+	ipc_rcu_free(old, sizeof(struct ipc_id)*i);
 	                                       ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#714: FILE: ipc/util.c:197:
+	rmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: ipc/util.c:251:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#734: FILE: ipc/util.c:255:
+static void ipc_free_scheduled(void* arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#737: FILE: ipc/util.c:258:
+	struct rcu_ipc_free *a = (struct rcu_ipc_free *)arg;
+	vfree(a->ptr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#741: FILE: ipc/util.c:262:
+static void ipc_free_callback(void* arg)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: ipc/util.c:265:
+^I/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#756: FILE: ipc/util.c:277:
+void ipc_rcu_free(void* ptr, int size)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#758: FILE: ipc/util.c:279:
+	struct rcu_ipc_free* arg;

CHECK:SPACING: No space is necessary after a cast
#760: FILE: ipc/util.c:281:
+	arg = (struct rcu_ipc_free *) kmalloc(sizeof(*arg), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#760: FILE: ipc/util.c:281:
+	arg = (struct rcu_ipc_free *) kmalloc(sizeof(*arg), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!arg"
#761: FILE: ipc/util.c:282:
+	if (arg == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#789: FILE: ipc/util.h:19:
+^Ivoid ^I^I^I*ptr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#790: FILE: ipc/util.h:20:
+^Iint ^I^I^Isize;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#814: FILE: ipc/util.h:55:
+void ipc_rcu_free(void* arg, int size);

WARNING:MEMORY_BARRIER: memory barrier without comment
#823: FILE: ipc/util.h:63:
+	rmb();

ERROR:SPACING: space required before the open parenthesis '('
#841: FILE: ipc/util.h:74:
+	if(lid >= ids->size) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#845: FILE: ipc/util.h:78:
+	rmb();

ERROR:SPACING: space required before the open parenthesis '('
#849: FILE: ipc/util.h:80:
+	if(out == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!out"
#849: FILE: ipc/util.h:80:
+	if(out == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: ipc/util.h:85:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#867: FILE: ipc/util.h:97:
+extern inline void ipc_unlock(struct kern_ipc_perm* perm)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 8 warnings, 6 checks, 711 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
