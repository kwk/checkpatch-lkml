WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
ftp://ftp.kernel.org/pub/linux/kernel/people/wli/vm/lazy_buddy/lazy_buddy-2.5.25-4

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: fs/proc/proc_misc.c:135:
+	extern unsigned long nr_deferred_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#102: FILE: fs/proc/proc_misc.c:187:
+extern struct seq_operations fragmentation_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#109: FILE: fs/proc/proc_misc.c:194:
+static struct file_operations fragmentation_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#110: FILE: fs/proc/proc_misc.c:195:
+	open:		fragmentation_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#111: FILE: fs/proc/proc_misc.c:196:
+	read:		seq_read,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#111: FILE: fs/proc/proc_misc.c:196:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#112: FILE: fs/proc/proc_misc.c:197:
+	llseek:		seq_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#112: FILE: fs/proc/proc_misc.c:197:
+	llseek:		seq_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#113: FILE: fs/proc/proc_misc.c:198:
+	release:	seq_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#113: FILE: fs/proc/proc_misc.c:198:
+	release:	seq_release,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: fs/proc/proc_misc.c:201:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("fraginfo",S_IRUGO, &fragmentation_file_operations);
 	                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#124: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("fraginfo",S_IRUGO, &fragmentation_file_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#269: FILE: mm/page_alloc.c:184:
+	switch (area->active - area->locally_free) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#276: FILE: mm/page_alloc.c:191:
+				deferred_page = list_entry(area->deferred_pages.next, struct page, list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#282: FILE: mm/page_alloc.c:197:
+			 * Fall through and also free the page we were

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#415: FILE: mm/page_alloc.c:354:
+	for (found_order = order+1; found_order < MAX_ORDER; ++found_order)
 	                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#460: FILE: mm/page_alloc.c:409:
+	if (likely(!list_empty(&area->deferred_pages))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#464: FILE: mm/page_alloc.c:413:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#468: FILE: mm/page_alloc.c:417:
+		if (likely(!page))
+		goto out;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#618: FILE: mm/page_alloc.c:1193:
+struct seq_operations fragmentation_op = {

WARNING:INDENTED_LABEL: labels should not be indented
#619: FILE: mm/page_alloc.c:1194:
+	start:	frag_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#620: FILE: mm/page_alloc.c:1195:
+	next:	frag_next,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#620: FILE: mm/page_alloc.c:1195:
+	next:	frag_next,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#621: FILE: mm/page_alloc.c:1196:
+	stop:	frag_stop,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#621: FILE: mm/page_alloc.c:1196:
+	stop:	frag_stop,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#622: FILE: mm/page_alloc.c:1197:
+	show:	frag_show,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#622: FILE: mm/page_alloc.c:1197:
+	show:	frag_show,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447658.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 17 warnings, 4 checks, 522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447658.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
