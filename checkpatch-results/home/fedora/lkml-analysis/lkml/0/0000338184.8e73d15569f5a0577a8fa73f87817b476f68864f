WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: include/linux/compiler-gcc+.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> =

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#69: FILE: include/linux/compiler-gcc+.h:1:
instead.  */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#70: FILE: include/linux/compiler-gcc+.h:2:
+/* Never include this file directly.  Include <linux/compiler.h> =
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: include/linux/compiler-gcc+.h:9:
+#define inline			__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline__
#77: FILE: include/linux/compiler-gcc+.h:9:
+#define inline			__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#77: FILE: include/linux/compiler-gcc+.h:9:
+#define inline			__inline__ __attribute__((always_inline))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#78: FILE: include/linux/compiler-gcc+.h:10:
+#define __inline__		__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline__
#78: FILE: include/linux/compiler-gcc+.h:10:
+#define __inline__		__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#78: FILE: include/linux/compiler-gcc+.h:10:
+#define __inline__		__inline__ __attribute__((always_inline))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#79: FILE: include/linux/compiler-gcc+.h:11:
+#define __inline		__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline
#79: FILE: include/linux/compiler-gcc+.h:11:
+#define __inline		__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#79: FILE: include/linux/compiler-gcc+.h:11:
+#define __inline		__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#81: FILE: include/linux/compiler-gcc+.h:13:
+#define __attribute_used__	__attribute__((__used__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((pure))
#82: FILE: include/linux/compiler-gcc+.h:14:
+#define __attribute_pure__	__attribute__((pure))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/linux/compiler-gcc.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#90: FILE: include/linux/compiler-gcc.h:2:
+/* Never include this file directly.  Include <linux/compiler.h> =
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/linux/compiler-gcc.h:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#98: FILE: include/linux/compiler-gcc.h:10:
+#define barrier() __asm__ __volatile__("": : :"memory")
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#98: FILE: include/linux/compiler-gcc.h:10:
+#define barrier() __asm__ __volatile__("": : :"memory")
                                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#98: FILE: include/linux/compiler-gcc.h:10:
+#define barrier() __asm__ __volatile__("": : :"memory")

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: include/linux/compiler-gcc.h:13:
+/* This macro obfuscates arithmetic on a variable address so that gcc
+   shouldn't recognize the original var, and make assumptions about it =

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: include/linux/compiler-gcc2.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#114: FILE: include/linux/compiler-gcc2.h:2:
+/* Never include this file directly.  Include <linux/compiler.h> =
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#119: FILE: include/linux/compiler-gcc2.h:6:
+/* Somewhere in the middle of the GCC 2.96 development cycle, we =
+   a mechanism by which the user can annotate likely branch directions =

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#123: FILE: include/linux/compiler-gcc2.h:8:
+   to nothing for earlier compilers.  */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#130: FILE: include/linux/compiler-gcc2.h:15:
+#define __attribute_used__	__attribute__((__unused__))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#136: FILE: include/linux/compiler-gcc2.h:21:
+#if __GNUC_MINOR__ >=3D 96
                    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((pure))
#137: FILE: include/linux/compiler-gcc2.h:22:
+# define __attribute_pure__	__attribute__((pure))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#144: FILE: include/linux/compiler-gcc3.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#146: FILE: include/linux/compiler-gcc3.h:2:
+/* Never include this file directly.  Include <linux/compiler.h> =
+

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#150: FILE: include/linux/compiler-gcc3.h:6:
+#if __GNUC_MINOR__ >=3D 1
                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#151: FILE: include/linux/compiler-gcc3.h:7:
+# define inline		__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline__
#151: FILE: include/linux/compiler-gcc3.h:7:
+# define inline		__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#151: FILE: include/linux/compiler-gcc3.h:7:
+# define inline		__inline__ __attribute__((always_inline))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: include/linux/compiler-gcc3.h:8:
+# define __inline__	__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline__
#152: FILE: include/linux/compiler-gcc3.h:8:
+# define __inline__	__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#152: FILE: include/linux/compiler-gcc3.h:8:
+# define __inline__	__inline__ __attribute__((always_inline))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#153: FILE: include/linux/compiler-gcc3.h:9:
+# define __inline	__inline__ __attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline
#153: FILE: include/linux/compiler-gcc3.h:9:
+# define __inline	__inline__ __attribute__((always_inline))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#153: FILE: include/linux/compiler-gcc3.h:9:
+# define __inline	__inline__ __attribute__((always_inline))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#160: FILE: include/linux/compiler-gcc3.h:16:
+#if __GNUC_MINOR__ >=3D 3
                    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#161: FILE: include/linux/compiler-gcc3.h:17:
+# define __attribute_used__	__attribute__((__used__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#163: FILE: include/linux/compiler-gcc3.h:19:
+# define __attribute_used__	__attribute__((__unused__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((pure))
#166: FILE: include/linux/compiler-gcc3.h:22:
+#define __attribute_pure__	__attribute__((pure))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#203: FILE: include/linux/compiler.h:12:
+#elif __GNUC__ =3D=3D 3
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#203: FILE: include/linux/compiler.h:12:
+#elif __GNUC__ =3D=3D 3
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#205: FILE: include/linux/compiler.h:14:
+#elif __GNUC__ =3D=3D 2
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#205: FILE: include/linux/compiler.h:14:
+#elif __GNUC__ =3D=3D 2
                   ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#263: FILE: include/linux/compiler.h:71:
+# define barrier() __memory_barrier();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#274: FILE: include/linux/compiler.h:76:
+     __ptr =3D (unsigned long) (ptr);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/linux/compiler.h:76:
+     __ptr =3D (unsigned long) (ptr);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: include/linux/compiler.h:76:
+     __ptr =3D (unsigned long) (ptr);				\

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#274: FILE: include/linux/compiler.h:76:
+     __ptr =3D (unsigned long) (ptr);				\
            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#298: FILE: include/linux/compiler-intel.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#300: FILE: include/linux/compiler-intel.h:2:
+/* Never include this file directly.  Include <linux/compiler.h> =
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: include/linux/compiler-intel.h:17:
+  ({ unsigned long __ptr;^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#316: FILE: include/linux/compiler-intel.h:18:
+     __ptr =3D (unsigned long) (ptr);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/linux/compiler-intel.h:18:
+     __ptr =3D (unsigned long) (ptr);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: include/linux/compiler-intel.h:18:
+     __ptr =3D (unsigned long) (ptr);				\

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#316: FILE: include/linux/compiler-intel.h:18:
+     __ptr =3D (unsigned long) (ptr);				\
            ^

CHECK:SPACING: No space is necessary after a cast
#317: FILE: include/linux/compiler-intel.h:19:
+    (typeof(ptr)) (__ptr + (off)); })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/linux/compiler-intel.h:19:
+    (typeof(ptr)) (__ptr + (off)); })$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338184.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 39 warnings, 4 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338184.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
