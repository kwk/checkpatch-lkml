WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#35: 
- Makefile EXTRAVERSION
           ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#50: 
Zoltán Böszörményi
    ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
diff -ur linux-2.6.0-test6-mm1/arch/i386/kernel/process.c linux-2.6.0-test6-mm1-exec-shield/arch/i386/kernel/process.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: arch/i386/kernel/process.c:839:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: arch/i386/kernel/process.c:839:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/i386/kernel/process.c:839:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/kernel/process.c:864:
+^Iint first_time = 1;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: arch/i386/kernel/process.c:867:
+		printk("hm, %s:%d, !mmap_top.\n", current->comm, current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: arch/i386/kernel/process.c:873:
+^Iif (len > TASK_SIZE) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: arch/i386/kernel/process.c:881:
+        if (addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/i386/kernel/process.c:881:
+        if (addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/i386/kernel/process.c:882:
+                addr = PAGE_ALIGN(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/i386/kernel/process.c:882:
+                addr = PAGE_ALIGN(addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/i386/kernel/process.c:883:
+                vma = find_vma(mm, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/i386/kernel/process.c:883:
+                vma = find_vma(mm, addr);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/i386/kernel/process.c:884:
+^I^Iif (TASK_SIZE - len >= addr && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/i386/kernel/process.c:887:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/i386/kernel/process.c:887:
+        }$

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#164: FILE: arch/i386/kernel/process.c:893:
+	/* either no address requested or cant fit in requested address hole */
 	                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: arch/i386/kernel/process.c:895:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/i386/kernel/process.c:895:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#166: FILE: arch/i386/kernel/process.c:895:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/i386/kernel/process.c:897:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: arch/i386/kernel/process.c:897:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/i386/kernel/process.c:897:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#168: FILE: arch/i386/kernel/process.c:897:
+       	 	if (!(vma = find_vma_prev(mm, addr, &prev_vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/i386/kernel/process.c:898:
+                        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/i386/kernel/process.c:898:
+                        return -ENOMEM;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: arch/i386/kernel/process.c:901:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= prev_vma->vm_end'
#172: FILE: arch/i386/kernel/process.c:901:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#172: FILE: arch/i386/kernel/process.c:901:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {
[...]
+		} else if (mm->non_executable_cache == vma->vm_end)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#178: FILE: arch/i386/kernel/process.c:907:
+		} else if (mm->non_executable_cache == vma->vm_end)
+				mm->non_executable_cache = vma->vm_start;	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: arch/i386/kernel/process.c:908:
+^I^I^I^Imm->non_executable_cache = vma->vm_start;^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#182: FILE: arch/i386/kernel/process.c:911:
+		addr = vma->vm_start-len;
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: arch/i386/kernel/process.c:912:
+        } while (len <= vma->vm_start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/i386/kernel/process.c:912:
+        } while (len <= vma->vm_start);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: arch/i386/kernel/process.c:925:
+	unsigned long range = end - len - start;
+	if (end <= start + len)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#202: FILE: arch/i386/kernel/process.c:931:
+stock_arch_get_unmapped_area(struct file *filp, unsigned long addr,
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: arch/i386/kernel/process.c:932:
+stock_arch_get_unmapped_area(struct file *filp, unsigned long addr,
+		unsigned long len, unsigned long pgoff, unsigned long flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#219: FILE: arch/i386/kernel/process.c:948:
+	start_addr = addr = mm->free_area_cache;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#230: FILE: arch/i386/kernel/process.c:959:
+				start_addr = addr = TASK_UNMAPPED_BASE;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#246: FILE: arch/i386/kernel/process.c:975:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: arch/i386/kernel/process.c:976:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
+		unsigned long len0, unsigned long pgoff, unsigned long flags,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#259: FILE: arch/i386/kernel/process.c:988:
+	if (!(current->flags & PF_RELOCEXEC))
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#260: FILE: arch/i386/kernel/process.c:989:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);
 	                                           ^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#260: FILE: arch/i386/kernel/process.c:989:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: arch/i386/kernel/process.c:1010:
+		if ((tmp = arch_get_unmapped_nonexecutable_area(mm, addr, len)) != -ENOMEM)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#289: FILE: arch/i386/kernel/process.c:1018:
+		if (TASK_SIZE - len < addr) {
+			return -ENOMEM;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= 0x01000000'
#305: FILE: arch/i386/kernel/process.c:1034:
+			if (ascii_shield && (addr >= 0x01000000)) {

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#313: FILE: arch/i386/kernel/process.c:1042:
+			 * Ok, randomization didnt work out - return
 			                     ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end > limit'
#339: FILE: arch/i386/kernel/process.c:1068:
+			if ((vma->vm_flags & VM_EXEC) && (vma->vm_end > limit))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#376: FILE: arch/i386/kernel/process.c:1105:
+#define MIN_GAP (128*1024*1024)
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#376: FILE: arch/i386/kernel/process.c:1105:
+#define MIN_GAP (128*1024*1024)
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#377: FILE: arch/i386/kernel/process.c:1106:
+#define MAX_GAP (TASK_SIZE/6*5)
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#377: FILE: arch/i386/kernel/process.c:1106:
+#define MAX_GAP (TASK_SIZE/6*5)
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#403: FILE: arch/i386/kernel/setup.c:954:
+	get_option (&str, &exec_shield);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#407: FILE: arch/i386/kernel/setup.c:958:
+__setup("exec-shield=", setup_exec_shield);

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#443: FILE: arch/i386/kernel/traps.c:463:
+		 * we wont hit this branch next time around.
 		      ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#451: FILE: arch/i386/kernel/traps.c:471:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: arch/i386/kernel/traps.c:471:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#451: FILE: arch/i386/kernel/traps.c:471:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());
 		                                                                       ^

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#452: FILE: arch/i386/kernel/traps.c:472:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: arch/i386/kernel/traps.c:472:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#478: FILE: include/linux/binfmts.h:61:
+extern int setup_arg_pages(struct linux_binprm * bprm, int exec_stack);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: include/linux/binfmts.h:61:
+extern int setup_arg_pages(struct linux_binprm * bprm, int exec_stack);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#490: FILE: include/linux/mm.h:518:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#536: FILE: include/linux/resource.h:58:
+#define _STK_LIM	(10*1024*1024)
                 	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#536: FILE: include/linux/resource.h:58:
+#define _STK_LIM	(10*1024*1024)
                 	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#537: FILE: include/linux/resource.h:59:
+#define STACK_BIAS	(2*1024*1024)
                   	  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#537: FILE: include/linux/resource.h:59:
+#define STACK_BIAS	(2*1024*1024)
                   	       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#570: FILE: include/asm-i386/elf.h:191:
+extern void randomize_brk(unsigned long old_brk);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#633: FILE: include/asm-i386/pgalloc.h:63:
+#define load_user_cs_desc(cpu, mm) \
+    	cpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: include/asm-i386/pgalloc.h:64:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#634: FILE: include/asm-i386/pgalloc.h:64:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: include/asm-i386/pgalloc.h:64:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: include/asm-i386/pgalloc.h:66:
+extern void arch_add_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#637: FILE: include/asm-i386/pgalloc.h:67:
+extern void arch_remove_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/asm-i386/pgalloc.h:68:
+extern void arch_flush_exec_range(struct mm_struct *mm);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#651: FILE: include/asm-i386/processor.h:297:
+#define TASK_UNMAPPED_BASE	PAGE_ALIGN(TASK_SIZE/3)
                           	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: include/asm-i386/processor.h:300:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: include/asm-i386/processor.h:300:
+ $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/asm-i386/processor.h:302:
+extern unsigned long arch_align_stack(unsigned long sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/asm-i386/processor.h:305:
+extern unsigned long mmap_top(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#680: FILE: include/asm-i386/system.h:60:
+extern void set_desc_limit(struct desc_struct *desc, unsigned long limit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: fs/proc/array.c:322:
+	if (tsk_uid(current) == tsk_uid(task) || tsk_euid(current) == tsk_uid(task) ||
+							capable(CAP_SYS_NICE))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#708: FILE: fs/proc/base.c:111:
+	E(PROC_TGID_MAPS,      "maps",    S_IFREG|S_IRUSR),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#708: FILE: fs/proc/base.c:111:
+	E(PROC_TGID_MAPS,      "maps",    S_IFREG|S_IRUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#717: FILE: fs/proc/base.c:132:
+	E(PROC_TID_MAPS,       "maps",    S_IFREG|S_IRUSR),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#717: FILE: fs/proc/base.c:132:
+	E(PROC_TID_MAPS,       "maps",    S_IFREG|S_IRUSR),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: fs/binfmt_aout.c:417:
+^Iretval = setup_arg_pages(bprm, 1); $

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#751: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#793: FILE: fs/binfmt_elf.c:251:
 
+

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#794: FILE: fs/binfmt_elf.c:252:
+static unsigned long elf_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned int total_size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#794: FILE: fs/binfmt_elf.c:252:
+static unsigned long elf_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned int total_size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#804: FILE: fs/binfmt_elf.c:262:
+
+

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#847: FILE: fs/binfmt_elf.c:348:
+	    map_addr = elf_map(interpreter, load_addr + vaddr, eppnt, elf_prot, elf_type, total_size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#868: FILE: fs/binfmt_elf.c:588:
+	if (current->personality == PER_LINUX)
+	switch (exec_shield) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: fs/binfmt_elf.c:694:
+^I $

ERROR:SPACING: space required before the open parenthesis '('
#935: FILE: fs/binfmt_elf.c:702:
+	for(i = 0, elf_ppnt = elf_phdata; i < elf_ex.e_phnum; i++, elf_ppnt++)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#961: FILE: fs/binfmt_elf.c:744:
+		error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags, total_size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1012: FILE: fs/exec.c:392:
+	stack_base = arch_align_stack(STACK_TOP - MAX_ARG_PAGES*PAGE_SIZE);
 	                                                       ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1047: FILE: fs/exec.c:872:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1060: FILE: fs/exec.c:884:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1060: FILE: fs/exec.c:884:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1062: FILE: fs/exec.c:886:
+#ifdef __i386__

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1102: FILE: kernel/signal.c:1530:
+int print_fatal_signals = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1109: FILE: kernel/signal.c:1537:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: kernel/signal.c:1538:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",
+		current->comm, current->pid, signr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1111: FILE: kernel/signal.c:1539:
+	printk("code at %08lx: ", regs->eip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1114: FILE: kernel/signal.c:1542:
+		printk("%02x ", insn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1116: FILE: kernel/signal.c:1544:
+	printk("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1122: FILE: kernel/signal.c:1550:
+	get_option (&str, &print_fatal_signals);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1127: FILE: kernel/signal.c:1555:
+__setup("print-fatal-signals=", setup_print_fatal_signals);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'signr == SIGSEGV'
#1135: FILE: kernel/signal.c:1747:
+		if ((signr == SIGSEGV) && print_fatal_signals)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1273: FILE: mm/mmap.c:889:
+	if (address - vma->vm_start > (current->rlim[RLIMIT_STACK].rlim_cur + STACK_BIAS) ||
 			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: mm/mmap.c:943:
+	if (vma->vm_end - address > (current->rlim[RLIMIT_STACK].rlim_cur + STACK_BIAS) ||
 			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#1383: FILE: Makefile:4:
+EXTRAVERSION = -test6-mm1-exec-shield-nptl
 ^^^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 57 warnings, 45 checks, 1167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
