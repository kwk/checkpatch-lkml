WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
According to jakub@xxxxxxxx <mailto:jakub@redhat.com>, gcc maintainer at RedHat, it is a pure kernel bug

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#86: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigaddset((set),(sig)) :   \
+	__gen_sigaddset((set),(sig)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#86: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigaddset((set),(sig)) :   \
+	__gen_sigaddset((set),(sig)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: signal.h:191:
+	__const_sigaddset((set),(sig)) :   \
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#89: FILE: signal.h:192:
+	__gen_sigaddset((set),(sig)))
 	                     ^

WARNING:INLINE: plain inline is preferred over __inline__
#91: FILE: signal.h:194:
+static __inline__ void __gen_sigaddset(sigset_t *set, int _sig)

WARNING:INLINE: plain inline is preferred over __inline__
#96: FILE: signal.h:199:
+static __inline__ void __const_sigaddset(sigset_t *set, int _sig)

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: signal.h:202:
+	unsigned long sig = _sig - 1;
+	set->sig[sig / _NSIG_BPW] |= 1 << (sig % _NSIG_BPW);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#102: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigdelset((set),(sig)) :   \
+	__gen_sigdelset((set),(sig)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#102: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigdelset((set),(sig)) :   \
+	__gen_sigdelset((set),(sig)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: signal.h:207:
+	__const_sigdelset((set),(sig)) :   \
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: signal.h:208:
+	__gen_sigdelset((set),(sig)))
 	                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: signal.h:210:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#108: FILE: signal.h:211:
+static __inline__ void __gen_sigdelset(sigset_t *set, int _sig)

WARNING:INLINE: plain inline is preferred over __inline__
#115: FILE: signal.h:216:
+static __inline__ void __const_sigaddset(sigset_t *set, int _sig)

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: signal.h:219:
+	unsigned long sig = _sig - 1;
+	set->sig[sig / _NSIG_BPW] &= ~(1 << (sig % _NSIG_BPW));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133784.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 7 warnings, 5 checks, 41 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133784.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
