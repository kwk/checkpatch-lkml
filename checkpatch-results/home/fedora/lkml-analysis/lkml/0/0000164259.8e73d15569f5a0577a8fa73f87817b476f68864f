ERROR:CODE_INDENT: code indent should use tabs where possible
#41: FILE: include/linux/module.h:213:
+ ^IMODULE_STATE_GONE,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#41: FILE: include/linux/module.h:213:
+ ^IMODULE_STATE_GONE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#41: FILE: include/linux/module.h:213:
+ ^IMODULE_STATE_GONE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: include/linux/module.h:219:
+       void *address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: include/linux/module.h:220:
+       char name[MAX_SECTNAME + 1];$

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#60: FILE: include/linux/module.h:252:
+	/* keep kgdb info at the begining so that gdb doesn't have a chance to
 	                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#61: FILE: include/linux/module.h:253:
+	 * miss out any fields */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: kernel/module.c:622:
+        ^I^I^Imod);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: kernel/module.c:622:
+        ^I^I^Imod);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: kernel/module.c:622:
+	notifier_call_chain(&module_notify_list, MODULE_STATE_GOING,
+        			mod);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/module.c:622:
+        ^I^I^Imod);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#81: FILE: kernel/module.c:625:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: kernel/module.c:640:
+	notifier_call_chain(&module_notify_list, MODULE_STATE_GONE,
+			NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#114: FILE: kernel/module.c:1421:
+int add_modsects (struct module *mod, Elf_Ehdr *hdr, Elf_Shdr *sechdrs, const

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#114: FILE: kernel/module.c:1421:
+int add_modsects (struct module *mod, Elf_Ehdr *hdr, Elf_Shdr *sechdrs, const

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#114: FILE: kernel/module.c:1421:
+int add_modsects (struct module *mod, Elf_Ehdr *hdr, Elf_Shdr *sechdrs, const

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: kernel/module.c:1422:
+                char *secstrings)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: kernel/module.c:1422:
+                char *secstrings)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: kernel/module.c:1424:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: kernel/module.c:1424:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: kernel/module.c:1426:
+        mod->num_sections = hdr->e_shnum - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: kernel/module.c:1426:
+        mod->num_sections = hdr->e_shnum - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: kernel/module.c:1427:
+        mod->mod_sections = vmalloc((hdr->e_shnum - 1)*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: kernel/module.c:1427:
+        mod->mod_sections = vmalloc((hdr->e_shnum - 1)*$

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#120: FILE: kernel/module.c:1427:
+        mod->mod_sections = vmalloc((hdr->e_shnum - 1)*
                                                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: kernel/module.c:1428:
+		sizeof (struct mod_section));

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: kernel/module.c:1430:
+        if (mod->mod_sections == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: kernel/module.c:1430:
+        if (mod->mod_sections == NULL) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#123: FILE: kernel/module.c:1430:
+        if (mod->mod_sections == NULL) {
+                return -ENOMEM;
+        }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod->mod_sections"
#123: FILE: kernel/module.c:1430:
+        if (mod->mod_sections == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: kernel/module.c:1431:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: kernel/module.c:1431:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: kernel/module.c:1432:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: kernel/module.c:1432:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: kernel/module.c:1434:
+        for (i = 1; i < hdr->e_shnum; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: kernel/module.c:1434:
+        for (i = 1; i < hdr->e_shnum; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/module.c:1435:
+                mod->mod_sections[i - 1].address = (void *)sechdrs[i].sh_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/module.c:1435:
+                mod->mod_sections[i - 1].address = (void *)sechdrs[i].sh_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: kernel/module.c:1436:
+                strncpy(mod->mod_sections[i - 1].name, secstrings +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: kernel/module.c:1436:
+                strncpy(mod->mod_sections[i - 1].name, secstrings +$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: kernel/module.c:1437:
+                                sechdrs[i].sh_name, MAX_SECTNAME);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: kernel/module.c:1437:
+                                sechdrs[i].sh_name, MAX_SECTNAME);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: kernel/module.c:1438:
+                mod->mod_sections[i - 1].name[MAX_SECTNAME] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: kernel/module.c:1438:
+                mod->mod_sections[i - 1].name[MAX_SECTNAME] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: kernel/module.c:1813:
+        if ((err = add_modsects(mod, hdr, sechdrs, secstrings)) < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: kernel/module.c:1813:
+        if ((err = add_modsects(mod, hdr, sechdrs, secstrings)) < 0) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#146: FILE: kernel/module.c:1813:
+        if ((err = add_modsects(mod, hdr, sechdrs, secstrings)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#146: FILE: kernel/module.c:1813:
+        if ((err = add_modsects(mod, hdr, sechdrs, secstrings)) < 0) {
+                goto nomodsectinfo;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: kernel/module.c:1814:
+                goto nomodsectinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: kernel/module.c:1814:
+                goto nomodsectinfo;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: kernel/module.c:1815:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: kernel/module.c:1815:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: kernel/module.c:1868:
+       vfree(mod->mod_sections);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: kernel/module.c:1959:
+		notifier_call_chain(&module_notify_list, MODULE_STATE_GOING,
+				mod);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 28 warnings, 8 checks, 128 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
