CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#136: FILE: arch/i386/kernel/irq.c:13:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#252: FILE: arch/i386/kernel/irq.c:25:
+	u32                     stack[THREAD_SIZE/sizeof(u32)];
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#603: FILE: arch/i386/kernel/irq.c:64:
+	curctx = (union irq_ctx *) current_thread_info();

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/i386/kernel/irq.c:75:
+		isp = (u32*) ((char*)irqctx + sizeof(*irqctx));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#681: FILE: arch/i386/kernel/irq.c:75:
+		isp = (u32*) ((char*)irqctx + sizeof(*irqctx));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#681: FILE: arch/i386/kernel/irq.c:75:
+		isp = (u32*) ((char*)irqctx + sizeof(*irqctx));

CHECK:SPACING: No space is necessary after a cast
#686: FILE: arch/i386/kernel/irq.c:79:
+		*--isp = (u32) &regs;

CHECK:SPACING: No space is necessary after a cast
#687: FILE: arch/i386/kernel/irq.c:80:
+		*--isp = (u32) irq;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#696: FILE: arch/i386/kernel/irq.c:82:
+		asm volatile(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#697: FILE: arch/i386/kernel/irq.c:83:
+			"       xchgl   %%ebx,%%esp      \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#698: FILE: arch/i386/kernel/irq.c:84:
+			"       call    __do_IRQ         \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#699: FILE: arch/i386/kernel/irq.c:85:
+			"       xchgl   %%ebx,%%esp      \n"

CHECK:BRACES: Unbalanced braces around else statement
#703: FILE: arch/i386/kernel/irq.c:89:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(THREAD_SIZE) over __attribute__((__aligned__(THREAD_SIZE)))
#1233: FILE: arch/i386/kernel/irq.c:105:
+		__attribute__((__aligned__(THREAD_SIZE)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(THREAD_SIZE) over __attribute__((__aligned__(THREAD_SIZE)))
#1236: FILE: arch/i386/kernel/irq.c:108:
+		__attribute__((__aligned__(THREAD_SIZE)));

CHECK:SPACING: No space is necessary after a cast
#1268: FILE: arch/i386/kernel/irq.c:196:
+	int i = *(loff_t *) v, j;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1269: FILE: arch/i386/kernel/irq.c:197:
+	struct irqaction * action;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1273: FILE: arch/i386/kernel/irq.c:201:
+		seq_printf(p, "           ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1274: FILE: arch/i386/kernel/irq.c:202:
+		for (j=0; j<NR_CPUS; j++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1274: FILE: arch/i386/kernel/irq.c:202:
+		for (j=0; j<NR_CPUS; j++)
 		           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1274: FILE: arch/i386/kernel/irq.c:202:
+		for (j=0; j<NR_CPUS; j++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1276: FILE: arch/i386/kernel/irq.c:204:
+				seq_printf(p, "CPU%d       ",j);
 				                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1283: FILE: arch/i386/kernel/irq.c:211:
+^I^Iif (!action) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1285: FILE: arch/i386/kernel/irq.c:213:
+		seq_printf(p, "%3d: ",i);
 		                     ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1289: FILE: arch/i386/kernel/irq.c:217:
+		for (j = 0; j < NR_CPUS; j++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1296: FILE: arch/i386/kernel/irq.c:224:
+		for (action=action->next; action; action = action->next)
 		           ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1303: FILE: arch/i386/kernel/irq.c:231:
+		seq_printf(p, "NMI: ");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1304: FILE: arch/i386/kernel/irq.c:232:
+		for (j = 0; j < NR_CPUS; j++)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1309: FILE: arch/i386/kernel/irq.c:237:
+		seq_printf(p, "LOC: ");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1310: FILE: arch/i386/kernel/irq.c:238:
+		for (j = 0; j < NR_CPUS; j++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1313: FILE: arch/i386/kernel/irq.c:241:
+				seq_printf(p, "%10u ",
+					irq_stat[j].apic_timer_irqs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1334: FILE: include/asm-i386/irq.h:24:
+extern void release_vm86_irqs(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_NMI_WATCHDOG' is wrong - use Kconfig variables or standard guards instead
#1338: FILE: include/asm-i386/irq.h:27:
+# define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: include/asm-i386/irq.h:31:
+  extern void irq_ctx_init(int cpu);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1356: FILE: include/asm-i386/irq.h:31:
+  extern void irq_ctx_init(int cpu);

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_DO_SOFTIRQ' is wrong - use Kconfig variables or standard guards instead
#1357: FILE: include/asm-i386/irq.h:32:
+# define __ARCH_HAS_DO_SOFTIRQ

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1409: FILE: include/asm-i386/hardirq.h:24:
+	printk("unexpected IRQ trap at vector %02x\n", irq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245179.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 14 warnings, 12 checks, 1377 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245179.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
