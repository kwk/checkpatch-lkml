ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: include/asm-i386/pda.h:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#123: FILE: include/asm-i386/pda.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#124: FILE: include/asm-i386/pda.h:2:
+/* 
+   Per-processor Data Areas

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#134: FILE: include/asm-i386/pda.h:12:
+struct i386_pda
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/asm-i386/pda.h:25:
+extern void __bad_pda_field(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#150: FILE: include/asm-i386/pda.h:28:
+/* This variable is never instantiated.  It is only used as a stand-in
+   for the real per-cpu PDA memory, so that gcc can understand what

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: include/asm-i386/pda.h:31:
+   clobbers, so gcc can readily analyse them. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: include/asm-i386/pda.h:34:
+#define pda_to_op(op,field,val)						\
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: include/asm-i386/pda.h:34:
+#define pda_to_op(op,field,val)						\
                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#156: FILE: include/asm-i386/pda.h:34:
+#define pda_to_op(op,field,val)						\
+	do {								\
+		typedef typeof(_proxy_pda.field) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }			\
+		switch (sizeof(_proxy_pda.field)) {			\
+		case 1:							\
+			asm(op "b %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 2:							\
+			asm(op "w %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 4:							\
+			asm(op "l %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		default: __bad_pda_field();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#156: FILE: include/asm-i386/pda.h:34:
+#define pda_to_op(op,field,val)						\
+	do {								\
+		typedef typeof(_proxy_pda.field) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }			\
+		switch (sizeof(_proxy_pda.field)) {			\
+		case 1:							\
+			asm(op "b %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 2:							\
+			asm(op "w %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 4:							\
+			asm(op "l %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		default: __bad_pda_field();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#156: FILE: include/asm-i386/pda.h:34:
+#define pda_to_op(op,field,val)						\
+	do {								\
+		typedef typeof(_proxy_pda.field) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }			\
+		switch (sizeof(_proxy_pda.field)) {			\
+		case 1:							\
+			asm(op "b %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 2:							\
+			asm(op "w %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		case 4:							\
+			asm(op "l %1,%%gs:%c2"				\
+			    : "+m" (_proxy_pda.field)			\
+			    :"ri" ((T__)val),				\
+			     "i"(pda_offset(field)));			\
+			break;						\
+		default: __bad_pda_field();				\
+		}							\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#158: FILE: include/asm-i386/pda.h:36:
+		typedef typeof(_proxy_pda.field) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: include/asm-i386/pda.h:37:
+		if (0) { T__ tmp__; tmp__ = (val); }			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#164: FILE: include/asm-i386/pda.h:42:
+			    :"ri" ((T__)val),				\
 			    ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#170: FILE: include/asm-i386/pda.h:48:
+			    :"ri" ((T__)val),				\
 			    ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#176: FILE: include/asm-i386/pda.h:54:
+			    :"ri" ((T__)val),				\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#179: FILE: include/asm-i386/pda.h:57:
+		default: __bad_pda_field();				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: include/asm-i386/pda.h:61:
+#define pda_from_op(op,field)						\
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#183: FILE: include/asm-i386/pda.h:61:
+#define pda_from_op(op,field)						\
+	({								\
+		typeof(_proxy_pda.field) ret__;				\
+		switch (sizeof(_proxy_pda.field)) {			\
+		case 1:							\
+			asm(op "b %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		case 2:							\
+			asm(op "w %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		case 4:							\
+			asm(op "l %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		default: __bad_pda_field();				\
+		}							\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#183: FILE: include/asm-i386/pda.h:61:
+#define pda_from_op(op,field)						\
+	({								\
+		typeof(_proxy_pda.field) ret__;				\
+		switch (sizeof(_proxy_pda.field)) {			\
+		case 1:							\
+			asm(op "b %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		case 2:							\
+			asm(op "w %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		case 4:							\
+			asm(op "l %%gs:%c1,%0"				\
+			    : "=r" (ret__)				\
+			    : "i" (pda_offset(field)),			\
+			      "m" (_proxy_pda.field));			\
+			break;						\
+		default: __bad_pda_field();				\
+		}							\
+		ret__; })

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#205: FILE: include/asm-i386/pda.h:83:
+		default: __bad_pda_field();				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#210: FILE: include/asm-i386/pda.h:88:
+#define pda_addr(field)							\
+	((typeof(_proxy_pda.field) *)((unsigned char *)read_pda(_pda) + \
+				      pda_offset(field)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/asm-i386/pda.h:92:
+#define read_pda(field) pda_from_op("mov",field)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-i386/pda.h:93:
+#define write_pda(field,val) pda_to_op("mov",field,val)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-i386/pda.h:93:
+#define write_pda(field,val) pda_to_op("mov",field,val)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-i386/pda.h:93:
+#define write_pda(field,val) pda_to_op("mov",field,val)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: include/asm-i386/pda.h:94:
+#define add_pda(field,val) pda_to_op("add",field,val)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: include/asm-i386/pda.h:94:
+#define add_pda(field,val) pda_to_op("add",field,val)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: include/asm-i386/pda.h:94:
+#define add_pda(field,val) pda_to_op("add",field,val)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: include/asm-i386/pda.h:95:
+#define sub_pda(field,val) pda_to_op("sub",field,val)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: include/asm-i386/pda.h:95:
+#define sub_pda(field,val) pda_to_op("sub",field,val)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: include/asm-i386/pda.h:95:
+#define sub_pda(field,val) pda_to_op("sub",field,val)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: include/asm-i386/pda.h:96:
+#define or_pda(field,val) pda_to_op("or",field,val)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: include/asm-i386/pda.h:96:
+#define or_pda(field,val) pda_to_op("or",field,val)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: include/asm-i386/pda.h:96:
+#define or_pda(field,val) pda_to_op("or",field,val)
                                               ^

WARNING:BAD_SIGN_OFF: Duplicate signature
#266: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#267: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#268: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#269: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#270: 
Cc: Andi Kleen <ak@suse.de>

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#309: FILE: arch/i386/kernel/cpu/common.c:592:
+	struct Xgt_desc_struct *cpu_gdt_descr = &per_cpu(cpu_gdt_descr, cpu);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: arch/i386/kernel/cpu/common.c:606:
+		BUG_ON(gdt != NULL || pda != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gdt"
#323: FILE: arch/i386/kernel/cpu/common.c:606:
+		BUG_ON(gdt != NULL || pda != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pda"
#323: FILE: arch/i386/kernel/cpu/common.c:606:
+		BUG_ON(gdt != NULL || pda != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#333: FILE: arch/i386/kernel/cpu/common.c:616:
+		/* GDT and PDA might already have been allocated if
+		   this is a CPU hotplug re-insertion. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: arch/i386/kernel/cpu/common.c:616:
+		   this is a CPU hotplug re-insertion. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gdt"
#334: FILE: arch/i386/kernel/cpu/common.c:617:
+		if (gdt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pda"
#337: FILE: arch/i386/kernel/cpu/common.c:620:
+		if (pda == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: arch/i386/kernel/cpu/common.c:629:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: arch/i386/kernel/cpu/common.c:630:
+ ^Icpu_gdt_descr->address = (unsigned long)gdt;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: arch/i386/kernel/cpu/common.c:630:
+ ^Icpu_gdt_descr->address = (unsigned long)gdt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: arch/i386/kernel/cpu/common.c:630:
+ ^Icpu_gdt_descr->address = (unsigned long)gdt;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#361: FILE: arch/i386/kernel/cpu/common.c:644:
+/* Initialize the CPU's GDT and PDA.  The boot CPU does this for
+   itself, but secondaries find this done for them. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#361: FILE: arch/i386/kernel/cpu/common.c:644:
+   itself, but secondaries find this done for them. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#370: FILE: arch/i386/kernel/cpu/common.c:653:
+	/* For non-boot CPUs, the GDT and PDA should already have been
+	   allocated. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#370: FILE: arch/i386/kernel/cpu/common.c:653:
+	   allocated. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#372: FILE: arch/i386/kernel/cpu/common.c:655:
+		printk(KERN_CRIT "CPU%d failed to allocate GDT or PDA\n", cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: arch/i386/kernel/cpu/common.c:662:
+	BUG_ON(gdt == NULL || pda == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gdt"
#379: FILE: arch/i386/kernel/cpu/common.c:662:
+	BUG_ON(gdt == NULL || pda == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pda"
#379: FILE: arch/i386/kernel/cpu/common.c:662:
+	BUG_ON(gdt == NULL || pda == NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: arch/i386/kernel/cpu/common.c:668:
+ ^Imemcpy(gdt, cpu_gdt_table, GDT_SIZE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: arch/i386/kernel/cpu/common.c:668:
+ ^Imemcpy(gdt, cpu_gdt_table, GDT_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: arch/i386/kernel/cpu/common.c:668:
+ ^Imemcpy(gdt, cpu_gdt_table, GDT_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: arch/i386/kernel/cpu/common.c:672:
+ ^I*(__u64 *)(&gdt[GDT_ENTRY_ESPFIX_SS]) |=$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: arch/i386/kernel/cpu/common.c:672:
+ ^I*(__u64 *)(&gdt[GDT_ENTRY_ESPFIX_SS]) |=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: arch/i386/kernel/cpu/common.c:672:
+ ^I*(__u64 *)(&gdt[GDT_ENTRY_ESPFIX_SS]) |=$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: arch/i386/kernel/cpu/common.c:693:
+	struct tss_struct * t = &per_cpu(init_tss, cpu);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#415: FILE: arch/i386/kernel/cpu/common.c:698:
+	/* Reinit these anyway, even if they've already been done (on
+	   the boot CPU, this will transition from the boot gdt+pda to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: arch/i386/kernel/cpu/common.c:699:
+	   the real ones). */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#420: FILE: arch/i386/kernel/cpu/common.c:703:
+		printk(KERN_WARNING "CPU#%d already initialized!\n", cpu);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#421: FILE: arch/i386/kernel/cpu/common.c:704:
+		for (;;) local_irq_enable();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#424: FILE: arch/i386/kernel/cpu/common.c:707:
+	printk(KERN_INFO "Initializing CPU#%d\n", cpu);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#427: FILE: arch/i386/kernel/cpu/common.c:710:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#427: FILE: arch/i386/kernel/cpu/common.c:710:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#427: FILE: arch/i386/kernel/cpu/common.c:710:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#429: FILE: arch/i386/kernel/cpu/common.c:712:
+		printk(KERN_NOTICE "Disabling TSC...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: arch/i386/kernel/cpu/common.c:726:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: arch/i386/kernel/cpu/common.c:730:
+	set_tss_desc(cpu,t);
 	                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#594: FILE: arch/i386/kernel/cpu/common.c:779:
+	/* Set up the real GDT and PDA, so we can transition from the
+	   boot versions. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#594: FILE: arch/i386/kernel/cpu/common.c:779:
+	   boot versions. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#609: FILE: arch/i386/kernel/smpboot.c:534:
 static void __devinit start_secondary(void *unused)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#629: FILE: arch/i386/kernel/smpboot.c:600:
+		:"m" (current->thread.esp),"m" (current->thread.eip));
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: arch/i386/kernel/smpboot.c:600:
+		:"m" (current->thread.esp),"m" (current->thread.eip));
 		                          ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#637: FILE: arch/i386/kernel/smpboot.c:608:
+extern struct i386_pda *start_pda;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#638: FILE: arch/i386/kernel/smpboot.c:609:
+extern struct Xgt_desc_struct cpu_gdt_descr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#658: FILE: arch/i386/kernel/smpboot.c:944:
+	/* Pre-allocate and initialize the CPU's GDT and PDA so it
+	   doesn't have to do any memory allocation during the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: arch/i386/kernel/smpboot.c:945:
+	   delicate CPU-bringup phase. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#661: FILE: arch/i386/kernel/smpboot.c:947:
+		printk(KERN_INFO "Couldn't allocate GDT/PDA for CPU %d\n", cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/asm-i386/processor.h:734:
+extern int init_gdt(int cpu, struct task_struct *idle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/asm-i386/processor.h:735:
+extern void secondary_cpu_init(void);

WARNING:BAD_SIGN_OFF: Duplicate signature
#730: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#731: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#732: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#733: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#734: 
Cc: Andi Kleen <ak@suse.de>

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#768: FILE: arch/i386/kernel/cpu/common.c:591:
+struct pt_regs * __devinit idle_regs(struct pt_regs *regs)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#785: FILE: arch/i386/kernel/cpu/common.c:654:
+	/* Set %gs for this CPU's PDA.  Memory clobber is to create a
+	   barrier with respect to any PDA operations, so the compiler

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#786: FILE: arch/i386/kernel/cpu/common.c:655:
+	   doesn't move any before here. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: arch/i386/kernel/entry.S:130:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: arch/i386/kernel/head.S:322:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: arch/i386/kernel/head.S:368:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: arch/i386/kernel/head.S:450:
+^I$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1178: FILE: include/asm-i386/mmu_context.h:65:
+#define deactivate_mm(tsk, mm)			\
+	asm("movl %0,%%fs": :"r" (0));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1179: FILE: include/asm-i386/mmu_context.h:66:
+	asm("movl %0,%%fs": :"r" (0));
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1179: FILE: include/asm-i386/mmu_context.h:66:
+	asm("movl %0,%%fs": :"r" (0));
 	                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1199: FILE: include/asm-i386/processor.h:508:
+	__asm__("movl %0,%%fs": :"r" (0));			\
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1199: FILE: include/asm-i386/processor.h:508:
+	__asm__("movl %0,%%fs": :"r" (0));			\
 	                        ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1224: FILE: kernel/fork.c:1302:
+noinline struct pt_regs * __devinit __attribute__((weak)) idle_regs(struct pt_regs *regs)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1224: FILE: kernel/fork.c:1302:
+noinline struct pt_regs * __devinit __attribute__((weak)) idle_regs(struct pt_regs *regs)

WARNING:BAD_SIGN_OFF: Duplicate signature
#1242: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1243: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1244: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1245: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1246: 
Cc: Andi Kleen <ak@suse.de>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1264: FILE: arch/i386/kernel/process.c:312:
+	printk(" DS: %04x ES: %04x GS: %04x\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1265: FILE: arch/i386/kernel/process.c:313:
+	       0xffff & regs->xds,0xffff & regs->xes, 0xffff & regs->xgs);
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1302: FILE: arch/i386/kernel/ptrace.c:115:
+	if (regno > ES*4)
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1303: FILE: arch/i386/kernel/ptrace.c:116:
+		regno -= 1*4;
 		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1324: FILE: arch/i386/kernel/ptrace.c:138:
+			if (regno > ES*4)
 			              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1325: FILE: arch/i386/kernel/ptrace.c:139:
+				regno -= 1*4;
 				          ^

WARNING:BAD_SIGN_OFF: Duplicate signature
#1375: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1376: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1377: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1378: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1379: 
Cc: Andi Kleen <ak@suse.de>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1430: FILE: arch/i386/kernel/vm86.c:100:
+	/* kernel_vm86_regs is missing xfs, so copy everything up to
+	   (but not including) xgs, and then rest after xgs. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1430: FILE: arch/i386/kernel/vm86.c:100:
+	   (but not including) xgs, and then rest after xgs. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1442: FILE: arch/i386/kernel/vm86.c:112:
+				    unsigned extra)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1466: FILE: arch/i386/kernel/vm86.c:144:
+	tmp = copy_vm86_regs_to_user(&current->thread.vm86_info->regs,regs);
 	                                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1540: FILE: arch/i386/kernel/vm86.c:299:
+ ^IVEFLAGS = info->regs.pt.eflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1540: FILE: arch/i386/kernel/vm86.c:299:
+ ^IVEFLAGS = info->regs.pt.eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: arch/i386/kernel/vm86.c:299:
+ ^IVEFLAGS = info->regs.pt.eflags;$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1575: FILE: arch/i386/kernel/vm86.c:348:
+		:"r" (&info->regs), "r" (task_thread_info(tsk)), "r" (0));
 		^

CHECK:SPACING: No space is necessary after a cast
#1647: FILE: arch/i386/kernel/vm86.c:554:
+		do_int(regs, trapno, (unsigned char __user *) (regs->pt.xss << 4), SP(regs));

CHECK:SPACING: No space is necessary after a cast
#1661: FILE: arch/i386/kernel/vm86.c:592:
+	csp = (unsigned char __user *) (regs->pt.xcs << 4);

CHECK:SPACING: No space is necessary after a cast
#1662: FILE: arch/i386/kernel/vm86.c:593:
+	ssp = (unsigned char __user *) (regs->pt.xss << 4);

WARNING:BAD_SIGN_OFF: Duplicate signature
#1722: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1723: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1724: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1725: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1726: 
Cc: Andi Kleen <ak@suse.de>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1784: 
Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1785: 
Cc: Chuck Ebbert <76306.1226@compuserve.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1786: 
Cc: Zachary Amsden <zach@vmware.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1787: 
Cc: Jan Beulich <jbeulich@novell.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1788: 
Cc: Andi Kleen <ak@suse.de>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 76 warnings, 26 checks, 1359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
