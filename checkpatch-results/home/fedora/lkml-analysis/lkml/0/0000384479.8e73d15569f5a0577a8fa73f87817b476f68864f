WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONST_STRUCT: struct file_operations should normally be const
#65: FILE: char/misc.c:103:
+	struct file_operations *fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#230: FILE: char/tty_io.c:277:
+		char modname [32];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:CONST_STRUCT: struct file_operations should normally be const
#280: FILE: char/tty_io.c:2131:
+		struct file_operations *fops = cdev->fops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: char/tty_io.c:2132:
+		struct file_operations *fops = cdev->fops;
+		cdput(cdev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: char/tty_io.c:2137:
+	if (error < 0) {
[...]
-	else if(driver->major == 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#322: FILE: char/tty_io.c:2180:
+	if (found) {
[...]
 	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#323: FILE: char/tty_io.c:2181:
+		if (othername) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: char/tty_io.c:2183:
+			struct char_device *cdev = cdget(MKDEV(driver->major, 0));
+			cdev->name = othername;

CHECK:BRACES: Unbalanced braces around else statement
#328: FILE: char/tty_io.c:2186:
+		} else

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#410: FILE: char_dev.c:136:
+			len += sprintf(page+len, "%3d %s\n", i, cdev->name);
 			                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#422: FILE: char_dev.c:147:
+static struct file_operations *get_chrfops(struct char_device *cdev)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#428: FILE: char_dev.c:149:
+	struct file_operations *fops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: char_dev.c:175:
+^I^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: char_dev.c:185:
+^I^I^I^Icdev->fops = fops; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: char_dev.c:186:
+^I^I^I^Icdev->name = name; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: char_dev.c:190:
+^I^I^Iup(&cdev->sem); $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#559: FILE: char_dev.c:240:
+	struct file_operations *fops;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#572: FILE: char_dev.c:249:
+			ret = fops->open(inode,filp);
 			                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: char_dev.c:249:
+			ret = fops->open(inode,filp);
 			                      ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#587: FILE: char_dev.c:272:
+	sprintf(buffer, "%s(%d,%d)", cdev->name ? cdev->name : "unknown-char", major(dev), minor(dev));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:CONST_STRUCT: struct file_operations should normally be const
#606: FILE: linux/fs.h:334:
+	struct file_operations *fops;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#607: FILE: linux/fs.h:335:
+	const char *		name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 5 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
