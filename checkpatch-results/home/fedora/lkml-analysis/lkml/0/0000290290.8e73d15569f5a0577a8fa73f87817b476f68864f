CHECK:BRACES: Unbalanced braces around else statement
#73: FILE: mm/page_alloc.c:187:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#83: FILE: mm/page_alloc.c:208:
+		if (PageBooked(buddy1) != PageBooked(buddy2)) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: mm/page_alloc.c:551:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'wheter' may be misspelled - perhaps 'whether'?
#122: FILE: mm/page_alloc.c:552:
+ * Check wheter the page is freeable or not.
          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#130: FILE: mm/page_alloc.c:560:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#136: FILE: mm/page_alloc.c:566:
+		page->mapping != NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#138: FILE: mm/page_alloc.c:568:
+		(page->flags & (

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#139: FILE: mm/page_alloc.c:569:
+			1 << PG_reserved|
 			                ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#140: FILE: mm/page_alloc.c:570:
+			1 << PG_compound|
 			                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#149: FILE: mm/page_alloc.c:579:
+			1 << PG_writeback )));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#161: FILE: mm/page_alloc.c:591:
+	for (p = page; p < &page[1<<order]; p++) {
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#175: FILE: mm/page_alloc.c:605:
+	for (p--; p >= page; p--) {
+		ClearPageBooked(p);
+	}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#185: FILE: mm/page_alloc.c:615:
+	unsigned long	num = 1<<order;
 	             	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: mm/page_alloc.c:618:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: mm/page_alloc.c:638:
+	struct page	*p;
+	for (p = page; p < &page[1<<order]; p++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#208: FILE: mm/page_alloc.c:638:
+	for (p = page; p < &page[1<<order]; p++) {
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#208: FILE: mm/page_alloc.c:638:
+	for (p = page; p < &page[1<<order]; p++) {
+		ClearPageBooked(p);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: mm/page_alloc.c:644:
+ * sweepout_pages() might not work well as the booked pages $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#227: FILE: mm/page_alloc.c:657:
+	on_each_cpu((void (*)(void*))drain_local_pages, NULL, 1, 1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#231: FILE: mm/page_alloc.c:661:
+		if (!PageBooked(p)) {
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked. page(%p) num(%d)\n", p, page, num);
+		}

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#232: FILE: mm/page_alloc.c:662:
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked. page(%p) num(%d)\n", p, page, num);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: mm/page_alloc.c:662:
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked. page(%p) num(%d)\n", p, page, num);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sweepout_pages', this function's name, in a string
#232: FILE: mm/page_alloc.c:662:
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked. page(%p) num(%d)\n", p, page, num);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: mm/page_alloc.c:673:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#248: FILE: mm/page_alloc.c:678:
+				/* the page is in pagevec_release();
+				   shrink_cache says so. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: mm/page_alloc.c:678:
+				   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: mm/page_alloc.c:688:
+				/* the page is in pagevec_release();
+				   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: mm/page_alloc.c:688:
+				   shrink_cache says so. */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#285: FILE: mm/page_alloc.c:715:
+		schedule_timeout(HZ/4);
 		                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#289: FILE: mm/page_alloc.c:719:
+	on_each_cpu((void (*)(void*))drain_local_pages, NULL, 1, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/page_alloc.c:729:
+force_alloc_pages(unsigned int gfp_mask, unsigned int order,
+			struct zonelist *zonelist)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#310: FILE: mm/page_alloc.c:740:
+	if (down_trylock(&bookedpage_sem)) {
+		down(&bookedpage_sem);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#314: FILE: mm/page_alloc.c:744:
+	for (i = 0; zones[i] != NULL; i++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#321: FILE: mm/page_alloc.c:751:
+			ret = sweepout_pages(zone, page, 1<<order);
 			                                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 19 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
