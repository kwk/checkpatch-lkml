WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#12: 
Subject: Re: [POLL] SLAB : Are the 32 and 192 bytes caches really usefull
                                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
dynamic_dma-1536       0      0   1536    5    2 : tunables   24   12    0 : slabdata      0      0      0

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#149: FILE: arch/i386/Kconfig:176:
+config DYNAMIC_SLABS
+	bool "Dynamically create slabs for constant kmalloc"
+	default y
+	help
+	  This enables the creation of SLABS using information created at
+	  compile time.  Then on boot up, the slabs are created to fit
+	  more with what was asked for.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#221: FILE: arch/i386/mm/init.c:755:
+extern unsigned long __start____slab_addresses;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#222: FILE: arch/i386/mm/init.c:756:
+extern unsigned long __stop____slab_addresses;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: arch/i386/mm/init.c:804:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: arch/i386/mm/init.c:807:
+			printk("slab %p = %lx\n",slab_addresses, *slab_addresses);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: arch/i386/mm/init.c:807:
+			printk("slab %p = %lx\n",slab_addresses, *slab_addresses);
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: arch/i386/mm/init.c:809:
+			printk("slab %p = %ld\n",slab_addresses, *slab_addresses);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: arch/i386/mm/init.c:809:
+			printk("slab %p = %ld\n",slab_addresses, *slab_addresses);
 			                        ^

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: arch/i386/mm/init.c:813:
+# define print_slab_addresses(x) do {} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: arch/i386/mm/init.c:829:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: arch/i386/mm/init.c:836:
+	printk("Before update!\n");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(sizes)
#318: FILE: arch/i386/mm/init.c:852:
+	for (i=0; i < sizeof(sizes)/sizeof(sizes[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#318: FILE: arch/i386/mm/init.c:852:
+	for (i=0; i < sizeof(sizes)/sizeof(sizes[0]); i++) {
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#318: FILE: arch/i386/mm/init.c:852:
+	for (i=0; i < sizeof(sizes)/sizeof(sizes[0]); i++) {
 	                           ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#321: FILE: arch/i386/mm/init.c:855:
+		if (!s)
+			panic("Can't create link list for slabs\n");

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#330: FILE: arch/i386/mm/init.c:864:
+		struct cache_sizes **ptr = (struct cache_sizes**)slab_addresses;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#335: FILE: arch/i386/mm/init.c:869:
+		size = (size + (L1_CACHE_BYTES-1)) & ~(L1_CACHE_BYTES-1);
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#335: FILE: arch/i386/mm/init.c:869:
+		size = (size + (L1_CACHE_BYTES-1)) & ~(L1_CACHE_BYTES-1);
 		                                                     ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#352: FILE: arch/i386/mm/init.c:886:
+		if (!name)
+			panic("Can't allocate name for dynamic slab\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#364: FILE: arch/i386/mm/init.c:898:
+		if (!c)
+			panic("Can't allocate cache_size descriptor\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: arch/i386/mm/init.c:910:
+		c->cs_cachep = kmem_cache_create(name,
+				c->cs_size, ARCH_KMALLOC_MINALIGN,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: arch/i386/mm/init.c:914:
+		c->cs_dmacachep = kmem_cache_create(name_dma,
+			c->cs_size, ARCH_KMALLOC_MINALIGN,

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#386: FILE: arch/i386/mm/init.c:920:
+		if (!s)
+			panic("Can't create link list for slabs\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#392: FILE: arch/i386/mm/init.c:926:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: arch/i386/mm/init.c:930:
+	printk("\nAfter update!\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#407: FILE: include/asm-i386/dynamic_slab.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#414: FILE: include/asm-i386/dynamic_slab.h:8:
+__asm__ __volatile__ (

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#465: FILE: mm/slab.c:1171:
+		extern int dynamic_slab_init(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 16 warnings, 9 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
