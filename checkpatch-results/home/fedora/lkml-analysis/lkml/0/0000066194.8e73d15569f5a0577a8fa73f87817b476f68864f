WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
2. Userspace commands. Includes read/write and search/alarm search comamnds.

WARNING:TYPO_SPELLING: 'comamnds' may be misspelled - perhaps 'commands'?
#31: 
2. Userspace commands. Includes read/write and search/alarm search comamnds.
                                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'comamnds' may be misspelled - perhaps 'commands'?
#66: FILE: Documentation/w1/w1.netlink:10:
+2. Userspace commands. Includes read/write and search/alarm search comamnds.
                                                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'gived' may be misspelled - perhaps 'given'?
#91: FILE: Documentation/w1/w1.netlink:35:
+[strucrt w1_netlink_cmd] - command for gived master or slave device.
                                        ^^^^^

WARNING:TYPO_SPELLING: 'strucutre' may be misspelled - perhaps 'structure'?
#106: FILE: Documentation/w1/w1.netlink:50:
+and w1_netlink_msg strucutre with "len" field being zero and filled type (one of event types)
                    ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: drivers/w1/w1.c:85:
+	printk("%s: Releasing %s.\n", __func__, sl->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: drivers/w1/w1.c:88:
+		printk("Waiting for %s to become free: refcnt=%d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: drivers/w1/w1.c:89:
+		printk("Waiting for %s to become free: refcnt=%d.\n",
 				sl->name, atomic_read(&sl->refcnt));

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#300: FILE: drivers/w1/w1.c:450:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_FID=%02X", sl->reg_num.family);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#307: FILE: drivers/w1/w1.c:454:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_SLAVE_ID=%024LX", (u64)sl->reg_num.id);

WARNING:PRINTF_L: %LX is non-standard C, use %llX
#307: FILE: drivers/w1/w1.c:454:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_SLAVE_ID=%024LX", (u64)sl->reg_num.id);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#372: FILE: drivers/w1/w1.c:651:
+	return (found)?dev:NULL;
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#372: FILE: drivers/w1/w1.c:651:
+	return (found)?dev:NULL;
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/w1/w1.c:665:
+			if (sl->reg_num.family == id->family &&
+					sl->reg_num.id == id->id &&

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#401: FILE: drivers/w1/w1.c:680:
+	return (found)?sl:NULL;
 	              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#401: FILE: drivers/w1/w1.c:680:
+	return (found)?sl:NULL;
 	                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#464: FILE: drivers/w1/w1.c:895:
+		if (!test_bit(W1_SLAVE_ACTIVE, (unsigned long *)&sl->flags) && !--sl->ttl) {
[...]
+		} else if (test_bit(W1_SLAVE_ACTIVE, (unsigned long *)&sl->flags))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#554: FILE: drivers/w1/w1.h:147:
+	void		(*search)(void *, u8, w1_slave_found_callback);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#554: FILE: drivers/w1/w1.h:147:
+	void		(*search)(void *, u8, w1_slave_found_callback);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'w1_slave_found_callback' should also have an identifier name
#554: FILE: drivers/w1/w1.h:147:
+	void		(*search)(void *, u8, w1_slave_found_callback);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#575: FILE: drivers/w1/w1.h:191:
+void w1_delay(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#576: FILE: drivers/w1/w1.h:192:
+u8 w1_touch_bit(struct w1_master *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#576: FILE: drivers/w1/w1.h:192:
+u8 w1_touch_bit(struct w1_master *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#578: FILE: drivers/w1/w1.h:194:
+void w1_write_8(struct w1_master *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#578: FILE: drivers/w1/w1.h:194:
+void w1_write_8(struct w1_master *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#579: FILE: drivers/w1/w1.h:195:
+u8 w1_read_8(struct w1_master *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#580: FILE: drivers/w1/w1.h:196:
+int w1_reset_bus(struct w1_master *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#581: FILE: drivers/w1/w1.h:197:
+u8 w1_calc_crc8(u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#581: FILE: drivers/w1/w1.h:197:
+u8 w1_calc_crc8(u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#582: FILE: drivers/w1/w1.h:198:
+void w1_write_block(struct w1_master *, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const u8 *' should also have an identifier name
#582: FILE: drivers/w1/w1.h:198:
+void w1_write_block(struct w1_master *, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#582: FILE: drivers/w1/w1.h:198:
+void w1_write_block(struct w1_master *, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct w1_master *' should also have an identifier name
#583: FILE: drivers/w1/w1.h:199:
+u8 w1_read_block(struct w1_master *, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#583: FILE: drivers/w1/w1.h:199:
+u8 w1_read_block(struct w1_master *, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#583: FILE: drivers/w1/w1.h:199:
+u8 w1_read_block(struct w1_master *, u8 *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#628: FILE: drivers/w1/w1_int.c:33:
+extern struct device_driver w1_master_driver;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#629: FILE: drivers/w1/w1_int.c:34:
+extern struct bus_type w1_bus_type;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#630: FILE: drivers/w1/w1_int.c:35:
+extern struct device w1_master_device;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#631: FILE: drivers/w1/w1_int.c:36:
+extern int w1_max_slave_count;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#632: FILE: drivers/w1/w1_int.c:37:
+extern int w1_max_slave_ttl;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#633: FILE: drivers/w1/w1_int.c:38:
+extern struct list_head w1_masters;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#634: FILE: drivers/w1/w1_int.c:39:
+extern struct semaphore w1_mlock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#636: FILE: drivers/w1/w1_int.c:41:
+extern int w1_process(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#636: FILE: drivers/w1/w1_int.c:41:
+extern int w1_process(void *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#744: FILE: drivers/w1/w1_io.c:302:
+EXPORT_SYMBOL_GPL(w1_calc_crc8);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#767: FILE: drivers/w1/w1_netlink.c:35:
+	struct w1_netlink_msg *w = (struct w1_netlink_msg *)(m+1);
 	                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: drivers/w1/w1_netlink.c:51:
+static int w1_process_command_master(struct w1_master *dev, struct cn_msg *msg,
+		struct w1_netlink_msg *hdr, struct w1_netlink_cmd *cmd)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#806: FILE: drivers/w1/w1_netlink.c:59:
+	w1_search_process(dev, (cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);
 	                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#806: FILE: drivers/w1/w1_netlink.c:59:
+	w1_search_process(dev, (cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);
 	                                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: drivers/w1/w1_netlink.c:64:
+static int w1_send_read_reply(struct w1_slave *sl, struct cn_msg *msg,
+		struct w1_netlink_msg *hdr, struct w1_netlink_cmd *cmd)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*data)...) over kzalloc(sizeof(struct cn_msg)...)
#824: FILE: drivers/w1/w1_netlink.c:72:
+	data = kzalloc(sizeof(struct cn_msg) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#839: FILE: drivers/w1/w1_netlink.c:87:
+	cm->ack = msg->seq+1;
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: drivers/w1/w1_netlink.c:102:
+static int w1_process_command_slave(struct w1_slave *sl, struct cn_msg *msg,
+		struct w1_netlink_msg *hdr, struct w1_netlink_cmd *cmd)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#862: FILE: drivers/w1/w1_netlink.c:110:
+	switch (cmd->cmd) {
+		case W1_CMD_READ:
[...]
+		case W1_CMD_WRITE:
[...]
+		case W1_CMD_SEARCH:
+		case W1_CMD_ALARM_SEARCH:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#873: FILE: drivers/w1/w1_netlink.c:121:
+					(cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/w1/w1_netlink.c:121:
+			w1_search_process(sl->master,
+					(cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#873: FILE: drivers/w1/w1_netlink.c:121:
+					(cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);
 					                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#873: FILE: drivers/w1/w1_netlink.c:121:
+					(cmd->cmd == W1_CMD_ALARM_SEARCH)?W1_ALARM_SEARCH:W1_SEARCH);
 					                                                 ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#902: FILE: drivers/w1/w1_netlink.c:149:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#903: FILE: drivers/w1/w1_netlink.c:150:
+		printk("%s: %02x.%012llx.%02x: type=%02x, len=%u.\n",

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#904: FILE: drivers/w1/w1_netlink.c:151:
+				__func__, id.family, (unsigned long long)id.id, id.crc, m->type, m->len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: drivers/w1/w1_netlink.c:151:
+		printk("%s: %02x.%012llx.%02x: type=%02x, len=%u.\n",
+				__func__, id.family, (unsigned long long)id.id, id.crc, m->type, m->len);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#965: FILE: drivers/w1/w1_netlink.c:212:
+#if 0

WARNING:BRACES: braces {} are not necessary for single statement blocks
#966: FILE: drivers/w1/w1_netlink.c:213:
+	if (err) {
+		printk("%s: malformed message. Dropping.\n", __func__);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#967: FILE: drivers/w1/w1_netlink.c:214:
+		printk("%s: malformed message. Dropping.\n", __func__);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1058: FILE: drivers/w1/w1_netlink.h:63:
+struct w1_netlink_cmd
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066194.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 46 warnings, 19 checks, 929 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066194.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
