CHECK:BIT_MACRO: Prefer using the BIT macro
#109: FILE: include/asm-ppc64/pgtable.h:35:
+#define PMD_SIZE	(1UL << PMD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#110: FILE: include/asm-ppc64/pgtable.h:36:
+#define PMD_MASK	(~(PMD_SIZE-1))
                 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: include/asm-ppc64/pgtable.h:40:
+#define PGDIR_SIZE	(1UL << PGDIR_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: include/asm-ppc64/pgtable.h:41:
+#define PGDIR_MASK	(~(PGDIR_SIZE-1))
                   	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/asm-ppc64/pgtable.h:49:
+                    PGD_INDEX_SIZE + PAGE_SHIFT) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: include/asm-ppc64/pgtable.h:49:
+                    PGD_INDEX_SIZE + PAGE_SHIFT) $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: include/asm-ppc64/pgtable.h:49:
+                    PGD_INDEX_SIZE + PAGE_SHIFT) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#182: FILE: include/asm-ppc64/pgtable.h:183:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: arch/ppc64/mm/imalloc.c:31:
+^I^Iif ((unsigned long)tmp->addr >= ioremap_bot) $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#379: FILE: arch/ppc64/mm/hash_utils.c:308:
+		if (! mm)
 		    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#468: FILE: include/asm-ppc64/mmu.h:32:
+#define STAB0_PHYS_ADDR	(STAB0_PAGE<<PAGE_SHIFT)
                        	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: include/asm-ppc64/mmu.h:33:
+#define STAB0_VIRT_ADDR	(KERNELBASE+STAB0_PHYS_ADDR)
                        	           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#490: FILE: include/asm-ppc64/mmu.h:53:
+#define SLB_VSID_KERNEL		(SLB_VSID_KP|SLB_VSID_C)
                        		            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#491: FILE: include/asm-ppc64/mmu.h:54:
+#define SLB_VSID_USER		(SLB_VSID_KP|SLB_VSID_KS)
                      		            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/asm-ppc64/mmu.h:193:
+extern void hpte_init_native(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: include/asm-ppc64/mmu.h:194:
+extern void hpte_init_lpar(void);

CHECK:CAMELCASE: Avoid CamelCase: <hpte_init_iSeries>
#533: FILE: include/asm-ppc64/mmu.h:195:
+extern void hpte_init_iSeries(void);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/asm-ppc64/mmu.h:195:
+extern void hpte_init_iSeries(void);

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_lpar_hpte_insert>
#535: FILE: include/asm-ppc64/mmu.h:197:
+extern long pSeries_lpar_hpte_insert(unsigned long hpte_group,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: include/asm-ppc64/mmu.h:197:
+extern long pSeries_lpar_hpte_insert(unsigned long hpte_group,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: include/asm-ppc64/mmu.h:201:
+extern long native_hpte_insert(unsigned long hpte_group, unsigned long va,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: include/asm-ppc64/mmu.h:235:
+ * ^I- We have VSIDs allocated for every kernel address$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#578: FILE: include/asm-ppc64/mmu.h:239:
+ * ^I- We allow for 15 significant bits of ESID and 20 bits of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#583: FILE: include/asm-ppc64/mmu.h:244:
+ * ^I- The scramble function gives robust scattering in the hash$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: include/asm-ppc64/mmu.h:297:
 
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#626: FILE: include/asm-ppc64/mmu.h:300:
+typedef unsigned long mm_context_id_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#628: FILE: include/asm-ppc64/mmu.h:302:
+typedef struct {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: include/asm-ppc64/mmu.h:310:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#639: FILE: include/asm-ppc64/mmu.h:313:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#643: FILE: include/asm-ppc64/mmu.h:317:
+	 * modulus (2^n-1) without a second multiply. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: include/asm-ppc64/mmu.h:324:
+	return (x + ((x+1) >> VSID_BITS)) & VSID_MODULUS;
 	               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#782: FILE: include/asm-ppc64/imalloc.h:1:
+#ifndef _PPC64_IMALLOC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#788: FILE: include/asm-ppc64/imalloc.h:7:
+#define PHBS_IO_BASE  ^I  IOREGIONBASE$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#792: FILE: include/asm-ppc64/imalloc.h:11:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: include/asm-ppc64/imalloc.h:19:
+extern struct vm_struct * im_get_free_area(unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#800: FILE: include/asm-ppc64/imalloc.h:19:
+extern struct vm_struct * im_get_free_area(unsigned long size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#801: FILE: include/asm-ppc64/imalloc.h:20:
+extern struct vm_struct * im_get_area(unsigned long v_addr, unsigned long size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: include/asm-ppc64/imalloc.h:20:
+extern struct vm_struct * im_get_area(unsigned long v_addr, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: include/asm-ppc64/imalloc.h:21:
+extern struct vm_struct * im_get_area(unsigned long v_addr, unsigned long size,
+			int region_type);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186022.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 23 checks, 667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186022.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
