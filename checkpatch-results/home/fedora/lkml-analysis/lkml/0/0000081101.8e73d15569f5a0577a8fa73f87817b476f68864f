WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
elements of the process' SELinux context (user, role, type, mls sensitivity,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#61: FILE: kernel/audit.c:572:
+	 * when a new policy is loaded. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: kernel/audit.h:92:
+extern int selinux_audit_rule_update(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: kernel/auditfilter.c:47:
+	int i;
+	if (e->rule.fields)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: kernel/auditfilter.c:50:
+			struct audit_field *f = &e->rule.fields[i];
+			kfree(f->se_str);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#132: FILE: kernel/auditfilter.c:73:
+	fields = kzalloc(sizeof(*fields) * field_count, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#244: FILE: kernel/auditfilter.c:251:
+			 * become valid after a policy reload. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#246: FILE: kernel/auditfilter.c:253:
+				printk(KERN_WARNING "audit rule for selinux "

WARNING:SPLIT_STRING: quoted string split across lines
#247: FILE: kernel/auditfilter.c:254:
+				printk(KERN_WARNING "audit rule for selinux "
+				       "\'%s\' is invalid\n",  str);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: kernel/auditfilter.c:257:
+			if (err) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#253: FILE: kernel/auditfilter.c:260:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#296: FILE: kernel/auditfilter.c:395:
+ * re-initialized. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#305: FILE: kernel/auditfilter.c:404:
+	if (unlikely(IS_ERR(se_str)))
+	    return -ENOMEM;

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#305: FILE: kernel/auditfilter.c:404:
+	if (unlikely(IS_ERR(se_str)))

WARNING:TABSTOP: Statements should start on a tabstop
#306: FILE: kernel/auditfilter.c:405:
+	    return -ENOMEM;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: kernel/auditfilter.c:412:
+	 * become valid after a policy reload. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#315: FILE: kernel/auditfilter.c:414:
+		printk(KERN_WARNING "audit rule for selinux \'%s\' is "

WARNING:SPLIT_STRING: quoted string split across lines
#316: FILE: kernel/auditfilter.c:415:
+		printk(KERN_WARNING "audit rule for selinux \'%s\' is "
+		       "invalid\n", df->se_str);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#326: FILE: kernel/auditfilter.c:425:
+ * rule with the new rule in the filterlist, then free the old rule. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#350: FILE: kernel/auditfilter.c:449:
+	 * the originals will all be freed when the old rule is freed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#379: FILE: kernel/auditfilter.c:771:
+/* Check to see if the rule contains any selinux fields.  Returns 1 if there
+   are selinux fields specified in the rule, 0 otherwise. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: kernel/auditfilter.c:771:
+   are selinux fields specified in the rule, 0 otherwise. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: kernel/auditfilter.c:778:
+		struct audit_field *f = &rule->fields[i];
+		switch (f->type) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#403: FILE: kernel/auditfilter.c:795:
+ * updated rule. */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#418: FILE: kernel/auditfilter.c:810:
+			if (unlikely(IS_ERR(nentry))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#420: FILE: kernel/auditfilter.c:812:
+				 * return value */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#468: FILE: kernel/auditsc.c:270:
+			/* NOTE: this may return negative values indicating
+			   a temporary error.  We simply treat this as a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: kernel/auditsc.c:273:
+			   logged upon error */

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: kernel/auditsc.c:276:
+^I^I^I^I                                  f->op,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: kernel/auditsc.c:277:
+^I^I^I^I                                  f->se_rule,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: kernel/auditsc.c:278:
+^I^I^I^I                                  ctx);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081101.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 25 warnings, 3 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081101.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
