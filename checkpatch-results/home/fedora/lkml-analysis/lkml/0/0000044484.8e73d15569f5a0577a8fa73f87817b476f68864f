Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
Make it possible to disable the block layer.  Not all embedded devices require

WARNING:TYPO_SPELLING: 'MSDOS' may be misspelled - perhaps ''?
#64: 
     Ext3/JBD, RAID, MSDOS and ReiserFS.
                     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#135: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1296: FILE: fs/inode.c:369:
+#ifdef CONFIG_BLOCK $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1309: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1314: FILE: fs/no-block.c:1:
+/* no-block.c: implementation of routines required for non-BLOCK configuration

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1338: FILE: fs/no-block.c:25:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1391: FILE: fs/no-block.c:78:
+	while (!done && (index <= end) &&
+			(nr_pages = pagevec_lookup_tag(&pvec, mapping, &index,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1393: FILE: fs/no-block.c:80:
+			min(end - index, (pgoff_t)PAGEVEC_SIZE-1) + 1))) {
 			                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1394: FILE: fs/no-block.c:81:
+		unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: fs/no-block.c:112:
+			if (PageWriteback(page) ||
+					!clear_page_dirty_for_io(page)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wbc->nr_to_write'
#1440: FILE: fs/no-block.c:127:
+			if (ret || (--(wbc->nr_to_write) <= 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1464: FILE: fs/no-block.c:151:
+EXPORT_SYMBOL(generic_writepages);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1466: FILE: fs/no-block.c:153:
+static int no_blkdev_open(struct inode * inode, struct file * filp)
                                                               ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1466: FILE: fs/no-block.c:153:
+static int no_blkdev_open(struct inode * inode, struct file * filp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1466: FILE: fs/no-block.c:153:
+static int no_blkdev_open(struct inode * inode, struct file * filp)

CHECK:BRACES: Unbalanced braces around else statement
#1498: FILE: fs/proc/proc_misc.c:273:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1674: FILE: fs/sync.c:33:
+		printk("Emergency Sync complete\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1693: FILE: fs/sync.c:52:
+ * filp may be NULL if called via the msync of a vma.
    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1695: FILE: fs/sync.c:54:
+int file_fsync(struct file *filp, struct dentry *dentry, int datasync)
                             ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1697: FILE: fs/sync.c:56:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1698: FILE: fs/sync.c:57:
+	struct super_block * sb;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1798: FILE: include/linux/blkdev.h:23:
+# define sector_div(n, b)( \
+{ \
+	int _res; \
+	_res = (n) % (b); \
+	(n) /= (b); \
+	_res; \
+} \
+)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#1798: FILE: include/linux/blkdev.h:23:
+# define sector_div(n, b)( \
+{ \
+	int _res; \
+	_res = (n) % (b); \
+	(n) /= (b); \
+	_res; \
+} \
+)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1806: FILE: include/linux/blkdev.h:31:
+#endif $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1837: FILE: include/linux/blkdev.h:846:
+extern void bdev_cache_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1912: FILE: include/linux/buffer_head.h:305:
+extern int __set_page_dirty_buffers(struct page *page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1925: FILE: include/linux/buffer_head.h:318:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2088: FILE: include/linux/fs.h:1526:
+extern int invalidate_inodes(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2096: FILE: include/linux/fs.h:1554:
+extern void __fsync_super(struct super_block *sb);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2162: FILE: include/linux/jbd.h:37:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2181: FILE: include/linux/loop.h:4:
+#if defined(CONFIG_BLK_DEV_LOOP) || defined(CONFIG_BLK_DEV_LOOP_MODULE)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2201: FILE: include/linux/mm.h:770:
+extern int try_to_release_page(struct page * page, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2201: FILE: include/linux/mm.h:770:
+extern int try_to_release_page(struct page * page, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2202: FILE: include/linux/mm.h:771:
+extern void do_invalidatepage(struct page *page, unsigned long offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2222: FILE: include/linux/mpage.h:31:
+extern int generic_writepages(struct address_space *mapping,

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2234: FILE: include/linux/msdos_fs.h:9:
+#if defined(CONFIG_MSDOS_FS) || defined(CONFIG_MSDOS_FS_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2293: FILE: include/linux/reiserfs_fs.h:29:
+#if defined(CONFIG_REISERFS_FS) || defined(CONFIG_REISERFS_FS_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2447: FILE: mm/bounce.c:1:
+/* bounce.c: bounce buffer handling for block devices

WARNING:LINE_SPACING: Missing a blank line after declarations
#2474: FILE: mm/bounce.c:28:
+	struct sysinfo i;
+	si_meminfo(&i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2476: FILE: mm/bounce.c:30:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2476: FILE: mm/bounce.c:30:
+        $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2476: FILE: mm/bounce.c:30:
+        $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2481: FILE: mm/bounce.c:35:
+	BUG_ON(!page_pool);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2482: FILE: mm/bounce.c:36:
+	printk("highmem bounce pool size: %d pages\n", POOL_SIZE);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2487: FILE: mm/bounce.c:41:
+__initcall(init_emergency_pool);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#2506: FILE: mm/bounce.c:60:
+#define bounce_copy_vec(to, vfrom)	\
+	memcpy(page_address((to)->bv_page) + (to)->bv_offset, vfrom, (to)->bv_len)

CHECK:SPACING: No space is necessary after a cast
#2529: FILE: mm/bounce.c:83:
+				       mempool_free_pages, (void *) 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2530: FILE: mm/bounce.c:84:
+	BUG_ON(!isa_page_pool);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2532: FILE: mm/bounce.c:86:
+	printk("isa bounce pool size: %d pages\n", ISA_POOL_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2736: FILE: mm/bounce.c:290:
+		BUG_ON(!isa_page_pool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2748: FILE: mm/bounce.c:302:
+EXPORT_SYMBOL(blk_queue_bounce);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2795: FILE: mm/filemap.c:2501:
+	BUG_ON(!PageLocked(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2798: FILE: mm/filemap.c:2504:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2804: FILE: mm/filemap.c:2510:
+EXPORT_SYMBOL(try_to_release_page);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3186: FILE: mm/truncate.c:35:
+	void (*invalidatepage)(struct page *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#3186: FILE: mm/truncate.c:35:
+	void (*invalidatepage)(struct page *, unsigned long);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3187: FILE: mm/truncate.c:36:
+	void (*invalidatepage)(struct page *, unsigned long);
+	invalidatepage = page->mapping->a_ops->invalidatepage;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044484.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 30 warnings, 17 checks, 2587 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044484.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
