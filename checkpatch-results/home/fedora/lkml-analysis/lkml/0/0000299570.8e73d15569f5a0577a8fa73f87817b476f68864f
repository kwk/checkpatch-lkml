WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#70: 
   and made them dependant of WATCHDOG also
                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#81: 
================================================================================

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#83: 
--- a/drivers/char/watchdog/Kconfig	Sun Feb 29 22:53:13 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: drivers/char/watchdog/Kconfig:465:
+config USBPCWATCHDOG
+	tristate "Berkshire Products USB-PC Watchdog"
+	depends on WATCHDOG && USB
+	---help---
+	  This is the driver for the Berkshire Products USB-PC Watchdog card.
+	  This card simply watches your kernel to make sure it doesn't freeze,
+	  and if it does, it reboots your computer after a certain amount of
+	  time. The card can also monitor the internal temperature of the PC.
+	  More info is available at <http://www.berkprod.com/usb_pc_watchdog.htm>.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called pcwd_usb.
+
+	  Most people will say N.
+
 endmenu

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: drivers/char/watchdog/pcwd_usb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#173: FILE: drivers/char/watchdog/pcwd_usb.c:43:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: drivers/char/watchdog/pcwd_usb.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#185: FILE: drivers/char/watchdog/pcwd_usb.c:55:
+#define dbg(format, arg...) do { if (debug) printk(KERN_DEBUG PFX format "\n" , ## arg); } while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#185: FILE: drivers/char/watchdog/pcwd_usb.c:55:
+#define dbg(format, arg...) do { if (debug) printk(KERN_DEBUG PFX format "\n" , ## arg); } while (0)
                                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: drivers/char/watchdog/pcwd_usb.c:57:
+
+

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#209: FILE: drivers/char/watchdog/pcwd_usb.c:79:
+MODULE_PARM_DESC(heartbeat, "Watchdog heartbeat in seconds. (0<heartbeat<65536, default=" __MODULE_STRING(WATCHDOG_HEARTBEAT) ")");

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#214: FILE: drivers/char/watchdog/pcwd_usb.c:84:
+static int nowayout = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#225: FILE: drivers/char/watchdog/pcwd_usb.c:95:
+static struct usb_device_id usb_pcwd_table [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#229: FILE: drivers/char/watchdog/pcwd_usb.c:99:
+MODULE_DEVICE_TABLE (usb, usb_pcwd_table);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: drivers/char/watchdog/pcwd_usb.c:102:
+ * watchdog card is 100 or 200 ms, so we give it 250 ms to do it's job */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#259: FILE: drivers/char/watchdog/pcwd_usb.c:129:
+	struct usb_device *	udev;			/* save off the usb device pointer */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#260: FILE: drivers/char/watchdog/pcwd_usb.c:130:
+	struct usb_interface *	interface;		/* the interface for this device */

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#264: FILE: drivers/char/watchdog/pcwd_usb.c:134:
+	unsigned char *		intr_buffer;		/* the buffer to intr data */

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#267: FILE: drivers/char/watchdog/pcwd_usb.c:137:
+	struct urb *		intr_urb;		/* the urb used for the intr pipe */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#272: FILE: drivers/char/watchdog/pcwd_usb.c:142:
+	atomic_t		cmd_received;		/* true if we received a report after a command */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'Wether' may be misspelled - perhaps 'Weather'?
#274: FILE: drivers/char/watchdog/pcwd_usb.c:144:
+	int			exists;			/* Wether or not the device exists */
 	   			       			   ^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#277: FILE: drivers/char/watchdog/pcwd_usb.c:147:
+};
+static struct usb_pcwd_private *usb_pcwd_device;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#280: FILE: drivers/char/watchdog/pcwd_usb.c:150:
+static DECLARE_MUTEX (disconnect_sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: drivers/char/watchdog/pcwd_usb.c:153:
+static int usb_pcwd_probe	(struct usb_interface *interface, const struct usb_device_id *id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: drivers/char/watchdog/pcwd_usb.c:154:
+static void usb_pcwd_disconnect	(struct usb_interface *interface);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: drivers/char/watchdog/pcwd_usb.c:165:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#309: FILE: drivers/char/watchdog/pcwd_usb.c:179:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__, urb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#313: FILE: drivers/char/watchdog/pcwd_usb.c:183:
+		dbg("%s - nonzero urb status received: %d", __FUNCTION__, urb->status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/char/watchdog/pcwd_usb.c:188:
+	dbg("received following data cmd=0x%02x msb=0x%02x lsb=0x%02x",
+		data[0], data[1], data[2]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: drivers/char/watchdog/pcwd_usb.c:195:
+	atomic_set (&usb_pcwd->cmd_received, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#328: FILE: drivers/char/watchdog/pcwd_usb.c:198:
+	retval = usb_submit_urb (urb, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: drivers/char/watchdog/pcwd_usb.c:200:
+		printk(KERN_ERR PFX "can't resubmit intr, usb_submit_urb failed with result %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/char/watchdog/pcwd_usb.c:201:
+		printk(KERN_ERR PFX "can't resubmit intr, usb_submit_urb failed with result %d\n",
+			retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/char/watchdog/pcwd_usb.c:205:
+static int usb_pcwd_send_command(struct usb_pcwd_private *usb_pcwd, unsigned char cmd,
+	unsigned char *msb, unsigned char *lsb)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!usb_pcwd'
#341: FILE: drivers/char/watchdog/pcwd_usb.c:211:
+	if ((!usb_pcwd) || (!usb_pcwd->exists))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!usb_pcwd->exists'
#341: FILE: drivers/char/watchdog/pcwd_usb.c:211:
+	if ((!usb_pcwd) || (!usb_pcwd->exists))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#345: FILE: drivers/char/watchdog/pcwd_usb.c:215:
+	 * only 3 of the six bytes of the report. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#349: FILE: drivers/char/watchdog/pcwd_usb.c:219:
+	buf[3] = buf[4] = buf[5] = 0;	/* All other bytes not used */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/char/watchdog/pcwd_usb.c:222:
+	dbg("sending following data cmd=0x%02x msb=0x%02x lsb=0x%02x",
+		buf[0], buf[1], buf[2]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: drivers/char/watchdog/pcwd_usb.c:224:
+	atomic_set (&usb_pcwd->cmd_received, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: drivers/char/watchdog/pcwd_usb.c:227:
+	if (usb_control_msg(usb_pcwd->udev, usb_sndctrlpipe(usb_pcwd->udev, 0),
+			HID_REQ_SET_REPORT, HID_DT_REPORT,

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#360: FILE: drivers/char/watchdog/pcwd_usb.c:230:
+		dbg("usb_pcwd_send_command: error in usb_control_msg for cmd 0x%x 0x%x 0x%x\n", cmd, *msb, *lsb);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usb_pcwd_send_command', this function's name, in a string
#360: FILE: drivers/char/watchdog/pcwd_usb.c:230:
+		dbg("usb_pcwd_send_command: error in usb_control_msg for cmd 0x%x 0x%x 0x%x\n", cmd, *msb, *lsb);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: drivers/char/watchdog/pcwd_usb.c:233:
+	 * with a max. timeout of USB_COMMAND_TIMEOUT */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#367: FILE: drivers/char/watchdog/pcwd_usb.c:237:
+		if (atomic_read (&usb_pcwd->cmd_received))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&usb_pcwd->cmd_received'
#367: FILE: drivers/char/watchdog/pcwd_usb.c:237:
+		if (atomic_read (&usb_pcwd->cmd_received))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == usb_pcwd->cmd_command'
#371: FILE: drivers/char/watchdog/pcwd_usb.c:241:
+	if ((got_response) && (cmd == usb_pcwd->cmd_command)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retval == 0'
#389: FILE: drivers/char/watchdog/pcwd_usb.c:259:
+	if ((retval == 0) || (lsb == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lsb == 0'
#389: FILE: drivers/char/watchdog/pcwd_usb.c:259:
+	if ((retval == 0) || (lsb == 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: drivers/char/watchdog/pcwd_usb.c:260:
+		printk(KERN_ERR PFX "Card did not acknowledge enable attempt\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retval == 0'
#406: FILE: drivers/char/watchdog/pcwd_usb.c:276:
+	if ((retval == 0) || (lsb != 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lsb != 0'
#406: FILE: drivers/char/watchdog/pcwd_usb.c:276:
+	if ((retval == 0) || (lsb != 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#407: FILE: drivers/char/watchdog/pcwd_usb.c:277:
+		printk(KERN_ERR PFX "Card did not acknowledge disable attempt\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't < 0x0001'
#429: FILE: drivers/char/watchdog/pcwd_usb.c:299:
+	if ((t < 0x0001) || (t > 0xFFFF))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't > 0xFFFF'
#429: FILE: drivers/char/watchdog/pcwd_usb.c:299:
+	if ((t < 0x0001) || (t > 0xFFFF))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: drivers/char/watchdog/pcwd_usb.c:341:
+			 * five months ago... */

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: drivers/char/watchdog/pcwd_usb.c:347:
+				char c;
+				if(get_user(c, data+i))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#477: FILE: drivers/char/watchdog/pcwd_usb.c:347:
+				if(get_user(c, data+i))
 				                   ^

ERROR:SPACING: space required before the open parenthesis '('
#477: FILE: drivers/char/watchdog/pcwd_usb.c:347:
+				if(get_user(c, data+i))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#501: FILE: drivers/char/watchdog/pcwd_usb.c:371:
+	switch (cmd) {
+		case WDIOC_GETSUPPORT:
[...]
+		case WDIOC_GETSTATUS:
+		case WDIOC_GETBOOTSTATUS:
[...]
+		case WDIOC_GETTEMP:
[...]
+		case WDIOC_KEEPALIVE:
[...]
+		case WDIOC_SETOPTIONS:
[...]
+		case WDIOC_SETTIMEOUT:
[...]
+		case WDIOC_GETTIMEOUT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#503: FILE: drivers/char/watchdog/pcwd_usb.c:373:
+			return copy_to_user((struct watchdog_info *) arg, &ident,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: drivers/char/watchdog/pcwd_usb.c:374:
+				sizeof (ident)) ? -EFAULT : 0;

CHECK:SPACING: No space is necessary after a cast
#508: FILE: drivers/char/watchdog/pcwd_usb.c:378:
+			return put_user(0, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#517: FILE: drivers/char/watchdog/pcwd_usb.c:387:
+			return put_user(temperature, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#528: FILE: drivers/char/watchdog/pcwd_usb.c:398:
+			if (get_user (new_options, (int *) arg))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: drivers/char/watchdog/pcwd_usb.c:398:
+			if (get_user (new_options, (int *) arg))

CHECK:SPACING: No space is necessary after a cast
#548: FILE: drivers/char/watchdog/pcwd_usb.c:418:
+			if (get_user(new_heartbeat, (int *) arg))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#551: FILE: drivers/char/watchdog/pcwd_usb.c:421:
+			if (usb_pcwd_set_heartbeat(usb_pcwd_device, new_heartbeat))
+			    return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#552: FILE: drivers/char/watchdog/pcwd_usb.c:422:
+			    return -EINVAL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#586: FILE: drivers/char/watchdog/pcwd_usb.c:456:
+		printk(KERN_CRIT PFX "Unexpected close, not stopping watchdog!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/char/watchdog/pcwd_usb.c:469:
+static ssize_t usb_pcwd_temperature_read(struct file *file, char *data,
+				size_t len, loff_t *ppos)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#610: FILE: drivers/char/watchdog/pcwd_usb.c:480:
+	if (copy_to_user (data, &temperature, 1))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#632: FILE: drivers/char/watchdog/pcwd_usb.c:502:
+	if (code==SYS_DOWN || code==SYS_HALT) {
 	        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#632: FILE: drivers/char/watchdog/pcwd_usb.c:502:
+	if (code==SYS_DOWN || code==SYS_HALT) {
 	                          ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#644: FILE: drivers/char/watchdog/pcwd_usb.c:514:
+static struct file_operations usb_pcwd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#659: FILE: drivers/char/watchdog/pcwd_usb.c:529:
+static struct file_operations usb_pcwd_temperature_fops = {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: drivers/char/watchdog/pcwd_usb.c:550:
+static inline void usb_pcwd_delete (struct usb_pcwd_private *usb_pcwd)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "usb_pcwd->intr_urb"
#682: FILE: drivers/char/watchdog/pcwd_usb.c:552:
+	if (usb_pcwd->intr_urb != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#683: FILE: drivers/char/watchdog/pcwd_usb.c:553:
+		usb_free_urb (usb_pcwd->intr_urb);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "usb_pcwd->intr_buffer"
#684: FILE: drivers/char/watchdog/pcwd_usb.c:554:
+	if (usb_pcwd->intr_buffer != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#687: FILE: drivers/char/watchdog/pcwd_usb.c:557:
+	kfree (usb_pcwd);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'udev->descriptor.idVendor != USB_PCWD_VENDOR_ID'
#710: FILE: drivers/char/watchdog/pcwd_usb.c:580:
+	if ((udev->descriptor.idVendor != USB_PCWD_VENDOR_ID) ||
+	    (udev->descriptor.idProduct != USB_PCWD_PRODUCT_ID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'udev->descriptor.idProduct != USB_PCWD_PRODUCT_ID'
#710: FILE: drivers/char/watchdog/pcwd_usb.c:580:
+	if ((udev->descriptor.idVendor != USB_PCWD_VENDOR_ID) ||
+	    (udev->descriptor.idProduct != USB_PCWD_PRODUCT_ID)) {

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#710: FILE: drivers/char/watchdog/pcwd_usb.c:580:
+	if ((udev->descriptor.idVendor != USB_PCWD_VENDOR_ID) ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#711: FILE: drivers/char/watchdog/pcwd_usb.c:581:
+	    (udev->descriptor.idProduct != USB_PCWD_PRODUCT_ID)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#717: FILE: drivers/char/watchdog/pcwd_usb.c:587:
+		printk(KERN_ERR PFX "This driver only supports 1 device\n");

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#725: FILE: drivers/char/watchdog/pcwd_usb.c:595:
+	if (!(iface_desc->desc.bInterfaceClass == USB_CLASS_HID)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#726: FILE: drivers/char/watchdog/pcwd_usb.c:596:
+		printk(KERN_ERR PFX "The device isn't a Human Interface Device\n");

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#733: FILE: drivers/char/watchdog/pcwd_usb.c:603:
+	if (!((endpoint->bEndpointAddress & USB_DIR_IN) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: drivers/char/watchdog/pcwd_usb.c:604:
+	if (!((endpoint->bEndpointAddress & USB_DIR_IN) &&
+	     ((endpoint->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#734: FILE: drivers/char/watchdog/pcwd_usb.c:604:
+	     ((endpoint->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#737: FILE: drivers/char/watchdog/pcwd_usb.c:607:
+		printk(KERN_ERR PFX "Couldn't find an INTR & IN endpoint\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#746: FILE: drivers/char/watchdog/pcwd_usb.c:616:
+	usb_pcwd = kmalloc (sizeof(struct usb_pcwd_private), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*usb_pcwd)...) over kmalloc(sizeof(struct usb_pcwd_private)...)
#746: FILE: drivers/char/watchdog/pcwd_usb.c:616:
+	usb_pcwd = kmalloc (sizeof(struct usb_pcwd_private), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!usb_pcwd"
#747: FILE: drivers/char/watchdog/pcwd_usb.c:617:
+	if (usb_pcwd == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#748: FILE: drivers/char/watchdog/pcwd_usb.c:618:
+		printk(KERN_ERR PFX "Out of memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#748: FILE: drivers/char/watchdog/pcwd_usb.c:618:
+	if (usb_pcwd == NULL) {
+		printk(KERN_ERR PFX "Out of memory\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: drivers/char/watchdog/pcwd_usb.c:621:
+	memset (usb_pcwd, 0x00, sizeof (*usb_pcwd));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: drivers/char/watchdog/pcwd_usb.c:621:
+	memset (usb_pcwd, 0x00, sizeof (*usb_pcwd));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#755: FILE: drivers/char/watchdog/pcwd_usb.c:625:
+	init_MUTEX (&usb_pcwd->sem);

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#758: FILE: drivers/char/watchdog/pcwd_usb.c:628:
+	usb_pcwd->interface_number = iface_desc->desc.bInterfaceNumber;

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#759: FILE: drivers/char/watchdog/pcwd_usb.c:629:
+	usb_pcwd->intr_size = (endpoint->wMaxPacketSize > 8 ? endpoint->wMaxPacketSize : 8);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#762: FILE: drivers/char/watchdog/pcwd_usb.c:632:
+	if (!(usb_pcwd->intr_buffer = usb_buffer_alloc(udev, usb_pcwd->intr_size, SLAB_ATOMIC, &usb_pcwd->intr_dma))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#762: FILE: drivers/char/watchdog/pcwd_usb.c:632:
+	if (!(usb_pcwd->intr_buffer = usb_buffer_alloc(udev, usb_pcwd->intr_size, SLAB_ATOMIC, &usb_pcwd->intr_dma))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#763: FILE: drivers/char/watchdog/pcwd_usb.c:633:
+		printk(KERN_ERR PFX "Out of memory\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#770: FILE: drivers/char/watchdog/pcwd_usb.c:640:
+		printk(KERN_ERR PFX "Out of memory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/char/watchdog/pcwd_usb.c:646:
+	usb_fill_int_urb(usb_pcwd->intr_urb, udev, pipe,
+			usb_pcwd->intr_buffer, usb_pcwd->intr_size,

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#777: FILE: drivers/char/watchdog/pcwd_usb.c:647:
+			usb_pcwd_intr_done, usb_pcwd, endpoint->bInterval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#783: FILE: drivers/char/watchdog/pcwd_usb.c:653:
+		printk(KERN_ERR PFX "Problem registering interrupt URB\n");

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#795: FILE: drivers/char/watchdog/pcwd_usb.c:665:
+	got_fw_rev = usb_pcwd_send_command(usb_pcwd, CMD_GET_FIRMWARE_VERSION, &fw_rev_major, &fw_rev_minor);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#796: FILE: drivers/char/watchdog/pcwd_usb.c:666:
+	if (got_fw_rev) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#802: FILE: drivers/char/watchdog/pcwd_usb.c:672:
+	printk(KERN_INFO PFX "Found card (Firmware: %s) with temp option\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/char/watchdog/pcwd_usb.c:673:
+	printk(KERN_INFO PFX "Found card (Firmware: %s) with temp option\n",
+		fw_ver_str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#808: FILE: drivers/char/watchdog/pcwd_usb.c:678:
+	printk(KERN_INFO PFX "Option switches (0x%02x): Temperature Reset Enable=%s, Power On Delay=%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/char/watchdog/pcwd_usb.c:679:
+	printk(KERN_INFO PFX "Option switches (0x%02x): Temperature Reset Enable=%s, Power On Delay=%s\n",
+		option_switches,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#816: FILE: drivers/char/watchdog/pcwd_usb.c:686:
+		printk(KERN_INFO PFX "heartbeat value must be 0<heartbeat<65536, using %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: drivers/char/watchdog/pcwd_usb.c:687:
+		printk(KERN_INFO PFX "heartbeat value must be 0<heartbeat<65536, using %d\n",
+			heartbeat);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#825: FILE: drivers/char/watchdog/pcwd_usb.c:695:
+		printk(KERN_ERR PFX "cannot register reboot notifier (err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: drivers/char/watchdog/pcwd_usb.c:696:
+		printk(KERN_ERR PFX "cannot register reboot notifier (err=%d)\n",
+			retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#832: FILE: drivers/char/watchdog/pcwd_usb.c:702:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/char/watchdog/pcwd_usb.c:703:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",
+			WATCHDOG_MINOR, retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: drivers/char/watchdog/pcwd_usb.c:709:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: drivers/char/watchdog/pcwd_usb.c:710:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",
+			TEMP_MINOR, retval);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#845: FILE: drivers/char/watchdog/pcwd_usb.c:715:
+	usb_set_intfdata (interface, usb_pcwd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#847: FILE: drivers/char/watchdog/pcwd_usb.c:717:
+	printk(KERN_INFO PFX "initialized. heartbeat=%d sec (nowayout=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: drivers/char/watchdog/pcwd_usb.c:718:
+	printk(KERN_INFO PFX "initialized. heartbeat=%d sec (nowayout=%d)\n",
+		heartbeat, nowayout);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#857: FILE: drivers/char/watchdog/pcwd_usb.c:727:
+	usb_pcwd_delete (usb_pcwd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#862: FILE: drivers/char/watchdog/pcwd_usb.c:732:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#876: FILE: drivers/char/watchdog/pcwd_usb.c:746:
+	down (&disconnect_sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#878: FILE: drivers/char/watchdog/pcwd_usb.c:748:
+	usb_pcwd = usb_get_intfdata (interface);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#879: FILE: drivers/char/watchdog/pcwd_usb.c:749:
+	usb_set_intfdata (interface, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: drivers/char/watchdog/pcwd_usb.c:751:
+	down (&usb_pcwd->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#895: FILE: drivers/char/watchdog/pcwd_usb.c:765:
+	up (&usb_pcwd->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: drivers/char/watchdog/pcwd_usb.c:772:
+	up (&disconnect_sem);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#904: FILE: drivers/char/watchdog/pcwd_usb.c:774:
+	printk(KERN_INFO PFX "USB PC Watchdog disconnected\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#907: FILE: drivers/char/watchdog/pcwd_usb.c:777:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#919: FILE: drivers/char/watchdog/pcwd_usb.c:789:
+		printk(KERN_ERR PFX "usb_register failed. Error number %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: drivers/char/watchdog/pcwd_usb.c:790:
+		printk(KERN_ERR PFX "usb_register failed. Error number %d\n",
+		    result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#924: FILE: drivers/char/watchdog/pcwd_usb.c:794:
+	printk(KERN_INFO PFX DRIVER_DESC " " DRIVER_VERSION "\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#928: FILE: drivers/char/watchdog/pcwd_usb.c:798:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: drivers/char/watchdog/pcwd_usb.c:808:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#939: FILE: drivers/char/watchdog/pcwd_usb.c:809:
+module_init (usb_pcwd_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#940: FILE: drivers/char/watchdog/pcwd_usb.c:810:
+module_exit (usb_pcwd_exit);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1110: FILE: drivers/char/watchdog/Kconfig:344:
+config WATCHDOG_CP1XXX
+	tristate "CP1XXX Hardware Watchdog support"
+	depends on WATCHDOG && SPARC64 && PCI
+	---help---
+	  This is the driver for the hardware watchdog timers present on
+	  Sun Microsystems CompactPCI models CP1400 and CP1500.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called cpwatchdog.
+
+	  If you do not have a CompactPCI model CP1400 or CP1500, or
+	  another UltraSPARC-IIi-cEngine boardset with hardware watchdog,
+	  you should say N to this option.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1124: FILE: drivers/char/watchdog/Kconfig:358:
+config WATCHDOG_RIO
+	tristate "RIO Hardware Watchdog support"
+	depends on WATCHDOG && SPARC64 && PCI
+	help
+	  Say Y here to support the hardware watchdog capability on Sun RIO
+	  machines.  The watchdog timeout period is normally one minute but
+	  can be changed with a boot-time parameter.
+
 #
 # ISA-based Watchdog Cards

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000299570.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 77 warnings, 55 checks, 980 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000299570.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
