WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
diff -Naur linux-2.6.1/arch/i386/Kconfig linux-2.6.1-skas3/arch/i386/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: arch/i386/Kconfig:827:
+config PROC_MM
+	bool "proc/mm support"
+	---help---
+		/proc/mm is used by a User Mode Linux kernel to support SKAS 
+		mode. If you need this, you'll know it.
+
+endmenu
 
 menu "Power management options (ACPI, APM)"
 	depends on !X86_VOYAGER

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: arch/i386/Kconfig:830:
+^I^I/proc/mm is used by a User Mode Linux kernel to support SKAS $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: arch/i386/kernel/ldt.c:138:
+static int read_ldt(struct task_struct *task, void __user * ptr, unsigned long bytecount)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: arch/i386/kernel/ldt.c:142:
+	struct mm_struct * mm = task->mm;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#141: FILE: arch/i386/kernel/ldt.c:186:
+static int write_ldt(struct task_struct *task, void __user * ptr, unsigned long bytecount, int oldmode)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: arch/i386/kernel/ldt.c:186:
+static int write_ldt(struct task_struct *task, void __user * ptr, unsigned long bytecount, int oldmode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: arch/i386/kernel/ldt.c:188:
+	struct mm_struct * mm = task->mm;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#179: FILE: arch/i386/kernel/ldt.c:268:
+	return(modify_ldt(current, func, ptr, bytecount));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/i386/kernel/ptrace.c:232:
+extern int modify_ldt(struct task_struct *task, int func, void *ptr, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#192: FILE: arch/i386/kernel/ptrace.c:235:
+extern struct mm_struct *proc_mm_get_mm(int fd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/i386/kernel/ptrace.c:366:
+^I^Ifault = ((struct ptrace_faultinfo) $

CHECK:SPACING: No space is necessary after a cast
#204: FILE: arch/i386/kernel/ptrace.c:366:
+		fault = ((struct ptrace_faultinfo) 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/ptrace.c:369:
+^I^Iret = copy_to_user((unsigned long *) data, &fault, $

CHECK:SPACING: No space is necessary after a cast
#207: FILE: arch/i386/kernel/ptrace.c:369:
+		ret = copy_to_user((unsigned long *) data, &fault, 

ERROR:SPACING: space required before the open parenthesis '('
#209: FILE: arch/i386/kernel/ptrace.c:371:
+		if(ret)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: arch/i386/kernel/ptrace.c:376:
+^I^Iret = copy_to_user((unsigned long *) data, $

CHECK:SPACING: No space is necessary after a cast
#214: FILE: arch/i386/kernel/ptrace.c:376:
+		ret = copy_to_user((unsigned long *) data, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: arch/i386/kernel/ptrace.c:384:
+^I^Iif(copy_from_user(&ldt, (unsigned long *) data, $

CHECK:SPACING: No space is necessary after a cast
#222: FILE: arch/i386/kernel/ptrace.c:384:
+		if(copy_from_user(&ldt, (unsigned long *) data, 

ERROR:SPACING: space required before the open parenthesis '('
#222: FILE: arch/i386/kernel/ptrace.c:384:
+		if(copy_from_user(&ldt, (unsigned long *) data, 

ERROR:SPACING: space required before the open brace '{'
#223: FILE: arch/i386/kernel/ptrace.c:385:
+				  sizeof(ldt))){

ERROR:SPACING: space required before the open brace '{'
#235: FILE: arch/i386/kernel/ptrace.c:397:
+		if(IS_ERR(new)){

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: arch/i386/kernel/ptrace.c:397:
+		if(IS_ERR(new)){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#244: FILE: arch/i386/kernel/ptrace.c:406:
+		ret=0;
 		   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: arch/i386/kernel/sys_i386.c:44:
+long do_mmap2(struct mm_struct *mm,
 	unsigned long addr, unsigned long len,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: include/asm-i386/ptrace.h:44:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: include/asm-i386/ptrace.h:52:
+  ^Ivoid *ptr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: include/asm-i386/ptrace.h:52:
+  ^Ivoid *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: include/asm-i386/ptrace.h:52:
+  ^Ivoid *ptr;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: include/linux/mm.h:448:
+extern long do_mprotect(struct mm_struct *mm, unsigned long start, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/mm.h:448:
+extern long do_mprotect(struct mm_struct *mm, unsigned long start, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: include/linux/mm.h:525:
+extern unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file *file,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: include/linux/mm.h:526:
+^I^I^I^I   unsigned long addr, ^Iunsigned long len,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: include/linux/mm.h:527:
+^I^I^I^I   unsigned long prot, ^Iunsigned long flag,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: include/linux/proc_mm.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#372: FILE: include/linux/proc_mm.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: include/linux/proc_mm.h:25:
+^Iunsigned long len;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: include/linux/proc_mm.h:31:
+        unsigned int prot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: include/linux/proc_mm.h:31:
+        unsigned int prot;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: include/linux/proc_mm.h:39:
+^I        struct mm_mprotect mprotect;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#435: FILE: mm/mmap.c:465:
+unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file * file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: mm/mprotect.c:226:
+do_mprotect(struct mm_struct *mm, unsigned long start, size_t len,
+	     unsigned long prot)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#482: FILE: mm/mprotect.c:336:
+	return(do_mprotect(current->mm, start, len, prot));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: mm/proc_mm.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#488: FILE: mm/proc_mm.c:1:
+/* 

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#497: FILE: mm/proc_mm.c:10:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#498: FILE: mm/proc_mm.c:11:
+#include <asm/mmu_context.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#500: FILE: mm/proc_mm.c:13:
+static struct file_operations proc_mm_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required before the open parenthesis '('
#512: FILE: mm/proc_mm.c:25:
+	if(file->f_op != &proc_mm_fops)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: mm/proc_mm.c:36:
+extern long do_mmap2(struct mm_struct *mm, unsigned long addr, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#523: FILE: mm/proc_mm.c:36:
+extern long do_mmap2(struct mm_struct *mm, unsigned long addr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: mm/proc_mm.c:37:
+^I^I     unsigned long len, unsigned long prot, $

ERROR:SPACING: space required before the open parenthesis '('
#535: FILE: mm/proc_mm.c:48:
+	if(count > sizeof(req))

ERROR:SPACING: space required before the open parenthesis '('
#539: FILE: mm/proc_mm.c:52:
+	if(n != 0)

ERROR:SPACING: space required before the open brace '{'
#543: FILE: mm/proc_mm.c:56:
+	switch(req.op){

ERROR:SPACING: space required before the open parenthesis '('
#543: FILE: mm/proc_mm.c:56:
+	switch(req.op){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: mm/proc_mm.c:60:
+^I^Iret = do_mmap2(mm, map->addr, map->len, map->prot, $

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: mm/proc_mm.c:62:
+		if((ret & ~PAGE_MASK) == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: mm/proc_mm.c:64:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#561: FILE: mm/proc_mm.c:74:
+		if(ret == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: mm/proc_mm.c:81:
+^I^Iret = do_mprotect(mm, protect->addr, protect->len, $

ERROR:SPACING: space required before the open parenthesis '('
#570: FILE: mm/proc_mm.c:83:
+		if(ret == 0)

ERROR:SPACING: space required before the open brace '{'
#578: FILE: mm/proc_mm.c:91:
+		if(IS_ERR(from)){

ERROR:SPACING: space required before the open parenthesis '('
#578: FILE: mm/proc_mm.c:91:
+		if(IS_ERR(from)){

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: mm/proc_mm.c:114:
+	if(mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#601: FILE: mm/proc_mm.c:114:
+	if(mm == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: mm/proc_mm.c:118:
+	if(ret)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#615: FILE: mm/proc_mm.c:128:
+	return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#628: FILE: mm/proc_mm.c:141:
+	return(0);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#631: FILE: mm/proc_mm.c:144:
+static struct file_operations proc_mm_fops = {

ERROR:SPACING: space required before the open brace '{'
#642: FILE: mm/proc_mm.c:155:
+	if(ent == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#642: FILE: mm/proc_mm.c:155:
+	if(ent == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#642: FILE: mm/proc_mm.c:155:
+	if(ent == NULL){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#643: FILE: mm/proc_mm.c:156:
+		printk("make_proc_mm : Failed to register /proc/mm\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_proc_mm', this function's name, in a string
#643: FILE: mm/proc_mm.c:156:
+		printk("make_proc_mm : Failed to register /proc/mm\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#644: FILE: mm/proc_mm.c:157:
+		return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#648: FILE: mm/proc_mm.c:161:
+	return(0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#651: FILE: mm/proc_mm.c:164:
+__initcall(make_proc_mm);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 19 warnings, 11 checks, 524 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
