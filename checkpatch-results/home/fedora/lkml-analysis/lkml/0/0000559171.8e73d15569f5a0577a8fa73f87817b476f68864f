WARNING:TYPO_SPELLING: 'Fundemental' may be misspelled - perhaps 'Fundamental'?
#40: 
Fundemental problem is parisc only supports one atomic operation
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
diff -ruNp linux/include/asm-i386/atomic.h linux.patch/include/asm-i386/atomic.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#69: FILE: include/asm-i386/atomic.h:115:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: include/asm-i386/atomic.h:117:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: include/asm-i386/atomic.h:117:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: include/asm-i386/atomic.h:117:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#71: FILE: include/asm-i386/atomic.h:117:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/asm-i386/atomic.h:119:
+#define tas(ptr) (xchg((ptr),1))
                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#78: FILE: include/asm-i386/atomic.h:124:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: include/asm-i386/atomic.h:134:
+extern inline void __set_64bit (unsigned long long * ptr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: include/asm-i386/atomic.h:134:
+extern inline void __set_64bit (unsigned long long * ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/asm-i386/atomic.h:135:
+extern inline void __set_64bit (unsigned long long * ptr,
+		unsigned int low, unsigned int high)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#91: FILE: include/asm-i386/atomic.h:137:
+__asm__ __volatile__ (

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: include/asm-i386/atomic.h:146:
+			"ax","dx","memory");
 			    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: include/asm-i386/atomic.h:146:
+			"ax","dx","memory");
 			         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: include/asm-i386/atomic.h:149:
+extern void inline __set_64bit_constant (unsigned long long *ptr,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#103: FILE: include/asm-i386/atomic.h:149:
+extern void inline __set_64bit_constant (unsigned long long *ptr,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/asm-i386/atomic.h:149:
+extern void inline __set_64bit_constant (unsigned long long *ptr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/asm-i386/atomic.h:150:
+extern void inline __set_64bit_constant (unsigned long long *ptr,
+						 unsigned long long value)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: include/asm-i386/atomic.h:152:
+	__set_64bit(ptr,(unsigned int)(value), (unsigned int)((value)>>32ULL));
 	               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#106: FILE: include/asm-i386/atomic.h:152:
+	__set_64bit(ptr,(unsigned int)(value), (unsigned int)((value)>>32ULL));
 	                                                             ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#108: FILE: include/asm-i386/atomic.h:154:
+}
+#define ll_low(x)	*(((unsigned int*)&(x))+0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#108: FILE: include/asm-i386/atomic.h:154:
+#define ll_low(x)	*(((unsigned int*)&(x))+0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#108: FILE: include/asm-i386/atomic.h:154:
+#define ll_low(x)	*(((unsigned int*)&(x))+0)
                  	                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#108: FILE: include/asm-i386/atomic.h:154:
+#define ll_low(x)	*(((unsigned int*)&(x))+0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#109: FILE: include/asm-i386/atomic.h:155:
+#define ll_high(x)	*(((unsigned int*)&(x))+1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: include/asm-i386/atomic.h:155:
+#define ll_high(x)	*(((unsigned int*)&(x))+1)
                   	                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#109: FILE: include/asm-i386/atomic.h:155:
+#define ll_high(x)	*(((unsigned int*)&(x))+1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#111: FILE: include/asm-i386/atomic.h:157:
+extern void inline __set_64bit_var (unsigned long long *ptr,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#111: FILE: include/asm-i386/atomic.h:157:
+extern void inline __set_64bit_var (unsigned long long *ptr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/asm-i386/atomic.h:157:
+extern void inline __set_64bit_var (unsigned long long *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: include/asm-i386/atomic.h:158:
+extern void inline __set_64bit_var (unsigned long long *ptr,
+			 unsigned long long value)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: include/asm-i386/atomic.h:160:
+	__set_64bit(ptr,ll_low(value), ll_high(value));
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: include/asm-i386/atomic.h:163:
+#define set_64bit(ptr,value) \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#117: FILE: include/asm-i386/atomic.h:163:
+#define set_64bit(ptr,value) \
+(__builtin_constant_p(value) ? \
+ __set_64bit_constant(ptr, value) : \
+ __set_64bit_var(ptr, value) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#117: FILE: include/asm-i386/atomic.h:163:
+#define set_64bit(ptr,value) \
+(__builtin_constant_p(value) ? \
+ __set_64bit_constant(ptr, value) : \
+ __set_64bit_var(ptr, value) )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/asm-i386/atomic.h:165:
+ __set_64bit_constant(ptr, value) : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/asm-i386/atomic.h:166:
+ __set_64bit_var(ptr, value) )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#120: FILE: include/asm-i386/atomic.h:166:
+ __set_64bit_var(ptr, value) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-i386/atomic.h:168:
+#define _set_64bit(ptr,value) \
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#122: FILE: include/asm-i386/atomic.h:168:
+#define _set_64bit(ptr,value) \
+(__builtin_constant_p(value) ? \
+ __set_64bit(ptr, (unsigned int)(value), (unsigned int)((value)>>32ULL) ) : \
+ __set_64bit(ptr, ll_low(value), ll_high(value)) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#122: FILE: include/asm-i386/atomic.h:168:
+#define _set_64bit(ptr,value) \
+(__builtin_constant_p(value) ? \
+ __set_64bit(ptr, (unsigned int)(value), (unsigned int)((value)>>32ULL) ) : \
+ __set_64bit(ptr, ll_low(value), ll_high(value)) )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/asm-i386/atomic.h:170:
+ __set_64bit(ptr, (unsigned int)(value), (unsigned int)((value)>>32ULL) ) : \$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#124: FILE: include/asm-i386/atomic.h:170:
+ __set_64bit(ptr, (unsigned int)(value), (unsigned int)((value)>>32ULL) ) : \
                                                                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#124: FILE: include/asm-i386/atomic.h:170:
+ __set_64bit(ptr, (unsigned int)(value), (unsigned int)((value)>>32ULL) ) : \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: include/asm-i386/atomic.h:171:
+ __set_64bit(ptr, ll_low(value), ll_high(value)) )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#125: FILE: include/asm-i386/atomic.h:171:
+ __set_64bit(ptr, ll_low(value), ll_high(value)) )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: include/asm-i386/atomic.h:178:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#132: FILE: include/asm-i386/atomic.h:178:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#134: FILE: include/asm-i386/atomic.h:180:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#137: FILE: include/asm-i386/atomic.h:183:
+				:"=q" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#138: FILE: include/asm-i386/atomic.h:184:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#139: FILE: include/asm-i386/atomic.h:185:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#143: FILE: include/asm-i386/atomic.h:189:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#144: FILE: include/asm-i386/atomic.h:190:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#145: FILE: include/asm-i386/atomic.h:191:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#149: FILE: include/asm-i386/atomic.h:195:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#150: FILE: include/asm-i386/atomic.h:196:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#151: FILE: include/asm-i386/atomic.h:197:
+				:"memory");
 				^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#166: FILE: include/asm-i386/atomic.h:212:
+static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: include/asm-i386/atomic.h:216:
+	unsigned long prev;
+	switch (size) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/asm-i386/atomic.h:239:
+#define cmpxchg(ptr,o,n)\
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/asm-i386/atomic.h:239:
+#define cmpxchg(ptr,o,n)\
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#193: FILE: include/asm-i386/atomic.h:239:
+#define cmpxchg(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: include/asm-i386/atomic.h:240:
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/asm-i386/atomic.h:241:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: include/asm-i386/atomic.h:242:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: include/asm-i386/atomic.h:242:
+    $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 13 warnings, 19 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559171.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
