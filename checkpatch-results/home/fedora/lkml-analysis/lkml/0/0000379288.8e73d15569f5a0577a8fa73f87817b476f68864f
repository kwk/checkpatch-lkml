WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: kernel/printk.c:684:
+       call_console_drivers(log_end - logged_chars, log_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: kernel/printk.c:688:
+       .handler        = show_msg_info,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: kernel/printk.c:689:
+       .help_msg       = "Dumpmsgs",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: kernel/printk.c:690:
+       .action_msg     = "Kernel Messages",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: kernel/printk.c:695:
+       register_sysrq_key('d', &msg_info_op);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: kernel/printk.c:696:
+       return 0;$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#76: FILE: kernel/printk.c:699:
+__initcall(dbg_init);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/linux/timer.h:11:
+       unsigned long magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: mm/slab.c:805:
+       int size = cachep->objsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mm/slab.c:806:
+       void *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: mm/slab.c:808:
+       if (cachep->flags & SLAB_RED_ZONE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#117: FILE: mm/slab.c:808:
+       if (cachep->flags & SLAB_RED_ZONE) {
+               addr += BYTES_PER_WORD;

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: mm/slab.c:809:
+               addr += BYTES_PER_WORD;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: mm/slab.c:809:
+               addr += BYTES_PER_WORD;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: mm/slab.c:810:
+               size -= 2*BYTES_PER_WORD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: mm/slab.c:810:
+               size -= 2*BYTES_PER_WORD;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: mm/slab.c:810:
+               size -= 2*BYTES_PER_WORD;
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: mm/slab.c:811:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: mm/slab.c:812:
+       if (cachep->flags & SLAB_STORE_USER) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#121: FILE: mm/slab.c:812:
+       if (cachep->flags & SLAB_STORE_USER) {
+               size -= BYTES_PER_WORD;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#121: FILE: mm/slab.c:812:
+       if (cachep->flags & SLAB_STORE_USER) {
+               size -= BYTES_PER_WORD;
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: mm/slab.c:813:
+               size -= BYTES_PER_WORD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: mm/slab.c:813:
+               size -= BYTES_PER_WORD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: mm/slab.c:814:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: mm/slab.c:816:
+       for (p = addr; p < addr + size; p += sizeof(unsigned long)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#125: FILE: mm/slab.c:816:
+       for (p = addr; p < addr + size; p += sizeof(unsigned long)) {
+               unsigned long *laddr = p;

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: mm/slab.c:817:
+               unsigned long *laddr = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: mm/slab.c:817:
+               unsigned long *laddr = p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: mm/slab.c:819:
+               if (*laddr == TIMER_MAGIC) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: mm/slab.c:819:
+               if (*laddr == TIMER_MAGIC) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#128: FILE: mm/slab.c:819:
+               if (*laddr == TIMER_MAGIC) {
+                       struct timer_list *timer;

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: mm/slab.c:820:
+                       struct timer_list *timer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: mm/slab.c:820:
+                       struct timer_list *timer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: mm/slab.c:822:
+                       timer = (struct timer_list *)laddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: mm/slab.c:822:
+                       timer = (struct timer_list *)laddr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: mm/slab.c:823:
+                       if (timer_pending(timer)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: mm/slab.c:823:
+                       if (timer_pending(timer)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#132: FILE: mm/slab.c:823:
+                       if (timer_pending(timer)) {
+                               printk("free of pending timer at %p\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: mm/slab.c:824:
+                               printk("free of pending timer at %p\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: mm/slab.c:824:
+                               printk("free of pending timer at %p\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: mm/slab.c:824:
+                               printk("free of pending timer at %p\n",

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#134: FILE: mm/slab.c:824:
timer);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: mm/slab.c:825:
+                               printk("function=%p\n", timer->function);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: mm/slab.c:825:
+                               printk("free of pending timer at %p\n",
+                               printk("function=%p\n", timer->function);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: mm/slab.c:825:
+                               printk("function=%p\n", timer->function);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: mm/slab.c:825:
+                               printk("function=%p\n", timer->function);

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: mm/slab.c:826:
+                               dump_stack();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: mm/slab.c:826:
+                               dump_stack();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: mm/slab.c:827:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: mm/slab.c:827:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: mm/slab.c:828:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: mm/slab.c:828:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: mm/slab.c:829:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: mm/slab.c:1635:
+       timer_hunt(cachep, objp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/open.c:799:
+       int a;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/open.c:800:
+       struct timer_list t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/open.c:802:
+       int b;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: fs/open.c:807:
+       printk("the handler\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: fs/open.c:807:
+       printk("the handler\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/open.c:812:
+       static int did_it;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/open.c:813:
+       struct foo_thing *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/open.c:815:
+       if (did_it)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#179: FILE: fs/open.c:815:
+       if (did_it)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/open.c:816:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/open.c:816:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/open.c:817:
+       did_it = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/open.c:819:
+       f = kmalloc(sizeof(*f), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/open.c:820:
+       init_timer(&f->t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: fs/open.c:821:
+       f->t.expires = jiffies + HZ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/open.c:822:
+       f->t.function = my_foo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/open.c:823:
+       add_timer(&f->t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/open.c:824:
+       kfree(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/open.c:832:
+       if (current->uid == 9999)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#196: FILE: fs/open.c:832:
+       if (current->uid == 9999)
+               timer_thing();

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/open.c:833:
+               timer_thing();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/open.c:833:
+               timer_thing();$

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Shawn Starr'
#1487: 
To: Shawn Starr

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'spstarr@sh0n.net; roland@topspin.com; rml@tech9.net;', should be: 'spstarr@sh0n.net; (roland@topspin.com; rml@tech9.net;)'
#1488: 
Cc: spstarr@sh0n.net; roland@topspin.com; rml@tech9.net;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000379288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 59 warnings, 2 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000379288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
