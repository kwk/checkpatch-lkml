WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -urpN -X /export/src/patches/dontdiff -X /export/src/patches/dontdiff2 2.6.11-pfm/Documentation/artis.txt 2.6.11-artis-cvs/Documentation/artis.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: Documentation/artis.txt:34:
+ % patch -p1 < ../the-name-of-the.patch $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: Documentation/artis.txt:91:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: Documentation/artis.txt:203:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: Documentation/artis.txt:208:
+   $

WARNING:TYPO_SPELLING: 'guaranted' may be misspelled - perhaps 'guaranteed'?
#277: FILE: Documentation/artis.txt:227:
+(otherwise, the affinity cannot be guaranted).
                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'repect' may be misspelled - perhaps 'respect'?
#284: FILE: Documentation/artis.txt:234:
+executed in the same time and always repect their deadlines.
                                      ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#314: FILE: fs/proc/artis.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#317: FILE: fs/proc/artis.c:4:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: fs/proc/artis.c:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: fs/proc/artis.c:11:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/proc/artis.c:12:
+ * tools functions $

WARNING:TYPO_SPELLING: 'rouding' may be misspelled - perhaps 'rounding'?
#328: FILE: fs/proc/artis.c:15:
+#define INT_10_SIZE (sizeof(int)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                                    ^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#328: FILE: fs/proc/artis.c:15:
+#define INT_10_SIZE (sizeof(int)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#328: FILE: fs/proc/artis.c:15:
+#define INT_10_SIZE (sizeof(int)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#328: FILE: fs/proc/artis.c:15:
+#define INT_10_SIZE (sizeof(int)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                     ^

WARNING:TYPO_SPELLING: 'rouding' may be misspelled - perhaps 'rounding'?
#329: FILE: fs/proc/artis.c:16:
+#define LONG_10_SIZE (sizeof(long)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                                      ^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#329: FILE: fs/proc/artis.c:16:
+#define LONG_10_SIZE (sizeof(long)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#329: FILE: fs/proc/artis.c:16:
+#define LONG_10_SIZE (sizeof(long)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#329: FILE: fs/proc/artis.c:16:
+#define LONG_10_SIZE (sizeof(long)*8/3+2/* 1 for the rouding and 1 for the sign */)
                                       ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#331: FILE: fs/proc/artis.c:18:
+int
+artis_copy_from_user_ltrim(const char *ubuf, int ulen, char *kbuf, int klen) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: fs/proc/artis.c:21:
+	int kl = 0, ul = 0;
+	kbuf[0] = '\0';

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: fs/proc/artis.c:22:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: fs/proc/artis.c:25:
+		int l, i;
+		if (ulen-ul > klen-kl)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#338: FILE: fs/proc/artis.c:25:
+		if (ulen-ul > klen-kl)
 		        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#338: FILE: fs/proc/artis.c:25:
+		if (ulen-ul > klen-kl)
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#339: FILE: fs/proc/artis.c:26:
+			l = klen-kl;
 			        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#341: FILE: fs/proc/artis.c:28:
+			l = ulen-ul;
 			        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#342: FILE: fs/proc/artis.c:29:
+		copy_from_user(kbuf+kl, ubuf+ul, l);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#342: FILE: fs/proc/artis.c:29:
+		copy_from_user(kbuf+kl, ubuf+ul, l);
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: fs/proc/artis.c:37:
+			int j;
+			for (j = i; (kbuf[j-i] = kbuf[j]); j++)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#350: FILE: fs/proc/artis.c:37:
+			for (j = i; (kbuf[j-i] = kbuf[j]); j++)
 			                   ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#360: FILE: fs/proc/artis.c:47:
+static struct proc_dir_entry *proc_artis = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: fs/proc/artis.c:53:
+int $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#366: FILE: fs/proc/artis.c:53:
+int 
+artis_proc_read_active(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#367: FILE: fs/proc/artis.c:54:
+artis_proc_read_active(char* page, char** start, off_t off, int count, int* eof, void* data) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#367: FILE: fs/proc/artis.c:54:
+artis_proc_read_active(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#367: FILE: fs/proc/artis.c:54:
+artis_proc_read_active(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#367: FILE: fs/proc/artis.c:54:
+artis_proc_read_active(char* page, char** start, off_t off, int count, int* eof, void* data) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#372: FILE: fs/proc/artis.c:59:
+		r = 1+atomic_read(&(artis_info.size));
 		     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around artis_info.size
#372: FILE: fs/proc/artis.c:59:
+		r = 1+atomic_read(&(artis_info.size));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around artis_info.size
#374: FILE: fs/proc/artis.c:61:
+		r = -atomic_read(&(artis_info.size));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#375: FILE: fs/proc/artis.c:62:
+	len = snprintf(page+off, count, "%d\n", r);
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: fs/proc/artis.c:68:
+int $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#381: FILE: fs/proc/artis.c:68:
+int 
+artis_proc_write_active(struct file *file, const char *buffer, unsigned long count, void *data) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: fs/proc/artis.c:71:
+#define MAXBUF INT_10_SIZE+100
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#384: FILE: fs/proc/artis.c:71:
+#define MAXBUF INT_10_SIZE+100

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: fs/proc/artis.c:72:
+	char kbuf[MAXBUF+1];
 	                ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#390: FILE: fs/proc/artis.c:77:
+	val = simple_strtol(kbuf, &endp, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: fs/proc/artis.c:89:
+int $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#402: FILE: fs/proc/artis.c:89:
+int 
+artis_proc_read_maskrt(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#403: FILE: fs/proc/artis.c:90:
+artis_proc_read_maskrt(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#403: FILE: fs/proc/artis.c:90:
+artis_proc_read_maskrt(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#403: FILE: fs/proc/artis.c:90:
+artis_proc_read_maskrt(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#403: FILE: fs/proc/artis.c:90:
+artis_proc_read_maskrt(char* page, char** start, off_t off, int count, int* eof, void* data) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: fs/proc/artis.c:94:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: fs/proc/artis.c:96:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: fs/proc/artis.c:108:
+int $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#421: FILE: fs/proc/artis.c:108:
+int 
+artis_proc_write_maskrt(struct file *file, const char *buffer, unsigned long count, void *data) {

WARNING:SPACING: space prohibited before semicolon
#429: FILE: fs/proc/artis.c:116:
+		goto ret ;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#440: FILE: fs/proc/artis.c:127:
+	 * occur frequently, so wo cares ? (not me obviously) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#444: FILE: fs/proc/artis.c:131:
+	if (artis_reinit(mask)<0)
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: fs/proc/artis.c:139:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#454: FILE: fs/proc/artis.c:141:
+int
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: fs/proc/artis.c:142:
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#455: FILE: fs/proc/artis.c:142:
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { 

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#455: FILE: fs/proc/artis.c:142:
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { 

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#455: FILE: fs/proc/artis.c:142:
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { 

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#455: FILE: fs/proc/artis.c:142:
+artis_proc_read_cpustat(char* page, char** start, off_t off, int count, int* eof, void* data) { 

ERROR:SPACING: space required before the open parenthesis '('
#461: FILE: fs/proc/artis.c:148:
+	for(i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#461: FILE: fs/proc/artis.c:148:
+	for(i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#463: FILE: fs/proc/artis.c:150:
+		len += snprintf(page+off+len, count-len,
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#463: FILE: fs/proc/artis.c:150:
+		len += snprintf(page+off+len, count-len,
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#463: FILE: fs/proc/artis.c:150:
+		len += snprintf(page+off+len, count-len,
 		                                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#485: FILE: fs/proc/artis.c:172:
+int
+artis_proc_init(void) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#491: FILE: fs/proc/artis.c:178:
+	if (!(proc_artis = proc_mkdir("artis", NULL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#492: FILE: fs/proc/artis.c:179:
+		printk("ARTIS error: create /proc/artis\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#495: FILE: fs/proc/artis.c:182:
+	if (!(proc_active = create_proc_entry("active", 0644, proc_artis))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: fs/proc/artis.c:183:
+		printk("ARTIS error: create /proc/artis/active\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#501: FILE: fs/proc/artis.c:188:
+	if (!(proc_maskrt = create_proc_entry("maskrt", 0644, proc_artis))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: fs/proc/artis.c:189:
+		printk("ARTIS error: create /proc/artis/mask\n");

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#508: FILE: fs/proc/artis.c:195:
+	if (!(proc_cpustat = create_proc_read_entry("cpustat", 0444, proc_artis, artis_proc_read_cpustat, NULL))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#508: FILE: fs/proc/artis.c:195:
+	if (!(proc_cpustat = create_proc_read_entry("cpustat", 0444, proc_artis, artis_proc_read_cpustat, NULL))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: fs/proc/artis.c:196:
+		printk("ARTIS error: create /proc/artis/cupstat\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#528: FILE: fs/proc/artis.c:215:
+int
+artis_proc_reset(void) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: fs/proc/artis.c:228:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/proc/artis.c:239:
+^Ilen = sprintf(buffer, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: fs/proc/artis.c:240:
+	len = sprintf(buffer, 
+			"%lu %lx %lu",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: fs/proc/artis.c:241:
+^I^I^Iartis_task->nb_migration, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#558: FILE: fs/proc/artis.c:245:
+	len += sprintf(buffer+len, " %llu %llu",
 	                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: fs/proc/artis.c:246:
+^I^I        artis_task->last_attempt,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: fs/proc/artis.c:247:
+^I^I        artis_task->attempt_period);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#561: FILE: fs/proc/artis.c:248:
+	len += sprintf(buffer+len, "\n");
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#604: FILE: fs/proc/base.c:159:
+	E(PROC_TGID_ARTIS,     "artis",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#604: FILE: fs/proc/base.c:159:
+	E(PROC_TGID_ARTIS,     "artis",   S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#614: FILE: fs/proc/base.c:192:
+	E(PROC_TID_ARTIS,     "artis",   S_IFREG|S_IRUGO),
 	                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#614: FILE: fs/proc/base.c:192:
+	E(PROC_TID_ARTIS,     "artis",   S_IFREG|S_IRUGO),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#649: FILE: include/linux/artis.h:1:
+/*

WARNING:TYPO_SPELLING: 'appened' may be misspelled - perhaps 'append'?
#677: FILE: include/linux/artis.h:29:
+ * very last task appened in the migration queue will be the first pulled
                   ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#681: FILE: include/linux/artis.h:33:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#683: FILE: include/linux/artis.h:35:
+typedef struct artis_fifo_node {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: include/linux/artis.h:36:
+  struct task_struct *task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: include/linux/artis.h:37:
+  struct artis_fifo_node *next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: include/linux/artis.h:41:
+        .task = NULL,        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: include/linux/artis.h:41:
+        .task = NULL,        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: include/linux/artis.h:42:
+        .next = NULL,        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: include/linux/artis.h:42:
+        .next = NULL,        \$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#692: FILE: include/linux/artis.h:44:
+}
+#define SET_ARTIS_FIFO_NODE_INIT(v) v = ARTIS_FIFO_NODE_INIT,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#692: FILE: include/linux/artis.h:44:
+#define SET_ARTIS_FIFO_NODE_INIT(v) v = ARTIS_FIFO_NODE_INIT,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#702: FILE: include/linux/artis.h:54:
+typedef struct artis_stack {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#710: FILE: include/linux/artis.h:62:
+}
+#define SET_ARTIS_STACK_INIT(v) v = ARTIS_STACK_INIT,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#710: FILE: include/linux/artis.h:62:
+#define SET_ARTIS_STACK_INIT(v) v = ARTIS_STACK_INIT,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#713: FILE: include/linux/artis.h:65:
+typedef struct artis_local_task_status {

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: include/linux/artis.h:70:
+        /* some timings of code of migration:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: include/linux/artis.h:71:
+         * _ migration_delta[0]: artis_request_for_migration() call$

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: include/linux/artis.h:72:
+         * _ migration_delta[1]: before the schedule() that will initiate the migration$

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: include/linux/artis.h:73:
+         * _ migration_delta[2]: artis_complete_migration() call$

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: include/linux/artis.h:74:
+         * _ migration_delta[3]: before the schedule() on the NRT CPU$

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: include/linux/artis.h:75:
+         */$

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#728: FILE: include/linux/artis.h:80:
+	struct task_struct *complete_by; /* task that is doing the complete (not the completed task) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: include/linux/artis.h:83:
+} artis_local_task_status_t; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#735: FILE: include/linux/artis.h:87:
+	.migration_delta = {0,0,0,0},	\
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#735: FILE: include/linux/artis.h:87:
+	.migration_delta = {0,0,0,0},	\
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#735: FILE: include/linux/artis.h:87:
+	.migration_delta = {0,0,0,0},	\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: include/linux/artis.h:95:
+	.migration_delta = {0,0,0,0},	\
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: include/linux/artis.h:95:
+	.migration_delta = {0,0,0,0},	\
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: include/linux/artis.h:95:
+	.migration_delta = {0,0,0,0},	\
 	                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#758: FILE: include/linux/artis.h:110:
+#define SET_ARTIS_LOCAL_TASK_STATUS_INIT(v) v = ARTIS_LOCAL_TASK_STATUS_INIT,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#761: FILE: include/linux/artis.h:113:
+typedef struct artis_task_status

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#762: FILE: include/linux/artis.h:114:
+typedef struct artis_task_status
+{

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#768: FILE: include/linux/artis.h:120:
+	unsigned long long attempt_period;	/* time ponderated average period between attempt to migrate */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#773: FILE: include/linux/artis.h:125:
+	artis_stack_t complete;		/* info on the task doing the complete (not the completed task) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: include/linux/artis.h:134:
+        .fifo_node = NULL,              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: include/linux/artis.h:134:
+        .fifo_node = NULL,              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: include/linux/artis.h:138:
+      ARTIS_STACK_INIT,^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#801: FILE: include/linux/artis.h:153:
+#define SET_ARTIS_TASK_STATUS_INIT(v) v = ARTIS_TASK_STATUS_INIT,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: include/linux/artis.h:155:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: include/linux/artis.h:157:
+ * There will be one between each RT and NRT processors, or if $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#808: FILE: include/linux/artis.h:160:
+typedef struct artis_migration_queue

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#809: FILE: include/linux/artis.h:161:
+typedef struct artis_migration_queue
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#814: FILE: include/linux/artis.h:166:
+#define ARTIS_MIGRATION_QUEUE_INIT { ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#815: FILE: include/linux/artis.h:167:
+^I.size = ATOMIC_INIT(0),^I^I       ^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#819: FILE: include/linux/artis.h:171:
+}
+#define SET_ARTIS_MIGRATION_QUEUE_INIT(v) v = ARTIS_MIGRATION_QUEUE_INIT,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#819: FILE: include/linux/artis.h:171:
+#define SET_ARTIS_MIGRATION_QUEUE_INIT(v) v = ARTIS_MIGRATION_QUEUE_INIT,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#821: FILE: include/linux/artis.h:173:
+typedef struct artis_per_cpu_info

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#822: FILE: include/linux/artis.h:174:
+typedef struct artis_per_cpu_info
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: include/linux/artis.h:180:
+^I/* Biggest timings on this CPU: $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#830: FILE: include/linux/artis.h:182:
+^I * ^Iand schedule()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#832: FILE: include/linux/artis.h:184:
+^I * ^Iartis_complete_migration()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#834: FILE: include/linux/artis.h:186:
+^I * ^Ischedule()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#842: FILE: include/linux/artis.h:194:
+^I.queues = NULL, ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: include/linux/artis.h:198:
+	.migration_delta = {0,0,0},	\
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: include/linux/artis.h:198:
+	.migration_delta = {0,0,0},	\
 	                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#851: FILE: include/linux/artis.h:203:
+^I.queues = NULL, ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#855: FILE: include/linux/artis.h:207:
+	.migration_delta = {0,0,0},	\
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#855: FILE: include/linux/artis.h:207:
+	.migration_delta = {0,0,0},	\
 	                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: include/linux/artis.h:212:
+^I.queues = NULL, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#868: FILE: include/linux/artis.h:220:
+^I.queues = NULL, ^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#876: FILE: include/linux/artis.h:228:
+#define SET_ARTIS_PER_CPU_INFO_INIT(v) v = ARTIS_PER_CPU_INFO_INIT,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#879: FILE: include/linux/artis.h:231:
+typedef struct artis_info {

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: include/linux/artis.h:234:
+        cpumask_t cpus_nrt;^I/* mask of NRT CPUs */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: include/linux/artis.h:234:
+        cpumask_t cpus_nrt;^I/* mask of NRT CPUs */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#894: FILE: include/linux/artis.h:246:
+}
+#define SET_ARTIS_INFO_INIT(v) v = ARTIS_INFO_INIT,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#894: FILE: include/linux/artis.h:246:
+#define SET_ARTIS_INFO_INIT(v) v = ARTIS_INFO_INIT,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#900: FILE: include/linux/artis.h:252:
+void artis_fetch_from_migration(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t' should also have an identifier name
#905: FILE: include/linux/artis.h:257:
+int artis_reinit(cpumask_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#926: FILE: include/linux/artis-macros.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#960: FILE: include/linux/artis-macros.h:35:
+#define ARTIS_BUG(c, x...) ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#961: FILE: include/linux/artis-macros.h:36:
+do { ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#962: FILE: include/linux/artis-macros.h:37:
+^Iif (unlikely(c)) ^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: include/linux/artis-macros.h:42:
+#define ARTIS_BUG(c, x...) $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#981: FILE: include/linux/artis-macros.h:56:
+#define artis_isrt0() ((current)->policy==SCHED_FIFO && \
                                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: include/linux/artis-macros.h:57:
+                      (current)->prio==0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: include/linux/artis-macros.h:57:
+                      (current)->prio==0)$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#982: FILE: include/linux/artis-macros.h:57:
+                      (current)->prio==0)
                                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#985: FILE: include/linux/artis-macros.h:60:
+#define artis_force_migration() ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#986: FILE: include/linux/artis-macros.h:61:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#987: FILE: include/linux/artis-macros.h:62:
+^Ipreempt_disable(); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#988: FILE: include/linux/artis-macros.h:63:
+^Ipreempt_enable_no_resched(); ^I\$

ERROR:SPACING: space required before the open parenthesis '('
#989: FILE: include/linux/artis-macros.h:64:
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#993: FILE: include/linux/artis-macros.h:68:
+ * ^Iidle or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#994: FILE: include/linux/artis-macros.h:69:
+ * ^Imigration off or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#995: FILE: include/linux/artis-macros.h:70:
+ * ^Ipreempt already off or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#996: FILE: include/linux/artis-macros.h:71:
+ * ^IRT0 or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: include/linux/artis-macros.h:72:
+ * ^Iin interrupt handler (hard or soft) or$

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#998: FILE: include/linux/artis-macros.h:73:
+ * 	irq already off (shouldn't happen because we've already migrated before, BUT IT HAPPEN!!!) or

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#998: FILE: include/linux/artis-macros.h:73:
+ * ^Iirq already off (shouldn't happen because we've already migrated before, BUT IT HAPPEN!!!) or$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: include/linux/artis-macros.h:74:
+ * ^ICPU is not RT $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#999: FILE: include/linux/artis-macros.h:74:
+ * ^ICPU is not RT $

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#1004: FILE: include/linux/artis-macros.h:79:
+ * independant of the state of the task.
    ^^^^^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1012: FILE: include/linux/artis-macros.h:87:
+	current->pid > 1	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1019: FILE: include/linux/artis-macros.h:94:
+	!artis_isrt0()		)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1021: FILE: include/linux/artis-macros.h:96:
+#define inc_artis_migration_count() ^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1021: FILE: include/linux/artis-macros.h:96:
+#define inc_artis_migration_count() 	\
+do { 					\
+	artis_migration_count()++; 	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1022: FILE: include/linux/artis-macros.h:97:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1023: FILE: include/linux/artis-macros.h:98:
+^Iartis_migration_count()++; ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1026: FILE: include/linux/artis-macros.h:101:
+#define dec_artis_migration_count() ^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1026: FILE: include/linux/artis-macros.h:101:
+#define dec_artis_migration_count() 	\
+do { 					\
+	artis_migration_count()--; 	\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1027: FILE: include/linux/artis-macros.h:102:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1028: FILE: include/linux/artis-macros.h:103:
+^Iartis_migration_count()--; ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1031: FILE: include/linux/artis-macros.h:106:
+#define artis_migration_disable() ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1032: FILE: include/linux/artis-macros.h:107:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1033: FILE: include/linux/artis-macros.h:108:
+^Iinc_artis_migration_count(); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1034: FILE: include/linux/artis-macros.h:109:
+^Ibarrier(); ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1037: FILE: include/linux/artis-macros.h:112:
+#define artis_migration_enable() ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1038: FILE: include/linux/artis-macros.h:113:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1039: FILE: include/linux/artis-macros.h:114:
+^Ibarrier(); ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1040: FILE: include/linux/artis-macros.h:115:
+^Idec_artis_migration_count(); ^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: include/linux/artis-macros.h:120:
+#define ARTIS_BUG(c, x...) $

ERROR:SPACING: space required before the open parenthesis '('
#1051: FILE: include/linux/artis-macros.h:126:
+#define artis_force_migration() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1055: FILE: include/linux/artis-macros.h:130:
+#define artis_migration_disable() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1056: FILE: include/linux/artis-macros.h:131:
+#define artis_migration_enable() do { } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1110: FILE: include/linux/preempt.h:22:
+#define inc_preempt_count() ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1111: FILE: include/linux/preempt.h:23:
+do { ^I^I^I^I\$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1175: FILE: init/main.c:522:
+
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1195: FILE: kernel/fork.c:83:
+kmem_cache_t *artis_fifo_node_cachep = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1214: FILE: kernel/fork.c:126:
+			    sizeof(artis_fifo_node_t),0,
 			                             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1216: FILE: kernel/fork.c:128:
+	if (!artis_fifo_node_cachep)
+	  panic("fork_init(): cannot create artis_fifo_node_t SLAB cache");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fork_init', this function's name, in a string
#1217: FILE: kernel/fork.c:129:
+	  panic("fork_init(): cannot create artis_fifo_node_t SLAB cache");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1227: FILE: kernel/fork.c:154:
+	artis_fifo_node_t *an, def_an=ARTIS_FIFO_NODE_INIT;
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1245: FILE: kernel/fork.c:177:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: kernel/fork.c:185:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1273: FILE: kernel/sched.c:57:
+#define artis_get_time(x) ((x)=ia64_get_itc())
                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1277: FILE: kernel/sched.c:61:
+#define artis_get_time(x) ((x)=jiffies)
                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1335: FILE: kernel/sched.c:670:
+}
+static inline void decrease_nr_rt(task_t *p, runqueue_t *rq)

ERROR:SPACING: space required before the open brace '{'
#1341: FILE: kernel/sched.c:676:
+static inline void increase_nr_rt(task_t *p, runqueue_t *rq){}

ERROR:SPACING: space required before the open brace '{'
#1342: FILE: kernel/sched.c:677:
+static inline void decrease_nr_rt(task_t *p, runqueue_t *rq){}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1384: FILE: kernel/sched.c:979:
+#define FIXED_P_1	(1<<FSHIFT_P)	/* 1.0 as fixed-point */
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1384: FILE: kernel/sched.c:979:
+#define FIXED_P_1	(1<<FSHIFT_P)	/* 1.0 as fixed-point */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1387: FILE: kernel/sched.c:982:
+#define CALC_PERIOD(period,n)			\
                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1387: FILE: kernel/sched.c:982:
+#define CALC_PERIOD(period,n)			\
+	*period *= EXP_PERIOD;			\
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
+	*period >>= FSHIFT_P;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'period' - possible side-effects?
#1387: FILE: kernel/sched.c:982:
+#define CALC_PERIOD(period,n)			\
+	*period *= EXP_PERIOD;			\
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
+	*period >>= FSHIFT_P;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'period' may be better as '(period)' to avoid precedence issues
#1387: FILE: kernel/sched.c:982:
+#define CALC_PERIOD(period,n)			\
+	*period *= EXP_PERIOD;			\
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
+	*period >>= FSHIFT_P;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1387: FILE: kernel/sched.c:982:
+#define CALC_PERIOD(period,n)			\
+	*period *= EXP_PERIOD;			\
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
+	*period >>= FSHIFT_P;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1389: FILE: kernel/sched.c:984:
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1389: FILE: kernel/sched.c:984:
+	*period += (n)*(FIXED_P_1-EXP_PERIOD);	\
 	                         ^

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1393: FILE: kernel/sched.c:988:
+#define PERIOD_BEFORE_NMA	(2 * NSEC_PER_SEC/HZ)	/* two scheduling ticks - empirical, could be a bit more */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1393: FILE: kernel/sched.c:988:
+#define PERIOD_BEFORE_NMA	(2 * NSEC_PER_SEC/HZ)	/* two scheduling ticks - empirical, could be a bit more */
                          	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1400: FILE: kernel/sched.c:995:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: kernel/sched.c:996:
+ * update the statistics about the migration attempts by saving the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1416: FILE: kernel/sched.c:1011:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1421: FILE: kernel/sched.c:1016:
+#define FIXED_RT_1	(1<<FSHIFT_RT)	/* 1.0 as fixed-point */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1421: FILE: kernel/sched.c:1016:
+#define FIXED_RT_1	(1<<FSHIFT_RT)	/* 1.0 as fixed-point */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1423: FILE: kernel/sched.c:1018:
+#define MAX_RT		FIXED_RT_1 - (FIXED_RT_1/(FIXED_RT_1 - EXP_RT)) /* the maximum possible */
               		                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1423: FILE: kernel/sched.c:1018:
+#define MAX_RT		FIXED_RT_1 - (FIXED_RT_1/(FIXED_RT_1 - EXP_RT)) /* the maximum possible */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1425: FILE: kernel/sched.c:1020:
+#define CALC_RT(load,n)				\
                     ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1425: FILE: kernel/sched.c:1020:
+#define CALC_RT(load,n)				\
+	*load *= EXP_RT;			\
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
+	*load >>= FSHIFT_RT;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'load' - possible side-effects?
#1425: FILE: kernel/sched.c:1020:
+#define CALC_RT(load,n)				\
+	*load *= EXP_RT;			\
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
+	*load >>= FSHIFT_RT;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'load' may be better as '(load)' to avoid precedence issues
#1425: FILE: kernel/sched.c:1020:
+#define CALC_RT(load,n)				\
+	*load *= EXP_RT;			\
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
+	*load >>= FSHIFT_RT;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1425: FILE: kernel/sched.c:1020:
+#define CALC_RT(load,n)				\
+	*load *= EXP_RT;			\
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
+	*load >>= FSHIFT_RT;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1427: FILE: kernel/sched.c:1022:
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
 	            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1427: FILE: kernel/sched.c:1022:
+	*load += (n)*(FIXED_RT_1-EXP_RT);	\
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1430: FILE: kernel/sched.c:1025:
+ * update the statistics about the RT task CPU consumption and the time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1447: FILE: kernel/sched.c:1042:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1455: FILE: kernel/sched.c:1050:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1457: FILE: kernel/sched.c:1052:
+	return (unsigned int)(nrt + cpustat->rt)/nrt;
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1468: FILE: kernel/sched.c:1063:
+#define artis_rt_stat(p, cpustat) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1469: FILE: kernel/sched.c:1064:
+#define artis_migration_stat(status) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1480: FILE: kernel/sched.c:1074:
+^I       ^I^I^I^I* get_rt_ratio(cpu) * SCHED_LOAD_SCALE;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1480: FILE: kernel/sched.c:1074:
+^I       ^I^I^I^I* get_rt_ratio(cpu) * SCHED_LOAD_SCALE;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1520: FILE: kernel/sched.c:1506:
+^I/* $

WARNING:TYPO_SPELLING: 'differents' may be misspelled - perhaps 'different'?
#1522: FILE: kernel/sched.c:1508:
+	 * differents places : schedule(), schedule_tail()... 
 	   ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1522: FILE: kernel/sched.c:1508:
+^I * differents places : schedule(), schedule_tail()... $

WARNING:TYPO_SPELLING: 'forbiden' may be misspelled - perhaps 'forbidden'?
#1534: FILE: kernel/sched.c:1527:
+	/* ARTiS: this is part of the scheduler, migration is forbiden */
 	                                                      ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1563: FILE: kernel/sched.c:1808:
+^I * compared to pull_task(), we deactivate the task the full way because $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: kernel/sched.c:1812:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: kernel/sched.c:1819:
+^I * and giving the struct back. That's necessary because we can't keep the $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around artis_info.size
#1582: FILE: kernel/sched.c:1827:
+	atomic_inc(&(artis_info.size));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'artis_info.active > 0'
#1612: FILE: kernel/sched.c:1894:
+	if ((artis_info.active > 0) && artis_is_cpu_rt(this_cpu)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1617: FILE: kernel/sched.c:1899:
+^I^Iif ((now > (next_attempt - PERIOD_BEFORE_NMA)) && $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1625: FILE: kernel/sched.c:1907:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1635: FILE: kernel/sched.c:1917:
+static int move_tasks_push(runqueue_t *this_rq, int this_cpu, int idlest_cpu,
+		      unsigned long max_nr_move, struct sched_domain *sd,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx >= MAX_PRIO'
#1668: FILE: kernel/sched.c:1950:
+	if (!did_modulo && (idx >= MAX_PRIO)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx >= MAX_PRIO'
#1677: FILE: kernel/sched.c:1959:
+	if ((idx >= MAX_PRIO) || (only_rt && (idx >= MAX_RT_PRIO))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx >= MAX_RT_PRIO'
#1677: FILE: kernel/sched.c:1959:
+	if ((idx >= MAX_PRIO) || (only_rt && (idx >= MAX_RT_PRIO))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1734: FILE: kernel/sched.c:2095:
+find_idlest_group(struct sched_domain *sd, int this_cpu,
+		   unsigned long *imbalance, int only_rt)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1740: FILE: kernel/sched.c:2101:
+	this_load = total_load = total_pwr = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1793: FILE: kernel/sched.c:2154:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1797: FILE: kernel/sched.c:2158:
+	if (this_load <= avg_load ||
+			100*this_load <= sd->imbalance_pct*min_load)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1797: FILE: kernel/sched.c:2158:
+			100*this_load <= sd->imbalance_pct*min_load)
 			   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1797: FILE: kernel/sched.c:2158:
+			100*this_load <= sd->imbalance_pct*min_load)
 			                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1821: FILE: kernel/sched.c:2182:
+		if (this_load - min_load >= SCHED_LOAD_SCALE*2) {
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1832: FILE: kernel/sched.c:2193:
+		pwr_now += idlest->cpu_power*min(SCHED_LOAD_SCALE, min_load);
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1833: FILE: kernel/sched.c:2194:
+		pwr_now += this->cpu_power*min(SCHED_LOAD_SCALE, this_load);
 		                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1837: FILE: kernel/sched.c:2198:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/this->cpu_power;
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1837: FILE: kernel/sched.c:2198:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/this->cpu_power;
 		                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1839: FILE: kernel/sched.c:2200:
+			pwr_move += this->cpu_power*min(SCHED_LOAD_SCALE,
 			                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1843: FILE: kernel/sched.c:2204:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/idlest->cpu_power;
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1843: FILE: kernel/sched.c:2204:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/idlest->cpu_power;
 		                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1846: FILE: kernel/sched.c:2207:
+		pwr_move += idlest->cpu_power*min(SCHED_LOAD_SCALE, min_load + tmp);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1884: FILE: kernel/sched.c:2255:
+^I^I/* we forbid balancing from the RT-CPUS because first it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1885: FILE: kernel/sched.c:2256:
+^I^I * implies the lock of the RT runqueue and second the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1887: FILE: kernel/sched.c:2258:
+^I^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1890: FILE: kernel/sched.c:2261:
+^I^I */ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'artis_info.active > 0'
#1891: FILE: kernel/sched.c:2262:
+		if ((artis_info.active > 0) && !local_group)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1907: FILE: kernel/sched.c:2383:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1910: FILE: kernel/sched.c:2386:
+ * find_idlest_queue $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1971: FILE: kernel/sched.c:2451:
+static int load_balance_push(int this_cpu, runqueue_t *this_rq,
+			struct sched_domain *sd, int only_rt)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1976: FILE: kernel/sched.c:2456:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1982: FILE: kernel/sched.c:2462:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1986: FILE: kernel/sched.c:2466:
+^I$

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#2000: FILE: kernel/sched.c:2480:
+		 * This should be only one function wich move task and manages
 		                                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2001: FILE: kernel/sched.c:2481:
+^I^I * the flags and all other small things, in common with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: kernel/sched.c:2482:
+^I^I * artis_complete_migration(). But here the point is that we $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2006: FILE: kernel/sched.c:2486:
+		nr_moved = move_tasks_push(this_rq, this_cpu, idlest,
+						imbalance, sd, only_rt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2007: FILE: kernel/sched.c:2487:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2008: FILE: kernel/sched.c:2488:
+		
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'artis_info.active > 0'
#2047: FILE: kernel/sched.c:2640:
+		if ((artis_info.active > 0) && (artis_is_cpu_rt(this_cpu)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2051: FILE: kernel/sched.c:2644:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idle == SCHED_IDLE'
#2078: FILE: kernel/sched.c:2802:
+			if ((idle == SCHED_IDLE) && (artis_is_cpu_rt(this_cpu)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2092: FILE: kernel/sched.c:2816:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2104: FILE: kernel/sched.c:2830:
+^I^I^I^Iload_balance_push(this_cpu, this_rq, sd, 0);^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#2105: FILE: kernel/sched.c:2831:
+			else
[...]
 			if (load_balance(this_cpu, this_rq, sd, idle)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2114: FILE: kernel/sched.c:2840:
+^I^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2147: FILE: kernel/sched.c:3325:
+			printk(KERN_ERR "bad: scheduling while atomic! (pid=%d/%d, preempt=%d, kernel_lock=%d)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2148: FILE: kernel/sched.c:3326:
+^I^I^I^I^Icurrent->pid, current->thread_info->cpu, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2148: FILE: kernel/sched.c:3326:
+			printk(KERN_ERR "bad: scheduling while atomic! (pid=%d/%d, preempt=%d, kernel_lock=%d)\n",
+					current->pid, current->thread_info->cpu, 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'artis_info.active > 0'
#2165: FILE: kernel/sched.c:3343:
+	if ((artis_info.active > 0) &&
+	       (smp_processor_id() == first_cpu(artis_info.cpus_nrt))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2166: FILE: kernel/sched.c:3344:
+	if ((artis_info.active > 0) &&
+	       (smp_processor_id() == first_cpu(artis_info.cpus_nrt))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2168: FILE: kernel/sched.c:3346:
+		int i;
+		for_each_cpu_mask(i, artis_info.cpus_rt)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2173: FILE: kernel/sched.c:3351:
+
+

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#2175: FILE: kernel/sched.c:3353:
+	if (current->pid>200 && (artis_migration_count()>2 || (artis_migration_count()>1 && artis_this_flag() == ARTIS_STATUS_REQUEST1))) {

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2175: FILE: kernel/sched.c:3353:
+	if (current->pid>200 && (artis_migration_count()>2 || (artis_migration_count()>1 && artis_this_flag() == ARTIS_STATUS_REQUEST1))) {
 	                ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2175: FILE: kernel/sched.c:3353:
+	if (current->pid>200 && (artis_migration_count()>2 || (artis_migration_count()>1 && artis_this_flag() == ARTIS_STATUS_REQUEST1))) {
 	                                                ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2175: FILE: kernel/sched.c:3353:
+	if (current->pid>200 && (artis_migration_count()>2 || (artis_migration_count()>1 && artis_this_flag() == ARTIS_STATUS_REQUEST1))) {
 	                                                                              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'schedule', this function's name, in a string
#2176: FILE: kernel/sched.c:3354:
+		ARTIS_PRINTK(KERN_ARTIS_LEVEL "ARTIS debug: In schedule (p=%d/%d) migration=%d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2177: FILE: kernel/sched.c:3355:
+^I^I^I^Icurrent->pid, smp_processor_id(), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2177: FILE: kernel/sched.c:3355:
+		ARTIS_PRINTK(KERN_ARTIS_LEVEL "ARTIS debug: In schedule (p=%d/%d) migration=%d\n",
+				current->pid, smp_processor_id(), 

WARNING:LINE_SPACING: Missing a blank line after declarations
#2192: FILE: kernel/sched.c:3392:
+		int i;
+		for_each_cpu(i)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2203: FILE: kernel/sched.c:3402:
+^I/* $

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2208: FILE: kernel/sched.c:3407:
+	if (unlikely(artis_flag(prev) & (ARTIS_STATUS_REQUEST1|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2)) &&

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2208: FILE: kernel/sched.c:3407:
+	if (unlikely(artis_flag(prev) & (ARTIS_STATUS_REQUEST1|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2)) &&
 	                                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2208: FILE: kernel/sched.c:3407:
+	if (unlikely(artis_flag(prev) & (ARTIS_STATUS_REQUEST1|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2)) &&
 	                                                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2209: FILE: kernel/sched.c:3408:
+	if (unlikely(artis_flag(prev) & (ARTIS_STATUS_REQUEST1|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2)) &&
+			!(preempt_count() & PREEMPT_ACTIVE)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2213: FILE: kernel/sched.c:3412:
+	} else
[...]
+	if (prev->state && !(preempt_count() & PREEMPT_ACTIVE) 

CHECK:BRACES: Unbalanced braces around else statement
#2213: FILE: kernel/sched.c:3412:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2215: FILE: kernel/sched.c:3414:
+^Iif (prev->state && !(preempt_count() & PREEMPT_ACTIVE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2221: FILE: kernel/sched.c:3420:
+^I * This can happen if the migrated task has been $

WARNING:TYPO_SPELLING: 'choosen' may be misspelled - perhaps 'chosen'?
#2222: FILE: kernel/sched.c:3421:
+	 * choosen but the need_resched flag implies the 
 	   ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2222: FILE: kernel/sched.c:3421:
+^I * choosen but the need_resched flag implies the $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2225: FILE: kernel/sched.c:3424:
+	 */
+		&& !(artis_flag(prev) & ARTIS_STATUS_FETCH)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2245: FILE: kernel/sched.c:3443:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2248: FILE: kernel/sched.c:3446:
+^I^I *  - load_balance() can call double_balance_lock() which can $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2249: FILE: kernel/sched.c:3447:
+^I^I *  release the runqueue lock. So a wake-up would have been $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#2252: FILE: kernel/sched.c:3450:
+		if (likely(!artis_test_migrating(prev)))
[...]
 		idle_balance(cpu, rq);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2261: FILE: kernel/sched.c:3496:
+	ARTIS_BUG(artis_test_migrating(prev) && prev==next, prev);
 	                                            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2309: FILE: kernel/sched.c:4214:
+void
+artis_bug(int line, char *file, unsigned long time, ...) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2313: FILE: kernel/sched.c:4218:
+	printk("ARTIS BUG (%s:%d@%ld) KDB_ENTER (%d/%d)=%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2314: FILE: kernel/sched.c:4219:
+	printk("ARTIS BUG (%s:%d@%ld) KDB_ENTER (%d/%d)=%x\n",
+		file, line, time, (int)current->pid, (int)smp_processor_id(),

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2326: FILE: kernel/sched.c:4231:
+void artis_try_to_migrate(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2340: FILE: kernel/sched.c:4245:
+void
+function_artis_migration_disable(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2346: FILE: kernel/sched.c:4251:
+void
+function_artis_migration_enable(void) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2352: FILE: kernel/sched.c:4257:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2358: FILE: kernel/sched.c:4263:
+static void
+artis_valois_push(artis_migration_queue_t *queue, task_t *task) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2361: FILE: kernel/sched.c:4266:
+	artis_fifo_node_t *node, *otail;
+	node=task->artis_status.fifo_node;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2361: FILE: kernel/sched.c:4266:
+	node=task->artis_status.fifo_node;
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#2362: FILE: kernel/sched.c:4267:
+	ARTIS_BUG(node->task!=task, task, node, node->task);
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2364: FILE: kernel/sched.c:4269:
+	otail=queue->tail;
 	     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around queue->size
#2366: FILE: kernel/sched.c:4271:
+	atomic_inc(&(queue->size));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2367: FILE: kernel/sched.c:4272:
+	otail->next=node;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2368: FILE: kernel/sched.c:4273:
+	queue->tail=node;
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2371: FILE: kernel/sched.c:4276:
+
+

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#2381: FILE: kernel/sched.c:4286:
+ * queue with the last element at the begining.
                                       ^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2383: FILE: kernel/sched.c:4288:
+static task_t *
+artis_valois_pull_all(artis_migration_queue_t *queue) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2388: FILE: kernel/sched.c:4293:
+	int i;
+	dummy=queue->head;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2388: FILE: kernel/sched.c:4293:
+	dummy=queue->head;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)
 	             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)
 	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)
 	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)
 	                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#2393: FILE: kernel/sched.c:4298:
+	for(i=1, node=dummy;node->next->next;node=node->next, i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2395: FILE: kernel/sched.c:4300:
+	task=node->next->task;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2396: FILE: kernel/sched.c:4301:
+	node->next->task=NULL;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2397: FILE: kernel/sched.c:4302:
+	dummy->task=task;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2398: FILE: kernel/sched.c:4303:
+	task->artis_status.fifo_node=dummy;
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2399: FILE: kernel/sched.c:4304:
+	queue->head=node->next;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2400: FILE: kernel/sched.c:4305:
+	node->next=NULL;
 	          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around queue->size
#2401: FILE: kernel/sched.c:4306:
+	atomic_sub(i, &(queue->size));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2405: FILE: kernel/sched.c:4310:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2417: FILE: kernel/sched.c:4322:
+	task_t *rtask;
+	node=task->artis_status.fifo_node;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2417: FILE: kernel/sched.c:4322:
+	node=task->artis_status.fifo_node;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2421: FILE: kernel/sched.c:4326:
+	rtask=node->next->task;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2424: FILE: kernel/sched.c:4329:
+		node->next=NULL;
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2428: FILE: kernel/sched.c:4333:
+#define VALOIS_NEXT(t) artis_valois_next((t),1)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2429: FILE: kernel/sched.c:4334:
+#define VALOIS_NEXT_NOBREAK(t) artis_valois_next((t),0)
                                                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2431: FILE: kernel/sched.c:4336:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2437: FILE: kernel/sched.c:4342:
+ * We mark ourself with ARTiS flag then call scheduling to be dropped $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2438: FILE: kernel/sched.c:4343:
+ * from the run-queue. The rest of action takes place in $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2441: FILE: kernel/sched.c:4346:
+void
+artis_request_for_migration(void) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2468: FILE: kernel/sched.c:4373:
+^I/* Even if there is a wake_up() on this task, force it to stay $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2469: FILE: kernel/sched.c:4374:
+	 * on this CPU */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2480: FILE: kernel/sched.c:4385:
+^I * Now that artis flag is set and affinity has been changed, we $

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#2489: FILE: kernel/sched.c:4394:
+		ARTIS_BUG(artis_this_flag() & ~(ARTIS_STATUS_FETCH|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2), artis_this_flag());

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2489: FILE: kernel/sched.c:4394:
+		ARTIS_BUG(artis_this_flag() & ~(ARTIS_STATUS_FETCH|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2), artis_this_flag());
 		                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2489: FILE: kernel/sched.c:4394:
+		ARTIS_BUG(artis_this_flag() & ~(ARTIS_STATUS_FETCH|ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2), artis_this_flag());
 		                                                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2490: FILE: kernel/sched.c:4395:
+	} while(artis_this_flag() & (ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2));
 	                                                ^

ERROR:SPACING: space required before the open parenthesis '('
#2490: FILE: kernel/sched.c:4395:
+	} while(artis_this_flag() & (ARTIS_STATUS_DUMMY1|ARTIS_STATUS_DUMMY2));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2497: FILE: kernel/sched.c:4402:
+^I/* We release flag to enable kmigration but before we disable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2499: FILE: kernel/sched.c:4404:
+^I */ $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2505: FILE: kernel/sched.c:4410:
+EXPORT_SYMBOL(artis_request_for_migration);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2516: FILE: kernel/sched.c:4421:
+int $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2516: FILE: kernel/sched.c:4421:
+int 
+artis_complete_migration(task_t *task) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2554: FILE: kernel/sched.c:4459:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2562: FILE: kernel/sched.c:4467:
+^I * The solution of putting the task in a dummy queue is $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2566: FILE: kernel/sched.c:4471:
+	if (nrt_processor == NR_CPUS)

WARNING:LONG_LINE: line length of 204 exceeds 100 columns
#2572: FILE: kernel/sched.c:4477:
+	ARTIS_PRINTK(KERN_ARTIS_LEVEL "ARTIS debug: enter artis_complete_migration (p=%d) cpu %d(%d) -> %d with (%p)\n", task->pid, task->thread_info->cpu, smp_processor_id(), nrt_processor, task->array);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'artis_complete_migration', this function's name, in a string
#2572: FILE: kernel/sched.c:4477:
+	ARTIS_PRINTK(KERN_ARTIS_LEVEL "ARTIS debug: enter artis_complete_migration (p=%d) cpu %d(%d) -> %d with (%p)\n", task->pid, task->thread_info->cpu, smp_processor_id(), nrt_processor, task->array);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2578: FILE: kernel/sched.c:4483:
+	artis_flag(task) = (nrt_processor<NR_CPUS ? ARTIS_STATUS_COMPLETE2 : ARTIS_STATUS_DUMMY1);
 	                                 ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2578: FILE: kernel/sched.c:4483:
+	artis_flag(task) = (nrt_processor<NR_CPUS ? ARTIS_STATUS_COMPLETE2 : ARTIS_STATUS_DUMMY1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around artis_info.size
#2581: FILE: kernel/sched.c:4486:
+	atomic_inc(&(artis_info.size));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2583: FILE: kernel/sched.c:4488:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2585: FILE: kernel/sched.c:4490:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2588: FILE: kernel/sched.c:4493:
+^I * before we set the flag since that means the cpu has been $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2600: FILE: kernel/sched.c:4505:
+^I^Iif (!(artis_cpu->nb_migration & 0x3ff)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2601: FILE: kernel/sched.c:4506:
+^I^I^Ifor(i=0; i<3; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2601: FILE: kernel/sched.c:4506:
+			for(i=0; i<3; i++) 
 			     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2601: FILE: kernel/sched.c:4506:
+			for(i=0; i<3; i++) 
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#2601: FILE: kernel/sched.c:4506:
+			for(i=0; i<3; i++) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2602: FILE: kernel/sched.c:4507:
+^I^I^I^Iartis_cpu->migration_delta[i] = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2604: FILE: kernel/sched.c:4509:
+^I^Ifor(i=0; i<3; i++) { $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2604: FILE: kernel/sched.c:4509:
+		for(i=0; i<3; i++) { 
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2604: FILE: kernel/sched.c:4509:
+		for(i=0; i<3; i++) { 
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#2604: FILE: kernel/sched.c:4509:
+		for(i=0; i<3; i++) { 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2605: FILE: kernel/sched.c:4510:
+			delta = artis_local(task)->migration_delta[i+1] -
 			                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2606: FILE: kernel/sched.c:4511:
+^I^I^I       ^Iartis_local(task)->migration_delta[i]; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2606: FILE: kernel/sched.c:4511:
+^I^I^I       ^Iartis_local(task)->migration_delta[i]; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2606: FILE: kernel/sched.c:4511:
+^I^I^I       ^Iartis_local(task)->migration_delta[i]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2607: FILE: kernel/sched.c:4512:
+^I^I^Iif (delta > artis_cpu->migration_delta[i]) $

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2614: FILE: kernel/sched.c:4519:
+	return (nrt_processor<NR_CPUS);
 	                     ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2614: FILE: kernel/sched.c:4519:
+	return (nrt_processor<NR_CPUS);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2617: FILE: kernel/sched.c:4522:
+EXPORT_SYMBOL(artis_complete_migration);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2632: FILE: kernel/sched.c:4537:
+ ^Irunqueue_t *rq = this_rq();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2632: FILE: kernel/sched.c:4537:
+ ^Irunqueue_t *rq = this_rq();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2632: FILE: kernel/sched.c:4537:
+ ^Irunqueue_t *rq = this_rq();$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2639: FILE: kernel/sched.c:4544:
+	for (p=artis_valois_pull_all(queue), size=0; p; p=VALOIS_NEXT(p)) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2639: FILE: kernel/sched.c:4544:
+	for (p=artis_valois_pull_all(queue), size=0; p; p=VALOIS_NEXT(p)) {
 	                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2639: FILE: kernel/sched.c:4544:
+	for (p=artis_valois_pull_all(queue), size=0; p; p=VALOIS_NEXT(p)) {
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2641: FILE: kernel/sched.c:4546:
+^I^I * A wake-up has been able to reactivate the task but $

WARNING:TYPO_SPELLING: 'runned' may be misspelled - perhaps 'ran'?
#2643: FILE: kernel/sched.c:4548:
+		 * the fetch has been runned. Therefore the local_status
 		                      ^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#2650: FILE: kernel/sched.c:4555:
+		if (!(artis_flag(p) & ARTIS_STATUS_LB))
+			 artis_flag(p) = ARTIS_STATUS_FETCH;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2652: FILE: kernel/sched.c:4557:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2653: FILE: kernel/sched.c:4558:
+^I^I * the task could have been re-activated by a wake-up $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around artis_info.size
#2667: FILE: kernel/sched.c:4572:
+	atomic_sub(size, &(artis_info.size));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2670: FILE: kernel/sched.c:4575:
+EXPORT_SYMBOL(artis_fetch_from_migration);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2680: FILE: kernel/sched.c:4585:
+void $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2680: FILE: kernel/sched.c:4585:
+void 
+artis_check_dummyfifo(int rt) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2684: FILE: kernel/sched.c:4589:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2688: FILE: kernel/sched.c:4593:
+	for(p=queue->head->next->task; p; p=VALOIS_NEXT_NOBREAK(p)) {
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2688: FILE: kernel/sched.c:4593:
+	for(p=queue->head->next->task; p; p=VALOIS_NEXT_NOBREAK(p)) {
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2688: FILE: kernel/sched.c:4593:
+	for(p=queue->head->next->task; p; p=VALOIS_NEXT_NOBREAK(p)) {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#2690: FILE: kernel/sched.c:4595:
+			printk("ARTIS Error : no NRT CPU found for pid=%d from cpu %d. Using dummy queue\n", (int)p->pid, rt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2690: FILE: kernel/sched.c:4595:
+			printk("ARTIS Error : no NRT CPU found for pid=%d from cpu %d. Using dummy queue\n", (int)p->pid, rt);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2699: FILE: kernel/sched.c:4604:
+#define isNRT(j,nrt_mask) ((j)==NR_CPUS || cpu_isset((j),(nrt_mask)))
                ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2699: FILE: kernel/sched.c:4604:
+#define isNRT(j,nrt_mask) ((j)==NR_CPUS || cpu_isset((j),(nrt_mask)))
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2699: FILE: kernel/sched.c:4604:
+#define isNRT(j,nrt_mask) ((j)==NR_CPUS || cpu_isset((j),(nrt_mask)))
                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <isNRT>
#2699: FILE: kernel/sched.c:4604:
+#define isNRT(j,nrt_mask) ((j)==NR_CPUS || cpu_isset((j),(nrt_mask)))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'j' - possible side-effects?
#2699: FILE: kernel/sched.c:4604:
+#define isNRT(j,nrt_mask) ((j)==NR_CPUS || cpu_isset((j),(nrt_mask)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2701: FILE: kernel/sched.c:4606:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2709: FILE: kernel/sched.c:4614:
+static int setup_artis_maskrt (char *s)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2713: FILE: kernel/sched.c:4618:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2720: FILE: kernel/sched.c:4625:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2724: FILE: kernel/sched.c:4629:
+       return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2727: FILE: kernel/sched.c:4632:
+__setup("artis_maskrt=", setup_artis_maskrt);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2729: FILE: kernel/sched.c:4634:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2736: FILE: kernel/sched.c:4641:
+static int setup_artis_active (char *s)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2738: FILE: kernel/sched.c:4643:
+       artis_boot_active = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2740: FILE: kernel/sched.c:4645:
+       return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2743: FILE: kernel/sched.c:4648:
+__setup("artis_active", setup_artis_active);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2745: FILE: kernel/sched.c:4650:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2755: FILE: kernel/sched.c:4660:
+	artis_per_cpu_info_t *artis_cpu=NULL;
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2756: FILE: kernel/sched.c:4661:
+	artis_per_cpu_info_t artis_cpu_init=ARTIS_PER_CPU_INFO_INIT;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2758: FILE: kernel/sched.c:4663:
+	artis_migration_queue_t queue_init=ARTIS_MIGRATION_QUEUE_INIT;
 	                                  ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2765: FILE: kernel/sched.c:4670:
+	queues_matrix = (artis_migration_queue_t ***) kmalloc(NR_CPUS * sizeof(artis_migration_queue_t **), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2765: FILE: kernel/sched.c:4670:
+	queues_matrix = (artis_migration_queue_t ***) kmalloc(NR_CPUS * sizeof(artis_migration_queue_t **), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2765: FILE: kernel/sched.c:4670:
+	queues_matrix = (artis_migration_queue_t ***) kmalloc(NR_CPUS * sizeof(artis_migration_queue_t **), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2765: FILE: kernel/sched.c:4670:
+	queues_matrix = (artis_migration_queue_t ***) kmalloc(NR_CPUS * sizeof(artis_migration_queue_t **), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2765: FILE: kernel/sched.c:4670:
+	queues_matrix = (artis_migration_queue_t ***) kmalloc(NR_CPUS * sizeof(artis_migration_queue_t **), GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2769: FILE: kernel/sched.c:4674:
+	memset(queues_matrix, 0, NR_CPUS * sizeof(artis_migration_queue_t **));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2770: FILE: kernel/sched.c:4675:
+	printk("ARTIS : initialization of the matrix queue (%p)\n", queues_matrix);

ERROR:SPACING: space required before the open parenthesis '('
#2774: FILE: kernel/sched.c:4679:
+	for(i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2774: FILE: kernel/sched.c:4679:
+	for(i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2780: FILE: kernel/sched.c:4685:
+			printk("ARTIS CPU%d: configured as Real-Time (%p)\n", i, artis_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2784: FILE: kernel/sched.c:4689:
+			printk("ARTIS CPU%d: configured as Non Real-Time (%p)\n", i, artis_cpu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2790: FILE: kernel/sched.c:4695:
+^I/* init queue between RT and NRT $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2793: FILE: kernel/sched.c:4698:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#2794: FILE: kernel/sched.c:4699:
+		queues_matrix[i] = (artis_migration_queue_t **) kmalloc((NR_CPUS+1) * sizeof(artis_migration_queue_t *), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2794: FILE: kernel/sched.c:4699:
+		queues_matrix[i] = (artis_migration_queue_t **) kmalloc((NR_CPUS+1) * sizeof(artis_migration_queue_t *), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2794: FILE: kernel/sched.c:4699:
+		queues_matrix[i] = (artis_migration_queue_t **) kmalloc((NR_CPUS+1) * sizeof(artis_migration_queue_t *), GFP_KERNEL);
 		                                                                ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2794: FILE: kernel/sched.c:4699:
+		queues_matrix[i] = (artis_migration_queue_t **) kmalloc((NR_CPUS+1) * sizeof(artis_migration_queue_t *), GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2794: FILE: kernel/sched.c:4699:
+		queues_matrix[i] = (artis_migration_queue_t **) kmalloc((NR_CPUS+1) * sizeof(artis_migration_queue_t *), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2798: FILE: kernel/sched.c:4703:
+		memset(queues_matrix[i], 0, (NR_CPUS+1) * sizeof(artis_migration_queue_t *));
 		                                    ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2798: FILE: kernel/sched.c:4703:
+		memset(queues_matrix[i], 0, (NR_CPUS+1) * sizeof(artis_migration_queue_t *));

ERROR:SPACING: space required before the open parenthesis '('
#2799: FILE: kernel/sched.c:4704:
+		for(j = 0; j <= NR_CPUS; j++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2799: FILE: kernel/sched.c:4704:
+		for(j = 0; j <= NR_CPUS; j++) {

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#2807: FILE: kernel/sched.c:4712:
+			artis_cpu->queues[i][j] = (artis_migration_queue_t *) kmalloc(sizeof(artis_migration_queue_t), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2807: FILE: kernel/sched.c:4712:
+			artis_cpu->queues[i][j] = (artis_migration_queue_t *) kmalloc(sizeof(artis_migration_queue_t), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2807: FILE: kernel/sched.c:4712:
+			artis_cpu->queues[i][j] = (artis_migration_queue_t *) kmalloc(sizeof(artis_migration_queue_t), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2813: FILE: kernel/sched.c:4718:
+			queue->head = queue->tail = an;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2814: FILE: kernel/sched.c:4719:
+			if (j < NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2815: FILE: kernel/sched.c:4720:
+				printk("ARTIS CPU%d: initialization of the queue for CPU%d (%p+%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2816: FILE: kernel/sched.c:4721:
+				printk("ARTIS CPU%d: initialization of the queue for CPU%d (%p+%ld)\n",
+						i, j, queue, (long)sizeof(artis_migration_queue_t));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2818: FILE: kernel/sched.c:4723:
+				printk("ARTIS CPU%d: initialization of the dummy queue (%p+%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2819: FILE: kernel/sched.c:4724:
+				printk("ARTIS CPU%d: initialization of the dummy queue (%p+%ld)\n",
+						i, queue, (long)sizeof(artis_migration_queue_t));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2824: FILE: kernel/sched.c:4729:
+	printk("ARTIS debug : NR_CPUS=%d PREEMPT_ACTIVE=%lx PREEMPT_MASK=%lx HARDIRQ_MASK=%lx SOFTIRQ_MASK=%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2825: FILE: kernel/sched.c:4730:
+	printk("ARTIS debug : NR_CPUS=%d PREEMPT_ACTIVE=%lx PREEMPT_MASK=%lx HARDIRQ_MASK=%lx SOFTIRQ_MASK=%lx\n",
+			(int)NR_CPUS,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2825: FILE: kernel/sched.c:4730:
+			(int)NR_CPUS,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2831: FILE: kernel/sched.c:4736:
+^I$

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#2838: FILE: kernel/sched.c:4743:
+	printk ("ARTiS succesfully initialized...\n");
 	               ^^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2838: FILE: kernel/sched.c:4743:
+	printk ("ARTiS succesfully initialized...\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2838: FILE: kernel/sched.c:4743:
+	printk ("ARTiS succesfully initialized...\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2844: FILE: kernel/sched.c:4749:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#2846: FILE: kernel/sched.c:4751:
+			for(j = 0; j <= NR_CPUS; j++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2846: FILE: kernel/sched.c:4751:
+			for(j = 0; j <= NR_CPUS; j++)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2848: FILE: kernel/sched.c:4753:
+				if (artis_cpu->queues[i][j])
+					kfree(artis_cpu->queues[i][j]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2856: FILE: kernel/sched.c:4761:
+	printk("ARTiS initialization error\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2859: FILE: kernel/sched.c:4764:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2873: FILE: kernel/sched.c:4778:
+	artis_per_cpu_info_t *artis_cpu=NULL;
 	                               ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#2882: FILE: kernel/sched.c:4787:
+		printk("ARTIS Error : re-initialization without any online NRT-CPUs (%ld)\n", cpus_addr(rt_cpu_mask)[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2882: FILE: kernel/sched.c:4787:
+		printk("ARTIS Error : re-initialization without any online NRT-CPUs (%ld)\n", cpus_addr(rt_cpu_mask)[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2889: FILE: kernel/sched.c:4794:
+	printk("ARTIS : re-initialization of the configuration (%p)\n", queues_matrix);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2899: FILE: kernel/sched.c:4804:
+				printk("ARTIS CPU%d: stay Real-Time (%p)\n", i, artis_cpu);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2901: FILE: kernel/sched.c:4806:
+				printk("ARTIS CPU%d: reconfigured as Real-Time (%p)\n", i, artis_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2901: FILE: kernel/sched.c:4806:
+				printk("ARTIS CPU%d: reconfigured as Real-Time (%p)\n", i, artis_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2906: FILE: kernel/sched.c:4811:
+				printk("ARTIS CPU%d: stay Non Real-Time (%p)\n", i, artis_cpu);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2908: FILE: kernel/sched.c:4813:
+				printk("ARTIS CPU%d: reconfigured as Non Real-Time (%p)\n", i, artis_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2908: FILE: kernel/sched.c:4813:
+				printk("ARTIS CPU%d: reconfigured as Non Real-Time (%p)\n", i, artis_cpu);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2917: FILE: kernel/sched.c:4822:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2920: FILE: kernel/sched.c:4825:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 236 errors, 171 warnings, 122 checks, 2772 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
