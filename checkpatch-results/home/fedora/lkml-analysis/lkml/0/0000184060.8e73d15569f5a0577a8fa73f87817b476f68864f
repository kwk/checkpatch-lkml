WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
 > on getting PAT into shape than further massaging MTRR.  Its well past its

WARNING:TYPO_SPELLING: 'theres' may be misspelled - perhaps 'there's'?
#33: 
 > smell-by-date, and theres been no activity whatsoever afaik on getting
                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#90: FILE: arch/i386/kernel/cpu/common.c:334:
+		write_cr4(cr4val & (unsigned char) ~(1 << 7));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#108: FILE: arch/i386/kernel/cpu/common.c:352:
+		printk("Unknown vendor in setup_pat()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'setup_pat', this function's name, in a string
#108: FILE: arch/i386/kernel/cpu/common.c:352:
+		printk("Unknown vendor in setup_pat()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#111: FILE: arch/i386/kernel/cpu/common.c:355:
+	/* Reenable the caches */
 	   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: arch/i386/kernel/cpu/common.c:717:
+	dev = pci_get_device(PCI_VENDOR_ID_SERVERWORKS,
+					PCI_DEVICE_ID_SERVERWORKS_LE, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#145: FILE: arch/i386/kernel/cpu/common.c:719:
+		printk(KERN_INFO

WARNING:TYPO_SPELLING: 'cachline' may be misspelled - perhaps 'cacheline'?
#149: FILE: arch/i386/kernel/cpu/common.c:723:
+	/* Intel 450NX errata # 23. Non ascending cachline evictions to
 	                                          ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#150: FILE: arch/i386/kernel/cpu/common.c:724:
+	/* Intel 450NX errata # 23. Non ascending cachline evictions to
+	write combining memory may resulting in data corruption */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#150: FILE: arch/i386/kernel/cpu/common.c:724:
+	write combining memory may resulting in data corruption */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#153: FILE: arch/i386/kernel/cpu/common.c:727:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: arch/i386/kernel/cpu/common.c:734:
+			printk("not all cpus have pat enabled?\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: arch/i386/kernel/cpu/common.c:735:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vr->mask_lo'
#189: FILE: arch/i386/kernel/cpu/mtrr/generic.c:37:
+		    -(size_or_mask | vr->mask_hi << (32 - PAGE_SHIFT) | vr->
+		      mask_lo >> PAGE_SHIFT);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/i386/kernel/cpu/mtrr/generic.c:43:
+		cmap_report_range(start << PAGE_SHIFT, size << PAGE_SHIFT,
+			cmap_convert_mtrr_type(vr->base_lo & 0xff));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#215: FILE: arch/i386/kernel/cpu/mtrr/main.c:369:
+		cmap_report_range(base<<PAGE_SHIFT, size<<PAGE_SHIFT,
 		                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#215: FILE: arch/i386/kernel/cpu/mtrr/main.c:369:
+		cmap_report_range(base<<PAGE_SHIFT, size<<PAGE_SHIFT,
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: arch/i386/kernel/cpu/mtrr/main.c:370:
+		cmap_report_range(base<<PAGE_SHIFT, size<<PAGE_SHIFT,
+			cmap_convert_mtrr_type(type));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#223: FILE: arch/i386/kernel/cpu/mtrr/main.c:502:
 	if (--usage_table[reg] < 1)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#225: FILE: arch/i386/kernel/cpu/mtrr/main.c:504:
+		cmap_release_range(lbase<<PAGE_SHIFT, lsize<<PAGE_SHIFT);
 		                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#225: FILE: arch/i386/kernel/cpu/mtrr/main.c:504:
+		cmap_release_range(lbase<<PAGE_SHIFT, lsize<<PAGE_SHIFT);
 		                                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: include/asm-i386/cachemap.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#287: FILE: include/asm-i386/cachemap.h:5:
+#include <asm/pgtable.h>

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#292: FILE: include/asm-i386/cachemap.h:10:
+	switch (flags)
+	{

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#294: FILE: include/asm-i386/cachemap.h:12:
+		case 0:			/* ioremap passes this for cached, fallthru */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#306: FILE: include/asm-i386/cachemap.h:24:
+	switch (mtype & 0xff) {
+		case MTRR_TYPE_UNCACHABLE:	return CMAP_PAGE_NOCACHED;
+		case MTRR_TYPE_WRCOMB:		return CMAP_PAGE_WRCOMB;
+		case MTRR_TYPE_WRBACK:		return CMAP_PAGE_CACHED;
+		case MTRR_TYPE_WRPROT:		return CMAP_PAGE_RO;
[...]
+		case MTRR_TYPE_WRTHROUGH:	return CMAP_PAGE_NOCACHED;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:IF_1: Consider removing the #if 1 and its #endif
#337: FILE: include/asm-i386/cachemap.h:55:
+#if 1

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#348: FILE: include/asm-i386/cachemap.h:66:
+	if ( (cmap_prot_val(caching) == _CMAP_PAGE_CACHED) ||
+	     (cmap_prot_val(caching) == _CMAP_PAGE_NOCACHED) ||
+	     (cmap_prot_val(caching) == _CMAP_PAGE_WRCOMB) ||
+	     (cmap_prot_val(caching) == _CMAP_PAGE_RO) )
+	{

ERROR:SPACING: space prohibited after that open parenthesis '('
#348: FILE: include/asm-i386/cachemap.h:66:
+	if ( (cmap_prot_val(caching) == _CMAP_PAGE_CACHED) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: include/asm-i386/cachemap.h:67:
+	if ( (cmap_prot_val(caching) == _CMAP_PAGE_CACHED) ||
+	     (cmap_prot_val(caching) == _CMAP_PAGE_NOCACHED) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#351: FILE: include/asm-i386/cachemap.h:69:
+	     (cmap_prot_val(caching) == _CMAP_PAGE_RO) )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: include/asm-i386/pat.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: include/asm-i386/pat.h:20:
+ * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'losely' may be misspelled - perhaps 'loosely'?
#396: FILE: include/asm-i386/pat.h:23:
+ * Very losely based on code I wrote at VA Linux Systems in 2001.
         ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: include/asm-i386/pat.h:33:
+#define PAT_UNCACHEABLE ^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: include/asm-i386/pat.h:35:
+#define PAT_WRITE_THRGH ^I4$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: include/asm-i386/pat.h:50:
+ * Note: On Athlon cpus PAT2/PAT3 & PAT6/PAT7 are both Uncacheable since $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/asm-i386/pat.h:75:
+extern void pat_global_setup(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#488: FILE: include/asm-i386/processor.h:699:
+extern int cpu_supports_wrcomb(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: include/linux/cachemap.h:1:
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#499: FILE: include/linux/cachemap.h:5:
+typedef struct { unsigned long cmap_prot; } cmap_prot_t;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#501: FILE: include/linux/cachemap.h:7:
+#define __cmap_prot(x)       ((cmap_prot_t) { (x) } )

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#504: FILE: include/linux/cachemap.h:10:
+#define _CMAP_PAGE_CACHED    (1<<0)
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#504: FILE: include/linux/cachemap.h:10:
+#define _CMAP_PAGE_CACHED    (1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#505: FILE: include/linux/cachemap.h:11:
+#define _CMAP_PAGE_NOCACHED  (1<<1)
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#505: FILE: include/linux/cachemap.h:11:
+#define _CMAP_PAGE_NOCACHED  (1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: include/linux/cachemap.h:12:
+#define _CMAP_PAGE_WRCOMB    (1<<2)
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#506: FILE: include/linux/cachemap.h:12:
+#define _CMAP_PAGE_WRCOMB    (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#507: FILE: include/linux/cachemap.h:13:
+#define _CMAP_PAGE_RO        (1<<3)
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#507: FILE: include/linux/cachemap.h:13:
+#define _CMAP_PAGE_RO        (1<<3)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#549: FILE: mm/cachemap.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#550: FILE: mm/cachemap.c:2:
+/*
+  (C) 2004 Terence Ripperda <tripperda@nvidia.com>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: mm/cachemap.c:12:
+  GNU General Public License for more details. $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#563: FILE: mm/cachemap.c:15:
+  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#564: FILE: mm/cachemap.c:16:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#575: FILE: mm/cachemap.c:27:
+#include <asm/cacheflush.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#601: FILE: mm/cachemap.c:53:
+static struct proc_dir_entry *cmap_proc = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: mm/cachemap.c:57:
+#define DEBUG_CMAP 1 $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#605: FILE: mm/cachemap.c:57:
+/*
+#define DEBUG_CMAP 1 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: mm/cachemap.c:58:
+#define DEBUG_PRINTOUTS 1 $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: mm/cachemap.c:63:
+#define DPRINTF(x...) printk(x)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#622: FILE: mm/cachemap.c:74:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#627: FILE: mm/cachemap.c:79:
+	printk("CMAP:   0x%08lx - 0x%08lx: 0x%04lx %d", c_tmp->start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: mm/cachemap.c:81:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#640: FILE: mm/cachemap.c:92:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: mm/cachemap.c:98:
+	tmp = kmalloc(sizeof (struct cmap_entry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp)...) over kmalloc(sizeof (struct cmap_entry)...)
#646: FILE: mm/cachemap.c:98:
+	tmp = kmalloc(sizeof (struct cmap_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#650: FILE: mm/cachemap.c:102:
+	memset(tmp, 0, sizeof (struct cmap_entry));

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#663: FILE: mm/cachemap.c:115:
+	if (entry)
+		kfree(entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#671: FILE: mm/cachemap.c:123:
+	tmp = kmalloc(sizeof (struct cmap_temp), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp)...) over kmalloc(sizeof (struct cmap_temp)...)
#671: FILE: mm/cachemap.c:123:
+	tmp = kmalloc(sizeof (struct cmap_temp), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#675: FILE: mm/cachemap.c:127:
+	memset(tmp, 0, sizeof (struct cmap_temp));

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#686: FILE: mm/cachemap.c:138:
+	if (entry)
+		kfree(entry);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#692: FILE: mm/cachemap.c:144:
+	printk("CMAP: initializing\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#696: FILE: mm/cachemap.c:148:
+	    create_proc_entry("cachemap", S_IFREG | S_IRUGO, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#715: FILE: mm/cachemap.c:167:
+		if (c_tmp->start > start + size)
[...]
+		else if (c_tmp->end < start)
[...]
+		else if (c_tmp->start == start && c_tmp->end == start + size) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#735: FILE: mm/cachemap.c:187:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#752: FILE: mm/cachemap.c:204:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: mm/cachemap.c:213:
+#define __CMAP_ASSERT(x)	if (!(x)) BUG()

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#761: FILE: mm/cachemap.c:213:
+#define __CMAP_ASSERT(x)	if (!(x)) BUG()

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_this' - possible side-effects?
#763: FILE: mm/cachemap.c:215:
+#define __ADD_TO_LIST(c_this, c_list)		\
+	do {					\
+		__CMAP_ASSERT(!c_this->c_next);	\
+		c_this->c_next = c_list;	\
+		c_list = c_this;		\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c_this' may be better as '(c_this)' to avoid precedence issues
#763: FILE: mm/cachemap.c:215:
+#define __ADD_TO_LIST(c_this, c_list)		\
+	do {					\
+		__CMAP_ASSERT(!c_this->c_next);	\
+		c_this->c_next = c_list;	\
+		c_list = c_this;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_list' - possible side-effects?
#763: FILE: mm/cachemap.c:215:
+#define __ADD_TO_LIST(c_this, c_list)		\
+	do {					\
+		__CMAP_ASSERT(!c_this->c_next);	\
+		c_this->c_next = c_list;	\
+		c_list = c_this;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_this' - possible side-effects?
#770: FILE: mm/cachemap.c:222:
+#define __REMOVE_FROM_LIST(c_this, c_list)	\
+	do {					\
+		c_this = c_list;		\
+		c_list = c_list->c_next;	\
+		c_this->c_next = NULL;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_list' - possible side-effects?
#770: FILE: mm/cachemap.c:222:
+#define __REMOVE_FROM_LIST(c_this, c_list)	\
+	do {					\
+		c_this = c_list;		\
+		c_list = c_list->c_next;	\
+		c_this->c_next = NULL;		\
+	} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: mm/cachemap.c:229:
+/* c_old and c_new are identical. $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_old' - possible side-effects?
#784: FILE: mm/cachemap.c:236:
+#define __SETUP_REPLACEMENT(c_old, c_new)		\
+	do {						\
+		c_new->count = c_old->count + 1; 	\
+		__ADD_TO_LIST(c_new, c_done_list);	\
+		__ADD_TO_LIST(c_old, c_free_list);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c_old' may be better as '(c_old)' to avoid precedence issues
#784: FILE: mm/cachemap.c:236:
+#define __SETUP_REPLACEMENT(c_old, c_new)		\
+	do {						\
+		c_new->count = c_old->count + 1; 	\
+		__ADD_TO_LIST(c_new, c_done_list);	\
+		__ADD_TO_LIST(c_old, c_free_list);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c_new' - possible side-effects?
#784: FILE: mm/cachemap.c:236:
+#define __SETUP_REPLACEMENT(c_old, c_new)		\
+	do {						\
+		c_new->count = c_old->count + 1; 	\
+		__ADD_TO_LIST(c_new, c_done_list);	\
+		__ADD_TO_LIST(c_old, c_free_list);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c_new' may be better as '(c_new)' to avoid precedence issues
#784: FILE: mm/cachemap.c:236:
+#define __SETUP_REPLACEMENT(c_old, c_new)		\
+	do {						\
+		c_new->count = c_old->count + 1; 	\
+		__ADD_TO_LIST(c_new, c_done_list);	\
+		__ADD_TO_LIST(c_old, c_free_list);	\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#786: FILE: mm/cachemap.c:238:
+^I^Ic_new->count = c_old->count + 1; ^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_end"
#809: FILE: mm/cachemap.c:261:
+		if (c_end == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#810: FILE: mm/cachemap.c:262:
+			printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_begin"
#832: FILE: mm/cachemap.c:284:
+		if (c_begin == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#833: FILE: mm/cachemap.c:285:
+			printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_begin"
#855: FILE: mm/cachemap.c:307:
+		if (c_begin == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#856: FILE: mm/cachemap.c:308:
+			printk("CMAP:    failed to create c_begin\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_end"
#865: FILE: mm/cachemap.c:317:
+		if (c_end == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#866: FILE: mm/cachemap.c:318:
+			printk("CMAP:    failed to create c_end\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_add_list"
#892: FILE: mm/cachemap.c:344:
+	if (c_add_list == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#893: FILE: mm/cachemap.c:345:
+		printk("CMAP:     failed alloc!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#897: FILE: mm/cachemap.c:349:
+	c_done_list = c_free_list = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#898: FILE: mm/cachemap.c:350:
+	while (c_add_list)
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#918: FILE: mm/cachemap.c:370:
+			printk("CMAP:     cachings mismatch (%ld != %ld)\n",

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#926: FILE: mm/cachemap.c:378:
+			DPRINTF("CMAP:     perfect fit for 0x%lx 0x%lx (%d)\n", c_tmp->start, c_tmp->end, c_tmp->count);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#956: FILE: mm/cachemap.c:408:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#957: FILE: mm/cachemap.c:409:
+				printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#975: FILE: mm/cachemap.c:427:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#976: FILE: mm/cachemap.c:428:
+				printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#1003: FILE: mm/cachemap.c:455:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1004: FILE: mm/cachemap.c:456:
+				printk("CMAP:    failed to create c_new\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1036: FILE: mm/cachemap.c:488:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: mm/cachemap.c:495:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: mm/cachemap.c:505:
+			BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1059: FILE: mm/cachemap.c:511:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1071: FILE: mm/cachemap.c:523:
+	printk("CMAP: cmap_request_range: 0x%lx - 0x%lx (%lx)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmap_request_range', this function's name, in a string
#1071: FILE: mm/cachemap.c:523:
+	printk("CMAP: cmap_request_range: 0x%lx - 0x%lx (%lx)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1076: FILE: mm/cachemap.c:528:
+			printk("CMAP:  failed to verify wrcomb support\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1081: FILE: mm/cachemap.c:533:
+			printk("CMAP:  caching type not supported 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: mm/cachemap.c:534:
+			printk("CMAP:  caching type not supported 0x%lx\n",
+				cmap_prot_val(caching));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1097: FILE: mm/cachemap.c:549:
+			printk("CMAP: request straddles physical memory and i/o!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: mm/cachemap.c:565:
+			printk("CMAP: need to handle physical pages!\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1118: FILE: mm/cachemap.c:570:
+		/* we'll fall through here for i/o regions that overlap physical ram */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1119: FILE: mm/cachemap.c:571:
+		printk("CMAP: falling through for i/o region  0x%08lx:0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: mm/cachemap.c:572:
+		printk("CMAP: falling through for i/o region  0x%08lx:0x%08lx\n",
+		     start, start + limit);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1126: FILE: mm/cachemap.c:578:
+	printk("CMAP: initial map: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1126: FILE: mm/cachemap.c:578:
+	printk("CMAP: initial map: \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1133: FILE: mm/cachemap.c:585:
+		printk("CMAP:    request_range successful!!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1135: FILE: mm/cachemap.c:587:
+		printk("CMAP:    new map:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1152: FILE: mm/cachemap.c:604:
+	printk("CMAP: cmap_report_range: 0x%lx - 0x%lx (%lx)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmap_report_range', this function's name, in a string
#1152: FILE: mm/cachemap.c:604:
+	printk("CMAP: cmap_report_range: 0x%lx - 0x%lx (%lx)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: mm/cachemap.c:607:
+^I/* on some systems, the mtrr that marks physical memory write-back $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: mm/cachemap.c:608:
+^I * extends past physical memory over some i/o addresses. we're going $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1164: FILE: mm/cachemap.c:616:
+			printk("CMAP: ignoring mtrr 0x%08lx:0x%08lx\n", start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1169: FILE: mm/cachemap.c:621:
+		printk("CMAP: trimming mtrr from 0x%08lx:0x%08lx ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1173: FILE: mm/cachemap.c:625:
+		printk("0x%08lx:0x%08lx\n", start, start + limit);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1181: FILE: mm/cachemap.c:633:
+		printk("CMAP:    report_range successful!!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_remove_list"
#1197: FILE: mm/cachemap.c:649:
+	if (c_remove_list == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1198: FILE: mm/cachemap.c:650:
+		printk("CMAP:     failed alloc!\n");

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1215: FILE: mm/cachemap.c:667:
+			DPRINTF("CMAP:    couldn't find region 0x%lx 0x%lx\n", c_this->start, c_this->end);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1223: FILE: mm/cachemap.c:675:
+			DPRINTF("CMAP:    found region 0x%lx 0x%lx (%d)\n", c_tmp->start, c_tmp->end, c_tmp->count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1226: FILE: mm/cachemap.c:678:
+				printk("CMAP:    last user, freeing\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#1251: FILE: mm/cachemap.c:703:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1253: FILE: mm/cachemap.c:705:
+				printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#1270: FILE: mm/cachemap.c:722:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1272: FILE: mm/cachemap.c:724:
+				printk("CMAP:    failed to create c_new\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_new"
#1295: FILE: mm/cachemap.c:747:
+			if (c_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1297: FILE: mm/cachemap.c:749:
+				printk("CMAP:    failed to create c_new\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1332: FILE: mm/cachemap.c:784:
+		BUG();

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1345: FILE: mm/cachemap.c:797:
+		DPRINTF("CMAP:    freeing 0x%lx 0x%lx from c_free_list\n", c_entry->start, c_entry->end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1347: FILE: mm/cachemap.c:799:
+			BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1361: FILE: mm/cachemap.c:813:
+	printk("CMAP: cmap_release_range: 0x%lx - 0x%lx\n", start,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmap_release_range', this function's name, in a string
#1361: FILE: mm/cachemap.c:813:
+	printk("CMAP: cmap_release_range: 0x%lx - 0x%lx\n", start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1369: FILE: mm/cachemap.c:821:
+		printk("CMAP: failed to release region! 0x%lx - 0x%lx\n", start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1372: FILE: mm/cachemap.c:824:
+		printk("CMAP:    release_range successful!!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1386: FILE: mm/cachemap.c:838:
+	if (p == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1414: FILE: mm/cachemap.c:866:
+EXPORT_SYMBOL(cmap_request_range);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1415: FILE: mm/cachemap.c:867:
+EXPORT_SYMBOL(cmap_release_range);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 90 warnings, 49 checks, 1305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
