WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ruX /home/jack/.kerndiffexclude linux-2.6.4-1-lockfix/fs/dquot.c linux-2.6.4-2-jquota/fs/dquot.c

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#107: FILE: fs/dquot.c:263:
 }
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dquot' - possible side-effects?
#118: FILE: fs/dquot.c:273:
+#define mark_dquot_dirty(dquot) ((dquot)->dq_sb->dq_op->mark_dirty(dquot))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: fs/dquot.c:276:
+ * worst what can happen is that dquot is not written by concurrent sync... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: fs/dquot.c:290:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: fs/dquot.c:331:
+	 * => we have better not writing it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: fs/dquot.c:364:
+ * for this sb+type at all. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: fs/dquot.c:420:
+		 * can safely just increase use count */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#268: FILE: fs/dquot.c:432:
+		if ((cnt == type || type == -1) && sb_has_quota_enabled(sb, cnt)
+			&& info_dirty(&dqopt->info[cnt]))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: fs/dquot.c:591:
+	 * finished or it will be canceled due to dq_count > 1 test */

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: fs/dquot.c:904:
+         * re-enter the quota code and are already holding the semaphore */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#385: FILE: fs/dquot.c:904:
+         * re-enter the quota code and are already holding the semaphore */

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: fs/dquot.c:971:
+         * re-enter the quota code and are already holding the semaphore */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: fs/dquot.c:971:
+         * re-enter the quota code and are already holding the semaphore */

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: fs/dquot.c:1020:
+         * re-enter the quota code and are already holding the semaphore */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: fs/dquot.c:1020:
+         * re-enter the quota code and are already holding the semaphore */

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: fs/dquot.c:1064:
+         * re-enter the quota code and are already holding the semaphore */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#522: FILE: fs/dquot.c:1064:
+         * re-enter the quota code and are already holding the semaphore */

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: fs/dquot.c:1100:
+         * re-enter the quota code and are already holding the semaphore */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#565: FILE: fs/dquot.c:1100:
+         * re-enter the quota code and are already holding the semaphore */

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: fs/dquot.c:1139:
+         * re-enter the quota code and are already holding the semaphore */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#597: FILE: fs/dquot.c:1139:
+         * re-enter the quota code and are already holding the semaphore */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#616: FILE: fs/dquot.c:1155:
+	 * us was already started so we don't violate lock ranking here */

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#713: FILE: fs/dquot.c:1322:
+ *	Turn quotas on on a device

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#757: FILE: fs/dquot.c:1366:
+	 * start transaction for dquot_release() */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#850: FILE: fs/dquot.c:1722:
+EXPORT_SYMBOL(vfs_quota_on_mount);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#851: FILE: fs/dquot.c:1723:
+EXPORT_SYMBOL(vfs_quota_off);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#852: FILE: fs/dquot.c:1724:
+EXPORT_SYMBOL(vfs_quota_sync);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#853: FILE: fs/dquot.c:1725:
+EXPORT_SYMBOL(vfs_get_dqinfo);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#854: FILE: fs/dquot.c:1726:
+EXPORT_SYMBOL(vfs_set_dqinfo);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#855: FILE: fs/dquot.c:1727:
+EXPORT_SYMBOL(vfs_get_dqblk);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#856: FILE: fs/dquot.c:1728:
+EXPORT_SYMBOL(vfs_set_dqblk);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#857: FILE: fs/dquot.c:1729:
+EXPORT_SYMBOL(dquot_commit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#858: FILE: fs/dquot.c:1730:
+EXPORT_SYMBOL(dquot_commit_info);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#859: FILE: fs/dquot.c:1731:
+EXPORT_SYMBOL(dquot_mark_dquot_dirty);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#860: FILE: fs/dquot.c:1732:
+EXPORT_SYMBOL(dquot_initialize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#861: FILE: fs/dquot.c:1733:
+EXPORT_SYMBOL(dquot_drop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#862: FILE: fs/dquot.c:1734:
+EXPORT_SYMBOL(dquot_alloc_space);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#863: FILE: fs/dquot.c:1735:
+EXPORT_SYMBOL(dquot_alloc_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#864: FILE: fs/dquot.c:1736:
+EXPORT_SYMBOL(dquot_free_space);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#865: FILE: fs/dquot.c:1737:
+EXPORT_SYMBOL(dquot_free_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#866: FILE: fs/dquot.c:1738:
+EXPORT_SYMBOL(dquot_transfer);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#877: FILE: fs/ext3/inode.c:2778:
+		 * inode block, ? - but truncate inode update has it) */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: fs/ext3/inode.c:2779:
+		handle = ext3_journal_start(inode, 4*EXT3_QUOTA_INIT_BLOCKS+3);
 		                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#878: FILE: fs/ext3/inode.c:2779:
+		handle = ext3_journal_start(inode, 4*EXT3_QUOTA_INIT_BLOCKS+3);
 		                                                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#890: FILE: fs/ext3/inode.c:2790:
+		 * one transaction */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: fs/ext3/inode.c:2876:
+	 * we will be updating only the data blocks + inodes */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#907: FILE: fs/ext3/inode.c:2877:
+	ret += 2*EXT3_QUOTA_TRANS_BLOCKS;
 	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#920: FILE: fs/ext3/namei.c:1637:
+					2*EXT3_QUOTA_INIT_BLOCKS);
 					 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: fs/ext3/namei.c:1667:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 3 +$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#929: FILE: fs/ext3/namei.c:1667:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 3 +$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#930: FILE: fs/ext3/namei.c:1668:
+					2*EXT3_QUOTA_INIT_BLOCKS);
 					 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#940: FILE: fs/ext3/namei.c:1701:
+					2*EXT3_QUOTA_INIT_BLOCKS);
 					 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#949: FILE: fs/ext3/namei.c:1981:
+	 * separate transaction */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#967: FILE: fs/ext3/namei.c:2040:
+	 * in separate transaction */

ERROR:CODE_INDENT: code indent should use tabs where possible
#985: FILE: fs/ext3/namei.c:2097:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 5 +$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#985: FILE: fs/ext3/namei.c:2097:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 5 +$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#986: FILE: fs/ext3/namei.c:2098:
+					2*EXT3_QUOTA_INIT_BLOCKS);
 					 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#995: FILE: fs/ext3/namei.c:2184:
+	 * in separate transaction */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1030: FILE: fs/ext3/super.c:512:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1030: FILE: fs/ext3/super.c:512:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1030: FILE: fs/ext3/super.c:512:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1031: FILE: fs/ext3/super.c:513:
+#define QTYPE2MOPT(on, t) ((t)==USRQUOTA?((on)##USRJQUOTA):((on)##GRPJQUOTA))
                               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1031: FILE: fs/ext3/super.c:513:
+#define QTYPE2MOPT(on, t) ((t)==USRQUOTA?((on)##USRJQUOTA):((on)##GRPJQUOTA))
                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1031: FILE: fs/ext3/super.c:513:
+#define QTYPE2MOPT(on, t) ((t)==USRQUOTA?((on)##USRJQUOTA):((on)##GRPJQUOTA))
                                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'on' - possible side-effects?
#1031: FILE: fs/ext3/super.c:513:
+#define QTYPE2MOPT(on, t) ((t)==USRQUOTA?((on)##USRJQUOTA):((on)##GRPJQUOTA))

CHECK:CAMELCASE: Avoid CamelCase: <Opt_usrjquota>
#1072: FILE: fs/ext3/super.c:578:
+	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpjquota>
#1072: FILE: fs/ext3/super.c:578:
+	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_offusrjquota>
#1072: FILE: fs/ext3/super.c:578:
+	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_offgrpjquota>
#1072: FILE: fs/ext3/super.c:578:
+	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_jqfmt_vfsold>
#1073: FILE: fs/ext3/super.c:579:
+	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_jqfmt_vfsv0>
#1073: FILE: fs/ext3/super.c:579:
+	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1095: FILE: fs/ext3/super.c:648:
+static int parse_options (char * options, struct super_block *sb,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1095: FILE: fs/ext3/super.c:648:
+static int parse_options (char * options, struct super_block *sb,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1121: FILE: fs/ext3/super.c:821:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1123: FILE: fs/ext3/super.c:823:
+					"EXT3-fs: Cannot change journalled "
+					"quota options when quota turned on.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1127: FILE: fs/ext3/super.c:827:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1129: FILE: fs/ext3/super.c:829:
+					"EXT3-fs: %s quota file already "
+					"specified.\n", QTYPE2NAME(qtype));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1134: FILE: fs/ext3/super.c:834:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1136: FILE: fs/ext3/super.c:836:
+					"EXT3-fs: not enough memory for "
+					"storing quotafile name.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1140: FILE: fs/ext3/super.c:840:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1142: FILE: fs/ext3/super.c:842:
+					"EXT3-fs: quotafile must be on "
+					"filesystem root.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1155: FILE: fs/ext3/super.c:855:
+				printk(KERN_ERR "EXT3-fs: Cannot change "

WARNING:SPLIT_STRING: quoted string split across lines
#1156: FILE: fs/ext3/super.c:856:
+				printk(KERN_ERR "EXT3-fs: Cannot change "
+					"journalled quota options when "

WARNING:SPLIT_STRING: quoted string split across lines
#1157: FILE: fs/ext3/super.c:857:
+					"journalled quota options when "
+					"quota turned on.\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1161: FILE: fs/ext3/super.c:861:
+			if (sbi->s_qf_names[qtype]) {
+				kfree(sbi->s_qf_names[qtype]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1178: FILE: fs/ext3/super.c:878:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1180: FILE: fs/ext3/super.c:880:
+				"EXT3-fs: journalled quota options not "
+				"supported.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1192: FILE: fs/ext3/super.c:897:
+		printk(KERN_ERR

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1215: FILE: fs/ext3/super.c:1084:
+	/* Needed for iput() to work correctly and not trash data */
 	              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1221: FILE: fs/ext3/super.c:1090:
+			int ret = ext3_quota_on_mount(sb, i);
+			if (ret < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1222: FILE: fs/ext3/super.c:1091:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1224: FILE: fs/ext3/super.c:1093:
+					"EXT3-fs: Cannot turn on journalled "
+					"quota: error %d\n", ret);

CHECK:SPACING: No space is necessary after a cast
#1258: FILE: fs/ext3/super.c:1273:
+	if (!parse_options ((char *) data, sb, &journal_inum, 0))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1258: FILE: fs/ext3/super.c:1273:
+	if (!parse_options ((char *) data, sb, &journal_inum, 0))

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1281: FILE: fs/ext3/super.c:1568:
+		if (sbi->s_qf_names[i])
+			kfree(sbi->s_qf_names[i]);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1342: FILE: fs/ext3/super.c:2128:
+	handle = ext3_journal_start(inode, 2*EXT3_QUOTA_INIT_BLOCKS);
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1369: FILE: fs/ext3/super.c:2144:
+	handle = ext3_journal_start(inode, 2*EXT3_QUOTA_INIT_BLOCKS);
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: fs/ext3/super.c:2160:
+	handle = ext3_journal_start(dquot_to_inode(dquot),
+					EXT3_QUOTA_TRANS_BLOCKS);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1395: FILE: fs/ext3/super.c:2170:
+static int ext3_mark_dquot_dirty(struct dquot * dquot)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1446: FILE: fs/ext3/super.c:2215:
+	 * on quota_off time */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1471: FILE: fs/ext3/super.c:2240:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1476: FILE: fs/ext3/super.c:2245:
+	err = path_lookup(path, LOOKUP_FOLLOW, &nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1480: FILE: fs/ext3/super.c:2249:
+	if (nd.mnt->mnt_sb != sb)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1483: FILE: fs/ext3/super.c:2252:
+	if (nd.dentry->d_parent->d_inode != sb->s_root->d_inode)
 	    ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1484: FILE: fs/ext3/super.c:2253:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1486: FILE: fs/ext3/super.c:2255:
+			"EXT3-fs: Quota file not on filesystem root. "
+			"Journalled quota will not work.\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1487: FILE: fs/ext3/super.c:2256:
+	if (!ext3_should_journal_data(nd.dentry->d_inode))
 	                              ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1488: FILE: fs/ext3/super.c:2257:
+		printk(KERN_WARNING "EXT3-fs: Quota file does not have "

WARNING:SPLIT_STRING: quoted string split across lines
#1489: FILE: fs/ext3/super.c:2258:
+		printk(KERN_WARNING "EXT3-fs: Quota file does not have "
+			"data-journalling. Journalled quota will not work.\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1490: FILE: fs/ext3/super.c:2259:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1598: FILE: fs/quota_v2.c:178:
+static int get_free_dqblk(struct file *filp, int type)
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1619: FILE: fs/quota_v2.c:207:
+static int put_free_dqblk(struct file *filp, int type, dqbuf_t buf, uint blk)
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1638: FILE: fs/quota_v2.c:224:
+static int remove_free_dqentry(struct file *filp, int type, dqbuf_t buf, uint blk)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1659: FILE: fs/quota_v2.c:263:
+static int insert_free_dqentry(struct file *filp, int type, dqbuf_t buf, uint blk)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1680: FILE: fs/quota_v2.c:316:
+		blk = get_free_dqblk(filp, dquot->dq_type);
 		                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1693: FILE: fs/quota_v2.c:327:
+		if ((*err = remove_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0) {
 		                                ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1693: FILE: fs/quota_v2.c:327:
+		if ((*err = remove_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1710: FILE: fs/quota_v2.c:366:
+		ret = get_free_dqblk(filp, dquot->dq_type);
 		                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1719: FILE: fs/quota_v2.c:400:
+		put_free_dqblk(filp, dquot->dq_type, buf, *treeblk);
 		               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1755: FILE: fs/quota_v2.c:473:
+		if ((ret = remove_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0 ||
 		                               ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1755: FILE: fs/quota_v2.c:473:
+		if ((ret = remove_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0 ||

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1756: FILE: fs/quota_v2.c:474:
+		    (ret = put_free_dqblk(filp, dquot->dq_type, buf, blk)) < 0) {
 		                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1765: FILE: fs/quota_v2.c:483:
+			if ((ret = insert_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0) {
 			                               ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1765: FILE: fs/quota_v2.c:483:
+			if ((ret = insert_free_dqentry(filp, dquot->dq_type, buf, blk)) < 0) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1782: FILE: fs/quota_v2.c:527:
+			put_free_dqblk(filp, dquot->dq_type, buf, *blk);
 			               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: fs/quota_v2.c:660:
+		if (!dquot->dq_dqb.dqb_bhardlimit &&
+			!dquot->dq_dqb.dqb_bsoftlimit &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1813: FILE: fs/quota_v2.c:671:
+ * the only one operating on dquot (thanks to dq_lock) */

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1819: FILE: fs/quota_v2.c:674:
+	if (test_bit(DQ_FAKE_B, &dquot->dq_flags) && !(dquot->dq_dqb.dqb_curinodes | dquot->dq_dqb.dqb_curspace))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1845: FILE: fs/stat.c:401:
+	 * (ie. inode->i_lock) */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1874: FILE: include/linux/ext3_jbd.h:47:
+					 2*EXT3_QUOTA_TRANS_BLOCKS)
 					  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1884: FILE: include/linux/ext3_jbd.h:78:
+ * allocated so we need to update only inode+data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1887: FILE: include/linux/ext3_jbd.h:81:
+ * but inode, sb and group updates are done only once */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxE)
#1888: FILE: include/linux/ext3_jbd.h:82:
+#define EXT3_QUOTA_INIT_BLOCKS (DQUOT_MAX_WRITES*\
                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1889: FILE: include/linux/ext3_jbd.h:83:
+				(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3)
 				                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1889: FILE: include/linux/ext3_jbd.h:83:
+				(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3)
 				                                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1906: FILE: include/linux/quota.h:142:
+ * (over all formats) - info block, 4 pointer blocks, data block */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1929: FILE: include/linux/quota.h:183:
+extern void mark_info_dirty(struct super_block *sb, int type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1935: FILE: include/linux/quota.h:189:
+#define sb_dqinfo(sb, type) (sb_dqopt(sb)->info+(type))
                                                ^

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#1978: FILE: include/linux/quota.h:242:
+	int (*release_dqblk)(struct dquot *dquot);	/* Called when last reference to dquot is being dropped */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#1985: FILE: include/linux/quota.h:247:
+	int (*initialize) (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1985: FILE: include/linux/quota.h:247:
+	int (*initialize) (struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1985: FILE: include/linux/quota.h:247:
+	int (*initialize) (struct inode *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1986: FILE: include/linux/quota.h:248:
+	int (*drop) (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1986: FILE: include/linux/quota.h:248:
+	int (*drop) (struct inode *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1991: FILE: include/linux/quota.h:251:
+	int (*free_space) (struct inode *, qsize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1991: FILE: include/linux/quota.h:251:
+	int (*free_space) (struct inode *, qsize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qsize_t' should also have an identifier name
#1991: FILE: include/linux/quota.h:251:
+	int (*free_space) (struct inode *, qsize_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1992: FILE: include/linux/quota.h:252:
+	int (*free_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct inode *' should also have an identifier name
#1992: FILE: include/linux/quota.h:252:
+	int (*free_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1992: FILE: include/linux/quota.h:252:
+	int (*free_inode) (const struct inode *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1995: FILE: include/linux/quota.h:254:
+	int (*write_dquot) (struct dquot *);		/* Ordinary dquot write */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dquot *' should also have an identifier name
#1995: FILE: include/linux/quota.h:254:
+	int (*write_dquot) (struct dquot *);		/* Ordinary dquot write */

WARNING:SPACING: Unnecessary space before function pointer arguments
#1996: FILE: include/linux/quota.h:255:
+	int (*mark_dirty) (struct dquot *);		/* Dquot is marked dirty */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dquot *' should also have an identifier name
#1996: FILE: include/linux/quota.h:255:
+	int (*mark_dirty) (struct dquot *);		/* Dquot is marked dirty */

WARNING:SPACING: Unnecessary space before function pointer arguments
#1997: FILE: include/linux/quota.h:256:
+	int (*write_info) (struct super_block *, int);	/* Write of quota "superblock" */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1997: FILE: include/linux/quota.h:256:
+	int (*write_info) (struct super_block *, int);	/* Write of quota "superblock" */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1997: FILE: include/linux/quota.h:256:
+	int (*write_info) (struct super_block *, int);	/* Write of quota "superblock" */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2030: FILE: include/linux/quotaops.h:25:
+extern int dquot_initialize(struct inode *inode, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2031: FILE: include/linux/quotaops.h:26:
+extern int dquot_drop(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2035: FILE: include/linux/quotaops.h:28:
+extern int dquot_alloc_space(struct inode *inode, qsize_t number, int prealloc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2036: FILE: include/linux/quotaops.h:29:
+extern int dquot_alloc_inode(const struct inode *inode, unsigned long number);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2040: FILE: include/linux/quotaops.h:31:
+extern int dquot_free_space(struct inode *inode, qsize_t number);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2041: FILE: include/linux/quotaops.h:32:
+extern int dquot_free_inode(const struct inode *inode, unsigned long number);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2044: FILE: include/linux/quotaops.h:34:
+extern int dquot_transfer(struct inode *inode, struct iattr *iattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2045: FILE: include/linux/quotaops.h:35:
+extern int dquot_commit(struct dquot *dquot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2046: FILE: include/linux/quotaops.h:36:
+extern int dquot_acquire(struct dquot *dquot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2047: FILE: include/linux/quotaops.h:37:
+extern int dquot_release(struct dquot *dquot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2048: FILE: include/linux/quotaops.h:38:
+extern int dquot_commit_info(struct super_block *sb, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2049: FILE: include/linux/quotaops.h:39:
+extern int dquot_mark_dquot_dirty(struct dquot *dquot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2051: FILE: include/linux/quotaops.h:41:
+extern int vfs_quota_on(struct super_block *sb, int type, int format_id, char *path);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2052: FILE: include/linux/quotaops.h:42:
+extern int vfs_quota_on_mount(int type, int format_id, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2053: FILE: include/linux/quotaops.h:43:
+extern int vfs_quota_off(struct super_block *sb, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2055: FILE: include/linux/quotaops.h:45:
+extern int vfs_quota_sync(struct super_block *sb, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2056: FILE: include/linux/quotaops.h:46:
+extern int vfs_get_dqinfo(struct super_block *sb, int type, struct if_dqinfo *ii);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2057: FILE: include/linux/quotaops.h:47:
+extern int vfs_set_dqinfo(struct super_block *sb, int type, struct if_dqinfo *ii);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2058: FILE: include/linux/quotaops.h:48:
+extern int vfs_get_dqblk(struct super_block *sb, int type, qid_t id, struct if_dqblk *di);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2059: FILE: include/linux/quotaops.h:49:
+extern int vfs_set_dqblk(struct super_block *sb, int type, qid_t id, struct if_dqblk *di);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2068: FILE: include/linux/quotaops.h:61:
+ * need a lot of space in journal for dquot structure allocation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2085: FILE: include/linux/quotaops.h:79:
+ * a transaction (deadlocks possible otherwise) */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 112 warnings, 53 checks, 1907 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
