CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/irq.h:313:
+extern int set_irq_chip(unsigned int irq, struct irq_chip *chip);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/irq.h:314:
+extern int set_irq_data(unsigned int irq, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/irq.h:315:
+extern int set_irq_chip_data(unsigned int irq, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/irq.h:316:
+extern int set_irq_type(unsigned int irq, unsigned int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/irq.h:323:
+extern void irq_chip_set_defaults(struct irq_chip *chip);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: kernel/irq/chip.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#92: FILE: kernel/irq/chip.c:2:
+ * linux/kernel/irq/chip.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#121: FILE: kernel/irq/chip.c:31:
+		printk(KERN_ERR "Trying to install chip for IRQ%d\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#150: FILE: kernel/irq/chip.c:60:
+		printk(KERN_ERR "Trying to set irq type for IRQ%d\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: kernel/irq/chip.c:87:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#203: FILE: kernel/irq/chip.c:113:
+		printk(KERN_ERR "BUG: bad set_irq_chip_data(IRQ#%d)\n", irq);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_irq_chip_data', this function's name, in a string
#203: FILE: kernel/irq/chip.c:113:
+		printk(KERN_ERR "BUG: bad set_irq_chip_data(IRQ#%d)\n", irq);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#261: FILE: kernel/irq/chip.c:171:
+	if (desc->handler->mask_ack)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: kernel/irq/chip.c:173:
+	else {

WARNING:TYPO_SPELLING: 'occures' may be misspelled - perhaps 'occurs'?
#361: FILE: kernel/irq/chip.c:271:
+ * Interrupt occures on the falling and/or rising edge of a hardware
              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#362: FILE: kernel/irq/chip.c:272:
+ * signal. The occurence is latched into the irq controller hardware
                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#363: FILE: kernel/irq/chip.c:273:
+ * and must be acked in order to be reenabled. After the ack another
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'assosiacted' may be misspelled - perhaps 'associated'?
#365: FILE: kernel/irq/chip.c:275:
+ * is handled by the assosiacted event handler. If this happens it
                      ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#367: FILE: kernel/irq/chip.c:277:
+ * controller hardware. This requires to reenable the interrupt inside
                                          ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: kernel/irq/chip.c:300:
+	if (unlikely((desc->status & IRQ_INPROGRESS) || desc->depth ||
+		    !desc->action)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 12 warnings, 8 checks, 396 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
