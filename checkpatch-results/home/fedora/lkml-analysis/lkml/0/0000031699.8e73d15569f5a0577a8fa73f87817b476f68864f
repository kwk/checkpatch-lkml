ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: arch/powerpc/platforms/cell/spufs/run.c:51:
+static inline int spu_run_init(struct spu_context *ctx, u32 * npc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#88: FILE: arch/powerpc/platforms/cell/spufs/run.c:94:
+	if ((ret = spu_run_init(ctx, npc)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: arch/powerpc/platforms/cell/spufs/inode.c:228:
+spufs_mkdir(struct inode *dir, struct dentry *dentry, unsigned int flags,
+		int mode)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '~SPU_CREATE_FLAG_ALL'
#234: FILE: arch/powerpc/platforms/cell/spufs/inode.c:310:
+	if (flags & (~SPU_CREATE_FLAG_ALL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#243: FILE: arch/powerpc/platforms/cell/spufs/inode.c:323:
+	ret = spufs_mkdir(nd->dentry->d_inode, dentry, flags, mode & S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: Unnecessary space before function pointer name
#310: FILE: include/asm-powerpc/spu.h:141:
+	void (* dma_callback)(struct spu *spu, int type);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#310: FILE: include/asm-powerpc/spu.h:141:
+	void (* dma_callback)(struct spu *spu, int type);
 	      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 2 warnings, 2 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
