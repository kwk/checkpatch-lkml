WARNING:TYPO_SPELLING: 'ment' may be misspelled - perhaps 'meant'?
#37: 
that.)  debugfs is ment for putting stuff that kernel developers need to
                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
  struct dentry *debugfs_create_u8(const char *name, mode_t mode, struct dentry *parent, u8 *value);

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#86: 
--- a/fs/Makefile	2004-12-09 16:32:32 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: fs/debugfs/debugfs.h:1:
+#define DEBUG

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#108: FILE: fs/debugfs/debugfs.h:4:
+#define dbg(format, arg...) printk(KERN_DEBUG "%s: " format , __FILE__ , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#108: FILE: fs/debugfs/debugfs.h:4:
+#define dbg(format, arg...) printk(KERN_DEBUG "%s: " format , __FILE__ , ## arg)
                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#108: FILE: fs/debugfs/debugfs.h:4:
+#define dbg(format, arg...) printk(KERN_DEBUG "%s: " format , __FILE__ , ## arg)
                                                                        ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#113: FILE: fs/debugfs/debugfs.h:9:
+extern struct file_operations debugfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: fs/debugfs/debugfs_test.c:1:
+#include <linux/config.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: fs/debugfs/debugfs_test.c:16:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: fs/debugfs/debugfs_test.c:22:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: fs/debugfs/debugfs_test.c:32:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#156: FILE: fs/debugfs/debugfs_test.c:38:
+static struct file_operations default_file_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: fs/debugfs/file.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/debugfs/file.c:22:
+static ssize_t default_write_file(struct file *file, const char __user *buf,
+				   size_t count, loff_t *ppos)

ERROR:SPACING: space required before the open parenthesis '('
#215: FILE: fs/debugfs/file.c:32:
+	switch(orig) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: fs/debugfs/file.c:37:
+^I^I} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: fs/debugfs/file.c:43:
+^I^I} $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#243: FILE: fs/debugfs/file.c:60:
+struct file_operations debugfs_file_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: fs/debugfs/file.c:67:
+
+

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#252: FILE: fs/debugfs/file.c:69:
+static ssize_t read_file_##type(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)	\

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#253: FILE: fs/debugfs/file.c:70:
+{													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#254: FILE: fs/debugfs/file.c:71:
+	char buf[32];											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#255: FILE: fs/debugfs/file.c:72:
+	type *val = file->private_data;									\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#256: FILE: fs/debugfs/file.c:73:
+													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#257: FILE: fs/debugfs/file.c:74:
+	snprintf(buf, sizeof(buf), format, *val);							\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#258: FILE: fs/debugfs/file.c:75:
+	return simple_read_from_buffer(user_buf, count, ppos, buf, strlen(buf));			\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#259: FILE: fs/debugfs/file.c:76:
+}													\

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#260: FILE: fs/debugfs/file.c:77:
+static ssize_t write_file_##type(struct file *file, const char __user *user_buf, size_t count, loff_t *ppos)	\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#261: FILE: fs/debugfs/file.c:78:
+{													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#262: FILE: fs/debugfs/file.c:79:
+	char *endp;											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#263: FILE: fs/debugfs/file.c:80:
+	char buf[32];											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#264: FILE: fs/debugfs/file.c:81:
+	int buf_size;											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#265: FILE: fs/debugfs/file.c:82:
+	type *val = file->private_data;									\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#266: FILE: fs/debugfs/file.c:83:
+	temptype tmp;											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#267: FILE: fs/debugfs/file.c:84:
+													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#268: FILE: fs/debugfs/file.c:85:
+	memset(buf, 0x00, sizeof(buf));									\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#269: FILE: fs/debugfs/file.c:86:
+	buf_size = min(count, (sizeof(buf)-1));								\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#269: FILE: fs/debugfs/file.c:86:
+	buf_size = min(count, (sizeof(buf)-1));								\
 	                                  ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#270: FILE: fs/debugfs/file.c:87:
+	if (copy_from_user(buf, user_buf, buf_size))							\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#271: FILE: fs/debugfs/file.c:88:
+		return -EFAULT;										\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#272: FILE: fs/debugfs/file.c:89:
+													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#273: FILE: fs/debugfs/file.c:90:
+	tmp = strtolfn(buf, &endp, 0);									\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#274: FILE: fs/debugfs/file.c:91:
+	if ((endp == buf) || ((type)tmp != tmp))							\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'endp == buf'
#274: FILE: fs/debugfs/file.c:91:
+	if ((endp == buf) || ((type)tmp != tmp))							\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#275: FILE: fs/debugfs/file.c:92:
+		return -EINVAL;										\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#276: FILE: fs/debugfs/file.c:93:
+	*val = tmp;											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#277: FILE: fs/debugfs/file.c:94:
+	return count;											\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#278: FILE: fs/debugfs/file.c:95:
+}													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#279: FILE: fs/debugfs/file.c:96:
+static struct file_operations fops_##type = {								\

WARNING:CONST_STRUCT: struct file_operations should normally be const
#279: FILE: fs/debugfs/file.c:96:
+static struct file_operations fops_##type = {								\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#280: FILE: fs/debugfs/file.c:97:
+	.read =		read_file_##type,								\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#281: FILE: fs/debugfs/file.c:98:
+	.write =	write_file_##type,								\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#282: FILE: fs/debugfs/file.c:99:
+	.open =		default_open,									\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#283: FILE: fs/debugfs/file.c:100:
+	.llseek =	default_file_lseek,								\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#284: FILE: fs/debugfs/file.c:101:
+};													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#285: FILE: fs/debugfs/file.c:102:
+struct dentry *debugfs_create_##type(const char *name, mode_t mode, struct dentry *parent, type *value)	\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#286: FILE: fs/debugfs/file.c:103:
+{													\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#287: FILE: fs/debugfs/file.c:104:
+	return debugfs_create_file(name, mode, parent, value, &fops_##type);				\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: fs/debugfs/file.c:110:
+EXPORT_SYMBOL_GPL(debugfs_create_u8);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#294: FILE: fs/debugfs/file.c:111:
+EXPORT_SYMBOL_GPL(debugfs_create_u16);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#295: FILE: fs/debugfs/file.c:112:
+EXPORT_SYMBOL_GPL(debugfs_create_u32);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: fs/debugfs/file.c:118:
+^I$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#310: FILE: fs/debugfs/file.c:127:
+static ssize_t write_file_bool(struct file *file, const char __user *user_buf, size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#316: FILE: fs/debugfs/file.c:133:
+	buf_size = min(count, (sizeof(buf)-1));
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/debugfs/file.c:149:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#336: FILE: fs/debugfs/file.c:153:
+static struct file_operations fops_bool = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#353: FILE: fs/debugfs/inode.c:1:
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#384: FILE: fs/debugfs/inode.c:32:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: fs/debugfs/inode.c:49:
+^Ireturn inode; $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#426: FILE: fs/debugfs/inode.c:74:
+	mode = (mode & (S_IRWXUGO | S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#451: FILE: fs/debugfs/inode.c:99:
+static struct dentry * get_dentry(struct dentry *parent, const char *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: fs/debugfs/inode.c:100:
+{               $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: fs/debugfs/inode.c:105:
+	qstr.hash = full_name_hash(name,qstr.len);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#458: FILE: fs/debugfs/inode.c:106:
+	return lookup_hash(&qstr,parent);
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: fs/debugfs/inode.c:107:
+}               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: fs/debugfs/inode.c:110:
+^I^I^I^I        int flags, const char *dev_name,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: fs/debugfs/inode.c:110:
+static struct super_block *debug_get_sb(struct file_system_type *fs_type,
+				        int flags, const char *dev_name,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: fs/debugfs/inode.c:130:
+^I * We need the root dentry to do this, which is in the super $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#486: FILE: fs/debugfs/inode.c:134:
+	if (!parent ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#487: FILE: fs/debugfs/inode.c:135:
+		if (debugfs_mount && debugfs_mount->mnt_sb) {
+			parent = debugfs_mount->mnt_sb->s_root;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#498: FILE: fs/debugfs/inode.c:146:
+	*dentry = get_dentry (parent, name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: fs/debugfs/inode.c:147:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: fs/debugfs/inode.c:150:
+^I^Ielse $

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: fs/debugfs/inode.c:152:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#513: FILE: fs/debugfs/inode.c:161:
+				   struct file_operations *fops)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: fs/debugfs/inode.c:166:
+	dbg("creating file '%s'\n",name);
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: fs/debugfs/inode.c:192:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#586: FILE: include/linux/debugfs.h:1:
+/*

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#596: FILE: include/linux/debugfs.h:11:
+#if defined(CONFIG_DEBUG_FS) || defined(CONFIG_DEBUG_FS_MODULE)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#599: FILE: include/linux/debugfs.h:14:
+				   struct file_operations *fops);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#603: FILE: include/linux/debugfs.h:18:
+	return debugfs_create_file(name, S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO, parent, NULL, NULL);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#611: FILE: include/linux/debugfs.h:26:
+struct dentry *debugfs_create_bool(const char *name, mode_t mode, struct dentry *parent, u32 *value);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#614: FILE: include/linux/debugfs.h:29:
+static inline struct dentry *debugfs_create_file(const char *name, mode_t mode, struct dentry *parent, void *data, struct file_operations *fops)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#621: FILE: include/linux/debugfs.h:36:
+static inline struct dentry *debugfs_create_u8(const char *name, mode_t mode, struct dentry *parent, u8 *value)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#623: FILE: include/linux/debugfs.h:38:
+static inline struct dentry *debugfs_create_u16(const char *name, mode_t mode, struct dentry *parent, u16 *value)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#625: FILE: include/linux/debugfs.h:40:
+static inline struct dentry *debugfs_create_u32(const char *name, mode_t mode, struct dentry *parent, u32 *value)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#627: FILE: include/linux/debugfs.h:42:
+static inline struct dentry *debugfs_create_bool(const char *name, mode_t mode, struct dentry *parent, u32 *value)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 66 warnings, 12 checks, 538 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
