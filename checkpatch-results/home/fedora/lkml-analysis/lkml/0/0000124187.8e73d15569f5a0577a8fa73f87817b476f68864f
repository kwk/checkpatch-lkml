WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/linux/mutex.h:1:
+#ifndef __LINUX_MUTEX_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#73: FILE: include/linux/mutex.h:14:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#105: FILE: include/linux/mutex.h:46:
+	spinlock_t		wait_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: include/linux/mutex.h:52:
+^Ichar ^I^I^I*name, *file;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#122: FILE: include/linux/mutex.h:63:
+	struct mutex		*lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockname' - possible side-effects?
#133: FILE: include/linux/mutex.h:74:
+# define __MUTEX_DEADLOCK_DETECT_INITIALIZER(lockname) \
+	, .held_list = LIST_HEAD_INIT(lockname.held_list), \
+	.name = #lockname, .file = __FILE__, .line = __LINE__ , \
+	.magic = &lockname

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#135: FILE: include/linux/mutex.h:76:
+	.name = #lockname, .file = __FILE__, .line = __LINE__ , \
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/mutex.h:78:
+extern void FASTCALL(__mutex_init(struct mutex *lock, char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/mutex.h:83:
+extern void FASTCALL(__mutex_init(struct mutex *lock));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockname' - possible side-effects?
#146: FILE: include/linux/mutex.h:87:
+#define __MUTEX_INITIALIZER(lockname) \
+	{ .count = ATOMIC_INIT(1) \
+	, .wait_lock = SPIN_LOCK_UNLOCKED \
+	, .wait_list = LIST_HEAD_INIT(lockname.wait_list) \
+	__MUTEX_DEADLOCK_DETECT_INITIALIZER(lockname) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mutexname' - possible side-effects?
#152: FILE: include/linux/mutex.h:93:
+#define DEFINE_MUTEX(mutexname) \
+	struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/mutex.h:96:
+extern void FASTCALL(mutex_lock(struct mutex *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/mutex.h:97:
+extern int FASTCALL(mutex_lock_interruptible(struct mutex *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/mutex.h:98:
+extern int FASTCALL(mutex_trylock(struct mutex *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/mutex.h:99:
+extern void FASTCALL(mutex_unlock(struct mutex *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/mutex.h:100:
+extern int FASTCALL(mutex_is_locked(struct mutex *lock));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#223: FILE: kernel/mutex.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#224: FILE: kernel/mutex.c:2:
+ * kernel/mutex.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#265: FILE: kernel/mutex.c:43:
+# define __IP_DECL__		, unsigned long ip
                     		^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#266: FILE: kernel/mutex.c:44:
+# define __IP__			, ip
                			^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#266: FILE: kernel/mutex.c:44:
+# define __IP__			, ip

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#267: FILE: kernel/mutex.c:45:
+# define __W_CALLER__(waiter)	, (waiter)->ip
                              	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#267: FILE: kernel/mutex.c:45:
+# define __W_CALLER__(waiter)	, (waiter)->ip

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#268: FILE: kernel/mutex.c:46:
+# define __CALLER_IP__		, (unsigned long)__builtin_return_address(0)
                       		^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: kernel/mutex.c:46:
+# define __CALLER_IP__		, (unsigned long)__builtin_return_address(0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#351: FILE: kernel/mutex.c:129:
+	SMP_DEBUG_WARN_ON(!spin_is_locked(&lock->wait_lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:LINE_SPACING: Please don't use multiple blank lines
#365: FILE: kernel/mutex.c:143:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: kernel/mutex.c:146:
+^I        struct thread_info *ti, struct task_struct *task)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: kernel/mutex.c:146:
+__remove_waiter(struct mutex *lock, struct mutex_waiter *waiter,
+	        struct thread_info *ti, struct task_struct *task)

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#443: FILE: kernel/mutex.c:221:
+	 * Ok, didnt get the lock - we'll go to sleep after return:
 	       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: kernel/mutex.c:242:
+	if (__mutex_lock_common(lock, &waiter, ti, task, &flags,
+						TASK_UNINTERRUPTIBLE __IP__))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#483: FILE: kernel/mutex.c:261:
+	SMP_DEBUG_WARN_ON(!spin_is_locked(&lock->wait_lock));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: kernel/mutex.c:328:
+	if (__mutex_lock_common(lock, &waiter, ti, task, &flags,
+						TASK_INTERRUPTIBLE __IP__))

WARNING:MEMORY_BARRIER: memory barrier without comment
#624: FILE: kernel/mutex.c:402:
+	mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#628: FILE: kernel/mutex.c:406:
+EXPORT_SYMBOL_GPL(mutex_is_locked);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#747: FILE: kernel/mutex.c:525:
+EXPORT_SYMBOL_GPL(mutex_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#755: FILE: kernel/mutex.c:533:
+EXPORT_SYMBOL_GPL(mutex_unlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#762: FILE: kernel/mutex.c:540:
+EXPORT_SYMBOL_GPL(mutex_lock_interruptible);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#785: FILE: kernel/mutex.c:563:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124187.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 13 warnings, 17 checks, 702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124187.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
