WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
power state changes won't be a concern for most devices/platforms/applications.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#57: FILE: drivers/base/power/runtime.c:57:
+	if (!(error = suspend_device(dev,state))) {
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#57: FILE: drivers/base/power/runtime.c:57:
+	if (!(error = suspend_device(dev,state))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#84: FILE: drivers/base/power/sysfs.c:66:
+	struct device * dev = (struct device *) class_dev->class_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: drivers/base/power/sysfs.c:66:
+	struct device * dev = (struct device *) class_dev->class_data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#89: FILE: drivers/base/power/sysfs.c:71:
+	length += scnprintf (buffer, buffer_size - length, "STATE=%d",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i >= num_envp'
#91: FILE: drivers/base/power/sysfs.c:73:
+	if ((buffer_size - length <= 0) || (i >= num_envp))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#105: FILE: drivers/base/power/sysfs.c:87:
+	if (class_dev)
+		kfree(class_dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#108: FILE: drivers/base/power/sysfs.c:90:
+void dpm_notify(struct device * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: drivers/base/power/sysfs.c:105:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*class_dev)...) over kmalloc(sizeof(struct class_device)...)
#126: FILE: drivers/base/power/sysfs.c:108:
+	struct class_device *class_dev = kmalloc(sizeof(struct class_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: drivers/base/power/sysfs.c:111:
+		memset(class_dev, 0, sizeof (*class_dev));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#133: FILE: drivers/base/power/sysfs.c:115:
+		strlcpy(class_dev->class_id, dev->bus_id, BUS_ID_SIZE);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: drivers/base/power/power.h:57:
+extern void dpm_notify(struct device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#164: FILE: drivers/base/power/power.h:57:
+extern void dpm_notify(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#175: FILE: drivers/base/init.c:17:
+extern int dpm_init(void);

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#202: FILE: include/linux/pm.h:238:
+	struct class_device	* class_dev;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285121.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 5 checks, 141 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285121.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
