WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: arch/ia64/kernel/mspec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#124: FILE: arch/ia64/kernel/mspec.c:51:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#125: FILE: arch/ia64/kernel/mspec.c:52:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: arch/ia64/kernel/mspec.c:63:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#153: FILE: arch/ia64/kernel/mspec.c:80:
+ * One of these structures is allocated when an mspec region is mmaped. The
                                                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: arch/ia64/kernel/mspec.c:111:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#185: FILE: arch/ia64/kernel/mspec.c:112:
+		memset((char *) addr, 0, len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vdata->maddr[i]'
#233: FILE: arch/ia64/kernel/mspec.c:160:
+					uncached_free_page(vdata->
+							   maddr[i]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mspec_stats.pages_in_use'
#235: FILE: arch/ia64/kernel/mspec.c:162:
+					atomic_dec(&mspec_stats.
+						   pages_in_use);

CHECK:BRACES: Unbalanced braces around else statement
#236: FILE: arch/ia64/kernel/mspec.c:163:
+				} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#237: FILE: arch/ia64/kernel/mspec.c:164:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_close', this function's name, in a string
#238: FILE: arch/ia64/kernel/mspec.c:165:
+					       "mspec_close(): "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#239: FILE: arch/ia64/kernel/mspec.c:166:
+					       "mspec_close(): "
+					       "failed to zero page %i\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:INLINE: plain inline is preferred over __inline__
#255: FILE: arch/ia64/kernel/mspec.c:182:
+static __inline__ int

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#256: FILE: arch/ia64/kernel/mspec.c:183:
+mspec_get_one_pte(struct mm_struct *mm, u64 address, pte_t ** page_table)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#269: FILE: arch/ia64/kernel/mspec.c:196:
+				if (pte_present(**page_table)) {
+					return 0;
+				}

CHECK:SPACING: No space is necessary after a cast
#295: FILE: arch/ia64/kernel/mspec.c:222:
+	if ((volatile unsigned long) vdata->maddr[index] == 0) {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#295: FILE: arch/ia64/kernel/mspec.c:222:
+	if ((volatile unsigned long) vdata->maddr[index] == 0) {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#332: FILE: arch/ia64/kernel/mspec.c:259:
+static struct vm_operations_struct mspec_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: arch/ia64/kernel/mspec.c:285:
+	if (!

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: arch/ia64/kernel/mspec.c:325:
+mspec_seq_start(struct seq_file *file, loff_t * offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: arch/ia64/kernel/mspec.c:333:
+mspec_seq_next(struct seq_file *file, void *data, loff_t * offset)

CHECK:SPACING: No space is necessary after a cast
#424: FILE: arch/ia64/kernel/mspec.c:351:
+	i = *(loff_t *) data;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#436: FILE: arch/ia64/kernel/mspec.c:363:
+static struct seq_operations mspec_seq_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#449: FILE: arch/ia64/kernel/mspec.c:376:
+static struct file_operations proc_mspec_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#460: FILE: arch/ia64/kernel/mspec.c:387:
+static struct file_operations fetchop_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#471: FILE: arch/ia64/kernel/mspec.c:398:
+static struct file_operations cached_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#482: FILE: arch/ia64/kernel/mspec.c:409:
+static struct file_operations uncached_fops = {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#508: FILE: arch/ia64/kernel/mspec.c:435:
+		if ((ret = misc_register(&fetchop_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#509: FILE: arch/ia64/kernel/mspec.c:436:
+			printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#515: FILE: arch/ia64/kernel/mspec.c:442:
+	if ((ret = misc_register(&cached_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#516: FILE: arch/ia64/kernel/mspec.c:443:
+		printk(KERN_ERR "%s: failed to register device %i\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#521: FILE: arch/ia64/kernel/mspec.c:448:
+	if ((ret = misc_register(&uncached_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#522: FILE: arch/ia64/kernel/mspec.c:449:
+		printk(KERN_ERR "%s: failed to register device %i\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#534: FILE: arch/ia64/kernel/mspec.c:461:
+	if (!(proc_mspec = create_proc_entry(MSPEC_BASENAME, 0444, NULL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#535: FILE: arch/ia64/kernel/mspec.c:462:
+		printk(KERN_ERR "%s: unable to create proc entry",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#545: FILE: arch/ia64/kernel/mspec.c:472:
+	printk(KERN_INFO "%s %s initialized devices: %s %s %s\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 21 warnings, 8 checks, 521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
