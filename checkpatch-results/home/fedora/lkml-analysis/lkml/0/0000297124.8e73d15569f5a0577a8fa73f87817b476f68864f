WARNING:TYPO_SPELLING: 'togheter' may be misspelled - perhaps 'together'?
#60: 
them togheter (even if the pg_off agrees) because the pages under vma2
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#103: 
--- sles-anobjrmap-2/include/linux/mm.h.~1~	2004-03-03 06:45:38.000000000 +0100

WARNING:NEW_TYPEDEFS: do not add new typedefs
#109: FILE: include/linux/mm.h:42:
+typedef struct anon_vma_s {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: include/linux/mm.h:99:
+	anon_vma_t * anon_vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: include/linux/mm.h:219:
+		struct address_space * mapping;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: include/linux/mm.h:226:
+		anon_vma_t * anon_vma;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: include/linux/mm.h:238:
+		struct vm_struct * vma;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: include/linux/mm.h:240:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: include/linux/mm.h:247:
+^Iunsigned long mapcount;^I^I$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#212: FILE: include/linux/mm.h:508:
+		    anon_vma_t ** anon_vma);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: include/linux/objrmap.h:14:
+extern kmem_cache_t * anon_vma_cachep;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#254: FILE: include/linux/objrmap.h:16:
+#define page_map_lock(page)	bit_spin_lock(PG_maplock, &page->flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#255: FILE: include/linux/objrmap.h:17:
+#define page_map_unlock(page)	bit_spin_unlock(PG_maplock, &page->flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: include/linux/objrmap.h:19:
+static inline void anon_vma_free(anon_vma_t * anon_vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: include/linux/objrmap.h:24:
+static inline anon_vma_t * anon_vma_alloc(void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: include/linux/objrmap.h:31:
+static inline void anon_vma_unlink(struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: include/linux/objrmap.h:33:
+	anon_vma_t * anon_vma = vma->anon_vma;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#291: FILE: include/linux/objrmap.h:43:
+void FASTCALL(page_add_rmap_fork(struct page *, struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#291: FILE: include/linux/objrmap.h:43:
+void FASTCALL(page_add_rmap_fork(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#291: FILE: include/linux/objrmap.h:43:
+void FASTCALL(page_add_rmap_fork(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'anon_vma_t **' should also have an identifier name
#291: FILE: include/linux/objrmap.h:43:
+void FASTCALL(page_add_rmap_fork(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#293: FILE: include/linux/objrmap.h:45:
+void FASTCALL(page_remove_rmap(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#299: FILE: include/linux/objrmap.h:51:
+int FASTCALL(page_referenced(struct page *));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#310: FILE: init/main.c:88:
+extern void anon_vma_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#329: FILE: kernel/fork.c:279:
+	anon_vma_t * anon_vma = NULL;

ERROR:SPACING: space prohibited after that open parenthesis '('
#421: FILE: mm/page_alloc.c:220:
+	if (	page->as.mapping != NULL ||

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->as.mapping"
#421: FILE: mm/page_alloc.c:220:
+	if (	page->as.mapping != NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/page_alloc.c:221:
+	if (	page->as.mapping != NULL ||
 		page_count(page) != 0 ||

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#490: FILE: mm/memory.c:211:
+		    anon_vma_t ** anon_vma)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: mm/memory.c:326:
+^I^I^I^I^Ispin_unlock(&src->page_table_lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: mm/memory.c:327:
+^I^I^I^I^Ispin_unlock(&dst->page_table_lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: mm/memory.c:329:
+^I^I^I^I^Ispin_lock(&dst->page_table_lock);^I$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#796: FILE: mm/objrmap.c:2:
+ *  mm/objrmap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#907: FILE: mm/objrmap.c:24:
+kmem_cache_t * anon_vma_cachep;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#965: FILE: mm/objrmap.c:136:
+	BUG_ON(!mapping);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#966: FILE: mm/objrmap.c:137:
+	BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#993: FILE: mm/objrmap.c:162:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#994: FILE: mm/objrmap.c:163:
+	BUG_ON(PageSwapCache(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1068: FILE: mm/objrmap.c:211:
+static void inline anon_vma_page_link(struct page * page, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1068: FILE: mm/objrmap.c:211:
+static void inline anon_vma_page_link(struct page * page, struct vm_area_struct * vma)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1068: FILE: mm/objrmap.c:211:
+static void inline anon_vma_page_link(struct page * page, struct vm_area_struct * vma)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1070: FILE: mm/objrmap.c:213:
+	BUG_ON(page->mapcount != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1071: FILE: mm/objrmap.c:214:
+	BUG_ON(PageDirect(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1078: FILE: mm/objrmap.c:221:
+static void inline anon_vma_page_link_fork(struct page * page, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1078: FILE: mm/objrmap.c:221:
+static void inline anon_vma_page_link_fork(struct page * page, struct vm_area_struct * vma,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1078: FILE: mm/objrmap.c:221:
+static void inline anon_vma_page_link_fork(struct page * page, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1079: FILE: mm/objrmap.c:222:
+					   struct vm_area_struct * orig_vma, anon_vma_t ** anon_vma)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1079: FILE: mm/objrmap.c:222:
+					   struct vm_area_struct * orig_vma, anon_vma_t ** anon_vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1081: FILE: mm/objrmap.c:224:
+	anon_vma_t * anon_vma = orig_vma->anon_vma;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1083: FILE: mm/objrmap.c:226:
+	BUG_ON(page->mapcount <= 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1084: FILE: mm/objrmap.c:227:
+	BUG_ON(!PageDirect(page));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1094: FILE: mm/objrmap.c:237:
+		orig_vma->anon_vma = vma->anon_vma = anon_vma;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1117: FILE: mm/objrmap.c:256:
+void fastcall page_add_rmap(struct page *page, struct vm_area_struct * vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1145: FILE: mm/objrmap.c:266:
+	if (PageAnon(page))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1147: FILE: mm/objrmap.c:268:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1153: FILE: mm/objrmap.c:274:
+		BUG_ON(!page->as.mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1154: FILE: mm/objrmap.c:275:
+		BUG_ON(PageSwapCache(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1164: FILE: mm/objrmap.c:282:
+void fastcall page_add_rmap_fork(struct page *page, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1165: FILE: mm/objrmap.c:283:
+				 struct vm_area_struct * orig_vma, anon_vma_t ** anon_vma)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1165: FILE: mm/objrmap.c:283:
+				 struct vm_area_struct * orig_vma, anon_vma_t ** anon_vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1187: FILE: mm/objrmap.c:293:
+	if (PageAnon(page))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1189: FILE: mm/objrmap.c:295:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: mm/objrmap.c:301:
+		BUG_ON(!page->as.mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1196: FILE: mm/objrmap.c:302:
+		BUG_ON(PageSwapCache(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1211: FILE: mm/objrmap.c:309:
+static void inline anon_vma_page_unlink(struct page * page)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1211: FILE: mm/objrmap.c:309:
+static void inline anon_vma_page_unlink(struct page * page)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1219: FILE: mm/objrmap.c:317:
+#if 0

CHECK:BRACES: braces {} should be used on all arms of this statement
#1278: FILE: mm/objrmap.c:349:
+	if (PageAnon(page))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1280: FILE: mm/objrmap.c:351:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1286: FILE: mm/objrmap.c:357:
+		BUG_ON(!page->as.mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1287: FILE: mm/objrmap.c:358:
+		BUG_ON(PageSwapCache(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1367: FILE: mm/objrmap.c:404:
+		swp_entry_t entry = { .val = page->index };
+		swap_duplicate(entry);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1369: FILE: mm/objrmap.c:406:
+		BUG_ON(pte_file(*pte));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1381: FILE: mm/objrmap.c:418:
+			BUG_ON(!pte_file(*pte));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1390: FILE: mm/objrmap.c:425:
+	BUG_ON(!page->mapcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1424: FILE: mm/objrmap.c:458:
+	BUG_ON(PageSwapCache(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1498: FILE: mm/objrmap.c:481:
+try_to_unmap_anon(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: mm/objrmap.c:491:
+		struct vm_area_struct * vma;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1532: FILE: mm/objrmap.c:492:
+		anon_vma_t * anon_vma = page->as.anon_vma;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1575: FILE: mm/objrmap.c:528:
+	BUG_ON(PageReserved(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1576: FILE: mm/objrmap.c:529:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1588: FILE: mm/objrmap.c:535:
+	BUG_ON(!page->as.mapping);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1793: FILE: mm/objrmap.c:557:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:SPACING: No space is necessary after a cast
#1795: FILE: mm/objrmap.c:559:
+		anon_vma_t * anon_vma = (anon_vma_t *) data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1795: FILE: mm/objrmap.c:559:
+		anon_vma_t * anon_vma = (anon_vma_t *) data;

ERROR:SPACING: space required before the open parenthesis '('
#1844: FILE: mm/objrmap.c:573:
+	if(!anon_vma_cachep)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 34 warnings, 13 checks, 1674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
