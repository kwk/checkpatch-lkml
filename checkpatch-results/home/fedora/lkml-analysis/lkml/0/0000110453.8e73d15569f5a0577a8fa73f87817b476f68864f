WARNING:TYPO_SPELLING: 'alwasy' may be misspelled - perhaps 'always'?
#44: 
updated whenever a task exits so that it is alwasy pointing
                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'exsit' may be misspelled - perhaps 'exist'?
#71: FILE: include/linux/pid.h:20:
+	/* Does a weak references of this type exsit to the task struct? */
 	                                       ^^^^^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#85: FILE: include/linux/sched.h:256:
+struct task_ref
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'vaule' may be misspelled - perhaps 'value'?
#93: FILE: include/linux/sched.h:264:
+ * word reads will keep any vaule you read consistent but it doesn't
                             ^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#101: FILE: include/linux/sched.h:272:
+#define TASK_REF(name) \
+	struct task_ref *name = TASK_REF_INIT

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/sched.h:275:
+extern void tref_put(struct task_ref *ref);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/sched.h:276:
+extern struct task_ref *tref_get(struct task_ref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/sched.h:277:
+extern struct task_ref *tref_get_by_task(task_t *task, enum pid_type type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/sched.h:278:
+extern struct task_ref *tref_get_by_pid(int who, enum pid_type type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/sched.h:279:
+extern void tref_set(struct task_ref **dst, struct task_ref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/sched.h:280:
+extern void tref_clear(struct task_ref **dst);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: kernel/fork.c:183:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: kernel/fork.c:185:
+	for(type = 0; type < PIDTYPE_MAX; type++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ref != &init_tref'
#188: FILE: kernel/pid.c:244:
+	if (ref && (ref != &init_tref) && atomic_dec_and_test(&ref->count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ref == &init_tref'
#214: FILE: kernel/pid.c:270:
+		if ((ref == &init_tref) && pid_alive(task)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: kernel/pid.c:272:
+			struct task_ref *new_ref;
+			new_ref = kmalloc(sizeof(*new_ref), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: kernel/pid.c:290:
+	task_t *task;
+	task = find_task_by_pid_type(type, who);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110453.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 9 checks, 170 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110453.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
