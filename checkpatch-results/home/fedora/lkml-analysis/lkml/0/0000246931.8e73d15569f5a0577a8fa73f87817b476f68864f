WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Ooops, here is the actual new patch with shut off for already in page cache.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#49: FILE: include/linux/mm.h:726:
+								 * turning readahead off */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#49: FILE: include/linux/mm.h:726:
+#define VM_MAX_CACHE_HIT    2560 /* max pages in a row in cache before
+								 * turning readahead off */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: include/linux/mm.h:732:
+unsigned long  page_cache_readahead(struct address_space *mapping, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#57: FILE: include/linux/mm.h:733:
+unsigned long  page_cache_readahead(struct address_space *mapping, 
 			  struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#83: FILE: include/linux/fs.h:569:
+#define RA_FLAG_MISS 0x01       /* a cache miss occured against this file */
                                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#83: FILE: include/linux/fs.h:569:
 };
+#define RA_FLAG_MISS 0x01       /* a cache miss occured against this file */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#104: FILE: mm/readahead.c:56:
+	ra->start=0;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#105: FILE: mm/readahead.c:57:
+	ra->flags=0;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#106: FILE: mm/readahead.c:58:
+	ra->size=-1UL;
 	        ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#106: FILE: mm/readahead.c:58:
+	ra->size=-1UL;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#107: FILE: mm/readahead.c:59:
+	ra->ahead_start=0;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#108: FILE: mm/readahead.c:60:
+	ra->ahead_size=0;
 	              ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#110: FILE: mm/readahead.c:62:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: mm/readahead.c:71:
+unsigned long get_init_ra_size(unsigned long size, unsigned long max,
+							   unsigned long min)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#121: FILE: mm/readahead.c:73:
+	unsigned long s_size=1, newsize;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: mm/readahead.c:74:
+	unsigned long s_size=1, newsize;
+	do {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#125: FILE: mm/readahead.c:77:
+	if (s_size <= max / 64) {
[...]
+	} else if (s_size <= max/4) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#127: FILE: mm/readahead.c:79:
+	} else if (s_size <= max/4) {
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: mm/readahead.c:88:
+ * Set the new window size, this is called only when $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: mm/readahead.c:93:
+unsigned long get_next_ra_size(unsigned long cur, unsigned long max, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: mm/readahead.c:94:
+unsigned long get_next_ra_size(unsigned long cur, unsigned long max, 
+							   unsigned long min, unsigned long * flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: mm/readahead.c:94:
+							   unsigned long min, unsigned long * flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: mm/readahead.c:97:
+	unsigned long newsize;
+	if (*flags & RA_FLAG_MISS) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: mm/readahead.c:98:
+		newsize = max((cur - 2),min);
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#148: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {
 	                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#148: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#148: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: mm/readahead.c:104:
+^I}            $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: mm/readahead.c:109:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: mm/readahead.c:212:
+ * to detect the resumption of sequential I/O.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: mm/readahead.c:219:
+ * new current window's pages are probably still locked.  So $

WARNING:TYPO_SPELLING: 'agressively' may be misspelled - perhaps 'aggressively'?
#204: FILE: mm/readahead.c:233:
+ * is time to submit a new IO.  The code ramps up the size agressively at first,
                                                            ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: mm/readahead.c:249:
+ * regardless of size unless readahead is unable to start enough I/O to satisfy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: mm/readahead.c:350:
+ * readahead isn't helping.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: mm/readahead.c:354:
+check_ra_success(struct file_ra_state *ra, unsigned long nr_to_read, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: mm/readahead.c:355:
+check_ra_success(struct file_ra_state *ra, unsigned long nr_to_read, 
+				 unsigned long actual)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#289: FILE: mm/readahead.c:364:
+		ra->cache_hit=0;
 		             ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#292: FILE: mm/readahead.c:367:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: mm/readahead.c:370:
+ * Issue the I/O. If pages already in cache, increment the hit count until $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#298: FILE: mm/readahead.c:373:
+int do_page_cache_readahead(struct address_space *mapping, struct file *filp,
                                                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/readahead.c:374:
+int do_page_cache_readahead(struct address_space *mapping, struct file *filp,
+			unsigned long offset, unsigned long nr_to_read)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#301: FILE: mm/readahead.c:376:
+	return  __do_page_cache_readahead(mapping, filp, offset, nr_to_read);
 	                                           ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: mm/readahead.c:379:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: mm/readahead.c:381:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: mm/readahead.c:386:
+unsigned long $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#315: FILE: mm/readahead.c:388:
+					 struct file *filp, unsigned long offset, 
 					              ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: mm/readahead.c:388:
+^I^I^I^I^I struct file *filp, unsigned long offset, $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#323: FILE: mm/readahead.c:391:
+	unsigned long max, min, maxsane, newsize=req_size;
 	                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#324: FILE: mm/readahead.c:392:
+	unsigned long actual=0;
 	                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#337: FILE: mm/readahead.c:400:
+	if (offset == ra->prev_page && req_size == 1 && ra->size != 0) {
+		goto out;
 	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: mm/readahead.c:406:
+^Imaxsane = max_sane_readahead(max); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: mm/readahead.c:420:
+^I^I|| (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#392: FILE: mm/readahead.c:420:
+	if ((ra->size == 0 && offset == 0)	 // first io	and start of file
+		|| (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#392: FILE: mm/readahead.c:420:
+		|| (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq 
 		                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#393: FILE: mm/readahead.c:421:
+		ra->prev_page  = offset + newsize-1;
 		                                 ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#396: FILE: mm/readahead.c:424:
+		actual = do_page_cache_readahead(mapping, filp, offset, ra->size);
 		                                          ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: mm/readahead.c:426:
+^I^I/* if the request size is larger than our max readahead, we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: mm/readahead.c:427:
+^I^I * at least want to be sure that we get 2 IOs if flight and $

WARNING:TYPO_SPELLING: 'definitly' may be misspelled - perhaps 'definitely'?
#400: FILE: mm/readahead.c:428:
+		 * we know that we will definitly need the new I/O.
 		                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#412: FILE: mm/readahead.c:435:
+			actual = do_page_cache_readahead(mapping, filp,
 			                                          ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#413: FILE: mm/readahead.c:436:
+											 ra->ahead_start, ra->ahead_size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: mm/readahead.c:436:
+			actual = do_page_cache_readahead(mapping, filp,
+											 ra->ahead_start, ra->ahead_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: mm/readahead.c:443:
+^I * partial page reads and first access were handled above, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: mm/readahead.c:446:
+	if ((offset != (ra->prev_page+1) || (ra->size == 0))) {
 	                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra->size == 0'
#431: FILE: mm/readahead.c:446:
+	if ((offset != (ra->prev_page+1) || (ra->size == 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#433: FILE: mm/readahead.c:448:
+		ra->prev_page  = offset + newsize-1;
 		                                 ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#434: FILE: mm/readahead.c:449:
+		actual = do_page_cache_readahead(mapping, filp, offset, newsize);
 		                                          ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: mm/readahead.c:454:
+^I/* If we get here we are doing sequential IO and this was $

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#442: FILE: mm/readahead.c:455:
+	 * not the first occurence (ie we have an existing window)
 	                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#506: FILE: mm/readahead.c:462:
+		actual = do_page_cache_readahead(mapping, filp,
 		                                          ^^^^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#507: FILE: mm/readahead.c:463:
+										 ra->ahead_start, ra->ahead_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: mm/readahead.c:463:
+		actual = do_page_cache_readahead(mapping, filp,
+										 ra->ahead_start, ra->ahead_size);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#525: FILE: mm/readahead.c:467:
+		if ((offset + newsize -1) >= ra->ahead_start) {
 		                      ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#530: FILE: mm/readahead.c:472:
+											  max, min, &ra->flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: mm/readahead.c:472:
+			ra->ahead_size = get_next_ra_size(ra->ahead_size,
+											  max, min, &ra->flags);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#532: FILE: mm/readahead.c:474:
+			actual = do_page_cache_readahead(mapping, filp,
 			                                          ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#533: FILE: mm/readahead.c:475:
+											 ra->ahead_start, ra->ahead_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: mm/readahead.c:475:
+			actual = do_page_cache_readahead(mapping, filp,
+											 ra->ahead_start, ra->ahead_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: mm/readahead.c:478:
+^I^I^I/* do nothing, read contained in current window and ahead $

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#551: FILE: mm/readahead.c:481:
+			ra->prev_page = offset + newsize -1;
 			                                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#556: FILE: mm/readahead.c:484:
+	out:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: mm/readahead.c:492:
+ * thrashing) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: mm/readahead.c:500:
+^Ira->flags |= RA_FLAG_MISS;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: mm/readahead.c:501:
+^Ira->flags &= ~RA_FLAG_INCACHE;  $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#628: FILE: mm/filemap.c:727:
+	next_index = index = *ppos >> PAGE_CACHE_SHIFT;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: mm/filemap.c:753:
+		if(index == next_index && req_size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: mm/filemap.c:754:
+^I^I^Iret_size = page_cache_readahead(mapping, &ra, $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#649: FILE: mm/filemap.c:755:
+					filp, index, req_size);
 					^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: mm/filemap.c:755:
+			ret_size = page_cache_readahead(mapping, &ra, 
+					filp, index, req_size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246931.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 27 warnings, 25 checks, 603 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246931.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
