WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Along with client registration and DMA channel allocation, the main APIs are:

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: drivers/dma/Kconfig:7:
+config DMA_ENGINE
+	bool "Support for DMA engines"
+	---help---
+	  DMA engines offload copy operations from the CPU to dedicated
+	  hardware, allowing the copies to happen asynchronously.
+
+comment "DMA Clients"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: drivers/dma/Kconfig:15:
+config NET_DMA
+	bool "Network: TCP receive copy offload"
+	depends on DMA_ENGINE
+	default y
+	---help---
+	  This enables the use of DMA engines in the network stack to
+	  offload receive copy-to-user operations, freeing CPU cycles.
+	  Since this is the main user of the DMA engine, it should be enabled;
+	  say Y here.
+
+comment "DMA Devices"
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/dma/Kconfig:27:
+config INTEL_IOATDMA
+	tristate "Intel I/OAT DMA support"
+	depends on DMA_ENGINE
+	default m
+	---help---
+	  Enable support for the Intel I/OAT DMA engine.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: include/linux/dmaengine.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#107: FILE: include/linux/dmaengine.h:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2005 Intel Corporation. All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: include/linux/dmaengine.h:4:
+This program is free software; you can redistribute it and/or modify it $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/linux/dmaengine.h:5:
+under the terms of the GNU General Public License as published by the Free $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: include/linux/dmaengine.h:6:
+Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: include/linux/dmaengine.h:9:
+This program is distributed in the hope that it will be useful, but WITHOUT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: include/linux/dmaengine.h:10:
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: include/linux/dmaengine.h:11:
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: include/linux/dmaengine.h:15:
+this program; if not, write to the Free Software Foundation, Inc., 59 $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#120: FILE: include/linux/dmaengine.h:15:
+this program; if not, write to the Free Software Foundation, Inc., 59 $

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#134: FILE: include/linux/dmaengine.h:29:
+ * enum dma_event - resource PNP/power managment events
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#181: FILE: include/linux/dmaengine.h:76:
+struct dma_chan
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#230: FILE: include/linux/dmaengine.h:125:
+struct dma_device {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: include/linux/dmaengine.h:135:
+	dma_cookie_t (*device_memcpy_buf_to_buf)(struct dma_chan *chan,
+			void *dest, void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/dmaengine.h:137:
+	dma_cookie_t (*device_memcpy_buf_to_pg)(struct dma_chan *chan,
+			struct page *page, unsigned int offset, void *kdata,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: include/linux/dmaengine.h:140:
+	dma_cookie_t (*device_memcpy_pg_to_pg)(struct dma_chan *chan,
+			struct page *dest_pg, unsigned int dest_off,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: include/linux/dmaengine.h:143:
+^I^I^Idma_cookie_t cookie, dma_cookie_t *last, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: include/linux/dmaengine.h:143:
+	enum dma_status (*device_memcpy_complete)(struct dma_chan *chan,
+			dma_cookie_t cookie, dma_cookie_t *last, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: include/linux/dmaengine.h:153:
+void dma_async_client_chan_request(struct dma_client *client,
+		unsigned int number);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: include/linux/dmaengine.h:155:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan, void *dest,
+		void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: include/linux/dmaengine.h:157:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+		struct page *page, unsigned int offset, void *kdata, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: include/linux/dmaengine.h:159:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+		struct page *dest_pg, unsigned int dest_off,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dma_chan *' should also have an identifier name
#266: FILE: include/linux/dmaengine.h:161:
+void dma_async_memcpy_issue_pending(struct dma_chan *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: include/linux/dmaengine.h:163:
+enum dma_status dma_async_wait_for_completion(struct dma_chan *chan,
+		dma_cookie_t cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: include/linux/dmaengine.h:165:
+enum dma_status dma_async_memcpy_complete(struct dma_chan *chan,
+		dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used);

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#279: FILE: include/linux/dmaengine.h:174:
+ * the test logic is seperated for lightweight testing of multiple cookies
                      ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: include/linux/dmaengine.h:177:
+static inline enum dma_status dma_async_is_complete(dma_cookie_t cookie,
+			dma_cookie_t last_complete, dma_cookie_t last_used) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#284: FILE: include/linux/dmaengine.h:179:
+		if ((cookie <= last_complete) || (cookie > last_used))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#284: FILE: include/linux/dmaengine.h:179:
+		if ((cookie <= last_complete) || (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#287: FILE: include/linux/dmaengine.h:182:
+		if ((cookie <= last_complete) && (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#287: FILE: include/linux/dmaengine.h:182:
+		if ((cookie <= last_complete) && (cookie > last_used))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: include/linux/dmaengine.h:188:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#304: FILE: include/linux/dmaengine.h:199:
+struct dma_page_list
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#311: FILE: include/linux/dmaengine.h:206:
+struct dma_locked_list
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: include/linux/dmaengine.h:212:
+int dma_lock_iovec_pages(struct iovec *iov, size_t len,
+		struct dma_locked_list **locked_list);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#318: FILE: include/linux/dmaengine.h:213:
+void dma_unlock_iovec_pages(struct dma_locked_list* locked_list);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#319: FILE: include/linux/dmaengine.h:214:
+int dma_skb_copy_datagram_iovec(struct dma_chan* chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: include/linux/dmaengine.h:215:
+int dma_skb_copy_datagram_iovec(struct dma_chan* chan,
+		const struct sk_buff *skb, int offset, struct iovec *to,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: drivers/dma/dmaengine.c:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#330: FILE: drivers/dma/dmaengine.c:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2005 Intel Corporation. All rights reserved.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: drivers/dma/dmaengine.c:4:
+This program is free software; you can redistribute it and/or modify it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: drivers/dma/dmaengine.c:5:
+under the terms of the GNU General Public License as published by the Free $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: drivers/dma/dmaengine.c:6:
+Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: drivers/dma/dmaengine.c:9:
+This program is distributed in the hope that it will be useful, but WITHOUT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: drivers/dma/dmaengine.c:10:
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/dma/dmaengine.c:11:
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: drivers/dma/dmaengine.c:15:
+this program; if not, write to the Free Software Foundation, Inc., 59 $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#343: FILE: drivers/dma/dmaengine.c:15:
+this program; if not, write to the Free Software Foundation, Inc., 59 $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#387: FILE: drivers/dma/dmaengine.c:59:
+	__ATTR(memcpy_count, S_IRUGO, show_memcpy_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#388: FILE: drivers/dma/dmaengine.c:60:
+	__ATTR(bytes_transferred, S_IRUGO, show_bytes_transferred, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#389: FILE: drivers/dma/dmaengine.c:61:
+	__ATTR(in_use, S_IRUGO, show_in_use, NULL),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: drivers/dma/dmaengine.c:76:
+static struct dma_chan * dma_client_chan_alloc(struct dma_client *client)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#448: FILE: drivers/dma/dmaengine.c:120:
+	list_for_each_entry(client, &dma_client_list, global_node) {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: drivers/dma/dmaengine.c:144:
+struct dma_client * dma_async_client_register(dma_event_callback event_callback)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: drivers/dma/dmaengine.c:198:
+void dma_async_client_chan_request(struct dma_client *client,
+			unsigned int number)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: drivers/dma/dmaengine.c:213:
+ * Both @dest and @src must stay memory resident (kernel memory or locked $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/dma/dmaengine.c:217:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan, void *dest,
+			void *src, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/dma/dmaengine.c:239:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+			struct page *page, unsigned int offset, void *kdata,

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: drivers/dma/dmaengine.c:246:
+^I                                             kdata, len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/dma/dmaengine.c:264:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+			struct page *dest_pg, unsigned int dest_off,

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: drivers/dma/dmaengine.c:271:
+^I                                            src_pg, src_off, len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/dma/dmaengine.c:298:
+enum dma_status dma_async_memcpy_complete(struct dma_chan *chan,
+			dma_cookie_t cookie, dma_cookie_t *last,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#640: FILE: drivers/dma/dmaengine.c:312:
+	struct dma_chan* chan;

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: drivers/dma/dmaengine.c:329:
+^I^I         device->dev_id, chan->chan_id);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#669: FILE: drivers/dma/dmaengine.c:341:
+void dma_async_device_unregister(struct dma_device* device)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/dma/dmaengine.c:366:
+enum dma_status dma_async_wait_for_completion(struct dma_chan *chan,
+			dma_cookie_t cookie)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#709: FILE: drivers/dma/dmaengine.c:381:
+EXPORT_SYMBOL(dma_async_client_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#710: FILE: drivers/dma/dmaengine.c:382:
+EXPORT_SYMBOL(dma_async_client_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#711: FILE: drivers/dma/dmaengine.c:383:
+EXPORT_SYMBOL(dma_async_client_chan_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#712: FILE: drivers/dma/dmaengine.c:384:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_buf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#713: FILE: drivers/dma/dmaengine.c:385:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#714: FILE: drivers/dma/dmaengine.c:386:
+EXPORT_SYMBOL(dma_async_memcpy_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#715: FILE: drivers/dma/dmaengine.c:387:
+EXPORT_SYMBOL(dma_async_memcpy_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#716: FILE: drivers/dma/dmaengine.c:388:
+EXPORT_SYMBOL(dma_async_memcpy_issue_pending);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#717: FILE: drivers/dma/dmaengine.c:389:
+EXPORT_SYMBOL(dma_async_device_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#718: FILE: drivers/dma/dmaengine.c:390:
+EXPORT_SYMBOL(dma_async_device_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#719: FILE: drivers/dma/dmaengine.c:391:
+EXPORT_SYMBOL(dma_async_wait_for_completion);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123608.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 25 warnings, 26 checks, 658 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123608.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
