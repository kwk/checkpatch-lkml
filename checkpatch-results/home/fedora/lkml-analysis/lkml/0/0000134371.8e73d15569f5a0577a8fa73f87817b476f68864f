WARNING:TYPO_SPELLING: 'Caculate' may be misspelled - perhaps 'Calculate'?
#43: FILE: mm/mempolicy.c:1008:
+/* Caculate a node number for interleave */
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#44: FILE: mm/mempolicy.c:1009:
+static inline unsigned interleave_nid(struct mempolicy *pol,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#45: FILE: mm/mempolicy.c:1010:
+static inline unsigned interleave_nid(struct mempolicy *pol,
+		 struct vm_area_struct *vma, unsigned long addr, int shift)

CHECK:BRACES: braces {} should be used on all arms of this statement
#47: FILE: mm/mempolicy.c:1012:
+	if (vma) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#53: FILE: mm/mempolicy.c:1018:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#63: FILE: mm/mempolicy.c:1028:
+		unsigned nid;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: mm/hugetlb.c:37:
+static struct page *dequeue_huge_page(struct vm_area_struct *vma,
+				unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: mm/hugetlb.c:383:
+static struct page *find_or_alloc_huge_page(struct vm_area_struct *vma,
+			unsigned long addr, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: mm/hugetlb.c:486:
+	page = find_or_alloc_huge_page(vma, address, mapping, idx,
 			vma->vm_flags & VM_SHARED);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/mempolicy.h:161:
+extern struct zonelist *huge_zonelist(struct vm_area_struct *vma,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: include/linux/mempolicy.h:162:
+extern struct zonelist *huge_zonelist(struct vm_area_struct *vma,
+		unsigned long addr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#197: FILE: include/linux/hugetlb.h:25:
+struct page *alloc_huge_page(struct vm_area_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#197: FILE: include/linux/hugetlb.h:25:
+struct page *alloc_huge_page(struct vm_area_struct *, unsigned long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 5 warnings, 8 checks, 147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
