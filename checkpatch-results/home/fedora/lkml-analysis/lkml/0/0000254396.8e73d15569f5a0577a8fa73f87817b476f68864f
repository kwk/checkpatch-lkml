WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
       m32r-g00ff is newly written by NIIBE Yutaka and is released under GPL.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: arch/m32r/boot/compressed/Makefile:19:
+LDFLAGS_vmlinux := -T $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#341: FILE: arch/m32r/boot/compressed/misc.c:93:
+extern int puts(const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#341: FILE: arch/m32r/boot/compressed/misc.c:93:
+extern int puts(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:INLINE: plain inline is preferred over __inline__
#533: FILE: arch/m32r/kernel/io_m32700ut.c:44:
+static __inline__ void *__port2addr_ata(unsigned long port)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#547: FILE: arch/m32r/kernel/io_m32700ut.c:58:
+^Idefault: ^Ireturn (void *)&dummy_reg;$

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#560: FILE: arch/m32r/kernel/io_m32700ut.c:123:
+	else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#561: FILE: arch/m32r/kernel/io_m32700ut.c:124:
+		return *(volatile unsigned char *)__port2addr_ata(port);

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#572: FILE: arch/m32r/kernel/io_m32700ut.c:143:
+	else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#572: FILE: arch/m32r/kernel/io_m32700ut.c:143:
+	else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
+		return *(volatile unsigned short *)__port2addr_ata(port);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#573: FILE: arch/m32r/kernel/io_m32700ut.c:144:
+		return *(volatile unsigned short *)__port2addr_ata(port);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#583: FILE: arch/m32r/kernel/io_m32700ut.c:152:
+	else if (port >= M32R_PCC_IOSTART0 && port <= M32R_PCC_IOEND0) {
 	   unsigned short w;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#590: FILE: arch/m32r/kernel/io_m32700ut.c:179:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#592: FILE: arch/m32r/kernel/io_m32700ut.c:181:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#593: FILE: arch/m32r/kernel/io_m32700ut.c:182:
+		return *(volatile unsigned char *)__port2addr_ata(port);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#594: FILE: arch/m32r/kernel/io_m32700ut.c:183:
+		return *(volatile unsigned char *)__port2addr_ata(port);
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#594: FILE: arch/m32r/kernel/io_m32700ut.c:183:
+	} else
[...]
 	if (port >= M32R_PCC_IOSTART0 && port <= M32R_PCC_IOEND0) {

CHECK:BRACES: Unbalanced braces around else statement
#594: FILE: arch/m32r/kernel/io_m32700ut.c:183:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#602: FILE: arch/m32r/kernel/io_m32700ut.c:204:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#604: FILE: arch/m32r/kernel/io_m32700ut.c:206:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#605: FILE: arch/m32r/kernel/io_m32700ut.c:207:
+		return *(volatile unsigned short *)__port2addr_ata(port);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#606: FILE: arch/m32r/kernel/io_m32700ut.c:208:
+		return *(volatile unsigned short *)__port2addr_ata(port);
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#606: FILE: arch/m32r/kernel/io_m32700ut.c:208:
+	} else
[...]
 	  if(port >= 0x340 && port < 0x3a0)

CHECK:BRACES: Unbalanced braces around else statement
#606: FILE: arch/m32r/kernel/io_m32700ut.c:208:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#620: FILE: arch/m32r/kernel/io_m32700ut.c:241:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#622: FILE: arch/m32r/kernel/io_m32700ut.c:243:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#623: FILE: arch/m32r/kernel/io_m32700ut.c:244:
+		*(volatile unsigned char *)__port2addr_ata(port) = b;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#624: FILE: arch/m32r/kernel/io_m32700ut.c:245:
+	} else
[...]
 	if (port >= M32R_PCC_IOSTART0 && port <= M32R_PCC_IOEND0) {

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: arch/m32r/kernel/io_m32700ut.c:245:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#632: FILE: arch/m32r/kernel/io_m32700ut.c:259:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#634: FILE: arch/m32r/kernel/io_m32700ut.c:261:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#635: FILE: arch/m32r/kernel/io_m32700ut.c:262:
+		*(volatile unsigned short *)__port2addr_ata(port) = w;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#636: FILE: arch/m32r/kernel/io_m32700ut.c:263:
+	} else
[...]
 	if(port >= 0x340 && port < 0x3a0)

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: arch/m32r/kernel/io_m32700ut.c:263:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#650: FILE: arch/m32r/kernel/io_m32700ut.c:292:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#652: FILE: arch/m32r/kernel/io_m32700ut.c:294:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#653: FILE: arch/m32r/kernel/io_m32700ut.c:295:
+		*(volatile unsigned char *)__port2addr_ata(port) = b;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#654: FILE: arch/m32r/kernel/io_m32700ut.c:296:
+	} else
[...]
 	if (port >= M32R_PCC_IOSTART0 && port <= M32R_PCC_IOEND0) {

CHECK:BRACES: Unbalanced braces around else statement
#654: FILE: arch/m32r/kernel/io_m32700ut.c:296:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#662: FILE: arch/m32r/kernel/io_m32700ut.c:312:
 	else
[...]
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#664: FILE: arch/m32r/kernel/io_m32700ut.c:314:
+	if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#665: FILE: arch/m32r/kernel/io_m32700ut.c:315:
+		*(volatile unsigned short *)__port2addr_ata(port) = w;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#666: FILE: arch/m32r/kernel/io_m32700ut.c:316:
+	} else
[...]
 	  if(port >= 0x340 && port < 0x3a0)

CHECK:BRACES: Unbalanced braces around else statement
#666: FILE: arch/m32r/kernel/io_m32700ut.c:316:
+	} else

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#682: FILE: arch/m32r/kernel/io_m32700ut.c:344:
+	else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#685: FILE: arch/m32r/kernel/io_m32700ut.c:347:
+		unsigned char *portp = __port2addr_ata(port);
+		while(count--) *buf++ = *(volatile unsigned char *)portp;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#685: FILE: arch/m32r/kernel/io_m32700ut.c:347:
+		while(count--) *buf++ = *(volatile unsigned char *)portp;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#685: FILE: arch/m32r/kernel/io_m32700ut.c:347:
+		while(count--) *buf++ = *(volatile unsigned char *)portp;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#685: FILE: arch/m32r/kernel/io_m32700ut.c:347:
+		while(count--) *buf++ = *(volatile unsigned char *)portp;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#696: FILE: arch/m32r/kernel/io_m32700ut.c:379:
+	} else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#698: FILE: arch/m32r/kernel/io_m32700ut.c:381:
+		while (count--) *buf++ = *(volatile unsigned short *)portp;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#698: FILE: arch/m32r/kernel/io_m32700ut.c:381:
+		while (count--) *buf++ = *(volatile unsigned short *)portp;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#708: FILE: arch/m32r/kernel/io_m32700ut.c:407:
+	} else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#710: FILE: arch/m32r/kernel/io_m32700ut.c:409:
+		while(count--) *(volatile unsigned char *)portp = *buf++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#710: FILE: arch/m32r/kernel/io_m32700ut.c:409:
+		while(count--) *(volatile unsigned char *)portp = *buf++;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#710: FILE: arch/m32r/kernel/io_m32700ut.c:409:
+		while(count--) *(volatile unsigned char *)portp = *buf++;

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#720: FILE: arch/m32r/kernel/io_m32700ut.c:434:
+	} else if ((port >= 0x1f0 && port <=0x1f7) || port == 0x3f6) {
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#722: FILE: arch/m32r/kernel/io_m32700ut.c:436:
+		while(count--) *(volatile unsigned short *)portp = *buf++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#722: FILE: arch/m32r/kernel/io_m32700ut.c:436:
+		while(count--) *(volatile unsigned short *)portp = *buf++;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#722: FILE: arch/m32r/kernel/io_m32700ut.c:436:
+		while(count--) *(volatile unsigned short *)portp = *buf++;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#908: FILE: arch/m32r/kernel/traps.c:41:
+extern void smp_invalidate_interrupt(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#909: FILE: arch/m32r/kernel/traps.c:42:
+extern void smp_call_function_interrupt(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#910: FILE: arch/m32r/kernel/traps.c:43:
+extern void smp_ipi_timer_interrupt(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#911: FILE: arch/m32r/kernel/traps.c:44:
+extern void smp_flush_cache_all_interrupt(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#921: FILE: arch/m32r/kernel/traps.c:61:
+#define BRA_INSN(func, entry)	\
+	((unsigned long)func - (unsigned long)eit_vector - entry*4)/4 \
+	+ 0xff000000UL

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'func' may be better as '(func)' to avoid precedence issues
#921: FILE: arch/m32r/kernel/traps.c:61:
+#define BRA_INSN(func, entry)	\
+	((unsigned long)func - (unsigned long)eit_vector - entry*4)/4 \
+	+ 0xff000000UL

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entry' may be better as '(entry)' to avoid precedence issues
#921: FILE: arch/m32r/kernel/traps.c:61:
+#define BRA_INSN(func, entry)	\
+	((unsigned long)func - (unsigned long)eit_vector - entry*4)/4 \
+	+ 0xff000000UL

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#922: FILE: arch/m32r/kernel/traps.c:62:
+	((unsigned long)func - (unsigned long)eit_vector - entry*4)/4 \
 	                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#922: FILE: arch/m32r/kernel/traps.c:62:
+	((unsigned long)func - (unsigned long)eit_vector - entry*4)/4 \
 	                                                           ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#927: FILE: arch/m32r/kernel/traps.c:67:
+	extern void default_eit_handler(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#928: FILE: arch/m32r/kernel/traps.c:68:
+	extern void system_call(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#929: FILE: arch/m32r/kernel/traps.c:69:
+	extern void pie_handler(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#930: FILE: arch/m32r/kernel/traps.c:70:
+	extern void ace_handler(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#931: FILE: arch/m32r/kernel/traps.c:71:
+	extern void tme_handler(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#932: FILE: arch/m32r/kernel/traps.c:72:
+	extern void _flush_cache_copyback_all(void);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1029: FILE: include/asm-m32r/ide.h:37:
 	switch (base) {
[...]
+		case 0x1f0: return PLD_IRQ_CFIREQ;
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1102: FILE: include/asm-m32r/uaccess.h:257:
+                "1:     st %L1,@%2\n"                                    \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: include/asm-m32r/uaccess.h:257:
+                "1:     st %L1,@%2\n"                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: include/asm-m32r/uaccess.h:259:
+                "2:     st %H1,@(4,%2)\n"                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: include/asm-m32r/uaccess.h:259:
+                "2:     st %H1,@(4,%2)\n"                                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: include/asm-m32r/uaccess.h:264:
+                "4:     ldi %0,%3\n"                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: include/asm-m32r/uaccess.h:264:
+                "4:     ldi %0,%3\n"                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1122: FILE: include/asm-m32r/uaccess.h:275:
+                : "r"(x), "r"(addr), "i"(-EFAULT), "0"(err)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: include/asm-m32r/uaccess.h:275:
+                : "r"(x), "r"(addr), "i"(-EFAULT), "0"(err)^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 48 warnings, 10 checks, 980 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
