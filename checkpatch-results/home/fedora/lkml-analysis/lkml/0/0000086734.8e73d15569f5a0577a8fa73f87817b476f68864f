CHECK:CAMELCASE: Avoid CamelCase: <QSettings>
#757: FILE: scripts/kconfig/qconf.h:10:
+class QSettings {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#759: FILE: scripts/kconfig/qconf.h:12:
+	void beginGroup(const QString& group) { }
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <beginGroup>
#759: FILE: scripts/kconfig/qconf.h:12:
+	void beginGroup(const QString& group) { }

CHECK:CAMELCASE: Avoid CamelCase: <QString>
#759: FILE: scripts/kconfig/qconf.h:12:
+	void beginGroup(const QString& group) { }

CHECK:CAMELCASE: Avoid CamelCase: <endGroup>
#760: FILE: scripts/kconfig/qconf.h:13:
+	void endGroup(void) { }

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#761: FILE: scripts/kconfig/qconf.h:14:
+	bool readBoolEntry(const QString& key, bool def = FALSE, bool* ok = 0) const

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#761: FILE: scripts/kconfig/qconf.h:14:
+	bool readBoolEntry(const QString& key, bool def = FALSE, bool* ok = 0) const
 	                                ^

CHECK:CAMELCASE: Avoid CamelCase: <readBoolEntry>
#761: FILE: scripts/kconfig/qconf.h:14:
+	bool readBoolEntry(const QString& key, bool def = FALSE, bool* ok = 0) const

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#763: FILE: scripts/kconfig/qconf.h:16:
+	int readNumEntry(const QString& key, int def = 0, bool* ok = 0) const

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#763: FILE: scripts/kconfig/qconf.h:16:
+	int readNumEntry(const QString& key, int def = 0, bool* ok = 0) const
 	                              ^

CHECK:CAMELCASE: Avoid CamelCase: <readNumEntry>
#763: FILE: scripts/kconfig/qconf.h:16:
+	int readNumEntry(const QString& key, int def = 0, bool* ok = 0) const

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#765: FILE: scripts/kconfig/qconf.h:18:
+	QString readEntry(const QString& key, const QString& def = QString::null, bool* ok = 0) const

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#765: FILE: scripts/kconfig/qconf.h:18:
+	QString readEntry(const QString& key, const QString& def = QString::null, bool* ok = 0) const

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#765: FILE: scripts/kconfig/qconf.h:18:
+	QString readEntry(const QString& key, const QString& def = QString::null, bool* ok = 0) const
 	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#765: FILE: scripts/kconfig/qconf.h:18:
+	QString readEntry(const QString& key, const QString& def = QString::null, bool* ok = 0) const
 	                                                   ^

CHECK:CAMELCASE: Avoid CamelCase: <readEntry>
#765: FILE: scripts/kconfig/qconf.h:18:
+	QString readEntry(const QString& key, const QString& def = QString::null, bool* ok = 0) const

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#767: FILE: scripts/kconfig/qconf.h:20:
+	QStringList readListEntry(const QString& key, bool* ok = 0) const

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#767: FILE: scripts/kconfig/qconf.h:20:
+	QStringList readListEntry(const QString& key, bool* ok = 0) const
 	                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <QStringList>
#767: FILE: scripts/kconfig/qconf.h:20:
+	QStringList readListEntry(const QString& key, bool* ok = 0) const

CHECK:CAMELCASE: Avoid CamelCase: <readListEntry>
#767: FILE: scripts/kconfig/qconf.h:20:
+	QStringList readListEntry(const QString& key, bool* ok = 0) const

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#769: FILE: scripts/kconfig/qconf.h:22:
+	template <class t>
 	         ^

ERROR:SPACING: spaces required around that '>' (ctx:VxE)
#769: FILE: scripts/kconfig/qconf.h:22:
+	template <class t>
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#770: FILE: scripts/kconfig/qconf.h:23:
+	bool writeEntry(const QString& key, t value)
 	                             ^

CHECK:CAMELCASE: Avoid CamelCase: <writeEntry>
#770: FILE: scripts/kconfig/qconf.h:23:
+	bool writeEntry(const QString& key, t value)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#770: FILE: scripts/kconfig/qconf.h:23:
+	bool writeEntry(const QString& key, t value)
+	{ return TRUE; }

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <ConfigView>
#775: FILE: scripts/kconfig/qconf.h:28:
+class ConfigView;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#820: FILE: scripts/kconfig/qconf.h:52:
+	ConfigList(ConfigView* p, const char *name = 0);
 	                     ^

CHECK:CAMELCASE: Avoid CamelCase: <ConfigList>
#820: FILE: scripts/kconfig/qconf.h:52:
+	ConfigList(ConfigView* p, const char *name = 0);

CHECK:CAMELCASE: Avoid CamelCase: <contextMenuEvent>
#828: FILE: scripts/kconfig/qconf.h:66:
+	void contextMenuEvent(QContextMenuEvent *e);

CHECK:CAMELCASE: Avoid CamelCase: <QContextMenuEvent>
#828: FILE: scripts/kconfig/qconf.h:66:
+	void contextMenuEvent(QContextMenuEvent *e);

CHECK:CAMELCASE: Avoid CamelCase: <saveSettings>
#837: FILE: scripts/kconfig/qconf.h:75:
+	void saveSettings(void);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#845: FILE: scripts/kconfig/qconf.h:131:
+	QPopupMenu* headerPopup;

CHECK:CAMELCASE: Avoid CamelCase: <QPopupMenu>
#845: FILE: scripts/kconfig/qconf.h:131:
+	QPopupMenu* headerPopup;

CHECK:CAMELCASE: Avoid CamelCase: <headerPopup>
#845: FILE: scripts/kconfig/qconf.h:131:
+	QPopupMenu* headerPopup;

CHECK:CAMELCASE: Avoid CamelCase: <QVBox>
#853: FILE: scripts/kconfig/qconf.h:215:
+class ConfigView : public QVBox {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#855: FILE: scripts/kconfig/qconf.h:217:
+	typedef class QVBox Parent;

CHECK:CAMELCASE: Avoid CamelCase: <Parent>
#855: FILE: scripts/kconfig/qconf.h:217:
+	typedef class QVBox Parent;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#857: FILE: scripts/kconfig/qconf.h:219:
+	ConfigView(QWidget* parent, const char *name = 0);
 	                  ^

CHECK:CAMELCASE: Avoid CamelCase: <QWidget>
#857: FILE: scripts/kconfig/qconf.h:219:
+	ConfigView(QWidget* parent, const char *name = 0);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#859: FILE: scripts/kconfig/qconf.h:221:
+	static void updateList(ConfigItem* item);

CHECK:CAMELCASE: Avoid CamelCase: <updateList>
#859: FILE: scripts/kconfig/qconf.h:221:
+	static void updateList(ConfigItem* item);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigItem>
#859: FILE: scripts/kconfig/qconf.h:221:
+	static void updateList(ConfigItem* item);

CHECK:CAMELCASE: Avoid CamelCase: <updateListAll>
#860: FILE: scripts/kconfig/qconf.h:222:
+	static void updateListAll(void);

CHECK:CAMELCASE: Avoid CamelCase: <showAll>
#862: FILE: scripts/kconfig/qconf.h:224:
+	bool showAll(void) const { return list->showAll; }

CHECK:CAMELCASE: Avoid CamelCase: <showName>
#863: FILE: scripts/kconfig/qconf.h:225:
+	bool showName(void) const { return list->showName; }

CHECK:CAMELCASE: Avoid CamelCase: <showRange>
#864: FILE: scripts/kconfig/qconf.h:226:
+	bool showRange(void) const { return list->showRange; }

CHECK:CAMELCASE: Avoid CamelCase: <showData>
#865: FILE: scripts/kconfig/qconf.h:227:
+	bool showData(void) const { return list->showData; }

CHECK:CAMELCASE: Avoid CamelCase: <setShowAll>
#867: FILE: scripts/kconfig/qconf.h:229:
+	void setShowAll(bool);

CHECK:CAMELCASE: Avoid CamelCase: <setShowName>
#868: FILE: scripts/kconfig/qconf.h:230:
+	void setShowName(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#868: FILE: scripts/kconfig/qconf.h:230:
+	void setShowName(bool);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <setShowRange>
#869: FILE: scripts/kconfig/qconf.h:231:
+	void setShowRange(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#869: FILE: scripts/kconfig/qconf.h:231:
+	void setShowRange(bool);

CHECK:CAMELCASE: Avoid CamelCase: <setShowData>
#870: FILE: scripts/kconfig/qconf.h:232:
+	void setShowData(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#870: FILE: scripts/kconfig/qconf.h:232:
+	void setShowData(bool);

CHECK:CAMELCASE: Avoid CamelCase: <showAllChanged>
#872: FILE: scripts/kconfig/qconf.h:234:
+	void showAllChanged(bool);

CHECK:CAMELCASE: Avoid CamelCase: <showNameChanged>
#873: FILE: scripts/kconfig/qconf.h:235:
+	void showNameChanged(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#873: FILE: scripts/kconfig/qconf.h:235:
+	void showNameChanged(bool);

CHECK:CAMELCASE: Avoid CamelCase: <showRangeChanged>
#874: FILE: scripts/kconfig/qconf.h:236:
+	void showRangeChanged(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#874: FILE: scripts/kconfig/qconf.h:236:
+	void showRangeChanged(bool);

CHECK:CAMELCASE: Avoid CamelCase: <showDataChanged>
#875: FILE: scripts/kconfig/qconf.h:237:
+	void showDataChanged(bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#875: FILE: scripts/kconfig/qconf.h:237:
+	void showDataChanged(bool);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#877: FILE: scripts/kconfig/qconf.h:239:
+	ConfigList* list;
 	          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#878: FILE: scripts/kconfig/qconf.h:240:
+	ConfigLineEdit* lineEdit;

CHECK:CAMELCASE: Avoid CamelCase: <ConfigLineEdit>
#878: FILE: scripts/kconfig/qconf.h:240:
+	ConfigLineEdit* lineEdit;

CHECK:CAMELCASE: Avoid CamelCase: <lineEdit>
#878: FILE: scripts/kconfig/qconf.h:240:
+	ConfigLineEdit* lineEdit;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#880: FILE: scripts/kconfig/qconf.h:242:
+	static ConfigView* viewList;

CHECK:CAMELCASE: Avoid CamelCase: <viewList>
#880: FILE: scripts/kconfig/qconf.h:242:
+	static ConfigView* viewList;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#881: FILE: scripts/kconfig/qconf.h:243:
+	ConfigView* nextView;

CHECK:CAMELCASE: Avoid CamelCase: <nextView>
#881: FILE: scripts/kconfig/qconf.h:243:
+	ConfigView* nextView;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#899: FILE: scripts/kconfig/qconf.h:267:
+	QPopupMenu* createPopupMenu(const QPoint& pos);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#899: FILE: scripts/kconfig/qconf.h:267:
+	QPopupMenu* createPopupMenu(const QPoint& pos);
 	                                        ^

CHECK:CAMELCASE: Avoid CamelCase: <createPopupMenu>
#899: FILE: scripts/kconfig/qconf.h:267:
+	QPopupMenu* createPopupMenu(const QPoint& pos);

CHECK:CAMELCASE: Avoid CamelCase: <QPoint>
#899: FILE: scripts/kconfig/qconf.h:267:
+	QPopupMenu* createPopupMenu(const QPoint& pos);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#899: FILE: scripts/kconfig/qconf.h:267:
+	QPopupMenu* createPopupMenu(const QPoint& pos);

CHECK:CAMELCASE: Avoid CamelCase: <contentsContextMenuEvent>
#900: FILE: scripts/kconfig/qconf.h:268:
+	void contentsContextMenuEvent(QContextMenuEvent *e);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#909: FILE: scripts/kconfig/qconf.h:278:
+	ConfigSearchWindow(QWidget* parent, const char *name = 0);
 	                          ^

CHECK:CAMELCASE: Avoid CamelCase: <ConfigSearchWindow>
#909: FILE: scripts/kconfig/qconf.h:278:
+	ConfigSearchWindow(QWidget* parent, const char *name = 0);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#918: FILE: scripts/kconfig/qconf.h:287:
+	QSplitter* split;

CHECK:CAMELCASE: Avoid CamelCase: <QSplitter>
#918: FILE: scripts/kconfig/qconf.h:287:
+	QSplitter* split;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 9 warnings, 56 checks, 854 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
