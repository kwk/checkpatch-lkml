ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#55: FILE: arch/sh/config.in:129:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#228: FILE: arch/sh/kernel/irq.c:234:
+	 * and interrupts might get reenabled during them... bump
 	                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#232: FILE: arch/sh/kernel/irq.c:238:
+	current->preempt_count +=3D 1;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#252: FILE: arch/sh/kernel/irq.c:320:
+	current->preempt_count -=3D 1;
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#280: FILE: include/asm-sh/mmu_context.h:170:
+	if (preempt_is_disabled() =3D=3D 0)
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#280: FILE: include/asm-sh/mmu_context.h:170:
+	if (preempt_is_disabled() =3D=3D 0)
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#280: FILE: include/asm-sh/mmu_context.h:170:
+	if (preempt_is_disabled() =3D=3D 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: include/asm-sh/mmu_context.h:171:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: include/asm-sh/smplock.h:18:
+#define release_kernel_lock(task, cpu)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: include/asm-sh/smplock.h:19:
+#define reacquire_kernel_lock(task)		do { } while(0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#327: FILE: include/asm-sh/smplock.h:38:
+#define kernel_locked()		spin_is_locked(&kernel_flag)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: exactly one space required after that #elif
#328: FILE: include/asm-sh/smplock.h:39:
+#elif  CONFIG_PREEMPT

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#337: FILE: include/asm-sh/smplock.h:48:
+#define release_kernel_lock(task, cpu) \
+do { \
+	if (task->lock_depth >=3D 0) \
+		spin_unlock(&kernel_flag); \
+	release_irqlock(cpu); \
+	__sti(); \
+} while (0)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#339: FILE: include/asm-sh/smplock.h:50:
+	if (task->lock_depth >=3D 0) \
 	                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#348: FILE: include/asm-sh/smplock.h:59:
+#define reacquire_kernel_lock(task) \
+do { \
+	if (task->lock_depth >=3D 0) \
+		spin_lock(&kernel_flag); \
+} while (0)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#350: FILE: include/asm-sh/smplock.h:61:
+	if (task->lock_depth >=3D 0) \
 	                     ^

WARNING:INLINE: plain inline is preferred over __inline__
#361: FILE: include/asm-sh/smplock.h:72:
+static __inline__ void lock_kernel(void)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#364: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#364: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#364: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#364: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)

WARNING:INLINE: plain inline is preferred over __inline__
#375: FILE: include/asm-sh/smplock.h:84:
+static __inline__ void unlock_kernel(void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: include/asm-sh/smplock.h:87:
+		BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 6 warnings, 3 checks, 342 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
