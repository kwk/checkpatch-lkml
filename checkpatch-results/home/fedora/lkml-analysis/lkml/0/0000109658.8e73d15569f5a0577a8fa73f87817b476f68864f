WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#56: FILE: drivers/mmc/mmc_sysfs.c:28:
+#define DBG(x...)	printk(KERN_DEBUG x)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: drivers/mmc/mmc_sysfs.c:94:
+mmc_lockable_store(struct device *dev, struct device_attribute *att,
+	const char *data, size_t len)

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: drivers/mmc/mmc_sysfs.c:115:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: drivers/mmc/mmc_sysfs.c:117:
+			DBG("request_key returned error %ld\n",
+					PTR_ERR(mmc_key));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#112: FILE: drivers/mmc/mmc_sysfs.c:118:
+	} else if (!mmc_card_locked(card) && !strncmp(data, "change", 6)) {
[...]
+			struct key *mmc_key = request_key(&mmc_key_type,

CHECK:BRACES: Unbalanced braces around else statement
#121: FILE: drivers/mmc/mmc_sysfs.c:127:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/mmc/mmc_sysfs.c:129:
+				DBG("request_key returned error %ld\n",
+						PTR_ERR(mmc_key));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#124: FILE: drivers/mmc/mmc_sysfs.c:130:
+	} else if (mmc_card_locked(card) && !strncmp(data, "unlock", 6)) {
[...]
+			struct key *mmc_key = request_key(&mmc_key_type,

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: drivers/mmc/mmc_sysfs.c:143:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/mmc/mmc_sysfs.c:145:
+				DBG("request_key returned error %ld\n",
+						PTR_ERR(mmc_key));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#140: FILE: drivers/mmc/mmc_sysfs.c:146:
+	} else if (!mmc_card_locked(card) && !strncmp(data, "assign", 6)) {
[...]
+			struct key *mmc_key = request_key(&mmc_key_type,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#144: FILE: drivers/mmc/mmc_sysfs.c:150:
+			if (!IS_ERR(mmc_key)) {
+			int err = mmc_lock_unlock(card, mmc_key,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#149: FILE: drivers/mmc/mmc_sysfs.c:155:
+				return len;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#149: FILE: drivers/mmc/mmc_sysfs.c:155:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/mmc/mmc_sysfs.c:157:
+				DBG("request_key returned error %ld\n",
+						PTR_ERR(mmc_key));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#158: FILE: drivers/mmc/mmc_sysfs.c:164:
+	__ATTR(lockable, S_IWUSR | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: drivers/mmc/mmc_sysfs.c:165:
+	__ATTR(lockable, S_IWUSR | S_IRUGO,
+		 mmc_lockable_show, mmc_lockable_store);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000109658.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 10 checks, 141 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000109658.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
