WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This patch supports three boot line options.  mem_limit limits the amount of physical memory.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#55: FILE: mm/page_alloc.c:69:
+__setup("mem_limit", mem_setup);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: mm/page_alloc.c:85:
+	node_limit  =  simple_strtol(str+1, NULL, 10);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#71: FILE: mm/page_alloc.c:85:
+	node_limit  =  simple_strtol(str+1, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#77: FILE: mm/page_alloc.c:91:
+__setup("node_mem_limit", node_mem_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#78: FILE: mm/page_alloc.c:92:
+__setup("nodes_limit", nodes_setup);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#93: FILE: mm/page_alloc.c:1416:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:RETURN_VOID: void function return statements are not generally useful
#97: FILE: mm/page_alloc.c:1420:
+	return;
+}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#103: FILE: mm/page_alloc.c:1426:
+#define	DMA_SPAN_MIN	((64*1024*1024) >> PAGE_SHIFT)
        	            	    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#103: FILE: mm/page_alloc.c:1426:
+#define	DMA_SPAN_MIN	((64*1024*1024) >> PAGE_SHIFT)
        	            	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: mm/page_alloc.c:1430:
+^I^Iif (*dmazones > 1) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#107: FILE: mm/page_alloc.c:1430:
+		if (*dmazones > 1) 
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: mm/page_alloc.c:1431:
+^I^I^I--*dmazones;^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: mm/page_alloc.c:1432:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: mm/page_alloc.c:1436:
+^I^I^I^Itop = pgdat->node_zones[ZONE_DMA].zone_start_pfn + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: mm/page_alloc.c:1458:
+^Ifor_each_pgdat(pgdat) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: mm/page_alloc.c:1459:
+^I^Iif (pgdat->node_zones[ZONE_DMA].spanned_pages) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: mm/page_alloc.c:1477:
+^I^I^Iif ((mem + total_mem) <= mem_limit) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#154: FILE: mm/page_alloc.c:1477:
+			if ((mem + total_mem) <= mem_limit) 
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#156: FILE: mm/page_alloc.c:1479:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: mm/page_alloc.c:1484:
+^I^I^I^Iif (free == mem) $

WARNING:RETURN_VOID: void function return statements are not generally useful
#186: FILE: mm/page_alloc.c:1509:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#216: FILE: mm/bootmem.c:398:
+		if (v) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: mm/bootmem.c:399:
+^I^I^Ifor (m = 1; m && i < idx; m <<=  1, i++) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: mm/bootmem.c:402:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#220: FILE: mm/bootmem.c:402:
+		} else 

WARNING:RETURN_VOID: void function return statements are not generally useful
#226: FILE: mm/bootmem.c:408:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#240: FILE: mm/bootmem.c:422:
+		if (v) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: mm/bootmem.c:423:
+^I^I^Ifor (m = 1UL << (i & (BITS_PER_LONG - 1)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: mm/bootmem.c:429:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#247: FILE: mm/bootmem.c:429:
+		} else 

CHECK:SPACING: No space is necessary after a cast
#248: FILE: mm/bootmem.c:430:
+			i -= min((unsigned long) BITS_PER_LONG, i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: mm/bootmem.c:434:
+} $

WARNING:RETURN_VOID: void function return statements are not generally useful
#252: FILE: mm/bootmem.c:434:
+	return;
+} 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/linux/mm.h:520:
+extern void do_mem_limits(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#279: FILE: include/linux/bootmem.h:61:
+extern void __init bootmem_memory_size(pg_data_t *pgdat, unsigned long *alloc, unsigned long *total);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: include/linux/bootmem.h:61:
+extern void __init bootmem_memory_size(pg_data_t *pgdat, unsigned long *alloc, unsigned long *total);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/bootmem.h:62:
+extern void __init bootmem_memory_trim(pg_data_t *pgdat, unsigned long trim, unsigned long top);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 8 warnings, 18 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
