WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#35: FILE: Makefile:4:
+EXTRAVERSION = .1
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#90: FILE: arch/i386/pci/i386.c:177:
+		/* Try to use BIOS settings for ROMs, otherwise let
+		   pci_assign_unassigned_resources() allocate the new

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: arch/i386/pci/i386.c:178:
+		   addresses. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: drivers/pci/rom.c:83:
+			return (void __iomem *)pci_resource_start(pdev,
+							     PCI_ROM_RESOURCE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res->parent"
#234: FILE: drivers/pci/rom.c:86:
+			if (res->parent == NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: drivers/pci/rom.c:87:
+			    pci_assign_resource(pdev,PCI_ROM_RESOURCE))
 			                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: drivers/pci/setup-bus.c:43:
+#define CARDBUS_IO_SIZE		(4*1024)
                        		  ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#260: FILE: drivers/pci/setup-bus.c:46:
 static void __devinit

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: drivers/scsi/aacraid/aachba.c:971:
+^I^IBUG_ON (fibsize > (dev->max_fib_size - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: drivers/scsi/aacraid/aachba.c:971:
+		BUG_ON (fibsize > (dev->max_fib_size - 

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#269: FILE: drivers/scsi/aacraid/aachba.c:971:
+		BUG_ON (fibsize > (dev->max_fib_size - 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#284: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sock *' should also have an identifier name
#284: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#284: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#284: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: net/compat.c:139:
+int cmsghdr_from_user_compat_to_kern(struct msghdr *kmsg, struct sock *sk,
 			       unsigned char *stackbuf, int stackbuf_size)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#322: FILE: net/compat.c:173:
+		kcmsg_base = kcmsg = sock_kmalloc(sk, kcmlen, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kcmsg"
#323: FILE: net/compat.c:174:
+	if (kcmsg == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Efault>
#332: FILE: net/compat.c:182:
+			goto Efault;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#334: FILE: net/compat.c:184:
+			goto Einval;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#417: FILE: net/ipv4/ip_fragment.c:460:
+	if (pskb_trim_rcsum(skb, end-offset))
 	                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: net/ipv4/raw.c:361:
+^I^I^I        get_user(fl->fl_icmp_code, code);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 10 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
