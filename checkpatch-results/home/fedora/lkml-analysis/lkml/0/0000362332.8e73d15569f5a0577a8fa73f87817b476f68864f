WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#67: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#144: FILE: ipc/sem.c:899:
+		if(un->semid==-1) {
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#144: FILE: ipc/sem.c:899:
+		if(un->semid==-1) {
 		              ^

ERROR:SPACING: space required before the open parenthesis '('
#144: FILE: ipc/sem.c:899:
+		if(un->semid==-1) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: ipc/sem.c:900:
+			*last=un->proc_next;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#148: FILE: ipc/sem.c:903:
+			last=&un->proc_next;
 			    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#148: FILE: ipc/sem.c:903:
+			last=&un->proc_next;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#150: FILE: ipc/sem.c:905:
+		un=*last;
 		  ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#150: FILE: ipc/sem.c:905:
+		un=*last;
 		   ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#181: FILE: ipc/sem.c:925:
+	if (likely(un!=NULL))
 	             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "un"
#181: FILE: ipc/sem.c:925:
+	if (likely(un!=NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#190: FILE: ipc/sem.c:931:
+	if(sma==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: ipc/sem.c:931:
+	if(sma==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#190: FILE: ipc/sem.c:931:
+	if(sma==NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: ipc/sem.c:934:
+	if (sem_checkid(sma,semid))
 	                   ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#202: FILE: ipc/sem.c:939:
+	new = (struct sem_undo *) kmalloc(sizeof(struct sem_undo) + sizeof(short)*nsems, GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#202: FILE: ipc/sem.c:939:
+	new = (struct sem_undo *) kmalloc(sizeof(struct sem_undo) + sizeof(short)*nsems, GFP_KERNEL);
 	                                                                         ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#202: FILE: ipc/sem.c:939:
+	new = (struct sem_undo *) kmalloc(sizeof(struct sem_undo) + sizeof(short)*nsems, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct sem_undo)...)
#202: FILE: ipc/sem.c:939:
+	new = (struct sem_undo *) kmalloc(sizeof(struct sem_undo) + sizeof(short)*nsems, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#205: FILE: ipc/sem.c:942:
+	memset(new, 0, sizeof(struct sem_undo) + sizeof(short)*nsems);
 	                                                      ^

CHECK:SPACING: No space is necessary after a cast
#206: FILE: ipc/sem.c:943:
+	new->semadj = (short *) &new[1];

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#337: FILE: ipc/sem.c:1040:
+	error=-EINVAL;
 	     ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#337: FILE: ipc/sem.c:1040:
+	error=-EINVAL;
 	      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#338: FILE: ipc/sem.c:1041:
+	if(sma==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: ipc/sem.c:1041:
+	if(sma==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#338: FILE: ipc/sem.c:1041:
+	if(sma==NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: ipc/sem.c:1044:
+	if (sem_checkid(sma,semid))
 	                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#355: FILE: ipc/sem.c:1058:
+	if (ipcperms(&sma->sem_perm, alter ? S_IWUGO : S_IRUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#355: FILE: ipc/sem.c:1058:
+	if (ipcperms(&sma->sem_perm, alter ? S_IWUGO : S_IRUGO))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: ipc/sem.c:1197:
+^I       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: ipc/sem.c:1209:
+		BUG_ON(sem_checkid(sma,u->semid));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: ipc/sem.c:1209:
+		BUG_ON(sem_checkid(sma,u->semid));
 		                      ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#563: FILE: kernel/fork.c:42:
+extern void exit_sem(struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000362332.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 7 warnings, 7 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000362332.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
