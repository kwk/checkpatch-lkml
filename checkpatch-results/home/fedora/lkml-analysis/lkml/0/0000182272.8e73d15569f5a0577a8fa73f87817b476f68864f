WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
--- linux-2.6.12-rc4-mm2-seclvl.orig/security/seclvl.c	2005-05-19 15:49:51.000000000 -0500

WARNING:LINE_SPACING: Missing a blank line after declarations
#67: FILE: security/seclvl.c:111:
+	va_list args;
+	va_start(args, fmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#68: FILE: security/seclvl.c:112:
+	if (verbosity >= verb && printk_ratelimit()) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#68: FILE: security/seclvl.c:112:
+	if (verbosity >= verb && printk_ratelimit()) {
+		vprintk(fmt, args);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#78: FILE: security/seclvl.c:122:
+#define seclvl_printk(verb, type, fmt, arg...) \
+        __seclvl_printk((verb), type "%s: " fmt, __FUNCTION__, ## arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: security/seclvl.c:123:
+        __seclvl_printk((verb), type "%s: " fmt, __FUNCTION__, ## arg);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: security/seclvl.c:123:
+        __seclvl_printk((verb), type "%s: " fmt, __FUNCTION__, ## arg);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#79: FILE: security/seclvl.c:123:
+        __seclvl_printk((verb), type "%s: " fmt, __FUNCTION__, ## arg);

WARNING:INDENTED_LABEL: labels should not be indented
#88: FILE: security/seclvl.c:718:
+      exit:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 8 warnings, 0 checks, 47 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
