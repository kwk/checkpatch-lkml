WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
As pointed by Al Viro, the current symlinks support in sysfs is incorrect as

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#40: 
  d_fsdata field. The target path is generated everytime we do ->readlink
                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#58: FILE: fs/sysfs/symlink.c:11:
+static struct inode_operations sysfs_symlink_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#118: FILE: fs/sysfs/symlink.c:70:
+	if (!IS_ERR(d)) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#119: FILE: fs/sysfs/symlink.c:71:
+		error = sysfs_create(d, S_IFLNK|S_IRWXUGO, init_symlink);
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#119: FILE: fs/sysfs/symlink.c:71:
+		error = sysfs_create(d, S_IFLNK|S_IRWXUGO, init_symlink);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: fs/sysfs/symlink.c:74:
+^I} else $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#122: FILE: fs/sysfs/symlink.c:74:
+	} else 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: fs/sysfs/symlink.c:93:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: fs/sysfs/symlink.c:93:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/sysfs/symlink.c:94:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,
+				   char **path)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: fs/sysfs/symlink.c:96:
+	char * s;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: fs/sysfs/symlink.c:105:
+	pr_debug("%s: depth = %d, size = %d\n",__FUNCTION__,depth,size);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: fs/sysfs/symlink.c:105:
+	pr_debug("%s: depth = %d, size = %d\n",__FUNCTION__,depth,size);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: fs/sysfs/symlink.c:105:
+	pr_debug("%s: depth = %d, size = %d\n",__FUNCTION__,depth,size);
 	                                                         ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#146: FILE: fs/sysfs/symlink.c:105:
+	pr_debug("%s: depth = %d, size = %d\n",__FUNCTION__,depth,size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: fs/sysfs/symlink.c:110:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: fs/sysfs/symlink.c:114:
+		strcpy(s,"../");
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: fs/sysfs/symlink.c:117:
+	pr_debug("%s: path = '%s'\n",__FUNCTION__, *path);
 	                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#158: FILE: fs/sysfs/symlink.c:117:
+	pr_debug("%s: path = '%s'\n",__FUNCTION__, *path);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: fs/sysfs/symlink.c:122:
+static char * sysfs_getlink(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: fs/sysfs/symlink.c:125:
+	struct dentry * target_parent;

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: fs/sysfs/symlink.c:126:
+        char *path;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/sysfs/symlink.c:126:
+        char *path;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: fs/sysfs/symlink.c:127:
+        int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: fs/sysfs/symlink.c:127:
+        int error = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/sysfs/symlink.c:143:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/sysfs/symlink.c:149:
+        return path;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/sysfs/symlink.c:149:
+        return path;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: fs/sysfs/symlink.c:155:
+	char * link = sysfs_getlink(dentry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/sysfs/symlink.c:157:
+        if (!IS_ERR(link)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/sysfs/symlink.c:157:
+        if (!IS_ERR(link)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/sysfs/symlink.c:158:
+^I        res = vfs_readlink(dentry, buffer, buflen, link);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/sysfs/symlink.c:166:
+int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/sysfs/symlink.c:168:
+        int res = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/sysfs/symlink.c:168:
+        int res = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: fs/sysfs/symlink.c:169:
+        char *link = sysfs_getlink(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/sysfs/symlink.c:169:
+        char *link = sysfs_getlink(dentry);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: fs/sysfs/symlink.c:170:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#213: FILE: fs/sysfs/symlink.c:172:
+		res = vfs_follow_link(nd, link);
 		                      ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *dentry, char __user *buffer, int buflen);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd);
                                                                       ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: fs/sysfs/sysfs.h:18:
+static inline struct kobject * sysfs_get_kobject(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: fs/sysfs/sysfs.h:18:
+static inline struct kobject * sysfs_get_kobject(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: fs/sysfs/sysfs.h:20:
+	struct kobject * kobj = NULL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288969.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 15 warnings, 6 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288969.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
