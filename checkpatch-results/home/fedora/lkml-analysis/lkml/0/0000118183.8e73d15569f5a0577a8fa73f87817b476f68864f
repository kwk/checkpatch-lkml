ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: Documentation/amd76x_pm.txt:14:
+  P_LVL2 for the first time causes the system to sleep instead of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: Documentation/amd76x_pm.txt:37:
+systems should be easy if desired.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: Documentation/amd76x_pm.txt:49:
+  for an outer loop with interrupts enabled that guarantees low latencies. $

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#100: FILE: Documentation/amd76x_pm.txt:56:
+  immediatly if there is something waiting to be scheduled.  The default
   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'interrups' may be misspelled - perhaps 'interrupts'?
#115: FILE: Documentation/amd76x_pm.txt:71:
+interrups or by NMIs.  This causes a high interrupt latency for other
 ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: Documentation/amd76x_pm.txt:80:
+  at which interrupt rate C2 mode shall be disabled.  The syntax for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: Documentation/amd76x_pm.txt:86:
+  $

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#136: FILE: Documentation/amd76x_pm.txt:92:
+- min_C1 defines the mininum number of check intervals with low
                      ^^^^^^^

WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#151: FILE: Documentation/amd76x_pm.txt:107:
+noticable.  This is caused by two changes:
 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'propably' may be misspelled - perhaps 'probably'?
#154: FILE: Documentation/amd76x_pm.txt:110:
+  amd76x_smp_idle() and this propably caused lower latencies.
                              ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: Documentation/amd76x_pm.txt:111:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: Documentation/amd76x_pm.txt:119:
+until you see a significant increase in core temperature or C2 rate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: Documentation/amd76x_pm.txt:131:
+This software is licensed under GNU General Public License Version 2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: Documentation/amd76x_pm.txt:132:
+as specified in file COPYING in the Linux kernel source tree main $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: Documentation/amd76x_pm.txt:150:
+  ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: Documentation/amd76x_pm.txt:153:
+  ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: Documentation/amd76x_pm.txt:200:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: Documentation/amd76x_pm.txt:339:
+^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#395: FILE: drivers/acpi/Kconfig:343:
+config AMD76X_PM
+        tristate "AMD76x Native Power Management support"
+        default n
+        depends on X86 && PCI
+        ---help---
+          This driver enables Power Management on AMD760MP & AMD760MPX chipsets.          This is about same as ACPI C2, except that ACPI folks don't do SMP ATM.
+          See Documentation/amd76x_pm.txt for further details.
+
+          To compile this driver as a module ( = code which can be inserted in
+          and removed from the running kernel whenever you want), say M
+          here.  The module will be called amd76x_pm.
+
+          If unsure, say N.
+
 endmenu

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#423: FILE: drivers/acpi/Kconfig.orig:10:
+config ACPI
+	bool "ACPI Support"
+	depends on IA64 || X86
+	select PM
+	select PCI
+
+	default y
+	---help---
+	  Advanced Configuration and Power Interface (ACPI) support for 
+	  Linux requires an ACPI compliant platform (hardware/firmware),
+	  and assumes the presence of OS-directed configuration and power
+	  management (OSPM) software.  This option will enlarge your 
+	  kernel by about 70K.
+
+	  Linux ACPI provides a robust functional replacement for several 
+	  legacy configuration and power management interfaces, including
+	  the Plug-and-Play BIOS specification (PnP BIOS), the 
+	  MultiProcessor Specification (MPS), and the Advanced Power 
+	  Management (APM) specification.  If both ACPI and APM support 
+	  are configured, whichever is loaded first shall be used.
+
+	  The ACPI SourceForge project contains the latest source code, 
+	  documentation, tools, mailing list subscription, and other 
+	  information.  This project is available at:
+	  <http://sourceforge.net/projects/acpi>
+
+	  Linux support for ACPI is based on Intel Corporation's ACPI
+	  Component Architecture (ACPI CA).  For more information see:
+	  <http://developer.intel.com/technology/iapc/acpi>
+
+	  ACPI is an open industry specification co-developed by Compaq, 
+	  Intel, Microsoft, Phoenix, and Toshiba.  The specification is 
+	  available at:
+	  <http://www.acpi.info>
+
+if ACPI
+
+config ACPI_SLEEP
+	bool "Sleep States"
+	depends on X86 && (!SMP || SUSPEND_SMP)
+	depends on PM
+	default y
+	---help---
+	  This option adds support for ACPI suspend states. 
+
+	  With this option, you will be able to put the system "to sleep". 
+	  Sleep states are low power states for the system and devices. All
+	  of the system operating state is saved to either memory or disk
+	  (depending on the state), to allow the system to resume operation
+	  quickly at your request.
+
+	  Although this option sounds really nifty, barely any of the device
+	  drivers have been converted to the new driver model and hence few
+	  have proper power management support. 
+
+	  This option is not recommended for anyone except those doing driver
+	  power management development.
+
+config ACPI_SLEEP_PROC_FS
+	bool
+	depends on ACPI_SLEEP && PROC_FS
+	default y
+
+config ACPI_SLEEP_PROC_SLEEP
+	bool "/proc/acpi/sleep (deprecated)"
+	depends on ACPI_SLEEP_PROC_FS
+	default n
+	---help---
+	  Create /proc/acpi/sleep
+	  Deprecated by /sys/power/state
+
+config ACPI_AC
+	tristate "AC Adapter"
+	depends on X86
+	default y
+	help
+	  This driver adds support for the AC Adapter object, which indicates
+	  whether a system is on AC, or not. If you have a system that can
+	  switch between A/C and battery, say Y.
+
+config ACPI_BATTERY
+	tristate "Battery"
+	depends on X86
+	default y
+	help
+	  This driver adds support for battery information through
+	  /proc/acpi/battery. If you have a mobile system with a battery, 
+	  say Y.
+
+config ACPI_BUTTON
+	tristate "Button"
+	default y
+	help
+	  This driver handles events on the power, sleep and lid buttons.
+	  A daemon reads /proc/acpi/event and perform user-defined actions
+	  such as shutting down the system.  This is necessary for
+	  software controlled poweroff.
+
+config ACPI_VIDEO
+	tristate "Video"
+	depends on X86
+	default y
+	help
+	  This driver implement the ACPI Extensions For Display Adapters
+	  for integrated graphics devices on motherboard, as specified in
+	  ACPI 2.0 Specification, Appendix B, allowing to perform some basic
+	  control like defining the video POST device, retrieving EDID information
+	  or to setup a video output, etc.
+	  Note that this is an ref. implementation only.  It may or may not work
+	  for your integrated video device.
+
+config ACPI_HOTKEY
+	tristate "Generic Hotkey (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on X86
+	default n
+	help
+	  Experimental consolidated hotkey driver.
+	  If you are unsure, say N.
+
+config ACPI_FAN
+	tristate "Fan"
+	default y
+	help
+	  This driver adds support for ACPI fan devices, allowing user-mode 
+	  applications to perform basic fan control (on, off, status).
+
+config ACPI_PROCESSOR
+	tristate "Processor"
+	default y
+	help
+	  This driver installs ACPI as the idle handler for Linux, and uses
+	  ACPI C2 and C3 processor states to save power, on systems that
+	  support it.  It is required by several flavors of cpufreq
+	  Performance-state drivers.
+
+config ACPI_HOTPLUG_CPU
+	bool
+	depends on ACPI_PROCESSOR && HOTPLUG_CPU
+	select ACPI_CONTAINER
+	default y
+
+config ACPI_THERMAL
+	tristate "Thermal Zone"
+	depends on ACPI_PROCESSOR
+	default y
+	help
+	  This driver adds support for ACPI thermal zones.  Most mobile and
+	  some desktop systems support ACPI thermal zones.  It is HIGHLY
+	  recommended that this option be enabled, as your processor(s)
+	  may be damaged without it.
+
+config ACPI_NUMA
+	bool "NUMA support"
+	depends on NUMA
+	depends on (IA64 || X86_64)
+	default y if IA64_GENERIC || IA64_SGI_SN2
+
+config ACPI_ASUS
+        tristate "ASUS/Medion Laptop Extras"
+	depends on X86
+	default y
+        ---help---
+          This driver provides support for extra features of ACPI-compatible
+          ASUS laptops. As some of Medion laptops are made by ASUS, it may also
+          support some Medion laptops (such as 9675 for example).  It makes all
+          the extra buttons generate standard ACPI events that go through
+          /proc/acpi/events, and (on some models) adds support for changing the
+          display brightness and output, switching the LCD backlight on and off,
+          and most importantly, allows you to blink those fancy LEDs intended
+          for reporting mail and wireless status.
+
+	  Note: display switching code is currently considered EXPERIMENTAL,
+	  toying with these values may even lock your machine.
+          
+          All settings are changed via /proc/acpi/asus directory entries. Owner
+          and group for these entries can be set with asus_uid and asus_gid
+          parameters.
+          
+          More information and a userspace daemon for handling the extra buttons
+          at <http://sourceforge.net/projects/acpi4asus/>.
+          
+          If you have an ACPI-compatible ASUS laptop, say Y or M here. This
+          driver is still under development, so if your laptop is unsupported or
+          something works not quite as expected, please use the mailing list
+          available on the above page (acpi4asus-user@lists.sourceforge.net)
+          
+config ACPI_IBM
+	tristate "IBM ThinkPad Laptop Extras"
+	depends on X86
+	---help---
+	  This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
+	  support for Fn-Fx key combinations, Bluetooth control, video
+	  output switching, ThinkLight control, UltraBay eject and more.
+	  For more information about this driver see <file:Documentation/ibm-acpi.txt>
+	  and <http://ibm-acpi.sf.net/> .
+
+	  If you have an IBM ThinkPad laptop, say Y or M here.
+
+config ACPI_TOSHIBA
+	tristate "Toshiba Laptop Extras"
+	depends on X86
+	default y
+	---help---
+	  This driver adds support for access to certain system settings
+	  on "legacy free" Toshiba laptops.  These laptops can be recognized by
+	  their lack of a BIOS setup menu and APM support.
+
+	  On these machines, all system configuration is handled through the
+	  ACPI.  This driver is required for access to controls not covered
+	  by the general ACPI drivers, such as LCD brightness, video output,
+	  etc.
+
+	  This driver differs from the non-ACPI Toshiba laptop driver (located
+	  under "Processor type and features") in several aspects.
+	  Configuration is accessed by reading and writing text files in the
+	  /proc tree instead of by program interface to /dev.  Furthermore, no
+	  power management functions are exposed, as those are handled by the
+	  general ACPI drivers.
+
+	  More information about this driver is available at
+	  <http://memebeam.org/toys/ToshibaAcpiDriver>.
+
+	  If you have a legacy free Toshiba laptop (such as the Libretto L1
+	  series), say Y.
+
+config ACPI_CUSTOM_DSDT
+	bool "Include Custom DSDT"
+	depends on !STANDALONE
+	default n 
+	help
+	  Thist option is to load a custom ACPI DSDT
+	  If you don't know what that is, say N.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: drivers/acpi/Kconfig.orig:18:
+^I  Advanced Configuration and Power Interface (ACPI) support for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: drivers/acpi/Kconfig.orig:21:
+^I  management (OSPM) software.  This option will enlarge your $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: drivers/acpi/Kconfig.orig:24:
+^I  Linux ACPI provides a robust functional replacement for several $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: drivers/acpi/Kconfig.orig:26:
+^I  the Plug-and-Play BIOS specification (PnP BIOS), the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: drivers/acpi/Kconfig.orig:27:
+^I  MultiProcessor Specification (MPS), and the Advanced Power $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: drivers/acpi/Kconfig.orig:28:
+^I  Management (APM) specification.  If both ACPI and APM support $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: drivers/acpi/Kconfig.orig:31:
+^I  The ACPI SourceForge project contains the latest source code, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: drivers/acpi/Kconfig.orig:32:
+^I  documentation, tools, mailing list subscription, and other $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: drivers/acpi/Kconfig.orig:40:
+^I  ACPI is an open industry specification co-developed by Compaq, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: drivers/acpi/Kconfig.orig:41:
+^I  Intel, Microsoft, Phoenix, and Toshiba.  The specification is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: drivers/acpi/Kconfig.orig:53:
+^I  This option adds support for ACPI suspend states. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: drivers/acpi/Kconfig.orig:55:
+^I  With this option, you will be able to put the system "to sleep". $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: drivers/acpi/Kconfig.orig:63:
+^I  have proper power management support. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: drivers/acpi/Kconfig.orig:96:
+^I  /proc/acpi/battery. If you have a mobile system with a battery, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: drivers/acpi/Kconfig.orig:134:
+^I  This driver adds support for ACPI fan devices, allowing user-mode $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: drivers/acpi/Kconfig.orig:184:
+          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: drivers/acpi/Kconfig.orig:188:
+          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: drivers/acpi/Kconfig.orig:191:
+          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: drivers/acpi/Kconfig.orig:196:
+          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: drivers/acpi/Kconfig.orig:239:
+^Idefault n $

WARNING:TYPO_SPELLING: 'Thist' may be misspelled - perhaps 'This'?
#654: FILE: drivers/acpi/Kconfig.orig:241:
+	  Thist option is to load a custom ACPI DSDT
 	  ^^^^^

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#662: FILE: drivers/acpi/Kconfig.orig:249:
+	  Enter the full path name to the file wich includes the AmlCode declaration.
 	                                       ^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#675: FILE: drivers/acpi/Kconfig.orig:262:
+config ACPI_DEBUG
+	bool "Debug Statements"
+	default n
+	help
+	  The ACPI driver can optionally report errors with a great deal
+	  of verbosity. Saying Y enables these statements. This will increase
+	  your kernel size by around 50K.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#689: FILE: drivers/acpi/Kconfig.orig:276:
+^I  the battery and thermal drivers.  If you are compiling for a $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#721: FILE: drivers/acpi/Kconfig.orig:308:
+config ACPI_CONTAINER
+	tristate "ACPI0004,PNP0A05 and PNP0A06 Container Driver (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	default (ACPI_HOTPLUG_MEMORY || ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO)
+	 ---help---
+	  This allows _physical_ insertion and removal of CPUs and memory.
+	  This can be useful, for example, on NUMA machines that support
+	  ACPI based physical hotplug of nodes, or non-NUMA machines that
+	  support physical cpu/memory hot-plug.
+
+	  If one selects "m", this driver can be loaded with
+	  "modprobe acpi_container".
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: drivers/acpi/Kconfig.orig:330:
+^I  onlined or offlined during runtime.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: drivers/acpi/Kconfig.orig:334:
+^I  your system does not support physically adding or ripping out $

WARNING:TYPO_SPELLING: 'platfrom' may be misspelled - perhaps 'platform'?
#748: FILE: drivers/acpi/Kconfig.orig:335:
+	  memory DIMMs at some platfrom defined granularity (individually 
 	                       ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: drivers/acpi/Kconfig.orig:335:
+^I  memory DIMMs at some platfrom defined granularity (individually $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: drivers/acpi/Kconfig.orig:339:
+^I  command: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: drivers/acpi/Kconfig.orig:340:
+^I^I$>modprobe acpi_memhotplug $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#773: FILE: drivers/acpi/amd76x_pm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#778: FILE: drivers/acpi/amd76x_pm.c:6:
+ * ^I^I^I^ITony Lindgren <tony@atomide.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#779: FILE: drivers/acpi/amd76x_pm.c:7:
+ * ^I^I^I^IJoerg Sommrey <jo@sommrey.de>$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: drivers/acpi/amd76x_pm.c:24:
+ *       P_LVL2 for the first time causes the system to sleep instead of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: drivers/acpi/amd76x_pm.c:32:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: drivers/acpi/amd76x_pm.c:37:
+ * This software is licensed under GNU General Public License Version 2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: drivers/acpi/amd76x_pm.c:38:
+ * as specified in file COPYING in the Linux kernel source tree main $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#812: FILE: drivers/acpi/amd76x_pm.c:40:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#816: FILE: drivers/acpi/amd76x_pm.c:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#826: FILE: drivers/acpi/amd76x_pm.c:54:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#838: FILE: drivers/acpi/amd76x_pm.c:66:
+extern void default_idle(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#842: FILE: drivers/acpi/amd76x_pm.c:70:
+static unsigned long lazy_idle = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#843: FILE: drivers/acpi/amd76x_pm.c:71:
+static unsigned long spin_idle = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#844: FILE: drivers/acpi/amd76x_pm.c:72:
+static unsigned long watch_int = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#850: FILE: drivers/acpi/amd76x_pm.c:78:
+module_param(lazy_idle, long, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: drivers/acpi/amd76x_pm.c:81:
+MODULE_PARM_DESC(lazy_idle,
+		"\tnumber of idle cycles before entering power saving mode");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#855: FILE: drivers/acpi/amd76x_pm.c:83:
+module_param(spin_idle, long, S_IRUGO | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: drivers/acpi/amd76x_pm.c:85:
+MODULE_PARM_DESC(spin_idle,
+		"\tnumber of spin cycles to wait for other CPUs to become idle");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#859: FILE: drivers/acpi/amd76x_pm.c:87:
+module_param(watch_int, long, S_IRUGO | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: drivers/acpi/amd76x_pm.c:89:
+MODULE_PARM_DESC(watch_int,
+		"\twatch interval (in milliseconds) for interrupts");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: drivers/acpi/amd76x_pm.c:92:
+module_param_call(watch_irqs, set_watch_irqs, show_watch_irqs,
+	NULL, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#864: FILE: drivers/acpi/amd76x_pm.c:92:
+	NULL, S_IRUGO | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/acpi/amd76x_pm.c:94:
+MODULE_PARM_DESC(watch_irqs,
+		"\tlist of irqs (and optional their limit per second) that "

WARNING:SPLIT_STRING: quoted string split across lines
#867: FILE: drivers/acpi/amd76x_pm.c:95:
+		"\tlist of irqs (and optional their limit per second) that "
+		"cause fallback to C1 mode. "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: drivers/acpi/amd76x_pm.c:96:
+		"cause fallback to C1 mode. "
+		"Syntax: irq0[:limit0],irq1[:limit1],...");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#870: FILE: drivers/acpi/amd76x_pm.c:98:
+module_param(min_C1, long, S_IRUGO | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: drivers/acpi/amd76x_pm.c:100:
+MODULE_PARM_DESC(min_C1,
+		"\tminimum irq rate watch intervals spent in C1 mode");

WARNING:SPLIT_STRING: quoted string split across lines
#876: FILE: drivers/acpi/amd76x_pm.c:104:
+MODULE_DESCRIPTION("ACPI style power management for SMP AMD-760MP(X) "
+		"based systems, version " VERSION);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#878: FILE: drivers/acpi/amd76x_pm.c:106:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#887: FILE: drivers/acpi/amd76x_pm.c:115:
+	void (*orig_idle) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#888: FILE: drivers/acpi/amd76x_pm.c:116:
+	void (*curr_idle) (void);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#923: FILE: drivers/acpi/amd76x_pm.c:151:
+static struct pci_device_id  __devinitdata amd_nb_tbl[] = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after amd_nb_tbl[]
#923: FILE: drivers/acpi/amd76x_pm.c:151:
+static struct pci_device_id  __devinitdata amd_nb_tbl[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#929: FILE: drivers/acpi/amd76x_pm.c:157:
+static struct pci_device_id  __devinitdata amd_sb_tbl[] = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after amd_sb_tbl[]
#929: FILE: drivers/acpi/amd76x_pm.c:157:
+static struct pci_device_id  __devinitdata amd_sb_tbl[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#968: FILE: drivers/acpi/amd76x_pm.c:196:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#986: FILE: drivers/acpi/amd76x_pm.c:214:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#997: FILE: drivers/acpi/amd76x_pm.c:225:
+	 * AMD-768: DevB:3x41C; page 94 in AMD-768 doc */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#999: FILE: drivers/acpi/amd76x_pm.c:227:
+	if(enable) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#999: FILE: drivers/acpi/amd76x_pm.c:227:
+	if(enable) {
+		regbyte |= ((is_766 << 1) | (1 << 7));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: drivers/acpi/amd76x_pm.c:244:
+	if(enable) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1016: FILE: drivers/acpi/amd76x_pm.c:244:
+	if(enable) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1023: FILE: drivers/acpi/amd76x_pm.c:251:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1041: FILE: drivers/acpi/amd76x_pm.c:269:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#1052: FILE: drivers/acpi/amd76x_pm.c:280:
+	if(enable)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: drivers/acpi/amd76x_pm.c:310:
+^I * we really shouldn't end up here anyway. $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prs->idle_count'
#1110: FILE: drivers/acpi/amd76x_pm.c:338:
+	if (likely(++(prs->idle_count) <= lazy_idle)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1110: FILE: drivers/acpi/amd76x_pm.c:338:
+	if (likely(++(prs->idle_count) <= lazy_idle)) {
+		return;
+	}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1128: FILE: drivers/acpi/amd76x_pm.c:356:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1138: FILE: drivers/acpi/amd76x_pm.c:366:
+	smp_mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1152: FILE: drivers/acpi/amd76x_pm.c:380:
+	ssize_t ret = 0;
+	for (i = 0; i < AMD76X_WATCH_MAX && watch_item[i].irq != -1 ; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1169: FILE: drivers/acpi/amd76x_pm.c:397:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1171: FILE: drivers/acpi/amd76x_pm.c:399:
+		irq = simple_strtol(s, &e, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#1174: FILE: drivers/acpi/amd76x_pm.c:402:
+		if (*e == ':') {
[...]
+		} else
[...]

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1176: FILE: drivers/acpi/amd76x_pm.c:404:
+			limit = simple_strtol(s, &e, 0);

CHECK:BRACES: Unbalanced braces around else statement
#1177: FILE: drivers/acpi/amd76x_pm.c:405:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1179: FILE: drivers/acpi/amd76x_pm.c:407:
+		if (irq >= 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1181: FILE: drivers/acpi/amd76x_pm.c:409:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1194: FILE: drivers/acpi/amd76x_pm.c:422:
+	if (watch_item[0].irq != -1) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1196: FILE: drivers/acpi/amd76x_pm.c:424:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher parms:\n");
 		                                              ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1196: FILE: drivers/acpi/amd76x_pm.c:424:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher parms:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1198: FILE: drivers/acpi/amd76x_pm.c:426:
+			printk(KERN_INFO

CHECK:BRACES: Unbalanced braces around else statement
#1202: FILE: drivers/acpi/amd76x_pm.c:430:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1203: FILE: drivers/acpi/amd76x_pm.c:431:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher disabled.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1208: FILE: drivers/acpi/amd76x_pm.c:436:
+static ssize_t $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1209: FILE: drivers/acpi/amd76x_pm.c:437:
+show_C2_cnt (struct device *dev, struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1210: FILE: drivers/acpi/amd76x_pm.c:438:
+show_C2_cnt (struct device *dev, struct device_attribute *attr,
+		char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: drivers/acpi/amd76x_pm.c:448:
+^Ireturn sprintf(buf,"%u\n", C2_cnt);  $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1220: FILE: drivers/acpi/amd76x_pm.c:448:
+	return sprintf(buf,"%u\n", C2_cnt);  
 	                  ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_C2_cnt' to 'C2_cnt_show'
#1221: FILE: drivers/acpi/amd76x_pm.c:449:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1223: FILE: drivers/acpi/amd76x_pm.c:451:
+static DEVICE_ATTR(C2_cnt, S_IRUGO,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1231: FILE: drivers/acpi/amd76x_pm.c:459:
+	if (watch_item[0].irq != -1 && watch_int) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1233: FILE: drivers/acpi/amd76x_pm.c:461:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher started. "

WARNING:SPLIT_STRING: quoted string split across lines
#1234: FILE: drivers/acpi/amd76x_pm.c:462:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher started. "
+				"watch_int = %lu ms, min_C1 = %lu\n",

CHECK:BRACES: Unbalanced braces around else statement
#1236: FILE: drivers/acpi/amd76x_pm.c:464:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1237: FILE: drivers/acpi/amd76x_pm.c:465:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher disabled.\n");

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1241: FILE: drivers/acpi/amd76x_pm.c:469:
+watch_irq(void *parm)
                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1257: FILE: drivers/acpi/amd76x_pm.c:485:
+        if (set_force_C1 && !force_C1)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: drivers/acpi/amd76x_pm.c:485:
+        if (set_force_C1 && !force_C1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: drivers/acpi/amd76x_pm.c:486:
+                printk(KERN_INFO "amd76x_pm: C1 on\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: drivers/acpi/amd76x_pm.c:486:
+                printk(KERN_INFO "amd76x_pm: C1 on\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1258: FILE: drivers/acpi/amd76x_pm.c:486:
+                printk(KERN_INFO "amd76x_pm: C1 on\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1259: FILE: drivers/acpi/amd76x_pm.c:487:
+        if (!set_force_C1 && force_C1 == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: drivers/acpi/amd76x_pm.c:487:
+        if (!set_force_C1 && force_C1 == 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: drivers/acpi/amd76x_pm.c:488:
+                printk(KERN_INFO "amd76x_pm: C1 off\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: drivers/acpi/amd76x_pm.c:488:
+                printk(KERN_INFO "amd76x_pm: C1 off\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1260: FILE: drivers/acpi/amd76x_pm.c:488:
+                printk(KERN_INFO "amd76x_pm: C1 off\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: drivers/acpi/amd76x_pm.c:498:
+		schedule_delayed_work(&work,
+			msecs_to_jiffies(watch_int));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1272: FILE: drivers/acpi/amd76x_pm.c:500:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher stopped.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1275: FILE: drivers/acpi/amd76x_pm.c:503:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1286: FILE: drivers/acpi/amd76x_pm.c:514:
+	if(lazy_idle == 0)
+	    lazy_idle = AMD76X_LAZY_IDLE;

ERROR:SPACING: space required before the open parenthesis '('
#1286: FILE: drivers/acpi/amd76x_pm.c:514:
+	if(lazy_idle == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1288: FILE: drivers/acpi/amd76x_pm.c:516:
+	printk(KERN_INFO "amd76x_pm: lazy_idle = %lu\n", lazy_idle);

ERROR:SPACING: space required before the open parenthesis '('
#1289: FILE: drivers/acpi/amd76x_pm.c:517:
+	if(spin_idle == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1291: FILE: drivers/acpi/amd76x_pm.c:519:
+	printk(KERN_INFO "amd76x_pm: spin_idle = %lu\n", spin_idle);

ERROR:SPACING: space required before the open parenthesis '('
#1295: FILE: drivers/acpi/amd76x_pm.c:523:
+	while((pdev_sb = pci_find_device(PCI_ANY_ID, PCI_ANY_ID, pdev_sb)) != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#1296: FILE: drivers/acpi/amd76x_pm.c:524:
+		if(pci_match_id(amd_sb_tbl, pdev_sb) != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pci_match_id"
#1296: FILE: drivers/acpi/amd76x_pm.c:524:
+		if(pci_match_id(amd_sb_tbl, pdev_sb) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1299: FILE: drivers/acpi/amd76x_pm.c:527:
+	printk(KERN_ERR "amd76x_pm: Could not find southbridge\n");

ERROR:SPACING: space required before the open parenthesis '('
#1305: FILE: drivers/acpi/amd76x_pm.c:533:
+	while((pdev_nb = pci_find_device(PCI_ANY_ID, PCI_ANY_ID, pdev_nb)) != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#1306: FILE: drivers/acpi/amd76x_pm.c:534:
+		if(pci_match_id(amd_nb_tbl, pdev_nb) != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pci_match_id"
#1306: FILE: drivers/acpi/amd76x_pm.c:534:
+		if(pci_match_id(amd_nb_tbl, pdev_nb) != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1309: FILE: drivers/acpi/amd76x_pm.c:537:
+	printk(KERN_ERR "amd76x_pm: Could not find northbridge\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: drivers/acpi/amd76x_pm.c:540:
+ found_nb:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1313: FILE: drivers/acpi/amd76x_pm.c:541:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1323: FILE: drivers/acpi/amd76x_pm.c:551:
+^I^Iprintk(KERN_ERR "amd76x_pm: No southbridge to initialize\n");^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1323: FILE: drivers/acpi/amd76x_pm.c:551:
+		printk(KERN_ERR "amd76x_pm: No southbridge to initialize\n");		

ERROR:SPACING: space required before the open parenthesis '('
#1328: FILE: drivers/acpi/amd76x_pm.c:556:
+	if(!pdev_nb) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1329: FILE: drivers/acpi/amd76x_pm.c:557:
+		printk("amd76x_pm: No northbridge found.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1338: FILE: drivers/acpi/amd76x_pm.c:566:
+		printk(KERN_ERR "amd76x_pm: No northbridge to initialize\n");

ERROR:SPACING: space required before the open parenthesis '('
#1342: FILE: drivers/acpi/amd76x_pm.c:570:
+	if(num_online_cpus() == 1) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1344: FILE: drivers/acpi/amd76x_pm.c:572:
+		printk(KERN_ERR "amd76x_pm: UP machine detected. ACPI is your friend.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1347: FILE: drivers/acpi/amd76x_pm.c:575:
+		printk(KERN_ERR "amd76x_pm: Idle function not changed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1352: FILE: drivers/acpi/amd76x_pm.c:580:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1353: FILE: drivers/acpi/amd76x_pm.c:581:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1362: FILE: drivers/acpi/amd76x_pm.c:590:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1363: FILE: drivers/acpi/amd76x_pm.c:591:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: drivers/acpi/amd76x_pm.c:600:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1376: FILE: drivers/acpi/amd76x_pm.c:604:
+	printk(KERN_INFO "amd76x_pm: Version %s loaded.\n", VERSION);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1380: FILE: drivers/acpi/amd76x_pm.c:608:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: drivers/acpi/amd76x_pm.c:615:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1392: FILE: drivers/acpi/amd76x_pm.c:620:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1398: FILE: drivers/acpi/amd76x_pm.c:626:
+	printk(KERN_INFO "amd76x_pm: %u C2 calls\n", C2_cnt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1399: FILE: drivers/acpi/amd76x_pm.c:627:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1404: FILE: drivers/acpi/amd76x_pm.c:632:
+        flush_scheduled_work();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1404: FILE: drivers/acpi/amd76x_pm.c:632:
+        flush_scheduled_work();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: drivers/acpi/amd76x_pm.c:633:
+        cancel_delayed_work(&work);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: drivers/acpi/amd76x_pm.c:633:
+        cancel_delayed_work(&work);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1406: FILE: drivers/acpi/amd76x_pm.c:634:
+        flush_scheduled_work();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1406: FILE: drivers/acpi/amd76x_pm.c:634:
+        flush_scheduled_work();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: drivers/acpi/amd76x_pm.c:635:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1411: FILE: drivers/acpi/amd76x_pm.c:639:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: drivers/acpi/amd76x_pm.c.extra:24:
+ *       P_LVL2 for the first time causes the system to sleep instead of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1450: FILE: drivers/acpi/amd76x_pm.c.extra:32:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1455: FILE: drivers/acpi/amd76x_pm.c.extra:37:
+ * This software is licensed under GNU General Public License Version 2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1456: FILE: drivers/acpi/amd76x_pm.c.extra:38:
+ * as specified in file COPYING in the Linux kernel source tree main $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1458: FILE: drivers/acpi/amd76x_pm.c.extra:40:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1825: FILE: drivers/acpi/amd76x_pm.c.extra:407:
+^Iif(enable) $

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1838: FILE: drivers/acpi/amd76x_pm.c.extra:420:
+ * I'm not sure if this is even neccessary at all as the 766 doesn't need this.
                                 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1847: FILE: drivers/acpi/amd76x_pm.c.extra:429:
+	/* Is it neccessary to use THMINEN at ANY time? */
 	         ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1931: FILE: drivers/acpi/amd76x_pm.c.extra:513:
+^I * we really shouldn't end up here anyway. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2056: FILE: drivers/acpi/amd76x_pm.c.extra:638:
+^I$

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2083: FILE: drivers/acpi/amd76x_pm.c.extra:665:
+		printk(KERN_INFO "amd76x_pm: irq rate watcher parms:\n");
 		                                              ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2095: FILE: drivers/acpi/amd76x_pm.c.extra:677:
+static ssize_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2107: FILE: drivers/acpi/amd76x_pm.c.extra:689:
+^Ireturn sprintf(buf,"%u\n", C2_cnt);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2111: FILE: drivers/acpi/amd76x_pm.c.extra:693:
+static ssize_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2121: FILE: drivers/acpi/amd76x_pm.c.extra:703:
+^Ireturn sprintf(buf,"%u\n", C3_cnt);  $

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#2148: FILE: drivers/acpi/amd76x_pm.c.extra:730:
+watch_irq(void *parm)
                 ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2221: FILE: drivers/acpi/amd76x_pm.c.extra:803:
+ found_nb:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2222: FILE: drivers/acpi/amd76x_pm.c.extra:804:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2232: FILE: drivers/acpi/amd76x_pm.c.extra:814:
+^I^Iprintk(KERN_ERR "amd76x_pm: No southbridge to initialize\n");^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2264: FILE: drivers/acpi/amd76x_pm.c.extra:846:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2279: FILE: drivers/acpi/amd76x_pm.c.extra:861:
+^I$

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#2288: FILE: drivers/acpi/amd76x_pm.c.extra:870:
+	/* Turn NTH on with maxium throttling for testing. */
 	                    ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2321: FILE: drivers/acpi/amd76x_pm.c.extra:903:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2342: FILE: drivers/acpi/amd76x_pm.c.extra:924:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2359: FILE: drivers/acpi/amd76x_pm.c.extra:941:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2371: FILE: include/linux/amd76x_pm.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2371: FILE: include/linux/amd76x_pm.h:1:
+/* 

CHECK:BIT_MACRO: Prefer using the BIT macro
#2376: FILE: include/linux/amd76x_pm.h:6:
+#define DCSTOP_EN	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2377: FILE: include/linux/amd76x_pm.h:7:
+#define STPCLK_EN	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2378: FILE: include/linux/amd76x_pm.h:8:
+#define CPUSTP_EN	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2379: FILE: include/linux/amd76x_pm.h:9:
+#define PCISTP_EN	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2380: FILE: include/linux/amd76x_pm.h:10:
+#define CPUSLP_EN	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2381: FILE: include/linux/amd76x_pm.h:11:
+#define SUSPND_EN	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2382: FILE: include/linux/amd76x_pm.h:12:
+#define CPURST_EN	(1 << 7)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2386: FILE: include/linux/amd76x_pm.h:16:
+#define POS_REGS^I16^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2391: FILE: include/linux/amd76x_pm.h:21:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#2397: FILE: include/linux/amd76x_pm.h:27:
+#define C3EN		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2398: FILE: include/linux/amd76x_pm.h:28:
+#define ZZ_C3EN		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2399: FILE: include/linux/amd76x_pm.h:29:
+#define CSLP_C3EN	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2400: FILE: include/linux/amd76x_pm.h:30:
+#define CSTP_C3EN	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2404: FILE: include/linux/amd76x_pm.h:34:
+#define CSTP	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2405: FILE: include/linux/amd76x_pm.h:35:
+#define PSTP	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2406: FILE: include/linux/amd76x_pm.h:36:
+#define ASTP	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2407: FILE: include/linux/amd76x_pm.h:37:
+#define DCSTP	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2408: FILE: include/linux/amd76x_pm.h:38:
+#define CSLP	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2409: FILE: include/linux/amd76x_pm.h:39:
+#define SUSP	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2410: FILE: include/linux/amd76x_pm.h:40:
+#define MSRSM	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2411: FILE: include/linux/amd76x_pm.h:41:
+#define PITRSM	(1 << 15)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2414: FILE: include/linux/amd76x_pm.h:44:
+#define NTPER(x) (x << 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2415: FILE: include/linux/amd76x_pm.h:45:
+#define THMINEN(x) (x << 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2422: FILE: include/linux/amd76x_pm.h:52:
+#define NTH_RATIO(x) (x << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2423: FILE: include/linux/amd76x_pm.h:53:
+#define NTH_EN (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2426: FILE: include/linux/amd76x_pm.h:56:
+#define SLP_EN (1 << 13)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2427: FILE: include/linux/amd76x_pm.h:57:
+#define SLP_TYP(x) (x << 10)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000118183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 101 errors, 80 warnings, 56 checks, 2365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000118183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
