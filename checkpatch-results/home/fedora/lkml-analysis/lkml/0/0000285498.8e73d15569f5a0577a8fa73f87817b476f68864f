WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -Nur linux-2.6.0/drivers/usb/Makefile /usr/src/linux-2.6.0/drivers/usb/Makefile

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#39: 
diff -Nur linux-2.6.0/drivers/usb/Makefile /usr/src/linux-2.6.0/drivers/usb/Makefile

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: usr/src/linux-2.6.0/drivers/usb/input/hid-core.c:1418:
+                                                                                $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: usr/src/linux-2.6.0/drivers/usb/input/hid-core.c:1418:
+                                                                                $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: usr/src/linux-2.6.0/drivers/usb/input/hid-core.c:1418:
+                                                                                $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: usr/src/linux-2.6.0/drivers/usb/misc/Kconfig:140:
+^I  Say Y here if you want to connect an 1 or 4 Motor PhidgetServo $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:11:
+ * This is a driver for the USB PhidgetServo version 2.0 and 3.0 servo $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:12:
+ * controllers available at: http://www.phidgets.com/ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:64:
+change_position_v30(struct phidget_servo *servo, int servo_no, int degrees, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:65:
+change_position_v30(struct phidget_servo *servo, int servo_no, int degrees, 
+								int minutes)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:74:
+^I * pulse = angle * 10.6 + 243.8^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:76:
+^Iservo->pulse[servo_no] = ((degrees*60 + minutes)*106 + 2438*60)/600;^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:76:
+	servo->pulse[servo_no] = ((degrees*60 + minutes)*106 + 2438*60)/600;	
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:76:
+	servo->pulse[servo_no] = ((degrees*60 + minutes)*106 + 2438*60)/600;	
 	                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:76:
+	servo->pulse[servo_no] = ((degrees*60 + minutes)*106 + 2438*60)/600;	
 	                                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#185: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:76:
+	servo->pulse[servo_no] = ((degrees*60 + minutes)*106 + 2438*60)/600;	
 	                                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#186: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:77:
+	servo->degrees[servo_no]= degrees;
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:78:
+^Iservo->minutes[servo_no]= minutes;^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#187: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:78:
+	servo->minutes[servo_no]= minutes;	
 	                        ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#191: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:82:
+	if (!buffer) {
+		dev_err(&servo->udev->dev, "%s - out of memory\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#192: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:83:
+			__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:87:
+^I/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:134:
+change_position_v20(struct phidget_servo *servo, int servo_no, int degrees,
+								int minutes)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#252: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:143:
+	servo->pulse[servo_no]= degrees + 23;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#253: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:144:
+	servo->degrees[servo_no]= degrees;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#254: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:145:
+	servo->minutes[servo_no]= 0;
 	                        ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#258: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:149:
+	if (!buffer) {
+		dev_err(&servo->udev->dev, "%s - out of memory\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#259: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:150:
+			__FUNCTION__);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#288: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:179:
+#define show_set(value)	\
+static ssize_t set_servo##value (struct device *dev,			\
+					const char *buf, size_t count)	\
+{									\
+	int degrees, minutes;						\
+	struct usb_interface *intf = to_usb_interface (dev);		\
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\
+									\
+	minutes = 0;							\
+	/* must at least convert degrees */				\
+	if (sscanf (buf, "%d.%d", &degrees, &minutes) < 1) {		\
+		return -EINVAL;						\
+	}								\
+									\
+	if (degrees < -23 || degrees > (180 + 23) ||			\
+	    minutes < 0 || minutes > 59) {				\
+		return -EINVAL;						\
+	}								\
+									\
+	if (servo->version >= 3) 					\
+		change_position_v30 (servo, value, degrees, minutes);	\
+	else 								\
+		change_position_v20 (servo, value, degrees, minutes);	\
+									\
+	return count;							\
+}									\
+									\
+static ssize_t show_servo##value (struct device *dev, char *buf) 	\
+{									\
+	struct usb_interface *intf = to_usb_interface (dev);		\
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\
+									\
+	return sprintf (buf, "%d.%02d\n", servo->degrees[value],	\
+				servo->minutes[value]);			\
+}									\
+static DEVICE_ATTR(servo##value, S_IWUGO | S_IRUGO,			\
+	  show_servo##value, set_servo##value);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#288: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:179:
+#define show_set(value)	\
+static ssize_t set_servo##value (struct device *dev,			\
+					const char *buf, size_t count)	\
+{									\
+	int degrees, minutes;						\
+	struct usb_interface *intf = to_usb_interface (dev);		\
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\
+									\
+	minutes = 0;							\
+	/* must at least convert degrees */				\
+	if (sscanf (buf, "%d.%d", &degrees, &minutes) < 1) {		\
+		return -EINVAL;						\
+	}								\
+									\
+	if (degrees < -23 || degrees > (180 + 23) ||			\
+	    minutes < 0 || minutes > 59) {				\
+		return -EINVAL;						\
+	}								\
+									\
+	if (servo->version >= 3) 					\
+		change_position_v30 (servo, value, degrees, minutes);	\
+	else 								\
+		change_position_v20 (servo, value, degrees, minutes);	\
+									\
+	return count;							\
+}									\
+									\
+static ssize_t show_servo##value (struct device *dev, char *buf) 	\
+{									\
+	struct usb_interface *intf = to_usb_interface (dev);		\
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\
+									\
+	return sprintf (buf, "%d.%02d\n", servo->degrees[value],	\
+				servo->minutes[value]);			\
+}									\
+static DEVICE_ATTR(servo##value, S_IWUGO | S_IRUGO,			\
+	  show_servo##value, set_servo##value);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:180:
+static ssize_t set_servo##value (struct device *dev,			\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#293: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:184:
+	struct usb_interface *intf = to_usb_interface (dev);		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#294: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:185:
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:189:
+	if (sscanf (buf, "%d.%d", &degrees, &minutes) < 1) {		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:198:
+^Iif (servo->version >= 3) ^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:199:
+		change_position_v30 (servo, value, degrees, minutes);	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:200:
+^Ielse ^I^I^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:201:
+		change_position_v20 (servo, value, degrees, minutes);	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#315: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:206:
+static ssize_t show_servo##value (struct device *dev, char *buf) ^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:206:
+static ssize_t show_servo##value (struct device *dev, char *buf) 	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#317: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:208:
+	struct usb_interface *intf = to_usb_interface (dev);		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#318: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:209:
+	struct phidget_servo *servo = usb_get_intfdata (intf);		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:211:
+	return sprintf (buf, "%d.%02d\n", servo->degrees[value],	\

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#323: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:214:
+static DEVICE_ATTR(servo##value, S_IWUGO | S_IRUGO,			\

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO | S_IRUGO' are not preferred. Consider using octal permissions '0666'.
#323: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:214:
+static DEVICE_ATTR(servo##value, S_IWUGO | S_IRUGO,			\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:228:
+	dev = kmalloc(sizeof (struct phidget_servo), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof (struct phidget_servo)...)
#337: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:228:
+	dev = kmalloc(sizeof (struct phidget_servo), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#338: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:229:
+	if (dev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#339: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:230:
+	if (dev == NULL) {
+		dev_err(&interface->dev, "%s - out of memory\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#339: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:230:
+		dev_err(&interface->dev, "%s - out of memory\n", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#342: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:233:
+	memset(dev, 0x00, sizeof (*dev));

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#345: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:236:
+	switch (udev->descriptor.idVendor) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#353: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:244:
+	switch (udev->descriptor.idProduct) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: usr/src/linux-2.6.0/drivers/usb/misc/phidgetservo.c:266:
+^Iif (dev->version == 2) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 28 warnings, 11 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
