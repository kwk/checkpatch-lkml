ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#75: 
--- a/fs/driverfs/inode.c	Thu Oct 24 23:30:31 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: fs/driverfs/inode.c:524:
+	return lookup_hash(&qstr,parent, NULL);
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#93: FILE: fs/exec.c:116:
+        intent_init(&nd, IT_OPEN, 0, NULL);
                      ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: fs/exec.c:116:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: fs/exec.c:116:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#106: FILE: fs/exec.c:428:
+        intent_init(&nd, IT_OPEN, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: fs/exec.c:428:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/exec.c:428:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#107: FILE: fs/exec.c:429:
+        err = path_lookup(name, LOOKUP_FOLLOW, &nd);
                                                 ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: fs/exec.c:429:
+        err = path_lookup(name, LOOKUP_FOLLOW, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/exec.c:429:
+        err = path_lookup(name, LOOKUP_FOLLOW, &nd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: fs/exec.c:430:
+        file = ERR_PTR(err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/exec.c:430:
+        file = ERR_PTR(err);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: fs/namei.c:268:
+        if (nd->dentry && nd->dentry->d_op && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: fs/namei.c:268:
+        if (nd->dentry && nd->dentry->d_op && $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: fs/namei.c:268:
+        if (nd->dentry && nd->dentry->d_op && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: fs/namei.c:269:
+            nd->dentry->d_op->d_intent_release)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: fs/namei.c:269:
+            nd->dentry->d_op->d_intent_release)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: fs/namei.c:270:
+                nd->dentry->d_op->d_intent_release(nd->dentry, &nd->it);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/namei.c:270:
+                nd->dentry->d_op->d_intent_release(nd->dentry, &nd->it);$

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#130: FILE: fs/namei.c:279:
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/namei.c:279:
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/namei.c:279:
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/namei.c:279:
+static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#141: FILE: fs/namei.c:290:
+		return dentry;
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#141: FILE: fs/namei.c:290:
+	} else
 	if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {

CHECK:BRACES: Unbalanced braces around else statement
#141: FILE: fs/namei.c:290:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#150: FILE: fs/namei.c:365:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: fs/namei.c:365:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: fs/namei.c:365:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: fs/namei.c:365:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, int flags, struct lookup_intent *it)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: fs/namei.c:384:
+^I^I^I^Iresult = dir->i_op->lookup2(dir, dentry, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/namei.c:385:
+                                                            flags, it);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/namei.c:385:
+                                                            flags, it);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/namei.c:387:
+                                result = dir->i_op->lookup(dir, dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/namei.c:387:
+                                result = dir->i_op->lookup(dir, dentry);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: fs/namei.c:761:
+^I^I^Iif (!inode->i_op || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/namei.c:762:
+                            (!inode->i_op->lookup && !inode->i_op->lookup2))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: fs/namei.c:762:
+			if (!inode->i_op || 
+                            (!inode->i_op->lookup && !inode->i_op->lookup2))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/namei.c:762:
+                            (!inode->i_op->lookup && !inode->i_op->lookup2))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: fs/namei.c:911:
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: fs/namei.c:911:
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: fs/namei.c:911:
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: fs/namei.c:912:
+                            struct lookup_intent *it)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: fs/namei.c:912:
+                            struct lookup_intent *it)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: fs/namei.c:941:
+                if (inode->i_op->lookup2) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/namei.c:941:
+                if (inode->i_op->lookup2) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/namei.c:941:
+                if (inode->i_op->lookup2) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/namei.c:942:
+                        dentry = inode->i_op->lookup2(inode, new, 0, it);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/namei.c:942:
+                        dentry = inode->i_op->lookup2(inode, new, 0, it);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: fs/namei.c:943:
+                else $

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: fs/namei.c:943:
+                else $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: fs/namei.c:943:
+                else $

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: fs/namei.c:944:
+                        dentry = inode->i_op->lookup(inode, new);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: fs/namei.c:944:
+                        dentry = inode->i_op->lookup(inode, new);$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#242: FILE: fs/namei.c:956:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/namei.c:956:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/namei.c:956:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/namei.c:956:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct lookup_intent *it)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/namei.c:981:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/namei.c:981:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/namei.c:981:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: fs/namei.c:983:
+        return lookup_one_len_it(name, base, len, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/namei.c:983:
+        return lookup_one_len_it(name, base, len, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#268: FILE: fs/namei.c:1284:
+        intent_init(nd, IT_OPEN|IT_CREAT, mode, NULL);
                     ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: fs/namei.c:1284:
+        intent_init(nd, IT_OPEN|IT_CREAT, mode, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: fs/namei.c:1284:
+        intent_init(nd, IT_OPEN|IT_CREAT, mode, NULL);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#268: FILE: fs/namei.c:1284:
+        intent_init(nd, IT_OPEN|IT_CREAT, mode, NULL);
                                ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:1471:
+        intent_init(&nd, IT_MKNOD, mode, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: fs/namei.c:1471:
+        intent_init(&nd, IT_MKNOD, mode, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: fs/namei.c:1471:
+        intent_init(&nd, IT_MKNOD, mode, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#311: FILE: fs/namei.c:1538:
+                intent_init(&nd, IT_MKDIR, mode, NULL);
                              ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: fs/namei.c:1538:
+                intent_init(&nd, IT_MKDIR, mode, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: fs/namei.c:1538:
+                intent_init(&nd, IT_MKDIR, mode, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/namei.c:1635:
+        intent_init(&nd, IT_RMDIR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: fs/namei.c:1635:
+        intent_init(&nd, IT_RMDIR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: fs/namei.c:1635:
+        intent_init(&nd, IT_RMDIR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#328: FILE: fs/namei.c:1652:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#328: FILE: fs/namei.c:1652:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#328: FILE: fs/namei.c:1652:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#336: FILE: fs/namei.c:1706:
+        intent_init(&nd, IT_UNLINK, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: fs/namei.c:1706:
+        intent_init(&nd, IT_UNLINK, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: fs/namei.c:1706:
+        intent_init(&nd, IT_UNLINK, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#345: FILE: fs/namei.c:1714:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#345: FILE: fs/namei.c:1714:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#345: FILE: fs/namei.c:1714:
+	dentry = lookup_hash(&nd.last, nd.dentry, &nd.it);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#353: FILE: fs/namei.c:1776:
+                intent_init(&nd, IT_SYMLINK, 0, from);
                              ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: fs/namei.c:1776:
+                intent_init(&nd, IT_SYMLINK, 0, from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: fs/namei.c:1776:
+                intent_init(&nd, IT_SYMLINK, 0, from);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: fs/namei.c:1855:
+        intent_init(&old_nd, IT_LINK, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: fs/namei.c:1855:
+        intent_init(&old_nd, IT_LINK, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#365: FILE: fs/namei.c:1859:
+        intent_init(&nd, IT_LINK2, 0, &old_nd);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: fs/namei.c:1859:
+        intent_init(&nd, IT_LINK2, 0, &old_nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: fs/namei.c:1859:
+        intent_init(&nd, IT_LINK2, 0, &old_nd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: fs/namei.c:1991:
+^I       struct inode *new_dir, struct dentry *new_dentry, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: fs/namei.c:1992:
+               struct lookup_intent *it)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: fs/namei.c:1992:
+               struct lookup_intent *it)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: fs/namei.c:2040:
+        intent_init(&oldnd, IT_RENAME, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: fs/namei.c:2040:
+        intent_init(&oldnd, IT_RENAME, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: fs/namei.c:2045:
+        intent_init(&newnd, IT_RENAME2, 0, &oldnd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: fs/namei.c:2045:
+        intent_init(&newnd, IT_RENAME2, 0, &oldnd);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#423: FILE: fs/namespace.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#424: FILE: fs/namespace.c:2:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#432: FILE: fs/namespace.c:375:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: fs/namespace.c:375:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: fs/namespace.c:375:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: fs/namespace.c:509:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: fs/namespace.c:509:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: fs/namespace.c:579:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: fs/namespace.c:579:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: fs/namespace.c:937:
+        intent_init(&new_nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: fs/namespace.c:937:
+        intent_init(&new_nd, IT_GETATTR, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: fs/namespace.c:945:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: fs/namespace.c:945:
+        intent_init(&old_nd, IT_GETATTR, 0, NULL);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#474: FILE: fs/nfsd/vfs.c:1283:
 	} else
[...]
+	err = vfs_rename(fdir, odentry, tdir, ndentry, NULL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#488: FILE: fs/open.c:49:
+        intent_init(&nd, IT_STATFS, 0, buf);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: fs/open.c:49:
+        intent_init(&nd, IT_STATFS, 0, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: fs/open.c:49:
+        intent_init(&nd, IT_STATFS, 0, buf);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#496: FILE: fs/open.c:106:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: fs/open.c:106:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: fs/open.c:106:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#504: FILE: fs/open.c:244:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: fs/open.c:244:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: fs/open.c:244:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#512: FILE: fs/open.c:291:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: fs/open.c:291:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: fs/open.c:291:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#520: FILE: fs/open.c:361:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: fs/open.c:361:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: fs/open.c:361:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#528: FILE: fs/open.c:384:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: fs/open.c:384:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: fs/open.c:384:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#536: FILE: fs/open.c:436:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: fs/open.c:436:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: fs/open.c:436:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#544: FILE: fs/open.c:500:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: fs/open.c:500:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: fs/open.c:500:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#552: FILE: fs/open.c:568:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: fs/open.c:568:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: fs/open.c:568:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#560: FILE: fs/open.c:582:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: fs/open.c:582:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: fs/open.c:582:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#568: FILE: fs/open.c:630:
+        intent_init(&nd, IT_OPEN, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: fs/open.c:630:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: fs/open.c:630:
+        intent_init(&nd, IT_OPEN, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#579: FILE: fs/quota.c:113:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: fs/quota.c:113:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: fs/quota.c:113:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#590: FILE: fs/stat.c:65:
+        intent_init(&nd, IT_GETATTR, 0, stat);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: fs/stat.c:65:
+        intent_init(&nd, IT_GETATTR, 0, stat);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: fs/stat.c:65:
+        intent_init(&nd, IT_GETATTR, 0, stat);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#598: FILE: fs/stat.c:79:
+        intent_init(&nd, IT_GETATTR, 0, stat);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: fs/stat.c:79:
+        intent_init(&nd, IT_GETATTR, 0, stat);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: fs/stat.c:79:
+        intent_init(&nd, IT_GETATTR, 0, stat);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#606: FILE: fs/stat.c:237:
+        intent_init(&nd, IT_READLINK, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: fs/stat.c:237:
+        intent_init(&nd, IT_READLINK, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: fs/stat.c:237:
+        intent_init(&nd, IT_READLINK, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#617: FILE: fs/super.c:479:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: fs/super.c:479:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: fs/super.c:479:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#628: FILE: fs/xattr.c:108:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: fs/xattr.c:108:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: fs/xattr.c:108:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#636: FILE: fs/xattr.c:123:
+        intent_init(&nd, IT_SETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: fs/xattr.c:123:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: fs/xattr.c:123:
+        intent_init(&nd, IT_SETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#644: FILE: fs/xattr.c:190:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: fs/xattr.c:190:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: fs/xattr.c:190:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#652: FILE: fs/xattr.c:205:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: fs/xattr.c:205:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: fs/xattr.c:205:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#660: FILE: fs/xattr.c:265:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: fs/xattr.c:265:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: fs/xattr.c:265:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#668: FILE: fs/xattr.c:280:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: fs/xattr.c:280:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: fs/xattr.c:280:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#676: FILE: fs/xattr.c:337:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: fs/xattr.c:337:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: fs/xattr.c:337:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#684: FILE: fs/xattr.c:352:
+        intent_init(&nd, IT_GETATTR, 0, NULL);
                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: fs/xattr.c:352:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: fs/xattr.c:352:
+        intent_init(&nd, IT_GETATTR, 0, NULL);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#696: FILE: include/linux/dcache.h:13:
+#define IT_CREAT  (1<<1)
                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#696: FILE: include/linux/dcache.h:13:
+#define IT_CREAT  (1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#697: FILE: include/linux/dcache.h:14:
+#define IT_MKDIR  (1<<2)
                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#697: FILE: include/linux/dcache.h:14:
+#define IT_MKDIR  (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#698: FILE: include/linux/dcache.h:15:
+#define IT_LINK  (1<<3)
                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#698: FILE: include/linux/dcache.h:15:
+#define IT_LINK  (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#699: FILE: include/linux/dcache.h:16:
+#define IT_LINK2  (1<<4)
                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#699: FILE: include/linux/dcache.h:16:
+#define IT_LINK2  (1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#700: FILE: include/linux/dcache.h:17:
+#define IT_SYMLINK  (1<<5)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#700: FILE: include/linux/dcache.h:17:
+#define IT_SYMLINK  (1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#701: FILE: include/linux/dcache.h:18:
+#define IT_UNLINK  (1<<6)
                      ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#701: FILE: include/linux/dcache.h:18:
+#define IT_UNLINK  (1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#702: FILE: include/linux/dcache.h:19:
+#define IT_RMDIR  (1<<7)
                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#702: FILE: include/linux/dcache.h:19:
+#define IT_RMDIR  (1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#703: FILE: include/linux/dcache.h:20:
+#define IT_RENAME  (1<<8)
                      ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#703: FILE: include/linux/dcache.h:20:
+#define IT_RENAME  (1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#704: FILE: include/linux/dcache.h:21:
+#define IT_RENAME2  (1<<9)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#704: FILE: include/linux/dcache.h:21:
+#define IT_RENAME2  (1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#705: FILE: include/linux/dcache.h:22:
+#define IT_READDIR  (1<<10)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#705: FILE: include/linux/dcache.h:22:
+#define IT_READDIR  (1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#706: FILE: include/linux/dcache.h:23:
+#define IT_GETATTR  (1<<11)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#706: FILE: include/linux/dcache.h:23:
+#define IT_GETATTR  (1<<11)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: include/linux/dcache.h:24:
+#define IT_SETATTR  (1<<12)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#707: FILE: include/linux/dcache.h:24:
+#define IT_SETATTR  (1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#708: FILE: include/linux/dcache.h:25:
+#define IT_READLINK  (1<<13)
                        ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#708: FILE: include/linux/dcache.h:25:
+#define IT_READLINK  (1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#709: FILE: include/linux/dcache.h:26:
+#define IT_MKNOD  (1<<14)
                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#709: FILE: include/linux/dcache.h:26:
+#define IT_MKNOD  (1<<14)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#710: FILE: include/linux/dcache.h:27:
+#define IT_LOOKUP  (1<<15)
                      ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#710: FILE: include/linux/dcache.h:27:
+#define IT_LOOKUP  (1<<15)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#711: FILE: include/linux/dcache.h:28:
+#define IT_STATFS  (1<<16)
                      ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#711: FILE: include/linux/dcache.h:28:
+#define IT_STATFS  (1<<16)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#713: FILE: include/linux/dcache.h:30:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: include/linux/dcache.h:101:
+        struct lookup_intent *d_it;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: include/linux/dcache.h:101:
+        struct lookup_intent *d_it;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#738: FILE: include/linux/dcache.h:118:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#738: FILE: include/linux/dcache.h:118:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#738: FILE: include/linux/dcache.h:118:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct  dentry *' should also have an identifier name
#739: FILE: include/linux/dcache.h:119:
+	void (*d_intent_release)(struct  dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#739: FILE: include/linux/dcache.h:119:
+	void (*d_intent_release)(struct  dentry *, struct lookup_intent *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#747: FILE: include/linux/fs.h:1:
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#748: FILE: include/linux/fs.h:2:
+
+

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#757: FILE: include/linux/fs.h:709:
+extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct lookup_intent *it);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: include/linux/fs.h:778:
+^Istruct dentry * (*lookup2) (struct inode *,struct dentry *, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#765: FILE: include/linux/fs.h:778:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 

ERROR:SPACING: space required after that ',' (ctx:OxV)
#765: FILE: include/linux/fs.h:778:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 
 	                                          ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#765: FILE: include/linux/fs.h:778:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#765: FILE: include/linux/fs.h:778:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#765: FILE: include/linux/fs.h:778:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: include/linux/fs.h:779:
+                                    int flags, struct lookup_intent *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: include/linux/fs.h:779:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, 
+                                    int flags, struct lookup_intent *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: include/linux/fs.h:779:
+                                    int flags, struct lookup_intent *);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#782: FILE: include/linux/namei.h:1:
+

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#790: FILE: include/linux/namei.h:9:
+/* for debugging to detect unitialized intents */
                            ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: include/linux/namei.h:14:
+        int it_magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: include/linux/namei.h:14:
+        int it_magic;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: include/linux/namei.h:17:
+        __u8 it_fsdata[80];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: include/linux/namei.h:17:
+        __u8 it_fsdata[80];$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#801: FILE: include/linux/namei.h:20:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: include/linux/namei.h:29:
+        struct lookup_intent it;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: include/linux/namei.h:29:
+        struct lookup_intent it;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#812: FILE: include/linux/namei.h:32:
+static inline void intent_init(struct nameidata *nd, int op, 
                                                  ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#812: FILE: include/linux/namei.h:32:
+static inline void intent_init(struct nameidata *nd, int op, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: include/linux/namei.h:33:
+                               int mode, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: include/linux/namei.h:33:
+                               int mode, void *data)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: include/linux/namei.h:35:
+        nd->it.it_op = op;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: include/linux/namei.h:35:
+        nd->it.it_op = op;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: include/linux/namei.h:36:
+        nd->it.it_mode = mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: include/linux/namei.h:36:
+        nd->it.it_mode = mode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: include/linux/namei.h:37:
+        nd->it.it_data = data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: include/linux/namei.h:37:
+        nd->it.it_data = data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: include/linux/namei.h:38:
+        nd->it.it_magic = INTENT_MAGIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: include/linux/namei.h:38:
+        nd->it.it_magic = INTENT_MAGIC;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#828: FILE: include/linux/namei.h:71:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *, struct lookup_intent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/linux/namei.h:71:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#828: FILE: include/linux/namei.h:71:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#828: FILE: include/linux/namei.h:71:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#828: FILE: include/linux/namei.h:71:
+extern struct dentry * lookup_hash(struct qstr *, struct dentry *, struct lookup_intent *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#843: FILE: kernel/ksyms.c:368:
+EXPORT_SYMBOL(exit_files);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#844: FILE: kernel/ksyms.c:369:
+EXPORT_SYMBOL(kmem_cache_validate);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#857: FILE: net/unix/af_unix.c:718:
+		dentry = lookup_hash(&nd.last, nd.dentry, NULL);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#857: FILE: net/unix/af_unix.c:718:
+		dentry = lookup_hash(&nd.last, nd.dentry, NULL);
 		                               ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419777.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 93 errors, 139 warnings, 42 checks, 665 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419777.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
