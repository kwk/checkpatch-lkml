WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This patch updates i2c support in kernel to 2.6.0. I have corrected original patch

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#51: FILE: drivers/i2c/i2c-algo-bit.c:24:
+/* $Id: i2c-algo-bit.c,v 1.29 2001/04/03 02:44:02 mds Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#64: FILE: drivers/i2c/i2c-algo-pcf.c:26:
+/* Partially rewriten by Oleg I. Vdovikin <vdovikin@jscc.ru> to handle multiple
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#65: FILE: drivers/i2c/i2c-algo-pcf.c:27:
+/* Partially rewriten by Oleg I. Vdovikin <vdovikin@jscc.ru> to handle multiple
+   messages, proper stop/repstart signaling during receive,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#66: FILE: drivers/i2c/i2c-algo-pcf.c:28:
+   added detect code */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#92: FILE: drivers/i2c/i2c-algo-pcf.c:55:
+static int i2c_debug=0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#92: FILE: drivers/i2c/i2c-algo-pcf.c:55:
+static int i2c_debug=0;
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#105: FILE: drivers/i2c/i2c-algo-pcf.c:97:
+		udelay(100); /* wait for 100 us */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:BRACES: braces {} are not necessary for single statement blocks
#110: FILE: drivers/i2c/i2c-algo-pcf.c:101:
+	if (timeout <= 0) {
 		printk("Timeout waiting for Bus Busy\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: drivers/i2c/i2c-algo-pcf.c:104:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#118: FILE: drivers/i2c/i2c-algo-pcf.c:105:
+	return (timeout<=0);
 	               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: drivers/i2c/i2c-algo-pcf.c:147:
+	DEB3(printk("i2c-algo-pcf.o: PCF state 0x%02x\n", get_pcf(adap, 1)));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#143: FILE: drivers/i2c/i2c-algo-pcf.c:152:
+	/* check to see S1 now used as R/W ctrl -
+	   PCF8584 does that when ESO is zero */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#143: FILE: drivers/i2c/i2c-algo-pcf.c:152:
+	   PCF8584 does that when ESO is zero */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#145: FILE: drivers/i2c/i2c-algo-pcf.c:154:
+	if ((temp = get_pcf(adap, 1)) != (0)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#146: FILE: drivers/i2c/i2c-algo-pcf.c:155:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S0 (0x%02x).\n", temp));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#146: FILE: drivers/i2c/i2c-algo-pcf.c:155:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S0 (0x%02x).\n", temp));

WARNING:TYPO_SPELLING: 'definetly' may be misspelled - perhaps 'definitely'?
#147: FILE: drivers/i2c/i2c-algo-pcf.c:156:
+		return -ENXIO; /* definetly not PCF8584 */
 		                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#152: FILE: drivers/i2c/i2c-algo-pcf.c:161:
+	/* check it's realy writen */
 	              ^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#153: FILE: drivers/i2c/i2c-algo-pcf.c:162:
+	if ((temp = i2c_inb(adap)) != get_own(adap)) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#154: FILE: drivers/i2c/i2c-algo-pcf.c:163:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't set S0 (0x%02x).\n", temp));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: drivers/i2c/i2c-algo-pcf.c:163:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't set S0 (0x%02x).\n", temp));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#161: FILE: drivers/i2c/i2c-algo-pcf.c:170:
+	if ((temp = get_pcf(adap, 1)) != I2C_PCF_ES1) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#162: FILE: drivers/i2c/i2c-algo-pcf.c:171:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S2 (0x%02x).\n", temp));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: drivers/i2c/i2c-algo-pcf.c:171:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S2 (0x%02x).\n", temp));

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#168: FILE: drivers/i2c/i2c-algo-pcf.c:177:
+	/* check it's realy writen, the only 5 lowest bits does matter */
 	              ^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#169: FILE: drivers/i2c/i2c-algo-pcf.c:178:
+	if (((temp = i2c_inb(adap)) & 0x1f) != get_clock(adap)) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#170: FILE: drivers/i2c/i2c-algo-pcf.c:179:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't set S2 (0x%02x).\n", temp));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: drivers/i2c/i2c-algo-pcf.c:179:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't set S2 (0x%02x).\n", temp));

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#252: FILE: drivers/i2c/i2c-algo-pcf.c:186:
+	/* check to see PCF is realy idled and we can access status register */
 	                       ^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#253: FILE: drivers/i2c/i2c-algo-pcf.c:187:
+	if ((temp = get_pcf(adap, 1)) != (I2C_PCF_PIN | I2C_PCF_BB)) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#254: FILE: drivers/i2c/i2c-algo-pcf.c:188:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S1` (0x%02x).\n", temp));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#254: FILE: drivers/i2c/i2c-algo-pcf.c:188:
+		DEB2(printk("i2c-algo-pcf.o: PCF detection failed -- can't select S1` (0x%02x).\n", temp));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/i2c/i2c-algo-pcf.c:191:
+^I$

WARNING:TYPO_SPELLING: 'deteted' may be misspelled - perhaps 'detected'?
#259: FILE: drivers/i2c/i2c-algo-pcf.c:192:
+	printk("i2c-algo-pcf.o: deteted and initialized PCF8584.\n");
 	                        ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: drivers/i2c/i2c-algo-pcf.c:192:
+	printk("i2c-algo-pcf.o: deteted and initialized PCF8584.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: drivers/i2c/i2c-algo-pcf.c:197:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: drivers/i2c/i2c-algo-pcf.c:225:
+                         int count, int last)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/i2c/i2c-algo-pcf.c:225:
+                         int count, int last)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: drivers/i2c/i2c-algo-pcf.c:236:
+^I^I^Ii2c_stop(adap); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: drivers/i2c/i2c-algo-pcf.c:243:
+^I^I^Ii2c_stop(adap); $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#300: FILE: drivers/i2c/i2c-algo-pcf.c:250:
+	if (last) {
[...]
+	else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: drivers/i2c/i2c-algo-pcf.c:251:
+^I^Ii2c_stop(adap); $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#303: FILE: drivers/i2c/i2c-algo-pcf.c:253:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#303: FILE: drivers/i2c/i2c-algo-pcf.c:253:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: drivers/i2c/i2c-algo-pcf.c:262:
+                         int count, int last)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: drivers/i2c/i2c-algo-pcf.c:262:
+                         int count, int last)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#334: FILE: drivers/i2c/i2c-algo-pcf.c:269:
+	for (i = 0; i <= count; i++) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: drivers/i2c/i2c-algo-pcf.c:271:
+^I^I^Ii2c_stop(adap); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#337: FILE: drivers/i2c/i2c-algo-pcf.c:272:
+			printk("i2c-algo-pcf.o: pcf_readbytes timed out.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcf_readbytes', this function's name, in a string
#337: FILE: drivers/i2c/i2c-algo-pcf.c:272:
+			printk("i2c-algo-pcf.o: pcf_readbytes timed out.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != count'
#344: FILE: drivers/i2c/i2c-algo-pcf.c:277:
+		if ((status & I2C_PCF_LRB) && (i != count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: drivers/i2c/i2c-algo-pcf.c:278:
+^I^I^Ii2c_stop(adap); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: drivers/i2c/i2c-algo-pcf.c:283:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#367: FILE: drivers/i2c/i2c-algo-pcf.c:284:
+		if (i == count - 1) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: drivers/i2c/i2c-algo-pcf.c:286:
+^I^I} else $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#369: FILE: drivers/i2c/i2c-algo-pcf.c:286:
+		} else 
+		if (i == count) {

CHECK:BRACES: Unbalanced braces around else statement
#369: FILE: drivers/i2c/i2c-algo-pcf.c:286:
+		} else 

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#371: FILE: drivers/i2c/i2c-algo-pcf.c:288:
+			if (last) {
[...]
+			} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: drivers/i2c/i2c-algo-pcf.c:289:
+^I^I^I^Ii2c_stop(adap); $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#380: FILE: drivers/i2c/i2c-algo-pcf.c:295:
+		if (i) {
[...]
+		} else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: drivers/i2c/i2c-algo-pcf.c:357:
+	int ret=0, timeout, status;
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#406: FILE: drivers/i2c/i2c-algo-pcf.c:359:
     
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: drivers/i2c/i2c-algo-pcf.c:367:
+^I$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#413: FILE: drivers/i2c/i2c-algo-pcf.c:368:
+	for (i = 0;ret >= 0 && i < num; i++) {
 	          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#416: FILE: drivers/i2c/i2c-algo-pcf.c:371:
+		DEB2(printk("i2c-algo-pcf.o: Doing %s %d bytes to 0x%02x - %d of %d messages\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/i2c/i2c-algo-pcf.c:372:
+		DEB2(printk("i2c-algo-pcf.o: Doing %s %d bytes to 0x%02x - %d of %d messages\n",
+		     pmsg->flags & I2C_M_RD ? "read" : "write",

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: drivers/i2c/i2c-algo-pcf.c:373:
+                     pmsg->len, pmsg->addr, i + 1, num);)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/i2c/i2c-algo-pcf.c:373:
+                     pmsg->len, pmsg->addr, i + 1, num);)$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#428: FILE: drivers/i2c/i2c-algo-pcf.c:378:
+		if (i == 0) {
+			i2c_start(adap); 
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: drivers/i2c/i2c-algo-pcf.c:379:
+^I^I^Ii2c_start(adap); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/i2c/i2c-algo-pcf.c:386:
+			DEB2(printk("i2c-algo-pcf.o: Timeout waiting "

WARNING:SPLIT_STRING: quoted string split across lines
#445: FILE: drivers/i2c/i2c-algo-pcf.c:387:
+			DEB2(printk("i2c-algo-pcf.o: Timeout waiting "
+				    "for PIN(1) in pcf_xfer\n");)

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#459: FILE: drivers/i2c/i2c-algo-pcf.c:395:
+			DEB2(printk("i2c-algo-pcf.o: No LRB(1) in pcf_xfer\n");)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#466: FILE: drivers/i2c/i2c-algo-pcf.c:400:
+		DEB3(printk("i2c-algo-pcf.o: Msg %d, addr=0x%x, flags=0x%x, len=%d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: drivers/i2c/i2c-algo-pcf.c:407:
+                                            (i + 1 == num));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: drivers/i2c/i2c-algo-pcf.c:407:
+			ret = pcf_readbytes(i2c_adap, pmsg->buf, pmsg->len,
+                                            (i + 1 == num));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/i2c/i2c-algo-pcf.c:407:
+                                            (i + 1 == num));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#491: FILE: drivers/i2c/i2c-algo-pcf.c:410:
+				DEB2(printk("i2c-algo-pcf.o: fail: "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#492: FILE: drivers/i2c/i2c-algo-pcf.c:411:
+					    "only read %d bytes.\n",ret));
 					                           ^

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: drivers/i2c/i2c-algo-pcf.c:411:
+				DEB2(printk("i2c-algo-pcf.o: fail: "
+					    "only read %d bytes.\n",ret));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: drivers/i2c/i2c-algo-pcf.c:413:
+				DEB2(printk("i2c-algo-pcf.o: read %d bytes.\n",ret));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: drivers/i2c/i2c-algo-pcf.c:413:
+				DEB2(printk("i2c-algo-pcf.o: read %d bytes.\n",ret));
 				                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: drivers/i2c/i2c-algo-pcf.c:417:
+                                            (i + 1 == num));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: drivers/i2c/i2c-algo-pcf.c:417:
+			ret = pcf_sendbytes(i2c_adap, pmsg->buf, pmsg->len,
+                                            (i + 1 == num));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/i2c/i2c-algo-pcf.c:417:
+                                            (i + 1 == num));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#506: FILE: drivers/i2c/i2c-algo-pcf.c:420:
+				DEB2(printk("i2c-algo-pcf.o: fail: "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#507: FILE: drivers/i2c/i2c-algo-pcf.c:421:
+					    "only wrote %d bytes.\n",ret));
 					                            ^

WARNING:SPLIT_STRING: quoted string split across lines
#507: FILE: drivers/i2c/i2c-algo-pcf.c:421:
+				DEB2(printk("i2c-algo-pcf.o: fail: "
+					    "only wrote %d bytes.\n",ret));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: drivers/i2c/i2c-algo-pcf.c:423:
+				DEB2(printk("i2c-algo-pcf.o: wrote %d bytes.\n",ret));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: drivers/i2c/i2c-algo-pcf.c:423:
+				DEB2(printk("i2c-algo-pcf.o: wrote %d bytes.\n",ret));
 				                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#536: FILE: drivers/i2c/i2c-algo-pcf.c:475:
+	if ((i = pcf_init_8584(pcf_adap))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#536: FILE: drivers/i2c/i2c-algo-pcf.c:475:
+	if ((i = pcf_init_8584(pcf_adap))) {
+		return i;
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#551: FILE: drivers/i2c/i2c-algo-pcf.c:490:
+			if (wait_for_bb(pcf_adap)) {
+    			printk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: drivers/i2c/i2c-algo-pcf.c:491:
+    ^I^I^Iprintk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#552: FILE: drivers/i2c/i2c-algo-pcf.c:491:
+    ^I^I^Iprintk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: drivers/i2c/i2c-algo-pcf.c:491:
+    ^I^I^Iprintk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#552: FILE: drivers/i2c/i2c-algo-pcf.c:491:
+    			printk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: drivers/i2c/i2c-algo-pcf.c:492:
+^I^I           adap->name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: drivers/i2c/i2c-algo-pcf.c:492:
+    			printk(KERN_INFO " i2c-algo-pcf.o: scanning bus %s - TIMEOUTed.\n",
+		           adap->name);

WARNING:TABSTOP: Statements should start on a tabstop
#554: FILE: drivers/i2c/i2c-algo-pcf.c:493:
+			    break;

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#574: FILE: drivers/i2c/i2c-core.c:23:
+/* $Id: i2c-core.c,v 1.61 2001/06/05 01:50:31 mds Exp $ */

WARNING:SPLIT_STRING: quoted string split across lines
#581: FILE: drivers/i2c/i2c-core.c:251:
 				printk("i2c-core.o: adapter %s not "
+					"unregistered, because client at "

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#647: FILE: drivers/i2c/i2c-dev.c:31:
+/* $Id: i2c-dev.c,v 1.38 2001/04/27 17:53:04 frodo Exp $ */

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#662: FILE: drivers/i2c/i2c-dev.c:519:
+	i2cdev_initialized --;
 	                   ^

WARNING:TYPO_SPELLING: 'Partialy' may be misspelled - perhaps 'Partially'?
#671: FILE: drivers/i2c/i2c-elektor.c:25:
+/* Partialy rewriten by Oleg I. Vdovikin for mmapped support of 
    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: drivers/i2c/i2c-elektor.c:25:
+/* Partialy rewriten by Oleg I. Vdovikin for mmapped support of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#672: FILE: drivers/i2c/i2c-elektor.c:26:
+/* Partialy rewriten by Oleg I. Vdovikin for mmapped support of 
+   for Alpha Processor Inc. UP-2000(+) boards */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#672: FILE: drivers/i2c/i2c-elektor.c:26:
+   for Alpha Processor Inc. UP-2000(+) boards */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#697: FILE: drivers/i2c/i2c-elektor.c:46:
+static int base   = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#698: FILE: drivers/i2c/i2c-elektor.c:47:
+static int irq    = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#701: FILE: drivers/i2c/i2c-elektor.c:50:
+static int mmapped = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#702: FILE: drivers/i2c/i2c-elektor.c:51:
+static int i2c_debug = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: drivers/i2c/i2c-elektor.c:53:
+/* vdovikin: removed static struct i2c_pcf_isa gpi; code - $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#705: FILE: drivers/i2c/i2c-elektor.c:54:
+/* vdovikin: removed static struct i2c_pcf_isa gpi; code - 
+  this module in real supports only one device, due to missing arguments

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#707: FILE: drivers/i2c/i2c-elektor.c:56:
+  need to be rewriten - but for now just remove this for simpler reading */
              ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#707: FILE: drivers/i2c/i2c-elektor.c:56:
+  need to be rewriten - but for now just remove this for simpler reading */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#742: FILE: drivers/i2c/i2c-elektor.c:77:
+	if (ctl && irq) {
+		val |= I2C_PCF_ENI;
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#746: FILE: drivers/i2c/i2c-elektor.c:81:
+	DEB3(printk("i2c-elektor.o: Write 0x%X 0x%02X\n", address, val & 255));

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: drivers/i2c/i2c-elektor.c:88:
+                   I don't know why this... */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#753: FILE: drivers/i2c/i2c-elektor.c:88:
+	case 2: /* double mapped I/O needed for UP2000 board,
+                   I don't know why this... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#753: FILE: drivers/i2c/i2c-elektor.c:88:
+                   I don't know why this... */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#768: FILE: drivers/i2c/i2c-elektor.c:102:
+	DEB3(printk("i2c-elektor.o: Read 0x%X 0x%02X\n", address, val));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#783: FILE: drivers/i2c/i2c-elektor.c:109:
+	return (own);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#798: FILE: drivers/i2c/i2c-elektor.c:115:
+	return (clock);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#814: FILE: drivers/i2c/i2c-elektor.c:124:
+		if (pcf_pending == 0) {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#815: FILE: drivers/i2c/i2c-elektor.c:125:
+			interruptible_sleep_on_timeout(&pcf_wait, timeout*HZ );
 			                                                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#815: FILE: drivers/i2c/i2c-elektor.c:125:
+			interruptible_sleep_on_timeout(&pcf_wait, timeout*HZ );

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: drivers/i2c/i2c-elektor.c:126:
+		} else

ERROR:SPACING: space prohibited before that close parenthesis ')'
#828: FILE: drivers/i2c/i2c-elektor.c:144:
+		if (check_region(base, 2) < 0 ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#829: FILE: drivers/i2c/i2c-elektor.c:145:
+			printk("i2c-elektor.o: requested I/O region (0x%X:2) is in use.\n", base);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#831: FILE: drivers/i2c/i2c-elektor.c:147:
+			return -ENODEV;
+		} else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#843: FILE: drivers/i2c/i2c-elektor.c:152:
+		if (request_irq(irq, pcf_isa_handler, 0, "PCF8584", 0) < 0) {
[...]
+		} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#844: FILE: drivers/i2c/i2c-elektor.c:153:
+			printk("i2c-elektor.o: Request irq%d failed\n", irq);

CHECK:BRACES: Unbalanced braces around else statement
#846: FILE: drivers/i2c/i2c-elektor.c:155:
+		} else

WARNING:BRACES: braces {} are not necessary for single statement blocks
#860: FILE: drivers/i2c/i2c-elektor.c:168:
+	if (!mmapped) {
+		release_region(base , 2);
 	}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#861: FILE: drivers/i2c/i2c-elektor.c:169:
+		release_region(base , 2);
 		                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: drivers/i2c/i2c-elektor.c:228:
+^I/* check to see we have memory mapped PCF8584 connected to the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#878: FILE: drivers/i2c/i2c-elektor.c:229:
+	/* check to see we have memory mapped PCF8584 connected to the 
+	Cypress cy82c693 PCI-ISA bridge as on UP2000 board */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#878: FILE: drivers/i2c/i2c-elektor.c:229:
+	Cypress cy82c693 PCI-ISA bridge as on UP2000 board */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base == 0'
#879: FILE: drivers/i2c/i2c-elektor.c:230:
+	if ((base == 0) && pci_present()) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: drivers/i2c/i2c-elektor.c:231:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#880: FILE: drivers/i2c/i2c-elektor.c:231:
+	if ((base == 0) && pci_present()) {
+		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: drivers/i2c/i2c-elektor.c:233:
+                    pci_find_device(PCI_VENDOR_ID_CONTAQ, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: drivers/i2c/i2c-elektor.c:233:
+                    pci_find_device(PCI_VENDOR_ID_CONTAQ, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: drivers/i2c/i2c-elektor.c:233:
+                    pci_find_device(PCI_VENDOR_ID_CONTAQ, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: drivers/i2c/i2c-elektor.c:234:
+^I^I                    PCI_DEVICE_ID_CONTAQ_82C693, NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: drivers/i2c/i2c-elektor.c:234:
+                    pci_find_device(PCI_VENDOR_ID_CONTAQ, 
+		                    PCI_DEVICE_ID_CONTAQ_82C693, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: drivers/i2c/i2c-elektor.c:240:
+^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#889: FILE: drivers/i2c/i2c-elektor.c:240:
+			if (!pci_read_config_byte(cy693_dev, 0x47, &config)) {
+				

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#890: FILE: drivers/i2c/i2c-elektor.c:241:
+				DEB3(printk("i2c-elektor.o: found cy82c693, config register 0x47 = 0x%02x.\n", config));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#890: FILE: drivers/i2c/i2c-elektor.c:241:
+				DEB3(printk("i2c-elektor.o: found cy82c693, config register 0x47 = 0x%02x.\n", config));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#893: FILE: drivers/i2c/i2c-elektor.c:244:
+                                   but the most significant bit as seems can be $

ERROR:CODE_INDENT: code indent should use tabs where possible
#893: FILE: drivers/i2c/i2c-elektor.c:244:
+                                   but the most significant bit as seems can be $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#893: FILE: drivers/i2c/i2c-elektor.c:244:
+				/* UP2000 board has this register set to 0xe1,
+                                   but the most significant bit as seems can be 

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: drivers/i2c/i2c-elektor.c:246:
+                                   sequence if guys from API decides to do that$

ERROR:CODE_INDENT: code indent should use tabs where possible
#896: FILE: drivers/i2c/i2c-elektor.c:247:
+                                   (so, we can even enable Tsunami Pchip$

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: drivers/i2c/i2c-elektor.c:248:
+                                   window for the upper 1 Gb) */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: drivers/i2c/i2c-elektor.c:248:
+                                   window for the upper 1 Gb) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: drivers/i2c/i2c-elektor.c:251:
+                                   ROMCS enabled for writes$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#900: FILE: drivers/i2c/i2c-elektor.c:251:
+				/* so just check for ROMCS at 0xe0000,
+                                   ROMCS enabled for writes

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#901: FILE: drivers/i2c/i2c-elektor.c:252:
+				   and external XD Bus buffer in use. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: drivers/i2c/i2c-elektor.c:256:
+                                        /* I don't know why we need to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: drivers/i2c/i2c-elektor.c:257:
+                                           write twice */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#906: FILE: drivers/i2c/i2c-elektor.c:257:
+                                        /* I don't know why we need to
+                                           write twice */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: drivers/i2c/i2c-elektor.c:257:
+                                           write twice */

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: drivers/i2c/i2c-elektor.c:259:
+                                        /* UP2000 drives ISA with$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#909: FILE: drivers/i2c/i2c-elektor.c:260:
+                                        /* UP2000 drives ISA with
+					   8.25 MHz (PCI/4) clock

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#910: FILE: drivers/i2c/i2c-elektor.c:261:
+					   (this can be read from cypress) */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#912: FILE: drivers/i2c/i2c-elektor.c:263:
+					printk("i2c-elektor.o: found API UP2000 like board, will probe PCF8584 later.\n");

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#922: FILE: drivers/i2c/i2c-elektor.c:272:
+		printk("i2c-elektor.o: incorrect base address (0x%0X) specified for mmapped I/O.\n", base);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#922: FILE: drivers/i2c/i2c-elektor.c:272:
+		printk("i2c-elektor.o: incorrect base address (0x%0X) specified for mmapped I/O.\n", base);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#948: FILE: drivers/i2c/i2c-elektor.c:278:
+	if (base == 0) {
+		base = DEFAULT_BASE;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#958: FILE: drivers/i2c/i2c-elektor.c:291:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#959: FILE: drivers/i2c/i2c-elektor.c:292:
+	printk("i2c-elektor.o: found device at %#x.\n", base);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#977: FILE: include/linux/i2c-elektor.h:25:
+/* $Id: i2c-elektor.h,v 1.5 2001/06/05 01:46:33 mds Exp $ */

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#990: FILE: include/linux/i2c-elektor.h:35:
+ * Sometimes it's need to be rewriten -
                              ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#991: FILE: include/linux/i2c-elektor.h:36:
+ * but for now just remove this for simpler reading */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1009: FILE: include/linux/i2c-id.h:23:
+/* $Id: i2c-id.h,v 1.33 2001/06/06 06:16:53 simon Exp $ */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: include/linux/i2c-id.h:102:
+/* IDs --   Use DRIVERIDs 1000-1999 for sensors. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1035: FILE: include/linux/i2c-id.h:103:
+/* IDs --   Use DRIVERIDs 1000-1999 for sensors. 
+   These were originally in sensors.h in the lm_sensors package */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1035: FILE: include/linux/i2c-id.h:103:
+   These were originally in sensors.h in the lm_sensors package */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1074: FILE: drivers/i2c/i2c-proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1075: FILE: drivers/i2c/i2c-proc.c:2:
+/*
+    i2c-proc.c - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#1076: FILE: drivers/i2c/i2c-proc.c:3:
+                monitoring$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1091: FILE: drivers/i2c/i2c-proc.c:18:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1092: FILE: drivers/i2c/i2c-proc.c:19:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1096: FILE: drivers/i2c/i2c-proc.c:23:
+/*
+    This driver puts entries in /proc/sys/dev/sensors for each I2C device

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1107: FILE: drivers/i2c/i2c-proc.c:34:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: drivers/i2c/i2c-proc.c:50:
+static int i2c_create_name(char **name, const char *prefix,
+			       struct i2c_adapter *adapter, int addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: drivers/i2c/i2c-proc.c:52:
+static int i2c_parse_reals(int *nrels, void *buffer, int bufsize,
+			       long *results, int magnitude);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: drivers/i2c/i2c-proc.c:54:
+static int i2c_write_reals(int nrels, void *buffer, int *bufsize,
+			       long *results, int magnitude);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1128: FILE: drivers/i2c/i2c-proc.c:55:
+static int i2c_proc_chips(ctl_table * ctl, int write,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1129: FILE: drivers/i2c/i2c-proc.c:56:
+			      struct file *filp, void *buffer,
 			                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: drivers/i2c/i2c-proc.c:56:
+static int i2c_proc_chips(ctl_table * ctl, int write,
+			      struct file *filp, void *buffer,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1130: FILE: drivers/i2c/i2c-proc.c:57:
+			      size_t * lenp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1131: FILE: drivers/i2c/i2c-proc.c:58:
+static int i2c_sysctl_chips(ctl_table * table, int *name, int nlen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: drivers/i2c/i2c-proc.c:59:
+static int i2c_sysctl_chips(ctl_table * table, int *name, int nlen,
+				void *oldval, size_t * oldlenp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1132: FILE: drivers/i2c/i2c-proc.c:59:
+				void *oldval, size_t * oldlenp,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1136: FILE: drivers/i2c/i2c-proc.c:63:
+int __init sensors_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1143: FILE: drivers/i2c/i2c-proc.c:70:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1143: FILE: drivers/i2c/i2c-proc.c:70:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,1)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1143: FILE: drivers/i2c/i2c-proc.c:70:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,1)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1143: FILE: drivers/i2c/i2c-proc.c:70:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,1)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1168: FILE: drivers/i2c/i2c-proc.c:95:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1174: FILE: drivers/i2c/i2c-proc.c:101:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1179: FILE: drivers/i2c/i2c-proc.c:106:
+/* This returns a nice name for a new directory; for example lm78-isa-0310
+   (for a LM78 chip on the ISA bus at port 0x310), or lm75-i2c-3-4e (for

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: drivers/i2c/i2c-proc.c:107:
+   a LM75 chip on the third i2c bus at address 0x4e).  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1181: FILE: drivers/i2c/i2c-proc.c:108:
+   name is allocated first. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: drivers/i2c/i2c-proc.c:110:
+int i2c_create_name(char **name, const char *prefix,
+			struct i2c_adapter *adapter, int addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1187: FILE: drivers/i2c/i2c-proc.c:114:
+	int id;
+	if (i2c_is_isa_adapter(adapter))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1187: FILE: drivers/i2c/i2c-proc.c:114:
+	if (i2c_is_isa_adapter(adapter))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1189: FILE: drivers/i2c/i2c-proc.c:116:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1190: FILE: drivers/i2c/i2c-proc.c:117:
+		if ((id = i2c_adapter_id(adapter)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: drivers/i2c/i2c-proc.c:127:
+   to /proc/sys/dev/sensors/chips. It also creates a new directory within $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1200: FILE: drivers/i2c/i2c-proc.c:127:
+/* This rather complex function must be called when you want to add an entry
+   to /proc/sys/dev/sensors/chips. It also creates a new directory within 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1205: FILE: drivers/i2c/i2c-proc.c:132:
+   this function must be updated! $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1209: FILE: drivers/i2c/i2c-proc.c:136:
+   for anything older than 2.3.27 anyway. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1211: FILE: drivers/i2c/i2c-proc.c:138:
+int i2c_register_entry(struct i2c_client *client, const char *prefix,
+			   ctl_table * ctl_template,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1211: FILE: drivers/i2c/i2c-proc.c:138:
+			   ctl_table * ctl_template,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1219: FILE: drivers/i2c/i2c-proc.c:146:
+	if ((res = i2c_create_name(&name, prefix, client->adapter,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1219: FILE: drivers/i2c/i2c-proc.c:146:
+	if ((res = i2c_create_name(&name, prefix, client->adapter,
+				       client->addr))) return res;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1220: FILE: drivers/i2c/i2c-proc.c:147:
+	if ((res = i2c_create_name(&name, prefix, client->adapter,
+				       client->addr))) return res;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1223: FILE: drivers/i2c/i2c-proc.c:150:
+		if (!i2c_entries[id]) {
+			break;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1236: FILE: drivers/i2c/i2c-proc.c:163:
+	if (!(new_table = kmalloc(sizeof(ctl_table) * len, GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1251: FILE: drivers/i2c/i2c-proc.c:178:
+	if (!(new_header = register_sysctl_table(new_table, 0))) {

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1272: FILE: drivers/i2c/i2c-proc.c:199:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,27))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1272: FILE: drivers/i2c/i2c-proc.c:199:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,27))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1272: FILE: drivers/i2c/i2c-proc.c:199:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,27))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1272: FILE: drivers/i2c/i2c-proc.c:199:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,27))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: drivers/i2c/i2c-proc.c:213:
+	char *temp;
+	id -= 256;

CHECK:SPACING: No space is necessary after a cast
#1291: FILE: drivers/i2c/i2c-proc.c:218:
+		(const char *) temp = table[4].procname;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: drivers/i2c/i2c-proc.c:226:
+/* Monitor access for /proc/sys/dev/sensors; make unloading i2c-proc.o $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1300: FILE: drivers/i2c/i2c-proc.c:227:
+/* Monitor access for /proc/sys/dev/sensors; make unloading i2c-proc.o 
+   impossible if some process still uses it or some file in it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1300: FILE: drivers/i2c/i2c-proc.c:227:
+   impossible if some process still uses it or some file in it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1310: FILE: drivers/i2c/i2c-proc.c:237:
+/* Monitor access for /proc/sys/dev/sensors/ directories; make unloading
+   the corresponding module impossible if some process still uses it or

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1311: FILE: drivers/i2c/i2c-proc.c:238:
+   some file in it */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1319: FILE: drivers/i2c/i2c-proc.c:246:
+		printk("i2c-proc.o: Warning: inode NULL in fill_inode()\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i2c_inodes[i] == inode->i_ino'
#1325: FILE: drivers/i2c/i2c-proc.c:252:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1325: FILE: drivers/i2c/i2c-proc.c:252:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1326: FILE: drivers/i2c/i2c-proc.c:253:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1342: FILE: drivers/i2c/i2c-proc.c:269:
+int i2c_proc_chips(ctl_table * ctl, int write, struct file *filp,
                                                             ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1342: FILE: drivers/i2c/i2c-proc.c:269:
+int i2c_proc_chips(ctl_table * ctl, int write, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1343: FILE: drivers/i2c/i2c-proc.c:270:
+int i2c_proc_chips(ctl_table * ctl, int write, struct file *filp,
+		       void *buffer, size_t * lenp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: drivers/i2c/i2c-proc.c:270:
+		       void *buffer, size_t * lenp)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1353: FILE: drivers/i2c/i2c-proc.c:280:
+	/* If buffer is size 0, or we try to read when not at the start, we
+	   return nothing. Note that I think writing when not at the start

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1355: FILE: drivers/i2c/i2c-proc.c:282:
+	   sources. */

ERROR:SPACING: space required before the open parenthesis '('
#1370: FILE: drivers/i2c/i2c-proc.c:297:
+			if(copy_to_user(buffer, BUF, buflen))

CHECK:SPACING: No space is necessary after a cast
#1373: FILE: drivers/i2c/i2c-proc.c:300:
+			(char *) buffer += buflen;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1380: FILE: drivers/i2c/i2c-proc.c:307:
+int i2c_sysctl_chips(ctl_table * table, int *name, int nlen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: drivers/i2c/i2c-proc.c:308:
+int i2c_sysctl_chips(ctl_table * table, int *name, int nlen,
+			 void *oldval, size_t * oldlenp, void *newval,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1381: FILE: drivers/i2c/i2c-proc.c:308:
+			 void *oldval, size_t * oldlenp, void *newval,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1385: FILE: drivers/i2c/i2c-proc.c:312:
+	int i, oldlen, nrels, maxels,ret=0;
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1385: FILE: drivers/i2c/i2c-proc.c:312:
+	int i, oldlen, nrels, maxels,ret=0;
 	                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1388: FILE: drivers/i2c/i2c-proc.c:315:
+^Iif (oldval && oldlenp && !((ret = get_user(oldlen, oldlenp))) && $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1388: FILE: drivers/i2c/i2c-proc.c:315:
+	if (oldval && oldlenp && !((ret = get_user(oldlen, oldlenp))) && 

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'i2c_entries[i]->ctl_table->child->child'
#1397: FILE: drivers/i2c/i2c-proc.c:324:
+				    i2c_entries[i]->ctl_table->child->
+				    child;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:SPACING: space required before the open parenthesis '('
#1400: FILE: drivers/i2c/i2c-proc.c:327:
+				if(copy_to_user(oldval, &data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1401: FILE: drivers/i2c/i2c-proc.c:328:
+				if(copy_to_user(oldval, &data,
+					     sizeof(struct

CHECK:SPACING: No space is necessary after a cast
#1404: FILE: drivers/i2c/i2c-proc.c:331:
+				(char *) oldval +=

ERROR:SPACING: space required before the open parenthesis '('
#1409: FILE: drivers/i2c/i2c-proc.c:336:
+		if(put_user(oldlen, oldlenp))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1415: FILE: drivers/i2c/i2c-proc.c:342:
+
+

WARNING:TYPO_SPELLING: 'funcion' may be misspelled - perhaps 'function'?
#1416: FILE: drivers/i2c/i2c-proc.c:343:
+/* This funcion reads or writes a 'real' value (encoded by the combination
         ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1417: FILE: drivers/i2c/i2c-proc.c:344:
+/* This funcion reads or writes a 'real' value (encoded by the combination
+   of an integer and a magnitude, the last is the power of ten the value

ERROR:CODE_INDENT: code indent should use tabs where possible
#1422: FILE: drivers/i2c/i2c-proc.c:349:
+                int *nrels_mag, long *results)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1424: FILE: drivers/i2c/i2c-proc.c:351:
+   equals SENSORS_PROC_REAL_INFO, the magnitude should be returned in $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1432: FILE: drivers/i2c/i2c-proc.c:359:
+   and ctl_name is the SYSCTL id of the file we are accessing. */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1433: FILE: drivers/i2c/i2c-proc.c:360:
+int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,
                                                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1433: FILE: drivers/i2c/i2c-proc.c:360:
+int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1434: FILE: drivers/i2c/i2c-proc.c:361:
+int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,
+		      void *buffer, size_t * lenp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1434: FILE: drivers/i2c/i2c-proc.c:361:
+		      void *buffer, size_t * lenp)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1444: FILE: drivers/i2c/i2c-proc.c:371:
+	/* If buffer is size 0, or we try to read when not at the start, we
+	   return nothing. Note that I think writing when not at the start

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1446: FILE: drivers/i2c/i2c-proc.c:373:
+	   sources. */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1471: FILE: drivers/i2c/i2c-proc.c:398:
+		return 0;
+	} else {		/* read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1486: FILE: drivers/i2c/i2c-proc.c:413:
+/* This function is equivalent to i2c_proc_real, only it interacts with
+   the sysctl(2) syscall, and returns no reals, but integers */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1486: FILE: drivers/i2c/i2c-proc.c:413:
+   the sysctl(2) syscall, and returns no reals, but integers */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1487: FILE: drivers/i2c/i2c-proc.c:414:
+int i2c_sysctl_real(ctl_table * table, int *name, int nlen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: drivers/i2c/i2c-proc.c:415:
+int i2c_sysctl_real(ctl_table * table, int *name, int nlen,
+			void *oldval, size_t * oldlenp, void *newval,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1488: FILE: drivers/i2c/i2c-proc.c:415:
+			void *oldval, size_t * oldlenp, void *newval,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1492: FILE: drivers/i2c/i2c-proc.c:419:
+	int oldlen, nrels = MAX_RESULTS,ret=0;
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1492: FILE: drivers/i2c/i2c-proc.c:419:
+	int oldlen, nrels = MAX_RESULTS,ret=0;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1497: FILE: drivers/i2c/i2c-proc.c:424:
+	if (oldval && oldlenp && !((ret=get_user(oldlen, oldlenp))) && oldlen) {
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1497: FILE: drivers/i2c/i2c-proc.c:424:
+	if (oldval && oldlenp && !((ret=get_user(oldlen, oldlenp))) && oldlen) {

ERROR:SPACING: space required before the open parenthesis '('
#1505: FILE: drivers/i2c/i2c-proc.c:432:
+		if(copy_to_user(oldval, results, oldlen))

ERROR:SPACING: space required before the open parenthesis '('
#1507: FILE: drivers/i2c/i2c-proc.c:434:
+		if(put_user(oldlen, oldlenp))

ERROR:SPACING: space required before the open parenthesis '('
#1515: FILE: drivers/i2c/i2c-proc.c:442:
+		if(copy_from_user(results, newval, newlen))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1525: FILE: drivers/i2c/i2c-proc.c:452:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1527: FILE: drivers/i2c/i2c-proc.c:454:
+/* nrels contains initially the maximum number of elements which can be
+   put in results, and finally the number of elements actually put there.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1530: FILE: drivers/i2c/i2c-proc.c:457:
+   results will finally contain the parsed integers. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1534: FILE: drivers/i2c/i2c-proc.c:461:
+     [ Minus ] Digit* [ Dot Digit* ] $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1540: FILE: drivers/i2c/i2c-proc.c:467:
+            hidden bugs in it, even leading to crashes and things!$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1543: FILE: drivers/i2c/i2c-proc.c:470:
+int i2c_parse_reals(int *nrels, void *buffer, int bufsize,
+			 long *results, int magnitude)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1546: FILE: drivers/i2c/i2c-proc.c:473:
+	long res,ret=0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1546: FILE: drivers/i2c/i2c-proc.c:473:
+	long res,ret=0;
 	            ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1553: FILE: drivers/i2c/i2c-proc.c:480:
+	while (bufsize && (*nrels < maxels)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1555: FILE: drivers/i2c/i2c-proc.c:482:
+^I^Iwhile (bufsize && $

CHECK:SPACING: No space is necessary after a cast
#1556: FILE: drivers/i2c/i2c-proc.c:483:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1556: FILE: drivers/i2c/i2c-proc.c:483:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&
 		             ^

CHECK:SPACING: No space is necessary after a cast
#1557: FILE: drivers/i2c/i2c-proc.c:484:
+		       isspace((int) nextchar)) {

CHECK:SPACING: No space is necessary after a cast
#1559: FILE: drivers/i2c/i2c-proc.c:486:
+			((char *) buffer)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1563: FILE: drivers/i2c/i2c-proc.c:490:
+^I^I^Ireturn -EFAULT;^I$

CHECK:SPACING: No space is necessary after a cast
#1574: FILE: drivers/i2c/i2c-proc.c:501:
+		if (!((ret=get_user(nextchar, (char *) buffer)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1574: FILE: drivers/i2c/i2c-proc.c:501:
+		if (!((ret=get_user(nextchar, (char *) buffer)))
 		          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1574: FILE: drivers/i2c/i2c-proc.c:501:
+		if (!((ret=get_user(nextchar, (char *) buffer)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1575: FILE: drivers/i2c/i2c-proc.c:502:
+		if (!((ret=get_user(nextchar, (char *) buffer)))
+		    && (nextchar == '-')) {

CHECK:SPACING: No space is necessary after a cast
#1578: FILE: drivers/i2c/i2c-proc.c:505:
+			((char *) buffer)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: drivers/i2c/i2c-proc.c:511:
+^I^Iwhile (bufsize && $

CHECK:SPACING: No space is necessary after a cast
#1585: FILE: drivers/i2c/i2c-proc.c:512:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1585: FILE: drivers/i2c/i2c-proc.c:512:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&
 		             ^

CHECK:SPACING: No space is necessary after a cast
#1586: FILE: drivers/i2c/i2c-proc.c:513:
+		       isdigit((int) nextchar)) {

CHECK:SPACING: No space is necessary after a cast
#1589: FILE: drivers/i2c/i2c-proc.c:516:
+			((char *) buffer)++;

CHECK:SPACING: No space is necessary after a cast
#1603: FILE: drivers/i2c/i2c-proc.c:530:
+			((char *) buffer)++;

CHECK:SPACING: No space is necessary after a cast
#1607: FILE: drivers/i2c/i2c-proc.c:534:
+			       !((ret=get_user(nextchar, (char *) buffer))) &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1607: FILE: drivers/i2c/i2c-proc.c:534:
+			       !((ret=get_user(nextchar, (char *) buffer))) &&
 			             ^

CHECK:SPACING: No space is necessary after a cast
#1608: FILE: drivers/i2c/i2c-proc.c:535:
+			       isdigit((int) nextchar)) {

CHECK:SPACING: No space is necessary after a cast
#1612: FILE: drivers/i2c/i2c-proc.c:539:
+				((char *) buffer)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1624: FILE: drivers/i2c/i2c-proc.c:551:
+^I^Iwhile (bufsize && $

CHECK:SPACING: No space is necessary after a cast
#1625: FILE: drivers/i2c/i2c-proc.c:552:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1625: FILE: drivers/i2c/i2c-proc.c:552:
+		       !((ret=get_user(nextchar, (char *) buffer))) &&
 		             ^

CHECK:SPACING: No space is necessary after a cast
#1626: FILE: drivers/i2c/i2c-proc.c:553:
+		       isspace((int) nextchar)) {

CHECK:SPACING: No space is necessary after a cast
#1628: FILE: drivers/i2c/i2c-proc.c:555:
+			((char *) buffer)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1638: FILE: drivers/i2c/i2c-proc.c:565:
+^I/* Well, there may be more in the buffer, but we need no more data. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1639: FILE: drivers/i2c/i2c-proc.c:566:
+	/* Well, there may be more in the buffer, but we need no more data. 
+	   Ignore anything that is left. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1639: FILE: drivers/i2c/i2c-proc.c:566:
+	   Ignore anything that is left. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1644: FILE: drivers/i2c/i2c-proc.c:571:
+int i2c_write_reals(int nrels, void *buffer, int *bufsize,
+			 long *results, int magnitude)

CHECK:SPACING: No space is necessary after a cast
#1657: FILE: drivers/i2c/i2c-proc.c:584:
+			if(put_user(' ', (char *) buffer))

ERROR:SPACING: space required before the open parenthesis '('
#1657: FILE: drivers/i2c/i2c-proc.c:584:
+			if(put_user(' ', (char *) buffer))

CHECK:SPACING: No space is necessary after a cast
#1660: FILE: drivers/i2c/i2c-proc.c:587:
+			((char *) buffer)++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1677: FILE: drivers/i2c/i2c-proc.c:604:
+			for (times = 1; mag-- > 0; times *= 10);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1678: FILE: drivers/i2c/i2c-proc.c:605:
+			if (results[nr] < 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1681: FILE: drivers/i2c/i2c-proc.c:608:
+			} else

ERROR:SPACING: space required before the open parenthesis '('
#1698: FILE: drivers/i2c/i2c-proc.c:625:
+		if(copy_to_user(buffer, BUF, buflen))

CHECK:SPACING: No space is necessary after a cast
#1701: FILE: drivers/i2c/i2c-proc.c:628:
+		(char *) buffer += buflen;

CHECK:SPACING: No space is necessary after a cast
#1706: FILE: drivers/i2c/i2c-proc.c:633:
+		if(put_user('\n', (char *) buffer))

ERROR:SPACING: space required before the open parenthesis '('
#1706: FILE: drivers/i2c/i2c-proc.c:633:
+		if(put_user('\n', (char *) buffer))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1714: FILE: drivers/i2c/i2c-proc.c:641:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1717: FILE: drivers/i2c/i2c-proc.c:644:
+int i2c_detect(struct i2c_adapter *adapter,
+		   struct i2c_address_data *address_data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1718: FILE: drivers/i2c/i2c-proc.c:645:
+		   i2c_found_addr_proc * found_proc)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!is_isa'
#1727: FILE: drivers/i2c/i2c-proc.c:654:
+	if ((!is_isa)
+	    && !i2c_check_functionality(adapter,
+					I2C_FUNC_SMBUS_QUICK)) return -1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1727: FILE: drivers/i2c/i2c-proc.c:654:
+	if ((!is_isa)
[...]
+					I2C_FUNC_SMBUS_QUICK)) return -1;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1728: FILE: drivers/i2c/i2c-proc.c:655:
+	if ((!is_isa)
+	    && !i2c_check_functionality(adapter,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1737: FILE: drivers/i2c/i2c-proc.c:664:
+		/* If it is in one of the force entries, we don't do any
+		   detection at all */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1737: FILE: drivers/i2c/i2c-proc.c:664:
+		   detection at all */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1741: FILE: drivers/i2c/i2c-proc.c:668:
+		     !found
+		     && (this_force =

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1745: FILE: drivers/i2c/i2c-proc.c:672:
+			     !found
+			     && (this_force->force[j] != SENSORS_I2C_END);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1747: FILE: drivers/i2c/i2c-proc.c:674:
+				if (

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_id == this_force->force[j]'
#1747: FILE: drivers/i2c/i2c-proc.c:674:
+				if (
+				    ((adapter_id == this_force->force[j])
+				     ||
+				     ((this_force->
+				       force[j] == SENSORS_ANY_I2C_BUS)
+				      && !is_isa))
+				    && (addr == this_force->force[j + 1])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == this_force->force[j + 1]'
#1747: FILE: drivers/i2c/i2c-proc.c:674:
+				if (
+				    ((adapter_id == this_force->force[j])
+				     ||
+				     ((this_force->
+				       force[j] == SENSORS_ANY_I2C_BUS)
+				      && !is_isa))
+				    && (addr == this_force->force[j + 1])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1749: FILE: drivers/i2c/i2c-proc.c:676:
+				    ((adapter_id == this_force->force[j])
+				     ||

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_force->force[j]'
#1751: FILE: drivers/i2c/i2c-proc.c:678:
+				     ((this_force->
+				       force[j] == SENSORS_ANY_I2C_BUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1752: FILE: drivers/i2c/i2c-proc.c:679:
+				       force[j] == SENSORS_ANY_I2C_BUS)
+				      && !is_isa))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1753: FILE: drivers/i2c/i2c-proc.c:680:
+				      && !is_isa))
+				    && (addr == this_force->force[j + 1])) {

WARNING:LONG_LINE_STRING: line length of 109 exceeds 100 columns
#1756: FILE: drivers/i2c/i2c-proc.c:683:
+					    ("i2c-proc.o: found force parameter for adapter %d, addr %04x\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1759: FILE: drivers/i2c/i2c-proc.c:686:
+					if (

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1759: FILE: drivers/i2c/i2c-proc.c:686:
+					if (

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1759: FILE: drivers/i2c/i2c-proc.c:686:
+					if (
[...]
+							kind))) return err;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_force->kind'
#1763: FILE: drivers/i2c/i2c-proc.c:690:
+							this_force->
+							kind))) return err;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1772: FILE: drivers/i2c/i2c-proc.c:699:
+		/* If this address is in one of the ignores, we can forget about it
+		   right now */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1772: FILE: drivers/i2c/i2c-proc.c:699:
+		   right now */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1775: FILE: drivers/i2c/i2c-proc.c:702:
+		     !found
+		     && (address_data->ignore[i] != SENSORS_I2C_END);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1777: FILE: drivers/i2c/i2c-proc.c:704:
+			if (

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_id == address_data->ignore[i]'
#1777: FILE: drivers/i2c/i2c-proc.c:704:
+			if (
+			    ((adapter_id == address_data->ignore[i])
+			     ||
+			     ((address_data->
+			       ignore[i] == SENSORS_ANY_I2C_BUS)
+			      && !is_isa))
+			    && (addr == address_data->ignore[i + 1])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == address_data->ignore[i + 1]'
#1777: FILE: drivers/i2c/i2c-proc.c:704:
+			if (
+			    ((adapter_id == address_data->ignore[i])
+			     ||
+			     ((address_data->
+			       ignore[i] == SENSORS_ANY_I2C_BUS)
+			      && !is_isa))
+			    && (addr == address_data->ignore[i + 1])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1779: FILE: drivers/i2c/i2c-proc.c:706:
+			    ((adapter_id == address_data->ignore[i])
+			     ||

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'address_data->ignore[i]'
#1781: FILE: drivers/i2c/i2c-proc.c:708:
+			     ((address_data->
+			       ignore[i] == SENSORS_ANY_I2C_BUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1782: FILE: drivers/i2c/i2c-proc.c:709:
+			       ignore[i] == SENSORS_ANY_I2C_BUS)
+			      && !is_isa))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1783: FILE: drivers/i2c/i2c-proc.c:710:
+			      && !is_isa))
+			    && (addr == address_data->ignore[i + 1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#1787: FILE: drivers/i2c/i2c-proc.c:714:
+				    ("i2c-proc.o: found ignore parameter for adapter %d, "
+				     "addr %04x\n", adapter_id, addr);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1794: FILE: drivers/i2c/i2c-proc.c:721:
+		     !found
+		     && (address_data->ignore_range[i] != SENSORS_I2C_END);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1796: FILE: drivers/i2c/i2c-proc.c:723:
+			if (

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_id == address_data->ignore_range[i]'
#1796: FILE: drivers/i2c/i2c-proc.c:723:
+			if (
+			    ((adapter_id == address_data->ignore_range[i])
+			     ||
+			     ((address_data->
+			       ignore_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->ignore_range[i + 1])
+			    && (addr <= address_data->ignore_range[i + 2])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= address_data->ignore_range[i + 1]'
#1796: FILE: drivers/i2c/i2c-proc.c:723:
+			if (
+			    ((adapter_id == address_data->ignore_range[i])
+			     ||
+			     ((address_data->
+			       ignore_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->ignore_range[i + 1])
+			    && (addr <= address_data->ignore_range[i + 2])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= address_data->ignore_range[i + 2]'
#1796: FILE: drivers/i2c/i2c-proc.c:723:
+			if (
+			    ((adapter_id == address_data->ignore_range[i])
+			     ||
+			     ((address_data->
+			       ignore_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->ignore_range[i + 1])
+			    && (addr <= address_data->ignore_range[i + 2])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1798: FILE: drivers/i2c/i2c-proc.c:725:
+			    ((adapter_id == address_data->ignore_range[i])
+			     ||

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'address_data->ignore_range[i]'
#1800: FILE: drivers/i2c/i2c-proc.c:727:
+			     ((address_data->
+			       ignore_range[i] ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1802: FILE: drivers/i2c/i2c-proc.c:729:
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->ignore_range[i + 1])

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1803: FILE: drivers/i2c/i2c-proc.c:730:
+			    && (addr >= address_data->ignore_range[i + 1])
+			    && (addr <= address_data->ignore_range[i + 2])) {

WARNING:SPLIT_STRING: quoted string split across lines
#1807: FILE: drivers/i2c/i2c-proc.c:734:
+				    ("i2c-proc.o: found ignore_range parameter for adapter %d, "
+				     "addr %04x\n", adapter_id, addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1815: FILE: drivers/i2c/i2c-proc.c:742:
+^I^I/* Now, we will do a detection, but only if it is in the normal or $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1816: FILE: drivers/i2c/i2c-proc.c:743:
+		/* Now, we will do a detection, but only if it is in the normal or 
+		   probe entries */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1816: FILE: drivers/i2c/i2c-proc.c:743:
+		   probe entries */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1820: FILE: drivers/i2c/i2c-proc.c:747:
+			     !found
+			     && (address_data->normal_isa[i] !=

WARNING:SPLIT_STRING: quoted string split across lines
#1826: FILE: drivers/i2c/i2c-proc.c:753:
+					    ("i2c-proc.o: found normal isa entry for adapter %d, "
+					     "addr %04x\n", adapter_id,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1834: FILE: drivers/i2c/i2c-proc.c:761:
+			     !found
+			     && (address_data->normal_isa_range[i] !=

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >=
 				     address_data->normal_isa_range[i]'
#1836: FILE: drivers/i2c/i2c-proc.c:763:
+				if ((addr >=
+				     address_data->normal_isa_range[i])
+				    && (addr <=
+					address_data->normal_isa_range[i + 1])
+				    &&
+				    ((addr -
+				      address_data->normal_isa_range[i]) %
+				     address_data->normal_isa_range[i + 2] ==
+				     0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <=
 					address_data->normal_isa_range[i + 1]'
#1836: FILE: drivers/i2c/i2c-proc.c:763:
+				if ((addr >=
+				     address_data->normal_isa_range[i])
+				    && (addr <=
+					address_data->normal_isa_range[i + 1])
+				    &&
+				    ((addr -
+				      address_data->normal_isa_range[i]) %
+				     address_data->normal_isa_range[i + 2] ==
+				     0)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1838: FILE: drivers/i2c/i2c-proc.c:765:
+				     address_data->normal_isa_range[i])
+				    && (addr <=

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1840: FILE: drivers/i2c/i2c-proc.c:767:
+					address_data->normal_isa_range[i + 1])
+				    &&

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#1847: FILE: drivers/i2c/i2c-proc.c:774:
+					    ("i2c-proc.o: found normal isa_range entry for adapter %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1848: FILE: drivers/i2c/i2c-proc.c:775:
+					    ("i2c-proc.o: found normal isa_range entry for adapter %d, "
+					     "addr %04x", adapter_id, addr);

WARNING:SPLIT_STRING: quoted string split across lines
#1862: FILE: drivers/i2c/i2c-proc.c:789:
+					    ("i2c-proc.o: found normal i2c entry for adapter %d, "
+					     "addr %02x", adapter_id, addr);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1868: FILE: drivers/i2c/i2c-proc.c:795:
+			     !found
+			     && (address_data->normal_i2c_range[i] !=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1870: FILE: drivers/i2c/i2c-proc.c:797:
+				if ((addr >=
+				     address_data->normal_i2c_range[i])
+				    && (addr <=
+					address_data->normal_i2c_range[i + 1]))
+				{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >=
 				     address_data->normal_i2c_range[i]'
#1870: FILE: drivers/i2c/i2c-proc.c:797:
+				if ((addr >=
+				     address_data->normal_i2c_range[i])
+				    && (addr <=
+					address_data->normal_i2c_range[i + 1]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <=
 					address_data->normal_i2c_range[i + 1]'
#1870: FILE: drivers/i2c/i2c-proc.c:797:
+				if ((addr >=
+				     address_data->normal_i2c_range[i])
+				    && (addr <=
+					address_data->normal_i2c_range[i + 1]))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1872: FILE: drivers/i2c/i2c-proc.c:799:
+				     address_data->normal_i2c_range[i])
+				    && (addr <=

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#1877: FILE: drivers/i2c/i2c-proc.c:804:
+					    ("i2c-proc.o: found normal i2c_range entry for adapter %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1878: FILE: drivers/i2c/i2c-proc.c:805:
+					    ("i2c-proc.o: found normal i2c_range entry for adapter %d, "
+					     "addr %04x\n", adapter_id, addr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_id == address_data->probe[i]'
#1888: FILE: drivers/i2c/i2c-proc.c:815:
+			if (((adapter_id == address_data->probe[i]) ||
+			     ((address_data->
+			       probe[i] == SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr == address_data->probe[i + 1])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == address_data->probe[i + 1]'
#1888: FILE: drivers/i2c/i2c-proc.c:815:
+			if (((adapter_id == address_data->probe[i]) ||
+			     ((address_data->
+			       probe[i] == SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr == address_data->probe[i + 1])) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'address_data->probe[i]'
#1890: FILE: drivers/i2c/i2c-proc.c:817:
+			     ((address_data->
+			       probe[i] == SENSORS_ANY_I2C_BUS) & !is_isa))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1891: FILE: drivers/i2c/i2c-proc.c:818:
+			       probe[i] == SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr == address_data->probe[i + 1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#1895: FILE: drivers/i2c/i2c-proc.c:822:
+				    ("i2c-proc.o: found probe parameter for adapter %d, "
+				     "addr %04x\n", adapter_id, addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1901: FILE: drivers/i2c/i2c-proc.c:828:
+^I^I           (address_data->probe_range[i] != SENSORS_I2C_END);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1901: FILE: drivers/i2c/i2c-proc.c:828:
+		for (i = 0; !found &&
+		           (address_data->probe_range[i] != SENSORS_I2C_END);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1903: FILE: drivers/i2c/i2c-proc.c:830:
+			if (

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_id == address_data->probe_range[i]'
#1903: FILE: drivers/i2c/i2c-proc.c:830:
+			if (
+			    ((adapter_id == address_data->probe_range[i])
+			     ||
+			     ((address_data->probe_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->probe_range[i + 1])
+			    && (addr <= address_data->probe_range[i + 2])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address_data->probe_range[i] ==
 			       SENSORS_ANY_I2C_BUS'
#1903: FILE: drivers/i2c/i2c-proc.c:830:
+			if (
+			    ((adapter_id == address_data->probe_range[i])
+			     ||
+			     ((address_data->probe_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->probe_range[i + 1])
+			    && (addr <= address_data->probe_range[i + 2])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= address_data->probe_range[i + 1]'
#1903: FILE: drivers/i2c/i2c-proc.c:830:
+			if (
+			    ((adapter_id == address_data->probe_range[i])
+			     ||
+			     ((address_data->probe_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->probe_range[i + 1])
+			    && (addr <= address_data->probe_range[i + 2])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= address_data->probe_range[i + 2]'
#1903: FILE: drivers/i2c/i2c-proc.c:830:
+			if (
+			    ((adapter_id == address_data->probe_range[i])
+			     ||
+			     ((address_data->probe_range[i] ==
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->probe_range[i + 1])
+			    && (addr <= address_data->probe_range[i + 2])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1905: FILE: drivers/i2c/i2c-proc.c:832:
+			    ((adapter_id == address_data->probe_range[i])
+			     ||

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1908: FILE: drivers/i2c/i2c-proc.c:835:
+			       SENSORS_ANY_I2C_BUS) & !is_isa))
+			    && (addr >= address_data->probe_range[i + 1])

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1909: FILE: drivers/i2c/i2c-proc.c:836:
+			    && (addr >= address_data->probe_range[i + 1])
+			    && (addr <= address_data->probe_range[i + 2])) {

WARNING:SPLIT_STRING: quoted string split across lines
#1914: FILE: drivers/i2c/i2c-proc.c:841:
+				    ("i2c-proc.o: found probe_range parameter for adapter %d, "
+				     "addr %04x\n", adapter_id, addr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1922: FILE: drivers/i2c/i2c-proc.c:849:
+		/* OK, so we really should examine this address. First check
+		   whether there is some client here at all! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1922: FILE: drivers/i2c/i2c-proc.c:849:
+		   whether there is some client here at all! */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1926: FILE: drivers/i2c/i2c-proc.c:853:
+			if ((err = found_proc(adapter, addr, 0, -1)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1934: FILE: drivers/i2c/i2c-proc.c:861:
+	printk("i2c-proc.o version %s (%s)\n", LM_VERSION, LM_DATE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1936: FILE: drivers/i2c/i2c-proc.c:863:
+	if (!

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1936: FILE: drivers/i2c/i2c-proc.c:863:
+	if (!
[...]
+	     register_sysctl_table(i2c_proc, 0))) return -ENOMEM;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1939: FILE: drivers/i2c/i2c-proc.c:866:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1939: FILE: drivers/i2c/i2c-proc.c:866:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,1))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1939: FILE: drivers/i2c/i2c-proc.c:866:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,1))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1939: FILE: drivers/i2c/i2c-proc.c:866:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,1))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1949: FILE: drivers/i2c/i2c-proc.c:876:
+EXPORT_SYMBOL(i2c_deregister_entry);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1950: FILE: drivers/i2c/i2c-proc.c:877:
+EXPORT_SYMBOL(i2c_detect);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1951: FILE: drivers/i2c/i2c-proc.c:878:
+EXPORT_SYMBOL(i2c_proc_real);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1952: FILE: drivers/i2c/i2c-proc.c:879:
+EXPORT_SYMBOL(i2c_register_entry);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1953: FILE: drivers/i2c/i2c-proc.c:880:
+EXPORT_SYMBOL(i2c_sysctl_real);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1983: FILE: include/linux/i2c-proc.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1984: FILE: include/linux/i2c-proc.h:2:
+/*
+    sensors.h - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#1985: FILE: include/linux/i2c-proc.h:3:
+                monitoring$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1999: FILE: include/linux/i2c-proc.h:17:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2000: FILE: include/linux/i2c-proc.h:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2014: FILE: include/linux/i2c-proc.h:32:
+typedef void (*i2c_real_callback) (struct i2c_client * client,

WARNING:TYPO_SPELLING: 'funcion' may be misspelled - perhaps 'function'?
#2023: FILE: include/linux/i2c-proc.h:41:
+/* These funcion reads or writes a 'real' value (encoded by the combination
          ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2024: FILE: include/linux/i2c-proc.h:42:
+/* These funcion reads or writes a 'real' value (encoded by the combination
+   of an integer and a magnitude, the last is the power of ten the value

ERROR:CODE_INDENT: code indent should use tabs where possible
#2029: FILE: include/linux/i2c-proc.h:47:
+                int *nrels_mag, long *results)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2039: FILE: include/linux/i2c-proc.h:57:
+   and ctl_name is the SYSCTL id of the file we are accessing. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2040: FILE: include/linux/i2c-proc.h:58:
+extern int i2c_sysctl_real(ctl_table * table, int *name, int nlen,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2040: FILE: include/linux/i2c-proc.h:58:
+extern int i2c_sysctl_real(ctl_table * table, int *name, int nlen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: include/linux/i2c-proc.h:59:
+extern int i2c_sysctl_real(ctl_table * table, int *name, int nlen,
+			       void *oldval, size_t * oldlenp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2041: FILE: include/linux/i2c-proc.h:59:
+			       void *oldval, size_t * oldlenp,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2044: FILE: include/linux/i2c-proc.h:62:
+extern int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,
                                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2044: FILE: include/linux/i2c-proc.h:62:
+extern int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2044: FILE: include/linux/i2c-proc.h:62:
+extern int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2045: FILE: include/linux/i2c-proc.h:63:
+extern int i2c_proc_real(ctl_table * ctl, int write, struct file *filp,
+			     void *buffer, size_t * lenp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2045: FILE: include/linux/i2c-proc.h:63:
+			     void *buffer, size_t * lenp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2047: FILE: include/linux/i2c-proc.h:65:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2050: FILE: include/linux/i2c-proc.h:68:
+/* These rather complex functions must be called when you want to add or
+   delete an entry in /proc/sys/dev/sensors/chips (not yet implemented). It

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2055: FILE: include/linux/i2c-proc.h:73:
+   these functions must be updated! */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2056: FILE: include/linux/i2c-proc.h:74:
+extern int i2c_register_entry(struct i2c_client *client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2057: FILE: include/linux/i2c-proc.h:75:
+extern int i2c_register_entry(struct i2c_client *client,
+				  const char *prefix,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2058: FILE: include/linux/i2c-proc.h:76:
+				  ctl_table * ctl_template,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2061: FILE: include/linux/i2c-proc.h:79:
+extern void i2c_deregister_entry(int id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2063: FILE: include/linux/i2c-proc.h:81:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2065: FILE: include/linux/i2c-proc.h:83:
+/* A structure containing detect information.
+   Force variables overrule all other variables; they force a detection on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2073: FILE: include/linux/i2c-proc.h:91:
+     the ISA bus, -1 for any I2C bus), the second is the address. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2082: FILE: include/linux/i2c-proc.h:100:
+/* A structure containing the detect information.
+   normal_i2c: filled in by the module writer. Terminated by SENSORS_I2C_END.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2084: FILE: include/linux/i2c-proc.h:102:
+   normal_i2c_range: filled in by the module writer. Terminated by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2090: FILE: include/linux/i2c-proc.h:108:
+   normal_isa_range: filled in by the module writer. Terminated by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2100: FILE: include/linux/i2c-proc.h:118:
+   probe_range: insmod parameter. Initialize this list with SENSORS_I2C_END $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2103: FILE: include/linux/i2c-proc.h:121:
+     the ISA bus, -1 for any I2C bus), the second and third are addresses. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2109: FILE: include/linux/i2c-proc.h:127:
+     addresses are never probed. This parameter overrules 'normal' and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2111: FILE: include/linux/i2c-proc.h:129:
+   ignore_range: insmod parameter. Initialize this list with SENSORS_I2C_END $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2114: FILE: include/linux/i2c-proc.h:132:
+     the ISA bus, -1 for any I2C bus), the second and third are addresses. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2145: FILE: include/linux/i2c-proc.h:163:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2145: FILE: include/linux/i2c-proc.h:163:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2146: FILE: include/linux/i2c-proc.h:164:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2146: FILE: include/linux/i2c-proc.h:164:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2147: FILE: include/linux/i2c-proc.h:165:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2147: FILE: include/linux/i2c-proc.h:165:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2148: FILE: include/linux/i2c-proc.h:166:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2148: FILE: include/linux/i2c-proc.h:166:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2149: FILE: include/linux/i2c-proc.h:167:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2149: FILE: include/linux/i2c-proc.h:167:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2150: FILE: include/linux/i2c-proc.h:168:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2150: FILE: include/linux/i2c-proc.h:168:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2151: FILE: include/linux/i2c-proc.h:169:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2151: FILE: include/linux/i2c-proc.h:169:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2152: FILE: include/linux/i2c-proc.h:170:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2152: FILE: include/linux/i2c-proc.h:170:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2153: FILE: include/linux/i2c-proc.h:171:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2153: FILE: include/linux/i2c-proc.h:171:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2154: FILE: include/linux/i2c-proc.h:172:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2154: FILE: include/linux/i2c-proc.h:172:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2155: FILE: include/linux/i2c-proc.h:173:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2155: FILE: include/linux/i2c-proc.h:173:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2156: FILE: include/linux/i2c-proc.h:174:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2156: FILE: include/linux/i2c-proc.h:174:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2157: FILE: include/linux/i2c-proc.h:175:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2157: FILE: include/linux/i2c-proc.h:175:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2158: FILE: include/linux/i2c-proc.h:176:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2158: FILE: include/linux/i2c-proc.h:176:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2159: FILE: include/linux/i2c-proc.h:177:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2159: FILE: include/linux/i2c-proc.h:177:
+                          SENSORS_I2C_END, SENSORS_I2C_END, SENSORS_I2C_END}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2161: FILE: include/linux/i2c-proc.h:179:
+/* This is ugly. We need to evaluate SENSORS_MAX_OPTS before it is $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2162: FILE: include/linux/i2c-proc.h:180:
+/* This is ugly. We need to evaluate SENSORS_MAX_OPTS before it is 
+   stringified */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2162: FILE: include/linux/i2c-proc.h:180:
+   stringified */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2168: FILE: include/linux/i2c-proc.h:186:
+/* SENSORS_MODULE_PARM creates a module parameter, and puts it in the
+   module header */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2168: FILE: include/linux/i2c-proc.h:186:
+   module header */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2169: FILE: include/linux/i2c-proc.h:187:
+#define SENSORS_MODULE_PARM(var,desc) \
                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#2169: FILE: include/linux/i2c-proc.h:187:
+#define SENSORS_MODULE_PARM(var,desc) \
+  static unsigned short var[SENSORS_MAX_OPTS] = SENSORS_DEFAULTS; \
+  MODULE_PARM(var,SENSORS_MODPARM); \
+  MODULE_PARM_DESC(var,desc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2170: FILE: include/linux/i2c-proc.h:188:
+  static unsigned short var[SENSORS_MAX_OPTS] = SENSORS_DEFAULTS; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2171: FILE: include/linux/i2c-proc.h:189:
+  MODULE_PARM(var,SENSORS_MODPARM); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2171: FILE: include/linux/i2c-proc.h:189:
+  MODULE_PARM(var,SENSORS_MODPARM); \
                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2172: FILE: include/linux/i2c-proc.h:190:
+  MODULE_PARM_DESC(var,desc)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2172: FILE: include/linux/i2c-proc.h:190:
+  MODULE_PARM_DESC(var,desc)
                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2175: FILE: include/linux/i2c-proc.h:193:
+/* SENSORS_MODULE_PARM creates a 'force_*' module parameter, and puts it in
+   the module header */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2175: FILE: include/linux/i2c-proc.h:193:
+   the module header */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2177: FILE: include/linux/i2c-proc.h:195:
+  SENSORS_MODULE_PARM(force_ ## name, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2178: FILE: include/linux/i2c-proc.h:196:
+                      "List of adapter,address pairs which are unquestionably" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2178: FILE: include/linux/i2c-proc.h:196:
+                      "List of adapter,address pairs which are unquestionably" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2179: FILE: include/linux/i2c-proc.h:197:
+                      " assumed to contain a `" # name "' chip")$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2179: FILE: include/linux/i2c-proc.h:197:
+                      " assumed to contain a `" # name "' chip")$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2181: FILE: include/linux/i2c-proc.h:199:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2184: FILE: include/linux/i2c-proc.h:202:
+  SENSORS_MODULE_PARM(probe, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2185: FILE: include/linux/i2c-proc.h:203:
+                      "List of adapter,address pairs to scan additionally"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2185: FILE: include/linux/i2c-proc.h:203:
+                      "List of adapter,address pairs to scan additionally"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2186: FILE: include/linux/i2c-proc.h:204:
+  SENSORS_MODULE_PARM(probe_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2187: FILE: include/linux/i2c-proc.h:205:
+                      "List of adapter,start-addr,end-addr triples to scan " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2187: FILE: include/linux/i2c-proc.h:205:
+                      "List of adapter,start-addr,end-addr triples to scan " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2188: FILE: include/linux/i2c-proc.h:206:
+                      "additionally"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2188: FILE: include/linux/i2c-proc.h:206:
+                      "additionally"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2189: FILE: include/linux/i2c-proc.h:207:
+  SENSORS_MODULE_PARM(ignore, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2190: FILE: include/linux/i2c-proc.h:208:
+                      "List of adapter,address pairs not to scan"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2190: FILE: include/linux/i2c-proc.h:208:
+                      "List of adapter,address pairs not to scan"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2191: FILE: include/linux/i2c-proc.h:209:
+  SENSORS_MODULE_PARM(ignore_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2192: FILE: include/linux/i2c-proc.h:210:
+                      "List of adapter,start-addr,end-addr triples not to " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2192: FILE: include/linux/i2c-proc.h:210:
+                      "List of adapter,start-addr,end-addr triples not to " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2193: FILE: include/linux/i2c-proc.h:211:
+                      "scan"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2193: FILE: include/linux/i2c-proc.h:211:
+                      "scan"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2194: FILE: include/linux/i2c-proc.h:212:
+  static struct i2c_address_data addr_data = \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2195: FILE: include/linux/i2c-proc.h:213:
+                                       {normal_i2c, normal_i2c_range, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2195: FILE: include/linux/i2c-proc.h:213:
+                                       {normal_i2c, normal_i2c_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2196: FILE: include/linux/i2c-proc.h:214:
+                                        normal_isa, normal_isa_range, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2196: FILE: include/linux/i2c-proc.h:214:
+                                        normal_isa, normal_isa_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2197: FILE: include/linux/i2c-proc.h:215:
+                                        probe, probe_range, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2197: FILE: include/linux/i2c-proc.h:215:
+                                        probe, probe_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2198: FILE: include/linux/i2c-proc.h:216:
+                                        ignore, ignore_range, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2198: FILE: include/linux/i2c-proc.h:216:
+                                        ignore, ignore_range, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2199: FILE: include/linux/i2c-proc.h:217:
+                                        forces}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2199: FILE: include/linux/i2c-proc.h:217:
+                                        forces}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2201: FILE: include/linux/i2c-proc.h:219:
+/* The following functions create an enum with the chip names as elements. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2202: FILE: include/linux/i2c-proc.h:220:
+/* The following functions create an enum with the chip names as elements. 
+   The first element of the enum is any_chip. These are the only macros

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2203: FILE: include/linux/i2c-proc.h:221:
+   a module will want to use. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2206: FILE: include/linux/i2c-proc.h:224:
+  enum chips { any_chip }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2207: FILE: include/linux/i2c-proc.h:225:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2208: FILE: include/linux/i2c-proc.h:226:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2208: FILE: include/linux/i2c-proc.h:226:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2209: FILE: include/linux/i2c-proc.h:227:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2209: FILE: include/linux/i2c-proc.h:227:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2210: FILE: include/linux/i2c-proc.h:228:
+  static struct i2c_force_data forces[] = {{force,any_chip},{NULL}}; \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2210: FILE: include/linux/i2c-proc.h:228:
+  static struct i2c_force_data forces[] = {{force,any_chip},{NULL}}; \
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2210: FILE: include/linux/i2c-proc.h:228:
+  static struct i2c_force_data forces[] = {{force,any_chip},{NULL}}; \
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2211: FILE: include/linux/i2c-proc.h:229:
+  SENSORS_INSMOD$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2213: FILE: include/linux/i2c-proc.h:231:
+#define SENSORS_INSMOD_1(chip1) \
+  enum chips { any_chip, chip1 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  static struct i2c_force_data forces[] = {{force,any_chip},\
+                                                 {force_ ## chip1,chip1}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2214: FILE: include/linux/i2c-proc.h:232:
+  enum chips { any_chip, chip1 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2215: FILE: include/linux/i2c-proc.h:233:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2216: FILE: include/linux/i2c-proc.h:234:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2216: FILE: include/linux/i2c-proc.h:234:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2217: FILE: include/linux/i2c-proc.h:235:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2217: FILE: include/linux/i2c-proc.h:235:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2218: FILE: include/linux/i2c-proc.h:236:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2219: FILE: include/linux/i2c-proc.h:237:
+  static struct i2c_force_data forces[] = {{force,any_chip},\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2219: FILE: include/linux/i2c-proc.h:237:
+  static struct i2c_force_data forces[] = {{force,any_chip},\
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2220: FILE: include/linux/i2c-proc.h:238:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2220: FILE: include/linux/i2c-proc.h:238:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2220: FILE: include/linux/i2c-proc.h:238:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2221: FILE: include/linux/i2c-proc.h:239:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2221: FILE: include/linux/i2c-proc.h:239:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2222: FILE: include/linux/i2c-proc.h:240:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2224: FILE: include/linux/i2c-proc.h:242:
+#define SENSORS_INSMOD_2(chip1,chip2) \
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2224: FILE: include/linux/i2c-proc.h:242:
+#define SENSORS_INSMOD_2(chip1,chip2) \
+  enum chips { any_chip, chip1, chip2 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2224: FILE: include/linux/i2c-proc.h:242:
+#define SENSORS_INSMOD_2(chip1,chip2) \
+  enum chips { any_chip, chip1, chip2 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2225: FILE: include/linux/i2c-proc.h:243:
+  enum chips { any_chip, chip1, chip2 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2226: FILE: include/linux/i2c-proc.h:244:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2227: FILE: include/linux/i2c-proc.h:245:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2227: FILE: include/linux/i2c-proc.h:245:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2228: FILE: include/linux/i2c-proc.h:246:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2228: FILE: include/linux/i2c-proc.h:246:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2229: FILE: include/linux/i2c-proc.h:247:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2230: FILE: include/linux/i2c-proc.h:248:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2231: FILE: include/linux/i2c-proc.h:249:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2231: FILE: include/linux/i2c-proc.h:249:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2232: FILE: include/linux/i2c-proc.h:250:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2232: FILE: include/linux/i2c-proc.h:250:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2232: FILE: include/linux/i2c-proc.h:250:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2233: FILE: include/linux/i2c-proc.h:251:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2233: FILE: include/linux/i2c-proc.h:251:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2233: FILE: include/linux/i2c-proc.h:251:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2234: FILE: include/linux/i2c-proc.h:252:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2234: FILE: include/linux/i2c-proc.h:252:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2235: FILE: include/linux/i2c-proc.h:253:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2237: FILE: include/linux/i2c-proc.h:255:
+#define SENSORS_INSMOD_3(chip1,chip2,chip3) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2237: FILE: include/linux/i2c-proc.h:255:
+#define SENSORS_INSMOD_3(chip1,chip2,chip3) \
                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2237: FILE: include/linux/i2c-proc.h:255:
+#define SENSORS_INSMOD_3(chip1,chip2,chip3) \
+  enum chips { any_chip, chip1, chip2, chip3 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2237: FILE: include/linux/i2c-proc.h:255:
+#define SENSORS_INSMOD_3(chip1,chip2,chip3) \
+  enum chips { any_chip, chip1, chip2, chip3 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2237: FILE: include/linux/i2c-proc.h:255:
+#define SENSORS_INSMOD_3(chip1,chip2,chip3) \
+  enum chips { any_chip, chip1, chip2, chip3 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2238: FILE: include/linux/i2c-proc.h:256:
+  enum chips { any_chip, chip1, chip2, chip3 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2239: FILE: include/linux/i2c-proc.h:257:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2240: FILE: include/linux/i2c-proc.h:258:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2240: FILE: include/linux/i2c-proc.h:258:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2241: FILE: include/linux/i2c-proc.h:259:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2241: FILE: include/linux/i2c-proc.h:259:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2242: FILE: include/linux/i2c-proc.h:260:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2243: FILE: include/linux/i2c-proc.h:261:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2244: FILE: include/linux/i2c-proc.h:262:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2245: FILE: include/linux/i2c-proc.h:263:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2245: FILE: include/linux/i2c-proc.h:263:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2246: FILE: include/linux/i2c-proc.h:264:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2246: FILE: include/linux/i2c-proc.h:264:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2246: FILE: include/linux/i2c-proc.h:264:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2247: FILE: include/linux/i2c-proc.h:265:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2247: FILE: include/linux/i2c-proc.h:265:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2247: FILE: include/linux/i2c-proc.h:265:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2248: FILE: include/linux/i2c-proc.h:266:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2248: FILE: include/linux/i2c-proc.h:266:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2248: FILE: include/linux/i2c-proc.h:266:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2249: FILE: include/linux/i2c-proc.h:267:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2249: FILE: include/linux/i2c-proc.h:267:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2250: FILE: include/linux/i2c-proc.h:268:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip4' - possible side-effects?
#2252: FILE: include/linux/i2c-proc.h:270:
+#define SENSORS_INSMOD_4(chip1,chip2,chip3,chip4) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2253: FILE: include/linux/i2c-proc.h:271:
+  enum chips { any_chip, chip1, chip2, chip3, chip4 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2254: FILE: include/linux/i2c-proc.h:272:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2255: FILE: include/linux/i2c-proc.h:273:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2255: FILE: include/linux/i2c-proc.h:273:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2256: FILE: include/linux/i2c-proc.h:274:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2256: FILE: include/linux/i2c-proc.h:274:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2257: FILE: include/linux/i2c-proc.h:275:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2258: FILE: include/linux/i2c-proc.h:276:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2259: FILE: include/linux/i2c-proc.h:277:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2260: FILE: include/linux/i2c-proc.h:278:
+  SENSORS_MODULE_PARM_FORCE(chip4); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2261: FILE: include/linux/i2c-proc.h:279:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2261: FILE: include/linux/i2c-proc.h:279:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2262: FILE: include/linux/i2c-proc.h:280:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2262: FILE: include/linux/i2c-proc.h:280:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2262: FILE: include/linux/i2c-proc.h:280:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2263: FILE: include/linux/i2c-proc.h:281:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2263: FILE: include/linux/i2c-proc.h:281:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2263: FILE: include/linux/i2c-proc.h:281:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2264: FILE: include/linux/i2c-proc.h:282:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2264: FILE: include/linux/i2c-proc.h:282:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2264: FILE: include/linux/i2c-proc.h:282:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2265: FILE: include/linux/i2c-proc.h:283:
+                                                 {force_ ## chip4,chip4}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2265: FILE: include/linux/i2c-proc.h:283:
+                                                 {force_ ## chip4,chip4}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2265: FILE: include/linux/i2c-proc.h:283:
+                                                 {force_ ## chip4,chip4}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2266: FILE: include/linux/i2c-proc.h:284:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2266: FILE: include/linux/i2c-proc.h:284:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2267: FILE: include/linux/i2c-proc.h:285:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip4' - possible side-effects?
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip5' - possible side-effects?
#2269: FILE: include/linux/i2c-proc.h:287:
+#define SENSORS_INSMOD_5(chip1,chip2,chip3,chip4,chip5) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2270: FILE: include/linux/i2c-proc.h:288:
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2271: FILE: include/linux/i2c-proc.h:289:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2272: FILE: include/linux/i2c-proc.h:290:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2272: FILE: include/linux/i2c-proc.h:290:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2273: FILE: include/linux/i2c-proc.h:291:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2273: FILE: include/linux/i2c-proc.h:291:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2274: FILE: include/linux/i2c-proc.h:292:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2275: FILE: include/linux/i2c-proc.h:293:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2276: FILE: include/linux/i2c-proc.h:294:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2277: FILE: include/linux/i2c-proc.h:295:
+  SENSORS_MODULE_PARM_FORCE(chip4); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2278: FILE: include/linux/i2c-proc.h:296:
+  SENSORS_MODULE_PARM_FORCE(chip5); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2279: FILE: include/linux/i2c-proc.h:297:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2279: FILE: include/linux/i2c-proc.h:297:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2280: FILE: include/linux/i2c-proc.h:298:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2280: FILE: include/linux/i2c-proc.h:298:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2280: FILE: include/linux/i2c-proc.h:298:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2281: FILE: include/linux/i2c-proc.h:299:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2281: FILE: include/linux/i2c-proc.h:299:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2281: FILE: include/linux/i2c-proc.h:299:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2282: FILE: include/linux/i2c-proc.h:300:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2282: FILE: include/linux/i2c-proc.h:300:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2282: FILE: include/linux/i2c-proc.h:300:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2283: FILE: include/linux/i2c-proc.h:301:
+                                                 {force_ ## chip4,chip4}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2283: FILE: include/linux/i2c-proc.h:301:
+                                                 {force_ ## chip4,chip4}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2283: FILE: include/linux/i2c-proc.h:301:
+                                                 {force_ ## chip4,chip4}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2284: FILE: include/linux/i2c-proc.h:302:
+                                                 {force_ ## chip5,chip5}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2284: FILE: include/linux/i2c-proc.h:302:
+                                                 {force_ ## chip5,chip5}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2284: FILE: include/linux/i2c-proc.h:302:
+                                                 {force_ ## chip5,chip5}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2285: FILE: include/linux/i2c-proc.h:303:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2285: FILE: include/linux/i2c-proc.h:303:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2286: FILE: include/linux/i2c-proc.h:304:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip4' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip5' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip6' - possible side-effects?
#2288: FILE: include/linux/i2c-proc.h:306:
+#define SENSORS_INSMOD_6(chip1,chip2,chip3,chip4,chip5,chip6) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2289: FILE: include/linux/i2c-proc.h:307:
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2290: FILE: include/linux/i2c-proc.h:308:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2291: FILE: include/linux/i2c-proc.h:309:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2291: FILE: include/linux/i2c-proc.h:309:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2292: FILE: include/linux/i2c-proc.h:310:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2292: FILE: include/linux/i2c-proc.h:310:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2293: FILE: include/linux/i2c-proc.h:311:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2294: FILE: include/linux/i2c-proc.h:312:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2295: FILE: include/linux/i2c-proc.h:313:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2296: FILE: include/linux/i2c-proc.h:314:
+  SENSORS_MODULE_PARM_FORCE(chip4); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2297: FILE: include/linux/i2c-proc.h:315:
+  SENSORS_MODULE_PARM_FORCE(chip5); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2298: FILE: include/linux/i2c-proc.h:316:
+  SENSORS_MODULE_PARM_FORCE(chip6); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2299: FILE: include/linux/i2c-proc.h:317:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2299: FILE: include/linux/i2c-proc.h:317:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2300: FILE: include/linux/i2c-proc.h:318:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2300: FILE: include/linux/i2c-proc.h:318:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2300: FILE: include/linux/i2c-proc.h:318:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2301: FILE: include/linux/i2c-proc.h:319:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2301: FILE: include/linux/i2c-proc.h:319:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2301: FILE: include/linux/i2c-proc.h:319:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2302: FILE: include/linux/i2c-proc.h:320:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2302: FILE: include/linux/i2c-proc.h:320:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2302: FILE: include/linux/i2c-proc.h:320:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2303: FILE: include/linux/i2c-proc.h:321:
+                                                 {force_ ## chip4,chip4}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2303: FILE: include/linux/i2c-proc.h:321:
+                                                 {force_ ## chip4,chip4}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2303: FILE: include/linux/i2c-proc.h:321:
+                                                 {force_ ## chip4,chip4}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2304: FILE: include/linux/i2c-proc.h:322:
+                                                 {force_ ## chip5,chip5}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2304: FILE: include/linux/i2c-proc.h:322:
+                                                 {force_ ## chip5,chip5}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2304: FILE: include/linux/i2c-proc.h:322:
+                                                 {force_ ## chip5,chip5}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2305: FILE: include/linux/i2c-proc.h:323:
+                                                 {force_ ## chip6,chip6}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2305: FILE: include/linux/i2c-proc.h:323:
+                                                 {force_ ## chip6,chip6}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2305: FILE: include/linux/i2c-proc.h:323:
+                                                 {force_ ## chip6,chip6}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2306: FILE: include/linux/i2c-proc.h:324:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2306: FILE: include/linux/i2c-proc.h:324:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2307: FILE: include/linux/i2c-proc.h:325:
+  SENSORS_INSMOD$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
                                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip4' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip5' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip6' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip7' - possible side-effects?
#2309: FILE: include/linux/i2c-proc.h:327:
+#define SENSORS_INSMOD_7(chip1,chip2,chip3,chip4,chip5,chip6,chip7) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2310: FILE: include/linux/i2c-proc.h:328:
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2311: FILE: include/linux/i2c-proc.h:329:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2312: FILE: include/linux/i2c-proc.h:330:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2312: FILE: include/linux/i2c-proc.h:330:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2313: FILE: include/linux/i2c-proc.h:331:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2313: FILE: include/linux/i2c-proc.h:331:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2314: FILE: include/linux/i2c-proc.h:332:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2315: FILE: include/linux/i2c-proc.h:333:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2316: FILE: include/linux/i2c-proc.h:334:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2317: FILE: include/linux/i2c-proc.h:335:
+  SENSORS_MODULE_PARM_FORCE(chip4); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2318: FILE: include/linux/i2c-proc.h:336:
+  SENSORS_MODULE_PARM_FORCE(chip5); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2319: FILE: include/linux/i2c-proc.h:337:
+  SENSORS_MODULE_PARM_FORCE(chip6); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2320: FILE: include/linux/i2c-proc.h:338:
+  SENSORS_MODULE_PARM_FORCE(chip7); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2321: FILE: include/linux/i2c-proc.h:339:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2321: FILE: include/linux/i2c-proc.h:339:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2322: FILE: include/linux/i2c-proc.h:340:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2322: FILE: include/linux/i2c-proc.h:340:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2322: FILE: include/linux/i2c-proc.h:340:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2323: FILE: include/linux/i2c-proc.h:341:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2323: FILE: include/linux/i2c-proc.h:341:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2323: FILE: include/linux/i2c-proc.h:341:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2324: FILE: include/linux/i2c-proc.h:342:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2324: FILE: include/linux/i2c-proc.h:342:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2324: FILE: include/linux/i2c-proc.h:342:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2325: FILE: include/linux/i2c-proc.h:343:
+                                                 {force_ ## chip4,chip4}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2325: FILE: include/linux/i2c-proc.h:343:
+                                                 {force_ ## chip4,chip4}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2325: FILE: include/linux/i2c-proc.h:343:
+                                                 {force_ ## chip4,chip4}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2326: FILE: include/linux/i2c-proc.h:344:
+                                                 {force_ ## chip5,chip5}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2326: FILE: include/linux/i2c-proc.h:344:
+                                                 {force_ ## chip5,chip5}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2326: FILE: include/linux/i2c-proc.h:344:
+                                                 {force_ ## chip5,chip5}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2327: FILE: include/linux/i2c-proc.h:345:
+                                                 {force_ ## chip6,chip6}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2327: FILE: include/linux/i2c-proc.h:345:
+                                                 {force_ ## chip6,chip6}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2327: FILE: include/linux/i2c-proc.h:345:
+                                                 {force_ ## chip6,chip6}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2328: FILE: include/linux/i2c-proc.h:346:
+                                                 {force_ ## chip7,chip7}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2328: FILE: include/linux/i2c-proc.h:346:
+                                                 {force_ ## chip7,chip7}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2328: FILE: include/linux/i2c-proc.h:346:
+                                                 {force_ ## chip7,chip7}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2329: FILE: include/linux/i2c-proc.h:347:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2329: FILE: include/linux/i2c-proc.h:347:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2330: FILE: include/linux/i2c-proc.h:348:
+  SENSORS_INSMOD$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2337: FILE: include/linux/i2c-proc.h:355:
+/* Detect function. It iterates over all possible addresses itself. For
+   SMBus addresses, it will only call found_proc if some client is connected

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2339: FILE: include/linux/i2c-proc.h:357:
+   done. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2340: FILE: include/linux/i2c-proc.h:358:
+extern int i2c_detect(struct i2c_adapter *adapter,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2341: FILE: include/linux/i2c-proc.h:359:
+extern int i2c_detect(struct i2c_adapter *adapter,
+			  struct i2c_address_data *address_data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2342: FILE: include/linux/i2c-proc.h:360:
+			  i2c_found_addr_proc * found_proc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2344: FILE: include/linux/i2c-proc.h:362:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2346: FILE: include/linux/i2c-proc.h:364:
+/* This macro is used to scale user-input to sensible values in almost all
+   chip drivers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2346: FILE: include/linux/i2c-proc.h:364:
+   chip drivers. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2359: FILE: include/linux/i2c-proc.h:377:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2368: FILE: include/linux/i2c-proc.h:386:
+#define DEV_SENSORS 2		/* The id of the lm_sensors directory within the
+				   dev table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2368: FILE: include/linux/i2c-proc.h:386:
+				   dev table */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2385: FILE: include/linux/i2c.h:26:
+/* $Id: i2c.h,v 1.45 2001/04/03 02:43:21 mds Exp $ */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2406: FILE: include/linux/i2c.h:363:
+ * or -1 if the adapter was not registered. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2416: FILE: include/linux/i2c.h:459:
+                                /* acknowledging ^I^I^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2416: FILE: include/linux/i2c.h:459:
+                                /* acknowledging ^I^I^I*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2424: FILE: include/linux/i2c.h:554:
+/* Detect whether we are on the isa bus. If this returns true, all i2c
+   access will fail! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2424: FILE: include/linux/i2c.h:554:
+   access will fail! */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2426: FILE: include/linux/i2c.h:556:
+        ((clientptr)->adapter->algo->id == I2C_ALGO_ISA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2426: FILE: include/linux/i2c.h:556:
+        ((clientptr)->adapter->algo->id == I2C_ALGO_ISA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2428: FILE: include/linux/i2c.h:558:
+        ((adapptr)->algo->id == I2C_ALGO_ISA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2428: FILE: include/linux/i2c.h:558:
+        ((adapptr)->algo->id == I2C_ALGO_ISA)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523024.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 308 errors, 345 warnings, 162 checks, 2422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523024.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
