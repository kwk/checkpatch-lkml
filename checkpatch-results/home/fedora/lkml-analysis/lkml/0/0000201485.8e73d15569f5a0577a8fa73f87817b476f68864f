WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
This patch against 2.6.11-mm1 replaces the original experimental Multi-Level

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#38: 
Signed-off-by:  Stephen Smalley <sds@tycho.nsa.gov>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#39: 
Signed-off-by:  James Morris <jmorris@redhat.com>

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: security/selinux/hooks.c:2216:
+^I                                  isec->sclass);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: security/selinux/include/security.h:81:
+                                 u16 tclass);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: security/selinux/include/security.h:81:
+                                 u16 tclass);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: security/selinux/ss/mls.c:59:
+^I^I^I                 &context->range.level[1]))$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#363: FILE: security/selinux/ss/mls.c:61:
+				break;
+			else

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: security/selinux/ss/mls.c:75:
+                        char **scontext)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: security/selinux/ss/mls.c:75:
+                        char **scontext)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#408: FILE: security/selinux/ss/mls.c:103:
+				if (!wrote_sep) {
[...]
+				} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#411: FILE: security/selinux/ss/mls.c:106:
+				} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: security/selinux/ss/mls.c:138:
+^I^I^I                 &context->range.level[1]))$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#454: FILE: security/selinux/ss/mls.c:140:
+				break;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#454: FILE: security/selinux/ss/mls.c:140:
+			else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: security/selinux/ss/mls.c:267:
+				if ((rngptr = strchr(scontextp, '.')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: security/selinux/ss/mls.c:283:
+^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#601: FILE: security/selinux/ss/mls.c:300:
+						rc = ebitmap_set_bit(&context->range.level[l].cat, i, 1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#602: FILE: security/selinux/ss/mls.c:301:
+						if (rc)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: security/selinux/ss/mls.c:360:
+                                    struct context *src)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: security/selinux/ss/mls.c:360:
+                                    struct context *src)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: security/selinux/ss/mls.c:380:
+                                struct mls_range *range)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: security/selinux/ss/mls.c:380:
+                                struct mls_range *range)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: security/selinux/ss/mls.c:397:
+                         struct context *usercon)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: security/selinux/ss/mls.c:397:
+                         struct context *usercon)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fromcon->range.level[0]
#665: FILE: security/selinux/ss/mls.c:400:
+		struct mls_level *fromcon_sen = &(fromcon->range.level[0]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fromcon->range.level[1]
#666: FILE: security/selinux/ss/mls.c:401:
+		struct mls_level *fromcon_clr = &(fromcon->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user->range.level[0]
#667: FILE: security/selinux/ss/mls.c:402:
+		struct mls_level *user_low = &(user->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user->range.level[1]
#668: FILE: security/selinux/ss/mls.c:403:
+		struct mls_level *user_clr = &(user->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user->dfltlevel
#669: FILE: security/selinux/ss/mls.c:404:
+		struct mls_level *user_def = &(user->dfltlevel);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around usercon->range.level[0]
#670: FILE: security/selinux/ss/mls.c:405:
+		struct mls_level *usercon_sen = &(usercon->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around usercon->range.level[1]
#671: FILE: security/selinux/ss/mls.c:406:
+		struct mls_level *usercon_clr = &(usercon->range.level[1]);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#674: FILE: security/selinux/ss/mls.c:409:
+		if (mls_level_between(user_def, fromcon_sen, fromcon_clr)) {
[...]
+		} else if (mls_level_between(fromcon_sen, user_def, user_clr)) {
[...]
+		} else if (mls_level_between(fromcon_clr, user_low, user_def)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#680: FILE: security/selinux/ss/mls.c:415:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#684: FILE: security/selinux/ss/mls.c:419:
+		/* Lower the clearance of available contexts
+		   if the clearance of "fromcon" is lower than

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#687: FILE: security/selinux/ss/mls.c:422:
+		   the user's computed sensitivity level) */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#688: FILE: security/selinux/ss/mls.c:423:
+		if (mls_level_dom(user_clr, fromcon_clr)) {
[...]
+		} else if (mls_level_dom(fromcon_clr, user_clr)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#692: FILE: security/selinux/ss/mls.c:427:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#731: FILE: security/selinux/ss/mls.c:500:
+^I^I^I^I^I                     &rangetr->range);$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#735: FILE: security/selinux/ss/mls.c:504:
+		/* Fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#742: FILE: security/selinux/ss/mls.c:509:
+			return mls_copy_context(newcontext, scontext);
+		else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1221: FILE: security/selinux/ss/mls.h:39:
+                         struct context *usercon);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1221: FILE: security/selinux/ss/mls.h:39:
+                         struct context *usercon);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1297: FILE: security/selinux/ss/mls_types.h:34:
+^I        ebitmap_cmp(&l1->cat, &l2->cat));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1306: FILE: security/selinux/ss/mls_types.h:43:
+^I        ebitmap_contains(&l1->cat, &l2->cat));$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l1' - possible side-effects?
#1309: FILE: security/selinux/ss/mls_types.h:46:
+#define mls_level_incomp(l1, l2) \
+(!mls_level_dom((l1), (l2)) && !mls_level_dom((l2), (l1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l2' - possible side-effects?
#1309: FILE: security/selinux/ss/mls_types.h:46:
+#define mls_level_incomp(l1, l2) \
+(!mls_level_dom((l1), (l2)) && !mls_level_dom((l2), (l1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l1' - possible side-effects?
#1312: FILE: security/selinux/ss/mls_types.h:49:
+#define mls_level_between(l1, l2, l3) \
+(mls_level_dom((l1), (l2)) && mls_level_dom((l3), (l1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r1' - possible side-effects?
#1315: FILE: security/selinux/ss/mls_types.h:52:
+#define mls_range_contains(r1, r2) \
+(mls_level_dom(&(r2).level[0], &(r1).level[0]) && \
+ mls_level_dom(&(r1).level[1], &(r2).level[1]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r2' - possible side-effects?
#1315: FILE: security/selinux/ss/mls_types.h:52:
+#define mls_range_contains(r1, r2) \
+(mls_level_dom(&(r2).level[0], &(r1).level[0]) && \
+ mls_level_dom(&(r1).level[1], &(r2).level[1]))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: security/selinux/ss/mls_types.h:54:
+ mls_level_dom(&(r1).level[1], &(r2).level[1]))$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1353: FILE: security/selinux/ss/policydb.c:48:
+int selinux_mls_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1459: FILE: security/selinux/ss/policydb.c:388:
+		printk(", %d sens, %d cats", p->p_levels.nprim,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1546: FILE: security/selinux/ss/policydb.c:731:
+		printk(KERN_ERR "security: mls:  range overflow\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1552: FILE: security/selinux/ss/policydb.c:737:
+		printk(KERN_ERR "security: mls:  truncated range\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1563: FILE: security/selinux/ss/policydb.c:748:
+		printk(KERN_ERR "security: mls:  error reading low "

WARNING:SPLIT_STRING: quoted string split across lines
#1564: FILE: security/selinux/ss/policydb.c:749:
+		printk(KERN_ERR "security: mls:  error reading low "
+		       "categories\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1570: FILE: security/selinux/ss/policydb.c:755:
+			printk(KERN_ERR "security: mls:  error reading high "

WARNING:SPLIT_STRING: quoted string split across lines
#1571: FILE: security/selinux/ss/policydb.c:756:
+			printk(KERN_ERR "security: mls:  error reading high "
+			       "categories\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1577: FILE: security/selinux/ss/policydb.c:762:
+			printk(KERN_ERR "security: mls:  out of memory\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1605: FILE: security/selinux/ss/policydb.c:796:
+			printk(KERN_ERR "security: error reading MLS range of "

WARNING:SPLIT_STRING: quoted string split across lines
#1606: FILE: security/selinux/ss/policydb.c:797:
+			printk(KERN_ERR "security: error reading MLS range of "
+			       "context\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1628: FILE: security/selinux/ss/policydb.c:913:
+                            int allowxtarget, void *fp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: security/selinux/ss/policydb.c:913:
+                            int allowxtarget, void *fp)$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1642: FILE: security/selinux/ss/policydb.c:927:
+		if (lc) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1661: FILE: security/selinux/ss/policydb.c:946:
+			if (le) {
[...]
+			} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1826: FILE: security/selinux/ss/policydb.c:1192:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#1838: FILE: security/selinux/ss/policydb.c:1204:
+	rc = next_entry(buf, fp, sizeof buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1840: FILE: security/selinux/ss/policydb.c:1206:
+		printk(KERN_ERR "security: mls: truncated level\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1846: FILE: security/selinux/ss/policydb.c:1212:
+		printk(KERN_ERR "security: mls:  error reading level "

WARNING:SPLIT_STRING: quoted string split across lines
#1847: FILE: security/selinux/ss/policydb.c:1213:
+		printk(KERN_ERR "security: mls:  error reading level "
+		       "categories\n");

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#1903: FILE: security/selinux/ss/policydb.c:1290:
+	rc = next_entry(buf, fp, sizeof buf);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1910: FILE: security/selinux/ss/policydb.c:1297:
+	key = kmalloc(len + 1,GFP_ATOMIC);
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*levdatum->level)...) over kmalloc(sizeof(struct mls_level)...)
#1920: FILE: security/selinux/ss/policydb.c:1307:
+	levdatum->level = kmalloc(sizeof(struct mls_level), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#1954: FILE: security/selinux/ss/policydb.c:1341:
+	rc = next_entry(buf, fp, sizeof buf);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1962: FILE: security/selinux/ss/policydb.c:1349:
+	key = kmalloc(len + 1,GFP_ATOMIC);
 	                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1999: FILE: security/selinux/ss/policydb.c:1382:
+extern int ss_initialized;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2027: FILE: security/selinux/ss/policydb.c:1470:
+			printk(KERN_ERR "Cannot switch between non-MLS and MLS "

WARNING:SPLIT_STRING: quoted string split across lines
#2028: FILE: security/selinux/ss/policydb.c:1471:
+			printk(KERN_ERR "Cannot switch between non-MLS and MLS "
+			       "policies\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2035: FILE: security/selinux/ss/policydb.c:1478:
+			printk(KERN_ERR "security policydb version %d (MLS) "

WARNING:SPLIT_STRING: quoted string split across lines
#2036: FILE: security/selinux/ss/policydb.c:1479:
+			printk(KERN_ERR "security policydb version %d (MLS) "
+			       "not backwards compatible\n", p->policyvers);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2041: FILE: security/selinux/ss/policydb.c:1484:
+			printk(KERN_ERR "Cannot switch between MLS and non-MLS "

WARNING:SPLIT_STRING: quoted string split across lines
#2042: FILE: security/selinux/ss/policydb.c:1485:
+			printk(KERN_ERR "Cannot switch between MLS and non-MLS "
+			       "policies\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2263: FILE: security/selinux/ss/services.c:68:
+int context_struct_to_string(struct context *context, char **scontext,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2264: FILE: security/selinux/ss/services.c:69:
+                             u32 *scontext_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2264: FILE: security/selinux/ss/services.c:69:
+                             u32 *scontext_len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2282: FILE: security/selinux/ss/services.c:83:
+                         struct context *tcontext,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2282: FILE: security/selinux/ss/services.c:83:
+                         struct context *tcontext,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2283: FILE: security/selinux/ss/services.c:84:
+                         struct context *xcontext,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2283: FILE: security/selinux/ss/services.c:84:
+                         struct context *xcontext,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2284: FILE: security/selinux/ss/services.c:85:
+                         struct constraint_expr *cexpr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2284: FILE: security/selinux/ss/services.c:85:
+                         struct constraint_expr *cexpr)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[0]
#2298: FILE: security/selinux/ss/services.c:148:
+				l1 = &(scontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[0]
#2299: FILE: security/selinux/ss/services.c:149:
+				l2 = &(tcontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[0]
#2302: FILE: security/selinux/ss/services.c:152:
+				l1 = &(scontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[1]
#2303: FILE: security/selinux/ss/services.c:153:
+				l2 = &(tcontext->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[1]
#2306: FILE: security/selinux/ss/services.c:156:
+				l1 = &(scontext->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[0]
#2307: FILE: security/selinux/ss/services.c:157:
+				l2 = &(tcontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[1]
#2310: FILE: security/selinux/ss/services.c:160:
+				l1 = &(scontext->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[1]
#2311: FILE: security/selinux/ss/services.c:161:
+				l2 = &(tcontext->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[0]
#2314: FILE: security/selinux/ss/services.c:164:
+				l1 = &(scontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scontext->range.level[1]
#2315: FILE: security/selinux/ss/services.c:165:
+				l2 = &(scontext->range.level[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[0]
#2318: FILE: security/selinux/ss/services.c:168:
+				l1 = &(tcontext->range.level[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tcontext->range.level[1]
#2319: FILE: security/selinux/ss/services.c:169:
+				l2 = &(tcontext->range.level[1]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2339: FILE: security/selinux/ss/services.c:189:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2353: FILE: security/selinux/ss/services.c:219:
+					BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#2386: FILE: security/selinux/ss/services.c:355:
+                                           struct context *ncontext,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2386: FILE: security/selinux/ss/services.c:355:
+                                           struct context *ncontext,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2387: FILE: security/selinux/ss/services.c:356:
+                                           struct context *tcontext,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2387: FILE: security/selinux/ss/services.c:356:
+                                           struct context *tcontext,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2388: FILE: security/selinux/ss/services.c:357:
+                                           u16 tclass)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2388: FILE: security/selinux/ss/services.c:357:
+                                           u16 tclass)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2400: FILE: security/selinux/ss/services.c:369:
+^I          "security_validate_transition:  denied for"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2401: FILE: security/selinux/ss/services.c:370:
+^I          " oldcontext=%s newcontext=%s taskcontext=%s tclass=%s",$

WARNING:SPLIT_STRING: quoted string split across lines
#2401: FILE: security/selinux/ss/services.c:370:
+	          "security_validate_transition:  denied for"
+	          " oldcontext=%s newcontext=%s taskcontext=%s tclass=%s",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2402: FILE: security/selinux/ss/services.c:371:
+^I          o, n, t, policydb.p_class_val_to_name[tclass-1]);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2402: FILE: security/selinux/ss/services.c:371:
+	          o, n, t, policydb.p_class_val_to_name[tclass-1]);
 	                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2414: FILE: security/selinux/ss/services.c:383:
+                                 u16 tclass)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2414: FILE: security/selinux/ss/services.c:383:
+                                 u16 tclass)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2440: FILE: security/selinux/ss/services.c:409:
+		printk(KERN_ERR "security_validate_transition:  "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'security_validate_transition', this function's name, in a string
#2440: FILE: security/selinux/ss/services.c:409:
+		printk(KERN_ERR "security_validate_transition:  "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#2441: FILE: security/selinux/ss/services.c:410:
+		printk(KERN_ERR "security_validate_transition:  "
+		       "unrecognized class %d\n", tclass);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2449: FILE: security/selinux/ss/services.c:418:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'security_validate_transition', this function's name, in a string
#2449: FILE: security/selinux/ss/services.c:418:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:SPLIT_STRING: quoted string split across lines
#2450: FILE: security/selinux/ss/services.c:419:
+		printk(KERN_ERR "security_validate_transition: "
+		       " unrecognized SID %d\n", oldsid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2457: FILE: security/selinux/ss/services.c:426:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'security_validate_transition', this function's name, in a string
#2457: FILE: security/selinux/ss/services.c:426:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:SPLIT_STRING: quoted string split across lines
#2458: FILE: security/selinux/ss/services.c:427:
+		printk(KERN_ERR "security_validate_transition: "
+		       " unrecognized SID %d\n", newsid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2465: FILE: security/selinux/ss/services.c:434:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'security_validate_transition', this function's name, in a string
#2465: FILE: security/selinux/ss/services.c:434:
+		printk(KERN_ERR "security_validate_transition: "

WARNING:SPLIT_STRING: quoted string split across lines
#2466: FILE: security/selinux/ss/services.c:435:
+		printk(KERN_ERR "security_validate_transition: "
+		       " unrecognized SID %d\n", tasksid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2474: FILE: security/selinux/ss/services.c:443:
+^I^I                          constraint->expr)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2476: FILE: security/selinux/ss/services.c:445:
+^I^I^I                                     tcontext, tclass);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2511: FILE: security/selinux/ss/services.c:547:
+^I             1 + strlen(policydb.p_type_val_to_name[context->type - 1]);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2575: FILE: security/selinux/ss/services.c:1532:
+				mysids2 = kmalloc(maxnel*sizeof(*mysids2), GFP_ATOMIC);
 				                        ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2575: FILE: security/selinux/ss/services.c:1532:
+				mysids2 = kmalloc(maxnel*sizeof(*mysids2), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2597: FILE: security/selinux/ss/services.c:1538:
+				memset(mysids2, 0, maxnel*sizeof(*mysids2));
 				                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 71 warnings, 34 checks, 2073 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
