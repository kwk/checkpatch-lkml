WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#37: 
daemon is hardly noticable and usually finishes zeroing quickly since
                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#70: FILE: mm/page_alloc.c:186:
+static inline unsigned long page_zorder(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#76: FILE: mm/page_alloc.c:190:
+static inline void set_page_zorder(struct page *page, int order, int zero) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: mm/page_alloc.c:245:
+           (page_zorder(page) == order + (zero << 10)) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: mm/page_alloc.c:245:
+           (page_zorder(page) == order + (zero << 10)) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#159: FILE: mm/page_alloc.c:366:
+	if (zone->zero_pages < ((zone->free_pages*sysctl_scrub_start) >> 10))
+			wakeup_kscrubd(zone);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#159: FILE: mm/page_alloc.c:366:
+	if (zone->zero_pages < ((zone->free_pages*sysctl_scrub_start) >> 10))
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: mm/page_alloc.c:398:
+	struct zone * zone = page_zone(page);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: mm/page_alloc.c:425:
+ ^Iint low, int high, struct free_area *area, int zero)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: mm/page_alloc.c:425:
+ ^Iint low, int high, struct free_area *area, int zero)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: mm/page_alloc.c:425:
+ ^Iint low, int high, struct free_area *area, int zero)$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#209: FILE: mm/page_alloc.c:487:
+static void inline rmpage(struct page *page, struct free_area *area)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#301: FILE: mm/page_alloc.c:702:
+	int cold = !!(gfp_flags & __GFP_COLD) + 2*zero;
 	                                         ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#348: FILE: mm/page_alloc.c:770:
+		free_pages -= (z->free_area[NOT_ZEROED][o].nr_free + z->free_area[ZEROED][o].nr_free)  << o;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#387: FILE: mm/page_alloc.c:1219:
+		unsigned long l, m, n,o;
 		                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: mm/page_alloc.c:1220:
+		unsigned long l, m, n,o;
+		__get_zone_counts(&l, &m, &n, &o, pgdat);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#438: FILE: mm/page_alloc.c:1313:
 	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "
+		"unstable:%lu free:%u zero:%lu slab:%lu mapped:%lu pagetables:%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#454: FILE: mm/page_alloc.c:1369:
+			nr = zone->free_area[NOT_ZEROED][order].nr_free + zone->free_area[ZEROED][order].nr_free;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#507: FILE: mm/page_alloc.c:1897:
+		seq_printf(m, "\n        Zeroed Pages  ");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#678: FILE: mm/scrubd.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#687: FILE: mm/scrubd.c:10:
+unsigned int sysctl_scrub_start = 100;	/* Min percentage of zeroed free pages per zone (~10% default) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#688: FILE: mm/scrubd.c:11:
+unsigned int sysctl_scrub_stop = 300;	/* Max percentage of zeroed free pages per zone (~30% default) */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: mm/scrubd.c:18:
+int scrub_start_handler(ctl_table *table, int write,
+	struct file *file, void __user *buffer, size_t *length, loff_t *ppos)

ERROR:SPACING: space required before the open parenthesis '('
#750: FILE: mm/scrubd.c:73:
+	for(order = 0; order < MAX_ORDER; order++) {

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#755: FILE: mm/scrubd.c:78:
+		while (!list_empty(&area->free_list) && zarea->nr_free < ((area->nr_free*sysctl_scrub_stop) >> 10))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#755: FILE: mm/scrubd.c:78:
+		while (!list_empty(&area->free_list) && zarea->nr_free < ((area->nr_free*sysctl_scrub_stop) >> 10))
 		                                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: mm/scrubd.c:93:
+        while (avenrun[0] >= ((unsigned long)sysctl_scrub_load << FSHIFT))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: mm/scrubd.c:93:
+        while (avenrun[0] >= ((unsigned long)sysctl_scrub_load << FSHIFT))$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#771: FILE: mm/scrubd.c:94:
+		schedule_timeout(30*HZ);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#774: FILE: mm/scrubd.c:97:
+		zero_zone(pgdat->node_zones +i);
 		                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#783: FILE: mm/scrubd.c:106:
+	pg_data_t *pgdat = (pg_data_t*)p;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kscrubd', this function's name, in a string
#788: FILE: mm/scrubd.c:111:
+	daemonize("kscrubd%d", pgdat->node_id);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#810: FILE: mm/scrubd.c:133:
+	pg_data_t *pgdat;
+	for_each_pgdat(pgdat)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#821: FILE: include/linux/scrub.h:1:
+#ifndef _LINUX_SCRUB_H

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: include/linux/scrub.h:13:
+        int (*start)(void *, unsigned long);^I^I/* Start bzero transfer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: include/linux/scrub.h:13:
+        int (*start)(void *, unsigned long);^I^I/* Start bzero transfer */$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#833: FILE: include/linux/scrub.h:13:
+        int (*start)(void *, unsigned long);		/* Start bzero transfer */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#833: FILE: include/linux/scrub.h:13:
+        int (*start)(void *, unsigned long);		/* Start bzero transfer */

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: include/linux/scrub.h:14:
+        struct list_head list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: include/linux/scrub.h:14:
+        struct list_head list;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#854: FILE: include/linux/scrub.h:34:
+extern struct page *scrubd_rmpage(struct zone *zone, struct free_area *area);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#856: FILE: include/linux/scrub.h:36:
+static void inline wakeup_kscrubd(struct zone *zone)

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#858: FILE: include/linux/scrub.h:38:
+	if (!waitqueue_active(&zone->zone_pgdat->kscrubd_wait))

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: include/linux/scrub.h:39:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: include/linux/scrub.h:39:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: include/linux/scrub.h:40:
+        wake_up_interruptible(&zone->zone_pgdat->kscrubd_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: include/linux/scrub.h:40:
+        wake_up_interruptible(&zone->zone_pgdat->kscrubd_wait);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: include/linux/scrub.h:44:
+int scrub_start_handler(struct ctl_table *, int, struct file *,
+				      void __user *, size_t *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#866: FILE: include/linux/scrub.h:46:
+extern void end_zero_page(struct page *page, unsigned int order);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#927: FILE: include/linux/sysctl.h:173:
+	VM_SCRUB_START=30,	/* percentage * 10 at which to start scrubd */
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#928: FILE: include/linux/sysctl.h:174:
+	VM_SCRUB_STOP=31,	/* percentage * 10 at which to stop scrubd */
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: include/linux/sysctl.h:175:
+	VM_SCRUB_LOAD=32,	/* Load factor at which not to scrub anymore */
 	             ^

WARNING:TYPO_SPELLING: 'satisifed' may be misspelled - perhaps 'satisfied'?
#966: FILE: Documentation/vm/scrubd.txt:5:
+be satisifed without having to zero memory in a hot code path. The operations
    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#972: FILE: Documentation/vm/scrubd.txt:11:
+	the numer of unzeroed free pages drops below scrub_start*10 percent.
 	    ^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 27 warnings, 9 checks, 873 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
