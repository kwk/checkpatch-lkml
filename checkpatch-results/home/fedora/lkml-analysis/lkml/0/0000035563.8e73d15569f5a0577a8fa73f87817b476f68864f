WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#69: 
- what can we do if there isn't enough contigous free disk space
                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
ext3, and xfs too, but of course ideal would be if all fs-s would support this)

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#82: 
Signed-off-by: Török Edwin <edwintorok@gmail.com>
                ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#99: FILE: fs/Kconfig:7:
+config FS_RELAYOUT
+	bool "Support for rearranging files"
+	help
+		Support for rearranging files (in the order in which they are

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#103: FILE: fs/Kconfig:10:
accessed) on disk, in order to reduce seeks. This 'relayout'

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: fs/reiserfs/bitmap.c:883:
+#if defined(CONFIG_FS_RELAYOUT) ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: fs/reiserfs/bitmap.c:883:
+#if defined(CONFIG_FS_RELAYOUT) ^I$

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: fs/reiserfs/bitmap.c:884:
+	if(hint->inode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: fs/reiserfs/bitmap.c:886:
+		struct hint_element search;
+		search.i_ino = hint->inode->i_ino;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: fs/reiserfs/bitmap.c:890:
+			reiserfs_debug(s, REISERFS_DEBUG_CODE,"Found relayout hint for
 			                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: fs/reiserfs/bitmap.c:1119:
+		reiserfs_debug(s, REISERFS_DEBUG_CODE,"allocating, start:%ld",start);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: fs/reiserfs/bitmap.c:1119:
+		reiserfs_debug(s, REISERFS_DEBUG_CODE,"allocating, start:%ld",start);
 		                                                             ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#174: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#179: FILE: fs/relayout.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: fs/relayout.c:10:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: fs/relayout.c:17:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#207: FILE: fs/relayout.c:29:
+static void hint_dup(const struct hint_element* src,struct hint_element* dst)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#207: FILE: fs/relayout.c:29:
+static void hint_dup(const struct hint_element* src,struct hint_element* dst)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/relayout.c:29:
+static void hint_dup(const struct hint_element* src,struct hint_element* dst)
                                                    ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#213: FILE: fs/relayout.c:35:
+static int is_hint_for(const struct hint_element* hintfor, const

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#218: FILE: fs/relayout.c:39:
+	 * hintfor doesn't have all fields completed, only the inode, device... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#220: FILE: fs/relayout.c:41:
+}
+int add_hint_result(const struct hint_result* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#220: FILE: fs/relayout.c:41:
+int add_hint_result(const struct hint_result* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#222: FILE: fs/relayout.c:43:
+	struct hint_result_element* hint = kmalloc(sizeof(*hint), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: fs/relayout.c:44:
+	struct hint_result_element* hint = kmalloc(sizeof(*hint), GFP_KERNEL);
+	if(unlikely(!hint))

ERROR:SPACING: space required before the open parenthesis '('
#223: FILE: fs/relayout.c:44:
+	if(unlikely(!hint))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: fs/relayout.c:46:
+	memcpy(&hint->data,result,sizeof(*result));
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: fs/relayout.c:46:
+	memcpy(&hint->data,result,sizeof(*result));
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#228: FILE: fs/relayout.c:49:
+	list_add_tail(&hint->list,&hint_results);
 	                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#228: FILE: fs/relayout.c:49:
+	list_add_tail(&hint->list,&hint_results);
 	                          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#234: FILE: fs/relayout.c:55:
+int get_layout_hint_for(struct hint_element* hint_search)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#236: FILE: fs/relayout.c:57:
+	struct hint_list_element* hint;

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/relayout.c:58:
+	struct hint_list_element* hint;
+	spin_lock(&hint_list_lock);

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: fs/relayout.c:60:
+		if(is_hint_for(hint_search, &hint->data)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: fs/relayout.c:63:
+			hint_dup(&hint->data,hint_search);
 			                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#249: FILE: fs/relayout.c:70:
+}
+/* lists */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#254: FILE: fs/relayout.c:75:
+static size_t parse_hint(const char* buf, size_t count, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#258: FILE: fs/relayout.c:78:
+	struct file* file;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	                            ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {
 	                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#260: FILE: fs/relayout.c:80:
+	if( sscanf(buf,"%d %Ld",&fd,&hint->location)!=2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#261: FILE: fs/relayout.c:81:
+		printk(KERN_INFO "Unable to parse hint:%s",buf);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: fs/relayout.c:81:
+		printk(KERN_INFO "Unable to parse hint:%s",buf);
 		                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: fs/relayout.c:86:
+	if(file->f_dentry && file->f_dentry->d_inode) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#267: FILE: fs/relayout.c:87:
+		const struct inode* inode = file->f_dentry->d_inode;

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: fs/relayout.c:88:
+		const struct inode* inode = file->f_dentry->d_inode;
+		hint->i_ino = inode->i_ino;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#272: FILE: fs/relayout.c:92:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#272: FILE: fs/relayout.c:92:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#273: FILE: fs/relayout.c:93:
+		printk(KERN_INFO "Unable to get inode from fd:%d",fd);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: fs/relayout.c:93:
+		printk(KERN_INFO "Unable to get inode from fd:%d",fd);
 		                                                 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#281: FILE: fs/relayout.c:101:
+static ssize_t format_hint(const struct hint_element* hint, char* buf)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#281: FILE: fs/relayout.c:101:
+static ssize_t format_hint(const struct hint_element* hint, char* buf)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: fs/relayout.c:103:
+	return sprintf(buf,"device:%u\ninode:%lu\nsize:%Ld\nlocation
 	                  ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#283: FILE: fs/relayout.c:103:
+	return sprintf(buf,"device:%u\ninode:%lu\nsize:%Ld\nlocation

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#295: FILE: fs/relayout.c:113:
+	return sprintf(buf,"hint result:\n"/*, hint->...*/);
 	                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: fs/relayout.c:148:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: fs/relayout.c:150:
+ * the user should then check layout_hint, to see if it has been$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#388: FILE: fs/relayout.c:201:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: fs/relayout.c:203:
+	 * Or it can just use FIBMAP to get this info */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: fs/relayout.c:233:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: fs/relayout.c:253:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: fs/relayout.c:256:
+	 * we shall return him the real allocated place */

CHECK:CAMELCASE: Avoid CamelCase: <Torok>
#465: FILE: fs/relayout.c:276:
+MODULE_AUTHOR("Torok Edwin");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Edwin>
#465: FILE: fs/relayout.c:276:
+MODULE_AUTHOR("Torok Edwin");

CHECK:CAMELCASE: Avoid CamelCase: <Filesystem>
#467: FILE: fs/relayout.c:278:
+MODULE_DESCRIPTION("Filesystem relayout");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#475: FILE: include/linux/fs_relayout.h:1:
+#ifndef _FS_RELAYOUT_H

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#488: FILE: include/linux/fs_relayout.h:14:
+int add_hint_result(const struct hint_result* result);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#489: FILE: include/linux/fs_relayout.h:15:
+int get_layout_hint_for(struct hint_element* hint_search);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#491: FILE: include/linux/fs_relayout.h:17:
+static inline int add_hint_result(const struct hint_result* result) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#491: FILE: include/linux/fs_relayout.h:17:
+static inline int add_hint_result(const struct hint_result* result) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 19 warnings, 13 checks, 378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
