WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
http://www.sr71.net/patches/2.6.11/2.6.11-rc3-mhp1/configs/config-i386-T41-laptop

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#133: FILE: arch/i386/mm/init.c:206:
+		addr = (md->phys_addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#133: FILE: arch/i386/mm/init.c:206:
+		addr = (md->phys_addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr >= addr'
#135: FILE: arch/i386/mm/init.c:208:
+		if ((pagenr >= addr) && (pagenr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr < end'
#135: FILE: arch/i386/mm/init.c:208:
+		if ((pagenr >= addr) && (pagenr < end))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: arch/i386/mm/init.c:229:
+		addr = (local_e820->map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: arch/i386/mm/init.c:229:
+		addr = (local_e820->map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: arch/i386/mm/init.c:230:
+		end = (local_e820->map[i].addr+local_e820->map[i].size) >> PAGE_SHIFT;
 		                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: arch/i386/mm/init.c:551:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#183: FILE: arch/i386/mm/init.c:632:
+	if ( !(bad_ppro && page_kills_ppro(pfn))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: arch/i386/mm/init.c:639:
+		BUG(); /* for debugging.  remove later */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#200: FILE: arch/i386/mm/init.c:649:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#223: FILE: arch/i386/mm/init.c:672:
+	struct zone *zone = pgdata->node_zones + MAX_NR_ZONES-1;
 	                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#246: FILE: arch/i386/mm/init.c:695:
+	printk(KERN_DEBUG "%s(): memory will be removed from "

WARNING:SPLIT_STRING: quoted string split across lines
#247: FILE: arch/i386/mm/init.c:696:
+	printk(KERN_DEBUG "%s(): memory will be removed from "
+			"the %s zone\n", __func__, zone->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#253: FILE: arch/i386/mm/init.c:702:
+	if (zone != page_zone(pfn_to_page(end_pfn-1)))
 	                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#258: FILE: arch/i386/mm/init.c:707:
+		printk(KERN_DEBUG "%s(): range to be removed must be in highmem!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: arch/i386/mm/init.c:708:
+		printk(KERN_DEBUG "%s(): range to be removed must be in highmem!\n",
+			__func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#266: FILE: arch/i386/mm/init.c:715:
+	printk(KERN_DEBUG "%s(): memory range to be removed overlaps "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/i386/mm/init.c:716:
+	printk(KERN_DEBUG "%s(): memory range to be removed overlaps "
+		"multiple zones!!!\n", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: arch/i386/mm/init.c:722:
+
+

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#308: FILE: arch/ia64/mm/init.c:634:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#313: FILE: arch/ia64/mm/init.c:639:
+	return -ENOSYS;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#333: FILE: drivers/acpi/Kconfig:345:
+config ACPI_HOTPLUG_MEMORY
+	tristate "Memory Hotplug"
+	depends on ACPI
+	depends on MEMORY_HOTPLUG
+	default m
+	help
+	  This driver adds supports for ACPI Memory Hotplug.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: drivers/acpi/acpi_memhotplug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#368: FILE: drivers/acpi/acpi_memhotplug.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#369: FILE: drivers/acpi/acpi_memhotplug.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'firmare' may be misspelled - perhaps 'firmware'?
#373: FILE: drivers/acpi/acpi_memhotplug.c:23:
+ * This driver fields notifications from firmare for memory add
                                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#385: FILE: drivers/acpi/acpi_memhotplug.c:35:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#394: FILE: drivers/acpi/acpi_memhotplug.c:44:
+ACPI_MODULE_NAME		("acpi_memory")

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: drivers/acpi/acpi_memhotplug.c:59:
+static int acpi_memory_device_add (struct acpi_device *device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: drivers/acpi/acpi_memhotplug.c:60:
+static int acpi_memory_device_remove (struct acpi_device *device, int type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: drivers/acpi/acpi_memhotplug.c:81:
+
+

CHECK:SPACING: No space is necessary after a cast
#447: FILE: drivers/acpi/acpi_memhotplug.c:97:
+	resource = (struct acpi_resource *) buffer.pointer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: drivers/acpi/acpi_memhotplug.c:117:
+acpi_memory_get_device(acpi_handle handle,
+	struct acpi_memory_device **mem_device)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: drivers/acpi/acpi_memhotplug.c:132:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error in acpi_get_parent\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: drivers/acpi/acpi_memhotplug.c:140:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error in acpi_bus_get_device\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/acpi/acpi_memhotplug.c:151:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error in acpi_bus_add\n"));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#508: FILE: drivers/acpi/acpi_memhotplug.c:158:
+		printk(KERN_ERR "\n driver data not found" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#508: FILE: drivers/acpi/acpi_memhotplug.c:158:
+		printk(KERN_ERR "\n driver data not found" );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: drivers/acpi/acpi_memhotplug.c:174:
+	if (ACPI_FAILURE(acpi_evaluate_integer(mem_device->handle, "_STA",
+		NULL, &current_status)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#531: FILE: drivers/acpi/acpi_memhotplug.c:181:
+	if (!((current_status & ACPI_MEMORY_STA_PRESENT)
+		&& (current_status & ACPI_MEMORY_STA_ENABLED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#532: FILE: drivers/acpi/acpi_memhotplug.c:182:
+		&& (current_status & ACPI_MEMORY_STA_ENABLED)
+		&& (current_status & ACPI_MEMORY_STA_FUNCTIONAL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/acpi/acpi_memhotplug.c:199:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"\nget_device_resources failed\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/acpi/acpi_memhotplug.c:209:
+	result = add_memory(mem_device->start_addr,
+			(mem_device->end_addr - mem_device->start_addr) + 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/acpi/acpi_memhotplug.c:213:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"\nadd_memory failed\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/acpi/acpi_memhotplug.c:237:
+	status = acpi_evaluate_object(mem_device->handle,
+			"_EJ0", &arg_list, NULL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#590: FILE: drivers/acpi/acpi_memhotplug.c:240:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,"_EJ0 failed.\n"));
 		                               ^

WARNING:TYPO_SPELLING: 'Evalute' may be misspelled - perhaps 'Evaluate'?
#594: FILE: drivers/acpi/acpi_memhotplug.c:244:
+	/* Evalute _STA to check if the device is disabled */
 	   ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/acpi/acpi_memhotplug.c:246:
+	status = acpi_evaluate_integer(mem_device->handle, "_STA",
+		NULL, &current_status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: drivers/acpi/acpi_memhotplug.c:281:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+					"Device Power Down failed.\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: drivers/acpi/acpi_memhotplug.c:302:
+		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
+			"\nReceived BUS CHECK notification for device\n"));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#653: FILE: drivers/acpi/acpi_memhotplug.c:303:
+		/* Fall Through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: drivers/acpi/acpi_memhotplug.c:307:
+			ACPI_DEBUG_PRINT((ACPI_DB_INFO,
+			"\nReceived DEVICE CHECK notification for device\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/acpi/acpi_memhotplug.c:310:
+			ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+				"Error in finding driver data\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: drivers/acpi/acpi_memhotplug.c:317:
+				ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+				"Error in acpi_memory_enable_device\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: drivers/acpi/acpi_memhotplug.c:322:
+		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
+			"\nReceived EJECT REQUEST notification for device\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: drivers/acpi/acpi_memhotplug.c:326:
+			ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+					"Device doesn't exist\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/acpi/acpi_memhotplug.c:332:
+			ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+					"Driver Data is NULL\n"));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#690: FILE: drivers/acpi/acpi_memhotplug.c:340:
+^I^I * ^Iwith generic sysfs driver$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/acpi/acpi_memhotplug.c:344:
+			ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+				"Error in acpi_memory_disable_device\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: drivers/acpi/acpi_memhotplug.c:351:
+		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
+			"Unsupported event [0x%x]\n", event));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mem_device)...) over kmalloc(sizeof(struct acpi_memory_device)...)
#719: FILE: drivers/acpi/acpi_memhotplug.c:369:
+	mem_device = kmalloc(sizeof(struct acpi_memory_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#739: FILE: drivers/acpi/acpi_memhotplug.c:389:
+	printk(KERN_INFO "%s \n", acpi_device_name(device));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#739: FILE: drivers/acpi/acpi_memhotplug.c:389:
+	printk(KERN_INFO "%s \n", acpi_device_name(device));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#745: FILE: drivers/acpi/acpi_memhotplug.c:395:
+acpi_memory_device_remove (struct acpi_device *device, int type)

CHECK:SPACING: No space is necessary after a cast
#754: FILE: drivers/acpi/acpi_memhotplug.c:404:
+	mem_device = (struct acpi_memory_device *) acpi_driver_data(device);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hardware_id == NULL'
#784: FILE: drivers/acpi/acpi_memhotplug.c:434:
+	if ((hardware_id == NULL) ||
+		(strcmp(hardware_id, ACPI_MEMORY_DEVICE_HID)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hardware_id"
#784: FILE: drivers/acpi/acpi_memhotplug.c:434:
+	if ((hardware_id == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: drivers/acpi/acpi_memhotplug.c:435:
+	if ((hardware_id == NULL) ||
+		(strcmp(hardware_id, ACPI_MEMORY_DEVICE_HID)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: drivers/acpi/acpi_memhotplug.c:444:
+acpi_memory_register_notify_handler (acpi_handle handle,
+	u32 level, void *ctxt, void **retv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/acpi/acpi_memhotplug.c:455:
+	status = acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,
+			acpi_memory_device_notify, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: drivers/acpi/acpi_memhotplug.c:458:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error installing notify handler\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: drivers/acpi/acpi_memhotplug.c:467:
+acpi_memory_deregister_notify_handler (acpi_handle handle,
+			       u32 level, void *ctxt, void **retv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: drivers/acpi/acpi_memhotplug.c:478:
+	status = acpi_remove_notify_handler(handle,
+			ACPI_SYSTEM_NOTIFY, acpi_memory_device_notify);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: drivers/acpi/acpi_memhotplug.c:481:
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+				"Error removing notify handler\n"));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: drivers/acpi/acpi_memhotplug.c:489:
+acpi_memory_device_init (void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: drivers/acpi/acpi_memhotplug.c:502:
+	status = acpi_walk_namespace(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+				ACPI_UINT32_MAX,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#856: FILE: drivers/acpi/acpi_memhotplug.c:506:
+	if (ACPI_FAILURE (status)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#857: FILE: drivers/acpi/acpi_memhotplug.c:507:
+		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "walk_namespace failed\n"));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#866: FILE: drivers/acpi/acpi_memhotplug.c:516:
+acpi_memory_device_exit (void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/acpi/acpi_memhotplug.c:527:
+	status = acpi_walk_namespace(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+			ACPI_UINT32_MAX,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: drivers/acpi/acpi_memhotplug.c:531:
+	if (ACPI_FAILURE (status))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: drivers/acpi/acpi_memhotplug.c:532:
+		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "walk_namespace failed\n"));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#892: FILE: drivers/acpi/acpi_memhotplug.c:542:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#923: FILE: drivers/base/memory.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#924: FILE: drivers/base/memory.c:2:
+ * drivers/base/memory.c - basic Memory class support

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#937: FILE: drivers/base/memory.c:15:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#938: FILE: drivers/base/memory.c:16:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: drivers/base/memory.c:41:
+static int memory_hotplug(struct kset *kset, struct kobject *kobj, char **envp,
+			int num_envp, char *buffer, int buffer_size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#976: FILE: drivers/base/memory.c:54:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: drivers/base/memory.c:79:
+unregister_memory(struct memory_block *memory, struct mem_section *section,
+		struct node *root)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1003: FILE: drivers/base/memory.c:81:
+	BUG_ON(memory->sysdev.cls != &memory_sysdev_class);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1004: FILE: drivers/base/memory.c:82:
+	BUG_ON(memory->sysdev.id != __section_nr(section));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1036: FILE: drivers/base/memory.c:114:
+	switch (mem->state) {
+		case MEM_ONLINE:
[...]
+		case MEM_OFFLINE:
[...]
+		case MEM_GOING_OFFLINE:
[...]
+		case MEM_INVALID:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1075: FILE: drivers/base/memory.c:153:
+	printk(KERN_DEBUG "%s()\n"

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1081: FILE: drivers/base/memory.c:159:
+		if ((action == MEM_ONLINE) && !PageReserved(first_page+i)) {
 		                                                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'action == MEM_ONLINE'
#1081: FILE: drivers/base/memory.c:159:
+		if ((action == MEM_ONLINE) && !PageReserved(first_page+i)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1082: FILE: drivers/base/memory.c:160:
+			printk(KERN_WARNING "%s: section number %ld page number %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1083: FILE: drivers/base/memory.c:161:
+			printk(KERN_WARNING "%s: section number %ld page number %d "
+				"not reserved, was it already online? \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1083: FILE: drivers/base/memory.c:161:
+				"not reserved, was it already online? \n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1089: FILE: drivers/base/memory.c:167:
+	switch (action) {
+		case MEM_ONLINE:
[...]
+		case MEM_OFFLINE:
[...]
+		default:

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#1096: FILE: drivers/base/memory.c:174:
+			start_paddr = page_to_pfn(first_page) <<PAGE_SHIFT;
 			                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1097: FILE: drivers/base/memory.c:175:
+			ret = remove_memory(start_paddr, PAGES_PER_SECTION<<PAGE_SHIFT, 0);
 			                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1098: FILE: drivers/base/memory.c:176:
+			printk(KERN_DEBUG "%s(%p, %ld) remove_memory() res: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1099: FILE: drivers/base/memory.c:177:
+			printk(KERN_DEBUG "%s(%p, %ld) remove_memory() res: %d\n",
+					__func__, mem, action, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1104: FILE: drivers/base/memory.c:182:
+			printk(KERN_WARNING "%s(%p, %ld) unknown action: %ld\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: drivers/base/memory.c:183:
+			printk(KERN_WARNING "%s(%p, %ld) unknown action: %ld\n", __func__,
+				mem, action, action);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1115: FILE: drivers/base/memory.c:193:
+	printk(KERN_WARNING "%s() failed to perform action: %d, SPAARSE is "

WARNING:SPLIT_STRING: quoted string split across lines
#1116: FILE: drivers/base/memory.c:194:
+	printk(KERN_WARNING "%s() failed to perform action: %d, SPAARSE is "
+			"compiled out\n", __FUNCTION__, action);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1116: FILE: drivers/base/memory.c:194:
+			"compiled out\n", __FUNCTION__, action);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1117: FILE: drivers/base/memory.c:195:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: drivers/base/memory.c:205:
+static int memory_block_change_state(struct memory_block *mem,
+		unsigned long to_state, unsigned long from_state_req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: drivers/base/memory.c:208:
+	int ret = 0;
+	down(&mem->state_sem);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1158: FILE: drivers/base/memory.c:236:
+		printk(KERN_DEBUG "%s: section (%d) is not valid\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: drivers/base/memory.c:237:
+		printk(KERN_DEBUG "%s: section (%d) is not valid\n",
+			__func__, phys_section_nr);

WARNING:MINMAX: min() should probably be min_t(int, count, 6)
#1163: FILE: drivers/base/memory.c:241:
+	if (!strncmp(buf, "XXXXXX", min((int)count, 6)))
+		ret = memory_block_change_state(mem, MEM_ONLINE, MEM_OFFLINE);

ERROR:SPACING: space required before the open parenthesis '('
#1165: FILE: drivers/base/memory.c:243:
+	else if(!strncmp(buf, "offline", min((int)count, 7)))

WARNING:MINMAX: min() should probably be min_t(int, count, 7)
#1165: FILE: drivers/base/memory.c:243:
+	else if(!strncmp(buf, "XXXXXXX", min((int)count, 7)))
 		ret = memory_block_change_state(mem, MEM_OFFLINE, MEM_ONLINE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mem' may be better as '(mem)' to avoid precedence issues
#1194: FILE: drivers/base/memory.c:272:
+#define mem_create_simple_file(mem, attr_name)	\
+	sysdev_create_file(&mem->sysdev, &attr_##attr_name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mem' may be better as '(mem)' to avoid precedence issues
#1196: FILE: drivers/base/memory.c:274:
+#define mem_remove_simple_file(mem, attr_name)	\
+	sysdev_remove_file(&mem->sysdev, &attr_##attr_name)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1206: FILE: drivers/base/memory.c:284:
+	return sprintf(buf, "%lx\n", (unsigned long)PAGES_PER_SECTION*PAGE_SIZE);
 	                                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: drivers/base/memory.c:292:
+	sysfs_create_file(&memory_sysdev_class.kset.kobj,
+		&class_attr_block_size_bytes.attr);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#1237: FILE: drivers/base/memory.c:315:
+	phys_addr = simple_strtoull(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#1242: FILE: drivers/base/memory.c:320:
+		unsigned long page_nr = (phys_addr >> PAGE_SHIFT) + offset;
+		if (page_is_hotpluggable_ram(page_nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: drivers/base/memory.c:338:
+	sysfs_create_file(&memory_sysdev_class.kset.kobj,
+		&class_attr_probe.attr);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1290: FILE: drivers/base/memory.c:368:
+#if 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1309: FILE: drivers/base/memory.c:387:
+#define online_section(...) ^Ido {} while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#1309: FILE: drivers/base/memory.c:387:
+#define online_section(...) 	do {} while(0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1314: FILE: drivers/base/memory.c:392:
+	unsigned int section = simple_strtoul(buf, NULL, 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1320: FILE: drivers/base/memory.c:398:
+		printk(KERN_WARNING "memory state store: section %d is "

WARNING:SPLIT_STRING: quoted string split across lines
#1321: FILE: drivers/base/memory.c:399:
+		printk(KERN_WARNING "memory state store: section %d is "
+				    "not currently mapped\n", section);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/base/memory.c:416:
+	sysfs_create_file(&memory_sysdev_class.kset.kobj,
+		&class_attr_online.attr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1362: FILE: drivers/base/memory.c:440:
+	printk(KERN_DEBUG "%s() looking for name: \"%s\"\n", __func__, name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1375: FILE: drivers/base/memory.c:453:
+int remove_memory_block(unsigned long node_id, struct mem_section *section,
+		int phys_device)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1381: FILE: drivers/base/memory.c:459:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1403: FILE: drivers/base/memory.c:481:
+	printk(KERN_DEBUG "%s(%p)\n", __func__, section);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1412: FILE: drivers/base/memory.c:490:
+		printk(KERN_WARNING "%s: section %d is already invalid\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1413: FILE: drivers/base/memory.c:491:
+		printk(KERN_WARNING "%s: section %d is already invalid\n",
+					__func__, __section_nr(section));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1454: FILE: include/asm-i386/highmem.h:68:
+extern void flush_all_zero_pkmaps(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1471: FILE: include/linux/memory.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1472: FILE: include/linux/memory.h:2:
+ * include/linux/memory.h - generic memory definition

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct memory_block *' should also have an identifier name
#1500: FILE: include/linux/memory.h:30:
+	int (*phys_callback)(struct memory_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1510: FILE: include/linux/memory.h:40:
+extern int register_memory(struct memory_block *, struct mem_section *section, struct node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1511: FILE: include/linux/memory.h:41:
+extern int register_new_memory(struct mem_section *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_section *' should also have an identifier name
#1511: FILE: include/linux/memory.h:41:
+extern int register_new_memory(struct mem_section *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1512: FILE: include/linux/memory.h:42:
+extern int unregister_memory_section(struct mem_section *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_section *' should also have an identifier name
#1512: FILE: include/linux/memory.h:42:
+extern int unregister_memory_section(struct mem_section *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1513: FILE: include/linux/memory.h:43:
+extern int memory_dev_init(void);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1517: FILE: include/linux/memory.h:47:
+#define CONFIG_MEM_BLOCK_SIZE	(1<<27)
                              	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1517: FILE: include/linux/memory.h:47:
+#define CONFIG_MEM_BLOCK_SIZE	(1<<27)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1519: FILE: include/linux/memory.h:49:
+#define CONFIG_MEM_BLOCK_SIZE	(PAGES_PER_SECTION<<PAGE_SHIFT)
                              	                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1524: FILE: include/linux/memory.h:54:
+#define	MEM_ONLINE		(1<<0)
        	          		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1524: FILE: include/linux/memory.h:54:
+#define	MEM_ONLINE		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1525: FILE: include/linux/memory.h:55:
+#define	MEM_OFFLINE		(1<<1)
        	           		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1525: FILE: include/linux/memory.h:55:
+#define	MEM_OFFLINE		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1526: FILE: include/linux/memory.h:56:
+#define	MEM_GOING_OFFLINE	(1<<2)
        	                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1526: FILE: include/linux/memory.h:56:
+#define	MEM_GOING_OFFLINE	(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1527: FILE: include/linux/memory.h:57:
+#define MEM_INVALID		(1<<3)
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1527: FILE: include/linux/memory.h:57:
+#define MEM_INVALID		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1528: FILE: include/linux/memory.h:58:
+#define MEM_BROKEN		(1<<4)
                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1528: FILE: include/linux/memory.h:58:
+#define MEM_BROKEN		(1<<4)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1530: FILE: include/linux/memory.h:60:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1530: FILE: include/linux/memory.h:60:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1530: FILE: include/linux/memory.h:60:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1531: FILE: include/linux/memory.h:61:
+extern int hot_add_zone_init(struct zone *zone, unsigned long phys_start_pfn, unsigned long size_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1531: FILE: include/linux/memory.h:61:
+extern int hot_add_zone_init(struct zone *zone, unsigned long phys_start_pfn, unsigned long size_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1534: FILE: include/linux/memory.h:64:
+extern int register_memory_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1535: FILE: include/linux/memory.h:65:
+extern void unregister_memory_notifier(struct notifier_block *nb);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1552: FILE: include/linux/memory_hotplug.h:1:
+#ifndef __MEMORY_HOTPLUG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1555: FILE: include/linux/memory_hotplug.h:4:
+extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1556: FILE: include/linux/memory_hotplug.h:5:
+extern int zone_grow_waitqueues(struct zone *zone, unsigned long nr_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1557: FILE: include/linux/memory_hotplug.h:6:
+extern int add_one_highpage(struct page *page, int pfn, int bad_ppro);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1559: FILE: include/linux/memory_hotplug.h:8:
+extern void online_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1561: FILE: include/linux/memory_hotplug.h:10:
+extern int add_memory(u64 start, u64 size, unsigned long attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1562: FILE: include/linux/memory_hotplug.h:11:
+extern int remove_memory(u64 start, u64 size, unsigned long attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1563: FILE: include/linux/memory_hotplug.h:12:
+extern int online_pages(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1563: FILE: include/linux/memory_hotplug.h:12:
+extern int online_pages(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1563: FILE: include/linux/memory_hotplug.h:12:
+extern int online_pages(unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1567: FILE: include/linux/memory_hotplug.h:16:
+extern int __add_pages(struct zone *zone, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: include/linux/memory_hotplug.h:17:
+extern int __add_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages, unsigned long attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1569: FILE: include/linux/memory_hotplug.h:18:
+extern int __remove_pages(struct zone *zone, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: include/linux/memory_hotplug.h:19:
+extern int __remove_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages, unsigned long attr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1574: FILE: include/linux/memory_hotplug.h:23:
+	printk(KERN_WARNING "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", __func__);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1576: FILE: include/linux/memory_hotplug.h:25:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1580: FILE: include/linux/memory_hotplug.h:29:
+static inline int __add_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages, unsigned long attr)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1582: FILE: include/linux/memory_hotplug.h:31:
+	return mhp_notimplemented(__FUNCTION__);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1584: FILE: include/linux/memory_hotplug.h:33:
+}
+static inline int __remove_pages(struct zone *zone, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: include/linux/memory_hotplug.h:34:
+static inline int __remove_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages, unsigned long attr)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1587: FILE: include/linux/memory_hotplug.h:36:
+	return mhp_notimplemented(__FUNCTION__);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1638: FILE: include/linux/mmzone.h:492:
+static inline int __section_nr(struct mem_section* ms)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1649: FILE: mm/Kconfig:1:
+config MEMORY_HOTPLUG
+	bool "Allow for memory hot-add"
+	depends on SPARSEMEM && HOTPLUG
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1660: FILE: mm/Kconfig:23:
+config SIMULATED_MEM_HOTPLUG
+	bool "Simulate memory hotplug on non-hotplug hardware"
+	depends on X86 && !X86_64
 
+++ /mm/Makefile	2005-02-17 15:51:08.000000000 -0800
+++ /mm/Makefile	2005-02-17 15:51:08.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1686: FILE: mm/memory_hotplug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1687: FILE: mm/memory_hotplug.c:2:
+ *  linux/mm/memory_hotplug.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1734: FILE: mm/memory_hotplug.c:49:
+void zonetable_add(struct zone *zone, int nid, int zid, unsigned long pfn, unsigned long size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1745: FILE: mm/memory_hotplug.c:60:
+	printk(KERN_DEBUG "%s(%p, %08lx, %08lx)\n", __func__, zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1746: FILE: mm/memory_hotplug.c:61:
+	printk(KERN_DEBUG "%s(%p, %08lx, %08lx)\n", __func__, zone,
+		phys_start_pfn, attr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1756: FILE: mm/memory_hotplug.c:71:
+	printk(KERN_DEBUG "%s() phys_start_pfn: %08lx\n", __func__, phys_start_pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1783: FILE: mm/memory_hotplug.c:98:
+		printk(KERN_WARNING "%s(): error onlining section: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1784: FILE: mm/memory_hotplug.c:99:
+		printk(KERN_WARNING "%s(): error onlining section: %d\n",
+			__func__, ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1799: FILE: mm/memory_hotplug.c:114:
+		struct mem_section *ms = __pfn_to_section(phys_start_pfn);
+		register_new_memory(ms);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1812: FILE: mm/memory_hotplug.c:127:
+int __add_pages(struct zone *zone, unsigned long phys_start_pfn,
+		 unsigned long nr_pages, unsigned long attr)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1817: FILE: mm/memory_hotplug.c:132:
+	printk(KERN_DEBUG "%s(%p, %08lx, %ld, %08lx)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1818: FILE: mm/memory_hotplug.c:133:
+	printk(KERN_DEBUG "%s(%p, %08lx, %ld, %08lx)\n", __func__,
+			zone, phys_start_pfn, nr_pages, attr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1820: FILE: mm/memory_hotplug.c:135:
+	for (i = 0; i < nr_pages; i += PAGES_PER_SECTION) {
+		 printk(KERN_DEBUG "\tfor: i: %ld\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1821: FILE: mm/memory_hotplug.c:136:
+		 printk(KERN_DEBUG "\tfor: i: %ld\n", i);

WARNING:TABSTOP: Statements should start on a tabstop
#1824: FILE: mm/memory_hotplug.c:139:
+		 if (err)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1839: FILE: mm/memory_hotplug.c:154:
+	extern struct e820map bios_e820;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1840: FILE: mm/memory_hotplug.c:155:
+	extern struct e820map bios_e820;
+	extern int page_is_ram_e820(unsigned long, struct e820map*);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1840: FILE: mm/memory_hotplug.c:155:
+	extern int page_is_ram_e820(unsigned long, struct e820map*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1840: FILE: mm/memory_hotplug.c:155:
+	extern int page_is_ram_e820(unsigned long, struct e820map*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct e820map*' should also have an identifier name
#1840: FILE: mm/memory_hotplug.c:155:
+	extern int page_is_ram_e820(unsigned long, struct e820map*);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1855: FILE: mm/memory_hotplug.c:170:
+	printk(KERN_DEBUG "%s: onlining 0x%lx pages starting from pfn: 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1856: FILE: mm/memory_hotplug.c:171:
+	printk(KERN_DEBUG "%s: onlining 0x%lx pages starting from pfn: 0x%lx\n",
+		__func__, nr_pages, pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1874: FILE: mm/memory_hotplug.c:189:
+int __remove_pages(struct zone *zone, unsigned long start_pfn,
+		unsigned long nr_pages, unsigned long attr)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1876: FILE: mm/memory_hotplug.c:191:
+	int order = get_order(nr_pages<<PAGE_SHIFT);
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1881: FILE: mm/memory_hotplug.c:196:
+	if (nr_pages != 1<<order)
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1886: FILE: mm/memory_hotplug.c:201:
+		printk(KERN_WARNING "%s(): failed to capture page range: %ld -> %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: mm/memory_hotplug.c:202:
+		printk(KERN_WARNING "%s(): failed to capture page range: %ld -> %ld\n",
+				__func__, start_pfn, start_pfn + nr_pages);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1915: FILE: mm/page_alloc.c:1299:
+int __devinit build_zonelists_node(pg_data_t *pgdat, struct zonelist *zonelist, int j, int k)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1952: FILE: mm/page_alloc.c:1395:
+void __devinit build_zonelists(pg_data_t *pgdat)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1961: FILE: mm/page_alloc.c:1442:
+void __devinit build_zonelists(pg_data_t *pgdat)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1970: FILE: mm/page_alloc.c:1562:
+void __devinit memmap_init_zone(unsigned long size, int nid, unsigned long zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1971: FILE: mm/page_alloc.c:1563:
+void __devinit memmap_init_zone(unsigned long size, int nid, unsigned long zone,
 		unsigned long start_pfn)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2037: FILE: mm/page_alloc.c:1808:
+			__pa((void*)PAGE_OFFSET) >> PAGE_SHIFT, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206221.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 98 warnings, 117 checks, 1924 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206221.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
