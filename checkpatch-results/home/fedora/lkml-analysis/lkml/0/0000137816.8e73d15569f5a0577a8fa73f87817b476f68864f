ERROR:SPACING: space required before the open parenthesis '('
#1104: FILE: net/compat.c:630:
+	if(!err) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1123: FILE: net/compat.c:649:
+        union {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: net/compat.c:649:
+        union {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1124: FILE: net/compat.c:650:
+                char    ifrn_name[IFNAMSIZ];            /* if name, e.g. "en0" */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: net/compat.c:650:
+                char    ifrn_name[IFNAMSIZ];            /* if name, e.g. "en0" */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1125: FILE: net/compat.c:651:
+        } ifr_ifrn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: net/compat.c:651:
+        } ifr_ifrn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1126: FILE: net/compat.c:652:
+        union {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: net/compat.c:652:
+        union {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1127: FILE: net/compat.c:653:
+                struct  sockaddr ifru_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: net/compat.c:653:
+                struct  sockaddr ifru_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1128: FILE: net/compat.c:654:
+                struct  sockaddr ifru_dstaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: net/compat.c:654:
+                struct  sockaddr ifru_dstaddr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1129: FILE: net/compat.c:655:
+                struct  sockaddr ifru_broadaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: net/compat.c:655:
+                struct  sockaddr ifru_broadaddr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1130: FILE: net/compat.c:656:
+                struct  sockaddr ifru_netmask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: net/compat.c:656:
+                struct  sockaddr ifru_netmask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1131: FILE: net/compat.c:657:
+                struct  sockaddr ifru_hwaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: net/compat.c:657:
+                struct  sockaddr ifru_hwaddr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1132: FILE: net/compat.c:658:
+                short   ifru_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: net/compat.c:658:
+                short   ifru_flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1133: FILE: net/compat.c:659:
+                compat_int_t     ifru_ivalue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: net/compat.c:659:
+                compat_int_t     ifru_ivalue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: net/compat.c:660:
+                compat_int_t     ifru_mtu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: net/compat.c:660:
+                compat_int_t     ifru_mtu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: net/compat.c:661:
+                struct  ifmap32 ifru_map;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: net/compat.c:661:
+                struct  ifmap32 ifru_map;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1136: FILE: net/compat.c:662:
+                char    ifru_slave[IFNAMSIZ];   /* Just fits the size */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: net/compat.c:662:
+                char    ifru_slave[IFNAMSIZ];   /* Just fits the size */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: net/compat.c:664:
+                compat_caddr_t ifru_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: net/compat.c:664:
+                compat_caddr_t ifru_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: net/compat.c:666:
+        } ifr_ifru;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: net/compat.c:666:
+        } ifr_ifru;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1144: FILE: net/compat.c:670:
+        compat_int_t^Iifc_len;                        /* size of buffer       */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: net/compat.c:670:
+        compat_int_t^Iifc_len;                        /* size of buffer       */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1145: FILE: net/compat.c:671:
+        compat_caddr_t  ifcbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: net/compat.c:671:
+        compat_caddr_t  ifcbuf;$

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1161: FILE: net/compat.c:687:
+	strlcpy(ifr32.ifr_name, dev->name, sizeof(ifr32.ifr_name));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1165: FILE: net/compat.c:691:
+	return (err ? -EFAULT : 0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1187: FILE: net/compat.c:713:
+		size_t len =((ifc32.ifc_len / sizeof (struct ifreq32)) + 1) *

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1187: FILE: net/compat.c:713:
+		size_t len =((ifc32.ifc_len / sizeof (struct ifreq32)) + 1) *
 		           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1188: FILE: net/compat.c:714:
+			sizeof (struct ifreq);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1191: FILE: net/compat.c:717:
+		ifr = ifc.ifc_req = (void __user *)(uifc + 1);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1193: FILE: net/compat.c:719:
+		for (i = 0; i < ifc32.ifc_len; i += sizeof (struct ifreq32)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1213: FILE: net/compat.c:739:
+	     i += sizeof (struct ifreq32), j += sizeof (struct ifreq)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1213: FILE: net/compat.c:739:
+	     i += sizeof (struct ifreq32), j += sizeof (struct ifreq)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1214: FILE: net/compat.c:740:
+		if (copy_in_user(ifr32, ifr, sizeof (struct ifreq32)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1231: FILE: net/compat.c:757:
+			ifc32.ifc_len = i - sizeof (struct ifreq32);

CHECK:SPACING: No space is necessary after a cast
#1259: FILE: net/compat.c:785:
+	return sock_ioctl(file, cmd, (unsigned long) ifr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1281: FILE: net/compat.c:807:
+		set_fs (KERNEL_DS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1283: FILE: net/compat.c:809:
+		set_fs (old_fs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around u_ifreq32->ifr_ifrn.ifrn_name[0]
#1313: FILE: net/compat.c:839:
+	if (copy_from_user(&tmp_buf[0], &(u_ifreq32->ifr_ifrn.ifrn_name[0]),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: net/compat.c:857:
+	return sock_ioctl(file, cmd, (unsigned long) u_ifreq64);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1362: FILE: net/compat.c:888:
+	set_fs (KERNEL_DS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1364: FILE: net/compat.c:890:
+	set_fs (old_fs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1403: FILE: net/compat.c:929:
+        u32   ^I^Irt_pad1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1403: FILE: net/compat.c:929:
+        u32   ^I^Irt_pad1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1403: FILE: net/compat.c:929:
+        u32   ^I^Irt_pad1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1404: FILE: net/compat.c:930:
+        struct sockaddr rt_dst;         /* target address               */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1404: FILE: net/compat.c:930:
+        struct sockaddr rt_dst;         /* target address               */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: net/compat.c:931:
+        struct sockaddr rt_gateway;     /* gateway addr (RTF_GATEWAY)   */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: net/compat.c:931:
+        struct sockaddr rt_gateway;     /* gateway addr (RTF_GATEWAY)   */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1406: FILE: net/compat.c:932:
+        struct sockaddr rt_genmask;     /* target network mask (IP)     */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1406: FILE: net/compat.c:932:
+        struct sockaddr rt_genmask;     /* target network mask (IP)     */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1407: FILE: net/compat.c:933:
+        unsigned short  rt_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: net/compat.c:933:
+        unsigned short  rt_flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1408: FILE: net/compat.c:934:
+        short           rt_pad2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1408: FILE: net/compat.c:934:
+        short           rt_pad2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1409: FILE: net/compat.c:935:
+        u32   ^I^Irt_pad3;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1409: FILE: net/compat.c:935:
+        u32   ^I^Irt_pad3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1409: FILE: net/compat.c:935:
+        u32   ^I^Irt_pad3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1410: FILE: net/compat.c:936:
+        unsigned char   rt_tos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1410: FILE: net/compat.c:936:
+        unsigned char   rt_tos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1411: FILE: net/compat.c:937:
+        unsigned char   rt_class;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: net/compat.c:937:
+        unsigned char   rt_class;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1412: FILE: net/compat.c:938:
+        short           rt_pad4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: net/compat.c:938:
+        short           rt_pad4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1413: FILE: net/compat.c:939:
+        short           rt_metric;      /* +1 for binary compatibility! */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1413: FILE: net/compat.c:939:
+        short           rt_metric;      /* +1 for binary compatibility! */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1414: FILE: net/compat.c:940:
+        /* char * */ u32 rt_dev;        /* forcing the device at add    */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1415: FILE: net/compat.c:941:
+        u32   ^I^Irt_mtu;         /* per route MTU/Window         */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1415: FILE: net/compat.c:941:
+        u32   ^I^Irt_mtu;         /* per route MTU/Window         */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: net/compat.c:941:
+        u32   ^I^Irt_mtu;         /* per route MTU/Window         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1416: FILE: net/compat.c:942:
+        u32   ^I^Irt_window;      /* Window clamping              */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1416: FILE: net/compat.c:942:
+        u32   ^I^Irt_window;      /* Window clamping              */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1416: FILE: net/compat.c:942:
+        u32   ^I^Irt_window;      /* Window clamping              */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1417: FILE: net/compat.c:943:
+        unsigned short  rt_irtt;        /* Initial RTT                  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1417: FILE: net/compat.c:943:
+        unsigned short  rt_irtt;        /* Initial RTT                  */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1448: FILE: net/compat.c:974:
+		struct in6_rtmsg32 __user *ur6 = compat_ptr(arg);
+		ret = copy_from_user (&r6.rtmsg_dst, &(ur6->rtmsg_dst),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1448: FILE: net/compat.c:974:
+		ret = copy_from_user (&r6.rtmsg_dst, &(ur6->rtmsg_dst),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_dst
#1448: FILE: net/compat.c:974:
+		ret = copy_from_user (&r6.rtmsg_dst, &(ur6->rtmsg_dst),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: net/compat.c:975:
+		ret = copy_from_user (&r6.rtmsg_dst, &(ur6->rtmsg_dst),
+			3 * sizeof(struct in6_addr));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1450: FILE: net/compat.c:976:
+		ret |= __get_user (r6.rtmsg_type, &(ur6->rtmsg_type));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_type
#1450: FILE: net/compat.c:976:
+		ret |= __get_user (r6.rtmsg_type, &(ur6->rtmsg_type));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: net/compat.c:977:
+		ret |= __get_user (r6.rtmsg_dst_len, &(ur6->rtmsg_dst_len));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_dst_len
#1451: FILE: net/compat.c:977:
+		ret |= __get_user (r6.rtmsg_dst_len, &(ur6->rtmsg_dst_len));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1452: FILE: net/compat.c:978:
+		ret |= __get_user (r6.rtmsg_src_len, &(ur6->rtmsg_src_len));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_src_len
#1452: FILE: net/compat.c:978:
+		ret |= __get_user (r6.rtmsg_src_len, &(ur6->rtmsg_src_len));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1453: FILE: net/compat.c:979:
+		ret |= __get_user (r6.rtmsg_metric, &(ur6->rtmsg_metric));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_metric
#1453: FILE: net/compat.c:979:
+		ret |= __get_user (r6.rtmsg_metric, &(ur6->rtmsg_metric));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1454: FILE: net/compat.c:980:
+		ret |= __get_user (r6.rtmsg_info, &(ur6->rtmsg_info));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_info
#1454: FILE: net/compat.c:980:
+		ret |= __get_user (r6.rtmsg_info, &(ur6->rtmsg_info));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1455: FILE: net/compat.c:981:
+		ret |= __get_user (r6.rtmsg_flags, &(ur6->rtmsg_flags));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_flags
#1455: FILE: net/compat.c:981:
+		ret |= __get_user (r6.rtmsg_flags, &(ur6->rtmsg_flags));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1456: FILE: net/compat.c:982:
+		ret |= __get_user (r6.rtmsg_ifindex, &(ur6->rtmsg_ifindex));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur6->rtmsg_ifindex
#1456: FILE: net/compat.c:982:
+		ret |= __get_user (r6.rtmsg_ifindex, &(ur6->rtmsg_ifindex));

CHECK:SPACING: No space is necessary after a cast
#1458: FILE: net/compat.c:984:
+		r = (void *) &r6;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1461: FILE: net/compat.c:987:
+		struct rtentry32 __user *ur4 = compat_ptr(arg);
+		ret = copy_from_user (&r4.rt_dst, &(ur4->rt_dst),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1461: FILE: net/compat.c:987:
+		ret = copy_from_user (&r4.rt_dst, &(ur4->rt_dst),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_dst
#1461: FILE: net/compat.c:987:
+		ret = copy_from_user (&r4.rt_dst, &(ur4->rt_dst),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: net/compat.c:988:
+		ret = copy_from_user (&r4.rt_dst, &(ur4->rt_dst),
+					3 * sizeof(struct sockaddr));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1463: FILE: net/compat.c:989:
+		ret |= __get_user (r4.rt_flags, &(ur4->rt_flags));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_flags
#1463: FILE: net/compat.c:989:
+		ret |= __get_user (r4.rt_flags, &(ur4->rt_flags));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1464: FILE: net/compat.c:990:
+		ret |= __get_user (r4.rt_metric, &(ur4->rt_metric));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_metric
#1464: FILE: net/compat.c:990:
+		ret |= __get_user (r4.rt_metric, &(ur4->rt_metric));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1465: FILE: net/compat.c:991:
+		ret |= __get_user (r4.rt_mtu, &(ur4->rt_mtu));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_mtu
#1465: FILE: net/compat.c:991:
+		ret |= __get_user (r4.rt_mtu, &(ur4->rt_mtu));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1466: FILE: net/compat.c:992:
+		ret |= __get_user (r4.rt_window, &(ur4->rt_window));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_window
#1466: FILE: net/compat.c:992:
+		ret |= __get_user (r4.rt_window, &(ur4->rt_window));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1467: FILE: net/compat.c:993:
+		ret |= __get_user (r4.rt_irtt, &(ur4->rt_irtt));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_irtt
#1467: FILE: net/compat.c:993:
+		ret |= __get_user (r4.rt_irtt, &(ur4->rt_irtt));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1468: FILE: net/compat.c:994:
+		ret |= __get_user (rtdev, &(ur4->rt_dev));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ur4->rt_dev
#1468: FILE: net/compat.c:994:
+		ret |= __get_user (rtdev, &(ur4->rt_dev));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1469: FILE: net/compat.c:995:
+		if (rtdev) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1470: FILE: net/compat.c:996:
+			ret |= copy_from_user (devname, compat_ptr(rtdev), 15);

CHECK:BRACES: Unbalanced braces around else statement
#1472: FILE: net/compat.c:998:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1475: FILE: net/compat.c:1001:
+		r = (void *) &r4;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1483: FILE: net/compat.c:1009:
+	set_fs (KERNEL_DS);

CHECK:SPACING: No space is necessary after a cast
#1484: FILE: net/compat.c:1010:
+	ret = sock_ioctl(file, cmd, (unsigned long) r);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1485: FILE: net/compat.c:1011:
+	set_fs (old_fs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1495: FILE: net/compat.c:1021:
+        compat_int_t^Inumber;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1495: FILE: net/compat.c:1021:
+        compat_int_t^Inumber;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1496: FILE: net/compat.c:1022:
+        compat_int_t^Ilength;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1496: FILE: net/compat.c:1022:
+        compat_int_t^Ilength;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1497: FILE: net/compat.c:1023:
+        compat_caddr_t^Iarg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: net/compat.c:1023:
+        compat_caddr_t^Iarg;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1505: FILE: net/compat.c:1031:
+#define ATM_GETLINKRATE32 _IOW('a', ATMIOC_ITF+1, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1506: FILE: net/compat.c:1032:
+#define ATM_GETNAMES32    _IOW('a', ATMIOC_ITF+3, struct atm_iobuf32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1507: FILE: net/compat.c:1033:
+#define ATM_GETTYPE32     _IOW('a', ATMIOC_ITF+4, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1508: FILE: net/compat.c:1034:
+#define ATM_GETESI32	  _IOW('a', ATMIOC_ITF+5, struct atmif_sioc32)
                     	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1509: FILE: net/compat.c:1035:
+#define ATM_GETADDR32	  _IOW('a', ATMIOC_ITF+6, struct atmif_sioc32)
                      	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1510: FILE: net/compat.c:1036:
+#define ATM_RSTADDR32	  _IOW('a', ATMIOC_ITF+7, struct atmif_sioc32)
                      	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1511: FILE: net/compat.c:1037:
+#define ATM_ADDADDR32	  _IOW('a', ATMIOC_ITF+8, struct atmif_sioc32)
                      	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1512: FILE: net/compat.c:1038:
+#define ATM_DELADDR32	  _IOW('a', ATMIOC_ITF+9, struct atmif_sioc32)
                      	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1513: FILE: net/compat.c:1039:
+#define ATM_GETCIRANGE32  _IOW('a', ATMIOC_ITF+10, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1514: FILE: net/compat.c:1040:
+#define ATM_SETCIRANGE32  _IOW('a', ATMIOC_ITF+11, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1515: FILE: net/compat.c:1041:
+#define ATM_SETESI32      _IOW('a', ATMIOC_ITF+12, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1516: FILE: net/compat.c:1042:
+#define ATM_SETESIF32     _IOW('a', ATMIOC_ITF+13, struct atmif_sioc32)
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1517: FILE: net/compat.c:1043:
+#define ATM_GETSTAT32     _IOW('a', ATMIOC_SARCOM+0, struct atmif_sioc32)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1518: FILE: net/compat.c:1044:
+#define ATM_GETSTATZ32    _IOW('a', ATMIOC_SARCOM+1, struct atmif_sioc32)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1519: FILE: net/compat.c:1045:
+#define ATM_GETLOOP32	  _IOW('a', ATMIOC_SARCOM+2, struct atmif_sioc32)
                      	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1520: FILE: net/compat.c:1046:
+#define ATM_SETLOOP32	  _IOW('a', ATMIOC_SARCOM+3, struct atmif_sioc32)
                      	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1521: FILE: net/compat.c:1047:
+#define ATM_QUERYLOOP32	  _IOW('a', ATMIOC_SARCOM+4, struct atmif_sioc32)
                        	                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1524: FILE: net/compat.c:1050:
+        unsigned int cmd32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1524: FILE: net/compat.c:1050:
+        unsigned int cmd32;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1525: FILE: net/compat.c:1051:
+        unsigned int cmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1525: FILE: net/compat.c:1051:
+        unsigned int cmd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1527: FILE: net/compat.c:1053:
+        { ATM_GETLINKRATE32, ATM_GETLINKRATE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1527: FILE: net/compat.c:1053:
+        { ATM_GETLINKRATE32, ATM_GETLINKRATE },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1529: FILE: net/compat.c:1055:
+        { ATM_GETTYPE32,     ATM_GETTYPE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1529: FILE: net/compat.c:1055:
+        { ATM_GETTYPE32,     ATM_GETTYPE },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1530: FILE: net/compat.c:1056:
+        { ATM_GETESI32,      ATM_GETESI },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1530: FILE: net/compat.c:1056:
+        { ATM_GETESI32,      ATM_GETESI },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1531: FILE: net/compat.c:1057:
+        { ATM_GETADDR32,     ATM_GETADDR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1531: FILE: net/compat.c:1057:
+        { ATM_GETADDR32,     ATM_GETADDR },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1532: FILE: net/compat.c:1058:
+        { ATM_RSTADDR32,     ATM_RSTADDR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: net/compat.c:1058:
+        { ATM_RSTADDR32,     ATM_RSTADDR },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1533: FILE: net/compat.c:1059:
+        { ATM_ADDADDR32,     ATM_ADDADDR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: net/compat.c:1059:
+        { ATM_ADDADDR32,     ATM_ADDADDR },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1534: FILE: net/compat.c:1060:
+        { ATM_DELADDR32,     ATM_DELADDR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: net/compat.c:1060:
+        { ATM_DELADDR32,     ATM_DELADDR },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1535: FILE: net/compat.c:1061:
+        { ATM_GETCIRANGE32,  ATM_GETCIRANGE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1535: FILE: net/compat.c:1061:
+        { ATM_GETCIRANGE32,  ATM_GETCIRANGE },$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(atm_ioctl_map)
#1546: FILE: net/compat.c:1072:
+#define NR_ATM_IOCTL (sizeof(atm_ioctl_map)/sizeof(atm_ioctl_map[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1546: FILE: net/compat.c:1072:
+#define NR_ATM_IOCTL (sizeof(atm_ioctl_map)/sizeof(atm_ioctl_map[0]))
                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1548: FILE: net/compat.c:1074:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1581: FILE: net/compat.c:1107:
+        struct atmif_sioc   __user *sioc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1581: FILE: net/compat.c:1107:
+        struct atmif_sioc   __user *sioc;$

CHECK:SPACING: No space is necessary after a cast
#1597: FILE: net/compat.c:1123:
+	err = sock_ioctl(file, cmd, (unsigned long) sioc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1609: FILE: net/compat.c:1135:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1609: FILE: net/compat.c:1135:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1610: FILE: net/compat.c:1136:
+        unsigned int cmd = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1610: FILE: net/compat.c:1136:
+        unsigned int cmd = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1631: FILE: net/compat.c:1157:
+^I        return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1633: FILE: net/compat.c:1159:
+        switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1633: FILE: net/compat.c:1159:
+        switch (cmd) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1638: FILE: net/compat.c:1164:
+        case ATM_GETTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1638: FILE: net/compat.c:1164:
+        case ATM_GETTYPE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1639: FILE: net/compat.c:1165:
+        case ATM_GETESI:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1639: FILE: net/compat.c:1165:
+        case ATM_GETESI:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1640: FILE: net/compat.c:1166:
+        case ATM_GETADDR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1640: FILE: net/compat.c:1166:
+        case ATM_GETADDR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1641: FILE: net/compat.c:1167:
+        case ATM_RSTADDR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: net/compat.c:1167:
+        case ATM_RSTADDR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1642: FILE: net/compat.c:1168:
+        case ATM_ADDADDR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: net/compat.c:1168:
+        case ATM_ADDADDR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1643: FILE: net/compat.c:1169:
+        case ATM_DELADDR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: net/compat.c:1169:
+        case ATM_DELADDR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1644: FILE: net/compat.c:1170:
+        case ATM_GETCIRANGE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: net/compat.c:1170:
+        case ATM_GETCIRANGE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1653: FILE: net/compat.c:1179:
+                return do_atmif_sioc(file, cmd, arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1653: FILE: net/compat.c:1179:
+                return do_atmif_sioc(file, cmd, arg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1654: FILE: net/compat.c:1180:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1654: FILE: net/compat.c:1180:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1656: FILE: net/compat.c:1182:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1656: FILE: net/compat.c:1182:
+        return -EINVAL;$

CHECK:SPACING: No space is necessary after a cast
#1690: FILE: net/compat.c:1216:
+	return sock_ioctl(file, cmd, (unsigned long) u_fprog64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1698: FILE: net/compat.c:1224:
+};
+#define PPPIOCSCOMPRESS32	_IOW('t', 77, struct ppp_option_data32)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1704: FILE: net/compat.c:1230:
+};
+#define PPPIOCGIDLE32		_IOR('t', 63, struct ppp_idle32)

CHECK:SPACING: No space is necessary after a cast
#1716: FILE: net/compat.c:1242:
+	err = sock_ioctl(file, PPPIOCGIDLE, (unsigned long) idle);

CHECK:SPACING: No space is necessary after a cast
#1749: FILE: net/compat.c:1275:
+	return sock_ioctl(file, PPPIOCSCOMPRESS, (unsigned long) odata);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1768: FILE: net/compat.c:1294:
+			static int count;
+			if (++count <= 20)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1769: FILE: net/compat.c:1295:
+				printk("ppp_ioctl: Unknown cmd(%08x) arg(%08x)\n",

ERROR:SPACING: space required before the open parenthesis '('
#1771: FILE: net/compat.c:1297:
+		} while(0);

CHECK:SPACING: No space is necessary after a cast
#1795: FILE: net/compat.c:1321:
+	iwp_u = (struct compat_iw_point __user *) &iwr_u->u.data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iwr"
#1797: FILE: net/compat.c:1323:
+	if (iwr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1820: FILE: net/compat.c:1346:
+	return sock_ioctl(file, cmd, (unsigned long) iwr);

WARNING:TYPO_SPELLING: 'compatiable' may be misspelled - perhaps 'compatible'?
#1825: FILE: net/compat.c:1351:
+ * use compatiable ioctls
        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#1831: FILE: net/compat.c:1357:
+	if (get_user(tmp, (u32 __user *) arg))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1844: FILE: net/compat.c:1370:
+#define HANDLE_IOCTL(type, handler) \
+	case type: return handler(file, cmd, arg);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1844: FILE: net/compat.c:1370:
+#define HANDLE_IOCTL(type, handler) \
+	case type: return handler(file, cmd, arg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1844: FILE: net/compat.c:1370:
+#define HANDLE_IOCTL(type, handler) \
+	case type: return handler(file, cmd, arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1846: FILE: net/compat.c:1372:
+#define COMPATIBLE_IOCTL(type) \
+	case type: return sock_ioctl(file, cmd, arg);

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1846: FILE: net/compat.c:1372:
+#define COMPATIBLE_IOCTL(type) \
+	case type: return sock_ioctl(file, cmd, arg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1846: FILE: net/compat.c:1372:
+#define COMPATIBLE_IOCTL(type) \
+	case type: return sock_ioctl(file, cmd, arg);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1848: FILE: net/compat.c:1374:
+#define INVAL_IOCTL(type) \
+	case type: return -EINVAL;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1848: FILE: net/compat.c:1374:
+#define INVAL_IOCTL(type) \
+	case type: return -EINVAL;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1848: FILE: net/compat.c:1374:
+#define INVAL_IOCTL(type) \
+	case type: return -EINVAL;

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1899: FILE: net/compat.c:1425:
+/* Note SIOCRTMSG is no longer, so this is safe and * the user would have seen just an -EINVAL anyways. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2069: FILE: net/socket.c:838:
+long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2120: FILE: fs/compat.c:399:
+		compat_ioctl_error(filp, fd, cmd, arg);
 		                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2134: FILE: include/linux/socket.h:303:
+extern long sock_ioctl(struct file *file, unsigned int cmd, unsigned long arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2135: FILE: include/linux/socket.h:304:
+extern long compat_sock_ioctl(struct file *file, unsigned int cmd, unsigned long arg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2169: FILE: include/linux/net.h:146:
+	int		(*compat_ioctl)(struct socket *sock, unsigned int cmd,
+				      unsigned long arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137816.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 108 warnings, 58 checks, 2073 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137816.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
