WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#169: FILE: sound/ppc/pmac.c:738:
+static int snd_pmac_beep_event(struct input_dev *dev, unsigned int type, unsigned int code, int value)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!beep->buf"
#184: FILE: sound/ppc/pmac.c:753:
+	if (beep->buf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#189: FILE: sound/ppc/pmac.c:758:
+	if (chip->playback.running || chip->capture.running) {
+		return -1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#228: FILE: sound/ppc/pmac.c:797:
+			p[0] = p[1] = beep_wform[j >> 8] * beep->volume;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: sound/ppc/pmac.c:841:
+	pmac_t *chip = snd_kcontrol_chip(kcontrol);
+	ucontrol->value.integer.value[0] = chip->beep.volume;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: sound/ppc/pmac.c:849:
+	int oval;
+	oval = chip->beep.volume;

ERROR:SPACING: space required after that ',' (ctx:VxB)
#296: FILE: sound/ppc/pmac.c:865:
+	pmac_t *chip = snd_magic_cast(pmac_t, _snd_kcontrol_chip(control),);
 	                                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: sound/ppc/pmac.c:866:
+	pmac_t *chip = snd_magic_cast(pmac_t, _snd_kcontrol_chip(control),);
+	kfree(chip->beep.buf);

CHECK:SPACING: No space is necessary after a cast
#308: FILE: sound/ppc/pmac.c:877:
+	beep->buf = (short *) kmalloc(BEEP_BUFLEN * 4, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#308: FILE: sound/ppc/pmac.c:877:
+	beep->buf = (short *) kmalloc(BEEP_BUFLEN * 4, GFP_KERNEL);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#309: FILE: sound/ppc/pmac.c:878:
+	if (! beep->buf) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#309: FILE: sound/ppc/pmac.c:878:
+	if (! beep->buf) {
+		return -ENOMEM;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#315: FILE: sound/ppc/pmac.c:884:
+	if (beep->control == NULL) {
+		return -ENOMEM;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!beep->control"
#315: FILE: sound/ppc/pmac.c:884:
+	if (beep->control == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#319: FILE: sound/ppc/pmac.c:888:
+	if ((err = snd_ctl_add(chip->card, beep->control)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#319: FILE: sound/ppc/pmac.c:888:
+	if ((err = snd_ctl_add(chip->card, beep->control)) < 0) {
+		return err;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: sound/ppc/pmac.c:904:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#383: FILE: sound/ppc/pmac.h:106:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 5 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
