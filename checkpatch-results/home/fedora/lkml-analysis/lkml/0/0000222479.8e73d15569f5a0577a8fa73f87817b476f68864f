WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/char/Kconfig:992:
+config TCG_TPM
+	tristate "TPM Hardware Support"
+	depends on EXPERIMENTAL
+	---help---
+	  If you have a TPM security chip in your system, which
+	  implements the Trusted Computing Group's specification,
+	  say Yes and it will be accessible from within Linux. To 
+	  compile this driver as a module, choose M here; the module 
+	  will be called tpm. For more information see 
+	  www.trustedcomputinggroup.org. A implementation of the 
+	  Trusted Software Stack (TSS), the userspace enablement piece 
+	  of the specification, can be obtained at 
+	  http://sourceforge.net/projects/trousers
+	  If unsure, say N.
+
+config TCG_NSC
+	tristate "National Semiconductor TPM Interface"
+	depends on TCG_TPM
+
+config TCG_ATMEL
+	tristate "Atmel TPM Interface"
+	depends on TCG_TPM
+
 endmenu
 

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: drivers/char/Kconfig:998:
+^I  say Yes and it will be accessible from within Linux. To $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: drivers/char/Kconfig:999:
+^I  compile this driver as a module, choose M here; the module $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: drivers/char/Kconfig:1000:
+^I  will be called tpm. For more information see $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/char/Kconfig:1001:
+^I  www.trustedcomputinggroup.org. A implementation of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: drivers/char/Kconfig:1002:
+^I  Trusted Software Stack (TSS), the userspace enablement piece $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: drivers/char/Kconfig:1003:
+^I  of the specification, can be obtained at $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: drivers/char/tpm_atmel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: drivers/char/tpm_atmel.c:13:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: drivers/char/tpm_atmel.c:19:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#131: FILE: drivers/char/tpm_atmel.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: drivers/char/tpm_atmel.c:37:
+static int tpm_atml_recv(struct tpm_chip *chip, u8 * buf, size_t count)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/char/tpm_atmel.c:59:
+	native_size = (__force __be32 *) (hdr + 2);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: drivers/char/tpm_atmel.c:86:
+static int tpm_atml_send(struct tpm_chip *chip, u8 * buf, size_t count)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_atml_send', this function's name, in a string
#185: FILE: drivers/char/tpm_atmel.c:90:
+	dev_dbg(&chip->pci_dev->dev, "tpm_atml_send: ");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#200: FILE: drivers/char/tpm_atmel.c:105:
+static struct file_operations atmel_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#213: FILE: drivers/char/tpm_atmel.c:118:
+static int __devinit tpm_atml_init(struct pci_dev *pci_dev,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#229: FILE: drivers/char/tpm_atmel.c:134:
+	if (rdx(4) != 'A' || rdx(5) != 'T' || rdx(6) != 'M'
+	    || rdx(7) != 'L') {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: drivers/char/tpm_atmel.c:139:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: drivers/char/tpm_atmel.c:141:
+	if ((version[0] = rdx(0x00)) != 0xFF) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#246: FILE: drivers/char/tpm_atmel.c:151:
+	if ((rc =

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#287: FILE: drivers/char/tpm.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: drivers/char/tpm.c:13:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/char/tpm.c:19:
+ * $

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/char/tpm.c:51:
+	struct tpm_chip *chip = (struct tpm_chip *) ptr;

CHECK:SPACING: No space is necessary after a cast
#349: FILE: drivers/char/tpm.c:63:
+	int *exp = (int *) ptr;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#353: FILE: drivers/char/tpm.c:67:
+EXPORT_SYMBOL(tpm_time_expired);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#361: FILE: drivers/char/tpm.c:75:
+EXPORT_SYMBOL(rdx);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#369: FILE: drivers/char/tpm.c:83:
+EXPORT_SYMBOL(wrx);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#440: FILE: drivers/char/tpm.c:154:
+EXPORT_SYMBOL(lpc_bus_init);

CHECK:SPACING: No space is necessary after a cast
#452: FILE: drivers/char/tpm.c:166:
+	native_size = (__force __be32 *) (buf + 2);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#459: FILE: drivers/char/tpm.c:173:
+			"invalid count value %x %x \n", count, bufsiz);

CHECK:SPACING: No space is necessary after a cast
#463: FILE: drivers/char/tpm.c:177:
+	if ((len = chip->ops->send(chip, (u8 *) buf, count)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#463: FILE: drivers/char/tpm.c:177:
+	if ((len = chip->ops->send(chip, (u8 *) buf, count)) < 0) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#465: FILE: drivers/char/tpm.c:179:
+			"tpm_transmit: tpm_send: error %d\n", len);

CHECK:SPACING: No space is necessary after a cast
#474: FILE: drivers/char/tpm.c:188:
+	chip->tpm_timer.data = (unsigned long) &chip->tpm_time_expired;

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: drivers/char/tpm.c:194:
+		u8 status = inb(chip->base + 1);
+		if ((status & chip->ops->req_complete_mask) ==

WARNING:MEMORY_BARRIER: memory barrier without comment
#488: FILE: drivers/char/tpm.c:202:
+		rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: drivers/char/tpm.c:205:
+
+

CHECK:SPACING: No space is necessary after a cast
#497: FILE: drivers/char/tpm.c:211:
+	len = chip->ops->recv(chip, (u8 *) buf, bufsiz);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#500: FILE: drivers/char/tpm.c:214:
+			"tpm_transmit: tpm_recv: error %d\n", len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#520: FILE: drivers/char/tpm.c:234:
+	if (chip == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#537: FILE: drivers/char/tpm.c:251:
+	chip->tpm_result_buffer =
+	    kmalloc(TPM_BUFSIZE * sizeof(u8), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip->tpm_result_buffer"
#539: FILE: drivers/char/tpm.c:253:
+	if (chip->tpm_result_buffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#559: FILE: drivers/char/tpm.c:273:
+	if (chip == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#581: FILE: drivers/char/tpm.c:295:
+static ssize_t tpm_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#582: FILE: drivers/char/tpm.c:296:
+			 size_t size, loff_t * off)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#587: FILE: drivers/char/tpm.c:301:
+	if (chip == NULL)

CHECK:SPACING: No space is necessary after a cast
#593: FILE: drivers/char/tpm.c:307:
+	    (chip->tpm_result_buffer, (void __user *) buf, size)) {

CHECK:SPACING: No space is necessary after a cast
#603: FILE: drivers/char/tpm.c:317:
+	chip->user_read_timer.data = (unsigned long) chip;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#613: FILE: drivers/char/tpm.c:327:
+static ssize_t tpm_read(struct file *file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#614: FILE: drivers/char/tpm.c:328:
+			size_t size, loff_t * off)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#619: FILE: drivers/char/tpm.c:333:
+	if (chip == NULL)

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#623: FILE: drivers/char/tpm.c:337:
+		dev_err(&chip->pci_dev->dev, "Timeout occured\n");
 		                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#649: FILE: drivers/char/tpm.c:363:
+	    ((void __user *) buf, chip->tpm_result_buffer, write_size)) {

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#659: FILE: drivers/char/tpm.c:373:
+static void __devexit tpm_remove(struct pci_dev *pci_dev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#663: FILE: drivers/char/tpm.c:377:
+	if (chip == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: drivers/char/tpm.c:420:
+	struct tpm_chip *chip = pci_get_drvdata(pci_dev);
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#706: FILE: drivers/char/tpm.c:420:
+	if (chip == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: drivers/char/tpm.c:434:
+	struct tpm_chip *chip = pci_get_drvdata(pci_dev);
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#720: FILE: drivers/char/tpm.c:434:
+	if (chip == NULL)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#730: FILE: drivers/char/tpm.c:444:
+static struct pci_device_id tpm_pci_tbl[] __devinitdata = {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#757: FILE: drivers/char/tpm.c:471:
+EXPORT_SYMBOL(register_tpm_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#764: FILE: drivers/char/tpm.c:478:
+EXPORT_SYMBOL(unregister_tpm_driver);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: drivers/char/tpm.c:481:
+ * Called from tpm_<specific>.c probe function only for devices $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#782: FILE: drivers/char/tpm.c:496:
+	if (chip == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#806: FILE: drivers/char/tpm.c:520:
+	if (chip->dev_num < 0) {
[...]
+	} else if (chip->dev_num == 0)
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pci_dev->dev
#824: FILE: drivers/char/tpm.c:538:
+	chip->ops->miscdev.dev = &(pci_dev->dev);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#847: FILE: drivers/char/tpm.c:561:
+EXPORT_SYMBOL(register_tpm_hardware);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#858: FILE: drivers/char/tpm.c:572:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#859: FILE: drivers/char/tpm.c:573:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#872: FILE: drivers/char/tpm.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: drivers/char/tpm.h:13:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#890: FILE: drivers/char/tpm.h:19:
+ * $

WARNING:SPACING: Unnecessary space before function pointer arguments
#906: FILE: drivers/char/tpm.h:35:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#906: FILE: drivers/char/tpm.h:35:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#906: FILE: drivers/char/tpm.h:35:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#906: FILE: drivers/char/tpm.h:35:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#907: FILE: drivers/char/tpm.h:36:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#907: FILE: drivers/char/tpm.h:36:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#907: FILE: drivers/char/tpm.h:36:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#907: FILE: drivers/char/tpm.h:36:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#908: FILE: drivers/char/tpm.h:37:
+	void (*cancel) (struct tpm_chip *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#908: FILE: drivers/char/tpm.h:37:
+	void (*cancel) (struct tpm_chip *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#932: FILE: drivers/char/tpm.h:61:
+extern void tpm_time_expired(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#932: FILE: drivers/char/tpm.h:61:
+extern void tpm_time_expired(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: drivers/char/tpm.h:62:
+extern int rdx(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#933: FILE: drivers/char/tpm.h:62:
+extern int rdx(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#934: FILE: drivers/char/tpm.h:63:
+extern void wrx(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#934: FILE: drivers/char/tpm.h:63:
+extern void wrx(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#934: FILE: drivers/char/tpm.h:63:
+extern void wrx(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: drivers/char/tpm.h:64:
+extern int lpc_bus_init(struct pci_dev *, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#935: FILE: drivers/char/tpm.h:64:
+extern int lpc_bus_init(struct pci_dev *, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#935: FILE: drivers/char/tpm.h:64:
+extern int lpc_bus_init(struct pci_dev *, u16);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#937: FILE: drivers/char/tpm.h:66:
+extern int register_tpm_driver(struct pci_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_driver *' should also have an identifier name
#937: FILE: drivers/char/tpm.h:66:
+extern int register_tpm_driver(struct pci_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: drivers/char/tpm.h:67:
+extern void unregister_tpm_driver(struct pci_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_driver *' should also have an identifier name
#938: FILE: drivers/char/tpm.h:67:
+extern void unregister_tpm_driver(struct pci_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: drivers/char/tpm.h:68:
+extern int register_tpm_hardware(struct pci_dev *, struct tpm_chip_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#939: FILE: drivers/char/tpm.h:68:
+extern int register_tpm_hardware(struct pci_dev *, struct tpm_chip_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip_ops *' should also have an identifier name
#939: FILE: drivers/char/tpm.h:68:
+extern int register_tpm_hardware(struct pci_dev *, struct tpm_chip_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#939: FILE: drivers/char/tpm.h:68:
+extern int register_tpm_hardware(struct pci_dev *, struct tpm_chip_ops *,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#945: FILE: drivers/char/tpm_nsc.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: drivers/char/tpm_nsc.c:13:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: drivers/char/tpm_nsc.c:19:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1001: FILE: drivers/char/tpm_nsc.c:57:
+static int wait_for_stat(struct tpm_chip *chip, u8 mask, u8 val, u8 * data)

CHECK:SPACING: No space is necessary after a cast
#1006: FILE: drivers/char/tpm_nsc.c:62:
+			      (unsigned long) &expired);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1023: FILE: drivers/char/tpm_nsc.c:79:
+	}
+	while (!expired);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1034: FILE: drivers/char/tpm_nsc.c:90:
+			      (unsigned long) &expired);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1055: FILE: drivers/char/tpm_nsc.c:111:
+	}
+	while (!expired);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1061: FILE: drivers/char/tpm_nsc.c:117:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1062: FILE: drivers/char/tpm_nsc.c:118:
+static int tpm_nsc_recv(struct tpm_chip *chip, u8 * buf, size_t count)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1076: FILE: drivers/char/tpm_nsc.c:132:
+	if ((data = inb(chip->base + NSC_DATA)) != NSC_COMMAND_NORMAL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1099: FILE: drivers/char/tpm_nsc.c:155:
+	if ((data = inb(chip->base + NSC_DATA)) != NSC_COMMAND_EOC) {

CHECK:SPACING: No space is necessary after a cast
#1105: FILE: drivers/char/tpm_nsc.c:161:
+	native_size = (__force __be32 *) (buf + 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1114: FILE: drivers/char/tpm_nsc.c:170:
+static int tpm_nsc_send(struct tpm_chip *chip, u8 * buf, size_t count)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1164: FILE: drivers/char/tpm_nsc.c:220:
+static struct file_operations nsc_ops = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1177: FILE: drivers/char/tpm_nsc.c:233:
+static int __devinit tpm_nsc_init(struct pci_dev *pci_dev,

WARNING:SPLIT_STRING: quoted string split across lines
#1215: FILE: drivers/char/tpm_nsc.c:271:
+		"NSC Config "
+		"0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1254: FILE: drivers/char/tpm_nsc.c:310:
+	if ((rc =

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1274: FILE: drivers/char/tpm_nsc.c:330:
+
+}

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1308: FILE: MAINTAINERS:2149:
+P:	Kylene Hall
+M:	tpmdd-devel@lists.sourceforge.net

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 51 warnings, 39 checks, 1236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
