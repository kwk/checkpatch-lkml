WARNING:TYPO_SPELLING: 'heirarchy' may be misspelled - perhaps 'hierarchy'?
#43: 
but it wasn't clear to me how this would fall into the heirarchy of
                                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#59: FILE: fs/lockd/svc.c:37:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/lockd/svc.c:78:
+static struct proc_dir_entry *lockd_dir,*release_device_file;
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '*' (ctx:OxV)
#75: FILE: fs/lockd/svc.c:78:
+static struct proc_dir_entry *lockd_dir,*release_device_file;
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#91: FILE: fs/lockd/svc.c:407:
+	if(count > DEV_T_STRLEN)

CHECK:SPACING: No space is necessary after a cast
#100: FILE: fs/lockd/svc.c:416:
+	device = (dev_t)(simple_strtoul((const char *) &kdev_str, NULL, 0));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#100: FILE: fs/lockd/svc.c:416:
+	device = (dev_t)(simple_strtoul((const char *) &kdev_str, NULL, 0));

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/lockd/svc.c:419:
+^I^Idprintk("lockd: releasing all locks on 0x%x\n",device);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: fs/lockd/svc.c:419:
+		dprintk("lockd: releasing all locks on 0x%x\n",device);	
 		                                              ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#121: FILE: fs/lockd/svc.c:501:
+	if (! nlm_sysctl_table) {
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: fs/lockd/svc.c:506:
+	lockd_dir = proc_mkdir("fs/lockd",NULL);
 	                                 ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#127: FILE: fs/lockd/svc.c:507:
+	if (! lockd_dir) {
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: fs/lockd/svc.c:511:
+	lockd_dir->owner=THIS_MODULE;
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: fs/lockd/svc.c:536:
+	remove_proc_entry("release_device",lockd_dir);
 	                                  ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#177: FILE: fs/lockd/svcsubs.c:247:
 		while ((file = *fp) != NULL) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nlmsvc_release_device', this function's name, in a string
#216: FILE: fs/lockd/svcsubs.c:349:
+	dprintk("lockd: nlmsvc_release_device\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#218: FILE: fs/lockd/svcsubs.c:351:
+		printk(KERN_WARNING

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/lockd/bind.h:33:
+extern void	nlmsvc_release_device(dev_t device);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086401.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 5 warnings, 3 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086401.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
