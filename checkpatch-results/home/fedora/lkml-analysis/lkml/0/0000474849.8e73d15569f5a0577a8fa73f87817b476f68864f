WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -Naur linux-2.4.17-K3/arch/i386/kernel/smpboot.c linux-2.4.17-K3-ns/arch/i386/kernel/smpboot.c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/sched.h:155:
+extern void sched_exec_migrate(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#104: FILE: kernel/sched.c:48:
+		spinlock_t lock;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#108: FILE: kernel/sched.c:52:
+	char __pad [SMP_CACHE_BYTES];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: kernel/sched.c:54:
+};
+typedef union cpu_set cpu_set_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#110: FILE: kernel/sched.c:54:
+typedef union cpu_set cpu_set_t;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#115: FILE: kernel/sched.c:59:
+static int numa_num_cpu_sets = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#116: FILE: kernel/sched.c:60:
+static int numa_cpus_per_local_set = NR_CPUS;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#121: FILE: kernel/sched.c:65:
+#define next_cs_id(c)		((c) + 1 == numa_num_cpu_sets ? 0 : (c) + 1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: kernel/sched.c:694:
+    defined(BUSY_REBALANCE)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: kernel/sched.c:706:
+	if (this_load > 1)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#217: FILE: kernel/sched.c:708:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#224: FILE: kernel/sched.c:715:
+	for(i = 0; i < numa_num_cpu_sets; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_load <= this_load'
#231: FILE: kernel/sched.c:722:
+	if (!target_set || (max_load <= this_load))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#332: FILE: kernel/sched.c:826:
+	for (i=0; i < smp_num_cpus; i++) {
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: kernel/sched.c:835:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#415: FILE: kernel/sched.c:1761:
+	for (i=0; i<numa_cpus_per_local_set; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#415: FILE: kernel/sched.c:1761:
+	for (i=0; i<numa_cpus_per_local_set; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#425: FILE: kernel/sched.c:1771:
+	for (i=0; i<smp_num_cpus; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#425: FILE: kernel/sched.c:1771:
+	for (i=0; i<smp_num_cpus; i++) {
 	           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 4 warnings, 7 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
