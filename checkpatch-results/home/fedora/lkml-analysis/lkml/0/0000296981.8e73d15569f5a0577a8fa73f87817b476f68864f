WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
diff -u linux-2.6/security/selinux/selinuxfs.c:1.1.1.6 linux-2.6/security/selinux/selinuxfs.c:1.40

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: security/selinux/selinuxfs.c:1:
+/* Updated: Karl MacMillan <kmacmillan@tresys.com>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: security/selinux/selinuxfs.c:3:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: security/selinux/selinuxfs.c:7:
+ *  ^Iit under the terms of the GNU General Public License as published by$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#97: FILE: security/selinux/selinuxfs.c:36:
+static struct dentry *bool_dir = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#98: FILE: security/selinux/selinuxfs.c:37:
+static int bool_num = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#99: FILE: security/selinux/selinuxfs.c:38:
+static int *bool_pending_values = NULL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#121: FILE: security/selinux/selinuxfs.c:197:
+static ssize_t sel_read_mls(struct file *filp, char *buf,
                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: security/selinux/selinuxfs.c:198:
+static ssize_t sel_read_mls(struct file *filp, char *buf,
+				size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#130: FILE: security/selinux/selinuxfs.c:206:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#130: FILE: security/selinux/selinuxfs.c:206:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#147: FILE: security/selinux/selinuxfs.c:223:
+	if (copy_to_user(buf, (char *) page + *ppos, count)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#157: FILE: security/selinux/selinuxfs.c:233:
+static struct file_operations sel_mls_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count < 0'
#186: FILE: security/selinux/selinuxfs.c:257:
+	if ((count < 0) || (count > 64 * 1024 * 1024)
+	    || (data = vmalloc(count)) == NULL) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#186: FILE: security/selinux/selinuxfs.c:257:
+	if ((count < 0) || (count > 64 * 1024 * 1024)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#187: FILE: security/selinux/selinuxfs.c:258:
+	if ((count < 0) || (count > 64 * 1024 * 1024)
+	    || (data = vmalloc(count)) == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#219: FILE: security/selinux/selinuxfs.c:687:
+		ret->i_uid = ret->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#222: FILE: security/selinux/selinuxfs.c:690:
+		ret->i_atime = ret->i_mtime = ret->i_ctime = CURRENT_TIME;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: security/selinux/selinuxfs.c:706:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: security/selinux/selinuxfs.c:708:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#251: FILE: security/selinux/selinuxfs.c:719:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#251: FILE: security/selinux/selinuxfs.c:719:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: security/selinux/selinuxfs.c:724:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: security/selinux/selinuxfs.c:733:
+	length = scnprintf(page, PAGE_SIZE, "%d %d", cur_enforcing,
+			  bool_pending_values[inode->i_ino - BOOL_INO_OFFSET]);

CHECK:SPACING: No space is necessary after a cast
#278: FILE: security/selinux/selinuxfs.c:746:
+	if (copy_to_user(buf, (char *) page + *ppos, count)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: security/selinux/selinuxfs.c:768:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#317: FILE: security/selinux/selinuxfs.c:785:
+	page = (char*)__get_free_page(GFP_KERNEL);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#326: FILE: security/selinux/selinuxfs.c:794:
+	if (sscanf(page, "%d", &new_value) != 1)
+		goto out;

CHECK:SPACING: No space is necessary after a cast
#339: FILE: security/selinux/selinuxfs.c:807:
+		free_page((unsigned long) page);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#343: FILE: security/selinux/selinuxfs.c:811:
+static struct file_operations sel_bool_ops = {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#373: FILE: security/selinux/selinuxfs.c:841:
+	page = (char*)__get_free_page(GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: security/selinux/selinuxfs.c:843:
+^I^Ireturn -ENOMEM;^I       $

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#383: FILE: security/selinux/selinuxfs.c:851:
+	if (sscanf(page, "%d", &new_value) != 1)
+		goto out;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#386: FILE: security/selinux/selinuxfs.c:854:
+	if (new_value) {
+		security_set_bools(bool_num, bool_pending_values);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#395: FILE: security/selinux/selinuxfs.c:863:
+		free_page((unsigned long) page);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#399: FILE: security/selinux/selinuxfs.c:867:
+static struct file_operations sel_commit_bools_ops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#404: FILE: security/selinux/selinuxfs.c:872:
+ * fs/proc/generic.c proc_kill_inodes */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: security/selinux/selinuxfs.c:877:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: security/selinux/selinuxfs.c:882:
+		struct dentry *d = list_entry(node, struct dentry, d_child);
+		list_del_init(node);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#431: FILE: security/selinux/selinuxfs.c:899:
+		struct file * filp = list_entry(p, struct file, f_list);
 		              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: security/selinux/selinuxfs.c:899:
+		struct file * filp = list_entry(p, struct file, f_list);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#432: FILE: security/selinux/selinuxfs.c:900:
+		struct dentry * dentry = filp->f_dentry;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#434: FILE: security/selinux/selinuxfs.c:902:
+		if (dentry->d_parent != de) {
+			continue;
+		}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#460: FILE: security/selinux/selinuxfs.c:928:
+	if (bool_pending_values)
+		kfree(bool_pending_values);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: security/selinux/selinuxfs.c:929:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#464: FILE: security/selinux/selinuxfs.c:932:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#464: FILE: security/selinux/selinuxfs.c:932:
+	if (!(page = (char*)__get_free_page(GFP_KERNEL)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: security/selinux/selinuxfs.c:939:
+^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#481: FILE: security/selinux/selinuxfs.c:949:
+		inode = sel_make_inode(dir->d_sb, S_IFREG | S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#495: FILE: security/selinux/selinuxfs.c:963:
+		isec = (struct inode_security_struct*)inode->i_security;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#496: FILE: security/selinux/selinuxfs.c:964:
+		if ((ret = security_genfs_sid("selinuxfs", page, SECCLASS_FILE, &sid)))

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#511: FILE: security/selinux/selinuxfs.c:979:
+			if (names[i])
+				kfree(names[i]);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#536: FILE: security/selinux/selinuxfs.c:1006:
+		[SEL_COMMIT_BOOLS] = {"commit_pending_bools", &sel_commit_bools_ops, S_IWUSR},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#537: FILE: security/selinux/selinuxfs.c:1007:
+		[SEL_MLS] = {"mls", &sel_mls_ops, S_IRUGO},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#552: FILE: security/selinux/selinuxfs.c:1021:
+	inode = sel_make_inode(sb, S_IFDIR | S_IRUGO | S_IXUGO);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#566: FILE: security/selinux/selinuxfs.c:1035:
+	printk(KERN_ERR "security:	error creating conditional out_dput\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: security/selinux/include/av_perm_to_string.h:87:
+   { SECCLASS_SECURITY, SECURITY__SETBOOL, "setbool" },$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#600: FILE: security/selinux/include/conditional.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: security/selinux/include/conditional.h:9:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#681: FILE: security/selinux/ss/avtab.c:9:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#685: FILE: security/selinux/ss/avtab.c:13:
+ *  ^Iit under the terms of the GNU General Public License as published by$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: security/selinux/ss/avtab.c:32:
+avtab_insert_node(struct avtab *h, int hvalue, struct avtab_node * prev, struct avtab_node * cur,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: security/selinux/ss/avtab.c:32:
+avtab_insert_node(struct avtab *h, int hvalue, struct avtab_node * prev, struct avtab_node * cur,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#705: FILE: security/selinux/ss/avtab.c:35:
+	struct avtab_node * newnode;

CHECK:SPACING: No space is necessary after a cast
#706: FILE: security/selinux/ss/avtab.c:36:
+	newnode = (struct avtab_node *) kmalloc(sizeof(struct avtab_node),GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: security/selinux/ss/avtab.c:36:
+	struct avtab_node * newnode;
+	newnode = (struct avtab_node *) kmalloc(sizeof(struct avtab_node),GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#706: FILE: security/selinux/ss/avtab.c:36:
+	newnode = (struct avtab_node *) kmalloc(sizeof(struct avtab_node),GFP_KERNEL);
 	                                                                 ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#706: FILE: security/selinux/ss/avtab.c:36:
+	newnode = (struct avtab_node *) kmalloc(sizeof(struct avtab_node),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*newnode)...) over kmalloc(sizeof(struct avtab_node)...)
#706: FILE: security/selinux/ss/avtab.c:36:
+	newnode = (struct avtab_node *) kmalloc(sizeof(struct avtab_node),GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newnode"
#707: FILE: security/selinux/ss/avtab.c:37:
+	if (newnode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#734: FILE: security/selinux/ss/avtab.c:83:
+	if(!newnode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#751: FILE: security/selinux/ss/avtab.c:89:
+/* Unlike avtab_insert(), this function allow multiple insertions of the same $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: security/selinux/ss/avtab.c:90:
+ * key/specified mask into the table, as needed by the conditional avtab.  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: security/selinux/ss/avtab.c:94:
+avtab_insert_nonunique(struct avtab * h, struct avtab_key * key, struct avtab_datum * datum)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: security/selinux/ss/avtab.c:94:
+avtab_insert_nonunique(struct avtab * h, struct avtab_key * key, struct avtab_datum * datum)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: security/selinux/ss/avtab.c:94:
+avtab_insert_nonunique(struct avtab * h, struct avtab_key * key, struct avtab_datum * datum)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: security/selinux/ss/avtab.c:105:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: security/selinux/ss/avtab.c:112:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: security/selinux/ss/avtab.c:115:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: security/selinux/ss/avtab.c:121:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: security/selinux/ss/avtab.c:169:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: security/selinux/ss/avtab.c:177:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: security/selinux/ss/avtab.c:180:
+^I^Iif (key->source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: security/selinux/ss/avtab.c:195:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: security/selinux/ss/avtab.c:197:
+^I^Iif (node->key.source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: security/selinux/ss/avtab.c:205:
+^I^Iif (node->key.source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: security/selinux/ss/avtab.c:208:
+^I^Iif (node->key.source_type == cur->key.source_type && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: security/selinux/ss/avtab.c:309:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#871: FILE: security/selinux/ss/avtab.c:312:
+		printk(KERN_ERR "security: avtab: truncated entry\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#875: FILE: security/selinux/ss/avtab.c:316:
+	buf = next_entry(fp, sizeof(__u32)*items2);
 	                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#877: FILE: security/selinux/ss/avtab.c:318:
+		printk(KERN_ERR "security: avtab: truncated entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#886: FILE: security/selinux/ss/avtab.c:327:
+		printk(KERN_ERR "security: avtab: null entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#891: FILE: security/selinux/ss/avtab.c:332:
+		printk(KERN_ERR "security: avtab: entry has both access vectors and types\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: security/selinux/ss/avtab.c:338:
+^I^Iif (avdatum->specified & AVTAB_AUDITDENY) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: security/selinux/ss/avtab.c:340:
+^I^Iif (avdatum->specified & AVTAB_AUDITALLOW) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: security/selinux/ss/avtab.c:342:
+^I} else {^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: security/selinux/ss/avtab.c:349:
+^I}^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#910: FILE: security/selinux/ss/avtab.c:351:
+		printk(KERN_ERR "security: avtab: entry only had %d items, expected %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: security/selinux/ss/avtab.c:355:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#999: FILE: security/selinux/ss/avtab.h:13:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1003: FILE: security/selinux/ss/avtab.h:17:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1039: FILE: security/selinux/ss/conditional.c:1:
+/* Authors: Karl MacMillan <kmacmillan@tresys.com>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1044: FILE: security/selinux/ss/conditional.c:6:
+ *  ^Iit under the terms of the GNU General Public License as published by$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1066: FILE: security/selinux/ss/conditional.c:28:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1071: FILE: security/selinux/ss/conditional.c:33:
+	for (cur = expr; cur != NULL; cur = cur->next) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1131: FILE: security/selinux/ss/conditional.c:93:
+	struct cond_av_list* cur;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1137: FILE: security/selinux/ss/conditional.c:99:
+			printk(KERN_ERR "security: expression result was undefined - disabling all rules.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1139: FILE: security/selinux/ss/conditional.c:101:
+		for (cur = node->true_list; cur != NULL; cur = cur->next) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1140: FILE: security/selinux/ss/conditional.c:102:
+			if (new_state <= 0) {
[...]
+			} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: security/selinux/ss/conditional.c:109:
+^I^Ifor (cur = node->false_list; cur != NULL; cur = cur->next) {^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1147: FILE: security/selinux/ss/conditional.c:109:
+		for (cur = node->false_list; cur != NULL; cur = cur->next) {	

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1149: FILE: security/selinux/ss/conditional.c:111:
+			if (new_state) {
[...]
+			} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1172: FILE: security/selinux/ss/conditional.c:134:
+	struct cond_av_list *cur, *next;
+	for (cur = list; cur != NULL; cur = next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1172: FILE: security/selinux/ss/conditional.c:134:
+	for (cur = list; cur != NULL; cur = next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_expr"
#1183: FILE: security/selinux/ss/conditional.c:145:
+	for (cur_expr = node->expr; cur_expr != NULL; cur_expr = next_expr) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: security/selinux/ss/conditional.c:157:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#1196: FILE: security/selinux/ss/conditional.c:158:
+	if (list == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1199: FILE: security/selinux/ss/conditional.c:161:
+	for (cur = list; cur != NULL; cur = next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->bool_val_to_struct"
#1207: FILE: security/selinux/ss/conditional.c:169:
+	if (p->bool_val_to_struct != NULL)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1216: FILE: security/selinux/ss/conditional.c:178:
+	if (p->bool_val_to_struct)
+		kfree(p->bool_val_to_struct);

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1217: FILE: security/selinux/ss/conditional.c:179:
+	p->bool_val_to_struct = (struct cond_bool_datum**)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1217: FILE: security/selinux/ss/conditional.c:179:
+	p->bool_val_to_struct = (struct cond_bool_datum**)
+		kmalloc(p->p_bools.nprim * sizeof(struct cond_bool_datum*), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1218: FILE: security/selinux/ss/conditional.c:180:
+		kmalloc(p->p_bools.nprim * sizeof(struct cond_bool_datum*), GFP_KERNEL);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1227: FILE: security/selinux/ss/conditional.c:189:
+	if (key)
+		kfree(key);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1244: FILE: security/selinux/ss/conditional.c:206:
+	p->bool_val_to_struct[booldatum->value -1] = booldatum;
 	                                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*booldatum)...) over kmalloc(sizeof(struct cond_bool_datum)...)
#1262: FILE: security/selinux/ss/conditional.c:224:
+	booldatum = kmalloc(sizeof(struct cond_bool_datum), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1273: FILE: security/selinux/ss/conditional.c:235:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1278: FILE: security/selinux/ss/conditional.c:240:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1289: FILE: security/selinux/ss/conditional.c:251:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1315: FILE: security/selinux/ss/conditional.c:277:
+	if (len == 0) {
+		return 0;
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1330: FILE: security/selinux/ss/conditional.c:292:
+				printk("security: type rule already exists outside of a conditional.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1345: FILE: security/selinux/ss/conditional.c:307:
+						printk("security: too many conflicting type rules.");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#1349: FILE: security/selinux/ss/conditional.c:311:
+					for (cur = other; cur != NULL; cur = cur->next) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1350: FILE: security/selinux/ss/conditional.c:312:
+						if (cur->node == node_ptr) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1356: FILE: security/selinux/ss/conditional.c:318:
+						printk("security: conflicting type rules.");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1360: FILE: security/selinux/ss/conditional.c:322:
+^I^I^I} else {    $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1362: FILE: security/selinux/ss/conditional.c:324:
+					printk("security: conflicting type rules when adding type rule for true.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1369: FILE: security/selinux/ss/conditional.c:331:
+			printk("security: could not insert rule.");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*list)...) over kmalloc(sizeof(struct cond_av_list)...)
#1373: FILE: security/selinux/ss/conditional.c:335:
+		list = kmalloc(sizeof(struct cond_av_list), GFP_KERNEL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1385: FILE: security/selinux/ss/conditional.c:347:
+
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1397: FILE: security/selinux/ss/conditional.c:359:
+		printk("security: conditional expressions uses unknown operator.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1400: FILE: security/selinux/ss/conditional.c:362:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1402: FILE: security/selinux/ss/conditional.c:364:
+		printk("security: conditional expressions uses unknown bool.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: security/selinux/ss/conditional.c:381:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1427: FILE: security/selinux/ss/conditional.c:389:
+^I$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1428: FILE: security/selinux/ss/conditional.c:390:
+	for (i = 0; i < len; i++ ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*expr)...) over kmalloc(sizeof(struct cond_expr)...)
#1433: FILE: security/selinux/ss/conditional.c:395:
+		expr = kmalloc(sizeof(struct cond_expr), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1434: FILE: security/selinux/ss/conditional.c:396:
+		if (!expr) {
+			goto err;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1441: FILE: security/selinux/ss/conditional.c:403:
+^I^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1445: FILE: security/selinux/ss/conditional.c:407:
+		if (i == 0) {
[...]
+		} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1452: FILE: security/selinux/ss/conditional.c:414:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct cond_node)...)
#1476: FILE: security/selinux/ss/conditional.c:438:
+		node = kmalloc(sizeof(struct cond_node), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1480: FILE: security/selinux/ss/conditional.c:442:
+^I^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1484: FILE: security/selinux/ss/conditional.c:446:
+		if (i == 0) {
[...]
+		} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1489: FILE: security/selinux/ss/conditional.c:451:
+^I^Ilast = node;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1498: FILE: security/selinux/ss/conditional.c:460:
+ * av table, and if so, add them to the result $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1503: FILE: security/selinux/ss/conditional.c:465:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: security/selinux/ss/conditional.c:466:
+^Iif(!ctab || !key || !avd) $

ERROR:SPACING: space required before the open parenthesis '('
#1504: FILE: security/selinux/ss/conditional.c:466:
+	if(!ctab || !key || !avd) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1506: FILE: security/selinux/ss/conditional.c:468:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1507: FILE: security/selinux/ss/conditional.c:469:
+^Ifor(node = avtab_search_node(ctab, key, AVTAB_AV); node != NULL; $

ERROR:SPACING: space required before the open parenthesis '('
#1507: FILE: security/selinux/ss/conditional.c:469:
+	for(node = avtab_search_node(ctab, key, AVTAB_AV); node != NULL; 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#1507: FILE: security/selinux/ss/conditional.c:469:
+	for(node = avtab_search_node(ctab, key, AVTAB_AV); node != NULL; 

CHECK:SPACING: No space is necessary after a cast
#1509: FILE: security/selinux/ss/conditional.c:471:
+		if ( (__u32) (AVTAB_ALLOWED|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1509: FILE: security/selinux/ss/conditional.c:471:
+		if ( (__u32) (AVTAB_ALLOWED|AVTAB_ENABLED) ==
 		                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1509: FILE: security/selinux/ss/conditional.c:471:
+		if ( (__u32) (AVTAB_ALLOWED|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1510: FILE: security/selinux/ss/conditional.c:472:
+		     (node->datum.specified & (AVTAB_ALLOWED|AVTAB_ENABLED)))
 		                                            ^

CHECK:SPACING: No space is necessary after a cast
#1512: FILE: security/selinux/ss/conditional.c:474:
+		if ( (__u32) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1512: FILE: security/selinux/ss/conditional.c:474:
+		if ( (__u32) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==
 		                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1512: FILE: security/selinux/ss/conditional.c:474:
+		if ( (__u32) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1513: FILE: security/selinux/ss/conditional.c:475:
+		     (node->datum.specified & (AVTAB_AUDITDENY|AVTAB_ENABLED)))
 		                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1514: FILE: security/selinux/ss/conditional.c:476:
+^I^I^I/* Since a '0' in an auditdeny mask represents a $

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: security/selinux/ss/conditional.c:482:
+		if ( (__u32) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1520: FILE: security/selinux/ss/conditional.c:482:
+		if ( (__u32) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==
 		                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1520: FILE: security/selinux/ss/conditional.c:482:
+		if ( (__u32) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1521: FILE: security/selinux/ss/conditional.c:483:
+		     (node->datum.specified & (AVTAB_AUDITALLOW|AVTAB_ENABLED)))
 		                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1524: FILE: security/selinux/ss/conditional.c:486:
+^Ireturn;^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#1525: FILE: security/selinux/ss/conditional.c:487:
+	return;	
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1531: FILE: security/selinux/ss/conditional.h:1:
+/* Authors: Karl MacMillan <kmacmillan@tresys.com>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1536: FILE: security/selinux/ss/conditional.h:6:
+ *  ^Iit under the terms of the GNU General Public License as published by$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1569: FILE: security/selinux/ss/conditional.h:39:
+ * depending on the current value of the conditional expression. This $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1592: FILE: security/selinux/ss/conditional.h:62:
+int cond_policydb_init(struct policydb* p);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1593: FILE: security/selinux/ss/conditional.h:63:
+void cond_policydb_destroy(struct policydb* p);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1595: FILE: security/selinux/ss/conditional.h:65:
+int cond_init_bool_indexes(struct policydb* p);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1623: FILE: security/selinux/ss/mls.h:52:
+#define mls_symtab_sizes  16, 16,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1624: FILE: security/selinux/ss/mls.h:53:
+#define mls_index_f sens_index, cat_index,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1625: FILE: security/selinux/ss/mls.h:54:
+#define mls_destroy_f sens_destroy, cat_destroy,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1626: FILE: security/selinux/ss/mls.h:55:
+#define mls_read_f sens_read, cat_read,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1627: FILE: security/selinux/ss/mls.h:56:
+#define mls_write_f sens_write, cat_write,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1642: FILE: security/selinux/ss/policydb.c:9:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1646: FILE: security/selinux/ss/policydb.c:13:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1711: FILE: security/selinux/ss/policydb.c:290:
+	printk(KERN_INFO "security:  %d users, %d roles, %d types, %d bools",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1790: FILE: security/selinux/ss/policydb.c:1170:
+			printk(KERN_ERR "security:  policydb table sizes (%d,%d) do "

WARNING:SPLIT_STRING: quoted string split across lines
#1791: FILE: security/selinux/ss/policydb.c:1171:
+			printk(KERN_ERR "security:  policydb table sizes (%d,%d) do "
+			       "not match mine (%d,%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1798: FILE: security/selinux/ss/policydb.c:1178:
+			printk(KERN_ERR "security:  policydb table sizes (%d,%d) do "

WARNING:SPLIT_STRING: quoted string split across lines
#1799: FILE: security/selinux/ss/policydb.c:1179:
+			printk(KERN_ERR "security:  policydb table sizes (%d,%d) do "
+			       "not match mine (%d,%d)\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1839: FILE: security/selinux/ss/policydb.h:10:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1843: FILE: security/selinux/ss/policydb.h:14:
+ *  ^Iit under the terms of the GNU General Public License as published by$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1904: FILE: security/selinux/ss/policydb.h:222:
+	struct cond_node* cond_list;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1919: FILE: security/selinux/ss/services.c:15:
+ * ^IAdded conditional policy language extensions$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1923: FILE: security/selinux/ss/services.c:19:
+ *  ^Iit under the terms of the GNU General Public License as published by$

ERROR:SPACING: space required before the open parenthesis '('
#1960: FILE: security/selinux/ss/services.c:658:
+	if(!avdatum) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#1962: FILE: security/selinux/ss/services.c:660:
+		for (; node != NULL; node = avtab_search_node_next(node, specified)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2005: FILE: security/selinux/ss/services.c:1467:
+^I$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#2012: FILE: security/selinux/ss/services.c:1474:
+	*names = (char**)kmalloc(sizeof(char*) * *len, GFP_ATOMIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2012: FILE: security/selinux/ss/services.c:1474:
+	*names = (char**)kmalloc(sizeof(char*) * *len, GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2012: FILE: security/selinux/ss/services.c:1474:
+	*names = (char**)kmalloc(sizeof(char*) * *len, GFP_ATOMIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2015: FILE: security/selinux/ss/services.c:1477:
+	memset(*names, 0, sizeof(char*) * *len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2017: FILE: security/selinux/ss/services.c:1479:
+	*values = (int*)kmalloc(sizeof(int) * *len, GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2017: FILE: security/selinux/ss/services.c:1479:
+	*values = (int*)kmalloc(sizeof(int) * *len, GFP_ATOMIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2025: FILE: security/selinux/ss/services.c:1487:
+		(*names)[i] = (char*)kmalloc(sizeof(char) * name_len, GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2025: FILE: security/selinux/ss/services.c:1487:
+		(*names)[i] = (char*)kmalloc(sizeof(char) * name_len, GFP_ATOMIC);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2046: FILE: security/selinux/ss/services.c:1508:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2061: FILE: security/selinux/ss/services.c:1523:
+	printk(KERN_INFO "security: committed booleans { ");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2063: FILE: security/selinux/ss/services.c:1525:
+		if (values[i]) {
[...]
+		} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2069: FILE: security/selinux/ss/services.c:1531:
+			printk(", ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2070: FILE: security/selinux/ss/services.c:1532:
+		printk("%s:%d", policydb.p_bool_val_to_name[i],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2073: FILE: security/selinux/ss/services.c:1535:
+	printk(" }\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#2075: FILE: security/selinux/ss/services.c:1537:
+	for (cur = policydb.cond_list; cur != NULL; cur = cur->next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2096: FILE: security/selinux/ss/services.c:1558:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2098: FILE: security/selinux/ss/services.c:1560:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 99 errors, 79 warnings, 43 checks, 1940 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
