WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: arch/i386/Kconfig:812:
+config SOFTWARE_SUSPEND
+	bool "Software Suspend (EXPERIMENTAL)"
+	depends on EXPERIMENTAL && PM
+	---help---
+	  Enable the possibilty of suspendig machine. It doesn't need APM.
+	  You may suspend your machine by 'swsusp' or 'shutdown -z <time>' 
+	  (patch for sysvinit needed). 
+
+	  It creates an image which is saved in your active swaps. By the next
+	  booting the, pass 'resume=/path/to/your/swap/file' and kernel will 
+	  detect the saved image, restore the memory from
+	  it and then it continues to run as before you've suspended.
+	  If you don't want the previous state to continue use the 'noresume'
+	  kernel option. However note that your partitions will be fsck'd and
+	  you must re-mkswap your swap partitions/files.
+
+	  Right now you may boot without resuming and then later resume but
+	  in meantime you cannot use those swap partitions/files which were
+	  involved in suspending. Also in this case there is a risk that buffers
+	  on disk won't match with saved ones.
+
+	  SMP is supported ``as-is''. There's a code for it but doesn't work.
+	  There have been problems reported relating SCSI.
+
+	  This option is about getting stable. However there is still some
+	  absence of features.
+
+	  For more information take a look at Documentation/swsusp.txt.
+
+source "drivers/acpi/Kconfig"
+
 config APM
 	tristate "Advanced Power Management BIOS support"
 	depends on PM

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'possibilty' may be misspelled - perhaps 'possibility'?
#50: FILE: arch/i386/Kconfig:816:
+	  Enable the possibilty of suspendig machine. It doesn't need APM.
 	             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: arch/i386/Kconfig:817:
+^I  You may suspend your machine by 'swsusp' or 'shutdown -z <time>' $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: arch/i386/Kconfig:818:
+^I  (patch for sysvinit needed). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: arch/i386/Kconfig:821:
+^I  booting the, pass 'resume=/path/to/your/swap/file' and kernel will $

CHECK:SPACING: No space is necessary after a cast
#156: FILE: kernel/suspend.c:83:
+#define __ADDRESS(x)  ((unsigned long) phys_to_virt(x))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#158: FILE: kernel/suspend.c:85:
+#define ADDRESS2(x) __ADDRESS(__pa(x))		/* Needed for x86-64 where some pages are in memory twice */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: kernel/suspend.c:238:
+	BUG_ON(in_atomic());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: kernel/suspend.c:326:
+^I  ^Iif (!memcmp("S1",cur->swh.magic.magic,2))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: kernel/suspend.c:326:
+^I  ^Iif (!memcmp("S1",cur->swh.magic.magic,2))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: kernel/suspend.c:326:
+	  	if (!memcmp("S1",cur->swh.magic.magic,2))
 	  	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: kernel/suspend.c:326:
+	  	if (!memcmp("S1",cur->swh.magic.magic,2))
 	  	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: kernel/suspend.c:328:
+		else if (!memcmp("S2",cur->swh.magic.magic,2))
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: kernel/suspend.c:328:
+		else if (!memcmp("S2",cur->swh.magic.magic,2))
 		                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: kernel/suspend.c:334:
+^I^I  ^Imemcpy(cur->swh.magic.magic,"S1SUSP....",10);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: kernel/suspend.c:334:
+^I^I  ^Imemcpy(cur->swh.magic.magic,"S1SUSP....",10);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: kernel/suspend.c:334:
+		  	memcpy(cur->swh.magic.magic,"S1SUSP....",10);
 		  	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: kernel/suspend.c:334:
+		  	memcpy(cur->swh.magic.magic,"S1SUSP....",10);
 		  	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: kernel/suspend.c:336:
+			memcpy(cur->swh.magic.magic,"S2SUSP....",10);
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: kernel/suspend.c:336:
+			memcpy(cur->swh.magic.magic,"S2SUSP....",10);
 			                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: kernel/suspend.c:503:
+^I^I^Iif ((ADDRESS(pfn) >= (unsigned long) ADDRESS2(&__nosave_begin)) && $

CHECK:SPACING: No space is necessary after a cast
#225: FILE: kernel/suspend.c:503:
+			if ((ADDRESS(pfn) >= (unsigned long) ADDRESS2(&__nosave_begin)) && 

CHECK:SPACING: No space is necessary after a cast
#226: FILE: kernel/suspend.c:504:
+			    (ADDRESS(pfn) <  (unsigned long) ADDRESS2(&__nosave_end))) {

CHECK:SPACING: No space is necessary after a cast
#236: FILE: kernel/suspend.c:515:
+			copy_page((void *) pagedir_p->address, (void *) pagedir_p->orig_address);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#245: FILE: kernel/suspend.c:551:
+	p = pagedir = (suspend_pagedir_t *)__get_free_pages(GFP_ATOMIC | __GFP_COLD, pagedir_order);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: kernel/suspend.c:565:
+		printk(".");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#309: FILE: kernel/suspend.c:751:
+	extern int C_A_D;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#327: FILE: kernel/suspend.c:813:
+	BUG_ON(in_atomic());

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: kernel/suspend.c:1081:
+	if (!memcmp("S1",cur->swh.magic.magic,2))
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: kernel/suspend.c:1081:
+	if (!memcmp("S1",cur->swh.magic.magic,2))
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: kernel/suspend.c:1083:
+	else if (!memcmp("S2",cur->swh.magic.magic,2))
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: kernel/suspend.c:1083:
+	else if (!memcmp("S2",cur->swh.magic.magic,2))
 	                                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 9 warnings, 5 checks, 301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
