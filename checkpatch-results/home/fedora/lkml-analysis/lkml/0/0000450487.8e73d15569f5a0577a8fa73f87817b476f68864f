WARNING:TYPO_SPELLING: 'patchs' may be misspelled - perhaps 'patches'?
#33: 
3 incremental patchs:
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'pitty' may be misspelled - perhaps 'pity'?
#47: 
   A little pitty is that to achieve good performance under heavy load, the
            ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: eepro100-mips.c:1304:
+^I^I/* use uncached address,use pci_dma_sync_xx seems $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RxFD>
#93: FILE: eepro100-mips.c:1307:
+		rxf = (struct RxFD *)(KSEG1ADDR(skb->tail));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#135: FILE: eepro100-mips.c:1752:
+	rxf = sp->rx_ringp[entry] = (struct RxFD *)(KSEG1ADDR(skb->tail));

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: eepro100-napi.c:505:
+^I/* used to pass rx_work_limit into speedo_rx,i don't want to $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: eepro100-napi.c:528:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: eepro100-napi.c:581:
+static int speedo_poll (struct net_device *dev, int *budget);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#256: FILE: eepro100-napi.c:885:
+	dev->quota = dev->weight = RX_RING_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <SCBStatus>
#279: FILE: eepro100-napi.c:1595:
+		outw(status & 0xac00, ioaddr + SCBStatus);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))
 		                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))
 		                                                              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))

CHECK:CAMELCASE: Avoid CamelCase: <RrNoMem>
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))

CHECK:CAMELCASE: Avoid CamelCase: <RrPostponed>
#300: FILE: eepro100-napi.c:1615:
+		if (first && ((status & 0x5000) || (sp->rx_ring_state&(RrNoMem|RrPostponed)) == RrPostponed || (status & 0x3c) != 0x10 ))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: eepro100-napi.c:1618:
+^I^I^Iif (speedo_debug > 4) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: eepro100-napi.c:1619:
+				printk("switching to poll,status=%x\n",status);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: eepro100-napi.c:1619:
+				printk("switching to poll,status=%x\n",status);
 				                                      ^

ERROR:SPACING: space required after that close brace '}'
#312: FILE: eepro100-napi.c:1627:
+			}else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#316: FILE: eepro100-napi.c:1631:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: eepro100-napi.c:1797:
+	long ioaddr = dev->base_addr;
+	outw(SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCBMaskEarlyRx>
#378: FILE: eepro100-napi.c:1797:
+	outw(SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCBMaskFlowCtl>
#378: FILE: eepro100-napi.c:1797:
+	outw(SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCBCmd>
#378: FILE: eepro100-napi.c:1797:
+	outw(SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: eepro100-napi.c:1804:
+	long ioaddr = dev->base_addr;
+	outw(SCBMaskRxDone | SCBMaskRxSuspend | SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCBMaskRxDone>
#385: FILE: eepro100-napi.c:1804:
+	outw(SCBMaskRxDone | SCBMaskRxSuspend | SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCBMaskRxSuspend>
#385: FILE: eepro100-napi.c:1804:
+	outw(SCBMaskRxDone | SCBMaskRxSuspend | SCBMaskEarlyRx | SCBMaskFlowCtl, ioaddr + SCBCmd);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: eepro100-napi.c:1808:
+static int speedo_poll (struct net_device *dev, int *budget)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#399: FILE: eepro100-napi.c:1818:
+		printk(KERN_DEBUG " In speedo_poll().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'speedo_poll', this function's name, in a string
#399: FILE: eepro100-napi.c:1818:
+		printk(KERN_DEBUG " In speedo_poll().\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: eepro100-napi.c:1821:
+^Iif (sp->curr_work_limit > dev->quota) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: eepro100-napi.c:1824:
+^Ido {  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: eepro100-napi.c:1837:
+^I^I^I/* If something arrives in this narrow window,an interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: eepro100-napi.c:1838:
+^I^I^I * will be generated $

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#423: FILE: eepro100-napi.c:1842:
+		/* done! at least thats what it looks like ;->
 		                  ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: eepro100-napi.c:1843:
+		/* done! at least thats what it looks like ;->
+		   if new packets came in after our last check on status bits

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'havent' may be misspelled - perhaps 'haven't'?
#426: FILE: eepro100-napi.c:1845:
+		   since we havent exceeded our quota 
 		            ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: eepro100-napi.c:1845:
+^I^I   since we havent exceeded our quota $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: eepro100-napi.c:1851:
+		if (speedo_debug > 4) printk("received==0\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#432: FILE: eepro100-napi.c:1851:
+		if (speedo_debug > 4) printk("received==0\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: eepro100-napi.c:1859:
+^I * to where we can start processing interrupts again $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#448: FILE: eepro100-napi.c:1867:
+		printk("done,received=%lu\n",received);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: eepro100-napi.c:1867:
+		printk("done,received=%lu\n",received);
 		                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: eepro100-napi.c:1869:
+        return 0;   /* done */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: eepro100-napi.c:1869:
+        return 0;   /* done */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#454: FILE: eepro100-napi.c:1873:
+		if (speedo_debug > 4) printk("received==0\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#454: FILE: eepro100-napi.c:1873:
+		if (speedo_debug > 4) printk("received==0\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#464: FILE: eepro100-napi.c:1883:
+		printk("not done,received=%lu\n",received);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: eepro100-napi.c:1883:
+		printk("not done,received=%lu\n",received);
 		                                ^

CHECK:CAMELCASE: Avoid CamelCase: <RxComplete>
#494: FILE: eepro100-napi.c:1920:
+		if (!(status & RxComplete)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: eepro100-napi.c:1925:
+^I^I^I/* We check receiver state here because if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: eepro100-napi.c:1927:
+^I^I^I * point to an empty entry or something $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: eepro100-napi.c:1931:
+				outw(0x5000,ioaddr + SCBStatus);
 				           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#508: FILE: eepro100-napi.c:1934:
+					outw(RxResumeNoResources,ioaddr+SCBCmd);
 					                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#508: FILE: eepro100-napi.c:1934:
+					outw(RxResumeNoResources,ioaddr+SCBCmd);
 					                               ^

CHECK:CAMELCASE: Avoid CamelCase: <RxResumeNoResources>
#508: FILE: eepro100-napi.c:1934:
+					outw(RxResumeNoResources,ioaddr+SCBCmd);

ERROR:SPACING: space required after that close brace '}'
#510: FILE: eepro100-napi.c:1936:
+				}else if ((intr_status & 0x3c) == 0x8) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: eepro100-napi.c:1937:
+^I^I^I^I^Iif (speedo_debug > 4) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#512: FILE: eepro100-napi.c:1938:
+						printk("No resource,reset\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: eepro100-napi.c:1946:
+^I^Iif (--sp->curr_work_limit < 0) $

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#534: FILE: eepro100-napi.c:2016:
+			received ++;
 			         ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#585: FILE: eepro100-napi-proc.c:594:
+int __devinit speedo_create_proc_subdir(struct net_device *sp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#585: FILE: eepro100-napi-proc.c:594:
+int __devinit speedo_create_proc_subdir(struct net_device *sp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#586: FILE: eepro100-napi-proc.c:595:
+void speedo_remove_proc_subdir(struct net_device *sp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#599: FILE: eepro100-napi-proc.c:902:
+		printk(KERN_ERR "Failed to create proc directory for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: eepro100-napi-proc.c:903:
+		printk(KERN_ERR "Failed to create proc directory for %s\n",
+				dev->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: eepro100-napi-proc.c:904:
+^I}              $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#613: FILE: eepro100-napi-proc.c:1911:
+static struct proc_dir_entry *adapters_proc_dir = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: eepro100-napi-proc.c:1917:
+#define WRITE_BUF_MAX_LEN 20^I$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#623: FILE: eepro100-napi-proc.c:1921:
+#define sp_off(off) (unsigned long)(offsetof(struct speedo_private, off))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#625: FILE: eepro100-napi-proc.c:1923:
+typedef struct _speedo_proc_entry {

CHECK:SPACING: No space is necessary after a cast
#667: FILE: eepro100-napi-proc.c:1965:
+		val = *((unsigned long *) data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: eepro100-napi-proc.c:1972:
+read_ulonglong(char *page, char **start, off_t off,
+	   int count, int *eof, unsigned long long ll)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: eepro100-napi-proc.c:1983:
+read_gen_ulonglong(char *page, char **start, off_t off,
+	       int count, int *eof, void *data)

CHECK:SPACING: No space is necessary after a cast
#690: FILE: eepro100-napi-proc.c:1988:
+		val = *((unsigned long long *) data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: eepro100-napi-proc.c:1995:
+set_debug(struct file *file, const char *buffer,
+		    unsigned long count, void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#700: FILE: eepro100-napi-proc.c:1998:
+^Iif (speedo_debug == 1) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: eepro100-napi-proc.c:2007:
+_speedo_show_state(struct file *file, const char *buffer,
+		    unsigned long count, void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: eepro100-napi-proc.c:2009:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#711: FILE: eepro100-napi-proc.c:2009:
+{
+	

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: eepro100-napi-proc.c:2020:
+	{"poll_switch",read_gen_ulong,0,sp_off(poll_switch)},
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: eepro100-napi-proc.c:2020:
+	{"poll_switch",read_gen_ulong,0,sp_off(poll_switch)},
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: eepro100-napi-proc.c:2020:
+	{"poll_switch",read_gen_ulong,0,sp_off(poll_switch)},
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: eepro100-napi-proc.c:2021:
+	{"failed_poll_switch",read_gen_ulong,0,sp_off(failed_poll_switch)},
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: eepro100-napi-proc.c:2021:
+	{"failed_poll_switch",read_gen_ulong,0,sp_off(failed_poll_switch)},
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: eepro100-napi-proc.c:2021:
+	{"failed_poll_switch",read_gen_ulong,0,sp_off(failed_poll_switch)},
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: eepro100-napi-proc.c:2022:
+	{"done_poll",read_gen_ulong,0,sp_off(done_poll)},
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: eepro100-napi-proc.c:2022:
+	{"done_poll",read_gen_ulong,0,sp_off(done_poll)},
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: eepro100-napi-proc.c:2022:
+	{"done_poll",read_gen_ulong,0,sp_off(done_poll)},
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: eepro100-napi-proc.c:2023:
+	{"notdone_poll",read_gen_ulong,0,sp_off(notdone_poll)},
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: eepro100-napi-proc.c:2023:
+	{"notdone_poll",read_gen_ulong,0,sp_off(notdone_poll)},
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: eepro100-napi-proc.c:2023:
+	{"notdone_poll",read_gen_ulong,0,sp_off(notdone_poll)},
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: eepro100-napi-proc.c:2024:
+	{"empty_poll",read_gen_ulong,0,sp_off(empty_poll)},
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: eepro100-napi-proc.c:2024:
+	{"empty_poll",read_gen_ulong,0,sp_off(empty_poll)},
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: eepro100-napi-proc.c:2024:
+	{"empty_poll",read_gen_ulong,0,sp_off(empty_poll)},
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: eepro100-napi-proc.c:2025:
+	{"soft_reset_count",read_gen_ulong,0,sp_off(soft_reset_count)},
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: eepro100-napi-proc.c:2025:
+	{"soft_reset_count",read_gen_ulong,0,sp_off(soft_reset_count)},
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: eepro100-napi-proc.c:2025:
+	{"soft_reset_count",read_gen_ulong,0,sp_off(soft_reset_count)},
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: eepro100-napi-proc.c:2026:
+	{"rx_resume_count",read_gen_ulong,0,sp_off(rx_resume_count)},
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: eepro100-napi-proc.c:2026:
+	{"rx_resume_count",read_gen_ulong,0,sp_off(rx_resume_count)},
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: eepro100-napi-proc.c:2026:
+	{"rx_resume_count",read_gen_ulong,0,sp_off(rx_resume_count)},
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: eepro100-napi-proc.c:2027:
+	{"alloc_fail",read_gen_ulong,0,sp_off(alloc_fail)},
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: eepro100-napi-proc.c:2027:
+	{"alloc_fail",read_gen_ulong,0,sp_off(alloc_fail)},
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: eepro100-napi-proc.c:2027:
+	{"alloc_fail",read_gen_ulong,0,sp_off(alloc_fail)},
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#730: FILE: eepro100-napi-proc.c:2028:
+	{"poll_cycles",read_gen_ulonglong,0,sp_off(poll_cycles)},
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#730: FILE: eepro100-napi-proc.c:2028:
+	{"poll_cycles",read_gen_ulonglong,0,sp_off(poll_cycles)},
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#730: FILE: eepro100-napi-proc.c:2028:
+	{"poll_cycles",read_gen_ulonglong,0,sp_off(poll_cycles)},
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#731: FILE: eepro100-napi-proc.c:2029:
+	{"fastroute_hit",read_gen_ulonglong,0,sp_off(fastroute_hit)},
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#731: FILE: eepro100-napi-proc.c:2029:
+	{"fastroute_hit",read_gen_ulonglong,0,sp_off(fastroute_hit)},
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#731: FILE: eepro100-napi-proc.c:2029:
+	{"fastroute_hit",read_gen_ulonglong,0,sp_off(fastroute_hit)},
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: eepro100-napi-proc.c:2030:
+	{"fastroute_success",read_gen_ulonglong,0,sp_off(fastroute_success)},
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: eepro100-napi-proc.c:2030:
+	{"fastroute_success",read_gen_ulonglong,0,sp_off(fastroute_success)},
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: eepro100-napi-proc.c:2030:
+	{"fastroute_success",read_gen_ulonglong,0,sp_off(fastroute_success)},
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#733: FILE: eepro100-napi-proc.c:2031:
+	{"fastroute_defer",read_gen_ulonglong,0,sp_off(fastroute_defer)},
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#733: FILE: eepro100-napi-proc.c:2031:
+	{"fastroute_defer",read_gen_ulonglong,0,sp_off(fastroute_defer)},
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#733: FILE: eepro100-napi-proc.c:2031:
+	{"fastroute_defer",read_gen_ulonglong,0,sp_off(fastroute_defer)},
 	                                       ^

CHECK:SPACING: No space is necessary after a cast
#758: FILE: eepro100-napi-proc.c:2056:
+				val = ((char *) sp) + pe->offset;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#773: FILE: eepro100-napi-proc.c:2071:
+static struct proc_dir_entry * __devinit

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#775: FILE: eepro100-napi-proc.c:2073:
+	       read_proc_t * read_proc, write_proc_t * write_proc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#775: FILE: eepro100-napi-proc.c:2073:
+	       read_proc_t * read_proc, write_proc_t * write_proc)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#781: FILE: eepro100-napi-proc.c:2079:
+		mode |= S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#782: FILE: eepro100-napi-proc.c:2080:
+		if (read_proc) {
+			mode |= S_IRUSR;
+		}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#783: FILE: eepro100-napi-proc.c:2081:
+			mode |= S_IRUSR;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#787: FILE: eepro100-napi-proc.c:2085:
+		mode |= S_IRUGO;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#790: FILE: eepro100-napi-proc.c:2088:
+	if (!(pdep = create_proc_entry(name, mode, parent)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#808: FILE: eepro100-napi-proc.c:2106:
+	if (adapters_proc_dir == NULL) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!adapters_proc_dir"
#808: FILE: eepro100-napi-proc.c:2106:
+	if (adapters_proc_dir == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#813: FILE: eepro100-napi-proc.c:2111:
+	strncpy(info, dev->name, sizeof (info));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#814: FILE: eepro100-napi-proc.c:2112:
+	strncat(info + len, ".info", sizeof (info) - len);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#834: FILE: eepro100-napi-proc.c:2132:
+int __devinit

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#850: FILE: eepro100-napi-proc.c:2148:
+	strncpy(info, dev->name, sizeof (info));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#852: FILE: eepro100-napi-proc.c:2150:
+	strncat(info + len, ".info", sizeof (info) - len);

CHECK:SPACING: No space is necessary after a cast
#874: FILE: eepro100-napi-proc.c:2172:
+			data = ((char *) sp) + pe->offset;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#908: FILE: eepro100-napi-proc.c:2206:
+	     adapters_proc_dir; adapters_proc_dir = adapters_proc_dir->next) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapters_proc_dir->namelen == len'
#909: FILE: eepro100-napi-proc.c:2207:
+		if ((adapters_proc_dir->namelen == len) &&
+		    (!memcmp(adapters_proc_dir->name, ADAPTERS_PROC_DIR, len)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#939: FILE: eepro100-napi-proc.c:2237:
+	if (adapters_proc_dir == NULL) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!adapters_proc_dir"
#939: FILE: eepro100-napi-proc.c:2237:
+	if (adapters_proc_dir == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around de->name
#946: FILE: eepro100-napi-proc.c:2244:
+		if (*(de->name) != '.')

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->name'
#946: FILE: eepro100-napi-proc.c:2244:
+		if (*(de->name) != '.')

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450487.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 36 warnings, 34 checks, 859 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450487.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
