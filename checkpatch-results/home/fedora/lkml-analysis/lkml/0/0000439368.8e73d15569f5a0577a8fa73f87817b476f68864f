WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#73: FILE: net/sunrpc/sunrpc_syms.c:107:
+EXPORT_SYMBOL(gss_get_name);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#74: FILE: net/sunrpc/sunrpc_syms.c:108:
+EXPORT_SYMBOL(gss_get_num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/sunrpc/clnt.h:170:
+extern void gss_put(struct gss_cacheent *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/sunrpc/clnt.h:171:
+extern int gss_get_name(int type, uid_t id, struct gss_cacheent **pp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/sunrpc/clnt.h:172:
+extern int gss_get_num(int type, unsigned int len, const unsigned char *name, uid_t *pp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/sunrpc/clnt.h:173:
+extern void gss_cache_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/sunrpc/clnt.h:174:
+extern void gss_cache_exit(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: net/sunrpc/gssd_clnt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#116: FILE: net/sunrpc/gssd_clnt.c:2:
+ *  net/sunrpc/gssd_clnt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#140: FILE: net/sunrpc/gssd_clnt.c:26:
+typedef struct xdr_netobj    GSS_BUFFER_T;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#147: FILE: net/sunrpc/gssd_clnt.c:33:
+/*
+ * GSSD gss.x definitions

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_create', this function's name, in a string
#171: FILE: net/sunrpc/gssd_clnt.c:57:
+	dprintk("RPC: gssd_create()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#182: FILE: net/sunrpc/gssd_clnt.c:68:
+	if(xprt == NULL)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xprt"
#182: FILE: net/sunrpc/gssd_clnt.c:68:
+	if(xprt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#199: FILE: net/sunrpc/gssd_clnt.c:85:
+/*
+ * Convert Unix/GSS username/principal to Unix UID.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_name_to_uid', this function's name, in a string
#207: FILE: net/sunrpc/gssd_clnt.c:93:
+	dprintk("RPC: gssd_name_to_uid \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#207: FILE: net/sunrpc/gssd_clnt.c:93:
+	dprintk("RPC: gssd_name_to_uid \n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: net/sunrpc/gssd_clnt.c:94:
+	if (!(gssd_clnt = gssd_create())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#209: FILE: net/sunrpc/gssd_clnt.c:95:
+		printk("RPC: couldn't create gssd client\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#216: FILE: net/sunrpc/gssd_clnt.c:102:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_name_to_uid', this function's name, in a string
#219: FILE: net/sunrpc/gssd_clnt.c:105:
+	dprintk("RPC: gssd_name_to_uid(%.*s) = %d\n",

CHECK:SPACING: No space is necessary after a cast
#220: FILE: net/sunrpc/gssd_clnt.c:106:
+		(int) name->len, name->name, *uidp);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#227: FILE: net/sunrpc/gssd_clnt.c:113:
+/*
+ * Convert Unix UID to Unix username.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#235: FILE: net/sunrpc/gssd_clnt.c:121:
+	if (!(gssd_clnt = gssd_create())) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#236: FILE: net/sunrpc/gssd_clnt.c:122:
+		printk("RPC: couldn't create gssd client\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#242: FILE: net/sunrpc/gssd_clnt.c:128:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_uid_to_name', this function's name, in a string
#245: FILE: net/sunrpc/gssd_clnt.c:131:
+	dprintk("RPC: gssd_uid_to_name(%d) = %.*s\n",

CHECK:SPACING: No space is necessary after a cast
#246: FILE: net/sunrpc/gssd_clnt.c:132:
+		*uid, (int) name->len, name->name);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#253: FILE: net/sunrpc/gssd_clnt.c:139:
+/*
+ * Convert Unix group name to Unix GID.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#261: FILE: net/sunrpc/gssd_clnt.c:147:
+	if (!(gssd_clnt = gssd_create())) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: net/sunrpc/gssd_clnt.c:148:
+		printk("RPC: couldn't create gssd client\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#268: FILE: net/sunrpc/gssd_clnt.c:154:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_name_to_gid', this function's name, in a string
#271: FILE: net/sunrpc/gssd_clnt.c:157:
+	dprintk("RPC: gssd_name_to_gid(%.*s) = %d\n",

CHECK:SPACING: No space is necessary after a cast
#272: FILE: net/sunrpc/gssd_clnt.c:158:
+		(int) name->len, name->name, *gidp);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#279: FILE: net/sunrpc/gssd_clnt.c:165:
+/*
+ * Convert Unix GID to Unix name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#287: FILE: net/sunrpc/gssd_clnt.c:173:
+	if (!(gssd_clnt = gssd_create())) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: net/sunrpc/gssd_clnt.c:174:
+		printk("RPC: couldn't create gssd client\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#294: FILE: net/sunrpc/gssd_clnt.c:180:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gssd_gid_to_name', this function's name, in a string
#297: FILE: net/sunrpc/gssd_clnt.c:183:
+	dprintk("RPC: gssd_gid_to_name(%d) = %.*s\n",

CHECK:SPACING: No space is necessary after a cast
#298: FILE: net/sunrpc/gssd_clnt.c:184:
+		*gid, (int) name->len, name->name);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#305: FILE: net/sunrpc/gssd_clnt.c:191:
+/*
+ * XDR encode/decode functions for GSSD

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#321: FILE: net/sunrpc/gssd_clnt.c:207:
+	if (!(name->name = kmalloc(len, GFP_KERNEL)))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xdr_decode_name', this function's name, in a string
#326: FILE: net/sunrpc/gssd_clnt.c:212:
+	dprintk("RPC: xdr_decode_name() = (%.*s)\n", (int)name->len, name->name);

CHECK:SPACING: No space is necessary after a cast
#335: FILE: net/sunrpc/gssd_clnt.c:221:
+	dprintk("RPC: xdr_encode_name(%.*s)\n", (int) name->len, name->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xdr_encode_name', this function's name, in a string
#335: FILE: net/sunrpc/gssd_clnt.c:221:
+	dprintk("RPC: xdr_encode_name(%.*s)\n", (int) name->len, name->name);

CHECK:SPACING: No space is necessary after a cast
#350: FILE: net/sunrpc/gssd_clnt.c:236:
+	*idp = (u32) ntohl(*p);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xdr_decode_id', this function's name, in a string
#351: FILE: net/sunrpc/gssd_clnt.c:237:
+	dprintk("RPC: xdr_decode_id() = (%d)\n", *idp);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xdr_encode_id', this function's name, in a string
#358: FILE: net/sunrpc/gssd_clnt.c:244:
+	dprintk("RPC: xdr_encode_id(%d)\n", *idp);

CHECK:SPACING: No space is necessary after a cast
#359: FILE: net/sunrpc/gssd_clnt.c:245:
+	*p++ = (u32) htonl(*idp);

CHECK:SPACING: No space is necessary after a cast
#367: FILE: net/sunrpc/gssd_clnt.c:253:
+		(kxdrproc_t) xdr_error,

CHECK:SPACING: No space is necessary after a cast
#368: FILE: net/sunrpc/gssd_clnt.c:254:
+		(kxdrproc_t) xdr_error,	0, 0 },

CHECK:SPACING: No space is necessary after a cast
#370: FILE: net/sunrpc/gssd_clnt.c:256:
+		(kxdrproc_t) xdr_encode_name,

CHECK:SPACING: No space is necessary after a cast
#371: FILE: net/sunrpc/gssd_clnt.c:257:
+		(kxdrproc_t) xdr_decode_id, RPC_MAXNETNAMELEN >> 2, 1 },

CHECK:SPACING: No space is necessary after a cast
#373: FILE: net/sunrpc/gssd_clnt.c:259:
+		(kxdrproc_t) xdr_encode_id,

CHECK:SPACING: No space is necessary after a cast
#374: FILE: net/sunrpc/gssd_clnt.c:260:
+		(kxdrproc_t) xdr_decode_name, RPC_MAXNETNAMELEN >> 2, 1 },

CHECK:SPACING: No space is necessary after a cast
#376: FILE: net/sunrpc/gssd_clnt.c:262:
+		(kxdrproc_t) xdr_encode_name,

CHECK:SPACING: No space is necessary after a cast
#377: FILE: net/sunrpc/gssd_clnt.c:263:
+		(kxdrproc_t) xdr_decode_id, RPC_MAXNETNAMELEN >> 2, 1 },

CHECK:SPACING: No space is necessary after a cast
#379: FILE: net/sunrpc/gssd_clnt.c:265:
+		(kxdrproc_t) xdr_encode_id,

CHECK:SPACING: No space is necessary after a cast
#380: FILE: net/sunrpc/gssd_clnt.c:266:
+		(kxdrproc_t) xdr_decode_name, RPC_MAXNETNAMELEN >> 2, 1 }

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(gssd_procedures)
#385: FILE: net/sunrpc/gssd_clnt.c:271:
+	sizeof(gssd_procedures) / sizeof(gssd_procedures[0]),

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#389: FILE: net/sunrpc/gssd_clnt.c:275:
+static struct rpc_version *	gssd_version[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(gssd_version)
#399: FILE: net/sunrpc/gssd_clnt.c:285:
+	sizeof(gssd_version) / sizeof(gssd_version[0]),

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#405: FILE: net/sunrpc/gssd_clnt.c:291:
+/*
+ * The rest of this file is concerned with a cache for

CHECK:BIT_MACRO: Prefer using the BIT macro
#425: FILE: net/sunrpc/gssd_clnt.c:311:
+#define GSS_HASH_SIZE		(1 << GSS_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#471: FILE: net/sunrpc/gssd_clnt.c:357:
+/*
+ * I didn't bother putting these in a slab cache, since whenever

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: net/sunrpc/gssd_clnt.c:366:
+	BUG_ON(namelen > XDR_MAX_NETOBJ);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#482: FILE: net/sunrpc/gssd_clnt.c:368:
+	if (!(p = kmalloc(sizeof(*p), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#492: FILE: net/sunrpc/gssd_clnt.c:378:
+	if (!(p->name.name = kmalloc(namelen, GFP_KERNEL))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: net/sunrpc/gssd_clnt.c:388:
+	BUG_ON(atomic_read(&p->refcount) == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: net/sunrpc/gssd_clnt.c:392:
+	BUG_ON(!list_empty(&p->name_hash) || !list_empty(&p->id_hash));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#514: FILE: net/sunrpc/gssd_clnt.c:400:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->name.len == len'
#554: FILE: net/sunrpc/gssd_clnt.c:440:
+		if ((p->name.len == len) && !memcmp(p->name.name, name, len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#579: FILE: net/sunrpc/gssd_clnt.c:465:
+	if ((p = gss_searchbyid(map, id))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#587: FILE: net/sunrpc/gssd_clnt.c:473:
+	if (!(p = gss_alloc(0)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#602: FILE: net/sunrpc/gssd_clnt.c:488:
+	if ((q = gss_searchbyid(map, id))) {  /* retry the search, since we slept */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#641: FILE: net/sunrpc/gssd_clnt.c:527:
+	if ((p = gss_searchbyname(map, len, name, hash))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#648: FILE: net/sunrpc/gssd_clnt.c:534:
+	if (!(p = gss_alloc(len)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: net/sunrpc/gssd_clnt.c:550:
+	if ((q = gss_searchbyname(map, len, name, hash))) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#691: FILE: net/sunrpc/gssd_clnt.c:577:
+/*
+ * Local variables:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439368.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 38 warnings, 26 checks, 648 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439368.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
