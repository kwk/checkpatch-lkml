WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#21: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#22: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
#   2004/02/11 13:35:46-06:00 shaggy@austin.ibm.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
#   JFS: get_UCSname does not need nls_tab argument

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#   This is a minor code cleanup.  get_UCSname can get nls_tab by

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#   following the dentry to the superblock.  This makes the calling code

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#   simpler and prettier.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#32: 
--- a/fs/jfs/jfs_unicode.c	Thu Feb 12 14:43:25 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#49: FILE: fs/jfs/jfs_unicode.c:85:
+int get_UCSname(struct component_name * uniName, struct dentry *dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <get_UCSname>
#49: FILE: fs/jfs/jfs_unicode.c:85:
+int get_UCSname(struct component_name * uniName, struct dentry *dentry)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <uniName>
#49: FILE: fs/jfs/jfs_unicode.c:85:
+int get_UCSname(struct component_name * uniName, struct dentry *dentry)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: fs/jfs/jfs_unicode.h:33:
+extern int get_UCSname(struct component_name *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct component_name *' should also have an identifier name
#64: FILE: fs/jfs/jfs_unicode.h:33:
+extern int get_UCSname(struct component_name *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#64: FILE: fs/jfs/jfs_unicode.h:33:
+extern int get_UCSname(struct component_name *, struct dentry *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#76: FILE: fs/jfs/namei.c:81:
+	if ((rc = get_UCSname(&dname, dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#85: FILE: fs/jfs/namei.c:207:
+	if ((rc = get_UCSname(&dname, dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#94: FILE: fs/jfs/namei.c:335:
+	if ((rc = get_UCSname(&dname, dentry))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#94: FILE: fs/jfs/namei.c:335:
+	if ((rc = get_UCSname(&dname, dentry))) {
 		goto out;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#103: FILE: fs/jfs/namei.c:454:
+	if ((rc = get_UCSname(&dname, dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#112: FILE: fs/jfs/namei.c:789:
+	if ((rc = get_UCSname(&dname, dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#121: FILE: fs/jfs/namei.c:869:
+	if ((rc = get_UCSname(&dname, dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#131: FILE: fs/jfs/namei.c:1072:
+	if ((rc = get_UCSname(&old_dname, old_dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#136: FILE: fs/jfs/namei.c:1075:
+	if ((rc = get_UCSname(&new_dname, new_dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#145: FILE: fs/jfs/namei.c:1330:
+	if ((rc = get_UCSname(&dname, dentry)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#155: FILE: fs/jfs/namei.c:1412:
+		if ((rc = get_UCSname(&key, dentry)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000304432.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 13 warnings, 3 checks, 107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000304432.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
