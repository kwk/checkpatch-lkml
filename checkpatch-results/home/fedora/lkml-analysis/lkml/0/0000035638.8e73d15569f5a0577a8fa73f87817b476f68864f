WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: include/linux/in.h:43:
+  IPPROTO_ETHERIP = 97,^I^I/* Ethernet over IPv4 protocol */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: net/ipv4/etherip.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#75: FILE: net/ipv4/etherip.c:5:
+ * networks. This is especially usefull together with the bridging
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: net/ipv4/etherip.c:18:
+#include <linux/capability.h>                           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#115: FILE: net/ipv4/etherip.c:45:
+/*
+ * These 2 defines are taken from ipip.c - if it's good enough for them

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#119: FILE: net/ipv4/etherip.c:49:
+#define HASH(addr)       ((addr^(addr>>4))&0xF)
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#119: FILE: net/ipv4/etherip.c:49:
+#define HASH(addr)       ((addr^(addr>>4))&0xF)
                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#119: FILE: net/ipv4/etherip.c:49:
+#define HASH(addr)       ((addr^(addr>>4))&0xF)
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#119: FILE: net/ipv4/etherip.c:49:
+#define HASH(addr)       ((addr^(addr>>4))&0xF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#119: FILE: net/ipv4/etherip.c:49:
+#define HASH(addr)       ((addr^(addr>>4))&0xF)

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#130: FILE: net/ipv4/etherip.c:60:
+	struct ip_tunnel_parm parms;
 	                      ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#144: FILE: net/ipv4/etherip.c:74:
+	unsigned h = HASH(tun->parms.iph.daddr);
 	                       ^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#144: FILE: net/ipv4/etherip.c:74:
+	unsigned h = HASH(tun->parms.iph.daddr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: net/ipv4/etherip.c:75:
+	unsigned h = HASH(tun->parms.iph.daddr);
+	list_add_tail(&tun->list, &tunnels[h]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#155: FILE: net/ipv4/etherip.c:85:
+static struct etherip_tunnel* etherip_tunnel_find(struct ip_tunnel_parm *p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: net/ipv4/etherip.c:88:
+	unsigned h = HASH(p->iph.daddr);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#161: FILE: net/ipv4/etherip.c:91:
+		if (ret->parms.iph.daddr == p->iph.daddr)
 		         ^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#168: FILE: net/ipv4/etherip.c:98:
+static struct etherip_tunnel* etherip_tunnel_locate(u32 remote)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: net/ipv4/etherip.c:101:
+	unsigned h = HASH(remote);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#174: FILE: net/ipv4/etherip.c:104:
+		if (ret->parms.iph.daddr == remote)
 		         ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: net/ipv4/etherip.c:126:
+ * packet */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#213: FILE: net/ipv4/etherip.c:143:
+	fl.oif               = tunnel->parms.link;
 	                               ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#215: FILE: net/ipv4/etherip.c:145:
+	fl.nl_u.ip4_u.daddr  = tunnel->parms.iph.daddr;
 	                               ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#216: FILE: net/ipv4/etherip.c:146:
+	fl.nl_u.ip4_u.saddr  = tunnel->parms.iph.saddr;
 	                               ^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#230: FILE: net/ipv4/etherip.c:160:
+	max_headroom = (LL_RESERVED_SPACE(tdev)+sizeof(struct iphdr)
 	                                       ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#234: FILE: net/ipv4/etherip.c:164:
+	if (skb_headroom(skb) < max_headroom || skb_cloned(skb)
+			|| skb_shared(skb)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: net/ipv4/etherip.c:166:
+		struct sk_buff *skn = skb_realloc_headroom(skb, max_headroom);
+		if (!skn) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: net/ipv4/etherip.c:179:
+	skb->nh.raw = skb_push(skb, sizeof(struct iphdr)+ETHERIP_HLEN);
 	                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: net/ipv4/etherip.c:183:
+        if (skb->dst)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: net/ipv4/etherip.c:183:
+        if (skb->dst)$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#269: FILE: net/ipv4/etherip.c:199:
+	iph->ihl = sizeof(struct iphdr)>>2;
 	                               ^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#272: FILE: net/ipv4/etherip.c:202:
+	iph->tos = tunnel->parms.iph.tos & INET_ECN_MASK;
 	                   ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#275: FILE: net/ipv4/etherip.c:205:
+	iph->ttl = tunnel->parms.iph.ttl;
 	                   ^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#280: FILE: net/ipv4/etherip.c:210:
+	*((u16*)(skb->nh.raw + sizeof(struct iphdr))) = ntohs(ETHERIP_HEADER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: net/ipv4/etherip.c:232:
+	struct etherip_tunnel *ethip = netdev_priv(dev);
+	return &ethip->stats;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: net/ipv4/etherip.c:250:
+ * information */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: net/ipv4/etherip.c:252:
+static int etherip_tunnel_ioctl(struct net_device *dev, struct ifreq *ifr,
+		int cmd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: net/ipv4/etherip.c:260:
+
+

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#334: FILE: net/ipv4/etherip.c:264:
+		if (copy_to_user(ifr->ifr_ifru.ifru_data, &t->parms,
 		                                              ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#335: FILE: net/ipv4/etherip.c:265:
+				sizeof(t->parms)))
 				          ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: net/ipv4/etherip.c:265:
+		if (copy_to_user(ifr->ifr_ifru.ifru_data, &t->parms,
+				sizeof(t->parms)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: net/ipv4/etherip.c:280:
+		if (copy_from_user(&p, ifr->ifr_ifru.ifru_data,
+					sizeof(p)))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#352: FILE: net/ipv4/etherip.c:282:
+		p.i_flags = p.o_flags = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#354: FILE: net/ipv4/etherip.c:284:
+		if ((err = etherip_param_check(&p)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t"
#360: FILE: net/ipv4/etherip.c:290:
+		if (t != NULL && t->dev != dev)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#364: FILE: net/ipv4/etherip.c:294:
+		if (cmd == SIOCADDTUNNEL) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#365: FILE: net/ipv4/etherip.c:295:
+			p.name[IFNAMSIZ-1] = 0;
 			               ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#371: FILE: net/ipv4/etherip.c:301:
+			tmp_dev = alloc_netdev(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dev"
#376: FILE: net/ipv4/etherip.c:306:
+			if (tmp_dev == NULL)

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#388: FILE: net/ipv4/etherip.c:318:
+			memcpy(&(t->parms), &p, sizeof(p));
 			            ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->parms
#388: FILE: net/ipv4/etherip.c:318:
+			memcpy(&(t->parms), &p, sizeof(p));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: net/ipv4/etherip.c:322:
+			if (copy_to_user(ifr->ifr_ifru.ifru_data, &p,
+						sizeof(p)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: net/ipv4/etherip.c:324:
+^I^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#405: FILE: net/ipv4/etherip.c:335:
+			if ((t = netdev_priv(dev)) == NULL)

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#410: FILE: net/ipv4/etherip.c:340:
+			memcpy(&(t->parms), &p, sizeof(p));
 			            ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->parms
#410: FILE: net/ipv4/etherip.c:340:
+			memcpy(&(t->parms), &p, sizeof(p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: net/ipv4/etherip.c:357:
+		if (copy_from_user(&p, ifr->ifr_ifru.ifru_data,
+					sizeof(p)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#431: FILE: net/ipv4/etherip.c:361:
+		if (dev == etherip_tunnel_dev) {
[...]
+		} else
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#433: FILE: net/ipv4/etherip.c:363:
+			if (t == NULL) {
+				goto out;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t"
#433: FILE: net/ipv4/etherip.c:363:
+			if (t == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#436: FILE: net/ipv4/etherip.c:366:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: net/ipv4/etherip.c:387:
+ * the tunnel to be added to a bridge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#476: FILE: net/ipv4/etherip.c:406:
+ * interface modes */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tunnel"
#488: FILE: net/ipv4/etherip.c:418:
+	if (tunnel == NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#496: FILE: net/ipv4/etherip.c:426:
+	ehdr = (struct ethhdr*)skb->data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: net/ipv4/etherip.c:439:
+	if (skb->pkt_type == PACKET_MULTICAST &&
+			(dev->mc_count > 0 || dev->flags & IFF_ALLMULTI))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#540: FILE: net/ipv4/etherip.c:470:
+ * device */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#546: FILE: net/ipv4/etherip.c:476:
+	printk(KERN_INFO BANNER1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#552: FILE: net/ipv4/etherip.c:482:
+		printk(KERN_ERR "etherip: can't add protocol\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: net/ipv4/etherip.c:487:
+	etherip_tunnel_dev = alloc_netdev(sizeof(struct etherip_tunnel),
+			"ethip0",

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#568: FILE: net/ipv4/etherip.c:498:
+	strcpy(p->parms.name, "ethip0");
 	          ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#569: FILE: net/ipv4/etherip.c:499:
+	p->parms.iph.protocol = IPPROTO_ETHERIP;
 	   ^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#571: FILE: net/ipv4/etherip.c:501:
+	if ((err = register_netdev(etherip_tunnel_dev)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#608: FILE: net/ipv4/etherip.c:538:
+		printk(KERN_ERR "etherip: can't remove protocol\n");

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#627: FILE: net/ipv4/Kconfig:282:
+	 protocol defined in RFC 3378. This is especially usefull together with
 	                                                  ^^^^^^^

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#655: FILE: MAINTAINERS:1021:
+P:	Joerg Roedel
+M:	joro@zlug.org

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 37 warnings, 29 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
