CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: arch/i386/kernel/crash.c:34:
+static u32 *append_elf_note(u32 *buf,
+	char *name, unsigned type, void *data, size_t data_len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#70: FILE: arch/i386/kernel/crash.c:34:
+	char *name, unsigned type, void *data, size_t data_len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: arch/i386/kernel/crash.c:37:
+	struct elf_note note;
+	note.n_namesz = strlen(name) + 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#77: FILE: arch/i386/kernel/crash.c:41:
+	buf += (sizeof(note) +3)/4;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#77: FILE: arch/i386/kernel/crash.c:41:
+	buf += (sizeof(note) +3)/4;
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#79: FILE: arch/i386/kernel/crash.c:43:
+	buf += (note.n_namesz + 3)/4;
 	                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#81: FILE: arch/i386/kernel/crash.c:45:
+	buf += (note.n_descsz + 3)/4;
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: arch/i386/kernel/crash.c:52:
+	struct elf_note note;
+	note.n_namesz = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: arch/i386/kernel/crash.c:58:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: arch/i386/kernel/crash.c:63:
+	u32 *buf;
+	if ((cpu < 0) || (cpu >= NR_CPUS)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#99: FILE: arch/i386/kernel/crash.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#99: FILE: arch/i386/kernel/crash.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#99: FILE: arch/i386/kernel/crash.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS)) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#99: FILE: arch/i386/kernel/crash.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: arch/i386/kernel/crash.c:69:
+^I * on the data to indicate what information I have $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#107: FILE: arch/i386/kernel/crash.c:71:
+	 * all of that that no need to invent something new.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: arch/i386/kernel/crash.c:78:
+	buf = append_elf_note(buf, "CORE", NT_PRSTATUS,
+		&prstatus, sizeof(prstatus));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#129: FILE: arch/i386/kernel/crash.c:93:
+	__asm__ __volatile__("movw %%ss, %%ax;" :"=a"(regs->xss));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#130: FILE: arch/i386/kernel/crash.c:94:
+	__asm__ __volatile__("movw %%cs, %%ax;" :"=a"(regs->xcs));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#131: FILE: arch/i386/kernel/crash.c:95:
+	__asm__ __volatile__("movw %%ds, %%ax;" :"=a"(regs->xds));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#132: FILE: arch/i386/kernel/crash.c:96:
+	__asm__ __volatile__("movw %%es, %%ax;" :"=a"(regs->xes));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#133: FILE: arch/i386/kernel/crash.c:97:
+	__asm__ __volatile__("pushfl; popl %0" :"=m"(regs->eflags));
 	                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: arch/i386/kernel/crash.c:106:
+	int cpu;
+	cpu = smp_processor_id();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 8 warnings, 9 checks, 96 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
