ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#46: 
--- a/include/linux/init.h      2004-04-03 21:36:16.000000000 -0600

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#52: FILE: include/linux/init.h:46:
+#define __initrodata   __attribute__ ((__section__ (".ro.init.data")))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#52: FILE: include/linux/init.h:46:
+#define __initrodata   __attribute__ ((__section__ (".ro.init.data")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".ro.init.data") over __attribute__((__section__(".ro.init.data")))
#52: FILE: include/linux/init.h:46:
+#define __initrodata   __attribute__ ((__section__ (".ro.init.data")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#54: FILE: include/linux/init.h:48:
+#define __exitrodata   __attribute__ ((__section__(".ro.exit.data")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".ro.exit.data") over __attribute__((__section__(".ro.exit.data")))
#54: FILE: include/linux/init.h:48:
+#define __exitrodata   __attribute__ ((__section__(".ro.exit.data")))

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#56: FILE: include/linux/init.h:49:
(".exitcall.exit")))

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#61: FILE: include/linux/init.h:211:
  #define __devinit __init

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#62: FILE: include/linux/init.h:212:
  #define __devinitdata __initdata

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#64: FILE: include/linux/init.h:214:
  #define __devexit __exit

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/linux/init.h:238:
+ * The pkinit function can be used in place of printk in __init $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: include/linux/init.h:239:
+ * and the pkdevinit function can be used in __devinit and pkdevexit $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: include/linux/init.h:240:
+ * be used in __devexit functions in order to place the format string $

WARNING:TYPO_SPELLING: 'appripriate' may be misspelled - perhaps 'appropriate'?
#83: FILE: include/linux/init.h:241:
+ * the appripriate section so they can be reclaimed or discarded as
        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: include/linux/init.h:248:
+#define        _pk(typ, fstr, x...) do { static const char _f[] typ = $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/linux/init.h:249:
+       printk(_f, ## x); } while (0)$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: include/linux/init.h:249:
+       printk(_f, ## x); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#92: FILE: include/linux/init.h:249:
+       printk(_f, ## x); } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: include/linux/init.h:253:
+#define pkdevinit(f, x...) printk(f, ## x);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#96: FILE: include/linux/init.h:253:
+#define pkdevinit(f, x...) printk(f, ## x);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#97: FILE: include/linux/init.h:254:
+#define pkdevexit(f, x...) printk(f, ## x);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#97: FILE: include/linux/init.h:254:
+#define pkdevexit(f, x...) printk(f, ## x);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 13 warnings, 0 checks, 70 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
