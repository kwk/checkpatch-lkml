WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: acrypto/acrypto.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#36: FILE: acrypto/acrypto.h:2:
+ * ^Iacrypto.h$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#39: FILE: acrypto/acrypto.h:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#52: FILE: acrypto/acrypto.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#53: FILE: acrypto/acrypto.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: acrypto/acrypto.h:32:
+struct crypto_device_stat $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#67: FILE: acrypto/acrypto.h:33:
+struct crypto_device_stat 
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#89: FILE: acrypto/acrypto.h:55:
+#define dprintk(f, a...) printk(f, ##a)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: acrypto/acrypto.h:56:
+#define dprintka(f, a...) printk(f, ##a)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: acrypto/acrypto.h:62:
+extern void crypto_wake_lb(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#98: FILE: acrypto/acrypto.h:64:
+#define SESSION_COMPLETED	(1<<15)
                          	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: acrypto/acrypto.h:64:
+#define SESSION_COMPLETED	(1<<15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#99: FILE: acrypto/acrypto.h:65:
+#define SESSION_FINISHED	(1<<14)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#99: FILE: acrypto/acrypto.h:65:
+#define SESSION_FINISHED	(1<<14)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#100: FILE: acrypto/acrypto.h:66:
+#define SESSION_STARTED		(1<<13)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#100: FILE: acrypto/acrypto.h:66:
+#define SESSION_STARTED		(1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#101: FILE: acrypto/acrypto.h:67:
+#define SESSION_PROCESSED	(1<<12)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: acrypto/acrypto.h:67:
+#define SESSION_PROCESSED	(1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#102: FILE: acrypto/acrypto.h:68:
+#define SESSION_BINDED		(1<<11)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#102: FILE: acrypto/acrypto.h:68:
+#define SESSION_BINDED		(1<<11)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#103: FILE: acrypto/acrypto.h:69:
+#define SESSION_BROKEN		(1<<10)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: acrypto/acrypto.h:69:
+#define SESSION_BROKEN		(1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#104: FILE: acrypto/acrypto.h:70:
+#define SESSION_FROM_CACHE	(1<<9)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#104: FILE: acrypto/acrypto.h:70:
+#define SESSION_FROM_CACHE	(1<<9)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#106: FILE: acrypto/acrypto.h:72:
+#define session_completed(s)	(s->ci.flags & SESSION_COMPLETED)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#107: FILE: acrypto/acrypto.h:73:
+#define complete_session(s)	do {s->ci.flags |= SESSION_COMPLETED;} while(0)
                            	                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#107: FILE: acrypto/acrypto.h:73:
+#define complete_session(s)	do {s->ci.flags |= SESSION_COMPLETED;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#107: FILE: acrypto/acrypto.h:73:
+#define complete_session(s)	do {s->ci.flags |= SESSION_COMPLETED;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#107: FILE: acrypto/acrypto.h:73:
+#define complete_session(s)	do {s->ci.flags |= SESSION_COMPLETED;} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#108: FILE: acrypto/acrypto.h:74:
+#define uncomplete_session(s)	do {s->ci.flags &= ~SESSION_COMPLETED;} while (0)
                              	                                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#108: FILE: acrypto/acrypto.h:74:
+#define uncomplete_session(s)	do {s->ci.flags &= ~SESSION_COMPLETED;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#108: FILE: acrypto/acrypto.h:74:
+#define uncomplete_session(s)	do {s->ci.flags &= ~SESSION_COMPLETED;} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#110: FILE: acrypto/acrypto.h:76:
+#define session_finished(s)	(s->ci.flags & SESSION_FINISHED)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#111: FILE: acrypto/acrypto.h:77:
+#define finish_session(s)	do {s->ci.flags |= SESSION_FINISHED;} while(0)
                          	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: acrypto/acrypto.h:77:
+#define finish_session(s)	do {s->ci.flags |= SESSION_FINISHED;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#111: FILE: acrypto/acrypto.h:77:
+#define finish_session(s)	do {s->ci.flags |= SESSION_FINISHED;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#111: FILE: acrypto/acrypto.h:77:
+#define finish_session(s)	do {s->ci.flags |= SESSION_FINISHED;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#112: FILE: acrypto/acrypto.h:78:
+#define unfinish_session(s)	do {s->ci.flags &= ~SESSION_FINISHED;} while (0)
                            	                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#112: FILE: acrypto/acrypto.h:78:
+#define unfinish_session(s)	do {s->ci.flags &= ~SESSION_FINISHED;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#112: FILE: acrypto/acrypto.h:78:
+#define unfinish_session(s)	do {s->ci.flags &= ~SESSION_FINISHED;} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#114: FILE: acrypto/acrypto.h:80:
+#define session_started(s)	(s->ci.flags & SESSION_STARTED)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#115: FILE: acrypto/acrypto.h:81:
+#define start_session(s)	do {s->ci.flags |= SESSION_STARTED;} while(0)
                         	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: acrypto/acrypto.h:81:
+#define start_session(s)	do {s->ci.flags |= SESSION_STARTED;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#115: FILE: acrypto/acrypto.h:81:
+#define start_session(s)	do {s->ci.flags |= SESSION_STARTED;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#115: FILE: acrypto/acrypto.h:81:
+#define start_session(s)	do {s->ci.flags |= SESSION_STARTED;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#116: FILE: acrypto/acrypto.h:82:
+#define unstart_session(s)	do {s->ci.flags &= ~SESSION_STARTED;} while (0)
                           	                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#116: FILE: acrypto/acrypto.h:82:
+#define unstart_session(s)	do {s->ci.flags &= ~SESSION_STARTED;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#116: FILE: acrypto/acrypto.h:82:
+#define unstart_session(s)	do {s->ci.flags &= ~SESSION_STARTED;} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#118: FILE: acrypto/acrypto.h:84:
+#define session_is_processed(s)		(s->ci.flags & SESSION_PROCESSED)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#119: FILE: acrypto/acrypto.h:85:
+#define start_process_session(s)	do {s->ci.flags |= SESSION_PROCESSED; s->ci.ptime = jiffies;} while(0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ';' (ctx:VxV)
#119: FILE: acrypto/acrypto.h:85:
+#define start_process_session(s)	do {s->ci.flags |= SESSION_PROCESSED; s->ci.ptime = jiffies;} while(0)
                                 	                                                           ^

ERROR:SPACING: space required before the open parenthesis '('
#119: FILE: acrypto/acrypto.h:85:
+#define start_process_session(s)	do {s->ci.flags |= SESSION_PROCESSED; s->ci.ptime = jiffies;} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#119: FILE: acrypto/acrypto.h:85:
+#define start_process_session(s)	do {s->ci.flags |= SESSION_PROCESSED; s->ci.ptime = jiffies;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#119: FILE: acrypto/acrypto.h:85:
+#define start_process_session(s)	do {s->ci.flags |= SESSION_PROCESSED; s->ci.ptime = jiffies;} while(0)

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#120: FILE: acrypto/acrypto.h:86:
+#define stop_process_session(s)		do {s->ci.flags &= ~SESSION_PROCESSED; s->ci.ptime = jiffies - s->ci.ptime; crypto_wake_lb();} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#120: FILE: acrypto/acrypto.h:86:
+#define stop_process_session(s)		do {s->ci.flags &= ~SESSION_PROCESSED; s->ci.ptime = jiffies - s->ci.ptime; crypto_wake_lb();} while (0)
                                		                                                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#120: FILE: acrypto/acrypto.h:86:
+#define stop_process_session(s)		do {s->ci.flags &= ~SESSION_PROCESSED; s->ci.ptime = jiffies - s->ci.ptime; crypto_wake_lb();} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#120: FILE: acrypto/acrypto.h:86:
+#define stop_process_session(s)		do {s->ci.flags &= ~SESSION_PROCESSED; s->ci.ptime = jiffies - s->ci.ptime; crypto_wake_lb();} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#122: FILE: acrypto/acrypto.h:88:
+#define session_binded(s)	(s->ci.flags & SESSION_BINDED)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#123: FILE: acrypto/acrypto.h:89:
+#define bind_session(s)		do {s->ci.flags |= SESSION_BINDED;} while(0)
                        		                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: acrypto/acrypto.h:89:
+#define bind_session(s)		do {s->ci.flags |= SESSION_BINDED;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#123: FILE: acrypto/acrypto.h:89:
+#define bind_session(s)		do {s->ci.flags |= SESSION_BINDED;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#123: FILE: acrypto/acrypto.h:89:
+#define bind_session(s)		do {s->ci.flags |= SESSION_BINDED;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#124: FILE: acrypto/acrypto.h:90:
+#define unbind_session(s)	do {s->ci.flags &= ~SESSION_BINDED;} while (0)
                          	                                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#124: FILE: acrypto/acrypto.h:90:
+#define unbind_session(s)	do {s->ci.flags &= ~SESSION_BINDED;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#124: FILE: acrypto/acrypto.h:90:
+#define unbind_session(s)	do {s->ci.flags &= ~SESSION_BINDED;} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ci' may be better as '(ci)' to avoid precedence issues
#125: FILE: acrypto/acrypto.h:91:
+#define sci_binded(ci)		(ci->flags & SESSION_BINDED)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#127: FILE: acrypto/acrypto.h:93:
+#define session_broken(s)	(s->ci.flags & SESSION_BROKEN)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#128: FILE: acrypto/acrypto.h:94:
+#define broke_session(s)	do {s->ci.flags |= SESSION_BROKEN;} while(0)
                         	                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#128: FILE: acrypto/acrypto.h:94:
+#define broke_session(s)	do {s->ci.flags |= SESSION_BROKEN;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#128: FILE: acrypto/acrypto.h:94:
+#define broke_session(s)	do {s->ci.flags |= SESSION_BROKEN;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#128: FILE: acrypto/acrypto.h:94:
+#define broke_session(s)	do {s->ci.flags |= SESSION_BROKEN;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#129: FILE: acrypto/acrypto.h:95:
+#define unbroke_session(s)	do {s->ci.flags &= ~SESSION_BROKEN;} while (0)
                           	                                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#129: FILE: acrypto/acrypto.h:95:
+#define unbroke_session(s)	do {s->ci.flags &= ~SESSION_BROKEN;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#129: FILE: acrypto/acrypto.h:95:
+#define unbroke_session(s)	do {s->ci.flags &= ~SESSION_BROKEN;} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#131: FILE: acrypto/acrypto.h:97:
+#define session_from_cache(s)		(s->ci.flags & SESSION_FROM_CACHE)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#132: FILE: acrypto/acrypto.h:98:
+#define mark_session_from_cache(s)	do {s->ci.flags |= SESSION_FROM_CACHE;} while(0)
                                   	                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: acrypto/acrypto.h:98:
+#define mark_session_from_cache(s)	do {s->ci.flags |= SESSION_FROM_CACHE;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#132: FILE: acrypto/acrypto.h:98:
+#define mark_session_from_cache(s)	do {s->ci.flags |= SESSION_FROM_CACHE;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#132: FILE: acrypto/acrypto.h:98:
+#define mark_session_from_cache(s)	do {s->ci.flags |= SESSION_FROM_CACHE;} while(0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#136: FILE: acrypto/acrypto.h:102:
+#define DEVICE_BROKEN		(1<<0)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: acrypto/acrypto.h:102:
+#define DEVICE_BROKEN		(1<<0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#138: FILE: acrypto/acrypto.h:104:
+#define device_broken(dev)	(dev->flags & DEVICE_BROKEN)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#139: FILE: acrypto/acrypto.h:105:
+#define broke_device(dev)	do {dev->flags |= DEVICE_BROKEN;} while(0)
                          	                               ^

ERROR:SPACING: space required before the open parenthesis '('
#139: FILE: acrypto/acrypto.h:105:
+#define broke_device(dev)	do {dev->flags |= DEVICE_BROKEN;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#139: FILE: acrypto/acrypto.h:105:
+#define broke_device(dev)	do {dev->flags |= DEVICE_BROKEN;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#139: FILE: acrypto/acrypto.h:105:
+#define broke_device(dev)	do {dev->flags |= DEVICE_BROKEN;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#140: FILE: acrypto/acrypto.h:106:
+#define repair_device(dev)	do {dev->flags &= ~DEVICE_BROKEN;} while(0)
                           	                                ^

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: acrypto/acrypto.h:106:
+#define repair_device(dev)	do {dev->flags &= ~DEVICE_BROKEN;} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#140: FILE: acrypto/acrypto.h:106:
+#define repair_device(dev)	do {dev->flags &= ~DEVICE_BROKEN;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#140: FILE: acrypto/acrypto.h:106:
+#define repair_device(dev)	do {dev->flags &= ~DEVICE_BROKEN;} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: acrypto/acrypto.h:109:
+^Iu16 ^I^I^Ioperation;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: acrypto/acrypto.h:110:
+^Iu16 ^I^I^Itype;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: acrypto/acrypto.h:111:
+^Iu16 ^I^I^Imode;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: acrypto/acrypto.h:112:
+^Iu16 ^I^I^Iqlen;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: acrypto/acrypto.h:113:
+^Iu64 ^I^I^Iptime;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: acrypto/acrypto.h:114:
+^Iu64 ^I^I^Iscomp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: acrypto/acrypto.h:118:
+^Iu16 ^I^I^Ioperation;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: acrypto/acrypto.h:119:
+^Iu16 ^I^I^Itype;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: acrypto/acrypto.h:120:
+^Iu16 ^I^I^Imode;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: acrypto/acrypto.h:121:
+^Iu16 ^I^I^Ipriority;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: acrypto/acrypto.h:123:
+^Iu64 ^I^I^Iid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: acrypto/acrypto.h:124:
+^Iu64 ^I^I^Idev_id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: acrypto/acrypto.h:126:
+^Iu32 ^I^I^Iflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: acrypto/acrypto.h:128:
+^Iu32 ^I^I^Ibdev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: acrypto/acrypto.h:130:
+^Iu64 ^I^I^Iptime;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: acrypto/acrypto.h:132:
+^Icrypto_callback_t ^Icallback;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: acrypto/acrypto.h:137:
+^Iint ^I^I^Isg_src_num;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#173: FILE: acrypto/acrypto.h:139:
+^Iint ^I^I^Isg_dst_num;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: acrypto/acrypto.h:141:
+^Iint ^I^I^Isg_key_num;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: acrypto/acrypto.h:143:
+^Iint ^I^I^Isg_iv_num;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: acrypto/acrypto.h:145:
+^Ivoid ^I^I^I*priv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: acrypto/acrypto.h:146:
+^Iunsigned int ^I^Ipriv_size;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: acrypto/acrypto.h:150:
+^Ichar ^I^I^Iname[SCACHE_NAMELEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: acrypto/acrypto.h:152:
+^Ispinlock_t ^I^Isession_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#186: FILE: acrypto/acrypto.h:152:
+	spinlock_t 		session_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: acrypto/acrypto.h:153:
+^Istruct list_head ^Isession_list;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: acrypto/acrypto.h:155:
+^Iu64 ^I^I^Isid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: acrypto/acrypto.h:156:
+^Ispinlock_t ^I^Ilock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#190: FILE: acrypto/acrypto.h:156:
+	spinlock_t 		lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: acrypto/acrypto.h:158:
+^Iatomic_t ^I^Irefcnt;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: acrypto/acrypto.h:160:
+^Iu32 ^I^I^Iflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: acrypto/acrypto.h:162:
+^Iu32 ^I^I^Iid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: acrypto/acrypto.h:164:
+^Istruct list_head ^Icdev_entry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: acrypto/acrypto.h:166:
+^Ivoid ^I^I^I(*data_ready)(struct crypto_device *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#200: FILE: acrypto/acrypto.h:166:
+	void 			(*data_ready)(struct crypto_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: acrypto/acrypto.h:168:
+^Istruct device_driver ^I*driver;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: acrypto/acrypto.h:169:
+^Istruct device ^I^Idevice;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: acrypto/acrypto.h:170:
+^Istruct class_device ^Iclass_device;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: acrypto/acrypto.h:171:
+^Istruct completion ^Idev_released;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: acrypto/acrypto.h:173:
+^Ispinlock_t ^I^Istat_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#207: FILE: acrypto/acrypto.h:173:
+	spinlock_t 		stat_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: acrypto/acrypto.h:177:
+^Iint ^I^I^Icap_number;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: acrypto/acrypto.h:179:
+^Ivoid ^I^I^I*priv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: acrypto/acrypto.h:186:
+^Istruct crypto_route ^I*next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: acrypto/acrypto.h:187:
+^Istruct crypto_route ^I*prev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: acrypto/acrypto.h:189:
+^I__u32 ^I^I^Iqlen;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: acrypto/acrypto.h:190:
+^Ispinlock_t ^I^Ilock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#224: FILE: acrypto/acrypto.h:190:
+	spinlock_t 		lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: acrypto/acrypto.h:194:
+^Istruct crypto_route ^I*next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: acrypto/acrypto.h:195:
+^Istruct crypto_route ^I*prev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: acrypto/acrypto.h:198:
+^Istruct crypto_device ^I*dev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: acrypto/acrypto.h:204:
+^Istruct list_head ^Idev_queue_entry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: acrypto/acrypto.h:209:
+^Istruct crypto_data ^Idata;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: acrypto/acrypto.h:211:
+^Ispinlock_t ^I^Ilock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#245: FILE: acrypto/acrypto.h:211:
+	spinlock_t 		lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: acrypto/acrypto.h:213:
+^Istruct work_struct ^Iwork;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: acrypto/acrypto.h:217:
+^Istruct crypto_device ^I*pool_dev;$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#254: FILE: acrypto/acrypto.h:220:
+struct crypto_session *crypto_session_alloc(struct crypto_session_initializer *, struct crypto_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session_initializer *' should also have an identifier name
#254: FILE: acrypto/acrypto.h:220:
+struct crypto_session *crypto_session_alloc(struct crypto_session_initializer *, struct crypto_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_data *' should also have an identifier name
#254: FILE: acrypto/acrypto.h:220:
+struct crypto_session *crypto_session_alloc(struct crypto_session_initializer *, struct crypto_data *);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#255: FILE: acrypto/acrypto.h:221:
+struct crypto_session *crypto_session_create(struct crypto_session_initializer *, struct crypto_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session_initializer *' should also have an identifier name
#255: FILE: acrypto/acrypto.h:221:
+struct crypto_session *crypto_session_create(struct crypto_session_initializer *, struct crypto_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_data *' should also have an identifier name
#255: FILE: acrypto/acrypto.h:221:
+struct crypto_session *crypto_session_create(struct crypto_session_initializer *, struct crypto_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#256: FILE: acrypto/acrypto.h:222:
+void crypto_session_destroy(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#257: FILE: acrypto/acrypto.h:223:
+void crypto_session_add(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#258: FILE: acrypto/acrypto.h:224:
+void crypto_session_dequeue_main(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#259: FILE: acrypto/acrypto.h:225:
+void __crypto_session_dequeue_main(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#260: FILE: acrypto/acrypto.h:226:
+void __crypto_session_dequeue_route(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session *' should also have an identifier name
#261: FILE: acrypto/acrypto.h:227:
+void crypto_session_dequeue_route(struct crypto_session *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#263: FILE: acrypto/acrypto.h:229:
+void crypto_device_get(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#264: FILE: acrypto/acrypto.h:230:
+void crypto_device_put(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#265: FILE: acrypto/acrypto.h:231:
+struct crypto_device *crypto_device_get_name(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#267: FILE: acrypto/acrypto.h:233:
+int __crypto_device_add(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#268: FILE: acrypto/acrypto.h:234:
+int crypto_device_add(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#269: FILE: acrypto/acrypto.h:235:
+void __crypto_device_remove(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#270: FILE: acrypto/acrypto.h:236:
+void crypto_device_remove(struct crypto_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_device *' should also have an identifier name
#271: FILE: acrypto/acrypto.h:237:
+int match_initializer(struct crypto_device *, struct crypto_session_initializer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session_initializer *' should also have an identifier name
#271: FILE: acrypto/acrypto.h:237:
+int match_initializer(struct crypto_device *, struct crypto_session_initializer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_capability *' should also have an identifier name
#272: FILE: acrypto/acrypto.h:238:
+int __match_initializer(struct crypto_capability *, struct crypto_session_initializer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_session_initializer *' should also have an identifier name
#272: FILE: acrypto/acrypto.h:238:
+int __match_initializer(struct crypto_capability *, struct crypto_session_initializer *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201447.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 96 warnings, 48 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201447.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
