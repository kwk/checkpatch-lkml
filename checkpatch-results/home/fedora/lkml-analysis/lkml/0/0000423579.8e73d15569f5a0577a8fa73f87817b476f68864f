WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -urN linux-2.5.42-base/drivers/usb/core/inode.c linux-2.5.42-dc12/drivers/usb/core/inode.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: fs/dcache.c:61:
+	struct dentry * dentry = (struct dentry *)arg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/dcache.c:63:
+^Iif (dname_external(dentry)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: fs/dcache.c:65:
+^Ikmem_cache_free(dentry_cache, dentry); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: fs/dcache.c:141:
+^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: fs/dcache.c:150:
+ ^Iif (d_unhashed(dentry))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: fs/dcache.c:150:
+ ^Iif (d_unhashed(dentry))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: fs/dcache.c:150:
+ ^Iif (d_unhashed(dentry))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: fs/dcache.c:152:
+ ^Iif (list_empty(&dentry->d_lru)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: fs/dcache.c:152:
+ ^Iif (list_empty(&dentry->d_lru)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/dcache.c:152:
+ ^Iif (list_empty(&dentry->d_lru)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/dcache.c:153:
+ ^I^Identry->d_vfs_flags &= ~DCACHE_REFERENCED;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: fs/dcache.c:153:
+ ^I^Identry->d_vfs_flags &= ~DCACHE_REFERENCED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/dcache.c:153:
+ ^I^Identry->d_vfs_flags &= ~DCACHE_REFERENCED;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/dcache.c:154:
+ ^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: fs/dcache.c:154:
+ ^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/dcache.c:154:
+ ^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/dcache.c:155:
+ ^I^Identry_stat.nr_unused++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: fs/dcache.c:155:
+ ^I^Identry_stat.nr_unused++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/dcache.c:155:
+ ^I^Identry_stat.nr_unused++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/dcache.c:156:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: fs/dcache.c:156:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/dcache.c:156:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: fs/dcache.c:167:
+ ^I^Iif (!list_empty(&dentry->d_lru)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: fs/dcache.c:167:
+ ^I^Iif (!list_empty(&dentry->d_lru)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: fs/dcache.c:167:
+ ^I^Iif (!list_empty(&dentry->d_lru)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: fs/dcache.c:168:
+ ^I^I^Ilist_del(&dentry->d_lru);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: fs/dcache.c:168:
+ ^I^I^Ilist_del(&dentry->d_lru);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/dcache.c:168:
+ ^I^I^Ilist_del(&dentry->d_lru);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: fs/dcache.c:169:
+ ^I^I^Identry_stat.nr_unused--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: fs/dcache.c:169:
+ ^I^I^Identry_stat.nr_unused--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/dcache.c:169:
+ ^I^I^Identry_stat.nr_unused--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: fs/dcache.c:170:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: fs/dcache.c:170:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: fs/dcache.c:170:
+ ^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/dcache.c:281:
+ ^I^Iif (!d_unhashed(alias)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: fs/dcache.c:281:
+ ^I^Iif (!d_unhashed(alias)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/dcache.c:281:
+ ^I^Iif (!d_unhashed(alias)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: fs/dcache.c:365:
+ ^I^Identry_stat.nr_unused--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: fs/dcache.c:365:
+ ^I^Identry_stat.nr_unused--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: fs/dcache.c:365:
+ ^I^Identry_stat.nr_unused--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/dcache.c:368:
+ ^I^Ispin_lock(&dentry->d_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: fs/dcache.c:368:
+ ^I^Ispin_lock(&dentry->d_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/dcache.c:368:
+ ^I^Ispin_lock(&dentry->d_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: fs/dcache.c:372:
+ ^I^I^Iif (!atomic_read(&dentry->d_count)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: fs/dcache.c:372:
+ ^I^I^Iif (!atomic_read(&dentry->d_count)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/dcache.c:372:
+ ^I^I^Iif (!atomic_read(&dentry->d_count)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: fs/dcache.c:373:
+ ^I^I^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: fs/dcache.c:373:
+ ^I^I^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: fs/dcache.c:373:
+ ^I^I^I^Ilist_add(&dentry->d_lru, &dentry_unused);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/dcache.c:374:
+ ^I^I^I^Identry_stat.nr_unused++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: fs/dcache.c:374:
+ ^I^I^I^Identry_stat.nr_unused++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/dcache.c:374:
+ ^I^I^I^Identry_stat.nr_unused++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/dcache.c:375:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: fs/dcache.c:375:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/dcache.c:375:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/dcache.c:376:
+ ^I^I^Ispin_unlock(&dentry->d_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: fs/dcache.c:376:
+ ^I^I^Ispin_unlock(&dentry->d_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/dcache.c:376:
+ ^I^I^Ispin_unlock(&dentry->d_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: fs/dcache.c:893:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: fs/dcache.c:893:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: fs/dcache.c:893:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: fs/dcache.c:894:
+ ^Ircu_read_unlock();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: fs/dcache.c:894:
+ ^Ircu_read_unlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: fs/dcache.c:894:
+ ^Ircu_read_unlock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: fs/dcache.c:895:
+ ^Ireturn found;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: fs/dcache.c:895:
+ ^Ireturn found;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: fs/dcache.c:895:
+ ^Ireturn found;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: fs/dcache.c:996:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#376: FILE: fs/dcache.c:996:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: fs/exec.c:502:
+		if (!d_unhashed(proc_dentry)) {
[...]
+			__d_drop(proc_dentry);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: fs/intermezzo/journal.c:187:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: fs/intermezzo/journal.c:187:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: fs/namei.c:434:
+		struct vfsmount *mounted;
+		spin_lock(&dcache_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: fs/namei.c:479:
+                read_lock(&current->fs->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: fs/namei.c:479:
+                read_lock(&current->fs->lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: fs/namei.c:482:
+                        read_unlock(&current->fs->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: fs/namei.c:482:
+                        read_unlock(&current->fs->lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: fs/namei.c:485:
+                read_unlock(&current->fs->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: fs/namei.c:485:
+                read_unlock(&current->fs->lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: fs/namei.c:582:
+^I^Iif (err == -EAGAIN) { $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#621: FILE: fs/namei.c:582:
+		if (err == -EAGAIN) { 
 			err = permission(inode, MAY_EXEC);
 		}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#632: FILE: fs/namei.c:634:
+		err = do_lookup(nd, &this, &next, LOOKUP_CONTINUE);
 		                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#673: FILE: fs/namei.c:693:
+		err = do_lookup(nd, &this, &next, 0);
 		                ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: include/linux/dcache.h:138:
+#define DCACHE_UNHASHED^I^I0x0010^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#834: FILE: include/linux/dcache.h:160:
+static __inline__ void __d_drop(struct dentry * dentry)

WARNING:INLINE: plain inline is preferred over __inline__
#834: FILE: include/linux/dcache.h:160:
+static __inline__ void __d_drop(struct dentry * dentry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#844: FILE: include/linux/dcache.h:169:
+ ^I__d_drop(dentry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#844: FILE: include/linux/dcache.h:169:
+ ^I__d_drop(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#844: FILE: include/linux/dcache.h:169:
+ ^I__d_drop(dentry);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#917: FILE: kernel/exit.c:48:
+		if (!d_unhashed(proc_dentry)) {
[...]
+			__d_drop(proc_dentry);
[...]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 55 warnings, 2 checks, 791 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
