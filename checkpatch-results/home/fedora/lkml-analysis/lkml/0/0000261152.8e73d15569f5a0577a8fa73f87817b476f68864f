ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#34: 
--- a/arch/i386/kernel/cpu/Makefile	Wed Aug 11 14:46:15 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: arch/i386/kernel/cpu/proc.c:15:
+	extern char *x86_cap_flags[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/i386/kernel/cpu/sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: arch/i386/kernel/cpu/sysfs.c:8:
+ * Copyright 2004 (c) MontaVista Software, Inc. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: arch/i386/kernel/cpu/sysfs.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: arch/i386/kernel/cpu/sysfs.c:10:
+ * This file is licensed under  the terms of the GNU General Public $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: arch/i386/kernel/cpu/sysfs.c:11:
+ * License version 2. This program is licensed "as is" without any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: arch/i386/kernel/cpu/sysfs.c:16:
+ * TODO/Questions: $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#139: FILE: arch/i386/kernel/cpu/sysfs.c:31:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: arch/i386/kernel/cpu/sysfs.c:33:
+/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/i386/kernel/cpu/sysfs.c:45:
+        "fpu", "vme", "de", "pse", "tsc", "msr", "pae", "mce",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/i386/kernel/cpu/sysfs.c:45:
+        "fpu", "vme", "de", "pse", "tsc", "msr", "pae", "mce",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/i386/kernel/cpu/sysfs.c:46:
+        "cx8", "apic", NULL, "sep", "mtrr", "pge", "mca", "cmov",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/i386/kernel/cpu/sysfs.c:46:
+        "cx8", "apic", NULL, "sep", "mtrr", "pge", "mca", "cmov",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: arch/i386/kernel/cpu/sysfs.c:47:
+        "pat", "pse36", "pn", "clflush", NULL, "dts", "acpi", "mmx",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/i386/kernel/cpu/sysfs.c:47:
+        "pat", "pse36", "pn", "clflush", NULL, "dts", "acpi", "mmx",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/i386/kernel/cpu/sysfs.c:48:
+        "fxsr", "sse", "sse2", "ss", "ht", "tm", "ia64", "pbe",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/i386/kernel/cpu/sysfs.c:48:
+        "fxsr", "sse", "sse2", "ss", "ht", "tm", "ia64", "pbe",$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: arch/i386/kernel/cpu/sysfs.c:83:
+ * We may be building w/o sysfs support, but we still need $

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#200: FILE: arch/i386/kernel/cpu/sysfs.c:92:
+#define	X86_CPU_ATTR(_attr, _data, _format)				\
+static ssize_t show_##_attr(struct sys_device *dev, char *buf)		\
+{									\
+	struct cpu *cpu = 						\
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\
+	struct cpuinfo_x86 *c = 					\
+			(struct cpuinfo_x86*)cpu->arch_cpuinfo; 	\
+									\
+	return sprintf(buf, _format, _data);				\
+}									\
+SYSDEV_ATTR(_attr, 0644, show_##_attr, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: arch/i386/kernel/cpu/sysfs.c:95:
+^Istruct cpu *cpu = ^I^I^I^I^I^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#204: FILE: arch/i386/kernel/cpu/sysfs.c:96:
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: arch/i386/kernel/cpu/sysfs.c:97:
+^Istruct cpuinfo_x86 *c = ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: arch/i386/kernel/cpu/sysfs.c:98:
+^I^I^I(struct cpuinfo_x86*)cpu->arch_cpuinfo; ^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#206: FILE: arch/i386/kernel/cpu/sysfs.c:98:
+			(struct cpuinfo_x86*)cpu->arch_cpuinfo; 	\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/i386/kernel/cpu/sysfs.c:116:
+X86_CPU_ATTR(fpu_exception, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: arch/i386/kernel/cpu/sysfs.c:117:
+^I^Ic->hard_math && (ignore_fpu_irq || cpu_has_fpu), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: arch/i386/kernel/cpu/sysfs.c:117:
+X86_CPU_ATTR(fpu_exception, 
+		c->hard_math && (ignore_fpu_irq || cpu_has_fpu), 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: arch/i386/kernel/cpu/sysfs.c:120:
+X86_CPU_ATTR(vendor_id, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: arch/i386/kernel/cpu/sysfs.c:121:
+X86_CPU_ATTR(vendor_id, 
+		(c->x86_vendor_id[0] ? c->x86_vendor_id : "unknown"),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/i386/kernel/cpu/sysfs.c:124:
+X86_CPU_ATTR(model_id, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: arch/i386/kernel/cpu/sysfs.c:125:
+X86_CPU_ATTR(model_id, 
+		(c->x86_model_id[0] ? c->x86_model_id : "unknown"),

ERROR:SPACING: space prohibited after that open parenthesis '('
#253: FILE: arch/i386/kernel/cpu/sysfs.c:145:
+	if ( cpu_has(c, X86_FEATURE_TSC) ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#253: FILE: arch/i386/kernel/cpu/sysfs.c:145:
+	if ( cpu_has(c, X86_FEATURE_TSC) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: arch/i386/kernel/cpu/sysfs.c:146:
+^I^Ireturn sprintf(buf, "%lu.%03lu\n", $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#268: FILE: arch/i386/kernel/cpu/sysfs.c:160:
+			c->loops_per_jiffy/(500000/HZ),
 			                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#268: FILE: arch/i386/kernel/cpu/sysfs.c:160:
+			c->loops_per_jiffy/(500000/HZ),
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#269: FILE: arch/i386/kernel/cpu/sysfs.c:161:
+			(c->loops_per_jiffy/(5000/HZ)) % 100);
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#269: FILE: arch/i386/kernel/cpu/sysfs.c:161:
+			(c->loops_per_jiffy/(5000/HZ)) % 100);
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#280: FILE: arch/i386/kernel/cpu/sysfs.c:172:
+	for (i = 0; i < 32*NCAPINTS; i++)
 	                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "x86_cap_flags[i]"
#281: FILE: arch/i386/kernel/cpu/sysfs.c:173:
+		if (test_bit(i, c->x86_capability) && x86_cap_flags[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#295: FILE: arch/i386/kernel/cpu/sysfs.c:187:
+	extern int phys_proc_id[NR_CPUS];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#350: FILE: include/asm-i386/cpu.h:15:
+extern void create_sysfs_cpu_entries(struct cpu*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: include/asm-i386/cpu.h:15:
+extern void create_sysfs_cpu_entries(struct cpu*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpu*' should also have an identifier name
#350: FILE: include/asm-i386/cpu.h:15:
+extern void create_sysfs_cpu_entries(struct cpu*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 12 warnings, 11 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
