WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
> > is an attempt to make it better.  Working with the rmap vm on pre7-ac2, I

WARNING:REPEATED_WORD: Possible repeated word: 'have'
#50: 
(I have have experimented quite a bit).  It also avoid using any magic numbers 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
#	           ChangeSet	1.406   -> 1.408  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
#	         fs/buffer.c	1.66    -> 1.67   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
#	         fs/dcache.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
#	          fs/dquot.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
#	         mm/vmscan.c	1.60    -> 1.62   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
#	           mm/slab.c	1.16    -> 1.18   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
#	include/linux/slab.h	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
#	include/linux/dcache.h	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
#	          fs/inode.c	1.36    -> 1.37   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
# 02/05/23	ed@oscar.et.ca	1.407

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
# age_pressure_v7.diff

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
# 02/05/23	ed@oscar.et.ca	1.408

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
# Fix the locking in vmscan for slab pages in lru.  Improve the comments

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
# too.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#144: 
--- a/fs/buffer.c	Thu May 23 21:38:19 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: fs/dcache.c:539:
+ * more memory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/dcache.c:1275:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: fs/dcache.c:1277:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: fs/inode.c:676:
+	for(; goal; goal--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, pruner_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#369: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, pruner_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pruner_t' should also have an identifier name
#369: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, pruner_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#370: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#370: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/linux/slab.h:63:
+extern void kmem_count_page(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#371: FILE: include/linux/slab.h:63:
+extern void kmem_count_page(struct page *);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#372: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr)                 SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#375: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#378: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#378: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#378: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#381: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#381: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#381: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#384: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#384: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#384: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: mm/slab.c:216:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: mm/slab.c:386:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: mm/slab.c:386:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: mm/slab.c:388:
+void kmem_set_pruner(kmem_cache_t * cachep, pruner_t thepruner) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: mm/slab.c:388:
+void kmem_set_pruner(kmem_cache_t * cachep, pruner_t thepruner) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: mm/slab.c:398:
+	slab_t *slabp = GET_PAGE_SLAB(page);
+	if (cachep->pruner != NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#417: FILE: mm/slab.c:398:
+	if (cachep->pruner != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: mm/slab.c:403:
+int kmem_do_prunes(int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: mm/slab.c:408:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: mm/slab.c:408:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: mm/slab.c:409:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: mm/slab.c:409:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: mm/slab.c:410:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: mm/slab.c:410:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: mm/slab.c:411:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: mm/slab.c:411:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: mm/slab.c:412:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: mm/slab.c:412:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: mm/slab.c:414:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: mm/slab.c:414:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#433: FILE: mm/slab.c:414:
+        list_for_each(p,&cache_chain) {
                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#433: FILE: mm/slab.c:414:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: mm/slab.c:415:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: mm/slab.c:415:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#435: FILE: mm/slab.c:416:
+		if (cachep->pruner != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: mm/slab.c:419:
+				int nr = (*cachep->pruner)(cachep, cachep->count, gfp_mask);
+				cachep->count = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: mm/slab.c:421:
+^I^I^I^Iprintk("pruned %-17s %d\n",cachep->name, nr); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: mm/slab.c:421:
+				printk("pruned %-17s %d\n",cachep->name, nr); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: mm/slab.c:421:
+				printk("pruned %-17s %d\n",cachep->name, nr); 
 				                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#443: FILE: mm/slab.c:424:
+
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: mm/slab.c:426:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: mm/slab.c:426:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: mm/slab.c:427:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: mm/slab.c:427:
+        up(&cache_chain_sem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: mm/slab.c:642:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: mm/slab.c:643:
+ * Used by page_launder_zone and refill_inactive_zone to $

CHECK:BRACES: braces {} should be used on all arms of this statement
#482: FILE: mm/slab.c:656:
+	if (!slabp->inuse) {
[...]
+	} else 
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: mm/slab.c:657:
+^I ^Iif (!cachep->growing) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#483: FILE: mm/slab.c:657:
+^I ^Iif (!cachep->growing) {$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#487: FILE: mm/slab.c:661:
+			return 1<<cachep->gfporder;
 			        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: mm/slab.c:663:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#489: FILE: mm/slab.c:663:
+	} else 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: mm/slab.c:666:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: mm/slab.c:669:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: mm/vmscan.c:106:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: mm/vmscan.c:277:
+		if (page_referenced(page) &&
+				(page_mapping_inuse(page) || PageSlab(page)) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: mm/vmscan.c:291:
+^I^I * entries it will return 0 and set the page_refenence bit, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: mm/vmscan.c:296:
+			int pages;
+			UnlockPage(page);

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#561: FILE: mm/vmscan.c:296:
+			UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#563: FILE: mm/vmscan.c:298:
+			if (!pages && PageTestandClearReferenced(page)) {
[...]
+			} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: mm/vmscan.c:299:
+^I                        del_page_from_inactive_dirty_list(page);$

WARNING:MINMAX: max() should probably be max_t(int, page->age, PAGE_AGE_START)
#566: FILE: mm/vmscan.c:301:
+				page->age = max((int)page->age, PAGE_AGE_START);

CHECK:BRACES: Unbalanced braces around else statement
#567: FILE: mm/vmscan.c:302:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: mm/vmscan.c:557:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: mm/vmscan.c:560:
+^I^I * Otherwise we move it to the inactive_dirty list.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: mm/vmscan.c:561:
+^I^I * For slab pages if its not a hot page, we try to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: mm/vmscan.c:562:
+^I^I * free it, failing it goes to the inactive_dirty list. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: mm/vmscan.c:569:
+^I^I^I^Iint pages = kmem_shrink_slab(page); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: mm/vmscan.c:570:
+^I^I^I^Iif (pages) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: mm/vmscan.c:570:
+				int pages = kmem_shrink_slab(page); 
+				if (pages) { 

CHECK:BRACES: braces {} should be used on all arms of this statement
#623: FILE: mm/vmscan.c:570:
+				if (pages) { 
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#628: FILE: mm/vmscan.c:575:
+				} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: mm/vmscan.c:577:
+^I^I^I}^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#642: FILE: mm/vmscan.c:602:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: mm/vmscan.c:671:
+^I * Move pages from the active list to the inactive list and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: mm/vmscan.c:673:
+^I * them. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456634.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 60 warnings, 21 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456634.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
