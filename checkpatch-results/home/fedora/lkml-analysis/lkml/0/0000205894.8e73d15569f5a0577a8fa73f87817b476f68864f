ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#45: FILE: fs/namei.c:107:
+static inline struct semaphore * lock_sem(struct inode *dir, struct qstr *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#51: FILE: fs/namei.c:113:
+		BUG_ON(sb->s_pdirops_sems == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_pdirops_sems"
#51: FILE: fs/namei.c:113:
+		BUG_ON(sb->s_pdirops_sems == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: fs/namei.c:1208:
+struct dentry *lock_rename(struct dentry *p1, struct qstr *n1,
+				struct dentry *p2, struct qstr *n2)

CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: fs/namei.c:1213:
+		if (IS_PDIROPS(p1->d_inode)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: fs/namei.c:1215:
+			unsigned int h1, h2;
+			h1 = n1->hash % p1->d_inode->i_sb->s_pdirops_size;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#113: FILE: fs/namei.c:1217:
+			if (h1 < h2) {
[...]
+			} else if (h1 > h2) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#119: FILE: fs/namei.c:1223:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#121: FILE: fs/namei.c:1225:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/namei.c:1254:
+void unlock_rename(struct dentry *p1, struct qstr *n1,
+			struct dentry *p2, struct qstr *n2)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: fs/namei.c:1260:
+^I} else if (IS_PDIROPS(p1->d_inode) && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: fs/namei.c:1444:
+^I^Iunlock_dir(dir->d_inode, &nd->last);^I^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#228: FILE: fs/namei.c:1645:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#228: FILE: fs/namei.c:1645:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:1699:
+		unlock_dir(nd.dentry->d_inode, &nd.last);
 		           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:1699:
+		unlock_dir(nd.dentry->d_inode, &nd.last);
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#246: FILE: fs/namei.c:1800:
+	lock_dir(nd.dentry->d_inode, &nd.last);
 	         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#246: FILE: fs/namei.c:1800:
+	lock_dir(nd.dentry->d_inode, &nd.last);
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/namei.c:1807:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/namei.c:1807:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/namei.c:1869:
+	lock_dir(nd.dentry->d_inode, &nd.last);
 	         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/namei.c:1869:
+	lock_dir(nd.dentry->d_inode, &nd.last);
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/namei.c:1883:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/namei.c:1883:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#281: FILE: fs/namei.c:1945:
+		unlock_dir(nd.dentry->d_inode, &nd.last);
 		           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#281: FILE: fs/namei.c:1945:
+		unlock_dir(nd.dentry->d_inode, &nd.last);
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#290: FILE: fs/namei.c:2029:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#290: FILE: fs/namei.c:2029:
+	unlock_dir(nd.dentry->d_inode, &nd.last);
 	                                ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: fs/super.c:176:
+			BUG_ON(s->s_pdirops_sems == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->s_pdirops_sems"
#321: FILE: fs/super.c:176:
+			BUG_ON(s->s_pdirops_sems == NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/super.c:804:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb->s_pdirops_sems)...) over kmalloc(sizeof(struct semaphore)...)
#338: FILE: fs/super.c:805:
+	sb->s_pdirops_sems = kmalloc(sizeof(struct semaphore) *

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#338: FILE: fs/super.c:805:
+	sb->s_pdirops_sems = kmalloc(sizeof(struct semaphore) *
+					sb->s_pdirops_size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_pdirops_sems"
#340: FILE: fs/super.c:807:
+	if (sb->s_pdirops_sems == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: include/linux/fs.h:802:
+^Istruct semaphore ^I*s_pdirops_sems;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: include/linux/namei.h:72:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#401: FILE: include/linux/namei.h:72:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#401: FILE: include/linux/namei.h:72:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#401: FILE: include/linux/namei.h:72:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#401: FILE: include/linux/namei.h:72:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: include/linux/namei.h:73:
+extern struct dentry *lock_rename(struct dentry *, struct qstr *,
+				struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/namei.h:74:
+extern void unlock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#403: FILE: include/linux/namei.h:74:
+extern void unlock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#403: FILE: include/linux/namei.h:74:
+extern void unlock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#403: FILE: include/linux/namei.h:74:
+extern void unlock_rename(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#403: FILE: include/linux/namei.h:74:
+extern void unlock_rename(struct dentry *, struct qstr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: include/linux/namei.h:75:
+extern void unlock_rename(struct dentry *, struct qstr *,
+			struct dentry *, struct qstr *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205894.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 29 warnings, 14 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205894.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
