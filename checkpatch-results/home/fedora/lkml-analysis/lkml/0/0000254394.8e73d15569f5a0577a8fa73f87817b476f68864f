WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#246: FILE: arch/m32r/drivers/smc91111.c:75:
+	"SMSC LAN91C111 Driver (v2.0), (Linux Kernel 2.4 + Support for Odd Byte) 09/24/01 -      by Pramod Bhardwaj (pramod.bhardwaj@smsc.com)\n";

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#255: FILE: arch/m32r/drivers/smc91111.c:244:
+	spinlock_t lock;

ERROR:SPACING: space prohibited after that open parenthesis '('
#264: FILE: arch/m32r/drivers/smc91111.c:401:
+static inline void smc_rcv( struct net_device *dev );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#264: FILE: arch/m32r/drivers/smc91111.c:401:
+static inline void smc_rcv( struct net_device *dev );

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: arch/m32r/drivers/smc91111.c:406:
+static inline void smc_tx( struct net_device * dev );

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#270: FILE: arch/m32r/drivers/smc91111.c:406:
+static inline void smc_tx( struct net_device * dev );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#270: FILE: arch/m32r/drivers/smc91111.c:406:
+static inline void smc_tx( struct net_device * dev );

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#288: FILE: arch/m32r/drivers/smc91111.c:818:
+			PRINTK2("%s: memory allocation deferred. \n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#336: FILE: arch/m32r/drivers/smc91111.c:1334:
+		printk("%s: unable to get IRQ %d (irqval=%d).\n",

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#410: FILE: arch/m32r/drivers/smc91111.c:1770:
+		   by 1, thus always assuming that the packet is odd length, leaving the higher layer

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#413: FILE: arch/m32r/drivers/smc91111.c:1773:
+		   <= */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited after that open parenthesis '('
#418: FILE: arch/m32r/drivers/smc91111.c:1777:
+				data = skb_put( skb, packet_length + 1 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#418: FILE: arch/m32r/drivers/smc91111.c:1777:
+				data = skb_put( skb, packet_length + 1 );

ERROR:SPACING: space prohibited after that open parenthesis '('
#422: FILE: arch/m32r/drivers/smc91111.c:1779:
+				data = skb_put( skb, packet_length);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: arch/m32r/drivers/smc91111.c:1852:
+static inline void smc_tx( struct net_device * dev )

ERROR:SPACING: space prohibited after that open parenthesis '('
#431: FILE: arch/m32r/drivers/smc91111.c:1852:
+static inline void smc_tx( struct net_device * dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#431: FILE: arch/m32r/drivers/smc91111.c:1852:
+static inline void smc_tx( struct net_device * dev )

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#451: FILE: arch/m32r/drivers/smc91111.c:2387:
+	if ((ret = proc_dointvec(ctl, write, filp, buffer, lenp, ppos)) != 0)
 	                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: arch/m32r/drivers/smc91111.c:2387:
+	if ((ret = proc_dointvec(ctl, write, filp, buffer, lenp, ppos)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: arch/m32r/drivers/smc91111.c:3819:
+^Iwhile (1) { $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <lastPhy18>
#498: FILE: arch/m32r/drivers/smc91111.c:3824:
+		if (phy18 == lp->lastPhy18)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#706: FILE: arch/m32r/kernel/setup.c:372:
 	|| defined(CONFIG_CHIP_M32700) || defined(CONFIG_CHIP_M32102) \
+	|| defined(CONFIG_CHIP_OPSP)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#718: FILE: arch/m32r/kernel/smp.c:58:
+static volatile unsigned long flushcache_cpumask = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#718: FILE: arch/m32r/kernel/smp.c:58:
+static volatile unsigned long flushcache_cpumask = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: arch/m32r/kernel/smp.c:94:
+static void flush_tlb_others(cpumask_t, struct mm_struct *,
 	struct vm_area_struct *, unsigned long);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#753: FILE: arch/m32r/kernel/smp.c:188:
+	mask=cpus_addr(cpumask);
 	    ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#759: FILE: arch/m32r/kernel/smp.c:193:
+		mb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: arch/m32r/kernel/smp.c:415:
+	BUG_ON(cpus_empty(cpumask));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#837: FILE: arch/m32r/kernel/smp.c:418:
+	BUG_ON(!cpus_equal(cpumask, tmp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: arch/m32r/kernel/smp.c:419:
+	BUG_ON(cpu_isset(smp_processor_id(), cpumask));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: arch/m32r/kernel/smp.c:420:
+	BUG_ON(!mm);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#849: FILE: arch/m32r/kernel/smp.c:433:
+	mask=cpus_addr(cpumask);
 	    ^

WARNING:TYPO_SPELLING: 'Routins' may be misspelled - perhaps 'Routines'?
#871: FILE: arch/m32r/kernel/smp.c:498:
+/* Stop CPU request Routins                                                 */
                     ^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#880: FILE: arch/m32r/kernel/smp.c:621:
+	mb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: arch/m32r/kernel/smp.c:815:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: arch/m32r/kernel/smp.c:852:
+	BUG_ON(!cpus_equal(cpumask, tmp));

ERROR:SPACING: space required before the open brace '{'
#928: FILE: arch/m32r/kernel/smp.c:855:
+	for_each_cpu_mask(cpu_id, cpumask){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#929: FILE: arch/m32r/kernel/smp.c:856:
+		if ((phys_id = cpu_to_physid(cpu_id)) != -1)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: arch/m32r/kernel/smp.c:893:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#944: FILE: arch/m32r/kernel/smp.c:893:
 
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#972: FILE: arch/m32r/kernel/smpboot.c:64:
+extern cpumask_t cpu_initialized;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#986: FILE: arch/m32r/kernel/smpboot.c:142:
 void __devinit smp_prepare_boot_cpu(void)

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#1008: FILE: arch/m32r/kernel/smpboot.c:210:
+	Dprintk("CPU present map : %lx\n", physids_coerce(phys_cpu_present_map));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1085: FILE: arch/m32r/kernel/time.c:65:
 	|| defined(CONFIG_CHIP_VDEC2) || defined(CONFIG_CHIP_M32700) \
+	|| defined(CONFIG_CHIP_OPSP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1141: FILE: arch/m32r/kernel/time.c:282:
 	|| defined(CONFIG_CHIP_VDEC2) || defined(CONFIG_CHIP_M32700) \
+	|| defined(CONFIG_CHIP_OPSP)

WARNING:TYPO_SPELLING: 'Unfortunatly' may be misspelled - perhaps 'Unfortunately'?
#1943: FILE: arch/m32r/mm/fault.c:146:
+	 * kernel and should generate an OOPS.  Unfortunatly, in the case of an
 	                                        ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#1944: FILE: arch/m32r/mm/fault.c:147:
+	 * erroneous fault occuring in a code path which already holds mmap_sem
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'possibilty' may be misspelled - perhaps 'possibility'?
#1951: FILE: arch/m32r/mm/fault.c:154:
+	 * the source reference check when there is a possibilty of a deadlock.
 	                                              ^^^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#2005: FILE: arch/m32r/mm/fault.c:386:
+	for(i = 0 ; i < NR_TLB_ENTRIES; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2006: FILE: arch/m32r/mm/fault.c:387:
+^I        if(*entry1++ == vaddr) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#2006: FILE: arch/m32r/mm/fault.c:387:
+	        if(*entry1++ == vaddr) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2007: FILE: arch/m32r/mm/fault.c:388:
+^I                pte_data = pte_val(pte);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2008: FILE: arch/m32r/mm/fault.c:389:
+^I                set_tlb_data(entry1, pte_data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2009: FILE: arch/m32r/mm/fault.c:390:
+^I                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2010: FILE: arch/m32r/mm/fault.c:391:
+^I        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2011: FILE: arch/m32r/mm/fault.c:392:
+^I        entry1++;$

ERROR:SPACING: space required before the open parenthesis '('
#2014: FILE: arch/m32r/mm/fault.c:395:
+	for(i = 0 ; i < NR_TLB_ENTRIES ; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2015: FILE: arch/m32r/mm/fault.c:396:
+^I        if(*entry2++ == vaddr) {$

ERROR:SPACING: space required before the open parenthesis '('
#2015: FILE: arch/m32r/mm/fault.c:396:
+	        if(*entry2++ == vaddr) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2016: FILE: arch/m32r/mm/fault.c:397:
+^I                pte_data = pte_val(pte);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2017: FILE: arch/m32r/mm/fault.c:398:
+^I                set_tlb_data(entry2, pte_data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2018: FILE: arch/m32r/mm/fault.c:399:
+^I                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2019: FILE: arch/m32r/mm/fault.c:400:
+^I        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2020: FILE: arch/m32r/mm/fault.c:401:
+^I        entry2++;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2034: FILE: arch/m32r/mm/init.c:50:
+	printk("Free swap:       %6ldkB\n",nr_swap_pages<<(PAGE_SHIFT-10));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2034: FILE: arch/m32r/mm/init.c:50:
+	printk("Free swap:       %6ldkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2034: FILE: arch/m32r/mm/init.c:50:
+	printk("Free swap:       %6ldkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2034: FILE: arch/m32r/mm/init.c:50:
+	printk("Free swap:       %6ldkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                                             ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2362: FILE: include/asm-m32r/bitops.h:276:
+		"mv      r4, %0; \n\t"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2363: FILE: include/asm-m32r/bitops.h:277:
+		"and     %0, %1; \n\t"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2364: FILE: include/asm-m32r/bitops.h:278:
+		"not     %1, %1; \n\t"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2365: FILE: include/asm-m32r/bitops.h:279:
+		"and     r4, %1; \n\t"

WARNING:INLINE: plain inline is preferred over __inline__
#2392: FILE: include/asm-m32r/bitops.h:505:
+static __inline__ unsigned long find_next_bit(const unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2393: FILE: include/asm-m32r/bitops.h:506:
+static __inline__ unsigned long find_next_bit(const unsigned long *addr,
 	unsigned long size, unsigned long offset)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2435: FILE: include/asm-m32r/delay.h:13:
+extern void __bad_ndelay(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2438: FILE: include/asm-m32r/delay.h:16:
+extern void __ndelay(unsigned long nsecs);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#2447: FILE: include/asm-m32r/delay.h:24:
+#define ndelay(n) (__builtin_constant_p(n) ? \
+	((n) > 20000 ? __bad_ndelay() : __const_udelay((n) * 5ul)) : \
+	__ndelay(n))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2527: FILE: include/asm-m32r/signal.h:137:
+typedef __signalfn_t __user *__sighandler_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2530: FILE: include/asm-m32r/signal.h:140:
+typedef __restorefn_t __user *__sigrestore_t;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2570: FILE: include/asm-m32r/smp.h:19:
+struct physid_mask
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2574: FILE: include/asm-m32r/smp.h:23:
+typedef struct physid_mask physid_mask_t;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2581: FILE: include/asm-m32r/smp.h:30:
+#define physids_and(dst, src1, src2)            bitmap_and((dst).mask, (src1).mask, (src2).mask, MAX_APICS)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2582: FILE: include/asm-m32r/smp.h:31:
+#define physids_or(dst, src1, src2)             bitmap_or((dst).mask, (src1).mask, (src2).mask, MAX_APICS)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2584: FILE: include/asm-m32r/smp.h:33:
+#define physids_complement(dst, src)            bitmap_complement((dst).mask,(src).mask, MAX_APICS)
                                                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2606: FILE: include/asm-m32r/smp.h:55:
+#define PHYSID_MASK_ALL         { {[0 ... PHYSID_ARRAY_SIZE-1] = ~0UL} }
                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2607: FILE: include/asm-m32r/smp.h:56:
+#define PHYSID_MASK_NONE        { {[0 ... PHYSID_ARRAY_SIZE-1] = 0UL} }
                                                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2618: FILE: include/asm-m32r/smp.h:96:
+extern unsigned long send_IPI_mask_phys(cpumask_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t' should also have an identifier name
#2618: FILE: include/asm-m32r/smp.h:96:
+extern unsigned long send_IPI_mask_phys(cpumask_t, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2618: FILE: include/asm-m32r/smp.h:96:
+extern unsigned long send_IPI_mask_phys(cpumask_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2618: FILE: include/asm-m32r/smp.h:96:
+extern unsigned long send_IPI_mask_phys(cpumask_t, int, int);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#2665: FILE: include/asm-m32r/unistd.h:305:
+	   errno might expand to a function call and clobber it.  */ \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2677: FILE: include/asm-m32r/unistd.h:387:
+	type5,arg5) \
 	     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254394.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 35 warnings, 17 checks, 2296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254394.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
