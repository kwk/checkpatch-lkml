WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#81: 
diff -urN -X dontdiff linux-2.5.31.orig/drivers/char/tty_io.c linux-2.5.31.w2/drivers/char/tty_io.c

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#97: FILE: drivers/char/tty_io.c:1461:
+		retval = f_setown(filp, (-tty->pgrp) ? : current->pid, 0);
 		                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#170: FILE: fs/dnotify.c:98:
+	error = f_setown(filp, current->pid, 1);
 	                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#229: FILE: fs/fcntl.c:265:
+static void f_modown(struct file *filp, unsigned long pid,
                                   ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/fcntl.c:266:
+                     uid_t uid, uid_t euid, int force)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/fcntl.c:266:
+                     uid_t uid, uid_t euid, int force)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: fs/fcntl.c:268:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#232: FILE: fs/fcntl.c:268:
+{
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#236: FILE: fs/fcntl.c:272:
+		wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#239: FILE: fs/fcntl.c:275:
+		wmb();

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#245: FILE: fs/fcntl.c:281:
+int f_setown(struct file *filp, unsigned long arg, int force)
                           ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/fcntl.c:284:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#249: FILE: fs/fcntl.c:285:
+	err = security_ops->file_set_fowner(filp);
 	                                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#253: FILE: fs/fcntl.c:289:
+	f_modown(filp, arg, current->uid, current->euid, force);
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#257: FILE: fs/fcntl.c:293:
+void f_delown(struct file *filp)
                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#259: FILE: fs/fcntl.c:295:
+	f_modown(filp, 0, 0, 0, 1);
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#284: FILE: fs/fcntl.c:343:
+			err = f_setown(filp, arg, 1);
 			               ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: fs/fcntl.c:442:
+                             struct fown_struct *fown)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: fs/fcntl.c:442:
+                             struct fown_struct *fown)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: fs/fcntl.c:445:
+ ^I        (fown->euid == p->suid) || (fown->euid == p->uid) ||$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: fs/fcntl.c:445:
+ ^I        (fown->euid == p->suid) || (fown->euid == p->uid) ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/fcntl.c:445:
+	return ((fown->euid == 0) ||
+ 	        (fown->euid == p->suid) || (fown->euid == p->uid) ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: fs/fcntl.c:445:
+ ^I        (fown->euid == p->suid) || (fown->euid == p->uid) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: fs/fcntl.c:446:
+ ^I        (fown->uid == p->suid) || (fown->uid == p->uid));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: fs/fcntl.c:446:
+ ^I        (fown->uid == p->suid) || (fown->uid == p->uid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: fs/fcntl.c:446:
+ ^I        (fown->uid == p->suid) || (fown->uid == p->uid));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: fs/fcntl.c:497:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/fcntl.c:500:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: fs/fcntl.c:519:
+                                struct fown_struct *fown)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: fs/fcntl.c:519:
+                                struct fown_struct *fown)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: fs/fcntl.c:532:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid > 0'
#359: FILE: fs/fcntl.c:537:
+	if ((pid > 0) && (p = find_task_by_pid(pid))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#359: FILE: fs/fcntl.c:537:
+	if ((pid > 0) && (p = find_task_by_pid(pid))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: fs/fcntl.c:543:
+		int match = p->pid;
+		if (pid < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#393: FILE: fs/fcntl.c:638:
+EXPORT_SYMBOL(f_setown);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#405: FILE: fs/locks.c:1000:
+		f_delown(filp);
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#420: FILE: fs/locks.c:1278:
+	error = f_setown(filp, current->pid, 1);
 	                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#431: FILE: include/linux/fs.h:618:
+extern int f_setown(struct file *filp, unsigned long arg, int force);
                                  ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/linux/fs.h:618:
+extern int f_setown(struct file *filp, unsigned long arg, int force);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#432: FILE: include/linux/fs.h:619:
+extern void f_delown(struct file *filp);
                                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/linux/fs.h:619:
+extern void f_delown(struct file *filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/linux/fs.h:620:
+extern int send_sigurg(struct fown_struct *fown);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#487: FILE: include/net/sock.h:363:
+extern void sk_send_sigurg(struct sock *sk);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: kernel/futex.c:280:
+^I^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#512: FILE: kernel/futex.c:281:
+		ret = f_setown(filp, current->tgid, 1);
 		               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#515: FILE: kernel/futex.c:284:
+			put_filp(filp);
 			         ^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438871.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 27 warnings, 7 checks, 583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438871.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
