WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -ur linux.orig/arch/i386/kernel/i386_ksyms.c linux/arch/i386/kernel/i386_ksyms.c

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#48: FILE: arch/i386/kernel/i386_ksyms.c:93:
+EXPORT_SYMBOL(request_nmi);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#49: FILE: arch/i386/kernel/i386_ksyms.c:94:
+EXPORT_SYMBOL(release_nmi);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#61: FILE: arch/i386/kernel/irq.c:134:
+extern void nmi_append_user_names(struct seq_file *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#70: FILE: arch/i386/kernel/irq.c:171:
+	seq_printf(p, "                ");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#93: FILE: arch/i386/kernel/nmi.c:109:
+static struct nmi_handler nmi_watchdog_handler =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: arch/i386/kernel/traps.c:492:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'somes' may be misspelled - perhaps 'some'?
#153: FILE: arch/i386/kernel/traps.c:494:
+ * when an NMI from an otherwise unidentifiable source somes in.  If
                                                        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#177: FILE: arch/i386/kernel/traps.c:518:
+	INIT_LIST_HEAD(&(handler->link));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#178: FILE: arch/i386/kernel/traps.c:519:
+	complete(&(handler->complete));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#186: FILE: arch/i386/kernel/traps.c:527:
+	if (!list_empty(&(handler->link)))

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EBUSY)
#187: FILE: arch/i386/kernel/traps.c:528:
+		return EBUSY;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#199: FILE: arch/i386/kernel/traps.c:540:
+		list_add_rcu(&(handler->link), curr_h->link.prev);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#201: FILE: arch/i386/kernel/traps.c:542:
+		list_add_rcu(&(handler->link), &nmi_handler_list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#210: FILE: arch/i386/kernel/traps.c:551:
+	list_del_rcu(&(handler->link));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#211: FILE: arch/i386/kernel/traps.c:552:
+	init_completion(&(handler->complete));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->rcu
#212: FILE: arch/i386/kernel/traps.c:553:
+	call_rcu(&(handler->rcu), free_nmi_handler, handler);

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: arch/i386/kernel/traps.c:557:
+           interrupted, we must wait until it finished. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: arch/i386/kernel/traps.c:557:
+	/* Wait for handler to finish being freed.  This can't be
+           interrupted, we must wait until it finished. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#216: FILE: arch/i386/kernel/traps.c:557:
+           interrupted, we must wait until it finished. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#217: FILE: arch/i386/kernel/traps.c:558:
+	wait_for_completion(&(handler->complete));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: arch/i386/kernel/traps.c:561:
+static int call_nmi_handlers(struct pt_regs * regs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: include/asm-i386/irq.h:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#319: FILE: include/asm-i386/irq.h:44:
+struct nmi_handler
+{

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 10 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
