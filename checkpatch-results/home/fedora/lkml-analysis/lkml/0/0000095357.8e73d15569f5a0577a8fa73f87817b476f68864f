WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: include/asm-i386/mach-vmi/mach_asm.h:1:
+#ifndef __MACH_ASM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: include/asm-i386/mach-vmi/mach_asm.h:8:
+ * macro definitions, and we are stuck running cpp -traditional on entry.S $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#114: FILE: include/asm-i386/mach-vmi/mach_asm.h:18:
+#define vmi_native_start			\
+	.pushsection .vmi.native,"ax";		\
+	771:;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#114: FILE: include/asm-i386/mach-vmi/mach_asm.h:18:
+#define vmi_native_start			\
+	.pushsection .vmi.native,"ax";		\
+	771:;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: include/asm-i386/mach-vmi/mach_asm.h:19:
+	.pushsection .vmi.native,"ax";		\
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#116: FILE: include/asm-i386/mach-vmi/mach_asm.h:20:
+	771:;
 	   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#117: FILE: include/asm-i386/mach-vmi/mach_asm.h:21:
+#define vmi_native_finish			\
+	772:;					\
+	.popsection;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#117: FILE: include/asm-i386/mach-vmi/mach_asm.h:21:
+#define vmi_native_finish			\
+	772:;					\
+	.popsection;

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#118: FILE: include/asm-i386/mach-vmi/mach_asm.h:22:
+	772:;					\
 	   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/asm-i386/mach-vmi/mach_asm.h:24:
+#define vmi_native_begin	771b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#121: FILE: include/asm-i386/mach-vmi/mach_asm.h:25:
+#define vmi_native_end		772b

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#125: FILE: include/asm-i386/mach-vmi/mach_asm.h:29:
+#define vmi_translation_start			\
+	.pushsection .vmi.translation,"ax";	\
+	781:;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#125: FILE: include/asm-i386/mach-vmi/mach_asm.h:29:
+#define vmi_translation_start			\
+	.pushsection .vmi.translation,"ax";	\
+	781:;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: include/asm-i386/mach-vmi/mach_asm.h:30:
+	.pushsection .vmi.translation,"ax";	\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#127: FILE: include/asm-i386/mach-vmi/mach_asm.h:31:
+	781:;
 	   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#128: FILE: include/asm-i386/mach-vmi/mach_asm.h:32:
+#define vmi_translation_finish			\
+	782:;					\
+	.popsection;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#128: FILE: include/asm-i386/mach-vmi/mach_asm.h:32:
+#define vmi_translation_finish			\
+	782:;					\
+	.popsection;

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#129: FILE: include/asm-i386/mach-vmi/mach_asm.h:33:
+	782:;					\
 	   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#131: FILE: include/asm-i386/mach-vmi/mach_asm.h:35:
+#define vmi_translation_begin	781b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#132: FILE: include/asm-i386/mach-vmi/mach_asm.h:36:
+#define vmi_translation_end	782b

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#136: FILE: include/asm-i386/mach-vmi/mach_asm.h:40:
+#define vmi_padded_start				\
+	791:;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#136: FILE: include/asm-i386/mach-vmi/mach_asm.h:40:
+#define vmi_padded_start				\
+	791:;

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#137: FILE: include/asm-i386/mach-vmi/mach_asm.h:41:
+	791:;
 	   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#138: FILE: include/asm-i386/mach-vmi/mach_asm.h:42:
+#define vmi_padded_finish				\
+	792:;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#138: FILE: include/asm-i386/mach-vmi/mach_asm.h:42:
+#define vmi_padded_finish				\
+	792:;

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#139: FILE: include/asm-i386/mach-vmi/mach_asm.h:43:
+	792:;
 	   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#140: FILE: include/asm-i386/mach-vmi/mach_asm.h:44:
+#define vmi_padded_begin	791b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#141: FILE: include/asm-i386/mach-vmi/mach_asm.h:45:
+#define vmi_padded_end		792b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#144: FILE: include/asm-i386/mach-vmi/mach_asm.h:48:
+#define vmi_call(name)						\
+	call .+5+name

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#144: FILE: include/asm-i386/mach-vmi/mach_asm.h:48:
+#define vmi_call(name)						\
+	call .+5+name

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: include/asm-i386/mach-vmi/mach_asm.h:49:
+	call .+5+name
 	      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: include/asm-i386/mach-vmi/mach_asm.h:49:
+	call .+5+name
 	        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#153: FILE: include/asm-i386/mach-vmi/mach_asm.h:57:
+#define vmi_nop_pad						\
+.equ vmi_pad_total, vmi_translation_len - vmi_native_len;	\
+.equ vmi_pad, vmi_pad_total;					\
+.rept (vmi_pad+11)/12;						\
+	.if vmi_pad > 12;					\
+		.equ vmi_cur_pad, 12;				\
+	.else;							\
+		.equ vmi_cur_pad, vmi_pad;			\
+	.endif;							\
+	.if vmi_cur_pad > 1;					\
+		.fill vmi_cur_pad-1, 1, 0x66;			\
+	.endif;							\
+	.byte 0x90;						\
+	.equ vmi_pad, vmi_pad - vmi_cur_pad;			\
+.endr;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#153: FILE: include/asm-i386/mach-vmi/mach_asm.h:57:
+#define vmi_nop_pad						\
+.equ vmi_pad_total, vmi_translation_len - vmi_native_len;	\
+.equ vmi_pad, vmi_pad_total;					\
+.rept (vmi_pad+11)/12;						\
+	.if vmi_pad > 12;					\
+		.equ vmi_cur_pad, 12;				\
+	.else;							\
+		.equ vmi_cur_pad, vmi_pad;			\
+	.endif;							\
+	.if vmi_cur_pad > 1;					\
+		.fill vmi_cur_pad-1, 1, 0x66;			\
+	.endif;							\
+	.byte 0x90;						\
+	.equ vmi_pad, vmi_pad - vmi_cur_pad;			\
+.endr;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#156: FILE: include/asm-i386/mach-vmi/mach_asm.h:60:
+.rept (vmi_pad+11)/12;						\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: include/asm-i386/mach-vmi/mach_asm.h:60:
+.rept (vmi_pad+11)/12;						\
               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#156: FILE: include/asm-i386/mach-vmi/mach_asm.h:60:
+.rept (vmi_pad+11)/12;						\
                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: include/asm-i386/mach-vmi/mach_asm.h:67:
+		.fill vmi_cur_pad-1, 1, 0x66;			\
 		                 ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#175: FILE: include/asm-i386/mach-vmi/mach_asm.h:79:
+#define vmi_annotate(name)				\
+	.pushsection .vmi.annotation,"a";		\
+	.align 4;					\
+	.long name;					\
+	.long vmi_padded_begin;				\
+	.long vmi_translation_begin;			\
+	.byte vmi_padded_len;				\
+	.byte vmi_translation_len;			\
+	.byte vmi_pad_total;				\
+	.byte 0;					\
+	.popsection;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/asm-i386/mach-vmi/mach_asm.h:80:
+	.pushsection .vmi.annotation,"a";		\
 	                            ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#187: FILE: include/asm-i386/mach-vmi/mach_asm.h:91:
+#define vmi_raw_call(name, native)			\
+	vmi_native_start;				\
+	native;						\
+	vmi_native_finish;				\
+							\
+	vmi_translation_start;				\
+	vmi_call(name);					\
+	vmi_translation_finish;				\
+							\
+	vmi_padded_start;				\
+	native;						\
+	vmi_nop_pad;					\
+	vmi_padded_finish;				\
+							\
+	vmi_annotate(name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#187: FILE: include/asm-i386/mach-vmi/mach_asm.h:91:
+#define vmi_raw_call(name, native)			\
+	vmi_native_start;				\
+	native;						\
+	vmi_native_finish;				\
+							\
+	vmi_translation_start;				\
+	vmi_call(name);					\
+	vmi_translation_finish;				\
+							\
+	vmi_padded_start;				\
+	native;						\
+	vmi_nop_pad;					\
+	vmi_padded_finish;				\
+							\
+	vmi_annotate(name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'native' - possible side-effects?
#187: FILE: include/asm-i386/mach-vmi/mach_asm.h:91:
+#define vmi_raw_call(name, native)			\
+	vmi_native_start;				\
+	native;						\
+	vmi_native_finish;				\
+							\
+	vmi_translation_start;				\
+	vmi_call(name);					\
+	vmi_translation_finish;				\
+							\
+	vmi_padded_start;				\
+	native;						\
+	vmi_nop_pad;					\
+	vmi_padded_finish;				\
+							\
+	vmi_annotate(name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#187: FILE: include/asm-i386/mach-vmi/mach_asm.h:91:
+#define vmi_raw_call(name, native)			\
+	vmi_native_start;				\
+	native;						\
+	vmi_native_finish;				\
+							\
+	vmi_translation_start;				\
+	vmi_call(name);					\
+	vmi_translation_finish;				\
+							\
+	vmi_padded_start;				\
+	native;						\
+	vmi_nop_pad;					\
+	vmi_padded_finish;				\
+							\
+	vmi_annotate(name);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#212: FILE: include/asm-i386/mach-vmi/mach_asm.h:116:
+#define VDEF(call)				\
+	.equ VMI_CALL_/**/call, VMI_CALL_CUR;	\
+	.equ VMI_CALL_CUR, VMI_CALL_CUR+1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#212: FILE: include/asm-i386/mach-vmi/mach_asm.h:116:
+#define VDEF(call)				\
+	.equ VMI_CALL_/**/call, VMI_CALL_CUR;	\
+	.equ VMI_CALL_CUR, VMI_CALL_CUR+1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: include/asm-i386/mach-vmi/mach_asm.h:118:
+	.equ VMI_CALL_CUR, VMI_CALL_CUR+1;
 	                               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#230: FILE: include/asm-i386/mach-vmi/mach_asm.h:134:
+#define GET_CR0		vmi_native_start;		\
+			mov %cr0, %eax;			\
+			vmi_native_finish;		\
+			vmi_translation_start;		\
+			vmi_call(VMI_CALL_GetCR0);	\
+			vmi_translation_finish;		\
+			vmi_padded_start;		\
+			mov %cr0, %eax;			\
+			vmi_nop_pad;			\
+			vmi_padded_finish;		\
+			vmi_annotate(VMI_CALL_GetCR0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#230: FILE: include/asm-i386/mach-vmi/mach_asm.h:134:
+#define GET_CR0		vmi_native_start;		\
+			mov %cr0, %eax;			\
+			vmi_native_finish;		\
+			vmi_translation_start;		\
+			vmi_call(VMI_CALL_GetCR0);	\
+			vmi_translation_finish;		\
+			vmi_padded_start;		\
+			mov %cr0, %eax;			\
+			vmi_nop_pad;			\
+			vmi_padded_finish;		\
+			vmi_annotate(VMI_CALL_GetCR0);

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#231: FILE: include/asm-i386/mach-vmi/mach_asm.h:135:
+			mov %cr0, %eax;			\
 			    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#231: FILE: include/asm-i386/mach-vmi/mach_asm.h:135:
+			mov %cr0, %eax;			\
 			          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#237: FILE: include/asm-i386/mach-vmi/mach_asm.h:141:
+			mov %cr0, %eax;			\
 			    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#237: FILE: include/asm-i386/mach-vmi/mach_asm.h:141:
+			mov %cr0, %eax;			\
 			          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#269: FILE: include/asm-i386/mach-vmi/mach_asm.h:173:
+#define VDEF(call)						\
+	asm (".equ VMI_CALL_" #call ", VMI_CALL_CUR;\n\t");	\
+	asm (".equ VMI_CALL_CUR, VMI_CALL_CUR+1;\n\t");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#269: FILE: include/asm-i386/mach-vmi/mach_asm.h:173:
+#define VDEF(call)						\
+	asm (".equ VMI_CALL_" #call ", VMI_CALL_CUR;\n\t");	\
+	asm (".equ VMI_CALL_CUR, VMI_CALL_CUR+1;\n\t");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: include/asm-i386/mach-vmi/vmi.h:1:
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#311: FILE: include/asm-i386/mach-vmi/vmi.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#312: FILE: include/asm-i386/mach-vmi/vmi.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#324: FILE: include/asm-i386/mach-vmi/vmi.h:32:
+struct Xgt_desc_struct;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#325: FILE: include/asm-i386/mach-vmi/vmi.h:33:
+typedef struct tss_struct VMI_TASK;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#326: FILE: include/asm-i386/mach-vmi/vmi.h:34:
+typedef struct Xgt_desc_struct VMI_DTR;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#327: FILE: include/asm-i386/mach-vmi/vmi.h:35:
+typedef uint64_t VMI_UINT64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#328: FILE: include/asm-i386/mach-vmi/vmi.h:36:
+typedef uint32_t VMI_UINT32;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#329: FILE: include/asm-i386/mach-vmi/vmi.h:37:
+typedef uint16_t VMI_UINT16;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#330: FILE: include/asm-i386/mach-vmi/vmi.h:38:
+typedef uint16_t VMI_SELECTOR;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#331: FILE: include/asm-i386/mach-vmi/vmi.h:39:
+typedef uint8_t VMI_UINT8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#332: FILE: include/asm-i386/mach-vmi/vmi.h:40:
+typedef int8_t VMI_INT8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#333: FILE: include/asm-i386/mach-vmi/vmi.h:41:
+typedef uint8_t VMI_BOOL;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#334: FILE: include/asm-i386/mach-vmi/vmi.h:42:
+typedef uint64_t VMI_CYCLES;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: include/asm-i386/mach-vmi/vmi.h:76:
+#if (__GNUC__ == 4) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#393: FILE: include/asm-i386/mach-vmi/vmi.h:101:
+#define vmi_input2 ^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#393: FILE: include/asm-i386/mach-vmi/vmi.h:101:
+#define vmi_input2 		\
+	vmi_input_early(1)	\
+	vmi_input_early(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#397: FILE: include/asm-i386/mach-vmi/vmi.h:105:
+#define vmi_input3		\
+	vmi_input_early(2)	\
+	vmi_input_early(1)	\
+	vmi_input_early(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#402: FILE: include/asm-i386/mach-vmi/vmi.h:110:
+#define vmi_input4		\
+	vmi_input(3)		\
+	vmi_input_early(2)	\
+	vmi_input_early(1)	\
+	vmi_input_early(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#408: FILE: include/asm-i386/mach-vmi/vmi.h:116:
+#define vmi_input5		\
+	vmi_input(4)		\
+	vmi_input(3)		\
+	vmi_input_early(2)	\
+	vmi_input_early(1)	\
+	vmi_input_early(0)

WARNING:TYPO_SPELLING: 'Pecularities' may be misspelled - perhaps 'Peculiarities'?
#446: FILE: include/asm-i386/mach-vmi/vmi.h:154:
+ * Pecularities:
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'native' - possible side-effects?
#453: FILE: include/asm-i386/mach-vmi/vmi.h:161:
+#define vmi_wrap_call(call, native, output, num_inputs, input, clobber)		\
+do {										\
+	asm volatile (XCSTR(vmi_native_start) 				"\n\t"	\
+		      native						"\n\t"	\
+		      XCSTR(vmi_native_finish)				"\n\t"	\
+										\
+		      XCSTR(vmi_translation_start)			"\n\t"	\
+		      vmi_preamble(num_inputs)				"\n\t"	\
+		      XCSTR(vmi_call(VMI_CALL_##call))			"\n\t"	\
+		      vmi_postamble(num_inputs)				"\n\t"	\
+		      XCSTR(vmi_translation_finish)			"\n\t"	\
+										\
+		      XCSTR(vmi_padded_start) 				"\n\t"	\
+		      native						"\n\t"	\
+		      XCSTR(vmi_nop_pad)				"\n\t"	\
+		      XCSTR(vmi_padded_finish)				"\n\t"	\
+										\
+		      XCSTR(vmi_annotate(VMI_CALL_##call))		"\n\t"	\
+										\
+		      :: input );						\
+	asm volatile ( "" : output :: clobber );				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num_inputs' - possible side-effects?
#453: FILE: include/asm-i386/mach-vmi/vmi.h:161:
+#define vmi_wrap_call(call, native, output, num_inputs, input, clobber)		\
+do {										\
+	asm volatile (XCSTR(vmi_native_start) 				"\n\t"	\
+		      native						"\n\t"	\
+		      XCSTR(vmi_native_finish)				"\n\t"	\
+										\
+		      XCSTR(vmi_translation_start)			"\n\t"	\
+		      vmi_preamble(num_inputs)				"\n\t"	\
+		      XCSTR(vmi_call(VMI_CALL_##call))			"\n\t"	\
+		      vmi_postamble(num_inputs)				"\n\t"	\
+		      XCSTR(vmi_translation_finish)			"\n\t"	\
+										\
+		      XCSTR(vmi_padded_start) 				"\n\t"	\
+		      native						"\n\t"	\
+		      XCSTR(vmi_nop_pad)				"\n\t"	\
+		      XCSTR(vmi_padded_finish)				"\n\t"	\
+										\
+		      XCSTR(vmi_annotate(VMI_CALL_##call))		"\n\t"	\
+										\
+		      :: input );						\
+	asm volatile ( "" : output :: clobber );				\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: include/asm-i386/mach-vmi/vmi.h:163:
+^Iasm volatile (XCSTR(vmi_native_start) ^I^I^I^I"\n\t"^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: include/asm-i386/mach-vmi/vmi.h:173:
+^I^I      XCSTR(vmi_padded_start) ^I^I^I^I"\n\t"^I\$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#472: FILE: include/asm-i386/mach-vmi/vmi.h:180:
+		      :: input );						\

ERROR:SPACING: space prohibited after that open parenthesis '('
#473: FILE: include/asm-i386/mach-vmi/vmi.h:181:
+	asm volatile ( "" : output :: clobber );				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#473: FILE: include/asm-i386/mach-vmi/vmi.h:181:
+	asm volatile ( "" : output :: clobber );				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#481: FILE: include/asm-i386/mach-vmi/vmi.h:189:
+^Iunsigned char ^I*nativeEIP;$

CHECK:CAMELCASE: Avoid CamelCase: <nativeEIP>
#481: FILE: include/asm-i386/mach-vmi/vmi.h:189:
+	unsigned char 	*nativeEIP;

CHECK:CAMELCASE: Avoid CamelCase: <translationEIP>
#482: FILE: include/asm-i386/mach-vmi/vmi.h:190:
+	unsigned char	*translationEIP;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: include/asm-i386/mach-vmi/vmi.h:202:
+#define VMICALL extern __attribute__((regparm(3))) $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#494: FILE: include/asm-i386/mach-vmi/vmi.h:202:
+#define VMICALL extern __attribute__((regparm(3))) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: include/asm-i386/mach-vmi/vmi.h:213:
+                                 int count);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: include/asm-i386/mach-vmi/vmi.h:213:
+VMICALL void		VMI_AllocatePage(VMI_UINT32 ppn, int flags, VMI_UINT32 orig, int base,
+                                 int count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: include/asm-i386/mach-vmi/vmi.h:213:
+                                 int count);$

CHECK:CAMELCASE: Avoid CamelCase: <apState>
#510: FILE: include/asm-i386/mach-vmi/vmi.h:218:
+VMICALL void            VMI_SetInitialAPState(VMI_UINT32 apState,

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: include/asm-i386/mach-vmi/vmi.h:219:
+                                              VMI_UINT32 apicId);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/asm-i386/mach-vmi/vmi.h:219:
+                                              VMI_UINT32 apicId);$

CHECK:CAMELCASE: Avoid CamelCase: <apicId>
#511: FILE: include/asm-i386/mach-vmi/vmi.h:219:
+                                              VMI_UINT32 apicId);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: include/asm-i386/mach-vmi/vmi.h:222:
+#define vmi_set_pxe(p,v)		VMI_SetPxE((VMI_UINT32 *)(p),v)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: include/asm-i386/mach-vmi/vmi.h:222:
+#define vmi_set_pxe(p,v)		VMI_SetPxE((VMI_UINT32 *)(p),v)
                         		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#515: FILE: include/asm-i386/mach-vmi/vmi.h:223:
+#define vmi_set_pxe_long(v,p)		VMI_SetPxELong(v, (VMI_UINT64 *)(p))
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#516: FILE: include/asm-i386/mach-vmi/vmi.h:224:
+#define vmi_set_pxe_long_atomic(v,p)	VMI_SetPxELongAtomic(v, (VMI_UINT64 *)(p))
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: include/asm-i386/mach-vmi/vmi.h:225:
+#define vmi_get_pxe(p,v)		VMI_GetPxE((VMI_UINT32 *)(p),v)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: include/asm-i386/mach-vmi/vmi.h:225:
+#define vmi_get_pxe(p,v)		VMI_GetPxE((VMI_UINT32 *)(p),v)
                         		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: include/asm-i386/mach-vmi/vmi.h:226:
+#define vmi_swap_pxe(p,v)		VMI_SwapPxE((VMI_UINT32 *)(p),v)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: include/asm-i386/mach-vmi/vmi.h:226:
+#define vmi_swap_pxe(p,v)		VMI_SwapPxE((VMI_UINT32 *)(p),v)
                          		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#519: FILE: include/asm-i386/mach-vmi/vmi.h:227:
+#define vmi_test_and_set_pxe_bit(p,b)	VMI_TestAndSetPxEBit((VMI_UINT32 *)(p),b)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#519: FILE: include/asm-i386/mach-vmi/vmi.h:227:
+#define vmi_test_and_set_pxe_bit(p,b)	VMI_TestAndSetPxEBit((VMI_UINT32 *)(p),b)
                                      	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: include/asm-i386/mach-vmi/vmi.h:228:
+#define vmi_test_and_clear_pxe_bit(p,b)	VMI_TestAndClearPxEBit((VMI_UINT32 *)(p),b)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: include/asm-i386/mach-vmi/vmi.h:228:
+#define vmi_test_and_clear_pxe_bit(p,b)	VMI_TestAndClearPxEBit((VMI_UINT32 *)(p),b)
                                        	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/asm-i386/mach-vmi/vmi.h:229:
+#define vmi_test_and_set_pxe_long_bit(p,b)	VMI_TestAndSetPxELongBit((VMI_UINT64 *)(p),b)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/asm-i386/mach-vmi/vmi.h:229:
+#define vmi_test_and_set_pxe_long_bit(p,b)	VMI_TestAndSetPxELongBit((VMI_UINT64 *)(p),b)
                                           	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: include/asm-i386/mach-vmi/vmi.h:230:
+#define vmi_test_and_clear_pxe_long_bit(p,b)	VMI_TestAndClearPxELongBit((VMI_UINT64 *)(p),b)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: include/asm-i386/mach-vmi/vmi.h:230:
+#define vmi_test_and_clear_pxe_long_bit(p,b)	VMI_TestAndClearPxELongBit((VMI_UINT64 *)(p),b)
                                             	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/mach-vmi/vmi.h:231:
+#define vmi_allocate_page(p,f,r,b,c)    VMI_AllocatePage(p,f,r,b,c)
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: include/asm-i386/mach-vmi/vmi.h:232:
+#define vmi_release_page(p,f)		VMI_ReleasePage(p,f)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: include/asm-i386/mach-vmi/vmi.h:232:
+#define vmi_release_page(p,f)		VMI_ReleasePage(p,f)
                              		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: include/asm-i386/mach-vmi/vmi.h:235:
+#define vmi_set_initial_ap_state(s,a)   VMI_SetInitialAPState(s,a)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: include/asm-i386/mach-vmi/vmi.h:235:
+#define vmi_set_initial_ap_state(s,a)   VMI_SetInitialAPState(s,a)
                                                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: include/asm-i386/mach-vmi/vmi.h:242:
+extern void probe_vmi_timer(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: arch/i386/Kconfig:148:
+choice $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#550: FILE: arch/i386/Kconfig:148:
+choice 
+	prompt "VMI call convention"
+	default VMI_C_CONVENTION
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#554: FILE: arch/i386/Kconfig:152:
+config VMI_C_CONVENTION
+	bool "Use standard C calling convention"
+	help
+	   Use standard C calling convention with stack passing and
+	   normal scratch registers (eax, ecx, edx).  Returns are in
+	   eax, edx as usual.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#561: FILE: arch/i386/Kconfig:159:
+config VMI_CALL_SAVED_ECX
+	bool "Use call saved ECX calling convention"
+	help
+	   Use non-C convention, with stack passing and only eax, edx as
+	   scratch registers.  Caller must save ECX if used.  Returns are
+	   unchanged.  VMI code may be written in C using -fcall-saved-ecx.
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 71 errors, 27 warnings, 30 checks, 487 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
