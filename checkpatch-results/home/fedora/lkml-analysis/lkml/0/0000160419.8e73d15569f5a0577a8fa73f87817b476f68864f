WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#58: 
Signed-off-by:  Stephen Smalley <sds@tycho.nsa.gov>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#59: 
Signed-off-by:  James Morris <jmorris@namei.org>

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#97: FILE: security/selinux/ss/avtab.c:61:
+	u16 specified = key->specified & ~(AVTAB_ENABLED|AVTAB_ENABLED_OLD);
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#114: FILE: security/selinux/ss/avtab.c:102:
+	u16 specified = key->specified & ~(AVTAB_ENABLED|AVTAB_ENABLED_OLD);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#136: FILE: security/selinux/ss/avtab.c:134:
+	u16 specified = key->specified & ~(AVTAB_ENABLED|AVTAB_ENABLED_OLD);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#158: FILE: security/selinux/ss/avtab.c:169:
+	u16 specified = key->specified & ~(AVTAB_ENABLED|AVTAB_ENABLED_OLD);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#175: FILE: security/selinux/ss/avtab.c:203:
+	specified &= ~(AVTAB_ENABLED|AVTAB_ENABLED_OLD);
 	                            ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#194: FILE: security/selinux/ss/avtab.c:286:
+static uint16_t spec_order[] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: security/selinux/ss/avtab.c:296:
+^I            int (*insertf)(struct avtab *a, struct avtab_key *k,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: security/selinux/ss/avtab.c:296:
+int avtab_read_item(void *fp, u32 vers, struct avtab *a,
+	            int (*insertf)(struct avtab *a, struct avtab_key *k,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#220: FILE: security/selinux/ss/avtab.c:312:
+			printk(KERN_ERR "security: avtab: truncated entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#225: FILE: security/selinux/ss/avtab.c:317:
+			printk(KERN_ERR "security: avtab: entry overflow\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#230: FILE: security/selinux/ss/avtab.c:320:
 
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#231: FILE: security/selinux/ss/avtab.c:321:
+		rc = next_entry(buf32, fp, sizeof(u32)*items2);
 		                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#233: FILE: security/selinux/ss/avtab.c:323:
+			printk(KERN_ERR "security: avtab: truncated entry\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: security/selinux/ss/avtab.c:331:
+			printk("security: avtab: truncated source type\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: security/selinux/ss/avtab.c:337:
+			printk("security: avtab: truncated target type\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: security/selinux/ss/avtab.c:343:
+			printk("security: avtab: truncated target class\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: security/selinux/ss/avtab.c:351:
+			printk("security: avtab: null entry\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: security/selinux/ss/avtab.c:356:
+			printk("security: avtab: entry has both access vectors and types\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#279: FILE: security/selinux/ss/avtab.c:360:
+		for (i = 0; i < sizeof(spec_order)/sizeof(u16); i++) {
 		                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#284: FILE: security/selinux/ss/avtab.c:365:
+				if (rc) return rc;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#289: FILE: security/selinux/ss/avtab.c:370:
+			printk("security: avtab: entry only had %d items, expected %d\n", items2, items);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: security/selinux/ss/avtab.c:370:
+			printk("security: avtab: entry only had %d items, expected %d\n", items2, items);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#296: FILE: security/selinux/ss/avtab.c:376:
+	rc = next_entry(buf16, fp, sizeof(u16)*4);
 	                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: security/selinux/ss/avtab.c:378:
+		printk("security: avtab: truncated entry\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#344: FILE: security/selinux/ss/avtab.c:390:
+		printk("security: avtab: truncated entry\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: security/selinux/ss/avtab.c:422:
+		rc = avtab_read_item(fp,vers, a, avtab_insertf, NULL);
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#532: FILE: security/selinux/ss/conditional.c:279:
+			printk("security: type rule already exists outside of a conditional.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#581: FILE: security/selinux/ss/conditional.c:294:
+					printk("security: too many conflicting type rules.");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#585: FILE: security/selinux/ss/conditional.c:298:
+				for (cur = other; cur != NULL; cur = cur->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#595: FILE: security/selinux/ss/conditional.c:305:
+					printk("security: conflicting type rules.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: security/selinux/ss/conditional.c:311:
+				printk("security: conflicting type rules when adding type rule for true.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#626: FILE: security/selinux/ss/conditional.c:319:
+		printk("security: could not insert rule.");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*list)...) over kmalloc(sizeof(struct cond_av_list)...)
#630: FILE: security/selinux/ss/conditional.c:323:
+	list = kmalloc(sizeof(struct cond_av_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#651: FILE: security/selinux/ss/conditional.c:342:
+static int cond_read_av_list(struct policydb *p, void *fp, struct cond_av_list **ret_list, struct cond_av_list *other)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#665: FILE: security/selinux/ss/conditional.c:356:
+	if (len == 0) {
+		return 0;
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#678: FILE: security/selinux/ss/conditional.c:369:
+
+	}

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: security/selinux/ss/conditional.c:491:
+	for(node = avtab_search_node(ctab, key); node != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#706: FILE: security/selinux/ss/conditional.c:491:
+	for(node = avtab_search_node(ctab, key); node != NULL;

CHECK:SPACING: No space is necessary after a cast
#708: FILE: security/selinux/ss/conditional.c:493:
+		if ( (u16) (AVTAB_ALLOWED|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#708: FILE: security/selinux/ss/conditional.c:493:
+		if ( (u16) (AVTAB_ALLOWED|AVTAB_ENABLED) ==
 		                         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#708: FILE: security/selinux/ss/conditional.c:493:
+		if ( (u16) (AVTAB_ALLOWED|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: security/selinux/ss/conditional.c:494:
+		     (node->key.specified & (AVTAB_ALLOWED|AVTAB_ENABLED)))
 		                                          ^

CHECK:SPACING: No space is necessary after a cast
#711: FILE: security/selinux/ss/conditional.c:496:
+		if ( (u16) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#711: FILE: security/selinux/ss/conditional.c:496:
+		if ( (u16) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==
 		                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#711: FILE: security/selinux/ss/conditional.c:496:
+		if ( (u16) (AVTAB_AUDITDENY|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: security/selinux/ss/conditional.c:497:
+		     (node->key.specified & (AVTAB_AUDITDENY|AVTAB_ENABLED)))
 		                                            ^

CHECK:SPACING: No space is necessary after a cast
#723: FILE: security/selinux/ss/conditional.c:504:
+		if ( (u16) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#723: FILE: security/selinux/ss/conditional.c:504:
+		if ( (u16) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==
 		                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#723: FILE: security/selinux/ss/conditional.c:504:
+		if ( (u16) (AVTAB_AUDITALLOW|AVTAB_ENABLED) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#724: FILE: security/selinux/ss/conditional.c:505:
+		     (node->key.specified & (AVTAB_AUDITALLOW|AVTAB_ENABLED)))
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: security/selinux/ss/ebitmap.h:56:
+	return (bit+1);
 	           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: security/selinux/ss/ebitmap.h:59:
+static inline int ebitmap_node_get_bit(struct ebitmap_node * n,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#768: FILE: security/selinux/ss/ebitmap.h:67:
+#define ebitmap_for_each_bit(e, n, bit) \
+	for (bit = ebitmap_start(e, &n); bit < ebitmap_length(e); bit = ebitmap_next(&n, bit)) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#768: FILE: security/selinux/ss/ebitmap.h:67:
+#define ebitmap_for_each_bit(e, n, bit) \
+	for (bit = ebitmap_start(e, &n); bit < ebitmap_length(e); bit = ebitmap_next(&n, bit)) \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#768: FILE: security/selinux/ss/ebitmap.h:67:
+#define ebitmap_for_each_bit(e, n, bit) \
+	for (bit = ebitmap_start(e, &n); bit < ebitmap_length(e); bit = ebitmap_next(&n, bit)) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#768: FILE: security/selinux/ss/ebitmap.h:67:
+#define ebitmap_for_each_bit(e, n, bit) \
+	for (bit = ebitmap_start(e, &n); bit < ebitmap_length(e); bit = ebitmap_next(&n, bit)) \
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#769: FILE: security/selinux/ss/ebitmap.h:68:
+	for (bit = ebitmap_start(e, &n); bit < ebitmap_length(e); bit = ebitmap_next(&n, bit)) \
[...]
 int ebitmap_cmp(struct ebitmap *e1, struct ebitmap *e2);

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: security/selinux/ss/mls.c:494:
+^I^I^I^I         ^Ioldp->p_cat_val_to_name[i]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#910: FILE: security/selinux/ss/mls.c:494:
+^I^I^I^I         ^Ioldp->p_cat_val_to_name[i]);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#944: FILE: security/selinux/ss/policydb.c:636:
+		if (ltr) kfree(ltr);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#947: FILE: security/selinux/ss/policydb.c:639:
+	if (ltr) kfree(ltr);

ERROR:SPACING: spaces prohibited around that '->' (ctx:WxW)
#949: FILE: security/selinux/ss/policydb.c:641:
+	for (ra = p->role_allow; ra; ra = ra -> next) {
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#950: FILE: security/selinux/ss/policydb.c:642:
+		if (lra) kfree(lra);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#953: FILE: security/selinux/ss/policydb.c:645:
+	if (lra) kfree(lra);

ERROR:SPACING: spaces prohibited around that '->' (ctx:WxW)
#955: FILE: security/selinux/ss/policydb.c:647:
+	for (rt = p->range_tr; rt; rt = rt -> next) {
 	                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#956: FILE: security/selinux/ss/policydb.c:648:
+		if (lrt) kfree(lrt);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#959: FILE: security/selinux/ss/policydb.c:651:
+	if (lrt) kfree(lrt);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#981: FILE: security/selinux/ss/policydb.c:1858:
+	p->type_attr_map = kmalloc(p->p_types.nprim*sizeof(struct ebitmap), GFP_KERNEL);
 	                                           ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#992: FILE: security/selinux/ss/policydb.c:1869:
+		if (ebitmap_set_bit(&p->type_attr_map[i], i, 1))
+				goto bad;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#1056: FILE: security/selinux/ss/services.c:319:
+			     node != NULL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1071: FILE: security/selinux/ss/services.c:332:
+
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 24 warnings, 32 checks, 1006 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
