WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: drivers/perfctr/ppc64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: drivers/perfctr/ppc64.c:21:
+extern void ppc64_enable_pmcs(void); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#64: FILE: drivers/perfctr/ppc64.c:29:
+};
+static DEFINE_PER_CPU(struct per_cpu_cache, per_cpu_cache);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#91: FILE: drivers/perfctr/ppc64.c:56:
+		return mfspr(SPRN_PMC1);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#94: FILE: drivers/perfctr/ppc64.c:59:
+		return mfspr(SPRN_PMC2);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#97: FILE: drivers/perfctr/ppc64.c:62:
+		return mfspr(SPRN_PMC3);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#100: FILE: drivers/perfctr/ppc64.c:65:
+		return mfspr(SPRN_PMC4);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#103: FILE: drivers/perfctr/ppc64.c:68:
+		return mfspr(SPRN_PMC5);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#106: FILE: drivers/perfctr/ppc64.c:71:
+		return mfspr(SPRN_PMC6);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#109: FILE: drivers/perfctr/ppc64.c:74:
+		return mfspr(SPRN_PMC7);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#112: FILE: drivers/perfctr/ppc64.c:77:
+		return mfspr(SPRN_PMC8);
+		break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: drivers/perfctr/ppc64.c:79:
+^Idefault: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: drivers/perfctr/ppc64.c:130:
+	 * preempt_disable() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#183: FILE: drivers/perfctr/ppc64.c:148:
+
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#200: FILE: drivers/perfctr/ppc64.c:165:
+	state->isuspend_cpu = NR_CPUS;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: drivers/perfctr/ppc64.c:174:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#263: FILE: drivers/perfctr/ppc64.c:228:
+	if (perfctr_cstatus_has_ictrs(state->user.cstatus))
+	    value |= MMCR0_PMXE;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#316: FILE: drivers/perfctr/ppc64.c:281:
+		/* Clearing cache->id to force write_control()
+		   to unfreeze MMCR0 would be done here, but it

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#317: FILE: drivers/perfctr/ppc64.c:282:
+		   is subsumed by resume()'s MMCR0 reload logic. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#318: FILE: drivers/perfctr/ppc64.c:283:
+		if (is_isuspend_cpu(state, cpu)) {
+			return; /* skip reload of PMCs */
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#336: FILE: drivers/perfctr/ppc64.c:301:
+	for (i = perfctr_cstatus_nractrs(cstatus); i < nrctrs; ++i) {
+		write_pmc(state->user.pmc[i].map, state->user.pmc[i].start);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: drivers/perfctr/ppc64.c:307:
+/* Call perfctr_cpu_ireload() just before perfctr_cpu_resume() to
+   bypass internal caching and force a reload if the I-mode PMCs. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#342: FILE: drivers/perfctr/ppc64.c:307:
+   bypass internal caching and force a reload if the I-mode PMCs. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#370: FILE: drivers/perfctr/ppc64.c:335:
+	 * about. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#393: FILE: drivers/perfctr/ppc64.c:358:
+	 * the interrupt */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#395: FILE: drivers/perfctr/ppc64.c:360:
+		if (! (state->unused_pmcs & (1<<i)))
 		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#395: FILE: drivers/perfctr/ppc64.c:360:
+		if (! (state->unused_pmcs & (1<<i)))
 		                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#403: FILE: drivers/perfctr/ppc64.c:368:
+	/* XXX: HW cleared MMCR0[ENINT]. We presumably cleared the entire
+	   MMCR0, so the re-enable occurs automatically later, no? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#403: FILE: drivers/perfctr/ppc64.c:368:
+	   MMCR0, so the re-enable occurs automatically later, no? */

ERROR:SPACING: space required before the open parenthesis '('
#413: FILE: drivers/perfctr/ppc64.c:378:
+	for(; i < nrctrs; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: drivers/perfctr/ppc64.c:380:
+		unsigned int pmc = state->user.pmc[i].map;
+		if ((int)state->control.ireset[pmc] < 0) /* PPC64-specific */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#445: FILE: drivers/perfctr/ppc64.c:410:
+		if (pmc >= nr_pmcs || (pmc_mask & (1<<pmc)))
 		                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#447: FILE: drivers/perfctr/ppc64.c:412:
+		pmc_mask |= (1<<pmc);
 		              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#452: FILE: drivers/perfctr/ppc64.c:417:
+	 * TB interrupts, so we don't allow those either. */

ERROR:SPACING: space prohibited after that open parenthesis '('
#453: FILE: drivers/perfctr/ppc64.c:418:
+	if ( (state->control.mmcr0 & MMCR0_PMXE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: drivers/perfctr/ppc64.c:419:
+^I     || (state->control.mmcr0 & MMCR0_PMAO) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: drivers/perfctr/ppc64.c:419:
+	if ( (state->control.mmcr0 & MMCR0_PMXE)
+	     || (state->control.mmcr0 & MMCR0_PMAO) 

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#455: FILE: drivers/perfctr/ppc64.c:420:
+	     || (state->control.mmcr0 & MMCR0_PMAO) 
+	     || (state->control.mmcr0 & MMCR0_TBEE) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#455: FILE: drivers/perfctr/ppc64.c:420:
+	     || (state->control.mmcr0 & MMCR0_TBEE) )

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#458: FILE: drivers/perfctr/ppc64.c:423:
+	state->unused_pmcs = ((1 << nr_pmcs)-1) & ~pmc_mask;
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: drivers/perfctr/ppc64.c:424:
+^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#474: FILE: drivers/perfctr/ppc64.c:439:
+	if (!(perfctr_info.cpu_features & PERFCTR_FEATURE_PCINT)
+	    && state->control.header.nrictrs)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#500: FILE: drivers/perfctr/ppc64.c:465:
+	{ SPRN_PMC1,  offsetof(struct perfctr_cpu_control, ireset[1-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: drivers/perfctr/ppc64.c:466:
+	{ SPRN_PMC2,  offsetof(struct perfctr_cpu_control, ireset[2-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: drivers/perfctr/ppc64.c:467:
+	{ SPRN_PMC3,  offsetof(struct perfctr_cpu_control, ireset[3-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#503: FILE: drivers/perfctr/ppc64.c:468:
+	{ SPRN_PMC4,  offsetof(struct perfctr_cpu_control, ireset[4-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#504: FILE: drivers/perfctr/ppc64.c:469:
+	{ SPRN_PMC5,  offsetof(struct perfctr_cpu_control, ireset[5-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#505: FILE: drivers/perfctr/ppc64.c:470:
+	{ SPRN_PMC6,  offsetof(struct perfctr_cpu_control, ireset[6-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: drivers/perfctr/ppc64.c:471:
+	{ SPRN_PMC7,  offsetof(struct perfctr_cpu_control, ireset[7-1]), sizeof(int) },
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#507: FILE: drivers/perfctr/ppc64.c:472:
+	{ SPRN_PMC8,  offsetof(struct perfctr_cpu_control, ireset[8-1]), sizeof(int) },
 	                                                           ^

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: drivers/perfctr/ppc64.c:479:
+	for(i = 0; i < ARRAY_SIZE(reg_offsets); ++i)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#532: FILE: drivers/perfctr/ppc64.c:497:
+	regs = (struct perfctr_cpu_reg*)argp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: drivers/perfctr/ppc64.c:499:
+	for(i = 0; i < nr_regs; ++i) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#539: FILE: drivers/perfctr/ppc64.c:504:
+			unsigned long *where = (unsigned long*)((char*)control + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#539: FILE: drivers/perfctr/ppc64.c:504:
+			unsigned long *where = (unsigned long*)((char*)control + offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: drivers/perfctr/ppc64.c:505:
+			unsigned long *where = (unsigned long*)((char*)control + offset);
+			if (do_write)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#545: FILE: drivers/perfctr/ppc64.c:510:
+			unsigned int *where = (unsigned int*)((char*)control + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#545: FILE: drivers/perfctr/ppc64.c:510:
+			unsigned int *where = (unsigned int*)((char*)control + offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: drivers/perfctr/ppc64.c:511:
+			unsigned int *where = (unsigned int*)((char*)control + offset);
+			if (do_write)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#560: FILE: drivers/perfctr/ppc64.c:525:
+	return access_regs(control, (void*)srcp, srcbytes, 1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#568: FILE: drivers/perfctr/ppc64.c:533:
+	return access_regs((struct perfctr_cpu_control*)control, dstp, dstbytes, 0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#597: FILE: drivers/perfctr/ppc64.c:562:
+	if (perfctr_cstatus_has_ictrs(state->user.cstatus))
+	    perfctr_cpu_iresume(state);

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: drivers/perfctr/ppc64.c:589:
+	for(i = 0; i < nractrs; ++i) {

WARNING:SIZEOF_PARENTHESIS: sizeof *cache should be sizeof(*cache)
#635: FILE: drivers/perfctr/ppc64.c:600:
+	memset(cache, 0, sizeof *cache);

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: drivers/perfctr/ppc64.c:616:
+        unsigned long long mmcr0 = mfspr(SPRN_MMCR0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: drivers/perfctr/ppc64.c:616:
+        unsigned long long mmcr0 = mfspr(SPRN_MMCR0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: drivers/perfctr/ppc64.c:617:
+        unsigned long long mmcra = mfspr(SPRN_MMCRA);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: drivers/perfctr/ppc64.c:617:
+        unsigned long long mmcra = mfspr(SPRN_MMCRA);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: drivers/perfctr/ppc64.c:619:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: drivers/perfctr/ppc64.c:620:
+        ppc64_enable_pmcs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: drivers/perfctr/ppc64.c:620:
+        ppc64_enable_pmcs();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: drivers/perfctr/ppc64.c:622:
+        mmcr0 |= MMCR0_FC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: drivers/perfctr/ppc64.c:622:
+        mmcr0 |= MMCR0_FC;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: drivers/perfctr/ppc64.c:623:
+        mtspr(SPRN_MMCR0, mmcr0); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: drivers/perfctr/ppc64.c:623:
+        mtspr(SPRN_MMCR0, mmcr0); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/perfctr/ppc64.c:623:
+        mtspr(SPRN_MMCR0, mmcr0); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: drivers/perfctr/ppc64.c:625:
+        mmcr0 |= MMCR0_FCM1|MMCR0_PMXE|MMCR0_FCECE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: drivers/perfctr/ppc64.c:625:
+        mmcr0 |= MMCR0_FCM1|MMCR0_PMXE|MMCR0_FCECE;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#660: FILE: drivers/perfctr/ppc64.c:625:
+        mmcr0 |= MMCR0_FCM1|MMCR0_PMXE|MMCR0_FCECE;
                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#660: FILE: drivers/perfctr/ppc64.c:625:
+        mmcr0 |= MMCR0_FCM1|MMCR0_PMXE|MMCR0_FCECE;
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: drivers/perfctr/ppc64.c:626:
+        mmcr0 |= MMCR0_PMC1CE|MMCR0_PMCjCE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: drivers/perfctr/ppc64.c:626:
+        mmcr0 |= MMCR0_PMC1CE|MMCR0_PMCjCE;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#661: FILE: drivers/perfctr/ppc64.c:626:
+        mmcr0 |= MMCR0_PMC1CE|MMCR0_PMCjCE;
                              ^

CHECK:CAMELCASE: Avoid CamelCase: <MMCR0_PMCjCE>
#661: FILE: drivers/perfctr/ppc64.c:626:
+        mmcr0 |= MMCR0_PMC1CE|MMCR0_PMCjCE;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: drivers/perfctr/ppc64.c:627:
+        mtspr(SPRN_MMCR0, mmcr0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: drivers/perfctr/ppc64.c:627:
+        mtspr(SPRN_MMCR0, mmcr0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: drivers/perfctr/ppc64.c:629:
+        mmcra |= MMCRA_SAMPLE_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: drivers/perfctr/ppc64.c:629:
+        mmcra |= MMCRA_SAMPLE_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: drivers/perfctr/ppc64.c:630:
+        mtspr(SPRN_MMCRA, mmcra);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: drivers/perfctr/ppc64.c:630:
+        mtspr(SPRN_MMCRA, mmcra);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#667: FILE: drivers/perfctr/ppc64.c:632:
+	printk("setup on cpu %d, mmcr0 %lx\n", smp_processor_id(),

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: drivers/perfctr/ppc64.c:633:
+            mfspr(SPRN_MMCR0));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: drivers/perfctr/ppc64.c:633:
+	printk("setup on cpu %d, mmcr0 %lx\n", smp_processor_id(),
+            mfspr(SPRN_MMCR0));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: drivers/perfctr/ppc64.c:633:
+            mfspr(SPRN_MMCR0));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#669: FILE: drivers/perfctr/ppc64.c:634:
+	printk("setup on cpu %d, mmcr1 %lx\n", smp_processor_id(),

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: drivers/perfctr/ppc64.c:635:
+            mfspr(SPRN_MMCR1));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/perfctr/ppc64.c:635:
+	printk("setup on cpu %d, mmcr1 %lx\n", smp_processor_id(),
+            mfspr(SPRN_MMCR1));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: drivers/perfctr/ppc64.c:635:
+            mfspr(SPRN_MMCR1));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#671: FILE: drivers/perfctr/ppc64.c:636:
+	printk("setup on cpu %d, mmcra %lx\n", smp_processor_id(),

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: drivers/perfctr/ppc64.c:637:
+            mfspr(SPRN_MMCRA));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: drivers/perfctr/ppc64.c:637:
+	printk("setup on cpu %d, mmcra %lx\n", smp_processor_id(),
+            mfspr(SPRN_MMCRA));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: drivers/perfctr/ppc64.c:637:
+            mfspr(SPRN_MMCRA));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: drivers/perfctr/ppc64.c:644:
+        mmcr0 &= ~MMCR0_PMAO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: drivers/perfctr/ppc64.c:644:
+        mmcr0 &= ~MMCR0_PMAO;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: drivers/perfctr/ppc64.c:645:
+        mmcr0 &= ~MMCR0_FC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: drivers/perfctr/ppc64.c:645:
+        mmcr0 &= ~MMCR0_FC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: drivers/perfctr/ppc64.c:646:
+        mtspr(SPRN_MMCR0, mmcr0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: drivers/perfctr/ppc64.c:646:
+        mtspr(SPRN_MMCR0, mmcr0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: drivers/perfctr/ppc64.c:648:
+        printk("start on cpu %d, mmcr0 %llx\n", smp_processor_id(), mmcr0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: drivers/perfctr/ppc64.c:648:
+        printk("start on cpu %d, mmcr0 %llx\n", smp_processor_id(), mmcr0);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#683: FILE: drivers/perfctr/ppc64.c:648:
+        printk("start on cpu %d, mmcr0 %llx\n", smp_processor_id(), mmcr0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#686: FILE: drivers/perfctr/ppc64.c:651:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#690: FILE: drivers/perfctr/ppc64.c:655:
+	/* PREEMPT note: when called via on_each_cpu(),
+	   this is in IRQ context with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#690: FILE: drivers/perfctr/ppc64.c:655:
+	   this is in IRQ context with preemption disabled. */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#702: FILE: drivers/perfctr/ppc64.c:667:
+	extern unsigned long ppc_proc_freq;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#703: FILE: drivers/perfctr/ppc64.c:668:
+	extern unsigned long ppc_tb_freq;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: drivers/perfctr/ppc64.c:674:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#713: FILE: drivers/perfctr/ppc64.c:678:
+	 * suchlike */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: drivers/perfctr/ppc64.c:683:
+^I$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#737: FILE: drivers/perfctr/ppc64.c:702:
+static const char *current_service = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#766: FILE: drivers/perfctr/ppc64.c:731:
+		printk(KERN_ERR "%s: attempt by %s to release while reserved by %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#767: FILE: drivers/perfctr/ppc64.c:732:
+		       __FUNCTION__, service, current_service);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#783: FILE: drivers/perfctr/ppc64_tests.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#795: FILE: drivers/perfctr/ppc64_tests.c:13:
+#include <asm/processor.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'S' - possible side-effects?
#800: FILE: drivers/perfctr/ppc64_tests.c:18:
+#define X2(S)	S"; "S

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#800: FILE: drivers/perfctr/ppc64_tests.c:18:
+#define X2(S)	S"; "S

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:LINE_SPACING: Missing a blank line after declarations
#806: FILE: drivers/perfctr/ppc64_tests.c:24:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#806: FILE: drivers/perfctr/ppc64_tests.c:24:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#806: FILE: drivers/perfctr/ppc64_tests.c:24:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: drivers/perfctr/ppc64_tests.c:31:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#813: FILE: drivers/perfctr/ppc64_tests.c:31:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#813: FILE: drivers/perfctr/ppc64_tests.c:31:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#820: FILE: drivers/perfctr/ppc64_tests.c:38:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#820: FILE: drivers/perfctr/ppc64_tests.c:38:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#820: FILE: drivers/perfctr/ppc64_tests.c:38:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#827: FILE: drivers/perfctr/ppc64_tests.c:45:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#827: FILE: drivers/perfctr/ppc64_tests.c:45:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#827: FILE: drivers/perfctr/ppc64_tests.c:45:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: drivers/perfctr/ppc64_tests.c:52:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#834: FILE: drivers/perfctr/ppc64_tests.c:52:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#834: FILE: drivers/perfctr/ppc64_tests.c:52:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#841: FILE: drivers/perfctr/ppc64_tests.c:59:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#841: FILE: drivers/perfctr/ppc64_tests.c:59:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#841: FILE: drivers/perfctr/ppc64_tests.c:59:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#848: FILE: drivers/perfctr/ppc64_tests.c:66:
+	unsigned int i, dummy;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#848: FILE: drivers/perfctr/ppc64_tests.c:66:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#848: FILE: drivers/perfctr/ppc64_tests.c:66:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#855: FILE: drivers/perfctr/ppc64_tests.c:73:
+	unsigned int i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#855: FILE: drivers/perfctr/ppc64_tests.c:73:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#855: FILE: drivers/perfctr/ppc64_tests.c:73:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: drivers/perfctr/ppc64_tests.c:80:
+	unsigned int i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#862: FILE: drivers/perfctr/ppc64_tests.c:80:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#862: FILE: drivers/perfctr/ppc64_tests.c:80:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: drivers/perfctr/ppc64_tests.c:87:
+	unsigned int i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#869: FILE: drivers/perfctr/ppc64_tests.c:87:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#869: FILE: drivers/perfctr/ppc64_tests.c:87:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#876: FILE: drivers/perfctr/ppc64_tests.c:94:
+	unsigned int i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#876: FILE: drivers/perfctr/ppc64_tests.c:94:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#876: FILE: drivers/perfctr/ppc64_tests.c:94:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: drivers/perfctr/ppc64_tests.c:101:
+	unsigned int i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#883: FILE: drivers/perfctr/ppc64_tests.c:101:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#883: FILE: drivers/perfctr/ppc64_tests.c:101:
+	for(i = 0; i < NITER/8; ++i)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#889: FILE: drivers/perfctr/ppc64_tests.c:107:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: drivers/perfctr/ppc64_tests.c:108:
+	unsigned i;
+	for(i = 0; i < NITER/8; ++i)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#890: FILE: drivers/perfctr/ppc64_tests.c:108:
+	for(i = 0; i < NITER/8; ++i)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#890: FILE: drivers/perfctr/ppc64_tests.c:108:
+	for(i = 0; i < NITER/8; ++i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#897: FILE: drivers/perfctr/ppc64_tests.c:115:
+	unsigned int start, stop;
+	start = mfspr(SPRN_PMC1);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#905: FILE: drivers/perfctr/ppc64_tests.c:123:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#906: FILE: drivers/perfctr/ppc64_tests.c:124:
+	printk(KERN_INFO "Please email the following PERFCTR INIT lines "

WARNING:SPLIT_STRING: quoted string split across lines
#907: FILE: drivers/perfctr/ppc64_tests.c:125:
+	printk(KERN_INFO "Please email the following PERFCTR INIT lines "
+	       "to mikpe@csd.uu.se\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#909: FILE: drivers/perfctr/ppc64_tests.c:127:
+	       KERN_INFO "To remove this message, rebuild the driver "
+	       "with CONFIG_PERFCTR_INIT_TESTS=n\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#910: FILE: drivers/perfctr/ppc64_tests.c:128:
+	printk(KERN_INFO "PERFCTR INIT: PVR 0x%08x, CPU clock %u kHz, TB clock %lu kHz\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#913: FILE: drivers/perfctr/ppc64_tests.c:131:
+	       tb_ticks_per_jiffy*(HZ/10)/(1000/10));
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: drivers/perfctr/ppc64_tests.c:131:
+	       tb_ticks_per_jiffy*(HZ/10)/(1000/10));
 	                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: drivers/perfctr/ppc64_tests.c:131:
+	       tb_ticks_per_jiffy*(HZ/10)/(1000/10));
 	                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: drivers/perfctr/ppc64_tests.c:131:
+	       tb_ticks_per_jiffy*(HZ/10)/(1000/10));
 	                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#959: FILE: drivers/perfctr/ppc64_tests.c:177:
+	mtspr(SPRN_PMC1, 0x80000000-100);
 	                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#973: FILE: drivers/perfctr/ppc64_tests.c:191:
+		if (x++ > 20000000) {
+			break;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#979: FILE: drivers/perfctr/ppc64_tests.c:197:
+	printk(KERN_INFO "PERFCTR INIT: %s(%u): MMCR0[FC] is %u, PMC1 is %#lx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#980: FILE: drivers/perfctr/ppc64_tests.c:198:
+	       __FUNCTION__, pmc1ce,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1010: FILE: drivers/perfctr/ppc64_tests.c:228:
+	mtspr(SPRN_PMC1, 0x80000000-100);
 	                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1020: FILE: drivers/perfctr/ppc64_tests.c:238:
+		if (x++ > 20000000) {
+			break;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1026: FILE: drivers/perfctr/ppc64_tests.c:244:
+	printk(KERN_INFO "PERFCTR INIT: %s(%u): MMCR0[TRIGGER] is %u, PMC1 is %#lx, PMC2 is %#lx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1027: FILE: drivers/perfctr/ppc64_tests.c:245:
+	       __FUNCTION__, pmc1ce,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1043: FILE: drivers/perfctr/ppc64_tests.c:261:
+	/* PMC1 = "processor cycles",
+	   PMC2 = "completed instructions",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1045: FILE: drivers/perfctr/ppc64_tests.c:263:
+	   no interrupts */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1080: FILE: drivers/perfctr/ppc64_tests.c:298:
+	printk(KERN_INFO "PERFCTR INIT: NITER == %u\n", NITER);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1081: FILE: drivers/perfctr/ppc64_tests.c:299:
+	printk(KERN_INFO "PERFCTR INIT: loop overhead is %u cycles\n", loop);

ERROR:SPACING: space required before the open parenthesis '('
#1082: FILE: drivers/perfctr/ppc64_tests.c:300:
+	for(i = 0; i < ARRAY_SIZE(ticks); ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1084: FILE: drivers/perfctr/ppc64_tests.c:302:
+		unsigned int x;
+		if (!ticks[i])

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1087: FILE: drivers/perfctr/ppc64_tests.c:305:
+		printk(KERN_INFO "PERFCTR INIT: %s cost is %u.%u cycles (%u total)\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1088: FILE: drivers/perfctr/ppc64_tests.c:306:
+		       name[i], x/10, x%10, ticks[i]);
 		                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1088: FILE: drivers/perfctr/ppc64_tests.c:306:
+		       name[i], x/10, x%10, ticks[i]);
 		                       ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1092: FILE: drivers/perfctr/ppc64_tests.c:310:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1109: FILE: drivers/perfctr/ppc64_tests.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1117: FILE: drivers/perfctr/ppc64_tests.h:9:
+extern void perfctr_ppc64_init_tests(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1125: FILE: include/asm-ppc64/perfctr.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1150: FILE: include/asm-ppc64/perfctr.h:26:
+	/* The two tsc fields must be inlined. Placing them in a
+	   sub-struct causes unwanted internal padding on x86-64. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1150: FILE: include/asm-ppc64/perfctr.h:26:
+	   sub-struct causes unwanted internal padding on x86-64. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1161: FILE: include/asm-ppc64/perfctr.h:37:
+/* cstatus is a re-encoding of control.tsc_on/nractrs/nrictrs
+   which should have less overhead in most cases */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1161: FILE: include/asm-ppc64/perfctr.h:37:
+   which should have less overhead in most cases */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1168: FILE: include/asm-ppc64/perfctr.h:44:
+	return (tsc_on<<31) | (nrictrs<<16) | ((nractrs+nrictrs)<<8) | nractrs;
 	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1168: FILE: include/asm-ppc64/perfctr.h:44:
+	return (tsc_on<<31) | (nrictrs<<16) | ((nractrs+nrictrs)<<8) | nractrs;
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1168: FILE: include/asm-ppc64/perfctr.h:44:
+	return (tsc_on<<31) | (nrictrs<<16) | ((nractrs+nrictrs)<<8) | nractrs;
 	                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1168: FILE: include/asm-ppc64/perfctr.h:44:
+	return (tsc_on<<31) | (nrictrs<<16) | ((nractrs+nrictrs)<<8) | nractrs;
 	                                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1221: FILE: include/asm-ppc64/perfctr.h:97:
+	/* Don't change field order here without first considering the number
+	   of cache lines touched during sampling and context switching. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1221: FILE: include/asm-ppc64/perfctr.h:97:
+	   of cache lines touched during sampling and context switching. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1230: FILE: include/asm-ppc64/perfctr.h:106:
+extern int perfctr_cpu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1231: FILE: include/asm-ppc64/perfctr.h:107:
+extern void perfctr_cpu_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1237: FILE: include/asm-ppc64/perfctr.h:113:
+extern const char *perfctr_cpu_reserve(const char *service);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1238: FILE: include/asm-ppc64/perfctr.h:114:
+extern void perfctr_cpu_release(const char *service);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1241: FILE: include/asm-ppc64/perfctr.h:117:
+/* PRE: state has no running interrupt-mode counters.
+   Check that the new control data is valid.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1243: FILE: include/asm-ppc64/perfctr.h:119:
+   Returns a negative error code if the control data is invalid. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1244: FILE: include/asm-ppc64/perfctr.h:120:
+extern int perfctr_cpu_update_control(struct perfctr_cpu_state *state, int is_global);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1247: FILE: include/asm-ppc64/perfctr.h:123:
+extern int perfctr_cpu_control_write(struct perfctr_cpu_control *control,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1252: FILE: include/asm-ppc64/perfctr.h:128:
+/* Retrieve and format control for the given domain.
+   Returns number of bytes written. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1252: FILE: include/asm-ppc64/perfctr.h:128:
+   Returns number of bytes written. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1253: FILE: include/asm-ppc64/perfctr.h:129:
+extern int perfctr_cpu_control_read(const struct perfctr_cpu_control *control,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1258: FILE: include/asm-ppc64/perfctr.h:134:
+/* Read a-mode counters. Subtract from start and accumulate into sums.
+   Must be called with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1258: FILE: include/asm-ppc64/perfctr.h:134:
+   Must be called with preemption disabled. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1259: FILE: include/asm-ppc64/perfctr.h:135:
+extern void perfctr_cpu_suspend(struct perfctr_cpu_state *state);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1262: FILE: include/asm-ppc64/perfctr.h:138:
+/* Write control registers. Read a-mode counters into start.
+   Must be called with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1262: FILE: include/asm-ppc64/perfctr.h:138:
+   Must be called with preemption disabled. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1263: FILE: include/asm-ppc64/perfctr.h:139:
+extern void perfctr_cpu_resume(struct perfctr_cpu_state *state);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1266: FILE: include/asm-ppc64/perfctr.h:142:
+/* Perform an efficient combined suspend/resume operation.
+   Must be called with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1266: FILE: include/asm-ppc64/perfctr.h:142:
+   Must be called with preemption disabled. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1267: FILE: include/asm-ppc64/perfctr.h:143:
+extern void perfctr_cpu_sample(struct perfctr_cpu_state *state);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1270: FILE: include/asm-ppc64/perfctr.h:146:
+/* The type of a perfctr overflow interrupt handler.
+   It will be called in IRQ context, with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1270: FILE: include/asm-ppc64/perfctr.h:146:
+   It will be called in IRQ context, with preemption disabled. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1275: FILE: include/asm-ppc64/perfctr.h:151:
+extern void perfctr_cpu_set_ihandler(perfctr_ihandler_t);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1276: FILE: include/asm-ppc64/perfctr.h:152:
+extern void perfctr_cpu_ireload(struct perfctr_cpu_state*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1276: FILE: include/asm-ppc64/perfctr.h:152:
+extern void perfctr_cpu_ireload(struct perfctr_cpu_state*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct perfctr_cpu_state*' should also have an identifier name
#1276: FILE: include/asm-ppc64/perfctr.h:152:
+extern void perfctr_cpu_ireload(struct perfctr_cpu_state*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1277: FILE: include/asm-ppc64/perfctr.h:153:
+extern unsigned int perfctr_cpu_identify_overflow(struct perfctr_cpu_state*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1277: FILE: include/asm-ppc64/perfctr.h:153:
+extern unsigned int perfctr_cpu_identify_overflow(struct perfctr_cpu_state*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct perfctr_cpu_state*' should also have an identifier name
#1277: FILE: include/asm-ppc64/perfctr.h:153:
+extern unsigned int perfctr_cpu_identify_overflow(struct perfctr_cpu_state*);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 113 warnings, 68 checks, 1243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
