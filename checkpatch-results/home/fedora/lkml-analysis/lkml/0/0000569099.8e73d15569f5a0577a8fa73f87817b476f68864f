WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#86: FILE: i386/kernel/setup.c:98:
+extern char _text, _etext, _edata, _end;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#88: FILE: i386/kernel/setup.c:100:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#132: FILE: i386/kernel/setup.c:502:
+void __init parse_mem_cmdline (char ** cmdline_p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: i386/kernel/setup.c:502:
+void __init parse_mem_cmdline (char ** cmdline_p)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: i386/kernel/setup.c:1527:
+/* reserve memory areas from the E820 map */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: i386/kernel/setup.c:1530:
+^Iint i; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: i386/kernel/setup.c:1534:
+		struct resource *res;
+		if (e820.map[i].addr + e820.map[i].size > 0x100000000ULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#438: FILE: i386/kernel/setup.c:1538:
+		case E820_RAM:	res->name = "System RAM"; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#439: FILE: i386/kernel/setup.c:1539:
+		case E820_ACPI:	res->name = "ACPI Tables"; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#440: FILE: i386/kernel/setup.c:1540:
+		case E820_NVS:	res->name = "ACPI Non-volatile Storage"; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#441: FILE: i386/kernel/setup.c:1541:
+		default:	res->name = "reserved";

WARNING:TYPO_SPELLING: 'dont't' may be misspelled - perhaps 'don't'?
#449: FILE: i386/kernel/setup.c:1549:
+			 *  We dont't know which RAM region contains kernel data,
 			       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: i386/kernel/setup.c:1559:
+/* Reserve IO areas */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: i386/kernel/setup.c:1560:
+void __init request_pc(void) $

CHECK:SPACING: No space is necessary after a cast
#489: FILE: i386/kernel/setup.c:1560:
+void __init request_pc(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: i386/kernel/setup.c:1561:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: i386/kernel/setup.c:1562:
+^Iint i; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: i386/kernel/setup.c:1565:
+^Ireserve_820();       $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: i386/kernel/setup.c:1570:
+		request_resource(&ioport_resource, standard_io_resources+i);
 		                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: i386/kernel/setup.c:1571:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: i386/kernel/setup.c:1574:
+{ $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#514: FILE: i386/kernel/setup.c:1576:
+	code_resource.end = virt_to_bus(&_etext)-1;
 	                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#516: FILE: i386/kernel/setup.c:1578:
+	data_resource.end = virt_to_bus(&_edata)-1;
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: i386/kernel/setup.c:1579:
+} $

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#532: FILE: i386/kernel/cpuinit.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#533: FILE: i386/kernel/cpuinit.c:2:
+ *  linux/arch/i386/kernel/cpuinit.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: i386/kernel/cpuinit.c:5:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: i386/kernel/cpuinit.c:7:
+ *  See setup.c for revision history. $

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#550: FILE: i386/kernel/cpuinit.c:19:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#551: FILE: i386/kernel/cpuinit.c:20:
+#include <asm/smp.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#558: FILE: i386/kernel/cpuinit.c:27:
+#include <asm/mmu_context.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#559: FILE: i386/kernel/cpuinit.c:28:
+#include <asm/processor.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#565: FILE: i386/kernel/cpuinit.c:34:
+extern int rd_doload;		/* 1 = load ramdisk, 0 = don't load */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#566: FILE: i386/kernel/cpuinit.c:35:
+extern int rd_prompt;		/* 1 = prompt for ramdisk, 0 = don't prompt */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#567: FILE: i386/kernel/cpuinit.c:36:
+extern int rd_image_start;	/* starting block # of image */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#571: FILE: i386/kernel/cpuinit.c:40:
+extern char _text, _etext, _edata, _end;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#573: FILE: i386/kernel/cpuinit.c:42:
+static unsigned long cpu_initialized __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: i386/kernel/cpuinit.c:59:
+ ^IROOT_DEV = to_kdev_t(ORIG_ROOT_DEV);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: i386/kernel/cpuinit.c:59:
+ ^IROOT_DEV = to_kdev_t(ORIG_ROOT_DEV);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: i386/kernel/cpuinit.c:59:
+ ^IROOT_DEV = to_kdev_t(ORIG_ROOT_DEV);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: i386/kernel/cpuinit.c:60:
+ ^Idrive_info = DRIVE_INFO;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#591: FILE: i386/kernel/cpuinit.c:60:
+ ^Idrive_info = DRIVE_INFO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: i386/kernel/cpuinit.c:60:
+ ^Idrive_info = DRIVE_INFO;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: i386/kernel/cpuinit.c:61:
+ ^Iscreen_info = SCREEN_INFO;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#592: FILE: i386/kernel/cpuinit.c:61:
+ ^Iscreen_info = SCREEN_INFO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: i386/kernel/cpuinit.c:61:
+ ^Iscreen_info = SCREEN_INFO;$

ERROR:SPACING: space prohibited after that open parenthesis '('
#594: FILE: i386/kernel/cpuinit.c:63:
+	if( SYS_DESC_TABLE.length != 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#594: FILE: i386/kernel/cpuinit.c:63:
+	if( SYS_DESC_TABLE.length != 0 ) {

ERROR:SPACING: space required before the open parenthesis '('
#594: FILE: i386/kernel/cpuinit.c:63:
+	if( SYS_DESC_TABLE.length != 0 ) {

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#595: FILE: i386/kernel/cpuinit.c:64:
+		MCA_bus = SYS_DESC_TABLE.table[3] &0x2;
 		                                  ^

CHECK:SPACING: No space is necessary after a cast
#611: FILE: i386/kernel/cpuinit.c:80:
+	init_mm.start_code = (unsigned long) &_text;

CHECK:SPACING: No space is necessary after a cast
#612: FILE: i386/kernel/cpuinit.c:81:
+	init_mm.end_code = (unsigned long) &_etext;

CHECK:SPACING: No space is necessary after a cast
#613: FILE: i386/kernel/cpuinit.c:82:
+	init_mm.end_data = (unsigned long) &_edata;

CHECK:SPACING: No space is necessary after a cast
#614: FILE: i386/kernel/cpuinit.c:83:
+	init_mm.brk = (unsigned long) &_end;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: i386/kernel/cpuinit.c:85:
+^Icode_resource_init(); $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#620: FILE: i386/kernel/cpuinit.c:89:
+#define PFN_UP(x)	(((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
                  	                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#627: FILE: i386/kernel/cpuinit.c:96:
+#define VMALLOC_RESERVE	(unsigned long)(128 << 20)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#628: FILE: i386/kernel/cpuinit.c:97:
+#define MAXMEM		(unsigned long)(-PAGE_OFFSET-VMALLOC_RESERVE)
               		                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#628: FILE: i386/kernel/cpuinit.c:97:
+#define MAXMEM		(unsigned long)(-PAGE_OFFSET-VMALLOC_RESERVE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#630: FILE: i386/kernel/cpuinit.c:99:
+#define MAX_NONPAE_PFN	(1 << 20)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#663: FILE: i386/kernel/cpuinit.c:132:
+		printk(KERN_WARNING "Warning only %ldMB will be used.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: i386/kernel/cpuinit.c:133:
+		printk(KERN_WARNING "Warning only %ldMB will be used.\n",
+					MAXMEM>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#664: FILE: i386/kernel/cpuinit.c:133:
+					MAXMEM>>20);
 					      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#666: FILE: i386/kernel/cpuinit.c:135:
+			printk(KERN_WARNING "Use a PAE enabled kernel.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#668: FILE: i386/kernel/cpuinit.c:137:
+			printk(KERN_WARNING "Use a HIGHMEM enabled kernel.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#673: FILE: i386/kernel/cpuinit.c:142:
+			printk(KERN_WARNING "Warning only 4GB will be used.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#674: FILE: i386/kernel/cpuinit.c:143:
+			printk(KERN_WARNING "Use a PAE enabled kernel.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#681: FILE: i386/kernel/cpuinit.c:150:
+	highstart_pfn = highend_pfn = max_pfn;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#684: FILE: i386/kernel/cpuinit.c:153:
+		printk(KERN_NOTICE "%ldMB HIGHMEM available.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: i386/kernel/cpuinit.c:154:
+		printk(KERN_NOTICE "%ldMB HIGHMEM available.\n",
+			pages_to_mb(highend_pfn - highstart_pfn));

ERROR:CODE_INDENT: code indent should use tabs where possible
#698: FILE: i386/kernel/cpuinit.c:167:
+ ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#698: FILE: i386/kernel/cpuinit.c:167:
+ ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: i386/kernel/cpuinit.c:167:
+ ^I^I/*$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#734: FILE: i386/kernel/cpuinit.c:203:
+			 bootmap_size + PAGE_SIZE-1) - (HIGH_MEMORY));
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#776: FILE: i386/kernel/cpuinit.c:245:
+			initrd_end = initrd_start+INITRD_SIZE;
 			                         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#778: FILE: i386/kernel/cpuinit.c:247:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#778: FILE: i386/kernel/cpuinit.c:247:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#779: FILE: i386/kernel/cpuinit.c:248:
+			printk("initrd extends beyond end of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#780: FILE: i386/kernel/cpuinit.c:249:
+			printk("initrd extends beyond end of memory "
+			    "(0x%08lx > 0x%08lx)\ndisabling initrd\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: i386/kernel/cpuinit.c:261:
+^Irequest_pc(); $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#809: FILE: i386/kernel/cpuinit.c:278:
+void __init cpu_init (void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#812: FILE: i386/kernel/cpuinit.c:281:
+	struct tss_struct * t = &init_tss[nr];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#815: FILE: i386/kernel/cpuinit.c:284:
+		printk("CPU#%d already initialized!\n", nr);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#816: FILE: i386/kernel/cpuinit.c:285:
+		for (;;) __sti();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#818: FILE: i386/kernel/cpuinit.c:287:
+	printk("Initializing CPU#%d\n", nr);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#821: FILE: i386/kernel/cpuinit.c:290:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#821: FILE: i386/kernel/cpuinit.c:290:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#821: FILE: i386/kernel/cpuinit.c:290:
+		clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 		                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#824: FILE: i386/kernel/cpuinit.c:293:
+		printk("Disabling TSC...\n");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#830: FILE: i386/kernel/cpuinit.c:299:
+	__asm__ __volatile__("lgdt %0": "=m" (gdt_descr));
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#831: FILE: i386/kernel/cpuinit.c:300:
+	__asm__ __volatile__("lidt %0": "=m" (idt_descr));
 	                              ^

ERROR:SPACING: space required before the open parenthesis '('
#843: FILE: i386/kernel/cpuinit.c:312:
+	if(current->mm)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#844: FILE: i386/kernel/cpuinit.c:313:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#848: FILE: i386/kernel/cpuinit.c:317:
+	set_tss_desc(nr,t);
 	               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#857: FILE: i386/kernel/cpuinit.c:326:
+#define CD(register) __asm__("movl %0,%%db" #register ::"r"(0) );

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#857: FILE: i386/kernel/cpuinit.c:326:
+#define CD(register) __asm__("movl %0,%%db" #register ::"r"(0) );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#874: FILE: asm-i386/setup.h:1:
+#ifndef _i386_SETUP_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: asm-i386/setup.h:11:
+struct drive_info_struct { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: asm-i386/setup.h:12:
+^Ichar dummy[32]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: asm-i386/setup.h:13:
+}; $

CHECK:SPACING: No space is necessary after a cast
#896: FILE: asm-i386/setup.h:21:
+#define SCREEN_INFO (*(struct screen_info *) (PARAM+0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#896: FILE: asm-i386/setup.h:21:
+#define SCREEN_INFO (*(struct screen_info *) (PARAM+0))
                                                    ^

CHECK:SPACING: No space is necessary after a cast
#897: FILE: asm-i386/setup.h:22:
+#define EXT_MEM_K (*(unsigned short *) (PARAM+2))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#897: FILE: asm-i386/setup.h:22:
+#define EXT_MEM_K (*(unsigned short *) (PARAM+2))
                                              ^

CHECK:SPACING: No space is necessary after a cast
#898: FILE: asm-i386/setup.h:23:
+#define ALT_MEM_K (*(unsigned long *) (PARAM+0x1e0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#898: FILE: asm-i386/setup.h:23:
+#define ALT_MEM_K (*(unsigned long *) (PARAM+0x1e0))
                                             ^

CHECK:SPACING: No space is necessary after a cast
#899: FILE: asm-i386/setup.h:24:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#899: FILE: asm-i386/setup.h:24:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#899: FILE: asm-i386/setup.h:24:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))
                                     ^

CHECK:SPACING: No space is necessary after a cast
#900: FILE: asm-i386/setup.h:25:
+#define E820_MAP    ((struct e820entry *) (PARAM+E820MAP))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#900: FILE: asm-i386/setup.h:25:
+#define E820_MAP    ((struct e820entry *) (PARAM+E820MAP))
                                                 ^

CHECK:SPACING: No space is necessary after a cast
#901: FILE: asm-i386/setup.h:26:
+#define APM_BIOS_INFO (*(struct apm_bios_info *) (PARAM+0x40))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#901: FILE: asm-i386/setup.h:26:
+#define APM_BIOS_INFO (*(struct apm_bios_info *) (PARAM+0x40))
                                                        ^

CHECK:SPACING: No space is necessary after a cast
#902: FILE: asm-i386/setup.h:27:
+#define DRIVE_INFO (*(struct drive_info_struct *) (PARAM+0x80))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#902: FILE: asm-i386/setup.h:27:
+#define DRIVE_INFO (*(struct drive_info_struct *) (PARAM+0x80))
                                                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#903: FILE: asm-i386/setup.h:28:
+#define SYS_DESC_TABLE (*(struct sys_desc_table_struct*)(PARAM+0xa0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#903: FILE: asm-i386/setup.h:28:
+#define SYS_DESC_TABLE (*(struct sys_desc_table_struct*)(PARAM+0xa0))
                                                               ^

CHECK:SPACING: No space is necessary after a cast
#904: FILE: asm-i386/setup.h:29:
+#define MOUNT_ROOT_RDONLY (*(unsigned short *) (PARAM+0x1F2))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#904: FILE: asm-i386/setup.h:29:
+#define MOUNT_ROOT_RDONLY (*(unsigned short *) (PARAM+0x1F2))
                                                      ^

CHECK:SPACING: No space is necessary after a cast
#905: FILE: asm-i386/setup.h:30:
+#define RAMDISK_FLAGS (*(unsigned short *) (PARAM+0x1F8))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#905: FILE: asm-i386/setup.h:30:
+#define RAMDISK_FLAGS (*(unsigned short *) (PARAM+0x1F8))
                                                  ^

CHECK:SPACING: No space is necessary after a cast
#906: FILE: asm-i386/setup.h:31:
+#define ORIG_ROOT_DEV (*(unsigned short *) (PARAM+0x1FC))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#906: FILE: asm-i386/setup.h:31:
+#define ORIG_ROOT_DEV (*(unsigned short *) (PARAM+0x1FC))
                                                  ^

CHECK:SPACING: No space is necessary after a cast
#907: FILE: asm-i386/setup.h:32:
+#define AUX_DEVICE_INFO (*(unsigned char *) (PARAM+0x1FF))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#907: FILE: asm-i386/setup.h:32:
+#define AUX_DEVICE_INFO (*(unsigned char *) (PARAM+0x1FF))
                                                   ^

CHECK:SPACING: No space is necessary after a cast
#908: FILE: asm-i386/setup.h:33:
+#define LOADER_TYPE (*(unsigned char *) (PARAM+0x210))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#908: FILE: asm-i386/setup.h:33:
+#define LOADER_TYPE (*(unsigned char *) (PARAM+0x210))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#909: FILE: asm-i386/setup.h:34:
+#define KERNEL_START (*(unsigned long *) (PARAM+0x214))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#909: FILE: asm-i386/setup.h:34:
+#define KERNEL_START (*(unsigned long *) (PARAM+0x214))
                                                ^

CHECK:SPACING: No space is necessary after a cast
#910: FILE: asm-i386/setup.h:35:
+#define INITRD_START (*(unsigned long *) (PARAM+0x218))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#910: FILE: asm-i386/setup.h:35:
+#define INITRD_START (*(unsigned long *) (PARAM+0x218))
                                                ^

CHECK:SPACING: No space is necessary after a cast
#911: FILE: asm-i386/setup.h:36:
+#define INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#911: FILE: asm-i386/setup.h:36:
+#define INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#912: FILE: asm-i386/setup.h:37:
+#define COMMAND_LINE ((char *) (PARAM+2048))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#912: FILE: asm-i386/setup.h:37:
+#define COMMAND_LINE ((char *) (PARAM+2048))
                                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#917: FILE: asm-i386/setup.h:40:
+#define RAMDISK_IMAGE_START_MASK  ^I0x07FF$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: asm-i386/setup.h:42:
+#define RAMDISK_LOAD_FLAG^I^I0x4000^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: asm-i386/setup.h:44:
+extern void visws_get_board_type_and_rev(void); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#921: FILE: asm-i386/setup.h:44:
+extern void visws_get_board_type_and_rev(void); 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: asm-i386/setup.h:45:
+extern void setup_memory_region(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: asm-i386/setup.h:46:
+extern void parse_mem_cmdline(char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#923: FILE: asm-i386/setup.h:46:
+extern void parse_mem_cmdline(char **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#924: FILE: asm-i386/setup.h:47:
+extern void request_pc(void); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: asm-i386/setup.h:47:
+extern void request_pc(void); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: asm-i386/setup.h:48:
+extern void code_resource_init(void); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: asm-i386/setup.h:48:
+extern void code_resource_init(void); 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 43 warnings, 61 checks, 866 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
