WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
On pSeries the mem=X option is parsed in prom_init.c before the kernel proper

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: arch/ppc64/kernel/setup.c:812:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#153: FILE: arch/ppc64/kernel/lmb.c:354:
+	extern unsigned long memory_limit;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lmb.memory
#155: FILE: arch/ppc64/kernel/lmb.c:356:
+	struct lmb_region *mem = &(lmb.memory);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#157: FILE: arch/ppc64/kernel/lmb.c:358:
+	if (! memory_limit)
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: arch/ppc64/kernel/lmb.c:367:
+^I^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/asm-ppc64/lmb.h:54:
+extern void __init lmb_enforce_memory_limit(void);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_get_cmdline>
#193: FILE: arch/ppc64/kernel/iSeries_setup.c:288:
+static void __init iSeries_get_cmdline(void)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#201: FILE: arch/ppc64/kernel/iSeries_setup.c:308:
+	extern unsigned long memory_limit;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: arch/ppc64/kernel/iSeries_setup.c:358:
+^I$

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#213: FILE: arch/ppc64/kernel/iSeries_setup.c:360:
+	strlcpy(saved_command_line, cmd_line, COMMAND_LINE_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: arch/ppc64/kernel/iSeries_setup.c:361:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/ppc64/kernel/iSeries_setup.c:364:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <physicalMemorySize>
#219: FILE: arch/ppc64/kernel/iSeries_setup.c:366:
+		if (memory_limit < systemcfg->physicalMemorySize)

CHECK:BRACES: braces {} should be used on all arms of this statement
#219: FILE: arch/ppc64/kernel/iSeries_setup.c:366:
+		if (memory_limit < systemcfg->physicalMemorySize)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#221: FILE: arch/ppc64/kernel/iSeries_setup.c:368:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: arch/ppc64/kernel/iSeries_setup.c:369:
+			printk("Ignoring mem=%lu >= ram_top.\n", memory_limit);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_bolt_kernel>
#228: FILE: arch/ppc64/kernel/iSeries_setup.c:375:
+	iSeries_bolt_kernel(0, systemcfg->physicalMemorySize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: arch/ppc64/kernel/iSeries_setup.c:376:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/ppc64/kernel/iSeries_setup.c:381:
+^I$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#272: FILE: arch/ppc64/kernel/prom.c:916:
+	extern unsigned long memory_limit, tce_alloc_start, tce_alloc_end;

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: arch/ppc64/kernel/prom.c:933:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: arch/ppc64/kernel/prom.c:933:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/ppc64/kernel/prom.c:933:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#280: FILE: arch/ppc64/kernel/prom.c:933:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,memory-limit", NULL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: arch/ppc64/kernel/prom.c:934:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: arch/ppc64/kernel/prom.c:934:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: arch/ppc64/kernel/prom.c:934:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: arch/ppc64/kernel/prom.c:935:
+ ^I^Imemory_limit = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: arch/ppc64/kernel/prom.c:935:
+ ^I^Imemory_limit = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/ppc64/kernel/prom.c:935:
+ ^I^Imemory_limit = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: arch/ppc64/kernel/prom.c:936:
+ ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: arch/ppc64/kernel/prom.c:936:
+ ^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: arch/ppc64/kernel/prom.c:936:
+ ^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: arch/ppc64/kernel/prom.c:937:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: arch/ppc64/kernel/prom.c:937:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: arch/ppc64/kernel/prom.c:937:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#284: FILE: arch/ppc64/kernel/prom.c:937:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-start", NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: arch/ppc64/kernel/prom.c:938:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: arch/ppc64/kernel/prom.c:938:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: arch/ppc64/kernel/prom.c:938:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: arch/ppc64/kernel/prom.c:939:
+ ^I^Itce_alloc_start = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: arch/ppc64/kernel/prom.c:939:
+ ^I^Itce_alloc_start = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/ppc64/kernel/prom.c:939:
+ ^I^Itce_alloc_start = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: arch/ppc64/kernel/prom.c:940:
+ ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: arch/ppc64/kernel/prom.c:940:
+ ^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: arch/ppc64/kernel/prom.c:940:
+ ^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: arch/ppc64/kernel/prom.c:941:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: arch/ppc64/kernel/prom.c:941:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/ppc64/kernel/prom.c:941:
+ ^Iprop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: arch/ppc64/kernel/prom.c:941:
+ 	prop64 = (u64*)get_flat_dt_prop(node, "linux,tce-alloc-end", NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: arch/ppc64/kernel/prom.c:942:
+ ^Iif (prop64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: arch/ppc64/kernel/prom.c:942:
+ ^Iif (prop64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: arch/ppc64/kernel/prom.c:942:
+ ^Iif (prop64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/ppc64/kernel/prom.c:943:
+ ^I^Itce_alloc_end = *prop64;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: arch/ppc64/kernel/prom.c:943:
+ ^I^Itce_alloc_end = *prop64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/ppc64/kernel/prom.c:943:
+ ^I^Itce_alloc_end = *prop64;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: arch/ppc64/kernel/prom.c:944:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: arch/ppc64/kernel/prom.c:944:
+ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#312: FILE: arch/ppc64/mm/hash_utils.c:153:
+	extern unsigned long tce_alloc_start, tce_alloc_end;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: arch/ppc64/mm/hash_utils.c:248:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: arch/ppc64/mm/hash_utils.c:251:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: arch/ppc64/mm/hash_utils.c:253:
+		create_pte_mapping(tce_alloc_start, tce_alloc_end,
+			mode_rw, use_largepages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: arch/ppc64/mm/hash_utils.c:255:
+^I$

WARNING:TYPO_SPELLING: 'wholy' may be misspelled - perhaps 'wholly'?
#365: FILE: arch/ppc64/mm/numa.c:294:
+ * discarded as it lies wholy above the memory limit.
                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#374: FILE: arch/ppc64/mm/numa.c:303:
+	extern unsigned long memory_limit;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#376: FILE: arch/ppc64/mm/numa.c:305:
+	if (! memory_limit)
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#395: FILE: arch/ppc64/mm/numa.c:405:
+		if (! (size = numa_enforce_memory_limit(start, size))) {
 		    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#395: FILE: arch/ppc64/mm/numa.c:405:
+		if (! (size = numa_enforce_memory_limit(start, size))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: arch/ppc64/mm/numa.c:653:
+  ^I^I^Iif (mem_size) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: arch/ppc64/mm/numa.c:653:
+  ^I^I^Iif (mem_size) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/ppc64/mm/numa.c:653:
+  ^I^I^Iif (mem_size) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/ppc64/mm/numa.c:654:
+  ^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: arch/ppc64/mm/numa.c:654:
+  ^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/ppc64/mm/numa.c:654:
+  ^I^I^I^Idbg("free_bootmem %lx %lx\n", mem_start, mem_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: arch/ppc64/mm/numa.c:655:
+  ^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start, mem_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: arch/ppc64/mm/numa.c:655:
+  ^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start, mem_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: arch/ppc64/mm/numa.c:655:
+  ^I^I^I^Ifree_bootmem_node(NODE_DATA(nid), mem_start, mem_size);$

WARNING:MISPLACED_INIT: __initdata should be placed after prom_memory_limit
#437: FILE: arch/ppc64/kernel/prom_init.c:180:
+static unsigned long __initdata prom_memory_limit;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after prom_tce_alloc_start
#438: FILE: arch/ppc64/kernel/prom_init.c:181:
+static unsigned long __initdata prom_tce_alloc_start;

WARNING:MISPLACED_INIT: __initdata should be placed after prom_tce_alloc_end
#439: FILE: arch/ppc64/kernel/prom_init.c:182:
+static unsigned long __initdata prom_tce_alloc_end;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#449: FILE: arch/ppc64/kernel/prom_init.c:392:
+#define isxdigit(c)	(('0' <= (c) && (c) <= '9') \
+			 || ('a' <= (c) && (c) <= 'f') \
+			 || ('A' <= (c) && (c) <= 'F'))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#450: FILE: arch/ppc64/kernel/prom_init.c:393:
+#define isxdigit(c)	(('0' <= (c) && (c) <= '9') \
+			 || ('a' <= (c) && (c) <= 'f') \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#451: FILE: arch/ppc64/kernel/prom_init.c:394:
+			 || ('a' <= (c) && (c) <= 'f') \
+			 || ('A' <= (c) && (c) <= 'F'))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: arch/ppc64/kernel/prom_init.c:395:
+^I^I^I $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#453: FILE: arch/ppc64/kernel/prom_init.c:396:
+#define isdigit(c)	('0' <= (c) && (c) <= '9')

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#454: FILE: arch/ppc64/kernel/prom_init.c:397:
+#define islower(c)	('a' <= (c) && (c) <= 'z')

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#455: FILE: arch/ppc64/kernel/prom_init.c:398:
+#define toupper(c)	(islower(c) ? ((c) - 'a' + 'A') : (c))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: arch/ppc64/kernel/prom_init.c:403:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/ppc64/kernel/prom_init.c:418:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: arch/ppc64/kernel/prom_init.c:421:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: arch/ppc64/kernel/prom_init.c:485:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: arch/ppc64/kernel/prom_init.c:748:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: arch/ppc64/kernel/prom_init.c:754:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: arch/ppc64/kernel/prom_init.c:756:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: arch/ppc64/kernel/prom_init.c:760:
+			prom_printf("Ignoring mem=%x <= alloc_bottom.\n",
+				RELOC(prom_memory_limit));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: arch/ppc64/kernel/prom_init.c:764:
+			prom_printf("Ignoring mem=%x >= ram_top.\n",
+				RELOC(prom_memory_limit));

ERROR:SPACING: space prohibited after that open parenthesis '('
#579: FILE: arch/ppc64/kernel/prom_init.c:776:
+	if ( RELOC(of_platform) == PLATFORM_PSERIES_LPAR )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#579: FILE: arch/ppc64/kernel/prom_init.c:776:
+	if ( RELOC(of_platform) == PLATFORM_PSERIES_LPAR )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: arch/ppc64/kernel/prom_init.c:980:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: arch/ppc64/kernel/prom_init.c:1800:
+		prom_setprop(_prom->chosen, "linux,memory-limit",
+			PTRRELOC(&prom_memory_limit), sizeof(RELOC(prom_memory_limit)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: arch/ppc64/kernel/prom_init.c:1804:
+		prom_setprop(_prom->chosen, "linux,tce-alloc-start",
+			PTRRELOC(&prom_tce_alloc_start), sizeof(RELOC(prom_tce_alloc_start)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: arch/ppc64/kernel/prom_init.c:1806:
+		prom_setprop(_prom->chosen, "linux,tce-alloc-end",
+			PTRRELOC(&prom_tce_alloc_end), sizeof(RELOC(prom_tce_alloc_end)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 41 warnings, 19 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
