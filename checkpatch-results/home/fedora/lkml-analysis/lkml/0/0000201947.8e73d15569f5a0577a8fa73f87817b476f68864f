WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: fs/fat/fatent.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#299: FILE: fs/fat/fatent.c:10:
+	void (*ent_blocknr)(struct super_block *, int, int *, sector_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#299: FILE: fs/fat/fatent.c:10:
+	void (*ent_blocknr)(struct super_block *, int, int *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#299: FILE: fs/fat/fatent.c:10:
+	void (*ent_blocknr)(struct super_block *, int, int *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t *' should also have an identifier name
#299: FILE: fs/fat/fatent.c:10:
+	void (*ent_blocknr)(struct super_block *, int, int *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_entry *' should also have an identifier name
#300: FILE: fs/fat/fatent.c:11:
+	void (*ent_set_ptr)(struct fat_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#300: FILE: fs/fat/fatent.c:11:
+	void (*ent_set_ptr)(struct fat_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#301: FILE: fs/fat/fatent.c:12:
+	int (*ent_bread)(struct super_block *, struct fat_entry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_entry *' should also have an identifier name
#301: FILE: fs/fat/fatent.c:12:
+	int (*ent_bread)(struct super_block *, struct fat_entry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#301: FILE: fs/fat/fatent.c:12:
+	int (*ent_bread)(struct super_block *, struct fat_entry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#301: FILE: fs/fat/fatent.c:12:
+	int (*ent_bread)(struct super_block *, struct fat_entry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_entry *' should also have an identifier name
#303: FILE: fs/fat/fatent.c:14:
+	int (*ent_get)(struct fat_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_entry *' should also have an identifier name
#304: FILE: fs/fat/fatent.c:15:
+	void (*ent_put)(struct fat_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#304: FILE: fs/fat/fatent.c:15:
+	void (*ent_put)(struct fat_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_entry *' should also have an identifier name
#305: FILE: fs/fat/fatent.c:16:
+	int (*ent_next)(struct fat_entry *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: fs/fat/fatent.c:40:
+	struct buffer_head **bhs = fatent->bhs;
+	if (fatent->nr_bhs == 1) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#357: FILE: fs/fat/fatent.c:68:
+	if ((offset + 1) < sb->s_blocksize)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#359: FILE: fs/fat/fatent.c:70:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#373: FILE: fs/fat/fatent.c:84:
+	printk(KERN_ERR "FAT: FAT read failed (blocknr %llu)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#385: FILE: fs/fat/fatent.c:96:
+		printk(KERN_ERR "FAT: FAT read failed (blocknr %llu)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: fs/fat/fatent.c:123:
+	int next = le16_to_cpu(*fatent->u.ent16_p);
+	if (next >= BAD_FAT16)

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/fat/fatent.c:131:
+	int next = le32_to_cpu(*fatent->u.ent32_p) & 0x0fffffff;
+	if (next >= BAD_FAT32)

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: fs/fat/fatent.c:202:
+	const struct buffer_head *bh = fatent->bhs[0];
+	fatent->entry++;

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: fs/fat/fatent.c:213:
+	const struct buffer_head *bh = fatent->bhs[0];
+	fatent->entry++;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#711: FILE: fs/fat/fatent.c:422:
+	BUG_ON(nr_cluster > (MAX_BUF_PER_PAGE / 2));	/* fixed limit */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#719: FILE: fs/fat/fatent.c:430:
+	err = nr_bhs = idx_clus = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#808: FILE: fs/fat/fatent.c:519:
+				     __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#923: FILE: fs/fat/file.c:242:
+				     __FUNCTION__, MSDOS_I(inode)->i_pos);

CHECK:BRACES: braces {} should be used on all arms of this statement
#946: FILE: fs/fat/file.c:261:
+		if (wait) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: fs/fat/file.c:263:
+			int err = fat_sync_inode(inode);
+			if (err)

CHECK:BRACES: Unbalanced braces around else statement
#950: FILE: fs/fat/file.c:265:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#996: FILE: fs/fat/inode.c:44:
+	 * cluster is writed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#1049: FILE: fs/fat/inode.c:443:
+		int err = fat_count_free_clusters(sb);
+		if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1191: FILE: fs/fat/misc.c:107:
+			int wait = inode_needs_sync(inode);
+			ret = fat_ent_write(inode, &fatent, new_dclus, wait);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1205: FILE: fs/fat/misc.c:120:
+		if (S_ISDIR(inode->i_mode) && IS_DIRSYNC(inode)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1209: FILE: fs/fat/misc.c:124:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1238: FILE: fs/fat/misc.c:253:
+		if (test_clear_buffer_dirty(bhs[i])) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1244: FILE: fs/fat/misc.c:259:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1249: FILE: fs/fat/misc.c:264:
+		if (buffer_eopnotsupp(bhs[i])) {
[...]
+		} else if (!err && !buffer_uptodate(bhs[i]))
[...]

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1258: FILE: fs/fat/misc.c:273:
+EXPORT_SYMBOL(fat_sync_bhs);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1325: FILE: include/linux/msdos_fs.h:361:
+	int i;
+	for (i = 0; i < fatent->nr_bhs; i++)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1330: FILE: include/linux/msdos_fs.h:366:
+extern void fat_ent_access_init(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1331: FILE: include/linux/msdos_fs.h:367:
+extern int fat_ent_read(struct inode *inode, struct fat_entry *fatent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1333: FILE: include/linux/msdos_fs.h:369:
+extern int fat_ent_write(struct inode *inode, struct fat_entry *fatent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1335: FILE: include/linux/msdos_fs.h:371:
+extern int fat_alloc_clusters(struct inode *inode, int *cluster,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1337: FILE: include/linux/msdos_fs.h:373:
+extern int fat_free_clusters(struct inode *inode, int cluster);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1338: FILE: include/linux/msdos_fs.h:374:
+extern int fat_count_free_clusters(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1349: FILE: include/linux/msdos_fs.h:391:
+extern int fat_fill_super(struct super_block *sb, void *data, int silent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: include/linux/msdos_fs.h:392:
+extern int fat_fill_super(struct super_block *sb, void *data, int silent,
+			struct inode_operations *fs_dir_inode_ops, int isvfat);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1350: FILE: include/linux/msdos_fs.h:392:
+			struct inode_operations *fs_dir_inode_ops, int isvfat);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1358: FILE: include/linux/msdos_fs.h:397:
+extern int fat_chain_add(struct inode *inode, int new_dclus, int nr_cluster);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1366: FILE: include/linux/msdos_fs.h:417:
 }
+extern int fat_sync_bhs(struct buffer_head **bhs, int nr_bhs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1366: FILE: include/linux/msdos_fs.h:417:
+extern int fat_sync_bhs(struct buffer_head **bhs, int nr_bhs);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201947.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 32 warnings, 21 checks, 1270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201947.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
