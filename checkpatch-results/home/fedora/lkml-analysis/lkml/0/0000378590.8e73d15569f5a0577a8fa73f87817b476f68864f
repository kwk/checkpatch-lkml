WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#59: FILE: include/linux/wireless.h:73:
+ * at some point. Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#151: FILE: include/linux/wireless.h:503:
+struct	iw_thrspy
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#192: FILE: include/linux/wireless.h:623:
+	 * Don't forget that we use 8 bit arithmetics... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: include/linux/wireless.h:633:
+	 * us on which value we need to put in each driver... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#237: FILE: include/linux/wireless.h:687:
+	 * because each entry contain its channel index */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#307: FILE: include/net/iw_handler.h:376:
+struct iw_spy_data
+{

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#331: FILE: include/net/iw_handler.h:418:
+extern int iw_handler_set_spy(struct net_device *	dev,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/net/iw_handler.h:418:
+extern int iw_handler_set_spy(struct net_device *	dev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#332: FILE: include/net/iw_handler.h:419:
+			      struct iw_request_info *	info,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#333: FILE: include/net/iw_handler.h:420:
+			      union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#334: FILE: include/net/iw_handler.h:421:
+			      char *			extra);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#336: FILE: include/net/iw_handler.h:423:
+extern int iw_handler_get_spy(struct net_device *	dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/net/iw_handler.h:423:
+extern int iw_handler_get_spy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#337: FILE: include/net/iw_handler.h:424:
+			      struct iw_request_info *	info,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#338: FILE: include/net/iw_handler.h:425:
+			      union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#339: FILE: include/net/iw_handler.h:426:
+			      char *			extra);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#341: FILE: include/net/iw_handler.h:428:
+extern int iw_handler_set_thrspy(struct net_device *	dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: include/net/iw_handler.h:428:
+extern int iw_handler_set_thrspy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#343: FILE: include/net/iw_handler.h:430:
+				 union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#344: FILE: include/net/iw_handler.h:431:
+				 char *			extra);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#346: FILE: include/net/iw_handler.h:433:
+extern int iw_handler_get_thrspy(struct net_device *	dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/net/iw_handler.h:433:
+extern int iw_handler_get_thrspy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#348: FILE: include/net/iw_handler.h:435:
+				 union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#349: FILE: include/net/iw_handler.h:436:
+				 char *			extra);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#351: FILE: include/net/iw_handler.h:438:
+extern void wireless_spy_update(struct net_device *	dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: include/net/iw_handler.h:438:
+extern void wireless_spy_update(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#352: FILE: include/net/iw_handler.h:439:
+				unsigned char *		address,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#353: FILE: include/net/iw_handler.h:440:
+				struct iw_quality *	wstats);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#419: FILE: net/core/wireless.c:129:
+	{ IW_HEADER_TYPE_POINT, 0, (sizeof(struct sockaddr) + sizeof(struct iw_quality)), 0, IW_MAX_SPY, 0},

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPLIT_STRING: quoted string split across lines
#432: FILE: net/core/wireless.c:374:
 		seq_printf(seq, "Inter-| sta-|   Quality        |   Discarded "
+				"packets               | Missed | WE\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#435: FILE: net/core/wireless.c:376:
 				" face | tus | link level noise |  nwid  "
+				"crypt   frag  retry   misc | beacon | %d\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#448: FILE: net/core/wireless.c:1037:
+/*
+ * In the old days, the driver was handling spy support all by itself.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#461: FILE: net/core/wireless.c:1050:
+/*
+ * Standard Wireless Handler : set Spy List

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#463: FILE: net/core/wireless.c:1052:
+int iw_handler_set_spy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#464: FILE: net/core/wireless.c:1053:
+		       struct iw_request_info *	info,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#465: FILE: net/core/wireless.c:1054:
+		       union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#466: FILE: net/core/wireless.c:1055:
+		       char *			extra)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#469: FILE: net/core/wireless.c:1058:
+	struct iw_spy_data *	spydata = (dev->priv +

CHECK:SPACING: No space is necessary after a cast
#471: FILE: net/core/wireless.c:1060:
+	struct sockaddr *	address = (struct sockaddr *) extra;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#471: FILE: net/core/wireless.c:1060:
+	struct sockaddr *	address = (struct sockaddr *) extra;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#475: FILE: net/core/wireless.c:1064:
+	 * As we are the only writer, this is good enough. */

ERROR:SPACING: space required before the open parenthesis '('
#479: FILE: net/core/wireless.c:1068:
+	if(wrqu->data.length > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#483: FILE: net/core/wireless.c:1072:
+		for(i = 0; i < wrqu->data.length; i++)

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#491: FILE: net/core/wireless.c:1080:
+		printk(KERN_DEBUG "iw_handler_set_spy() :  offset %ld, spydata %p, num %d\n", dev->wireless_handlers->spy_offset, spydata, wrqu->data.length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#491: FILE: net/core/wireless.c:1080:
+		printk(KERN_DEBUG "iw_handler_set_spy() :  offset %ld, spydata %p, num %d\n", dev->wireless_handlers->spy_offset, spydata, wrqu->data.length);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'iw_handler_set_spy', this function's name, in a string
#491: FILE: net/core/wireless.c:1080:
+		printk(KERN_DEBUG "iw_handler_set_spy() :  offset %ld, spydata %p, num %d\n", dev->wireless_handlers->spy_offset, spydata, wrqu->data.length);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#493: FILE: net/core/wireless.c:1082:
+			printk(KERN_DEBUG

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#494: FILE: net/core/wireless.c:1083:
+			       "%02X:%02X:%02X:%02X:%02X:%02X \n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#514: FILE: net/core/wireless.c:1103:
+/*
+ * Standard Wireless Handler : get Spy List

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#516: FILE: net/core/wireless.c:1105:
+int iw_handler_get_spy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#517: FILE: net/core/wireless.c:1106:
+		       struct iw_request_info *	info,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#518: FILE: net/core/wireless.c:1107:
+		       union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#519: FILE: net/core/wireless.c:1108:
+		       char *			extra)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#522: FILE: net/core/wireless.c:1111:
+	struct iw_spy_data *	spydata = (dev->priv +

CHECK:SPACING: No space is necessary after a cast
#524: FILE: net/core/wireless.c:1113:
+	struct sockaddr *	address = (struct sockaddr *) extra;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#524: FILE: net/core/wireless.c:1113:
+	struct sockaddr *	address = (struct sockaddr *) extra;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#530: FILE: net/core/wireless.c:1119:
+^Ifor(i = 0; i < spydata->spy_number; i++) ^I{$

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: net/core/wireless.c:1119:
+	for(i = 0; i < spydata->spy_number; i++) 	{

ERROR:SPACING: space required before the open parenthesis '('
#535: FILE: net/core/wireless.c:1124:
+	if(spydata->spy_number > 0)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#536: FILE: net/core/wireless.c:1125:
+		memcpy(extra  + (sizeof(struct sockaddr) *spydata->spy_number),
 		                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#540: FILE: net/core/wireless.c:1129:
+	for(i = 0; i < spydata->spy_number; i++)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#550: FILE: net/core/wireless.c:1139:
+/*
+ * Standard Wireless Handler : set spy threshold

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#552: FILE: net/core/wireless.c:1141:
+int iw_handler_set_thrspy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#554: FILE: net/core/wireless.c:1143:
+			  union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#555: FILE: net/core/wireless.c:1144:
+			  char *		extra)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#558: FILE: net/core/wireless.c:1147:
+	struct iw_spy_data *	spydata = (dev->priv +

CHECK:SPACING: No space is necessary after a cast
#560: FILE: net/core/wireless.c:1149:
+	struct iw_thrspy *	threshold = (struct iw_thrspy *) extra;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#560: FILE: net/core/wireless.c:1149:
+	struct iw_thrspy *	threshold = (struct iw_thrspy *) extra;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around spydata->spy_thr_low
#563: FILE: net/core/wireless.c:1152:
+	memcpy(&(spydata->spy_thr_low), &(threshold->low),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around threshold->low
#563: FILE: net/core/wireless.c:1152:
+	memcpy(&(spydata->spy_thr_low), &(threshold->low),

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#570: FILE: net/core/wireless.c:1159:
+	printk(KERN_DEBUG "iw_handler_set_thrspy() :  low %d ; high %d\n", spydata->spy_thr_low.level, spydata->spy_thr_high.level);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#570: FILE: net/core/wireless.c:1159:
+	printk(KERN_DEBUG "iw_handler_set_thrspy() :  low %d ; high %d\n", spydata->spy_thr_low.level, spydata->spy_thr_high.level);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'iw_handler_set_thrspy', this function's name, in a string
#570: FILE: net/core/wireless.c:1159:
+	printk(KERN_DEBUG "iw_handler_set_thrspy() :  low %d ; high %d\n", spydata->spy_thr_low.level, spydata->spy_thr_high.level);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#581: FILE: net/core/wireless.c:1170:
+/*
+ * Standard Wireless Handler : get spy threshold

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#583: FILE: net/core/wireless.c:1172:
+int iw_handler_get_thrspy(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#585: FILE: net/core/wireless.c:1174:
+			  union iwreq_data *	wrqu,

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#586: FILE: net/core/wireless.c:1175:
+			  char *		extra)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#589: FILE: net/core/wireless.c:1178:
+	struct iw_spy_data *	spydata = (dev->priv +

CHECK:SPACING: No space is necessary after a cast
#591: FILE: net/core/wireless.c:1180:
+	struct iw_thrspy *	threshold = (struct iw_thrspy *) extra;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#591: FILE: net/core/wireless.c:1180:
+	struct iw_thrspy *	threshold = (struct iw_thrspy *) extra;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around threshold->low
#594: FILE: net/core/wireless.c:1183:
+	memcpy(&(threshold->low), &(spydata->spy_thr_low),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around spydata->spy_thr_low
#594: FILE: net/core/wireless.c:1183:
+	memcpy(&(threshold->low), &(spydata->spy_thr_low),

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#606: FILE: net/core/wireless.c:1195:
+/*
+ * Prepare and send a Spy Threshold event

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#608: FILE: net/core/wireless.c:1197:
+static void iw_send_thrspy_event(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#609: FILE: net/core/wireless.c:1198:
+				 struct iw_spy_data *	spydata,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#610: FILE: net/core/wireless.c:1199:
+				 unsigned char *	address,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#611: FILE: net/core/wireless.c:1200:
+				 struct iw_quality *	wstats)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around threshold.qual
#623: FILE: net/core/wireless.c:1212:
+	memcpy(&(threshold.qual), wstats, sizeof(struct iw_quality));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around threshold.low
#625: FILE: net/core/wireless.c:1214:
+	memcpy(&(threshold.low), &(spydata->spy_thr_low),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around spydata->spy_thr_low
#625: FILE: net/core/wireless.c:1214:
+	memcpy(&(threshold.low), &(spydata->spy_thr_low),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#629: FILE: net/core/wireless.c:1218:
+	printk(KERN_DEBUG "iw_send_thrspy_event() : address %02X:%02X:%02X:%02X:%02X:%02X, level %d, up = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'iw_send_thrspy_event', this function's name, in a string
#629: FILE: net/core/wireless.c:1218:
+	printk(KERN_DEBUG "iw_send_thrspy_event() : address %02X:%02X:%02X:%02X:%02X:%02X, level %d, up = %d\n",

CHECK:SPACING: No space is necessary after a cast
#639: FILE: net/core/wireless.c:1228:
+	wireless_send_event(dev, SIOCGIWTHRSPY, &wrqu, (char *) &threshold);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#645: FILE: net/core/wireless.c:1234:
+/*
+ * Call for the driver to update the spy data.

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#650: FILE: net/core/wireless.c:1239:
+void wireless_spy_update(struct net_device *	dev,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#651: FILE: net/core/wireless.c:1240:
+			 unsigned char *	address,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#652: FILE: net/core/wireless.c:1241:
+			 struct iw_quality *	wstats)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#655: FILE: net/core/wireless.c:1244:
+	struct iw_spy_data *	spydata = (dev->priv +

WARNING:LONG_LINE: line length of 235 exceeds 100 columns
#661: FILE: net/core/wireless.c:1250:
+	printk(KERN_DEBUG "wireless_spy_update() :  offset %ld, spydata %p, address %02X:%02X:%02X:%02X:%02X:%02X\n", dev->wireless_handlers->spy_offset, spydata, address[0], address[1], address[2], address[3], address[4], address[5]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#661: FILE: net/core/wireless.c:1250:
+	printk(KERN_DEBUG "wireless_spy_update() :  offset %ld, spydata %p, address %02X:%02X:%02X:%02X:%02X:%02X\n", dev->wireless_handlers->spy_offset, spydata, address[0], address[1], address[2], address[3], address[4], address[5]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wireless_spy_update', this function's name, in a string
#661: FILE: net/core/wireless.c:1250:
+	printk(KERN_DEBUG "wireless_spy_update() :  offset %ld, spydata %p, address %02X:%02X:%02X:%02X:%02X:%02X\n", dev->wireless_handlers->spy_offset, spydata, address[0], address[1], address[2], address[3], address[4], address[5]);

ERROR:SPACING: space required before the open parenthesis '('
#665: FILE: net/core/wireless.c:1254:
+	for(i = 0; i < spydata->spy_number; i++)

ERROR:SPACING: space required before the open parenthesis '('
#666: FILE: net/core/wireless.c:1255:
+		if(!memcmp(address, spydata->spy_address[i], ETH_ALEN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around spydata->spy_stat[i]
#667: FILE: net/core/wireless.c:1256:
+			memcpy(&(spydata->spy_stat[i]), wstats,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#675: FILE: net/core/wireless.c:1264:
+	 * high threshold. */

ERROR:SPACING: space required before the open parenthesis '('
#676: FILE: net/core/wireless.c:1265:
+	if(match >= 0) {

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: net/core/wireless.c:1266:
+		if(spydata->spy_thr_under[match]) {

ERROR:SPACING: space required before the open parenthesis '('
#678: FILE: net/core/wireless.c:1267:
+			if(wstats->level > spydata->spy_thr_high.level) {

ERROR:SPACING: space required before the open parenthesis '('
#684: FILE: net/core/wireless.c:1273:
+			if(wstats->level < spydata->spy_thr_low.level) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#707: FILE: net/netsyms.c:675:
+EXPORT_SYMBOL(iw_handler_get_spy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#708: FILE: net/netsyms.c:676:
+EXPORT_SYMBOL(iw_handler_set_thrspy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#709: FILE: net/netsyms.c:677:
+EXPORT_SYMBOL(iw_handler_get_thrspy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#710: FILE: net/netsyms.c:678:
+EXPORT_SYMBOL(wireless_spy_update);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378590.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 34 warnings, 19 checks, 632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378590.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
