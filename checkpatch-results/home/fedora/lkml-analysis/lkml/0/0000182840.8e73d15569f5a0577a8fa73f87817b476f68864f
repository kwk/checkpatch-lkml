CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#59: FILE: include/linux/mmc/protocol.h:215:
+#define CCC_BASIC		(1<<0)	/* (0) Basic protocol functions */
                  		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#59: FILE: include/linux/mmc/protocol.h:215:
+#define CCC_BASIC		(1<<0)	/* (0) Basic protocol functions */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#61: FILE: include/linux/mmc/protocol.h:217:
+#define CCC_STREAM_READ		(1<<1)	/* (1) Stream read commands */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#61: FILE: include/linux/mmc/protocol.h:217:
+#define CCC_STREAM_READ		(1<<1)	/* (1) Stream read commands */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#63: FILE: include/linux/mmc/protocol.h:219:
+#define CCC_BLOCK_READ		(1<<2)	/* (2) Block read commands */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#63: FILE: include/linux/mmc/protocol.h:219:
+#define CCC_BLOCK_READ		(1<<2)	/* (2) Block read commands */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#65: FILE: include/linux/mmc/protocol.h:221:
+#define CCC_STREAM_WRITE	(1<<3)	/* (3) Stream write commands */
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#65: FILE: include/linux/mmc/protocol.h:221:
+#define CCC_STREAM_WRITE	(1<<3)	/* (3) Stream write commands */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#67: FILE: include/linux/mmc/protocol.h:223:
+#define CCC_BLOCK_WRITE		(1<<4)	/* (4) Block write commands */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#67: FILE: include/linux/mmc/protocol.h:223:
+#define CCC_BLOCK_WRITE		(1<<4)	/* (4) Block write commands */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#69: FILE: include/linux/mmc/protocol.h:225:
+#define CCC_ERASE		(1<<5)	/* (5) Ability to erase blocks */
                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: include/linux/mmc/protocol.h:225:
+#define CCC_ERASE		(1<<5)	/* (5) Ability to erase blocks */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: include/linux/mmc/protocol.h:227:
+#define CCC_WRITE_PROT		(1<<6)	/* (6) Able to write protect blocks */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#71: FILE: include/linux/mmc/protocol.h:227:
+#define CCC_WRITE_PROT		(1<<6)	/* (6) Able to write protect blocks */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#73: FILE: include/linux/mmc/protocol.h:229:
+#define CCC_LOCK_CARD		(1<<7)	/* (7) Able to lock down card */
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#73: FILE: include/linux/mmc/protocol.h:229:
+#define CCC_LOCK_CARD		(1<<7)	/* (7) Able to lock down card */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: include/linux/mmc/protocol.h:231:
+#define CCC_APP_SPEC		(1<<8)	/* (8) Application specific */
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#75: FILE: include/linux/mmc/protocol.h:231:
+#define CCC_APP_SPEC		(1<<8)	/* (8) Application specific */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#77: FILE: include/linux/mmc/protocol.h:233:
+#define CCC_IO_MODE		(1<<9)	/* (9) I/O mode */
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#77: FILE: include/linux/mmc/protocol.h:233:
+#define CCC_IO_MODE		(1<<9)	/* (9) I/O mode */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#79: FILE: include/linux/mmc/protocol.h:235:
+#define CCC_SWITCH		(1<<10)	/* (10) High speed switch */
                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: include/linux/mmc/protocol.h:235:
+#define CCC_SWITCH		(1<<10)	/* (10) High speed switch */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 0 warnings, 22 checks, 33 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
