WARNING:TYPO_SPELLING: 'changlog' may be misspelled - perhaps 'changelog'?
#42: 
changlog:
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'tiem' may be misspelled - perhaps 'time'?
#63: 
declaration tiem rather than in hvcs_module_init().
            ^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#114: 
Content-Type: text/x-patch; name=hvcs_fixes_draft1.patch; charset=ISO-8859-15

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#184: FILE: drivers/char/hvcs.c:287:
+	uint32_t p_unit_address; /* partner unit address */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#185: FILE: drivers/char/hvcs.c:288:
+	uint32_t p_partition_ID; /* partner partition ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#218: FILE: drivers/char/hvcs.c:394:
+	uint32_t unit_address = hvcsd->vdev->unit_address;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#239: FILE: drivers/char/hvcs.c:427:
+	uint32_t unit_address;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hvcsd)...) over kmalloc(sizeof(struct hvcs_struct)...)
#311: FILE: drivers/char/hvcs.c:599:
+	hvcsd = kmalloc(sizeof(struct hvcs_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#340: FILE: drivers/char/hvcs.c:731:
+	uint32_t unit_address = hvcsd->vdev->unit_address;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#393: FILE: drivers/char/hvcs.c:870:
+	if (!(rc = request_irq(irq, &hvcs_handle_interrupt,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: drivers/char/hvcs.c:871:
+	if (!(rc = request_irq(irq, &hvcs_handle_interrupt,
+				SA_INTERRUPT, "ibmhvcs", hvcsd))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#474: FILE: drivers/char/hvcs.c:989:
+	if (((rc = hvcs_enable_device(hvcsd, unit_address, irq, vdev)))) {

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'hvcs_index_show' to 'index_show'
#552: FILE: drivers/char/hvcs.c:1545:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#554: FILE: drivers/char/hvcs.c:1547:
+static DEVICE_ATTR(index, S_IRUGO, hvcs_index_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#596: FILE: arch/ppc64/kernel/hvcserver.c:92:
+int hvcs_next_partner(uint32_t unit_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: arch/ppc64/kernel/hvcserver.c:93:
+int hvcs_next_partner(uint32_t unit_address,
 		unsigned long last_p_partition_ID,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#635: FILE: arch/ppc64/kernel/hvcserver.c:129:
+int hvcs_get_partner_info(uint32_t unit_address, struct list_head *head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: arch/ppc64/kernel/hvcserver.c:130:
+int hvcs_get_partner_info(uint32_t unit_address, struct list_head *head,
 		unsigned long *pi_buff)

ERROR:SPACING: space prohibited after that open parenthesis '('
#697: FILE: arch/ppc64/kernel/hvcserver.c:223:
+int hvcs_register_connection( uint32_t unit_address,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#697: FILE: arch/ppc64/kernel/hvcserver.c:223:
+int hvcs_register_connection( uint32_t unit_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: arch/ppc64/kernel/hvcserver.c:224:
+int hvcs_register_connection( uint32_t unit_address,
+		uint32_t p_partition_ID, uint32_t p_unit_address)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#698: FILE: arch/ppc64/kernel/hvcserver.c:224:
+		uint32_t p_partition_ID, uint32_t p_unit_address)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#747: FILE: include/asm-ppc64/hvcserver.h:45:
+	uint32_t unit_address;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#748: FILE: include/asm-ppc64/hvcserver.h:46:
+	uint32_t partition_ID;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#754: FILE: include/asm-ppc64/hvcserver.h:51:
+extern int hvcs_get_partner_info(uint32_t unit_address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/asm-ppc64/hvcserver.h:51:
+extern int hvcs_get_partner_info(uint32_t unit_address,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: include/asm-ppc64/hvcserver.h:52:
+extern int hvcs_get_partner_info(uint32_t unit_address,
 		struct list_head *head, unsigned long *pi_buff);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#759: FILE: include/asm-ppc64/hvcserver.h:53:
+extern int hvcs_register_connection(uint32_t unit_address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#759: FILE: include/asm-ppc64/hvcserver.h:53:
+extern int hvcs_register_connection(uint32_t unit_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: include/asm-ppc64/hvcserver.h:54:
+extern int hvcs_register_connection(uint32_t unit_address,
+		uint32_t p_partition_ID, uint32_t p_unit_address);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#760: FILE: include/asm-ppc64/hvcserver.h:54:
+		uint32_t p_partition_ID, uint32_t p_unit_address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/asm-ppc64/hvcserver.h:55:
+extern int hvcs_free_connection(uint32_t unit_address);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258341.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 24 checks, 600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258341.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
