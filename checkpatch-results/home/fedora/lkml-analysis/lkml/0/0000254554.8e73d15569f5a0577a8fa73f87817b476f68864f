CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#28: 
Ｈｉ　Jeff,
^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Haruo> Combined mode can be set up by the SATA controller of ESB of Intel tip. 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#132: FILE: drivers/scsi/ata_piix.c:623:
+		printk(KERN_WARNING DRV_NAME ": combined mode detected¥n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#146: FILE: drivers/scsi/libata-core.c:3299:
+		if (!request_region(0x1f0, 8, "libata")) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: drivers/scsi/libata-core.c:3301:
+			struct resource *conflict, res;
+			res.start = 0x1f0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#150: FILE: drivers/scsi/libata-core.c:3303:
+			conflict = ____request_resource(&ioport_resource, &res);			if (!strcmp(conflict->name, "libata"))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#150: FILE: drivers/scsi/libata-core.c:3303:
+			conflict = ____request_resource(&ioport_resource, &res);			if (!strcmp(conflict->name, "libata"))

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#153: FILE: drivers/scsi/libata-core.c:3306:
+				printk(KERN_WARNING "ata: 0x1f0 IDE port busy¥n");

CHECK:BRACES: Unbalanced braces around else statement
#154: FILE: drivers/scsi/libata-core.c:3307:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#160: FILE: drivers/scsi/libata-core.c:3310:
+		if (!request_region(0x170, 8, "libata")) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: drivers/scsi/libata-core.c:3312:
+			struct resource *conflict, res;
+			res.start = 0x170;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#168: FILE: drivers/scsi/libata-core.c:3318:
+				printk(KERN_WARNING "ata: 0x170 IDE port busy¥n");

CHECK:BRACES: Unbalanced braces around else statement
#169: FILE: drivers/scsi/libata-core.c:3319:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: include/linux/ioport.h:88:
+extern struct resource * ____request_resource(struct resource *root, struct resource *new);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/ioport.h:88:
+extern struct resource * ____request_resource(struct resource *root, struct resource *new);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 7 warnings, 6 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
