Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'cacheing' may be misspelled - perhaps 'caching'?
#58: 
> This seems to be randomly cacheing the recent access position...  Is
                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#61: 
Right, it looks like TLB, which holds cache "Physical addres"
                                                      ^^^^^^

WARNING:TYPO_SPELLING: 'correponding' may be misspelled - perhaps 'corresponding'?
#62: 
correponding to "Logical address". In this case, PID and file name
^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#87: 
mount msdos to /a
      ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#98: 
mount msdos to /a
      ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#114: 
do 3-1 with msdos fs
            ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#117: 
do 3-2 with msdos fs
            ^^^^^

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Hiroyuki Machida <machida@sm.sony.co.jp> for CELF', should be: 'Hiroyuki Machida <machida@sm.sony.co.jp> (for CELF)'
#140: 
Signed-off-by: Hiroyuki Machida <machida@sm.sony.co.jp> for CELF

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#153: FILE: fs/fat/dir.c:206:
+#define FAT_SCAN_NWAY	(1<<FAT_SCAN_SHIFT)
                      	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#153: FILE: fs/fat/dir.c:206:
+#define FAT_SCAN_NWAY	(1<<FAT_SCAN_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: fs/fat/dir.c:216:
+^I^Iif (!hints) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: fs/fat/dir.c:233:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/fat/dir.c:235:
+static void hint_record(struct inode *dir, struct fat_slot_info *sinfo, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/fat/dir.c:236:
+static void hint_record(struct inode *dir, struct fat_slot_info *sinfo, 
+			  int hindex)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/fat/dir.c:247:
+^Iif (sinfo->slot_off > under_scan_off) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/fat/dir.c:249:
+^I^I^Isinfo->slot_off - under_scan_off;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/fat/dir.c:251:
+^I^IMSDOS_I(dir)->scan_hints[hindex] = 0;  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: fs/fat/dir.c:254:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: fs/fat/dir.c:255:
+inline $

CHECK:SPACING: No space is necessary after a cast
#207: FILE: fs/fat/dir.c:260:
+	unsigned char *p = (unsigned char *) name;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: fs/fat/dir.c:262:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#210: FILE: fs/fat/dir.c:263:
+	for (i=0; i<name_len; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#210: FILE: fs/fat/dir.c:263:
+	for (i=0; i<name_len; i++) {
 	           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#211: FILE: fs/fat/dir.c:264:
+		if (check_null && !*p) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#214: FILE: fs/fat/dir.c:267:
+		p ++;
 		  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#218: FILE: fs/fat/dir.c:271:
+	return val & (FAT_SCAN_NWAY-1);
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/fat/dir.c:274:
+inline $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/fat/dir.c:280:
+inline $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/fat/dir.c:309:
+^Iret = hint_allocate(inode); $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: fs/fat/dir.c:310:
+	if (ret < 0) return ret;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#250: FILE: fs/fat/dir.c:312:
+	start_off = cpos =  MSDOS_I(inode)->scan_hints[hindex];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <Top>
#256: FILE: fs/fat/dir.c:316:
+Top:

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#257: FILE: fs/fat/dir.c:317:
+		if (reach_bottom && cpos >= start_off) goto EODir;

CHECK:CAMELCASE: Avoid CamelCase: <EODir>
#257: FILE: fs/fat/dir.c:317:
+		if (reach_bottom && cpos >= start_off) goto EODir;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#259: FILE: fs/fat/dir.c:319:
+			if (!start_off) goto EODir;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#260: FILE: fs/fat/dir.c:320:
+			reach_bottom ++; cpos = 0;
 			             ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#272: FILE: fs/fat/dir.c:372:
+				if (fat_get_entry(inode, &cpos, &bh, &de) <0 ) {
 				                                          ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#272: FILE: fs/fat/dir.c:372:
+				if (fat_get_entry(inode, &cpos, &bh, &de) <0 ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#273: FILE: fs/fat/dir.c:373:
+					if (!start_off) goto EODir;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#274: FILE: fs/fat/dir.c:374:
+					reach_bottom ++; cpos = 0;
 					             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: fs/fat/dir.c:945:
+^Iret = hint_allocate(dir); $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: fs/fat/dir.c:946:
+	if (ret < 0) return ret;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#302: FILE: fs/fat/dir.c:949:
+	sinfo->slot_off = start_off = MSDOS_I(dir)->scan_hints[hindex];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: fs/fat/dir.c:952:
+^I^Iif (fat_get_short_entry(dir, &sinfo->slot_off, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: fs/fat/dir.c:953:
+^I^I^I^I        &sinfo->bh, &sinfo->de) <0 ) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: fs/fat/dir.c:953:
+^I^I^I^I        &sinfo->bh, &sinfo->de) <0 ) { $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: fs/fat/dir.c:953:
+		if (fat_get_short_entry(dir, &sinfo->slot_off, 
+				        &sinfo->bh, &sinfo->de) <0 ) { 

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#308: FILE: fs/fat/dir.c:953:
+				        &sinfo->bh, &sinfo->de) <0 ) { 
 				                                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#308: FILE: fs/fat/dir.c:953:
+				        &sinfo->bh, &sinfo->de) <0 ) { 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: fs/fat/dir.c:954:
+			if (!start_off) break;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#310: FILE: fs/fat/dir.c:955:
+			sinfo->slot_off = 0LL; reach_bottom ++;
 			                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_off <= sinfo->slot_off'
#320: FILE: fs/fat/dir.c:965:
+		if (reach_bottom && (start_off <= sinfo->slot_off)) break;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#320: FILE: fs/fat/dir.c:965:
+		if (reach_bottom && (start_off <= sinfo->slot_off)) break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#343: FILE: fs/fat/inode.c:354:
+	if (hints) {
+		MSDOS_I(inode)->scan_hints = NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 9 warnings, 13 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
