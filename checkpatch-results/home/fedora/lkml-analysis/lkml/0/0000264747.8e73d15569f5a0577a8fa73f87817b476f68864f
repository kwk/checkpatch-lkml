WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Same as before, but it's at least semi-useful now. I actually would consider

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/block/Kconfig:304:
+config BLK_DEV_UB
+	tristate "Low Performance USB Block driver"
+	depends on USB
+	help
+	  This driver supports certain USB attached storage devices
+	  such as flash keys.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/block/ub.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <Signature>
#136: FILE: drivers/block/ub.c:60:
+	u32	Signature;		/* contains 'USBC' */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Tag>
#137: FILE: drivers/block/ub.c:61:
+	u32	Tag;			/* unique per command id */

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferLength>
#138: FILE: drivers/block/ub.c:62:
+	u32	DataTransferLength;	/* size of data */

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#139: FILE: drivers/block/ub.c:63:
+	u8	Flags;			/* direction in bit 0 */

CHECK:CAMELCASE: Avoid CamelCase: <Lun>
#140: FILE: drivers/block/ub.c:64:
+	u8	Lun;			/* LUN normally 0 */

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#141: FILE: drivers/block/ub.c:65:
+	u8	Length;			/* of of the CDB */

CHECK:CAMELCASE: Avoid CamelCase: <Length>
#141: FILE: drivers/block/ub.c:65:
+	u8	Length;			/* of of the CDB */

CHECK:CAMELCASE: Avoid CamelCase: <Residue>
#154: FILE: drivers/block/ub.c:78:
+	u32	Residue;		/* amount not transferred */

CHECK:CAMELCASE: Avoid CamelCase: <Status>
#155: FILE: drivers/block/ub.c:79:
+	u8	Status;			/* see below */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#182: FILE: drivers/block/ub.c:106:
+#define UB_URB_TIMEOUT	(HZ*2)
                       	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#183: FILE: drivers/block/ub.c:107:
+#define UB_CTRL_TIMEOUT	(HZ/2) /* 500ms ought to be enough to clear a stall */
                        	   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#193: FILE: drivers/block/ub.c:117:
+#define UB_DIR_CHAR(c)  (((c)==UB_DIR_WRITE)? 'w': \
                              ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#193: FILE: drivers/block/ub.c:117:
+#define UB_DIR_CHAR(c)  (((c)==UB_DIR_WRITE)? 'w': \
                                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#193: FILE: drivers/block/ub.c:117:
+#define UB_DIR_CHAR(c)  (((c)==UB_DIR_WRITE)? 'w': \
                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#193: FILE: drivers/block/ub.c:117:
+#define UB_DIR_CHAR(c)  (((c)==UB_DIR_WRITE)? 'w': \
+			 (((c)==UB_DIR_READ)? 'r': 'n'))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#194: FILE: drivers/block/ub.c:118:
+			 (((c)==UB_DIR_READ)? 'r': 'n'))
 			      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#194: FILE: drivers/block/ub.c:118:
+			 (((c)==UB_DIR_READ)? 'r': 'n'))
 			                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#194: FILE: drivers/block/ub.c:118:
+			 (((c)==UB_DIR_READ)? 'r': 'n'))
 			                         ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ub_dev *' should also have an identifier name
#240: FILE: drivers/block/ub.c:164:
+	void (*done)(struct ub_dev *, struct ub_scsi_cmd *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ub_scsi_cmd *' should also have an identifier name
#240: FILE: drivers/block/ub.c:164:
+	void (*done)(struct ub_dev *, struct ub_scsi_cmd *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: drivers/block/ub.c:190:
+^Ichar st_hst[SCMD_ST_HIST_SZ];^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#278: FILE: drivers/block/ub.c:202:
+	spinlock_t lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: drivers/block/ub.c:215:
+^Istruct ub_capacity capacity; $

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#322: FILE: drivers/block/ub.c:246:
+static void ub_end_rq(struct request *rq, int uptodate);
                                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/block/ub.c:254:
+static int ub_submit_clear_stall(struct ub_dev *sc, struct ub_scsi_cmd *cmd,
+    int stalled_pipe);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/block/ub.c:254:
+    int stalled_pipe);$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#364: FILE: drivers/block/ub.c:288:
+	if ((n = sc->tr.cur + 1) == SCMD_TRACE_SZ) n = 0;

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#364: FILE: drivers/block/ub.c:288:
+	if ((n = sc->tr.cur + 1) == SCMD_TRACE_SZ) n = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#385: FILE: drivers/block/ub.c:309:
+		if ((n = t->hcur + 1) == SCMD_ST_HIST_SZ) n = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#385: FILE: drivers/block/ub.c:309:
+		if ((n = t->hcur + 1) == SCMD_ST_HIST_SZ) n = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/block/ub.c:325:
+static void ub_cmdtr_sense(struct ub_dev *sc, struct ub_scsi_cmd *cmd,
+    unsigned char *sense)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: drivers/block/ub.c:325:
+    unsigned char *sense)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc"
#425: FILE: drivers/block/ub.c:349:
+	if (sc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#430: FILE: drivers/block/ub.c:354:
+	if ((nc = sc->tr.cur + 1) == SCMD_TRACE_SZ) nc = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#430: FILE: drivers/block/ub.c:354:
+	if ((nc = sc->tr.cur + 1) == SCMD_TRACE_SZ) nc = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: drivers/block/ub.c:367:
+		if ((nh = t->hcur + 1) == SCMD_ST_HIST_SZ) nh = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#443: FILE: drivers/block/ub.c:367:
+		if ((nh = t->hcur + 1) == SCMD_ST_HIST_SZ) nh = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#447: FILE: drivers/block/ub.c:371:
+			if (++nh == SCMD_ST_HIST_SZ) nh = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#451: FILE: drivers/block/ub.c:375:
+		if (++nc == SCMD_TRACE_SZ) nc = 0;

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ub_diag_show' to 'diag_show'
#455: FILE: drivers/block/ub.c:379:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#457: FILE: drivers/block/ub.c:381:
+static DEVICE_ATTR(diag, S_IRUGO, ub_diag_show, NULL); /* N.B. World readable */

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#483: FILE: drivers/block/ub.c:407:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#485: FILE: drivers/block/ub.c:409:
+		printk(KERN_ERR DRV_NAME ": bad host ID %d\n", id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: drivers/block/ub.c:413:
+		printk(KERN_ERR DRV_NAME ": freeing free host ID %d\n", id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#522: FILE: drivers/block/ub.c:446:
+		printk(KERN_WARNING "%s: releasing a foreign cmd %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: drivers/block/ub.c:447:
+		printk(KERN_WARNING "%s: releasing a foreign cmd %p\n",
+		    sc->name, cmd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#527: FILE: drivers/block/ub.c:451:
+		printk(KERN_WARNING "%s: releasing a free cmd\n", sc->name);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#539: FILE: drivers/block/ub.c:463:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#546: FILE: drivers/block/ub.c:470:
+#if 0 /* We use rq->buffer for now */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#555: FILE: drivers/block/ub.c:479:
+	if ((rq = elv_next_request(q)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#564: FILE: drivers/block/ub.c:488:
+	if ((cmd = ub_get_cmd(sc)) == NULL) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#579: FILE: drivers/block/ub.c:503:
+#if 0 /* We use rq->buffer for now */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#590: FILE: drivers/block/ub.c:514:
+		printk(KERN_WARNING "%s: request with %d segments\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/block/ub.c:515:
+		printk(KERN_WARNING "%s: request with %d segments\n",
+		    sc->name, n_elem);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq->buffer"
#602: FILE: drivers/block/ub.c:526:
+	if (rq->buffer == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: drivers/block/ub.c:532:
+		static int do_print = 1;
+		if (do_print) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#609: FILE: drivers/block/ub.c:533:
+			printk(KERN_WARNING "%s: unmapped request\n", sc->name);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#625: FILE: drivers/block/ub.c:549:
+	cmd->cdb[0] = (ub_dir == UB_DIR_READ)? READ_10: WRITE_10;
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#625: FILE: drivers/block/ub.c:549:
+	cmd->cdb[0] = (ub_dir == UB_DIR_READ)? READ_10: WRITE_10;
 	                                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#642: FILE: drivers/block/ub.c:566:
+	if ((rc = ub_submit_scsi(sc, cmd)) != 0) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#662: FILE: drivers/block/ub.c:586:
+	int uptodate;
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#665: FILE: drivers/block/ub.c:589:
+		uptodate = 1;
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#667: FILE: drivers/block/ub.c:591:
+		uptodate = 0;
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#670: FILE: drivers/block/ub.c:594:
+	ub_end_rq(rq, uptodate);
 	              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#674: FILE: drivers/block/ub.c:598:
+static void ub_end_rq(struct request *rq, int uptodate)
                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#678: FILE: drivers/block/ub.c:602:
+	rc = end_that_request_first(rq, uptodate, rq->hard_nr_sectors);
 	                                ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: drivers/block/ub.c:632:
+		static int first_warning = 1;
+		if (first_warning) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#709: FILE: drivers/block/ub.c:633:
+			printk(KERN_WARNING DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: drivers/block/ub.c:634:
+			printk(KERN_WARNING DRV_NAME ": "
+			    "submitting command from a hard irq\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#722: FILE: drivers/block/ub.c:646:
+		if (!sc->busy) {
+			return -EBUSY;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: drivers/block/ub.c:675:
+	usb_fill_bulk_urb(&sc->work_urb, sc->dev, sc->send_bulk_pipe,
+	    bcb, US_BULK_CB_WRAP_LEN,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#760: FILE: drivers/block/ub.c:684:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#761: FILE: drivers/block/ub.c:685:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#763: FILE: drivers/block/ub.c:687:
+		printk("ub: cmd #%d submit failed (%d)\n", cmd->tag, rc); /* P3 */

CHECK:SPACING: No space is necessary after a cast
#793: FILE: drivers/block/ub.c:717:
+	struct ub_dev *sc = (struct ub_dev *) _dev;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 25)
#804: FILE: drivers/block/ub.c:728:
+	} else {
[...]
+		/* P3 */ printk("ub: Action on idle device\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#806: FILE: drivers/block/ub.c:730:
+		/* P3 */ printk("ub: Action on idle device\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#819: FILE: drivers/block/ub.c:743:
+/* P3 */ /** printk("ub: urb status %d pipe 0x%08x len %d act %d\n",
+ urb->status, urb->pipe, urb->transfer_buffer_length, urb->actual_length); **/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Bad_End>
#823: FILE: drivers/block/ub.c:747:
+		goto Bad_End;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#833: FILE: drivers/block/ub.c:757:
+			printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#834: FILE: drivers/block/ub.c:758:
+			printk(KERN_NOTICE "%s: "
+			    "stall on control pipe for device %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/block/ub.c:769:
+		usb_endpoint_running(sc->dev, usb_pipeendpoint(sc->last_pipe),
+			usb_pipeout(sc->last_pipe));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: drivers/block/ub.c:771:
+		usb_settoggle(sc->dev, usb_pipeendpoint(sc->last_pipe),
+			usb_pipeout(sc->last_pipe), 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#858: FILE: drivers/block/ub.c:782:
+			printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#859: FILE: drivers/block/ub.c:783:
+			printk(KERN_NOTICE "%s: "
+			    "stall on control pipe for device %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: drivers/block/ub.c:794:
+		usb_endpoint_running(sc->dev, usb_pipeendpoint(sc->last_pipe),
+			usb_pipeout(sc->last_pipe));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: drivers/block/ub.c:796:
+		usb_settoggle(sc->dev, usb_pipeendpoint(sc->last_pipe),
+			usb_pipeout(sc->last_pipe), 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#880: FILE: drivers/block/ub.c:804:
+				printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#881: FILE: drivers/block/ub.c:805:
+				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear for device %u (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/block/ub.c:835:
+		usb_fill_bulk_urb(&sc->work_urb, sc->dev, pipe,
+		    cmd->data, cmd->len,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#918: FILE: drivers/block/ub.c:842:
+		if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#919: FILE: drivers/block/ub.c:843:
+		if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#921: FILE: drivers/block/ub.c:845:
+			printk("ub: data #%d submit failed (%d)\n", cmd->tag, rc); /* P3 */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#941: FILE: drivers/block/ub.c:865:
+				printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#942: FILE: drivers/block/ub.c:866:
+				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear for device %u (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#973: FILE: drivers/block/ub.c:897:
+				printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#974: FILE: drivers/block/ub.c:898:
+				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear for device %u (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#997: FILE: drivers/block/ub.c:921:
+				printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#998: FILE: drivers/block/ub.c:922:
+				printk(KERN_NOTICE "%s: "
+				    "unable to get CSW on device %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: drivers/block/ub.c:932:
+			usb_fill_bulk_urb(&sc->work_urb, sc->dev,
+			    sc->recv_bulk_pipe, &sc->work_bcs,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1018: FILE: drivers/block/ub.c:942:
+				printk("%s: CSW #%d submit failed (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1019: FILE: drivers/block/ub.c:943:
+				printk("%s: CSW #%d submit failed (%d)\n",
+				   sc->name, cmd->tag, rc); /* P3 */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1024: FILE: drivers/block/ub.c:948:
+				if (cmd != &sc->top_rqs_cmd) {	/* XXX This is getting out of hand. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 33)
#1040: FILE: drivers/block/ub.c:964:
+		if (rc != cmd->len - cmd->act_len) {
[...]
+			/* P3 */ printk("ub: resid %d len %d act %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1046: FILE: drivers/block/ub.c:970:
+			/* P3 */ printk("ub: resid %d len %d act %d\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 33)
#1051: FILE: drivers/block/ub.c:975:
+		if (bcs->Signature != cpu_to_le32(US_BULK_CS_SIGN) &&
[...]
+			/* P3 */ printk("ub: signature 0x%x\n", bcs->Signature);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1054: FILE: drivers/block/ub.c:978:
+			/* P3 */ printk("ub: signature 0x%x\n", bcs->Signature);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 33)
#1058: FILE: drivers/block/ub.c:982:
+		if (bcs->Tag != cmd->tag) {
+			/* P3 */ printk("ub: tag orig 0x%x reply 0x%x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1059: FILE: drivers/block/ub.c:983:
+			/* P3 */ printk("ub: tag orig 0x%x reply 0x%x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1072: FILE: drivers/block/ub.c:996:
+			/* P3 */ printk("ub: status PHASE\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1075: FILE: drivers/block/ub.c:999:
+			printk(KERN_INFO "%s: unknown CSW status 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: drivers/block/ub.c:1000:
+			printk(KERN_INFO "%s: unknown CSW status 0x%x\n",
+			    sc->name, bcs->Status);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: drivers/block/ub.c:1013:
+^I^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1107: FILE: drivers/block/ub.c:1031:
+		printk(KERN_WARNING "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#1108: FILE: drivers/block/ub.c:1032:
+		printk(KERN_WARNING "%s: "
+		    "wrong command state %d on device %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1135: FILE: drivers/block/ub.c:1059:
+	usb_fill_bulk_urb(&sc->work_urb, sc->dev, sc->recv_bulk_pipe,
+	    &sc->work_bcs, US_BULK_CS_WRAP_LEN,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1142: FILE: drivers/block/ub.c:1066:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1143: FILE: drivers/block/ub.c:1067:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_ATOMIC)) != 0) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1145: FILE: drivers/block/ub.c:1069:
+		printk("ub: CSW #%d submit failed (%d)\n", cmd->tag, rc); /* P3 */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1189: FILE: drivers/block/ub.c:1113:
+	if ((rc = ub_submit_scsi(sc, scmd)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1190: FILE: drivers/block/ub.c:1114:
+		printk(KERN_NOTICE "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#1191: FILE: drivers/block/ub.c:1115:
+		printk(KERN_NOTICE "%s: "
+		    "unable to submit sense for device %u (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: drivers/block/ub.c:1141:
+static int ub_submit_clear_stall(struct ub_dev *sc, struct ub_scsi_cmd *cmd,
+    int stalled_pipe)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: drivers/block/ub.c:1141:
+    int stalled_pipe)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1223: FILE: drivers/block/ub.c:1147:
+	if (usb_pipein (stalled_pipe))

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#1227: FILE: drivers/block/ub.c:1151:
+	cr->bRequestType = USB_RECIP_ENDPOINT;

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#1228: FILE: drivers/block/ub.c:1152:
+	cr->bRequest = USB_REQ_CLEAR_FEATURE;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#1229: FILE: drivers/block/ub.c:1153:
+	cr->wValue = cpu_to_le16(USB_ENDPOINT_HALT);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#1230: FILE: drivers/block/ub.c:1154:
+	cr->wIndex = cpu_to_le16(endp);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#1231: FILE: drivers/block/ub.c:1155:
+	cr->wLength = cpu_to_le16(0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: drivers/block/ub.c:1158:
+	usb_fill_control_urb(&sc->work_urb, sc->dev, sc->send_ctrl_pipe,
+	    (unsigned char*) cr, NULL, 0,

CHECK:SPACING: No space is necessary after a cast
#1234: FILE: drivers/block/ub.c:1158:
+	    (unsigned char*) cr, NULL, 0,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1234: FILE: drivers/block/ub.c:1158:
+	    (unsigned char*) cr, NULL, 0,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1254: FILE: drivers/block/ub.c:1178:
+		printk(KERN_WARNING "%s: sense done while idle\n", sc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1259: FILE: drivers/block/ub.c:1183:
+		printk(KERN_WARNING "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#1260: FILE: drivers/block/ub.c:1184:
+		printk(KERN_WARNING "%s: "
+		    "sense done with bad cmd state %d on device %u\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1268: FILE: drivers/block/ub.c:1192:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <usb_stor_Bulk_max_lun>
#1270: FILE: drivers/block/ub.c:1194:
+int usb_stor_Bulk_max_lun(struct us_data *us)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1276: FILE: drivers/block/ub.c:1200:
+^I^I^I^I US_BULK_GET_MAX_LUN, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: drivers/block/ub.c:1200:
+	result = usb_stor_control_msg(us, us->recv_ctrl_pipe,
+				 US_BULK_GET_MAX_LUN, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: drivers/block/ub.c:1201:
+^I^I^I^I USB_DIR_IN | USB_TYPE_CLASS | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: drivers/block/ub.c:1205:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1292: FILE: drivers/block/ub.c:1216:
+^IUS_DEBUGP("GetMaxLUN command result is %d, data is %d\n", $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1309: FILE: drivers/block/ub.c:1233:
+{
+

WARNING:TYPO_SPELLING: 'funcion' may be misspelled - perhaps 'function'?
#1337: FILE: drivers/block/ub.c:1261:
+ * The open funcion.
             ^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1341: FILE: drivers/block/ub.c:1265:
+static int ub_bd_open(struct inode *inode, struct file *filp)
                                                         ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1348: FILE: drivers/block/ub.c:1272:
+	if ((sc = disk->private_data) == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1381: FILE: drivers/block/ub.c:1305:
+static int ub_bd_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1398: FILE: drivers/block/ub.c:1322:
+static int ub_bd_ioctl(struct inode *inode, struct file *filp,
                                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: drivers/block/ub.c:1323:
+static int ub_bd_ioctl(struct inode *inode, struct file *filp,
+    unsigned int cmd, unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: drivers/block/ub.c:1323:
+    unsigned int cmd, unsigned long arg)$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1405: FILE: drivers/block/ub.c:1329:
+#if 0

WARNING:TYPO_SPELLING: 'Bizzare' may be misspelled - perhaps 'Bizarre'?
#1408: FILE: drivers/block/ub.c:1332:
+		if (usermem == NULL)		// XXX Bizzare. Why?
 		                    		       ^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!usermem"
#1408: FILE: drivers/block/ub.c:1332:
+		if (usermem == NULL)		// XXX Bizzare. Why?

CHECK:SPACING: No space is necessary after a cast
#1411: FILE: drivers/block/ub.c:1335:
+		geom.heads = (u8) port->dev_geom_head;

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: drivers/block/ub.c:1336:
+		geom.sectors = (u8) port->dev_geom_sect;

WARNING:SPACING: space prohibited before semicolon
#1420: FILE: drivers/block/ub.c:1344:
+	default: ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1420: FILE: drivers/block/ub.c:1344:
+	default: ;

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#1420: FILE: drivers/block/ub.c:1344:
+	default: ;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1443: FILE: drivers/block/ub.c:1367:
+	printk(KERN_INFO "%s: device %u capacity nsec %ld bsize %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: drivers/block/ub.c:1368:
+	printk(KERN_INFO "%s: device %u capacity nsec %ld bsize %u\n",
+	    sc->name, sc->dev->devnum, sc->capacity.nsec, sc->capacity.bsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1478: FILE: drivers/block/ub.c:1402:
+		/* P3 */ printk("%s: made changed\n", sc->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: drivers/block/ub.c:1407:
+	/* P3 */ printk("%s: %s changed\n", sc->name,

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1484: FILE: drivers/block/ub.c:1408:
+	    sc->changed? "is": "was not");
 	               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1484: FILE: drivers/block/ub.c:1408:
+	    sc->changed? "is": "was not");
 	                     ^

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#1488: FILE: drivers/block/ub.c:1412:
+static struct block_device_operations ub_bd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1503: FILE: drivers/block/ub.c:1427:
+	struct completion *cop = cmd->back;
+	complete(cop);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1520: FILE: drivers/block/ub.c:1444:
+	if ((cmd = kmalloc(ALLOC_SIZE, GFP_KERNEL)) == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1538: FILE: drivers/block/ub.c:1462:
+		printk("ub: testing ready: submit error (%d)\n", rc); /* P3 */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1569: FILE: drivers/block/ub.c:1493:
+	if ((cmd = kmalloc(ALLOC_SIZE, GFP_KERNEL)) == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1590: FILE: drivers/block/ub.c:1514:
+		printk("ub: reading capacity: submit error (%d)\n", rc); /* P3 */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1597: FILE: drivers/block/ub.c:1521:
+		printk("ub: reading capacity: error %d\n", cmd->error); /* P3 */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1602: FILE: drivers/block/ub.c:1526:
+		printk("ub: reading capacity: size %d\n", cmd->act_len); /* P3 */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1611: FILE: drivers/block/ub.c:1535:
+	case 512:	shift = 0;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1612: FILE: drivers/block/ub.c:1536:
+	case 1024:	shift = 1;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1613: FILE: drivers/block/ub.c:1537:
+	case 2048:	shift = 2;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1614: FILE: drivers/block/ub.c:1538:
+	case 4096:	shift = 3;	break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1616: FILE: drivers/block/ub.c:1540:
+		printk("ub: Bad sector size %u\n", bsize); /* P3 */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1639: FILE: drivers/block/ub.c:1563:
+	struct completion *cop = urb->context;
+	complete(cop);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1655: FILE: drivers/block/ub.c:1579:
+	if (usb_pipein (stalled_pipe))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: drivers/block/ub.c:1590:
+	usb_fill_control_urb(&sc->work_urb, sc->dev, sc->send_ctrl_pipe,
+	    (unsigned char*) cr, NULL, 0,

CHECK:SPACING: No space is necessary after a cast
#1666: FILE: drivers/block/ub.c:1590:
+	    (unsigned char*) cr, NULL, 0,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1666: FILE: drivers/block/ub.c:1590:
+	    (unsigned char*) cr, NULL, 0,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1673: FILE: drivers/block/ub.c:1597:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_KERNEL)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1674: FILE: drivers/block/ub.c:1598:
+		printk(KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1692: FILE: drivers/block/ub.c:1616:
+static int ub_get_pipes(struct ub_dev *sc, struct usb_device *dev,
+    struct usb_interface *intf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1692: FILE: drivers/block/ub.c:1616:
+    struct usb_interface *intf)$

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#1705: FILE: drivers/block/ub.c:1629:
+	for (i = 0; i < altsetting->desc.bNumEndpoints; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#1709: FILE: drivers/block/ub.c:1633:
+		if ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#1712: FILE: drivers/block/ub.c:1636:
+			if (ep->bEndpointAddress & USB_DIR_IN)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#1719: FILE: drivers/block/ub.c:1643:
+	if (ep_in == NULL || ep_out == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_out"
#1719: FILE: drivers/block/ub.c:1643:
+	if (ep_in == NULL || ep_out == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1720: FILE: drivers/block/ub.c:1644:
+		printk(KERN_NOTICE "%s: device %u failed endpoint check\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1721: FILE: drivers/block/ub.c:1645:
+		printk(KERN_NOTICE "%s: device %u failed endpoint check\n",
+		    sc->name, sc->dev->devnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: drivers/block/ub.c:1653:
+	sc->send_bulk_pipe = usb_sndbulkpipe(dev,
+		ep_out->bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1730: FILE: drivers/block/ub.c:1654:
+^Isc->recv_bulk_pipe = usb_rcvbulkpipe(dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1731: FILE: drivers/block/ub.c:1655:
+	sc->recv_bulk_pipe = usb_rcvbulkpipe(dev, 
+		ep_in->bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1741: FILE: drivers/block/ub.c:1665:
+static int ub_probe(struct usb_interface *intf,
+    const struct usb_device_id *dev_id)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1741: FILE: drivers/block/ub.c:1665:
+    const struct usb_device_id *dev_id)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1749: FILE: drivers/block/ub.c:1673:
+	if ((sc = kmalloc(sizeof(struct ub_dev), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sc)...) over kmalloc(sizeof(struct ub_dev)...)
#1749: FILE: drivers/block/ub.c:1673:
+	if ((sc = kmalloc(sizeof(struct ub_dev), GFP_KERNEL)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1758: FILE: drivers/block/ub.c:1682:
+	if ((sc->id = ub_id_get()) == -1)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1810: FILE: drivers/block/ub.c:1734:
+	printk(KERN_INFO "%s: device %u capacity nsec %ld bsize %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1811: FILE: drivers/block/ub.c:1735:
+	printk(KERN_INFO "%s: device %u capacity nsec %ld bsize %u\n",
+	    sc->name, sc->dev->devnum, sc->capacity.nsec, sc->capacity.bsize);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1817: FILE: drivers/block/ub.c:1741:
+	if ((disk = alloc_disk(UB_MINORS_PER_MAJOR)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1829: FILE: drivers/block/ub.c:1753:
+	if ((q = blk_init_queue(ub_bd_rq_fn, &sc->lock)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1834: FILE: drivers/block/ub.c:1758:
+        // blk_queue_bounce_limit(q, hba[i]->pdev->dma_mask);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'paranoya' may be misspelled - perhaps 'paranoia'?
#1914: FILE: drivers/block/ub.c:1838:
+	 * of paranoya is too much.
 	      ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1925: FILE: drivers/block/ub.c:1849:
+		printk(KERN_WARNING "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#1926: FILE: drivers/block/ub.c:1850:
+		printk(KERN_WARNING "%s: "
+		    "command is active after disconnect, status %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1930: FILE: drivers/block/ub.c:1854:
+		printk(KERN_WARNING "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#1931: FILE: drivers/block/ub.c:1855:
+		printk(KERN_WARNING "%s: "
+		    "URB is active after disconnect\n", sc->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1965: FILE: drivers/block/ub.c:1889:
+	/* P3 */ printk("ub: sizeof ub_scsi_cmd %u ub_dev %u\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1968: FILE: drivers/block/ub.c:1892:
+	if ((rc = register_blkdev(UB_MAJOR, DRV_NAME)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1972: FILE: drivers/block/ub.c:1896:
+	if ((rc = usb_register(&ub_driver)) != 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 101 warnings, 64 checks, 1977 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
