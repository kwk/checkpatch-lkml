WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -aur linux-2.6.0-test5-bk6/include/asm-alpha/topology.h linux-2.6.0-test5-bk6-caliban/include/asm-alpha/topology.h

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#43: FILE: include/asm-alpha/topology.h:19:
+	BUG_ON(node < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#56: FILE: include/asm-arm/arch-ebsa285/io.h:30:
+	BUG_ON(a <= 0xc0000000 || a >= 0xe0000000);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#64: FILE: include/asm-arm/arch-ebsa285/io.h:36:
+	BUG_ON(a >= 16*1048576);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#64: FILE: include/asm-arm/arch-ebsa285/io.h:36:
+	BUG_ON(a >= 16*1048576);
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#77: FILE: include/asm-arm/arch-nexuspci/io.h:31:
+	BUG_ON(a >= 16*1048576);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#77: FILE: include/asm-arm/arch-nexuspci/io.h:31:
+	BUG_ON(a >= 16*1048576);
 	              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: include/asm-mips/dma-mapping.h:127:
+		BUG_ON(!sg->page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#100: FILE: include/asm-mips/dma-mapping.h:141:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: include/asm-mips/dma-mapping.h:154:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#120: FILE: include/asm-mips/dma-mapping.h:168:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: include/asm-mips/pci.h:116:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#146: FILE: include/asm-parisc/mmu_context.h:22:
+	BUG_ON(atomic_read(&mm->mm_users) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: include/asm-parisc/mmu_context.h:66:
+	BUG_ON(next == &init_mm); /* Should never happen */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: include/asm-parisc/tlbflush.h:29:
+	BUG_ON(mm == &init_mm); /* Should never happen */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: include/asm-ppc/highmem.h:66:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: include/asm-ppc/highmem.h:90:
+	BUG_ON(!pte_none(*(kmap_pte+idx)));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: include/asm-ppc/highmem.h:90:
+	BUG_ON(!pte_none(*(kmap_pte+idx)));
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#200: FILE: include/asm-ppc/highmem.h:109:
+	BUG_ON(vaddr != KMAP_FIX_BEGIN + idx * PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: include/asm-ppc/pci.h:108:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: include/asm-ppc/pci.h:136:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: include/asm-ppc/pci.h:160:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: include/asm-ppc64/pci.h:65:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: include/asm-ppc64/pci.h:73:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: include/asm-ppc64/topology.h:16:
+	BUG_ON(node == -1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: include/asm-s390/idals.h:226:
+	BUG_ON(count > ib->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: include/asm-s390/idals.h:246:
+	BUG_ON(count > ib->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: include/asm-sh/spinlock.h:51:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#305: FILE: include/asm-sh/spinlock.h:51:
+	BUG_ON(!spin_is_locked(lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#318: FILE: include/asm-sparc/highmem.h:60:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: include/asm-sparc/highmem.h:68:
+	BUG_ON(in_interrupt());

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: include/asm-sparc64/floppy.h:335:
+^IBUG_ON((NULL == sun_pci_dma_pending.buf) ^I||$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: include/asm-sparc64/floppy.h:335:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#340: FILE: include/asm-sparc64/floppy.h:335:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: include/asm-sparc64/floppy.h:336:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||
 	    (0	  == sun_pci_dma_pending.len) 	||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#344: FILE: include/asm-sparc64/floppy.h:337:
+	    (0	  == sun_pci_dma_pending.direction));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: include/asm-sparc64/floppy.h:354:
+	BUG_ON(ebus_dma_request(&sun_pci_fd_ebus_dma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: include/asm-sparc64/floppy.h:355:
+	BUG_ON(ebus_dma_request(&sun_pci_fd_ebus_dma,
 			     sun_pci_dma_current.addr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: include/asm-sparc64/tlbflush.h:96:
+	BUG_ON(s > e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: include/asm-x86_64/pgalloc.h:27:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#385: FILE: include/asm-x86_64/pgalloc.h:27:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: include/asm-x86_64/pgalloc.h:43:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: include/asm-x86_64/pgalloc.h:43:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: include/asm-x86_64/pgalloc.h:65:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#405: FILE: include/asm-x86_64/pgalloc.h:65:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: include/asm-x86_64/spinlock.h:73:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: include/asm-x86_64/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#421: FILE: include/asm-x86_64/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: include/asm-x86_64/spinlock.h:92:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: include/asm-x86_64/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#434: FILE: include/asm-x86_64/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: include/asm-x86_64/spinlock.h:173:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: include/asm-x86_64/spinlock.h:181:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334789.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 45 warnings, 8 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334789.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
