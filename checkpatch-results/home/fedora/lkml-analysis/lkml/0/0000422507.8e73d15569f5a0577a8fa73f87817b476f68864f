WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#92: FILE: arch/i386/kernel/i387.c:552:
+		if (tsk == current)
+		       unlazy_fpu(tsk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#99: FILE: arch/i386/kernel/i387.c:559:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#105: FILE: arch/i386/kernel/i387.c:565:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: arch/i386/kernel/process.c:377:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/i386/kernel/process.c:383:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#130: FILE: arch/i386/kernel/process.c:385:
+		((unsigned long)tsk->thread_info+THREAD_SIZE - sizeof(ptregs));
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: arch/ia64/kernel/process.c:389:
+do_dump_fpu (struct unw_frame_info *info, void *arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#160: FILE: arch/ia64/kernel/process.c:395:
+ia64_elf_core_copy_regs (struct pt_regs *pt, elf_gregset_t dst)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: arch/ia64/kernel/process.c:401:
+dump_fpu (struct pt_regs *pt, elf_fpregset_t dst)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#173: FILE: arch/ia64/kernel/process.c:408:
+do_copy_task_regs (struct task_struct *task, struct unw_frame_info *info, void *arg)

CHECK:SPACING: No space is necessary after a cast
#190: FILE: arch/ia64/kernel/process.c:429:
+	ia64_peek(task, info->sw, urbs_end, (long) ia64_rse_rnat_addr((long *) urbs_end),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: arch/ia64/kernel/process.c:478:
+do_dump_task_fpu (struct task_struct *task, struct unw_frame_info *info, void *arg)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#212: FILE: arch/ia64/kernel/process.c:495:
+		memcpy(dst + 32, task->thread.fph, 96*16);
 		                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#222: FILE: arch/ia64/kernel/process.c:502:
+	if(current == task) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#225: FILE: arch/ia64/kernel/process.c:505:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: arch/ia64/kernel/process.c:505:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: arch/ia64/kernel/process.c:506:
+^I^Imemset(&tcore_info, 0, sizeof(tcore_info));^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: arch/ia64/kernel/process.c:514:
+int dump_task_fpu (struct task_struct *task, elf_fpregset_t *dst)

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: arch/ia64/kernel/process.c:518:
+	if(current == task) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#245: FILE: arch/ia64/kernel/process.c:521:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#245: FILE: arch/ia64/kernel/process.c:521:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: arch/ia64/kernel/process.c:522:
+^I^Imemset(&tcore_info, 0, sizeof(tcore_info));^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: arch/ia64/kernel/process.c:527:
+^Ireturn 1; $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#330: FILE: fs/binfmt_elf.c:996:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#330: FILE: fs/binfmt_elf.c:996:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#346: FILE: fs/binfmt_elf.c:1012:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#359: FILE: fs/binfmt_elf.c:1025:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: fs/binfmt_elf.c:1027:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/binfmt_elf.c:1028:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, 
+		unsigned int sz, void *data)

WARNING:RETURN_VOID: void function return statements are not generally useful
#369: FILE: fs/binfmt_elf.c:1035:
+	return;
+}

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#373: FILE: fs/binfmt_elf.c:1039:
+ * which need to be filled up seperately.
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: fs/binfmt_elf.c:1041:
+static inline void fill_prstatus(struct elf_prstatus *prstatus, struct task_struct *p, long signr) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#377: FILE: fs/binfmt_elf.c:1043:
+	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: fs/binfmt_elf.c:1059:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#399: FILE: fs/binfmt_elf.c:1065:
+		len = ELF_PRARGSZ-1;
 		                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: fs/binfmt_elf.c:1067:
+	copy_from_user(&psinfo->pr_psargs,
+		      (const char *)p->mm->arg_start, len);

ERROR:SPACING: space required before the open parenthesis '('
#402: FILE: fs/binfmt_elf.c:1068:
+	for(i = 0; i < len; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: fs/binfmt_elf.c:1087:
+^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#423: FILE: fs/binfmt_elf.c:1089:
+	return;
+}

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#427: FILE: fs/binfmt_elf.c:1093:
+struct elf_thread_status
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#443: FILE: fs/binfmt_elf.c:1109:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: fs/binfmt_elf.c:1109:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: fs/binfmt_elf.c:1109:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#445: FILE: fs/binfmt_elf.c:1111:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: fs/binfmt_elf.c:1124:
+^Ielf_core_copy_task_regs(p, &t->prstatus.pr_reg);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: fs/binfmt_elf.c:1125:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->prstatus
#460: FILE: fs/binfmt_elf.c:1126:
+	fill_note(&t->notes[0], "CORE", NT_PRSTATUS, sizeof(t->prstatus), &(t->prstatus));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#464: FILE: fs/binfmt_elf.c:1130:
+	if ((t->prstatus.pr_fpvalid = elf_core_copy_task_fpregs(p, &t->fpu))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->fpu
#465: FILE: fs/binfmt_elf.c:1131:
+		fill_note(&t->notes[1], "CORE", NT_PRFPREG, sizeof(t->fpu), &(t->fpu));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: fs/binfmt_elf.c:1142:
+#endif^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: fs/binfmt_elf.c:1169:
+ ^Istruct task_struct *g, *p;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: fs/binfmt_elf.c:1169:
+ ^Istruct task_struct *g, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: fs/binfmt_elf.c:1169:
+ ^Istruct task_struct *g, *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: fs/binfmt_elf.c:1170:
+ ^ILIST_HEAD(thread_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: fs/binfmt_elf.c:1170:
+ ^ILIST_HEAD(thread_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: fs/binfmt_elf.c:1170:
+ ^ILIST_HEAD(thread_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: fs/binfmt_elf.c:1171:
+ ^Istruct list_head *t;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: fs/binfmt_elf.c:1171:
+ ^Istruct list_head *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: fs/binfmt_elf.c:1171:
+ ^Istruct list_head *t;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: fs/binfmt_elf.c:1177:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: fs/binfmt_elf.c:1179:
+^I * $

WARNING:TYPO_SPELLING: 'proceses' may be misspelled - perhaps 'processes'?
#528: FILE: fs/binfmt_elf.c:1180:
+	 * This because those proceses that could possibly 
 	                      ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: fs/binfmt_elf.c:1180:
+^I * This because those proceses that could possibly $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: fs/binfmt_elf.c:1189:
+  ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: fs/binfmt_elf.c:1189:
+  ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: fs/binfmt_elf.c:1189:
+  ^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: fs/binfmt_elf.c:1193:
+		do_each_thread(g,p)
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: fs/binfmt_elf.c:1196:
+				int sz = elf_dump_thread_status(signr, p, &thread_list);
+				if (!sz) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#551: FILE: fs/binfmt_elf.c:1196:
+				if (!sz) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#554: FILE: fs/binfmt_elf.c:1199:
+				} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: fs/binfmt_elf.c:1202:
+		while_each_thread(g,p);
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: fs/binfmt_elf.c:1210:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#597: FILE: fs/binfmt_elf.c:1214:
+	fill_elf_header(&elf, segs+1); /* including notes section*/
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: fs/binfmt_elf.c:1232:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: fs/binfmt_elf.c:1237:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: fs/binfmt_elf.c:1237:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: fs/binfmt_elf.c:1238:
+  ^I/* Try to dump the FPU. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#665: FILE: fs/binfmt_elf.c:1238:
+  ^I/* Try to dump the FPU. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: fs/binfmt_elf.c:1238:
+  ^I/* Try to dump the FPU. */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#666: FILE: fs/binfmt_elf.c:1239:
+	if ((prstatus.pr_fpvalid = elf_core_copy_task_fpregs(current, &fpu)))

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#676: FILE: fs/binfmt_elf.c:1249:
+	numnote --;
 	        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: fs/binfmt_elf.c:1250:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#678: FILE: fs/binfmt_elf.c:1251:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: fs/binfmt_elf.c:1251:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: fs/binfmt_elf.c:1259:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: fs/binfmt_elf.c:1292:
+ ^I/* write out the notes section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#708: FILE: fs/binfmt_elf.c:1292:
+ ^I/* write out the notes section */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: fs/binfmt_elf.c:1292:
+ ^I/* write out the notes section */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: fs/binfmt_elf.c:1300:
+		struct elf_thread_status *tmp = list_entry(t, struct elf_thread_status, list);
+		for (i = 0; i < tmp->num_notes; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: fs/binfmt_elf.c:1304:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: fs/binfmt_elf.c:1304:
+ $

ERROR:SPACING: space required before the open parenthesis '('
#745: FILE: fs/binfmt_elf.c:1348:
+	while(!list_empty(&thread_list)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: fs/binfmt_elf.c:1350:
+		struct list_head *tmp = thread_list.next;
+		list_del(tmp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#763: FILE: fs/exec.c:1212:
+static void zap_threads (struct mm_struct *mm)

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#768: FILE: fs/exec.c:1217:
+	yield();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#771: FILE: fs/exec.c:1220:
+	do_each_thread(g,p)
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#774: FILE: fs/exec.c:1223:
+	while_each_thread(g,p);
 	                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: fs/exec.c:1257:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#855: FILE: include/linux/elfcore.h:94:
+	BUG_ON(sizeof(*elfregs) != sizeof(*regs));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#860: FILE: include/linux/elfcore.h:99:
+static inline int elf_core_copy_task_regs(struct task_struct *t, elf_gregset_t* elfregs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: include/linux/elfcore.h:102:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#869: FILE: include/linux/elfcore.h:108:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#869: FILE: include/linux/elfcore.h:108:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#889: FILE: include/linux/elfcore.h:128:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#918: FILE: include/linux/sched.h:550:
+extern void force_sig_specific(int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#918: FILE: include/linux/sched.h:550:
+extern void force_sig_specific(int, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#918: FILE: include/linux/sched.h:550:
+extern void force_sig_specific(int, struct task_struct *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#928: FILE: include/asm-ia64/elf.h:68:
+typedef unsigned long elf_fpxregset_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#936: FILE: include/asm-ia64/elf.h:76:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#946: FILE: include/asm-ia64/elf.h:96:
+extern int dump_task_regs(struct task_struct *, elf_gregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#946: FILE: include/asm-ia64/elf.h:96:
+extern int dump_task_regs(struct task_struct *, elf_gregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_gregset_t *' should also have an identifier name
#946: FILE: include/asm-ia64/elf.h:96:
+extern int dump_task_regs(struct task_struct *, elf_gregset_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#947: FILE: include/asm-ia64/elf.h:97:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#947: FILE: include/asm-ia64/elf.h:97:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#947: FILE: include/asm-ia64/elf.h:97:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_fpregset_t *' should also have an identifier name
#947: FILE: include/asm-ia64/elf.h:97:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#952: FILE: include/asm-ia64/elf.h:102:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#962: FILE: include/asm-i386/elf.h:10:
+#include <asm/processor.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#970: FILE: include/asm-i386/elf.h:63:
+#define savesegment(seg,value) \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#970: FILE: include/asm-i386/elf.h:63:
+#define savesegment(seg,value) \
+	asm volatile("movl %%" #seg ",%0":"=m" (*(int *)&(value)))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#971: FILE: include/asm-i386/elf.h:64:
+	asm volatile("movl %%" #seg ",%0":"=m" (*(int *)&(value)))
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#983: FILE: include/asm-i386/elf.h:79:
+	savesegment(fs,pr_reg[9]);			\
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#984: FILE: include/asm-i386/elf.h:80:
+	savesegment(gs,pr_reg[10]);			\
 	              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#993: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#993: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_gregset_t *' should also have an identifier name
#993: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#994: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#994: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_fpregset_t *' should also have an identifier name
#994: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#995: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#995: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#995: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_fxsr_struct *' should also have an identifier name
#995: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: include/asm-i386/elf.h:115:
+extern void dump_smp_unlazy_fpu(void);

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#1036: FILE: kernel/exit.c:430:
+		if (atomic_read(&mm->core_waiters) ==atomic_read(&mm->mm_users))
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: kernel/exit.c:437:
+	if (mm != tsk->active_mm) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1043: FILE: kernel/exit.c:437:
+	if (mm != tsk->active_mm) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1092: FILE: kernel/signal.c:787:
+	unsigned long int flags;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1095: FILE: kernel/signal.c:790:
+	if (t->sig->action[sig-1].sa.sa_handler == SIG_IGN)
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1096: FILE: kernel/signal.c:791:
+		t->sig->action[sig-1].sa.sa_handler = SIG_DFL;
 		                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422507.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 58 warnings, 32 checks, 985 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422507.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
