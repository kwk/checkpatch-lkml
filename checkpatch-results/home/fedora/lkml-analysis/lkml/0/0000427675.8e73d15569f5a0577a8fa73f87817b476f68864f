WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This patch format is intended for GNU patch command version 2.5 or =

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	           ChangeSet	1.674   -> 1.675 =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	  include/linux/mm.h	1.83.1.2 -> 1.86  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#	include/asm-i386/pgalloc.h	1.16.1.2 -> 1.19  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#	       kernel/fork.c	1.70.1.15 -> 1.76  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#	            Makefile	1.293.1.22 -> 1.302 =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	include/linux/rmap-locking.h	1.1     -> 1.2   =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#	         init/main.c	1.64.1.6 -> 1.69  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#	       mm/swapfile.c	1.54.1.2 -> 1.58  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	           fs/exec.c	1.45.1.4 -> 1.49  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	         mm/memory.c	1.84.1.6 -> 1.92  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	include/asm-generic/rmap.h	1.2.1.1 -> 1.6   =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	include/linux/page-flags.h	1.24.1.1 -> 1.27  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	include/asm-i386/pgtable.h	1.17.1.3 -> 1.20  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	           mm/rmap.c	1.12.1.4 -> 1.20  =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# 02/10/02	dmc@baldur.austin.ibm.com	1.663.2.2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# Check in working snapshot

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# 02/10/02	dmc@baldur.austin.ibm.com	1.675

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# Merge baldur.austin.ibm.com:/home/dmc/linux/bk/linux-2.5

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# into baldur.austin.ibm.com:/home/dmc/linux/bk/linux-2.5-shpte

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#75: 
--- a/Makefile	Wed Oct  2 09:47:17 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#82: FILE: Makefile:4:
+EXTRAVERSION =3D-shpte
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#83: FILE: Makefile:4:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: include/asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: include/asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/asm-generic/rmap.h:63:
+extern void pgtable_add_rmap(struct page * page, struct mm_struct * mm, =

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: include/asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#144: FILE: include/asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'm' should also have an identifier name
#144: FILE: include/asm-generic/rmap.h:64:
+extern void pgtable_add_rmap_locked(struct page * page, struct mm_struct * =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: include/asm-generic/rmap.h:65:
+extern void pgtable_remove_rmap(struct page * page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/asm-generic/rmap.h:65:
+extern void pgtable_remove_rmap(struct page * page, struct mm_struct *mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: include/asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'm' should also have an identifier name
#147: FILE: include/asm-generic/rmap.h:66:
+extern void pgtable_remove_rmap_locked(struct page * page, struct =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/asm-generic/rmap.h:67:
+extern void increment_rss(struct page *ptepage);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#162: FILE: include/asm-i386/pgalloc.h:21:
+static inline void pmd_populate_rdonly(struct mm_struct *mm, pmd_t *pmd, =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#165: FILE: include/asm-i386/pgalloc.h:24:
+			(unsigned long long) PAGE_SHIFT)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#178: FILE: include/asm-i386/pgtable.h:126:
+#define _PAGE_TABLE_RDONLY	(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED | =

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#191: FILE: include/asm-i386/pgtable.h:188:
+#define	pmd_bad(x)	((pmd_val(x) & (~PAGE_MASK & ~_PAGE_USER & ~_PAGE_RW)) =

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#205: FILE: include/asm-i386/pgtable.h:214:
+static inline pmd_t pmd_wrprotect(pmd_t pmd)	{ (pmd).pmd &=3D ~_PAGE_RW; =

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#205: FILE: include/asm-i386/pgtable.h:214:
+static inline pmd_t pmd_wrprotect(pmd_t pmd)	{ (pmd).pmd &=3D ~_PAGE_RW; =
                                             	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: include/asm-i386/pgtable.h:270:
+	((pte_t *)kmap_atomic(__page,KM_PTE0) + __pte_offset(address))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: include/asm-i386/pgtable.h:272:
+	((pte_t *)kmap_atomic(__page,KM_PTE1) + __pte_offset(address))
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#266: FILE: kernel/fork.c:208:
+	pmd_t *prev_pmd =3D 0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#275: FILE: kernel/fork.c:271:
+		retval =3D share_page_range(mm, current->mm, tmp, &prev_pmd);
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#329: FILE: mm/memory.c:108:
+	ptepage =3D pmd_page(*dir);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#334: FILE: mm/memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#334: FILE: mm/memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#334: FILE: mm/memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#334: FILE: mm/memory.c:111:
+	if (page_count(ptepage) =3D=3D 1) {
+		dec_page_state(nr_page_table_pages);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#345: FILE: mm/memory.c:154:
 }
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#381: FILE: mm/memory.c:184:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#383: FILE: mm/memory.c:186:
+	if (((vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D VM_MAYWRITE)
 	                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: mm/memory.c:186:
+	if (((vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D VM_MAYWRITE)
 	                                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#383: FILE: mm/memory.c:186:
+	if (((vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D VM_MAYWRITE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#384: FILE: mm/memory.c:187:
+	if (((vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D VM_MAYWRITE)
+	    && (vma->vm_start <=3D ptepage->index)

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#384: FILE: mm/memory.c:187:
+	    && (vma->vm_start <=3D ptepage->index)
 	                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#385: FILE: mm/memory.c:188:
+	    && (vma->vm_start <=3D ptepage->index)
+	    && (vma->vm_end >=3D (ptepage->index + PGDIR_SIZE))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#385: FILE: mm/memory.c:188:
+	    && (vma->vm_end >=3D (ptepage->index + PGDIR_SIZE))) {

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#385: FILE: mm/memory.c:188:
+	    && (vma->vm_end >=3D (ptepage->index + PGDIR_SIZE))) {
 	                    ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#413: FILE: mm/memory.c:210:
+static pte_t *pte_unshare(struct mm_struct *mm, pmd_t *pmd, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#421: FILE: mm/memory.c:218:
+	oldpage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#424: FILE: mm/memory.c:221:
+	if (page_count(oldpage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#424: FILE: mm/memory.c:221:
+	if (page_count(oldpage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#424: FILE: mm/memory.c:221:
+	if (page_count(oldpage) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#432: FILE: mm/memory.c:229:
+	newpage =3D pte_alloc_one(mm, address);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#440: FILE: mm/memory.c:237:
+	if (page_count(oldpage) =3D=3D 1) {
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#440: FILE: mm/memory.c:237:
+	if (page_count(oldpage) =3D=3D 1) {
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: mm/memory.c:237:
+	if (page_count(oldpage) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#447: FILE: mm/memory.c:244:
+	base =3D addr =3D oldpage->index;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#447: FILE: mm/memory.c:244:
+	base =3D addr =3D oldpage->index;
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#448: FILE: mm/memory.c:245:
+	page_end =3D base + PGDIR_SIZE;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#449: FILE: mm/memory.c:246:
+	vma =3D find_vma(mm, base);
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#450: FILE: mm/memory.c:247:
+	if (!vma || (page_end <=3D vma->vm_start))
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: mm/memory.c:248:
+^I^IBUG(); ^I^I/* No valid pages in this pte page */$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: mm/memory.c:248:
+		BUG(); 		/* No valid pages in this pte page */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#453: FILE: mm/memory.c:250:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#453: FILE: mm/memory.c:250:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#453: FILE: mm/memory.c:250:
+	src_unshare =3D page_count(oldpage) =3D=3D 2;
 	                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#454: FILE: mm/memory.c:251:
+	dst_ptb =3D pte_page_map(newpage, base);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#455: FILE: mm/memory.c:252:
+	src_ptb =3D pte_page_map_nested(oldpage, base);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#458: FILE: mm/memory.c:255:
+		addr =3D vma->vm_start;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#461: FILE: mm/memory.c:258:
+		end =3D vma->vm_end;
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#463: FILE: mm/memory.c:260:
+		end =3D page_end;
 		    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#466: FILE: mm/memory.c:263:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#466: FILE: mm/memory.c:263:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#466: FILE: mm/memory.c:263:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#466: FILE: mm/memory.c:263:
+		unsigned int cow =3D (vma->vm_flags & (VM_SHARED | VM_MAYWRITE)) =3D=3D =
 		                                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#468: FILE: mm/memory.c:264:
+		pte_t *src_pte =3D src_ptb + __pte_offset(addr);
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#469: FILE: mm/memory.c:265:
+		pte_t *dst_pte =3D dst_ptb + __pte_offset(addr);
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#472: FILE: mm/memory.c:268:
+			pte_t pte =3D *src_pte;
 			          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#472: FILE: mm/memory.c:268:
+			pte_t pte =3D *src_pte;
 			              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#483: FILE: mm/memory.c:279:
+			page =3D pte_page(pte);
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#487: FILE: mm/memory.c:283:
+					pte =3D pte_wrprotect(pte);
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#495: FILE: mm/memory.c:291:
+					pte =3D pte_mkclean(pte);
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#496: FILE: mm/memory.c:292:
+				pte =3D pte_mkold(pte);
 				    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#504: FILE: mm/memory.c:300:
+			addr +=3D PAGE_SIZE;
 			     ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#507: FILE: mm/memory.c:303:
+		if (addr >=3D page_end)
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#510: FILE: mm/memory.c:306:
+		vma =3D vma->vm_next;
 		    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#514: FILE: mm/memory.c:310:
+		if (page_end <=3D vma->vm_start)
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#517: FILE: mm/memory.c:313:
+		addr =3D vma->vm_start;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#519: FILE: mm/memory.c:315:
+			end =3D vma->vm_end;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#521: FILE: mm/memory.c:317:
+			end =3D page_end;
 			    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: mm/memory.c:393:
+int share_page_range(struct mm_struct *dst, struct mm_struct *src,
+	struct vm_area_struct *vma, pmd_t **prev_pmd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: mm/memory.c:399:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: mm/memory.c:413:
+skip_share_pmd_range:	address =3D (address + PGDIR_SIZE) & PGDIR_MASK;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#616: FILE: mm/memory.c:413:
+skip_share_pmd_range:	address =3D (address + PGDIR_SIZE) & PGDIR_MASK;
                      	        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#694: FILE: mm/memory.c:443:
+			if (src_pmd !=3D *prev_pmd) {
 			            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#694: FILE: mm/memory.c:443:
+			if (src_pmd !=3D *prev_pmd) {
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#698: FILE: mm/memory.c:446:
+				*prev_pmd =3D src_pmd;
 				          ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#699: FILE: mm/memory.c:447:
+				dst->rss +=3D ptepage->private;
 				         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#718: FILE: mm/memory.c:449:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#718: FILE: mm/memory.c:449:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;
                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#718: FILE: mm/memory.c:449:
+skip_share_pte_range:	address =3D (address + PMD_SIZE) & PMD_MASK;
                      	        ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#719: FILE: mm/memory.c:450:
+			if (address >=3D end)
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#760: FILE: mm/memory.c:497:
+	ptepage =3D pmd_page(*pmd);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#763: FILE: mm/memory.c:500:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#763: FILE: mm/memory.c:500:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#763: FILE: mm/memory.c:500:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#763: FILE: mm/memory.c:500:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {
 		                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#763: FILE: mm/memory.c:500:
+		if ((offset =3D=3D 0) && (size =3D=3D PMD_SIZE)) {

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#766: FILE: mm/memory.c:503:
+			tlb->mm->rss -=3D ptepage->private;
 			             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#771: FILE: mm/memory.c:508:
+		ptep =3D pte_unshare(tlb->mm, pmd, address);
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#772: FILE: mm/memory.c:509:
+		ptepage =3D pmd_page(*pmd);
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#774: FILE: mm/memory.c:511:
+		ptep =3D pte_offset_map(pmd, address);
 		     ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#791: FILE: mm/memory.c:632:
 }
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#791: FILE: mm/memory.c:632:
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#793: FILE: mm/memory.c:633:
+void unmap_all_pages(mmu_gather_t *tlb, struct mm_struct *mm, unsigned =
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#794: FILE: mm/memory.c:634:
+	pgd_t * dir;

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#796: FILE: mm/memory.c:636:
+	if (address >=3D end)
 	            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#797: FILE: mm/memory.c:637:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#798: FILE: mm/memory.c:638:
+	dir =3D pgd_offset(mm, address);
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#801: FILE: mm/memory.c:641:
+		address =3D (address + PGDIR_SIZE) & PGDIR_MASK;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#801: FILE: mm/memory.c:641:
+		address =3D (address + PGDIR_SIZE) & PGDIR_MASK;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#812: FILE: mm/memory.c:1191:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#870: FILE: mm/memory.c:1375:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#934: FILE: mm/memory.c:1457:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#979: FILE: mm/memory.c:1518:
+	struct page *ptepage =3D pmd_page(*pmd);
 	                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1040: FILE: mm/memory.c:1659:
+		pte_t * pte;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1042: FILE: mm/memory.c:1661:
+		if (pte_needs_unshare(mm, vma, pmd, address, write_access))
[...]
+		else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1043: FILE: mm/memory.c:1662:
+			pte =3D pte_unshare(mm, pmd, address);
 			    ^

CHECK:BRACES: Unbalanced braces around else statement
#1044: FILE: mm/memory.c:1663:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1045: FILE: mm/memory.c:1664:
+			pte =3D pte_alloc_map(mm, pmd, address);
 			    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1073: FILE: mm/rmap.c:56:
 };
+static kmem_cache_t	*mm_chain_cache;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1081: FILE: mm/rmap.c:110:
 }
+static inline struct mm_chain *mm_chain_alloc(void)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1085: FILE: mm/rmap.c:114:
+	ret =3D kmem_cache_alloc(mm_chain_cache, GFP_ATOMIC);
 	    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: mm/rmap.c:119:
+static void mm_chain_free(struct mm_chain *mc,
+		struct mm_chain *prev_mc, struct page *page)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1093: FILE: mm/rmap.c:122:
+		prev_mc->next =3D mc->next;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1095: FILE: mm/rmap.c:124:
+		page->pte.mmchain =3D mc->next;
 		                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1107: FILE: mm/rmap.c:188:
 }
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1107: FILE: mm/rmap.c:188:
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1107: FILE: mm/rmap.c:188:
+void pgtable_add_rmap_locked(struct page * page, struct mm_struct * mm,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1114: FILE: mm/rmap.c:195:
+	extern int mem_init_done;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1120: FILE: mm/rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1120: FILE: mm/rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1120: FILE: mm/rmap.c:201:
+	BUG_ON(mm =3D=3D NULL);
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: mm/rmap.c:203:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1124: FILE: mm/rmap.c:205:
+		mc =3D mm_chain_alloc();
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1125: FILE: mm/rmap.c:206:
+		mc->mm =3D page->pte.mmdirect;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1126: FILE: mm/rmap.c:207:
+		mc->next =3D NULL;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1127: FILE: mm/rmap.c:208:
+		page->pte.mmchain =3D mc;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1132: FILE: mm/rmap.c:213:
+		mc =3D mm_chain_alloc();
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1133: FILE: mm/rmap.c:214:
+		mc->mm =3D mm;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1134: FILE: mm/rmap.c:215:
+		mc->next =3D page->pte.mmchain;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1135: FILE: mm/rmap.c:216:
+		page->pte.mmchain =3D mc;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1137: FILE: mm/rmap.c:218:
+		page->pte.mmdirect =3D mm;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1139: FILE: mm/rmap.c:220:
+		page->index =3D address & ~((PTRS_PER_PTE * PAGE_SIZE) - 1);
 		            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1143: FILE: mm/rmap.c:224:
+void pgtable_remove_rmap_locked(struct page * page, struct mm_struct *mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1145: FILE: mm/rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1145: FILE: mm/rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1145: FILE: mm/rmap.c:226:
+	struct mm_chain * mc, * prev_mc =3D NULL;
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1148: FILE: mm/rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1148: FILE: mm/rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1148: FILE: mm/rmap.c:229:
+	BUG_ON(mm =3D=3D NULL);
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1152: FILE: mm/rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {
 		                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1152: FILE: mm/rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {
 		                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1152: FILE: mm/rmap.c:233:
+		if (page->pte.mmdirect =3D=3D mm) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1153: FILE: mm/rmap.c:234:
+			page->pte.mmdirect =3D NULL;
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1155: FILE: mm/rmap.c:236:
+			page->index =3D 0;
 			            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1160: FILE: mm/rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1160: FILE: mm/rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1160: FILE: mm/rmap.c:241:
+		BUG_ON(page->pte.mmchain->next =3D=3D NULL);
 		                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1162: FILE: mm/rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1162: FILE: mm/rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1162: FILE: mm/rmap.c:243:
+		for (mc =3D page->pte.mmchain; mc; prev_mc =3D mc, mc =3D mc->next) {
 		                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1163: FILE: mm/rmap.c:244:
+			if (mc->mm =3D=3D mm) {
 			           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1163: FILE: mm/rmap.c:244:
+			if (mc->mm =3D=3D mm) {
 			              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1163: FILE: mm/rmap.c:244:
+			if (mc->mm =3D=3D mm) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1166: FILE: mm/rmap.c:247:
+				mc =3D page->pte.mmchain;
 				   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1168: FILE: mm/rmap.c:249:
+					page->pte.mmdirect =3D mc->mm;
 					                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1176: FILE: mm/rmap.c:257:
+	BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: mm/rmap.c:261:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: mm/rmap.c:261:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: mm/rmap.c:262:
+void pgtable_add_rmap(struct page * page, struct mm_struct * mm,
+			     unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1188: FILE: mm/rmap.c:269:
+void pgtable_remove_rmap(struct page * page, struct mm_struct *mm)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1211: FILE: mm/rmap.c:313:
+			int count =3D 0;
 			          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1214: FILE: mm/rmap.c:315:
+				for (i =3D 0; i < NRPTE; i++, count++) {
 				       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1218: FILE: mm/rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {
 					           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1218: FILE: mm/rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {
 					              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1218: FILE: mm/rmap.c:317:
+					if (p && p =3D=3D pte_paddr) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1219: FILE: mm/rmap.c:318:
+						printk(KERN_ERR "page_add_rmap: page %08lx (count %d), ptep %08lx, =

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1219: FILE: mm/rmap.c:318:
+						printk(KERN_ERR "page_add_rmap: page %08lx (count %d), ptep %08lx, =

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1230: FILE: mm/rmap.c:458:
 }
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1230: FILE: mm/rmap.c:458:
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1232: FILE: mm/rmap.c:459:
+static inline int pgtable_check_mlocked_mm(struct mm_struct *mm, unsigned =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1234: FILE: mm/rmap.c:461:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1237: FILE: mm/rmap.c:464:
+	vma =3D find_vma(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1239: FILE: mm/rmap.c:466:
+		ret =3D SWAP_FAIL;
 		    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1244: FILE: mm/rmap.c:471:
+	if (vma->vm_flags & VM_LOCKED) {
+		ret =3D SWAP_FAIL;
+	}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1245: FILE: mm/rmap.c:472:
+		ret =3D SWAP_FAIL;
 		    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1251: FILE: mm/rmap.c:478:
+static inline int pgtable_check_mlocked(struct page *ptepage, unsigned =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1253: FILE: mm/rmap.c:479:
+static inline int pgtable_check_mlocked(struct page *ptepage, unsigned =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1255: FILE: mm/rmap.c:481:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1258: FILE: mm/rmap.c:484:
+		ret =3D pgtable_check_mlocked_mm(ptepage->pte.mmdirect, address);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1262: FILE: mm/rmap.c:488:
+	for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1262: FILE: mm/rmap.c:488:
+	for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1264: FILE: mm/rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1264: FILE: mm/rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1264: FILE: mm/rmap.c:490:
+		BUG_ON(mc->mm =3D=3D NULL);
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1266: FILE: mm/rmap.c:492:
+		ret =3D pgtable_check_mlocked_mm(mc->mm, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1267: FILE: mm/rmap.c:493:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1276: FILE: mm/rmap.c:501:
+static inline int pgtable_unmap_one_mm(struct mm_struct *mm, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1278: FILE: mm/rmap.c:503:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1281: FILE: mm/rmap.c:506:
+	vma =3D find_vma(mm, address);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1283: FILE: mm/rmap.c:508:
+		ret =3D SWAP_FAIL;
 		    ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1296: FILE: mm/rmap.c:520:
+static inline int pgtable_unmap_one(struct page *ptepage, unsigned long =
+{

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1298: FILE: mm/rmap.c:522:
+	int ret =3D SWAP_SUCCESS;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1301: FILE: mm/rmap.c:525:
+		ret =3D pgtable_unmap_one_mm(ptepage->pte.mmdirect, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1302: FILE: mm/rmap.c:526:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1304: FILE: mm/rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1304: FILE: mm/rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {
 	                                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1304: FILE: mm/rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1304: FILE: mm/rmap.c:528:
+	} else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1305: FILE: mm/rmap.c:529:
+		ret =3D pgtable_unmap_one_mm(mc->mm, address);
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1306: FILE: mm/rmap.c:530:
+		if (ret !=3D SWAP_SUCCESS)
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1320: FILE: mm/rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1320: FILE: mm/rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)
 	                                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1320: FILE: mm/rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1320: FILE: mm/rmap.c:544:
+	else for (mc =3D ptepage->pte.mmchain; mc; mc =3D mc->next)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1337: FILE: mm/rmap.c:570:
+	struct page *ptepage =3D kmap_atomic_to_page(ptep);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1338: FILE: mm/rmap.c:571:
+	unsigned long address =3D ptep_to_address(ptep);
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1359: FILE: mm/rmap.c:574:
+	ret =3D pgtable_check_mlocked(ptepage, address);
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1360: FILE: mm/rmap.c:575:
+	if (ret !=3D SWAP_SUCCESS)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1363: FILE: mm/rmap.c:577:
+	pte =3D ptep_get_and_clear(ptep);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1368: FILE: mm/rmap.c:578:
+	ret =3D pgtable_unmap_one(ptepage, address);
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1369: FILE: mm/rmap.c:579:
+	if (ret !=3D SWAP_SUCCESS) {
 	        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1404: FILE: mm/rmap.c:715:
 {
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1405: FILE: mm/rmap.c:716:
+	mm_chain_cache =3D kmem_cache_create(	"mm_chain",
 	               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1405: FILE: mm/rmap.c:716:
+	mm_chain_cache =3D kmem_cache_create(	"mm_chain",

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1427: FILE: mm/swapfile.c:374:
+	pte_t *dir, swp_entry_t entry, struct page* page, pmd_t *pmd)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1445: FILE: mm/swapfile.c:411:
+		unuse_pte(vma, offset+address-vma->vm_start, pte, entry, page, dir);
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1445: FILE: mm/swapfile.c:411:
+		unuse_pte(vma, offset+address-vma->vm_start, pte, entry, page, dir);
 		                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 184 errors, 54 warnings, 24 checks, 1296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
