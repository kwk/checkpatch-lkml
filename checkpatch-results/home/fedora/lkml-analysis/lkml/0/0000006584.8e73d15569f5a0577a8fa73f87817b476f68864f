WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#80: FILE: drivers/char/n_r3964.c:86:
+#define TRACE(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#80: FILE: drivers/char/n_r3964.c:86:
+#define TRACE(format, args...) printk("r3964: " format "\n" , ## args)
                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#84: FILE: drivers/char/n_r3964.c:89:
+#define TRACE_M(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#84: FILE: drivers/char/n_r3964.c:89:
+#define TRACE_M(format, args...) printk("r3964: " format "\n" , ## args)
                                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: drivers/char/n_r3964.c:94:
+#define TRACE_PS(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#92: FILE: drivers/char/n_r3964.c:94:
+#define TRACE_PS(format, args...) printk("r3964: " format "\n" , ## args)
                                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#100: FILE: drivers/char/n_r3964.c:99:
+#define TRACE_PE(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#100: FILE: drivers/char/n_r3964.c:99:
+#define TRACE_PE(format, args...) printk("r3964: " format "\n" , ## args)
                                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#108: FILE: drivers/char/n_r3964.c:104:
+#define TRACE_L(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#108: FILE: drivers/char/n_r3964.c:104:
+#define TRACE_L(format, args...) printk("r3964: " format "\n" , ## args)
                                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: drivers/char/n_r3964.c:109:
+#define TRACE_Q(format, args...) printk("r3964: " format "\n" , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#116: FILE: drivers/char/n_r3964.c:109:
+#define TRACE_Q(format, args...) printk("r3964: " format "\n" , ## args)
                                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <pInfo>
#130: FILE: drivers/char/n_r3964.c:123:
+static int read_telegram(struct r3964_info *pInfo, struct pid *pid,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: drivers/char/n_r3964.c:124:
+static int read_telegram(struct r3964_info *pInfo, struct pid *pid,
+		unsigned char __user * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: drivers/char/n_r3964.c:124:
+		unsigned char __user * buf);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pBlock>
#138: FILE: drivers/char/n_r3964.c:126:
+		int error_code, struct r3964_block_header *pBlock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: drivers/char/n_r3964.c:128:
+static struct r3964_message *remove_msg(struct r3964_info *pInfo,
+		struct r3964_client_info *pClient);

CHECK:CAMELCASE: Avoid CamelCase: <pClient>
#140: FILE: drivers/char/n_r3964.c:128:
+		struct r3964_client_info *pClient);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/char/n_r3964.c:130:
+static void remove_client_block(struct r3964_info *pInfo,
+		struct r3964_client_info *pClient);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: drivers/char/n_r3964.c:135:
+		unsigned char __user * buf, size_t nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/char/n_r3964.c:137:
+static ssize_t r3964_write(struct tty_struct *tty, struct file *file,
+		const unsigned char *buf, size_t nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: drivers/char/n_r3964.c:139:
+static int r3964_ioctl(struct tty_struct *tty, struct file *file,
+		unsigned int cmd, unsigned long arg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/char/n_r3964.c:142:
+static unsigned int r3964_poll(struct tty_struct *tty, struct file *file,
+		struct poll_table_struct *wait);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#211: FILE: drivers/char/n_r3964.c:166:
+		for (j = 0; (j < 16) && (j + i < length); j++) {
+			sprintf(linebuf + 3 * j, "%02x ", block[i + j]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#255: FILE: drivers/char/n_r3964.c:191:
+		printk(KERN_ERR "r3964: error unregistering linediscipline: "

WARNING:SPLIT_STRING: quoted string split across lines
#256: FILE: drivers/char/n_r3964.c:192:
+		printk(KERN_ERR "r3964: error unregistering linediscipline: "
+				"%d\n", status);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#288: FILE: drivers/char/n_r3964.c:202:
+	printk("r3964: Philips r3964 Driver $Revision: 1.10 $\n");

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: drivers/char/n_r3964.c:202:
+	printk("r3964: Philips r3964 Driver $Revision: 1.10 $\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#302: FILE: drivers/char/n_r3964.c:216:
+		printk(KERN_ERR "r3964: error registering line discipline: "

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: drivers/char/n_r3964.c:217:
+		printk(KERN_ERR "r3964: error registering line discipline: "
+				"%d\n", status);

CHECK:CAMELCASE: Avoid CamelCase: <pHeader>
#318: FILE: drivers/char/n_r3964.c:230:
+			 struct r3964_block_header *pHeader)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pInfo->tx_last"
#346: FILE: drivers/char/n_r3964.c:238:
+	if (pInfo->tx_last == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#347: FILE: drivers/char/n_r3964.c:239:
+		pInfo->tx_first = pInfo->tx_last = pHeader;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_tx_queue', this function's name, in a string
#355: FILE: drivers/char/n_r3964.c:247:
+	TRACE_Q("add_tx_queue %p, length %d, tx_first = %p",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <pDump>
#367: FILE: drivers/char/n_r3964.c:256:
+	struct r3964_block_header *pDump;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pHeader"
#376: FILE: drivers/char/n_r3964.c:261:
+	if (pHeader == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: drivers/char/n_r3964.c:265:
+	printk("r3964: remove_from_tx_queue: %p, length %u - ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/char/n_r3964.c:266:
+	printk("r3964: remove_from_tx_queue: %p, length %u - ",
+		pHeader, pHeader->length);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#388: FILE: drivers/char/n_r3964.c:268:
+		printk("%p ", pDump);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#389: FILE: drivers/char/n_r3964.c:269:
+	printk("\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#406: FILE: drivers/char/n_r3964.c:286:
+	if (pInfo->tx_first == NULL) {
+		pInfo->tx_last = NULL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pInfo->tx_first"
#406: FILE: drivers/char/n_r3964.c:286:
+	if (pInfo->tx_first == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pInfo->rx_last"
#481: FILE: drivers/char/n_r3964.c:308:
+	if (pInfo->rx_last == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#482: FILE: drivers/char/n_r3964.c:309:
+		pInfo->rx_first = pInfo->rx_last = pHeader;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_rx_queue', this function's name, in a string
#491: FILE: drivers/char/n_r3964.c:318:
+	TRACE_Q("add_rx_queue: %p, length = %d, rx_first = %p, count = %d",

CHECK:CAMELCASE: Avoid CamelCase: <pFind>
#552: FILE: drivers/char/n_r3964.c:327:
+	struct r3964_block_header *pFind;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pHeader"
#554: FILE: drivers/char/n_r3964.c:329:
+	if (pHeader == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#568: FILE: drivers/char/n_r3964.c:343:
+		if (pInfo->rx_first == NULL) {
+			pInfo->rx_last = NULL;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pInfo->rx_first"
#568: FILE: drivers/char/n_r3964.c:343:
+		if (pInfo->rx_first == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pFind->next"
#579: FILE: drivers/char/n_r3964.c:354:
+				if (pFind->next == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#604: FILE: drivers/char/n_r3964.c:376:
+	if (tty == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#612: FILE: drivers/char/n_r3964.c:379:
+	if (tty->driver->put_char) {
+		tty->driver->put_char(tty, ch);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#625: FILE: drivers/char/n_r3964.c:389:
+	if (tty == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#632: FILE: drivers/char/n_r3964.c:392:
+	if (tty->driver->flush_chars) {
+		tty->driver->flush_chars(tty);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pInfo->state == R3964_IDLE'
#652: FILE: drivers/char/n_r3964.c:403:
+	if ((pInfo->state == R3964_IDLE) && (pInfo->tx_first != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pInfo->tx_first != NULL'
#652: FILE: drivers/char/n_r3964.c:403:
+	if ((pInfo->state == R3964_IDLE) && (pInfo->tx_first != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pInfo->tx_first"
#652: FILE: drivers/char/n_r3964.c:403:
+	if ((pInfo->state == R3964_IDLE) && (pInfo->tx_first != NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <nRetry>
#654: FILE: drivers/char/n_r3964.c:405:
+		pInfo->nRetry = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty == NULL'
#778: FILE: drivers/char/n_r3964.c:452:
+	if ((tty == NULL) || (pBlock == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pBlock == NULL'
#778: FILE: drivers/char/n_r3964.c:452:
+	if ((tty == NULL) || (pBlock == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#778: FILE: drivers/char/n_r3964.c:452:
+	if ((tty == NULL) || (pBlock == NULL)) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#778: FILE: drivers/char/n_r3964.c:452:
+	if ((tty == NULL) || (pBlock == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pBlock"
#778: FILE: drivers/char/n_r3964.c:452:
+	if ((tty == NULL) || (pBlock == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pInfo->tx_position == pBlock->length'
#801: FILE: drivers/char/n_r3964.c:475:
+	if ((pInfo->tx_position == pBlock->length) && (room >= 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'room >= 3'
#801: FILE: drivers/char/n_r3964.c:475:
+	if ((pInfo->tx_position == pBlock->length) && (room >= 3)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#804: FILE: drivers/char/n_r3964.c:478:
+		if (pInfo->flags & R3964_BCC) {
+			put_char(pInfo, pInfo->bcc);
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: drivers/char/n_r3964.c:530:
+	pBlock = kmalloc(length + sizeof(struct r3964_block_header),
+			GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pBlock"
#937: FILE: drivers/char/n_r3964.c:533:
+	if (pBlock == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <firstClient>
#953: FILE: drivers/char/n_r3964.c:549:
+	for (pClient = pInfo->firstClient; pClient; pClient = pClient->next) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1056: FILE: drivers/char/n_r3964.c:576:
+				if (pInfo->priority == R3964_SLAVE) {
+					goto start_receiving;
+				}

WARNING:SPLIT_STRING: quoted string split across lines
#1061: FILE: drivers/char/n_r3964.c:581:
+				TRACE_PE("TX_REQUEST - secondary init "
+					"conflict!? Switching to SLAVE mode "

WARNING:SPLIT_STRING: quoted string split across lines
#1062: FILE: drivers/char/n_r3964.c:582:
+					"conflict!? Switching to SLAVE mode "
+					"for next rx.");

WARNING:TYPO_SPELLING: 'FALLTROUGH' may be misspelled - perhaps 'FALLTHROUGH'?
#1093: FILE: drivers/char/n_r3964.c:613:
+		/* FALLTROUGH */
 		   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#1100: FILE: drivers/char/n_r3964.c:620:
+				TRACE_PE("IDLE - got STX but no space in "
+						"rx_queue!");

CHECK:CAMELCASE: Avoid CamelCase: <findClient>
#1349: FILE: drivers/char/n_r3964.c:747:
+static struct r3964_client_info *findClient(struct r3964_info *pInfo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: drivers/char/n_r3964.c:748:
+static struct r3964_client_info *findClient(struct r3964_info *pInfo,
+		struct pid *pid)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1365: FILE: drivers/char/n_r3964.c:753:
+		if (pClient->pid == pid) {
+			return pClient;
+		}

CHECK:CAMELCASE: Avoid CamelCase: <ppClient>
#1437: FILE: drivers/char/n_r3964.c:763:
+	struct r3964_client_info **ppClient;

CHECK:CAMELCASE: Avoid CamelCase: <pMsg>
#1438: FILE: drivers/char/n_r3964.c:764:
+	struct r3964_message *pMsg;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1453: FILE: drivers/char/n_r3964.c:779:
+					if (pMsg) {
+						kfree(pMsg);

WARNING:SPLIT_STRING: quoted string split across lines
#1455: FILE: drivers/char/n_r3964.c:781:
+						TRACE_M("enable_signals - msg "
+							"kfree %p", pMsg);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1465: FILE: drivers/char/n_r3964.c:791:
+		return -EINVAL;
+	} else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pClient)...) over kmalloc(sizeof(struct r3964_client_info)...)
#1472: FILE: drivers/char/n_r3964.c:798:
+			pClient = kmalloc(sizeof(struct r3964_client_info),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: drivers/char/n_r3964.c:799:
+			pClient = kmalloc(sizeof(struct r3964_client_info),
+					GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pClient"
#1475: FILE: drivers/char/n_r3964.c:801:
+			if (pClient == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1496: FILE: drivers/char/n_r3964.c:821:
+			 unsigned char __user * buf)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1530: FILE: drivers/char/n_r3964.c:826:
+	if (!buf) {
+		return -EINVAL;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1535: FILE: drivers/char/n_r3964.c:831:
+	if (pClient == NULL) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pClient"
#1535: FILE: drivers/char/n_r3964.c:831:
+	if (pClient == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1542: FILE: drivers/char/n_r3964.c:838:
+		return 0;
+	} else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pMsg)...) over kmalloc(sizeof(struct r3964_message)...)
#1624: FILE: drivers/char/n_r3964.c:858:
+		pMsg = kmalloc(sizeof(struct r3964_message),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1625: FILE: drivers/char/n_r3964.c:859:
+		pMsg = kmalloc(sizeof(struct r3964_message),
+				error_code ? GFP_ATOMIC : GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1627: FILE: drivers/char/n_r3964.c:861:
+		if (pMsg == NULL) {
+			return;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMsg"
#1627: FILE: drivers/char/n_r3964.c:861:
+		if (pMsg == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pClient->last_msg"
#1639: FILE: drivers/char/n_r3964.c:873:
+		if (pClient->last_msg == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1640: FILE: drivers/char/n_r3964.c:874:
+			pClient->first_msg = pClient->last_msg = pMsg;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1648: FILE: drivers/char/n_r3964.c:882:
+		if (pBlock != NULL) {
+			pBlock->locks++;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pBlock"
#1648: FILE: drivers/char/n_r3964.c:882:
+		if (pBlock != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pClient->last_msg->msg_id == R3964_MSG_ACK'
#1653: FILE: drivers/char/n_r3964.c:887:
+		if ((pClient->last_msg->msg_id == R3964_MSG_ACK)
+		    && (pClient->last_msg->error_code == R3964_OVERFLOW)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pClient->last_msg->error_code == R3964_OVERFLOW'
#1653: FILE: drivers/char/n_r3964.c:887:
+		if ((pClient->last_msg->msg_id == R3964_MSG_ACK)
+		    && (pClient->last_msg->error_code == R3964_OVERFLOW)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1654: FILE: drivers/char/n_r3964.c:888:
+		if ((pClient->last_msg->msg_id == R3964_MSG_ACK)
+		    && (pClient->last_msg->error_code == R3964_OVERFLOW)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1667: FILE: drivers/char/n_r3964.c:901:
+	if (pClient->sig_flags & R3964_USE_SIGIO) {
+		kill_pid(pClient->pid, SIGIO, 1);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1707: FILE: drivers/char/n_r3964.c:917:
+		if (pClient->first_msg == NULL) {
+			pClient->last_msg = NULL;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pClient->first_msg"
#1707: FILE: drivers/char/n_r3964.c:917:
+		if (pClient->first_msg == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remove_client_block', this function's name, in a string
#1743: FILE: drivers/char/n_r3964.c:936:
+	TRACE_PS("remove_client_block PID %d", pid_nr(pClient->pid));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1748: FILE: drivers/char/n_r3964.c:941:
+		if (block->locks == 0) {
+			remove_from_rx_queue(pInfo, block);
+		}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pInfo)...) over kmalloc(sizeof(struct r3964_info)...)
#1829: FILE: drivers/char/n_r3964.c:960:
+	pInfo = kmalloc(sizeof(struct r3964_info), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1833: FILE: drivers/char/n_r3964.c:964:
+		printk(KERN_ERR "r3964: failed to alloc info structure\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1841: FILE: drivers/char/n_r3964.c:972:
+		printk(KERN_ERR "r3964: failed to alloc receive buffer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1851: FILE: drivers/char/n_r3964.c:982:
+		printk(KERN_ERR "r3964: failed to alloc transmit buffer\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1863: FILE: drivers/char/n_r3964.c:994:
+	pInfo->rx_first = pInfo->rx_last = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1864: FILE: drivers/char/n_r3964.c:995:
+	pInfo->tx_first = pInfo->tx_last = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <pNext>
#1924: FILE: drivers/char/n_r3964.c:1018:
+	struct r3964_client_info *pClient, *pNext;

CHECK:CAMELCASE: Avoid CamelCase: <pNextHeader>
#1926: FILE: drivers/char/n_r3964.c:1020:
+	struct r3964_block_header *pHeader, *pNextHeader;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1944: FILE: drivers/char/n_r3964.c:1038:
+			if (pMsg) {
+				kfree(pMsg);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1956: FILE: drivers/char/n_r3964.c:1050:
+	pInfo->tx_first = pInfo->tx_last = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1991: FILE: drivers/char/n_r3964.c:1070:
+			  unsigned char __user * buf, size_t nr)

CHECK:CAMELCASE: Avoid CamelCase: <theMsg>
#2019: FILE: drivers/char/n_r3964.c:1075:
+	struct r3964_client_message theMsg;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMsg"
#2029: FILE: drivers/char/n_r3964.c:1085:
+		if (pMsg == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2031: FILE: drivers/char/n_r3964.c:1087:
+			if (file->f_flags & O_NONBLOCK) {
+				return -EAGAIN;
+			}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'r3964_write', this function's name, in a string
#2141: FILE: drivers/char/n_r3964.c:1147:
+			TRACE_L(KERN_WARNING "r3964_write: truncating user "

WARNING:SPLIT_STRING: quoted string split across lines
#2142: FILE: drivers/char/n_r3964.c:1148:
+			TRACE_L(KERN_WARNING "r3964_write: truncating user "
+				"packet from %u to mtu %d", count, R3964_MTU);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2179: FILE: drivers/char/n_r3964.c:1156:
+	new_data = kmalloc(count + sizeof(struct r3964_block_header),
+			GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'r3964_write', this function's name, in a string
#2180: FILE: drivers/char/n_r3964.c:1157:
+	TRACE_M("r3964_write - kmalloc %p", new_data);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_data"
#2181: FILE: drivers/char/n_r3964.c:1158:
+	if (new_data == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2182: FILE: drivers/char/n_r3964.c:1159:
+		if (pInfo->flags & R3964_DEBUG) {
+			printk(KERN_ERR "r3964_write: no memory\n");
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2183: FILE: drivers/char/n_r3964.c:1160:
+			printk(KERN_ERR "r3964_write: no memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'r3964_write', this function's name, in a string
#2183: FILE: drivers/char/n_r3964.c:1160:
+			printk(KERN_ERR "r3964_write: no memory\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2195: FILE: drivers/char/n_r3964.c:1172:
+	if (pClient) {
+		pHeader->owner = pClient;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2201: FILE: drivers/char/n_r3964.c:1178:
+	if (pInfo->flags & R3964_DEBUG) {
+		dump_block(pHeader->data, count);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2221: FILE: drivers/char/n_r3964.c:1192:
+static int r3964_ioctl(struct tty_struct *tty, struct file *file,
+		unsigned int cmd, unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2247: FILE: drivers/char/n_r3964.c:1195:
+	struct r3964_info *pInfo = (struct r3964_info *)tty->disc_data;
+	if (pInfo == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pInfo"
#2247: FILE: drivers/char/n_r3964.c:1195:
+	if (pInfo == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2282: FILE: drivers/char/n_r3964.c:1226:
+static unsigned int r3964_poll(struct tty_struct *tty, struct file *file,
+			struct poll_table_struct *wait)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2359: FILE: drivers/char/n_r3964.c:1261:
+		if (flags == TTY_NORMAL) {
[...]
+		} else {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2365: FILE: drivers/char/n_r3964.c:1267:
+
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006584.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 57 warnings, 69 checks, 2322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006584.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
