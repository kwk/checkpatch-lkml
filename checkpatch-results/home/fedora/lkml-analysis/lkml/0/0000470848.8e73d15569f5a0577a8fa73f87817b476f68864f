WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
- Re-introduce the system bus which Patrick Mochel has previoulsy discussed.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#36: 
--- a/arch/i386/Config.help	Fri Mar  8 05:39:03 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/base/sys.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: drivers/base/sys.c:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: drivers/base/sys.c:7:
+ * This exports a 'system' bus type. $

WARNING:INDENTED_LABEL: labels should not be indented
#98: FILE: drivers/base/sys.c:19:
+       name:           "System Bus",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#99: FILE: drivers/base/sys.c:20:
+       bus_id:         "sys",
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#99: FILE: drivers/base/sys.c:20:
+       bus_id:         "sys",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: drivers/base/sys.c:23:
+int register_sys_device(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: drivers/base/sys.c:25:
+       int error = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: drivers/base/sys.c:27:
+       if (dev) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#106: FILE: drivers/base/sys.c:27:
+       if (dev) {
+               if (!dev->parent)

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: drivers/base/sys.c:28:
+               if (!dev->parent)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: drivers/base/sys.c:28:
+               if (!dev->parent)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#107: FILE: drivers/base/sys.c:28:
+               if (!dev->parent)
+                       dev->parent = &system_bus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: drivers/base/sys.c:29:
+                       dev->parent = &system_bus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: drivers/base/sys.c:29:
+                       dev->parent = &system_bus;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: drivers/base/sys.c:30:
+               error = device_register(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/base/sys.c:30:
+               error = device_register(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/base/sys.c:31:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: drivers/base/sys.c:32:
+       return error;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: drivers/base/sys.c:35:
+void unregister_sys_device(struct device * dev)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/base/sys.c:37:
+       if (dev)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#116: FILE: drivers/base/sys.c:37:
+       if (dev)
+               put_device(dev);

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: drivers/base/sys.c:38:
+               put_device(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/base/sys.c:38:
+               put_device(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/base/sys.c:43:
+       return device_register(&system_bus);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#126: FILE: drivers/base/sys.c:47:
+EXPORT_SYMBOL(register_sys_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#127: FILE: drivers/base/sys.c:48:
+EXPORT_SYMBOL(unregister_sys_device);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: drivers/base/sysdev.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#133: FILE: drivers/base/sysdev.c:2:
+ * drivers/base/sysdev.c - Populate driverfs with system devices

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: drivers/base/sysdev.c:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#153: FILE: drivers/base/sysdev.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#154: FILE: drivers/base/sysdev.c:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: drivers/base/sysdev.c:44:
+static struct node_dev * node_devs[MAX_NUMNODES];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: drivers/base/sysdev.c:46:
+static ssize_t node_show_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: drivers/base/sysdev.c:46:
+static ssize_t node_show_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: drivers/base/sysdev.c:48:
+	struct node_dev * node_dev = list_entry(dev,struct node_dev, nd_dev);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: drivers/base/sysdev.c:48:
+	struct node_dev * node_dev = list_entry(dev,struct node_dev, nd_dev);
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: drivers/base/sysdev.c:49:
+	struct node_dev * node_dev = list_entry(dev,struct node_dev, nd_dev);
+	return off ? 0 : sprintf(buf,"0x%08lx\n",node_dev->nd_cpumap);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: drivers/base/sysdev.c:49:
+	return off ? 0 : sprintf(buf,"0x%08lx\n",node_dev->nd_cpumap);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: drivers/base/sysdev.c:49:
+	return off ? 0 : sprintf(buf,"0x%08lx\n",node_dev->nd_cpumap);
 	                                        ^

WARNING:INDENTED_LABEL: labels should not be indented
#184: FILE: drivers/base/sysdev.c:53:
+	name:	"cpumap",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#185: FILE: drivers/base/sysdev.c:54:
+	mode:	S_IRUGO,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#185: FILE: drivers/base/sysdev.c:54:
+	mode:	S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#185: FILE: drivers/base/sysdev.c:54:
+	mode:	S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#186: FILE: drivers/base/sysdev.c:55:
+	show:	node_show_cpumap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#186: FILE: drivers/base/sysdev.c:55:
+	show:	node_show_cpumap,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#188: FILE: drivers/base/sysdev.c:57:
+};
+/**

WARNING:BRACES: braces {} are not necessary for single statement blocks
#199: FILE: drivers/base/sysdev.c:68:
+	if (node_devs[node]) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: drivers/base/sysdev.c:71:
+^I$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#203: FILE: drivers/base/sysdev.c:72:
+	DBG("%s: init node %d \n", __FUNCTION__, node);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#203: FILE: drivers/base/sysdev.c:72:
+	DBG("%s: init node %d \n", __FUNCTION__, node);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#204: FILE: drivers/base/sysdev.c:73:
+	if ((dev = kmalloc(sizeof(*dev), GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#205: FILE: drivers/base/sysdev.c:74:
+		DBG("%s: kmalloc failed\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/base/sysdev.c:77:
+^I$

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#229: FILE: drivers/base/sysdev.c:98:
+	int cd_cpuid;		/* The system cpuid - not persistant */
 	             		                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: drivers/base/sysdev.c:113:
+	struct cpu_dev * dev;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#246: FILE: drivers/base/sysdev.c:115:
+	DBG("%s: init cpu %d\n", __FUNCTION__, cpu);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#247: FILE: drivers/base/sysdev.c:116:
+	if ((dev = (struct cpu_dev *)kmalloc(sizeof(*dev), GFP_KERNEL)) == NULL) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#247: FILE: drivers/base/sysdev.c:116:
+	if ((dev = (struct cpu_dev *)kmalloc(sizeof(*dev), GFP_KERNEL)) == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#248: FILE: drivers/base/sysdev.c:117:
+		DBG("%s: kmalloc failed\n", __FUNCTION__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: drivers/base/sysdev.c:127:
+		int nid = _cpu_to_node(cpu);
+		dev->cd_nid = nid;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#279: FILE: drivers/base/sysdev.c:148:
+	for (cpu = 0; cpu < smp_num_cpus; cpu++) {
+		init_cpudev(cpu);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: include/asm-i386/numa_api.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: include/linux/device.h:110:
+extern int register_sys_device(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: include/linux/device.h:110:
+extern int register_sys_device(struct device * dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: include/linux/device.h:111:
+extern void unregister_sys_device(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/device.h:111:
+extern void unregister_sys_device(struct device * dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#328: FILE: include/linux/numa_api.h:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#341: FILE: include/linux/numa_api.h:14:
+#define DBG(x...) printk(x)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 39 warnings, 3 checks, 288 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
