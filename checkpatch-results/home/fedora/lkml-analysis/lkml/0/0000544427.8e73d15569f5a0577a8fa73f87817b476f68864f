WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#108: FILE: net/net_init.c:80:
+	alloc_size = sizeof (*dev) + sizeof_priv + 31;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#110: FILE: net/net_init.c:82:
+	dev = (struct net_device *) kmalloc (alloc_size, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#110: FILE: net/net_init.c:82:
+	dev = (struct net_device *) kmalloc (alloc_size, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#110: FILE: net/net_init.c:82:
+	dev = (struct net_device *) kmalloc (alloc_size, GFP_KERNEL);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#111: FILE: net/net_init.c:83:
+	if (dev == NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#111: FILE: net/net_init.c:83:
+	if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#113: FILE: net/net_init.c:85:
+		printk(KERN_ERR "alloc_dev: Unable to allocate device memory.\n");

CHECK:SPACING: No space is necessary after a cast
#120: FILE: net/net_init.c:92:
+		dev->priv = (void *) (((long)(dev + 1) + 31) & ~31);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: net/net_init.c:177:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#170: FILE: net/net_init.c:224:
+EXPORT_SYMBOL(init_etherdev);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#171: FILE: net/net_init.c:225:
+EXPORT_SYMBOL(alloc_etherdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#218: FILE: net/net_init.c:285:
+EXPORT_SYMBOL(init_fddidev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#219: FILE: net/net_init.c:286:
+EXPORT_SYMBOL(alloc_fddidev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#280: FILE: net/net_init.c:375:
+EXPORT_SYMBOL(init_hippi_dev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#282: FILE: net/net_init.c:377:
+EXPORT_SYMBOL(register_hipdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#283: FILE: net/net_init.c:378:
+EXPORT_SYMBOL(unregister_hipdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#323: FILE: net/net_init.c:581:
+EXPORT_SYMBOL(register_netdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: net/net_init.c:656:
+EXPORT_SYMBOL(tr_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#400: FILE: net/net_init.c:658:
+EXPORT_SYMBOL(alloc_trdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#401: FILE: net/net_init.c:659:
+EXPORT_SYMBOL(register_trdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: net/net_init.c:660:
+EXPORT_SYMBOL(unregister_trdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#472: FILE: net/net_init.c:734:
+EXPORT_SYMBOL(fc_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#474: FILE: net/net_init.c:736:
+EXPORT_SYMBOL(alloc_fcdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#475: FILE: net/net_init.c:737:
+EXPORT_SYMBOL(register_fcdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#476: FILE: net/net_init.c:738:
+EXPORT_SYMBOL(unregister_fcdev);

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: linux/etherdevice.h:41:
+extern struct net_device *init_etherdev(struct net_device *dev, int sizeof_priv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: linux/etherdevice.h:42:
+extern struct net_device *alloc_etherdev(int sizeof_priv);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: linux/fcdevice.h:36:
+extern struct net_device *init_fcdev(struct net_device *dev, int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: linux/fcdevice.h:37:
+extern struct net_device *alloc_fcdev(int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: linux/fcdevice.h:38:
+extern int register_fcdev(struct net_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#587: FILE: linux/fcdevice.h:39:
+extern void unregister_fcdev(struct net_device *dev);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: linux/fddidevice.h:37:
+extern struct net_device *init_fddidev(struct net_device *dev, int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: linux/fddidevice.h:38:
+extern struct net_device *alloc_fddidev(int sizeof_priv);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#622: FILE: linux/hippidevice.h:54:
+extern struct net_device *init_hippi_dev(struct net_device *dev, int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: linux/hippidevice.h:55:
+extern struct net_device *alloc_hippi_dev(int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: linux/hippidevice.h:56:
+extern int register_hipdev(struct net_device *dev);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: linux/trdevice.h:36:
+extern struct net_device *init_trdev(struct net_device *dev, int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#661: FILE: linux/trdevice.h:37:
+extern struct net_device *alloc_trdev(int sizeof_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: linux/trdevice.h:38:
+extern int register_trdev(struct net_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: linux/trdevice.h:39:
+extern void unregister_trdev(struct net_device *dev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000544427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 28 warnings, 18 checks, 504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000544427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
