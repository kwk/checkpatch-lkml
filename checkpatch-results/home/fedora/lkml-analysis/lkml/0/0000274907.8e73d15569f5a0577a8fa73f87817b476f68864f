WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
We have been working with a solution for non-intrusively trapping on lifetime

WARNING:TYPO_SPELLING: 'notfication' may be misspelled - perhaps 'notification'?
#35: 
processes/threads at the kernel level.  It would use a notfication mechanism in
                                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#115: 
--- a/Documentation/ioctl-number.txt	2004-06-14 11:24:08 -07:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: Documentation/kmonitor.txt:3:
+The kmonitor driver implements a kernel level non-intrusive $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: Documentation/kmonitor.txt:22:
+^I  * KMONITOR_PROCESS_EXIT, on one process, then we already $

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#151: FILE: Documentation/kmonitor.txt:26:
+	  * info might be usefull:
 	                  ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: Documentation/kmonitor.txt:33:
+^I  * will do cleanup when we close the file descriptor for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: Documentation/kmonitor.txt:61:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: Documentation/kmonitor.txt:62:
+^I * mknod /dev/kmonitor c 10 221 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: Documentation/kmonitor.txt:78:
+^I * NOTE: The 'type' field in the structure is actually $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: Documentation/kmonitor.txt:82:
+         *       #define KMONITOR_THREAD_CREATE 0x01 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: Documentation/kmonitor.txt:83:
+         *       #define KMONITOR_THREAD_ABORT  0x02           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: Documentation/kmonitor.txt:86:
+         *       #define KMONITOR_PROCESS_ABORT 0x10 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: Documentation/kmonitor.txt:87:
+         *       #define KMONITOR_PROCESS_EXEC  0x20 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: Documentation/kmonitor.txt:98:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: Documentation/kmonitor.txt:100:
+^I * In this very simple example all we need to do is wait $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: Documentation/kmonitor.txt:105:
+^Isigsuspend(&empty_mask);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: Documentation/kmonitor.txt:108:
+^I * kmonitor will perform a cleanup of all request a given $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: drivers/char/Kconfig:980:
+^I  The kmonitor driver implements a kernel level non-intrusive $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: drivers/char/Kconfig:983:
+^I  info see Documentation/kmonitor.txt $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#280: FILE: drivers/char/kmonitor.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: drivers/char/kmonitor.c:8:
+ * License v2.0 as published by the Free Software Foundation; $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#296: FILE: drivers/char/kmonitor.c:17:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: drivers/char/kmonitor.c:22:
+ * The kmonitor driver implements a kernel level non-intrusive $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/char/kmonitor.c:25:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#320: FILE: drivers/char/kmonitor.c:41:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#321: FILE: drivers/char/kmonitor.c:42:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/char/kmonitor.c:48:
+ * - an event mask $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/char/kmonitor.c:51:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: drivers/char/kmonitor.c:61:
+ * list of resources in each bucket, the less likely a processor will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: drivers/char/kmonitor.c:65:
+struct kmonitor_bucket $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#345: FILE: drivers/char/kmonitor.c:66:
+struct kmonitor_bucket 
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#352: FILE: drivers/char/kmonitor.c:73:
+struct kmonitor_bucket kmonitor_resources[1<<KMONITOR_BITS];
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#360: FILE: drivers/char/kmonitor.c:81:
+struct kmonitor_res
+{

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#368: FILE: drivers/char/kmonitor.c:89:
+#define to_kmonitor_res(r) \
+        container_of(r, struct kmonitor_res, rlist);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: drivers/char/kmonitor.c:90:
+        container_of(r, struct kmonitor_res, rlist);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: drivers/char/kmonitor.c:90:
+        container_of(r, struct kmonitor_res, rlist);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: drivers/char/kmonitor.c:102:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#381: FILE: drivers/char/kmonitor.c:102:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , ## arg)
                                                                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#381: FILE: drivers/char/kmonitor.c:102:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , ## arg)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#382: FILE: drivers/char/kmonitor.c:103:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#382: FILE: drivers/char/kmonitor.c:103:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, ## arg)

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: drivers/char/kmonitor.c:105:
+#define DBG(format, arg...) do {} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#384: FILE: drivers/char/kmonitor.c:105:
+#define DBG(format, arg...) do {} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#385: FILE: drivers/char/kmonitor.c:106:
+#define TRACE(arg...) do {} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#385: FILE: drivers/char/kmonitor.c:106:
+#define TRACE(arg...) do {} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: drivers/char/kmonitor.c:122:
+^I^I^I * target/monitor combination so just flip $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: drivers/char/kmonitor.c:123:
+^I^I^I * a bit in the event mask indicating that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: drivers/char/kmonitor.c:124:
+^I^I^I * this monitor also wants to be notified $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: drivers/char/kmonitor.c:132:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: drivers/char/kmonitor.c:137:
+^I * This is the first event registered for this target $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: drivers/char/kmonitor.c:138:
+^I * on this monitor.  Allocate a new resource from our $

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: drivers/char/kmonitor.c:141:
+         * Note: There is no race condition between the top half & the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: drivers/char/kmonitor.c:142:
+         * bottom part of this function as if multiple monitors are active,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: drivers/char/kmonitor.c:143:
+         * each will have a unique resource for itself. So, the function$

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: drivers/char/kmonitor.c:144:
+         * is SMP safe.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: drivers/char/kmonitor.c:145:
+         */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: drivers/char/kmonitor.c:149:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: drivers/char/kmonitor.c:171:
+		struct kmonitor_res *r = to_kmonitor_res(tmp);
+		if (r->monitor == current->pid && r->target == target) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: drivers/char/kmonitor.c:180:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: drivers/char/kmonitor.c:187:
+void __kmonitor_notify_event(struct task_struct *tsk, int type) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: drivers/char/kmonitor.c:194:
+	list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#473: FILE: drivers/char/kmonitor.c:194:
+	list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#473: FILE: drivers/char/kmonitor.c:194:
+	list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
 	                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: drivers/char/kmonitor.c:196:
+		struct kmonitor_res *r = to_kmonitor_res(tmp);
+		if (r->target == current->pid && type & r->event_mask) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#504: FILE: drivers/char/kmonitor.c:225:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#504: FILE: drivers/char/kmonitor.c:225:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#504: FILE: drivers/char/kmonitor.c:225:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: drivers/char/kmonitor.c:229:
+			struct kmonitor_res *r = to_kmonitor_res(tmp);
+			if (r->monitor == current->pid) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/char/kmonitor.c:232:
+^I^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: drivers/char/kmonitor.c:246:
+^Iif (copy_from_user((struct kmonitor_cmd *)&hdr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: drivers/char/kmonitor.c:247:
+^I^I^I   (struct kmonitor_cmd *)arg, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: drivers/char/kmonitor.c:255:
+^I^Ireturn kmonitor_remove(hdr.pid, hdr.type);^I^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#541: FILE: drivers/char/kmonitor.c:262:
+static struct file_operations kmonitor_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#561: FILE: drivers/char/kmonitor.c:282:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#561: FILE: drivers/char/kmonitor.c:282:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#561: FILE: drivers/char/kmonitor.c:282:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#568: FILE: drivers/char/kmonitor.c:289:
+		printk(KERN_ERR "unable to register kmonitor misc device\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: drivers/char/kmonitor.c:293:
+^Ikmonitor_cache = kmem_cache_create("kmonitor_res", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: drivers/char/kmonitor.c:294:
+^I^I^I^I^I   sizeof(struct kmonitor_res), 0, $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: drivers/char/kmonitor.c:298:
+		printk(KERN_ERR "unable to allocate kmonitor_cache\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#597: FILE: drivers/char/kmonitor.c:318:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#597: FILE: drivers/char/kmonitor.c:318:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#597: FILE: drivers/char/kmonitor.c:318:
+	for (i=0; i<(1<<KMONITOR_BITS); i++) {
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#601: FILE: drivers/char/kmonitor.c:322:
+			struct kmonitor_res *r = to_kmonitor_res(tmp);
+			list_del(tmp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: include/linux/kmonitor.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#639: FILE: include/linux/kmonitor.h:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#647: FILE: include/linux/kmonitor.h:9:
+ * License v2.0 as published by the Free Software Foundation; $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#656: FILE: include/linux/kmonitor.h:18:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: include/linux/kmonitor.h:22:
+ *               $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#665: FILE: include/linux/kmonitor.h:27:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: include/linux/kmonitor.h:29:
+#define KMONITOR_THREAD_CREATE 0x01 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: include/linux/kmonitor.h:30:
+#define KMONITOR_THREAD_ABORT  0x02           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: include/linux/kmonitor.h:33:
+#define KMONITOR_PROCESS_ABORT 0x10 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: include/linux/kmonitor.h:34:
+#define KMONITOR_PROCESS_EXEC  0x20 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: include/linux/kmonitor.h:37:
+struct kmonitor_cmd $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#676: FILE: include/linux/kmonitor.h:38:
+struct kmonitor_cmd 
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/linux/kmonitor.h:51:
+extern void __kmonitor_notify_event(struct task_struct *tsk, int type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space prohibited after that open parenthesis '('
#691: FILE: include/linux/kmonitor.h:53:
+static inline void kmonitor_notify_event( struct task_struct *tsk, int type)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: include/linux/kmonitor.h:55:
+#ifdef CONFIG_KMONITOR^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: kernel/fork.c:1172:
+                if (p->pid == p->tgid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: kernel/fork.c:1172:
+                if (p->pid == p->tgid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: kernel/fork.c:1173:
+                        kmonitor_notify_event(p, KMONITOR_PROCESS_FORK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: kernel/fork.c:1173:
+                        kmonitor_notify_event(p, KMONITOR_PROCESS_FORK);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: kernel/fork.c:1174:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: kernel/fork.c:1174:
+                else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#754: FILE: kernel/fork.c:1175:
+                        kmonitor_notify_event(p, KMONITOR_THREAD_CREATE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: kernel/fork.c:1175:
+                        kmonitor_notify_event(p, KMONITOR_THREAD_CREATE);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 76 errors, 27 warnings, 5 checks, 600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
