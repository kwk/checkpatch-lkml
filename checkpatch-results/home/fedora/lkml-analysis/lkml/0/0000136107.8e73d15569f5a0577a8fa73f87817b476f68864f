CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: include/asm-s390/atomic.h:134:
 }
+static __inline__ int atomic64_add_negative(long long i, atomic64_t * v)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: include/asm-s390/atomic.h:134:
+static __inline__ int atomic64_add_negative(long long i, atomic64_t * v)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#81: FILE: include/asm-s390/atomic.h:134:
+static __inline__ int atomic64_add_negative(long long i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#89: FILE: include/asm-s390/atomic.h:142:
 }
+static __inline__ long long atomic64_sub_return(long long i, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: include/asm-s390/atomic.h:142:
+static __inline__ long long atomic64_sub_return(long long i, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#89: FILE: include/asm-s390/atomic.h:142:
+static __inline__ long long atomic64_sub_return(long long i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#101: FILE: include/asm-s390/atomic.h:154:
 }
+static __inline__ int atomic64_inc_and_test(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: include/asm-s390/atomic.h:154:
+static __inline__ int atomic64_inc_and_test(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#101: FILE: include/asm-s390/atomic.h:154:
+static __inline__ int atomic64_inc_and_test(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#101: FILE: include/asm-s390/atomic.h:154:
+static __inline__ int atomic64_inc_and_test(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: include/asm-s390/atomic.h:166:
 }
+static __inline__ int atomic64_dec_and_test(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: include/asm-s390/atomic.h:166:
+static __inline__ int atomic64_dec_and_test(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#110: FILE: include/asm-s390/atomic.h:166:
+static __inline__ int atomic64_dec_and_test(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#110: FILE: include/asm-s390/atomic.h:166:
+static __inline__ int atomic64_dec_and_test(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#147: FILE: include/asm-x86_64/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: include/asm-x86_64/atomic.h:191:
+	int __i = i;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#150: FILE: include/asm-x86_64/atomic.h:191:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#152: FILE: include/asm-x86_64/atomic.h:193:
+		:"=r"(i)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#153: FILE: include/asm-x86_64/atomic.h:194:
+		:"m"(v->counter), "0"(i));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#157: FILE: include/asm-x86_64/atomic.h:198:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: include/asm-x86_64/atomic.h:200:
+	return atomic_add_return(-i,v);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: include/asm-x86_64/atomic.h:203:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: include/asm-x86_64/atomic.h:204:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))
                                                   ^

WARNING:INLINE: plain inline is preferred over __inline__
#181: FILE: include/asm-x86_64/atomic.h:355:
+static __inline__ int atomic64_add_negative(long i, atomic64_t *v)

WARNING:INLINE: plain inline is preferred over __inline__
#198: FILE: include/asm-x86_64/atomic.h:373:
+static __inline__ long atomic64_add_return(long i, atomic64_t *v)

WARNING:INLINE: plain inline is preferred over __inline__
#211: FILE: include/asm-x86_64/atomic.h:383:
+static __inline__ long atomic64_sub_return(long i, atomic64_t *v)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/asm-x86_64/atomic.h:385:
+	return atomic64_add_return(-i,v);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: include/asm-x86_64/atomic.h:388:
+#define atomic64_inc_return(v)  (atomic64_add_return(1,v))
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: include/asm-x86_64/atomic.h:389:
+#define atomic64_dec_return(v)  (atomic64_sub_return(1,v))
                                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 12 warnings, 5 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
