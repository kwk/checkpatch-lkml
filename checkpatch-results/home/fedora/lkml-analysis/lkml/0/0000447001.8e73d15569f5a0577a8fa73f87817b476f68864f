WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#31: 
layout, without having to change insmod everytime.
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
PS: These patches are in early stage, so I know that they need a cleanup. :)

CHECK:CAMELCASE: Avoid CamelCase: <ElfW>
#92: FILE: insmod/insmod.c:485:
+		ElfW(Addr) start, end;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#92: FILE: insmod/insmod.c:485:
+		ElfW(Addr) start, end;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#100: FILE: insmod/insmod.c:493:
+			start = end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: insmod/insmod.c:496:
+		obj_add_symbol(f, "__ex_table_start", -1, ELFW(ST_INFO) (STB_LOCAL, STT_OBJECT),
+				sec->idx, start, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: insmod/insmod.c:498:
+		obj_add_symbol(f, "__ex_table_end", -1, ELFW(ST_INFO) (STB_LOCAL, STT_OBJECT),
+				sec->idx, end, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: insmod/insmod.c:504:
+		obj_add_symbol(f, "__syms_start", -1, ELFW(ST_INFO) (STB_LOCAL, STT_NOTYPE),
+				sec->idx, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: insmod/insmod.c:506:
+		obj_add_symbol(f, "__syms_end", -1, ELFW(ST_INFO) (STB_LOCAL, STT_NOTYPE),
+				sec->idx, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: insmod/insmod.c:512:
+		obj_add_symbol(f, "__deps_start", -1, ELFW(ST_INFO) (STB_LOCAL, STT_NOTYPE),
+				sec->idx, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: insmod/insmod.c:514:
+		obj_add_symbol(f, "__deps_end", -1, ELFW(ST_INFO) (STB_LOCAL, STT_NOTYPE),
+				sec->idx, 0, 0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#131: FILE: insmod/insmod.c:1158:
+	if (sec) {
 	module = (struct module *) sec->contents;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: obj/obj_common.c:247:
+  if (!strcmp(a->name, ".module"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#192: FILE: obj/obj_common.c:247:
+  if (!strcmp(a->name, ".module"))
+    ac |= 128;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: obj/obj_common.c:248:
+    ac |= 128;$

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#211: FILE: affs/super.c:514:
+extern struct module_ref __deps_start, __deps_end;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#212: FILE: affs/super.c:515:
+extern struct exception_table_entry __ex_table_start, __ex_table_end;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: affs/super.c:517:
+static struct module __this_module __attribute__ ((section (".module"), unused)) = {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".module") over __attribute__((section(".module")))
#214: FILE: affs/super.c:517:
+static struct module __this_module __attribute__ ((section (".module"), unused)) = {

WARNING:INDENTED_LABEL: labels should not be indented
#215: FILE: affs/super.c:518:
+	magic: MODULE_MAGIC,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#216: FILE: affs/super.c:519:
+	init: init_module,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#216: FILE: affs/super.c:519:
+	init: init_module,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#217: FILE: affs/super.c:520:
+	cleanup: cleanup_module,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#217: FILE: affs/super.c:520:
+	cleanup: cleanup_module,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#218: FILE: affs/super.c:521:
+	syms: &__syms_start,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#218: FILE: affs/super.c:521:
+	syms: &__syms_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#219: FILE: affs/super.c:522:
+	syms_end: &__syms_end,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#219: FILE: affs/super.c:522:
+	syms_end: &__syms_end,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#220: FILE: affs/super.c:523:
+	deps: &__deps_start,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#220: FILE: affs/super.c:523:
+	deps: &__deps_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#221: FILE: affs/super.c:524:
+	deps_end: &__deps_end,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#221: FILE: affs/super.c:524:
+	deps_end: &__deps_end,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#222: FILE: affs/super.c:525:
+	ex_table_start: &__ex_table_start,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#222: FILE: affs/super.c:525:
+	ex_table_start: &__ex_table_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#223: FILE: affs/super.c:526:
+	ex_table_end: &__ex_table_end,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#223: FILE: affs/super.c:526:
+	ex_table_end: &__ex_table_end,

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: linux/module.h:128:
+#define mod_member_present(mod,member) 1
                               ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#278: FILE: linux/module.h:141:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m) + (sizeof(struct module))) && \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#278: FILE: linux/module.h:141:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m) + (sizeof(struct module))) && \
 	         (unsigned long)((p)+(n)) <= (unsigned long)(m) + (m)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#278: FILE: linux/module.h:141:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m) + (sizeof(struct module))) && \
 	         (unsigned long)((p)+(n)) <= (unsigned long)(m) + (m)->size)

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:INDENTED_LABEL: labels should not be indented
#303: FILE: module.c:45:
+	magic:			MODULE_MAGIC,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#308: FILE: module.c:50:
+	syms_end:		__stop___ksymtab,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#308: FILE: module.c:50:
+	syms_end:		__stop___ksymtab,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#394: FILE: module.c:274:
+	if ((mod = (struct module *)module_map(size + namelen + 1)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#573: FILE: module.c:336:
+		printk("update modutils?\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#712: FILE: module.c:660:
+	space = nsyms * 2*sizeof(void *);
 	                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#793: FILE: module.c:886:
+	unsigned i, ndeps;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 27 warnings, 12 checks, 717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
