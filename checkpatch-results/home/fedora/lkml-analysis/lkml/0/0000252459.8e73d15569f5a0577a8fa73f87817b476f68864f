WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > I think it was about doing a 2GB file-file sendfile, and see your system

WARNING:TYPO_SPELLING: 'accorting' may be misspelled - perhaps 'according'?
#51: 
The other three patches were updated accorting to Christophs comments.
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#53: 
Jörn
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#64: 
Signed-off-by: Jörn Engel <joern@wohnheim.fh-wedel.de>
                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#80: FILE: include/linux/fs.h:1420:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: mm/filemap.c:999:
+ssize_t generic_file_sendpage(struct file *file, struct page *page,
+		int offset, size_t size, loff_t *ppos, int more)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#113: FILE: mm/filemap.c:1011:
+EXPORT_SYMBOL(generic_file_sendpage);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: mm/filemap.c:1672:
+			 const char *buf, unsigned bytes)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#150: FILE: mm/filemap.c:2065:
+generic_kernel_file_aio_write_nolock(struct kiocb *iocb, const struct iovec*iov,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: mm/filemap.c:2069:
+	struct address_space * mapping = file->f_mapping;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#155: FILE: mm/filemap.c:2070:
+	struct address_space_operations *a_ops = mapping->a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: mm/filemap.c:2073:
+^Istruct inode ^I*inode = mapping->host;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#182: FILE: mm/filemap.c:2097:
+		if (unlikely((ssize_t)(ocount|iv->iov_len) < 0))
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: mm/filemap.c:2113:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: mm/filemap.c:2121:
+	BUG_ON(file->f_flags & O_DIRECT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#214: FILE: mm/filemap.c:2129:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: mm/filemap.c:2135:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#220: FILE: mm/filemap.c:2135:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#220: FILE: mm/filemap.c:2135:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#220: FILE: mm/filemap.c:2135:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#220: FILE: mm/filemap.c:2135:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: mm/filemap.c:2141:
+		status = a_ops->prepare_write(file, page, offset, offset+bytes);
 		                                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: mm/filemap.c:2155:
+		BUG_ON(nr_segs != 1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: mm/filemap.c:2159:
+		status = a_ops->commit_write(file, page, offset, offset+bytes);
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/filemap.c:2171:
+					filemap_set_next_iovec(&cur_iov,
+							&iov_base, status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/filemap.c:2196:
+			status = generic_osync_inode(inode, mapping,
+					OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: mm/filemap.c:2196:
+					OSYNC_METADATA|OSYNC_DATA);
 					              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: mm/filemap.c:2198:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 14 warnings, 12 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
