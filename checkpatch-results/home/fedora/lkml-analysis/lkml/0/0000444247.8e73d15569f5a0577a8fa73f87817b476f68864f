WARNING:TYPO_SPELLING: 'acheived' may be misspelled - perhaps 'achieved'?
#31: 
Major benefits can be acheived when these statistics counters are used
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -ruN -X dontdiff linux-2.5.25/fs/proc/root.c statctr-2.5.25/fs/proc/root.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: include/linux/statctr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: include/linux/statctr.h:5:
+ *  Scalable Statistic Counters $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: include/linux/statctr.h:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#106: FILE: include/linux/statctr.h:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#110: FILE: include/linux/statctr.h:25:
+ * include/linux/statctr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: include/linux/statctr.h:31:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: include/linux/statctr.h:31:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#128: FILE: include/linux/statctr.h:43:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/statctr.h:56:
+extern int statctr_init(statctr_t *, unsigned long,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#141: FILE: include/linux/statctr.h:56:
+extern int statctr_init(statctr_t *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#141: FILE: include/linux/statctr.h:56:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#141: FILE: include/linux/statctr.h:56:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#141: FILE: include/linux/statctr.h:56:
+extern int statctr_init(statctr_t *, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/statctr.h:58:
+extern void statctr_cleanup(statctr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#143: FILE: include/linux/statctr.h:58:
+extern void statctr_cleanup(statctr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/statctr.h:59:
+extern int statctr_ninit(statctr_t *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#144: FILE: include/linux/statctr.h:59:
+extern int statctr_ninit(statctr_t *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#144: FILE: include/linux/statctr.h:59:
+extern int statctr_ninit(statctr_t *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#144: FILE: include/linux/statctr.h:59:
+extern int statctr_ninit(statctr_t *, unsigned long, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/statctr.h:60:
+extern void statctr_ncleanup(statctr_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#145: FILE: include/linux/statctr.h:60:
+extern void statctr_ncleanup(statctr_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#145: FILE: include/linux/statctr.h:60:
+extern void statctr_ncleanup(statctr_t *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: include/linux/statctr.h:62:
+#ifdef^ICONFIG_SMP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: include/linux/statctr.h:66:
+^Istctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), GFP_ATOMIC); $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stctr->ctr
#151: FILE: include/linux/statctr.h:66:
+	stctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), GFP_ATOMIC); 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/linux/statctr.h:67:
+^Iif(!stctr->ctr) $

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: include/linux/statctr.h:67:
+	if(!stctr->ctr) 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: include/linux/statctr.h:90:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: include/linux/statctr.h:92:
+ * @stctr: Statistics counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: include/linux/statctr.h:94:
+ * Increments the counter by one.  Internally only the per-cpu counter is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: include/linux/statctr.h:110:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: include/linux/statctr.h:110:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: include/linux/statctr.h:121:
+ * Sets the statistics counter. If statctr_read() is invoked after a counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: include/linux/statctr.h:124:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: include/linux/statctr.h:124:
+ $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#214: FILE: include/linux/statctr.h:129:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#214: FILE: include/linux/statctr.h:129:
+	for (i=0; i < NR_CPUS; i++) {
+		*per_cpu_ptr(stctr->ctr, i) = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#214: FILE: include/linux/statctr.h:129:
+	for (i=0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: include/linux/statctr.h:142:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/linux/statctr.h:142:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: include/linux/statctr.h:147:
+	unsigned long res = 0;
+	for( i=0; i < NR_CPUS; i++ )

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#232: FILE: include/linux/statctr.h:147:
+	for( i=0; i < NR_CPUS; i++ )
 	      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#232: FILE: include/linux/statctr.h:147:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#232: FILE: include/linux/statctr.h:147:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: include/linux/statctr.h:147:
+	for( i=0; i < NR_CPUS; i++ )

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#232: FILE: include/linux/statctr.h:147:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: include/linux/statctr.h:158:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/statctr.h:158:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: include/linux/statctr.h:161:
+        *per_cpu_ptr(stctr->ctr, smp_processor_id()) += val;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/statctr.h:161:
+        *per_cpu_ptr(stctr->ctr, smp_processor_id()) += val;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: include/linux/statctr.h:170:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/linux/statctr.h:170:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: include/linux/statctr.h:173:
+        *per_cpu_ptr(stctr->ctr, smp_processor_id()) -= val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: include/linux/statctr.h:173:
+        *per_cpu_ptr(stctr->ctr, smp_processor_id()) -= val;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#264: FILE: include/linux/statctr.h:179:
+#define statctr_set(stctr,val) ((stctr)->ctr = (val))
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/linux/statctr.h:180:
+#define statctr_add(stctr,val) (((stctr)->ctr)+=(val))
                          ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#265: FILE: include/linux/statctr.h:180:
+#define statctr_add(stctr,val) (((stctr)->ctr)+=(val))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/linux/statctr.h:181:
+#define statctr_sub(stctr,val) (((stctr)->ctr)-=(val))
                          ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#266: FILE: include/linux/statctr.h:181:
+#define statctr_sub(stctr,val) (((stctr)->ctr)-=(val))
                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: include/linux/statctr.h:185:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: include/linux/statctr.h:185:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#294: FILE: kernel/statctr.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: kernel/statctr.c:6:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#313: FILE: kernel/statctr.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#314: FILE: kernel/statctr.c:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#318: FILE: kernel/statctr.c:25:
+ * kernel/statctr.c

CHECK:SPACING: No space is necessary after a cast
#331: FILE: kernel/statctr.c:38:
+	statctr_t *stctr = (statctr_t *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: kernel/statctr.c:39:
+	statctr_t *stctr = (statctr_t *) data;
+	len = sprintf(page, "%ld\n", statctr_read(stctr));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "procname"
#345: FILE: kernel/statctr.c:52:
+	if (procname != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: kernel/statctr.c:53:
+^I^Iif(procbase != NULL) $

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: kernel/statctr.c:53:
+		if(procbase != NULL) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "procbase"
#346: FILE: kernel/statctr.c:53:
+		if(procbase != NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/statctr.c:55:
+^I^Itmp = create_proc_read_entry( procname, 0444, tmpbase, $

ERROR:SPACING: space prohibited after that open parenthesis '('
#348: FILE: kernel/statctr.c:55:
+		tmp = create_proc_read_entry( procname, 0444, tmpbase, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: kernel/statctr.c:56:
+		tmp = create_proc_read_entry( procname, 0444, tmpbase, 
+			proc_read_statctr, stctr);

ERROR:SPACING: space required before the open parenthesis '('
#353: FILE: kernel/statctr.c:60:
+		if(!stctr->name) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#357: FILE: kernel/statctr.c:64:
+		memcpy(stctr->name, procname, strlen(procname)+1);
 		                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#365: FILE: kernel/statctr.c:72:
+	if(stctr->name) {

ERROR:SPACING: space required after that ';' (ctx:VxV)
#372: FILE: kernel/statctr.c:79:
+#define statctr_proc_init(ctr, base, name) ({do { } while (0); 0;})
                                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: kernel/statctr.c:80:
+#define statctr_proc_remove(ctr)  do { } while (0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: kernel/statctr.c:91:
+ * @procname: /proc entry name.  No /proc stuff inits are done if the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: kernel/statctr.c:98:
+int statctr_init(statctr_t *stctr, unsigned long val, $

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: kernel/statctr.c:101:
+	if(statctr_proc_init(stctr, procbase, procname))

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: kernel/statctr.c:103:
+	if(__statctr_init(stctr)) {

WARNING:TYPO_SPELLING: 'contiguos' may be misspelled - perhaps 'contiguous'?
#415: FILE: kernel/statctr.c:122:
+ * statctr_ninit - Inits a bunch of contiguos statctrs
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#420: FILE: kernel/statctr.c:127:
+ * Inits a bunch of contigious statctrs.  Useful when statctrs
                     ^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: kernel/statctr.c:133:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: kernel/statctr.c:133:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: kernel/statctr.c:134:
+        for(i=0; i < no; i++) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: kernel/statctr.c:134:
+        int i;
+        for(i=0; i < no; i++) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: kernel/statctr.c:134:
+        for(i=0; i < no; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: kernel/statctr.c:134:
+        for(i=0; i < no; i++) {
              ^

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: kernel/statctr.c:134:
+        for(i=0; i < no; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: kernel/statctr.c:135:
+                if(statctr_init(&stctr[i], val, NULL, NULL))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: kernel/statctr.c:135:
+                if(statctr_init(&stctr[i], val, NULL, NULL))$

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: kernel/statctr.c:135:
+                if(statctr_init(&stctr[i], val, NULL, NULL))

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: kernel/statctr.c:136:
+                        goto cleanup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: kernel/statctr.c:136:
+                        goto cleanup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: kernel/statctr.c:137:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: kernel/statctr.c:137:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: kernel/statctr.c:138:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: kernel/statctr.c:138:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: kernel/statctr.c:139:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: kernel/statctr.c:139:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: kernel/statctr.c:142:
+        for(; i >= 0; i--) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: kernel/statctr.c:142:
+        for(; i >= 0; i--) {$

ERROR:SPACING: space required before the open parenthesis '('
#435: FILE: kernel/statctr.c:142:
+        for(; i >= 0; i--) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#435: FILE: kernel/statctr.c:142:
+        for(; i >= 0; i--) {
+                statctr_cleanup(&stctr[i]);
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: kernel/statctr.c:143:
+                statctr_cleanup(&stctr[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: kernel/statctr.c:143:
+                statctr_cleanup(&stctr[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: kernel/statctr.c:144:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: kernel/statctr.c:144:
+        }$

WARNING:TYPO_SPELLING: 'contiguos' may be misspelled - perhaps 'contiguous'?
#442: FILE: kernel/statctr.c:149:
+ * statctr_ncleanup - cleans up a bunch of contiguos statctrs
                                            ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: kernel/statctr.c:156:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/statctr.c:156:
+        int i;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: kernel/statctr.c:157:
+        for(i=0; i < no; i++) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/statctr.c:157:
+        for(i=0; i < no; i++) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: kernel/statctr.c:157:
+        int i;
+        for(i=0; i < no; i++) 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/statctr.c:157:
+        for(i=0; i < no; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#450: FILE: kernel/statctr.c:157:
+        for(i=0; i < no; i++) 
              ^

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: kernel/statctr.c:157:
+        for(i=0; i < no; i++) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: kernel/statctr.c:158:
+                statctr_cleanup(&stctr[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: kernel/statctr.c:158:
+                statctr_cleanup(&stctr[i]);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#454: FILE: kernel/statctr.c:161:
+EXPORT_SYMBOL(statctr_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#455: FILE: kernel/statctr.c:162:
+EXPORT_SYMBOL(statctr_cleanup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#456: FILE: kernel/statctr.c:163:
+EXPORT_SYMBOL(statctr_ninit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#457: FILE: kernel/statctr.c:164:
+EXPORT_SYMBOL(statctr_ncleanup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444247.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 65 errors, 54 warnings, 10 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444247.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
