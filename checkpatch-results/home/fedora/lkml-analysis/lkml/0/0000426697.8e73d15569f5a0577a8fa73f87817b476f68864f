WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
diff -urN -X /home/bharata/dontdiff linux-2.5.40/arch/i386/kernel/nmi.c linux-2.5.40+lkcd/arch/i386/kernel/nmi.c

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#44: FILE: arch/i386/kernel/nmi.c:356:
+	if (dump_in_progress && cpu != dumping_cpu) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: arch/i386/kernel/traps.c:133:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/i386/kernel/traps.c:134:
+ * This code mimics show_trace() etc in arch/i386/kernel/traps.c. We don't $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#83: FILE: arch/i386/kernel/traps.c:134:
+ * This code mimics show_trace() etc in arch/i386/kernel/traps.c. We don't 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/i386/kernel/traps.c:140:
+void show_this_cpu_state(int cpu, struct pt_regs * regs, struct thread_info *ti,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: arch/i386/kernel/traps.c:141:
+void show_this_cpu_state(int cpu, struct pt_regs * regs, struct thread_info *ti,
+		struct task_struct *tsk)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#100: FILE: arch/i386/kernel/traps.c:151:
+	if (regs->xcs & 3) {
+		in_kernel = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: arch/i386/kernel/traps.c:154:
+	printk("CPU:    %d\nEIP:    %04x:[<%08lx>]\nEFLAGS: %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: arch/i386/kernel/traps.c:155:
+	printk("CPU:    %d\nEIP:    %04x:[<%08lx>]\nEFLAGS: %08lx\n",
+		cpu, 0xffff & regs->xcs, regs->eip, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: arch/i386/kernel/traps.c:156:
+	printk("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: arch/i386/kernel/traps.c:157:
+	printk("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",
+		regs->eax, regs->ebx, regs->ecx, regs->edx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#107: FILE: arch/i386/kernel/traps.c:158:
+	printk("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/i386/kernel/traps.c:159:
+	printk("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %p\n",
+		regs->esi, regs->edi, regs->ebp, esp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#109: FILE: arch/i386/kernel/traps.c:160:
+	printk("ds: %04x   es: %04x   ss: %04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: arch/i386/kernel/traps.c:161:
+	printk("ds: %04x   es: %04x   ss: %04x\n",
+		regs->xds & 0xffff, regs->xes & 0xffff, regs->xss & 0xffff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#112: FILE: arch/i386/kernel/traps.c:163:
+		printk("no stack for this cpu\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#115: FILE: arch/i386/kernel/traps.c:166:
+	printk("Process %s (pid: %d, thread_info=%p task=%p)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: arch/i386/kernel/traps.c:167:
+	printk("Process %s (pid: %d, thread_info=%p task=%p)",
+		tsk->comm, tsk->pid, tsk->thread_info, tsk);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: arch/i386/kernel/traps.c:174:
+		extern int kstack_depth_to_print;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: arch/i386/kernel/traps.c:177:
+				(regs->esp & (THREAD_SIZE-1)));
 				                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#128: FILE: arch/i386/kernel/traps.c:179:
+		printk("\nStack: ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: arch/i386/kernel/traps.c:181:
+		for(i=0; i < kstack_depth_to_print; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: arch/i386/kernel/traps.c:181:
+		for(i=0; i < kstack_depth_to_print; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/i386/kernel/traps.c:182:
+^I^I^Iif ((unsigned long)stack > (unsigned long)ti + $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#132: FILE: arch/i386/kernel/traps.c:183:
+					THREAD_SIZE-1)
 					           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: arch/i386/kernel/traps.c:186:
+				printk("\n       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#136: FILE: arch/i386/kernel/traps.c:187:
+			printk("%08lx ", *stack++);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/i386/kernel/traps.c:189:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#139: FILE: arch/i386/kernel/traps.c:190:
+		printk("\nCall Trace: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#146: FILE: arch/i386/kernel/traps.c:197:
+					printk("\n   ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: arch/i386/kernel/traps.c:198:
+				printk("[<%08lx>] ", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: arch/i386/kernel/traps.c:202:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: arch/i386/kernel/traps.c:204:
+		printk("\nCode: ");

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: arch/i386/kernel/traps.c:205:
+		if(regs->eip < PAGE_OFFSET) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#154: FILE: arch/i386/kernel/traps.c:205:
+		if(regs->eip < PAGE_OFFSET) {
+			printk("eip in user space. error.\n");
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: arch/i386/kernel/traps.c:206:
+			printk("eip in user space. error.\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {
 		     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {
 		         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {
 		            ^

ERROR:SPACING: space required before the open parenthesis '('
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#158: FILE: arch/i386/kernel/traps.c:209:
+		for(i=0;i<20;i++) {
+			printk("%02x ", *c++);
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: arch/i386/kernel/traps.c:210:
+			printk("%02x ", *c++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: arch/i386/kernel/traps.c:213:
+	printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: arch/i386/kernel/traps.c:215:
+}^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#164: FILE: arch/i386/kernel/traps.c:215:
+	return;
+}	

WARNING:BRACES: braces {} are not necessary for single statement blocks
#186: FILE: arch/i386/kernel/traps.c:561:
+	if (!(dump_ipi_function_ptr && dump_ipi_function_ptr(regs))) {
+		return 0;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: arch/i386/kernel/traps.c:589:
+        if (dump_ipi(regs)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/i386/kernel/traps.c:589:
+        if (dump_ipi(regs)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: arch/i386/kernel/traps.c:590:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: arch/i386/kernel/traps.c:590:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: arch/i386/kernel/traps.c:591:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/i386/kernel/traps.c:591:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#220: FILE: arch/i386/mm/init.c:160:
+int page_is_ram (unsigned long pagenr)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#245: FILE: init/main.c:96:
+extern unsigned long _end;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#275: FILE: kernel/panic.c:25:
+int (*dump_device_register_ptr)(void*) = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#276: FILE: kernel/panic.c:26:
+volatile int dump_in_progress = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#276: FILE: kernel/panic.c:26:
+volatile int dump_in_progress = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#277: FILE: kernel/panic.c:27:
+volatile int dumping_cpu = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#277: FILE: kernel/panic.c:27:
+volatile int dumping_cpu = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: kernel/panic.c:57:
+	struct pt_regs regs;
+	get_current_regs(&regs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#322: FILE: kernel/sched.c:948:
+#if defined(CONFIG_DUMP) || defined(CONFIG_DUMP_MODULE)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#330: FILE: kernel/sched.c:956:
+	if (dump_in_progress) {
+		goto dump_scheduling_disabled;
+	}

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#343: FILE: kernel/sched.c:1051:
+#if defined(CONFIG_DUMP) || defined(CONFIG_DUMP_MODULE)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: kernel/sched.c:1056:
+	if (!current->active_mm) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#348: FILE: kernel/sched.c:1056:
+	if (!current->active_mm) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#356: FILE: kernel/sched.c:1064:
+		while (dump_in_progress);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426697.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 37 warnings, 8 checks, 301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426697.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
