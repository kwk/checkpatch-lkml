WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: kernel/ckrm/rbce/rbce_core.c:1:
+/* Rule-based Classification Engine (RBCE) and

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#95: FILE: kernel/ckrm/rbce/rbce_core.c:40:
+			printk(KERN_ERR "rbce: class %s changed identity\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#110: FILE: kernel/ckrm/rbce/rbce_core.c:55:
+		if ((cls = find_class_name(classname)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#111: FILE: kernel/ckrm/rbce/rbce_core.c:56:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#113: FILE: kernel/ckrm/rbce/rbce_core.c:58:
+			       "rbce ERROR: class %s exists in rbce after "
+			       "removal in core\n", classname);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:RETURN_VOID: void function return statements are not generally useful
#118: FILE: kernel/ckrm/rbce/rbce_core.c:63:
+	return;
+}

WARNING:TYPO_SPELLING: 'folowing' may be misspelled - perhaps 'following'?
#124: FILE: kernel/ckrm/rbce/rbce_core.c:69:
+ * This function treats the folowing 2 charaters as special if seen in
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'charaters' may be misspelled - perhaps 'characters'?
#124: FILE: kernel/ckrm/rbce/rbce_core.c:69:
+ * This function treats the folowing 2 charaters as special if seen in
                                        ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#139: FILE: kernel/ckrm/rbce/rbce_core.c:84:
+	if (!fullpath && ((c = strrchr(tsk_comm, '/')) != NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#139: FILE: kernel/ckrm/rbce/rbce_core.c:84:
+	if (!fullpath && ((c = strrchr(tsk_comm, '/')) != NULL)) {
+		cmd = c + 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#154: FILE: kernel/ckrm/rbce/rbce_core.c:99:
+	if (t == NULL || c == NULL) {
+		return 0;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t"
#154: FILE: kernel/ckrm/rbce/rbce_core.c:99:
+	if (t == NULL || c == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#154: FILE: kernel/ckrm/rbce/rbce_core.c:99:
+	if (t == NULL || c == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#164: FILE: kernel/ckrm/rbce/rbce_core.c:109:
+			if (*t == '/') {
+				return 0;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#171: FILE: kernel/ckrm/rbce/rbce_core.c:116:
+			if (*t == '/') {
+				return 0;
+			}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: kernel/ckrm/rbce/rbce_core.c:124:
+^I^I^I/*t++; ^IAdd this for matching '*' with "one"$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#180: FILE: kernel/ckrm/rbce/rbce_core.c:125:
+			/*t++; 	Add this for matching '*' with "one"
+				or more chars. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#180: FILE: kernel/ckrm/rbce/rbce_core.c:125:
+				or more chars. */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#187: FILE: kernel/ckrm/rbce/rbce_core.c:132:
+						if (*t == '/') {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#187: FILE: kernel/ckrm/rbce/rbce_core.c:132:
+						if (*t == '/') {
+							return 0;
+						}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#195: FILE: kernel/ckrm/rbce/rbce_core.c:140:
+						if (*t == '/') {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#195: FILE: kernel/ckrm/rbce/rbce_core.c:140:
+						if (*t == '/') {
+							return 0;
+						}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#200: FILE: kernel/ckrm/rbce/rbce_core.c:145:
+						if (!*c && *t)

WARNING:TABSTOP: Statements should start on a tabstop
#211: FILE: kernel/ckrm/rbce/rbce_core.c:156:
+		 /*FALLTHRU*/ default:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#211: FILE: kernel/ckrm/rbce/rbce_core.c:156:
+		 /*FALLTHRU*/ default:

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: kernel/ckrm/rbce/rbce_core.c:162:
+				/* reset to last asterix and
+				   continue from there */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: kernel/ckrm/rbce/rbce_core.c:162:
+				   continue from there */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#218: FILE: kernel/ckrm/rbce/rbce_core.c:163:
+				if (last_ast) {
[...]
+				} else {
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: kernel/ckrm/rbce/rbce_core.c:239:
+			   struct rbce_rule *rule, bitvector_t * vec_eval,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: kernel/ckrm/rbce/rbce_core.c:240:
+			   bitvector_t * vec_true, char **filename);

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#308: FILE: kernel/ckrm/rbce/rbce_core.c:253:
+ * Caller must hold the rbce_rwlock atleast in read mode.
                                     ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: kernel/ckrm/rbce/rbce_core.c:257:
+	      struct rbce_rule *rule, bitvector_t * vec_eval,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: kernel/ckrm/rbce/rbce_core.c:258:
+	      bitvector_t * vec_true, char **filename)

WARNING:TYPO_SPELLING: 'taht' may be misspelled - perhaps 'that'?
#332: FILE: kernel/ckrm/rbce/rbce_core.c:277:
+ * corresponding bit in vec_true is the result for taht particular. If it is
                                                    ^^^^

WARNING:TYPO_SPELLING: 'fucntions' may be misspelled - perhaps 'functions'?
#336: FILE: kernel/ckrm/rbce/rbce_core.c:281:
+ * This fucntions returns true only if all terms in the rule evaluate true.
         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#341: FILE: kernel/ckrm/rbce/rbce_core.c:286:
+ * Caller must hold the rbce_rwlock atleast in read mode.
                                     ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: kernel/ckrm/rbce/rbce_core.c:290:
+		struct rbce_rule *rule, bitvector_t * vec_eval,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: kernel/ckrm/rbce/rbce_core.c:291:
+		bitvector_t * vec_true, char **filename)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#358: FILE: kernel/ckrm/rbce/rbce_core.c:303:
+			switch (term->op) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#363: FILE: kernel/ckrm/rbce/rbce_core.c:308:
+					if (((*filename =

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#366: FILE: kernel/ckrm/rbce/rbce_core.c:311:
+						      GFP_ATOMIC)) == NULL)
+					    ||

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#383: FILE: kernel/ckrm/rbce/rbce_core.c:328:
+				if (term->operator == RBCE_LESS_THAN) {
[...]
+				} else if (term->operator == RBCE_GREATER_THAN){
[...]
+				} else if (term->operator == RBCE_NOT) {
[...]
+				} else {
[...]

ERROR:SPACING: space required before the open brace '{'
#385: FILE: kernel/ckrm/rbce/rbce_core.c:330:
+				} else if (term->operator == RBCE_GREATER_THAN){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#394: FILE: kernel/ckrm/rbce/rbce_core.c:339:
+				if (term->operator == RBCE_LESS_THAN) {
[...]
+				} else if (term->operator == RBCE_GREATER_THAN){
[...]
+				} else if (term->operator == RBCE_NOT) {
[...]
+				} else {
[...]

ERROR:SPACING: space required before the open brace '{'
#396: FILE: kernel/ckrm/rbce/rbce_core.c:341:
+				} else if (term->operator == RBCE_GREATER_THAN){

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#405: FILE: kernel/ckrm/rbce/rbce_core.c:350:
+				if (term->operator == RBCE_LESS_THAN) {
[...]
+				} else if (term->operator == RBCE_GREATER_THAN){
[...]
+				} else if (term->operator == RBCE_NOT) {
[...]
+				} else {
[...]

ERROR:SPACING: space required before the open brace '{'
#407: FILE: kernel/ckrm/rbce/rbce_core.c:352:
+				} else if (term->operator == RBCE_GREATER_THAN){

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#416: FILE: kernel/ckrm/rbce/rbce_core.c:361:
+				if (term->operator == RBCE_LESS_THAN) {
[...]
+				} else if (term->operator == RBCE_GREATER_THAN){
[...]
+				} else if (term->operator == RBCE_NOT) {
[...]
+				} else {
[...]

ERROR:SPACING: space required before the open brace '{'
#418: FILE: kernel/ckrm/rbce/rbce_core.c:363:
+				} else if (term->operator == RBCE_GREATER_THAN){

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#428: FILE: kernel/ckrm/rbce/rbce_core.c:373:
+				rc = (RBCE_DATA(tsk)
+				      && RBCE_DATA(tsk)->

CHECK:BRACES: braces {} should be used on all arms of this statement
#442: FILE: kernel/ckrm/rbce/rbce_core.c:387:
+				if (ns && term->operator == RBCE_EQUAL) {
[...]
+				} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#455: FILE: kernel/ckrm/rbce/rbce_core.c:400:
+						break;
+					} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#457: FILE: kernel/ckrm/rbce/rbce_core.c:402:
+						if (*ptr == '*')

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#459: FILE: kernel/ckrm/rbce/rbce_core.c:404:
+						else

CHECK:BRACES: Unbalanced braces around else statement
#464: FILE: kernel/ckrm/rbce/rbce_core.c:409:
+				} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#476: FILE: kernel/ckrm/rbce/rbce_core.c:421:
+				printk(KERN_ERR "Error evaluate term op=%d\n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#480: FILE: kernel/ckrm/rbce/rbce_core.c:425:
+			if (!rc && no_ip) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#489: FILE: kernel/ckrm/rbce/rbce_core.c:434:
+		if (!rc) {
+			return 0;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdata"
#519: FILE: kernel/ckrm/rbce/rbce_core.c:464:
+	if (pdata != NULL) {

CHECK:SPACING: No space is necessary after a cast
#522: FILE: kernel/ckrm/rbce/rbce_core.c:467:
+			pdata->eval = (bitvector_t *) & pdata->data[0];

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#522: FILE: kernel/ckrm/rbce/rbce_core.c:467:
+			pdata->eval = (bitvector_t *) & pdata->data[0];
 			                              ^

CHECK:SPACING: No space is necessary after a cast
#523: FILE: kernel/ckrm/rbce/rbce_core.c:468:
+			pdata->true = (bitvector_t *) & pdata->data[bsize];

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#523: FILE: kernel/ckrm/rbce/rbce_core.c:468:
+			pdata->true = (bitvector_t *) & pdata->data[bsize];
 			                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src->bitmap_version == gl_bitmap_version'
#524: FILE: kernel/ckrm/rbce/rbce_core.c:469:
+			if (src && (src->bitmap_version == gl_bitmap_version)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:RETURN_VOID: void function return statements are not generally useful
#561: FILE: kernel/ckrm/rbce/rbce_core.c:506:
+	return;
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#584: FILE: kernel/ckrm/rbce/rbce_core.c:529:
+	if (!valid_pdata(RBCE_DATA(tsk))) {
+		return NULL;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#603: FILE: kernel/ckrm/rbce/rbce_core.c:548:
+	vec_eval = vec_true = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gl_bitmap_version != pdata->bitmap_version'
#607: FILE: kernel/ckrm/rbce/rbce_core.c:552:
+		if (!pdata
+		    || (pdata
+			&& (gl_bitmap_version != pdata->bitmap_version))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#608: FILE: kernel/ckrm/rbce/rbce_core.c:553:
+		if (!pdata
+		    || (pdata

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#609: FILE: kernel/ckrm/rbce/rbce_core.c:554:
+		    || (pdata
+			&& (gl_bitmap_version != pdata->bitmap_version))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#633: FILE: kernel/ckrm/rbce/rbce_core.c:578:
+		if (!pdata) {
+			goto cls_determined;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#644: FILE: kernel/ckrm/rbce/rbce_core.c:589:
+		if (vec_eval == NULL || vec_true == NULL) {
+			goto cls_determined;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vec_eval"
#644: FILE: kernel/ckrm/rbce/rbce_core.c:589:
+		if (vec_eval == NULL || vec_true == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vec_true"
#644: FILE: kernel/ckrm/rbce/rbce_core.c:589:
+		if (vec_eval == NULL || vec_true == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#682: FILE: kernel/ckrm/rbce/rbce_core.c:627:
+      cls_determined:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#684: FILE: kernel/ckrm/rbce/rbce_core.c:629:
+		if (vec_eval) {
+			bitvector_free(vec_eval);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#687: FILE: kernel/ckrm/rbce/rbce_core.c:632:
+		if (vec_true) {
+			bitvector_free(vec_true);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#693: FILE: kernel/ckrm/rbce/rbce_core.c:638:
+	if (filename) {
+		kfree(filename);
+	}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#694: FILE: kernel/ckrm/rbce/rbce_core.c:639:
+	if (filename) {
+		kfree(filename);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#696: FILE: kernel/ckrm/rbce/rbce_core.c:641:
+	if (RBCE_DATA(tsk)) {
+		RBCE_DATA(tsk)->rules_version = gl_rules_version;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#721: FILE: kernel/ckrm/rbce/rbce_core.c:666:
+	if (RBCE_DATA(tsk)) {
+		RBCE_DATA(tsk)->evaluate = 0;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#726: FILE: kernel/ckrm/rbce/rbce_core.c:671:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#736: FILE: kernel/ckrm/rbce/rbce_core.c:681:
+ *============================================================================*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: kernel/ckrm/rbce/rbce_core.c:692:
+	struct ckrm_core_class *cls;
+	read_lock(&rbce_rwlock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#777: FILE: kernel/ckrm/rbce/rbce_core.c:722:
+		if (pdata->app_tag) {
+			kfree(pdata->app_tag);
+		}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#778: FILE: kernel/ckrm/rbce/rbce_core.c:723:
+		if (pdata->app_tag) {
+			kfree(pdata->app_tag);

WARNING:RETURN_VOID: void function return statements are not generally useful
#783: FILE: kernel/ckrm/rbce/rbce_core.c:728:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#800: FILE: kernel/ckrm/rbce/rbce_core.c:745:
+	switch (event) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#837: FILE: kernel/ckrm/rbce/rbce_core.c:782:
+		if ((pdata = (RBCE_DATA(tsk)))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#837: FILE: kernel/ckrm/rbce/rbce_core.c:782:
+		if ((pdata = (RBCE_DATA(tsk)))) {
+			pdata->evaluate = 1;
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#843: FILE: kernel/ckrm/rbce/rbce_core.c:788:
+
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#866: FILE: kernel/ckrm/rbce/rbce_core.c:811:
+ *============================================================================*/

CHECK:CAMELCASE: Avoid CamelCase: <rbce_acceptQclass_ecbs>
#888: FILE: kernel/ckrm/rbce/rbce_core.c:833:
+static struct ckrm_eng_callback rbce_acceptQclass_ecbs = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: kernel/ckrm/rbce/rbce_core.c:842:
+ *============================================================================*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc < 0'
#936: FILE: kernel/ckrm/rbce/rbce_core.c:881:
+		if ((rc < 0) && (rc != -ENOENT)) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#938: FILE: kernel/ckrm/rbce/rbce_core.c:883:
+			return (rc);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#989: FILE: kernel/ckrm/rbce/rbce_internal.h:244:
+extern struct rbce_private_data *create_private_data(struct rbce_private_data

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rbce_private_data
 						     *' should also have an identifier name
#989: FILE: kernel/ckrm/rbce/rbce_internal.h:244:
+extern struct rbce_private_data *create_private_data(struct rbce_private_data

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#989: FILE: kernel/ckrm/rbce/rbce_internal.h:244:
+extern struct rbce_private_data *create_private_data(struct rbce_private_data

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: kernel/ckrm/rbce/rbce_internal.h:246:
+extern bitvector_t *get_gl_mask_vecs(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#991: FILE: kernel/ckrm/rbce/rbce_internal.h:246:
+extern bitvector_t *get_gl_mask_vecs(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#992: FILE: kernel/ckrm/rbce/rbce_internal.h:247:
+extern struct rbce_class *find_class_name(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#992: FILE: kernel/ckrm/rbce/rbce_internal.h:247:
+extern struct rbce_class *find_class_name(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: kernel/ckrm/rbce/rbce_internal.h:248:
+extern void put_class(struct rbce_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rbce_class *' should also have an identifier name
#993: FILE: kernel/ckrm/rbce/rbce_internal.h:248:
+extern void put_class(struct rbce_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: kernel/ckrm/rbce/rbce_internal.h:249:
+extern void free_all_private_data(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#996: FILE: kernel/ckrm/rbce/rbce_internal.h:251:
+extern void unregister_classtype_engines(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#997: FILE: kernel/ckrm/rbce/rbce_internal.h:252:
+extern int register_classtype_engines(void);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1088: FILE: kernel/ckrm/rbce/rbce_main.c:1204:
+	for (i = 0; i < CKRM_MAX_CLASSTYPES; i++) {
+		INIT_LIST_HEAD(&rules_list[i]);
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1098: FILE: kernel/ckrm/rbce/rbce_main.c:1214:
+  ^Irc = rcfs_register_engine(&rbce_rcfs_ecbs);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1098: FILE: kernel/ckrm/rbce/rbce_main.c:1214:
+  ^Irc = rcfs_register_engine(&rbce_rcfs_ecbs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: kernel/ckrm/rbce/rbce_main.c:1214:
+  ^Irc = rcfs_register_engine(&rbce_rcfs_ecbs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1099: FILE: kernel/ckrm/rbce/rbce_main.c:1215:
+  ^Iline = __LINE__;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1099: FILE: kernel/ckrm/rbce/rbce_main.c:1215:
+  ^Iline = __LINE__;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: kernel/ckrm/rbce/rbce_main.c:1215:
+  ^Iline = __LINE__;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1100: FILE: kernel/ckrm/rbce/rbce_main.c:1216:
+  ^Iif (rc)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1100: FILE: kernel/ckrm/rbce/rbce_main.c:1216:
+  ^Iif (rc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: kernel/ckrm/rbce/rbce_main.c:1216:
+  ^Iif (rc)$

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1101: FILE: kernel/ckrm/rbce/rbce_main.c:1217:
+		goto out_unreg_classtype;;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: kernel/ckrm/rbce/rbce_main.c:1228:
+ ^Iunregister_classtype_engines();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1111: FILE: kernel/ckrm/rbce/rbce_main.c:1228:
+ ^Iunregister_classtype_engines();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: kernel/ckrm/rbce/rbce_main.c:1228:
+ ^Iunregister_classtype_engines();$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1123: FILE: kernel/ckrm/rbce/rbce_main.c:1241:
+	if (!list_empty(&class_list)) {
+		printk(KERN_WARNING "exit_rbce: Class list is not empty\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1124: FILE: kernel/ckrm/rbce/rbce_main.c:1242:
+		printk(KERN_WARNING "exit_rbce: Class list is not empty\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1129: FILE: kernel/ckrm/rbce/rbce_main.c:1247:
+			printk(KERN_WARNING "exit_rbce: Rules list for "

WARNING:SPLIT_STRING: quoted string split across lines
#1130: FILE: kernel/ckrm/rbce/rbce_main.c:1248:
+			printk(KERN_WARNING "exit_rbce: Rules list for "
+				"classtype %d is not empty\n", i);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 82 warnings, 28 checks, 1073 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
