WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#54: FILE: arch/ppc64/mm/numa.c:22:
+#define dbg(args...) if (numa_debug) { printk(KERN_INFO args); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#54: FILE: arch/ppc64/mm/numa.c:22:
+#define dbg(args...) if (numa_debug) { printk(KERN_INFO args); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:BRACES: braces {} are not necessary for single statement blocks
#54: FILE: arch/ppc64/mm/numa.c:22:
+#define dbg(args...) if (numa_debug) { printk(KERN_INFO args); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#97: FILE: arch/ppc64/mm/numa.c:152:
+		dbg("WARNING: could not find NUMA "
+		    "associativity reference point\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#137: FILE: arch/ppc64/mm/numa.c:284:
+				printk(KERN_ERR "WARNING: Hole in node, "

WARNING:SPLIT_STRING: quoted string split across lines
#138: FILE: arch/ppc64/mm/numa.c:285:
+				printk(KERN_ERR "WARNING: Hole in node, "
+						"disabling region start %lx "

WARNING:SPLIT_STRING: quoted string split across lines
#139: FILE: arch/ppc64/mm/numa.c:286:
+						"disabling region start %lx "
+						"length %lx\n", start, size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#166: FILE: arch/ppc64/mm/numa.c:354:
+		printk(KERN_INFO "Node %d CPUs:", node);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#173: FILE: arch/ppc64/mm/numa.c:361:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#176: FILE: arch/ppc64/mm/numa.c:364:
+					printk(" %u", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#180: FILE: arch/ppc64/mm/numa.c:368:
+					printk("-%u", cpu - 1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: arch/ppc64/mm/numa.c:374:
+			printk("-%u", NR_CPUS - 1);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#186: FILE: arch/ppc64/mm/numa.c:374:
+			printk("-%u", NR_CPUS - 1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: arch/ppc64/mm/numa.c:375:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#196: FILE: arch/ppc64/mm/numa.c:384:
+		printk(KERN_INFO "Node %d Memory:", node);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#203: FILE: arch/ppc64/mm/numa.c:391:
+					printk(" 0x%lx", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: arch/ppc64/mm/numa.c:395:
+					printk("-0x%lx", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: arch/ppc64/mm/numa.c:401:
+			printk("-0x%lx", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: arch/ppc64/mm/numa.c:402:
+		printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 18 warnings, 0 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
