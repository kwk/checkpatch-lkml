WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
diff -Narup -X dontdiff linux-2.6.15-rc5/fs/direct-io.c linux-2.6.15-rc5.vec/fs/direct-io.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/direct-io.c:937:
+^Iconst struct niovec *iov, loff_t offset, unsigned long nr_segs, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: fs/direct-io.c:1165:
+^Istruct block_device *bdev, const struct niovec *iov, loff_t offset, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/read_write.c:427:
+static int copy_from_user_iovec(struct niovec *iov, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: fs/read_write.c:428:
+static int copy_from_user_iovec(struct niovec *iov, 
+			       const struct iovec __user * uvector,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: fs/read_write.c:428:
+			       const struct iovec __user * uvector,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#140: FILE: fs/read_write.c:453:
+	struct niovec *iov=iovstack, *vector;
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#154: FILE: fs/read_write.c:480:
+		iov = kmalloc(nr_segs*sizeof(struct niovec), GFP_KERNEL);
 		                     ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#154: FILE: fs/read_write.c:480:
+		iov = kmalloc(nr_segs*sizeof(struct niovec), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#199: FILE: include/linux/fs.h:337:
+	ssize_t (*direct_IO)(int, struct kiocb *, const struct niovec *iov,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#199: FILE: include/linux/fs.h:337:
+	ssize_t (*direct_IO)(int, struct kiocb *, const struct niovec *iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/linux/fs.h:338:
+	ssize_t (*direct_IO)(int, struct kiocb *, const struct niovec *iov,
 			loff_t offset, unsigned long nr_segs);

WARNING:SPACING: Unnecessary space before function pointer arguments
#209: FILE: include/linux/fs.h:991:
+	ssize_t (*readv) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#209: FILE: include/linux/fs.h:991:
+	ssize_t (*readv) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#209: FILE: include/linux/fs.h:991:
+	ssize_t (*readv) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#209: FILE: include/linux/fs.h:991:
+	ssize_t (*readv) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#209: FILE: include/linux/fs.h:991:
+	ssize_t (*readv) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#210: FILE: include/linux/fs.h:992:
+	ssize_t (*writev) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#210: FILE: include/linux/fs.h:992:
+	ssize_t (*writev) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#210: FILE: include/linux/fs.h:992:
+	ssize_t (*writev) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#210: FILE: include/linux/fs.h:992:
+	ssize_t (*writev) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#210: FILE: include/linux/fs.h:992:
+	ssize_t (*writev) (struct file *, const struct niovec *, unsigned long, loff_t *);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#219: FILE: include/linux/fs.h:1526:
+extern ssize_t __generic_file_aio_read(struct kiocb *, const struct niovec *, unsigned long, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/fs.h:1528:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#222: FILE: include/linux/fs.h:1528:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#222: FILE: include/linux/fs.h:1528:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#222: FILE: include/linux/fs.h:1528:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#222: FILE: include/linux/fs.h:1528:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/linux/fs.h:1529:
+extern ssize_t generic_file_aio_write_nolock(struct kiocb *, const struct niovec *,
 		unsigned long, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#225: FILE: include/linux/fs.h:1530:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: include/linux/fs.h:1531:
+extern ssize_t generic_file_direct_write(struct kiocb *, const struct niovec *,
 		unsigned long *, loff_t, loff_t *, size_t, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct niovec *' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#228: FILE: include/linux/fs.h:1532:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: include/linux/fs.h:1533:
+extern ssize_t generic_file_buffered_write(struct kiocb *, const struct niovec *,
 		unsigned long, loff_t, loff_t *, size_t, ssize_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: include/linux/fs.h:1537:
+ssize_t generic_file_write_nolock(struct file *file, const struct niovec *iov,
 				unsigned long nr_segs, loff_t *ppos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#242: FILE: include/linux/fs.h:1544:
+extern ssize_t generic_file_readv(struct file *filp, const struct niovec *iov, 
                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: include/linux/fs.h:1544:
+extern ssize_t generic_file_readv(struct file *filp, const struct niovec *iov, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/fs.h:1544:
+extern ssize_t generic_file_readv(struct file *filp, const struct niovec *iov, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: include/linux/fs.h:1545:
+extern ssize_t generic_file_readv(struct file *filp, const struct niovec *iov, 
 	unsigned long nr_segs, loff_t *ppos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#245: FILE: include/linux/fs.h:1546:
+ssize_t generic_file_writev(struct file *filp, const struct niovec *iov, 
                                          ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: include/linux/fs.h:1546:
+ssize_t generic_file_writev(struct file *filp, const struct niovec *iov, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: include/linux/fs.h:1547:
+ssize_t generic_file_writev(struct file *filp, const struct niovec *iov, 
 			unsigned long nr_segs, loff_t *ppos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: include/linux/uio.h:26:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#294: FILE: include/linux/uio.h:28:
+struct niovec
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: include/linux/uio.h:29:
+^Ivoid __user *iov_base;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: include/linux/uio.h:30:
+^I__kernel_size_t iov_len; $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: mm/filemap.c:42:
+generic_file_direct_IO(int rw, struct kiocb *iocb, const struct niovec *iov,
 	loff_t offset, unsigned long nr_segs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: mm/filemap.c:969:
+__generic_file_aio_read(struct kiocb *iocb, const struct niovec *iov,
 		unsigned long nr_segs, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: mm/filemap.c:1837:
+generic_file_direct_write(struct kiocb *iocb, const struct niovec *iov,
 		unsigned long *nr_segs, loff_t pos, loff_t *ppos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: mm/filemap.c:1877:
+generic_file_buffered_write(struct kiocb *iocb, const struct niovec *iov,
 		unsigned long nr_segs, loff_t pos, loff_t *ppos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: mm/filemap.c:2095:
+generic_file_aio_write_nolock(struct kiocb *iocb, const struct niovec *iov,
 				unsigned long nr_segs, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: mm/filemap.c:2117:
+__generic_file_write_nolock(struct file *file, const struct niovec *iov,
 				unsigned long nr_segs, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: mm/filemap.c:2131:
+generic_file_write_nolock(struct file *file, const struct niovec *iov,
 				unsigned long nr_segs, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#481: FILE: mm/filemap.c:2196:
+ssize_t generic_file_readv(struct file *filp, const struct niovec *iov,
                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: mm/filemap.c:2197:
+ssize_t generic_file_readv(struct file *filp, const struct niovec *iov,
 			unsigned long nr_segs, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: mm/filemap.c:2211:
+ssize_t generic_file_writev(struct file *file, const struct niovec *iov,
 			unsigned long nr_segs, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: mm/filemap.c:2238:
+generic_file_direct_IO(int rw, struct kiocb *iocb, const struct niovec *iov,
 	loff_t offset, unsigned long nr_segs)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 40 warnings, 25 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
