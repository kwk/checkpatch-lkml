WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
On Thu, 21 Aug 2003 08:05:04 -0500 Corey Minyard <cminyard@mvista.com> wrote:

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: char/ipmi/Kconfig:27:
+config IPMI_PANIC_STRING
+	bool 'Generate a OEM events holding the panic string'

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#53: FILE: char/ipmi/Kconfig:29:
I can't decode/translate that quoted string...

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#83: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (0x5 << 2))

Some named constants would be good here (defines/macros)
and below.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[1] == 1'
#83: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (0x5 << 2))

Some named constants would be good here (defines/macros)
and below.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[2] == 0'
#83: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (0x5 << 2))

Some named constants would be good here (defines/macros)
and below.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#88: FILE: char/ipmi/ipmi_msghandler.c:1838:

+	    && (msg->rsp[1] == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#89: FILE: char/ipmi/ipmi_msghandler.c:1839:
+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#99: FILE: char/ipmi/ipmi_msghandler.c:1849:
+	if ((msg->rsp[0] == (0x7 << 2))

Named constant.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[1] == 1'
#99: FILE: char/ipmi/ipmi_msghandler.c:1849:
+	if ((msg->rsp[0] == (0x7 << 2))

Named constant.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[2] == 0'
#99: FILE: char/ipmi/ipmi_msghandler.c:1849:
+	if ((msg->rsp[0] == (0x7 << 2))

Named constant.

+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#103: FILE: char/ipmi/ipmi_msghandler.c:1852:

+	    && (msg->rsp[1] == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#104: FILE: char/ipmi/ipmi_msghandler.c:1853:
+	    && (msg->rsp[1] == 1)
+	    && (msg->rsp[2] == 0))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#107: FILE: char/ipmi/ipmi_msghandler.c:1856:
+		/* A get device id command, save if we are an event
+		   receiver or generator. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#107: FILE: char/ipmi/ipmi_msghandler.c:1856:
+		   receiver or generator. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: char/ipmi/ipmi_msghandler.c:1888:
+	   to make the panic events more useful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#142: FILE: char/ipmi/ipmi_msghandler.c:1920:
+	   string. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: char/ipmi/ipmi_msghandler.c:1921:
+^Iif (!str) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#146: FILE: char/ipmi/ipmi_msghandler.c:1924:
+	for (i=0; i<MAX_IPMI_INTERFACES; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#146: FILE: char/ipmi/ipmi_msghandler.c:1924:
+	for (i=0; i<MAX_IPMI_INTERFACES; i++) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!intf"
#152: FILE: char/ipmi/ipmi_msghandler.c:1930:
+		if (intf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#156: FILE: char/ipmi/ipmi_msghandler.c:1934:
+		/* First job here is to figure out where to send the
+		   OEM events.  There's no way in IPMI to send OEM

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#159: FILE: char/ipmi/ipmi_msghandler.c:1937:
+		   there. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000343525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 9 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000343525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
