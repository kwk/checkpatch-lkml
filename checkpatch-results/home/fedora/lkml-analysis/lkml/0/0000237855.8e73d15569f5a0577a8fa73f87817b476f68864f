ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: Documentation/x86_64/mm.txt:2:
+<previous description obsolete, deleted> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: Documentation/x86_64/mm.txt:3:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: Documentation/x86_64/mm.txt:4:
+Virtual memory map with 4 level page tables: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: Documentation/x86_64/mm.txt:12:
+... unused hole ... $

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#70: FILE: Documentation/x86_64/mm.txt:22:
+but we support upto 46bits. This expands into MBZ space in the page tables.
                ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: arch/x86_64/ia32/syscall32.c:50:
+ ^Ipml4 = pml4_offset(mm, address); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: arch/x86_64/ia32/syscall32.c:50:
+ ^Ipml4 = pml4_offset(mm, address); $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: arch/x86_64/ia32/syscall32.c:50:
+ ^Ipml4 = pml4_offset(mm, address); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/x86_64/ia32/syscall32.c:50:
+ ^Ipml4 = pml4_offset(mm, address); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: arch/x86_64/ia32/syscall32.c:51:
+ ^Ipgd = pgd_alloc(mm, pml4, address);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: arch/x86_64/ia32/syscall32.c:51:
+ ^Ipgd = pgd_alloc(mm, pml4, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: arch/x86_64/ia32/syscall32.c:51:
+ ^Ipgd = pgd_alloc(mm, pml4, address);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/x86_64/ia32/syscall32.c:52:
+ ^Iif (pgd) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: arch/x86_64/ia32/syscall32.c:52:
+ ^Iif (pgd) { $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: arch/x86_64/ia32/syscall32.c:52:
+ ^Iif (pgd) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/x86_64/ia32/syscall32.c:52:
+ ^Iif (pgd) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/x86_64/ia32/syscall32.c:53:
+ ^I^Ipmd = pmd_alloc(mm, pgd, address); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/x86_64/ia32/syscall32.c:53:
+ ^I^Ipmd = pmd_alloc(mm, pgd, address); $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: arch/x86_64/ia32/syscall32.c:53:
+ ^I^Ipmd = pmd_alloc(mm, pgd, address); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/x86_64/ia32/syscall32.c:53:
+ ^I^Ipmd = pmd_alloc(mm, pgd, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/x86_64/ia32/syscall32.c:54:
+ ^I^Iif (pmd && (pte = pte_alloc_map(mm, pmd, address)) != NULL) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: arch/x86_64/ia32/syscall32.c:54:
+ ^I^Iif (pmd && (pte = pte_alloc_map(mm, pmd, address)) != NULL) { $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: arch/x86_64/ia32/syscall32.c:54:
+ ^I^Iif (pmd && (pte = pte_alloc_map(mm, pmd, address)) != NULL) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: arch/x86_64/ia32/syscall32.c:54:
+ ^I^Iif (pmd && (pte = pte_alloc_map(mm, pmd, address)) != NULL) { $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#234: FILE: arch/x86_64/ia32/syscall32.c:54:
+ 		if (pmd && (pte = pte_alloc_map(mm, pmd, address)) != NULL) { 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: arch/x86_64/ia32/syscall32.c:55:
+ ^I^I^Iif (pte_none(*pte)) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: arch/x86_64/ia32/syscall32.c:55:
+ ^I^I^Iif (pte_none(*pte)) { $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#235: FILE: arch/x86_64/ia32/syscall32.c:55:
+ ^I^I^Iif (pte_none(*pte)) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: arch/x86_64/ia32/syscall32.c:55:
+ ^I^I^Iif (pte_none(*pte)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: arch/x86_64/ia32/syscall32.c:56:
+ ^I^I^I^Iset_pte(pte, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: arch/x86_64/ia32/syscall32.c:56:
+ ^I^I^I^Iset_pte(pte, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: arch/x86_64/ia32/syscall32.c:56:
+ ^I^I^I^Iset_pte(pte, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: arch/x86_64/ia32/syscall32.c:56:
+ ^I^I^I^Iset_pte(pte, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: arch/x86_64/ia32/syscall32.c:57:
+ ^I^I^I^I^Imk_pte(virt_to_page(syscall32_page), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: arch/x86_64/ia32/syscall32.c:57:
+ ^I^I^I^I^Imk_pte(virt_to_page(syscall32_page), $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: arch/x86_64/ia32/syscall32.c:57:
+ ^I^I^I^I^Imk_pte(virt_to_page(syscall32_page), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: arch/x86_64/ia32/syscall32.c:57:
+ 				set_pte(pte, 
+ 					mk_pte(virt_to_page(syscall32_page), 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: arch/x86_64/ia32/syscall32.c:57:
+ ^I^I^I^I^Imk_pte(virt_to_page(syscall32_page), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: arch/x86_64/ia32/syscall32.c:58:
+ ^I^I^I^I^I       PAGE_KERNEL_VSYSCALL)); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/x86_64/ia32/syscall32.c:58:
+ ^I^I^I^I^I       PAGE_KERNEL_VSYSCALL)); $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: arch/x86_64/ia32/syscall32.c:58:
+ ^I^I^I^I^I       PAGE_KERNEL_VSYSCALL)); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: arch/x86_64/ia32/syscall32.c:58:
+ 					mk_pte(virt_to_page(syscall32_page), 
+ 					       PAGE_KERNEL_VSYSCALL)); 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/x86_64/ia32/syscall32.c:58:
+ ^I^I^I^I^I       PAGE_KERNEL_VSYSCALL)); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: arch/x86_64/ia32/syscall32.c:59:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: arch/x86_64/ia32/syscall32.c:59:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: arch/x86_64/ia32/syscall32.c:59:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: arch/x86_64/ia32/syscall32.c:60:
+ ^I^I^I/* Flush only the local CPU. Other CPUs taking a fault$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: arch/x86_64/ia32/syscall32.c:60:
+ ^I^I^I/* Flush only the local CPU. Other CPUs taking a fault$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/x86_64/ia32/syscall32.c:60:
+ ^I^I^I/* Flush only the local CPU. Other CPUs taking a fault$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: arch/x86_64/ia32/syscall32.c:61:
+ ^I^I^I   will just end up here again$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#241: FILE: arch/x86_64/ia32/syscall32.c:61:
+ ^I^I^I   will just end up here again$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#241: FILE: arch/x86_64/ia32/syscall32.c:61:
+ 			/* Flush only the local CPU. Other CPUs taking a fault
+ 			   will just end up here again

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#242: FILE: arch/x86_64/ia32/syscall32.c:62:
+			   This probably not needed and just paranoia. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/x86_64/ia32/syscall32.c:63:
+ ^I^I^I__flush_tlb_one(address); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: arch/x86_64/ia32/syscall32.c:63:
+ ^I^I^I__flush_tlb_one(address); $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: arch/x86_64/ia32/syscall32.c:63:
+ ^I^I^I__flush_tlb_one(address); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: arch/x86_64/ia32/syscall32.c:63:
+ ^I^I^I__flush_tlb_one(address); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: arch/x86_64/ia32/syscall32.c:64:
+ ^I^I^Ierr = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: arch/x86_64/ia32/syscall32.c:64:
+ ^I^I^Ierr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: arch/x86_64/ia32/syscall32.c:64:
+ ^I^I^Ierr = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: arch/x86_64/kernel/acpi/sleep.c:64:
+static pml4_t low_ptr; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: arch/x86_64/kernel/acpi/sleep.c:69:
+	pml4_t *slot0 = pml4_offset(current->mm, 0UL);
+	low_ptr = *slot0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: arch/x86_64/kernel/acpi/sleep.c:70:
+^Iset_pml4(slot0, *pml4_offset(current->mm, PAGE_OFFSET)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: arch/x86_64/kernel/acpi/sleep.c:104:
+^Iset_pml4(pml4_offset(current->mm, 0UL), low_ptr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: arch/x86_64/mm/fault.c:233:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: arch/x86_64/mm/fault.c:234:
+ * Handle a fault on the vmalloc or module mapping area $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: arch/x86_64/mm/fault.c:241:
+^Ipte_t *pte, *pte_ref; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: arch/x86_64/mm/fault.c:242:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#356: FILE: arch/x86_64/mm/fault.c:244:
+	/* Copy kernel mappings over when needed. This can also
+	   happen within a race in page table update. In the later

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#357: FILE: arch/x86_64/mm/fault.c:245:
+	   case just flush. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: arch/x86_64/mm/fault.c:246:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: arch/x86_64/mm/fault.c:247:
+^Ipml4 = pml4_offset(current->mm ?: &init_mm, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: arch/x86_64/mm/fault.c:248:
+^Ipml4_ref = pml4_offset_k(address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: arch/x86_64/mm/fault.c:252:
+^I^Iset_pml4(pml4, *pml4_ref); ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: arch/x86_64/mm/fault.c:252:
+^I^Iset_pml4(pml4, *pml4_ref); ^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: arch/x86_64/mm/fault.c:253:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#367: FILE: arch/x86_64/mm/fault.c:255:
+	/* Below here mismatches are bugs because these lower tables
+	   are shared */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: arch/x86_64/mm/fault.c:255:
+	   are shared */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: arch/x86_64/mm/fault.c:256:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: arch/x86_64/mm/fault.c:258:
+^Ipgd_ref = pml4_pgd_offset(pml4_ref, address); ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: arch/x86_64/mm/fault.c:258:
+^Ipgd_ref = pml4_pgd_offset(pml4_ref, address); ^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#374: FILE: arch/x86_64/mm/fault.c:262:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: arch/x86_64/mm/fault.c:268:
+^I^IBUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#380: FILE: arch/x86_64/mm/fault.c:268:
+		BUG(); 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: arch/x86_64/mm/fault.c:274:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: arch/x86_64/mm/fault.c:279:
+int page_fault_trace = 0; $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#391: FILE: arch/x86_64/mm/fault.c:279:
+int page_fault_trace = 0; 

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: arch/x86_64/mm/fault.c:345:
+^I^I^Iif (vmalloc_fault(address) < 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: arch/x86_64/mm/init.c:312:
+^Ipml4_t *pml4 = pml4_offset_k(0UL); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: arch/x86_64/mm/init.c:313:
+^Ipml4_clear(pml4); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: arch/x86_64/mm/init.c:313:
+	pml4_t *pml4 = pml4_offset_k(0UL); 
+	pml4_clear(pml4); 

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: arch/x86_64/mm/init.c:353:
+		pmd_t *pmd;
+		if (pml4_none(*pml4))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: arch/x86_64/mm/init.c:354:
+^I^I^Icontinue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: arch/x86_64/mm/init.c:355:
+^I^Ipgd = pml4_pgd_offset(pml4, address); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#548: FILE: arch/x86_64/mm/ioremap.c:70:
+static inline int remap_area_pgd(pgd_t * pgd, unsigned long address, unsigned long size,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: arch/x86_64/mm/ioremap.c:71:
+static inline int remap_area_pgd(pgd_t * pgd, unsigned long address, unsigned long size,
+	unsigned long phys_addr, unsigned long flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: arch/x86_64/mm/ioremap.c:81:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#561: FILE: arch/x86_64/mm/ioremap.c:83:
+		pmd_t * pmd = pmd_alloc(&init_mm, pgd, address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: arch/x86_64/mm/ioremap.c:84:
+		pmd_t * pmd = pmd_alloc(&init_mm, pgd, address);
+		if (!pmd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: arch/x86_64/mm/ioremap.c:101:
+^Ipml4 = pml4_offset_k(address); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: arch/x86_64/mm/ioremap.c:108:
+		pgd_t *pgd;
+		pgd = pgd_alloc(&init_mm, pml4, address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: arch/x86_64/mm/ioremap.c:113:
+		if (remap_area_pgd(pgd, address, end - address,
 					 phys_addr + address, flags))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: arch/x86_64/mm/pageattr.c:24:
+^I^Ireturn NULL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: arch/x86_64/mm/pageattr.c:105:
+^Ipml4_t *pml4; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: arch/x86_64/mm/pageattr.c:107:
+^Ipmd_t *pmd; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: arch/x86_64/mm/pageattr.c:108:
+^Ipte_t large_pte; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: arch/x86_64/mm/pageattr.c:109:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: arch/x86_64/mm/pageattr.c:111:
+	BUG_ON(pml4_none(*pml4));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: arch/x86_64/mm/pageattr.c:112:
+^Ipgd = pml4_pgd_offset(pml4,address); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#648: FILE: arch/x86_64/mm/pageattr.c:112:
+	pgd = pml4_pgd_offset(pml4,address); 
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: arch/x86_64/mm/pageattr.c:113:
+^IBUG_ON(pgd_none(*pgd)); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#649: FILE: arch/x86_64/mm/pageattr.c:113:
+	BUG_ON(pgd_none(*pgd)); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: arch/x86_64/mm/pageattr.c:115:
+^IBUG_ON(pmd_val(*pmd) & _PAGE_PSE); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#651: FILE: arch/x86_64/mm/pageattr.c:115:
+	BUG_ON(pmd_val(*pmd) & _PAGE_PSE); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: include/asm-x86_64/pgalloc.h:49:
+static inline pml4_t *pml4_alloc(struct mm_struct *mm) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: include/asm-x86_64/pgalloc.h:50:
+{ $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#750: FILE: include/asm-x86_64/pgalloc.h:51:
+	unsigned boundary;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#751: FILE: include/asm-x86_64/pgalloc.h:52:
+	pml4_t *pml4 = (pml4_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
 	                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#752: FILE: include/asm-x86_64/pgalloc.h:53:
+	pml4_t *pml4 = (pml4_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
+	if (!pml4)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: include/asm-x86_64/pgalloc.h:57:
+^I * Could keep a freelist or slab cache of those because the kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: include/asm-x86_64/pgalloc.h:61:
+^Imemset(pml4, 0, boundary * sizeof(pml4_t)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: include/asm-x86_64/pgalloc.h:62:
+^Imemcpy(pml4 + boundary, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: include/asm-x86_64/pgalloc.h:65:
+^Ireturn pml4; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: include/asm-x86_64/pgalloc.h:66:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: include/asm-x86_64/pgalloc.h:69:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: include/asm-x86_64/pgalloc.h:70:
+^IBUG_ON((unsigned long)pml4 & (PAGE_SIZE-1)); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#769: FILE: include/asm-x86_64/pgalloc.h:70:
+	BUG_ON((unsigned long)pml4 & (PAGE_SIZE-1)); 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#769: FILE: include/asm-x86_64/pgalloc.h:70:
+	BUG_ON((unsigned long)pml4 & (PAGE_SIZE-1)); 
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: include/asm-x86_64/pgalloc.h:72:
+} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#780: FILE: include/asm-x86_64/pgalloc.h:103:
+#define __pgd_free_tlb(tlb,x)   pgd_free(x)
                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: include/asm-x86_64/pgtable.h:35:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: include/asm-x86_64/pgtable.h:36:
+ * 4th top level page $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#826: FILE: include/asm-x86_64/pgtable.h:65:
+#define pml4_ERROR(e) \
+	printk("%s:%d: bad pml4 %p(%016lx).\n", __FILE__, __LINE__, &(e), pml4_val(e))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#827: FILE: include/asm-x86_64/pgtable.h:66:
+	printk("%s:%d: bad pml4 %p(%016lx).\n", __FILE__, __LINE__, &(e), pml4_val(e))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: include/asm-x86_64/pgtable.h:98:
+extern inline void pml4_clear (pml4_t * pgd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: include/asm-x86_64/pgtable.h:98:
+extern inline void pml4_clear (pml4_t * pgd)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#848: FILE: include/asm-x86_64/pgtable.h:116:
+#define USER_PTRS_PER_PML4	(TASK_SIZE/PML4_SIZE)
                           	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: include/asm-x86_64/pgtable.h:218:
+static inline unsigned long pml4_bad(pml4_t pgd) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: include/asm-x86_64/pgtable.h:219:
+{ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: include/asm-x86_64/pgtable.h:220:
+       unsigned long val = pml4_val(pgd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: include/asm-x86_64/pgtable.h:221:
+       val &= ~PTE_MASK; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#885: FILE: include/asm-x86_64/pgtable.h:221:
+       unsigned long val = pml4_val(pgd);
+       val &= ~PTE_MASK; 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: include/asm-x86_64/pgtable.h:221:
+       val &= ~PTE_MASK; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: include/asm-x86_64/pgtable.h:222:
+       val &= ~(_PAGE_USER | _PAGE_DIRTY); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: include/asm-x86_64/pgtable.h:222:
+       val &= ~(_PAGE_USER | _PAGE_DIRTY); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#887: FILE: include/asm-x86_64/pgtable.h:223:
+       return val & ~(_PAGE_PRESENT | _PAGE_RW | _PAGE_ACCESSED);      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: include/asm-x86_64/pgtable.h:223:
+       return val & ~(_PAGE_PRESENT | _PAGE_RW | _PAGE_ACCESSED);      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: include/asm-x86_64/pgtable.h:224:
+} $

CHECK:SPACING: No space is necessary after a cast
#902: FILE: include/asm-x86_64/pgtable.h:306:
+#define pml4_page(pml4) ((unsigned long) __va((unsigned long)pml4_val(pml4) & PTE_MASK))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#903: FILE: include/asm-x86_64/pgtable.h:307:
+#define pml4_index(address) (((address) >> PML4_SHIFT) & (PTRS_PER_PML4-1))
                                                                        ^

CHECK:SPACING: No space is necessary after a cast
#909: FILE: include/asm-x86_64/pgtable.h:312:
+#define pml4_pgd_offset(pml4, address) ((pgd_t *) pml4_page(*(pml4)) + pgd_index(address))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#915: FILE: include/asm-x86_64/pgtable.h:317:
+#define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))
                                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: include/asm-x86_64/processor.h:168:
+ * User space process size. 47bits. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237855.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 83 errors, 58 warnings, 12 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237855.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
