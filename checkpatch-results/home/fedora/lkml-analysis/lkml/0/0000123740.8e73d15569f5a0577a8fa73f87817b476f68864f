WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: mm/kmalloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#82: FILE: mm/kmalloc.c:2:
+ * mm/kmalloc.c - A general purpose memory allocator.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#102: FILE: mm/kmalloc.c:22:
+struct cache_sizes malloc_sizes[] =3D {
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: mm/kmalloc.c:23:
+#define CACHE(x) { .cs_size =3D (x) },

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#103: FILE: mm/kmalloc.c:23:
+#define CACHE(x) { .cs_size =3D (x) },
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#105: FILE: mm/kmalloc.c:25:
+=09{ .cs_size =3D ULONG_MAX }
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#105: FILE: mm/kmalloc.c:25:
+=09{ .cs_size =3D ULONG_MAX }
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#111: FILE: mm/kmalloc.c:31:
+=09char *name;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#112: FILE: mm/kmalloc.c:32:
+=09char *name_dma;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#115: FILE: mm/kmalloc.c:35:
+static struct cache_names cache_names[] =3D {
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#116: FILE: mm/kmalloc.c:36:
+#define CACHE(x) { .name =3D "size-" #x, .name_dma =3D "size-" #x "(DMA" }=
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#116: FILE: mm/kmalloc.c:36:
+#define CACHE(x) { .name =3D "size-" #x, .name_dma =3D "size-" #x "(DMA" }=
                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#116: FILE: mm/kmalloc.c:36:
+#define CACHE(x) { .name =3D "size-" #x, .name_dma =3D "size-" #x "(DMA" }=
                                                                           ^

ERROR:SPACING: space required after that close brace '}'
#116: FILE: mm/kmalloc.c:36:
+#define CACHE(x) { .name =3D "size-" #x, .name_dma =3D "size-" #x "(DMA" }=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#116: FILE: mm/kmalloc.c:36:
+#define CACHE(x) { .name =3D "size-" #x, .name_dma =3D "size-" #x "(DMA" }=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#117: FILE: mm/kmalloc.c:36:
,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#119: FILE: mm/kmalloc.c:38:
+=09{ NULL, }
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#125: FILE: mm/kmalloc.c:44:
+=09struct cache_sizes *sizes =3D malloc_sizes;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#125: FILE: mm/kmalloc.c:44:
+=09struct cache_sizes *sizes =3D malloc_sizes;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#126: FILE: mm/kmalloc.c:45:
+=09struct cache_names *names =3D cache_names;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#126: FILE: mm/kmalloc.c:45:
+=09struct cache_names *names =3D cache_names;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#128: FILE: mm/kmalloc.c:47:
+=09while (sizes->cs_size !=3D ULONG_MAX) {
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#128: FILE: mm/kmalloc.c:47:
+=09while (sizes->cs_size !=3D ULONG_MAX) {
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#129: FILE: mm/kmalloc.c:48:
+=09=09sizes->cs_cache =3D kmem_cache_create(names->name,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#129: FILE: mm/kmalloc.c:48:
+=09=09sizes->cs_cache =3D kmem_cache_create(names->name,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#129: FILE: mm/kmalloc.c:48:
+=09=09sizes->cs_cache =3D kmem_cache_create(names->name,
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/kmalloc.c:49:
+=09=09=09=09=09=09    sizes->cs_size, 0, 0,
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: mm/kmalloc.c:50:
+=09=09=09=09=09=09    NULL, NULL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#132: FILE: mm/kmalloc.c:51:
+=09=09sizes->cs_dma_cache =3D kmem_cache_create(names->name_dma,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#132: FILE: mm/kmalloc.c:51:
+=09=09sizes->cs_dma_cache =3D kmem_cache_create(names->name_dma,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#132: FILE: mm/kmalloc.c:51:
+=09=09sizes->cs_dma_cache =3D kmem_cache_create(names->name_dma,
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: mm/kmalloc.c:52:
+=09=09=09=09=09=09=09sizes->cs_size, 0, 0,
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: mm/kmalloc.c:53:
+=09=09=09=09=09=09=09NULL, NULL);
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#135: FILE: mm/kmalloc.c:54:
+=09=09sizes++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#135: FILE: mm/kmalloc.c:54:
+=09=09sizes++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#136: FILE: mm/kmalloc.c:55:
+=09=09names++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#136: FILE: mm/kmalloc.c:55:
+=09=09names++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#137: FILE: mm/kmalloc.c:56:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#142: FILE: mm/kmalloc.c:61:
+=09struct cache_sizes *sizes =3D malloc_sizes;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#142: FILE: mm/kmalloc.c:61:
+=09struct cache_sizes *sizes =3D malloc_sizes;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#144: FILE: mm/kmalloc.c:63:
+=09while (size > sizes->cs_size)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#145: FILE: mm/kmalloc.c:64:
+=09=09sizes++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: mm/kmalloc.c:64:
+=09=09sizes++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#147: FILE: mm/kmalloc.c:66:
+=09if (unlikely(flags & GFP_DMA))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#148: FILE: mm/kmalloc.c:67:
+=09=09return sizes->cs_dma_cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#148: FILE: mm/kmalloc.c:67:
+=09=09return sizes->cs_dma_cache;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#149: FILE: mm/kmalloc.c:68:
+=09return sizes->cs_cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#176: FILE: mm/kmalloc.c:94:
+=09struct kmem_cache *cache =3D find_general_cache(size, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#176: FILE: mm/kmalloc.c:94:
+=09struct kmem_cache *cache =3D find_general_cache(size, flags);
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#177: FILE: mm/kmalloc.c:95:
+=09if (unlikely(cache =3D=3D NULL))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#177: FILE: mm/kmalloc.c:95:
+=09if (unlikely(cache =3D=3D NULL))
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: mm/kmalloc.c:95:
+=09if (unlikely(cache =3D=3D NULL))
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#178: FILE: mm/kmalloc.c:96:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#178: FILE: mm/kmalloc.c:96:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#179: FILE: mm/kmalloc.c:97:
+=09return kmem_cache_alloc(cache, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#185: FILE: mm/kmalloc.c:103:
+=09return __kmalloc(size, flags);
 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: mm/kmalloc.c:114:
+        void *ret =3D kmalloc(size, flags);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/kmalloc.c:114:
+        void *ret =3D kmalloc(size, flags);$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#196: FILE: mm/kmalloc.c:114:
+        void *ret =3D kmalloc(size, flags);
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/kmalloc.c:115:
+        if (ret)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: mm/kmalloc.c:115:
+        void *ret =3D kmalloc(size, flags);
+        if (ret)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/kmalloc.c:115:
+        if (ret)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/kmalloc.c:116:
+                memset(ret, 0, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/kmalloc.c:116:
+                memset(ret, 0, size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/kmalloc.c:117:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/kmalloc.c:117:
+        return ret;$

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#211: FILE: mm/kmalloc.c:129:
+=09size_t len;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#212: FILE: mm/kmalloc.c:130:
+=09char *buf;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#214: FILE: mm/kmalloc.c:132:
+=09if (!s)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#215: FILE: mm/kmalloc.c:133:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: mm/kmalloc.c:133:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#217: FILE: mm/kmalloc.c:135:
+=09len =3D strlen(s) + 1;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#217: FILE: mm/kmalloc.c:135:
+=09len =3D strlen(s) + 1;
        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#218: FILE: mm/kmalloc.c:136:
+=09buf =3D kmalloc(len, gfp);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#218: FILE: mm/kmalloc.c:136:
+=09buf =3D kmalloc(len, gfp);
        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#219: FILE: mm/kmalloc.c:137:
+=09if (buf)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#220: FILE: mm/kmalloc.c:138:
+=09=09memcpy(buf, s, len);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#220: FILE: mm/kmalloc.c:138:
+=09=09memcpy(buf, s, len);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#221: FILE: mm/kmalloc.c:139:
+=09return buf;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#228: FILE: mm/kmalloc.c:146:
+=09return (struct kmem_cache *)page->lru.next;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#242: FILE: mm/kmalloc.c:160:
+=09struct page *page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#243: FILE: mm/kmalloc.c:161:
+=09struct kmem_cache *cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#245: FILE: mm/kmalloc.c:163:
+=09if (unlikely(!obj))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#246: FILE: mm/kmalloc.c:164:
+=09=09return;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#246: FILE: mm/kmalloc.c:164:
+=09=09return;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#248: FILE: mm/kmalloc.c:166:
+=09page =3D virt_to_page(obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#248: FILE: mm/kmalloc.c:166:
+=09page =3D virt_to_page(obj);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#249: FILE: mm/kmalloc.c:167:
+=09cache =3D page_get_cache(page);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#249: FILE: mm/kmalloc.c:167:
+=09cache =3D page_get_cache(page);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#250: FILE: mm/kmalloc.c:168:
+=09kmem_cache_free(cache, (void *)obj);
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#260: FILE: mm/kmem.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#261: FILE: mm/kmem.c:2:
+ * mm/kmem.c - An object-caching memory allocator.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#308: FILE: mm/kmem.c:49:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: mm/kmem.c:51:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#312: FILE: mm/kmem.c:53:
+static struct semaphore=09cache_chain_sem;
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#319: FILE: mm/kmem.c:60:
+#define REAP_TIMEOUT_CPU_CACHES (2*HZ)
                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: mm/kmem.c:62:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#327: FILE: mm/kmem.c:68:
+static void kmem_magazine_ctor(void *, struct kmem_cache *, unsigned long)=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#330: FILE: mm/kmem.c:70:
+static struct kmem_cache cache_cache =3D {
                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#331: FILE: mm/kmem.c:71:
+=09.name =3D "cache-cache",
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#331: FILE: mm/kmem.c:71:
+=09.name =3D "cache-cache",
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#332: FILE: mm/kmem.c:72:
+=09.objsize =3D sizeof(struct kmem_cache),
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#332: FILE: mm/kmem.c:72:
+=09.objsize =3D sizeof(struct kmem_cache),
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#333: FILE: mm/kmem.c:73:
+=09.ctor =3D kmem_cache_ctor
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#333: FILE: mm/kmem.c:73:
+=09.ctor =3D kmem_cache_ctor
          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#336: FILE: mm/kmem.c:76:
+static struct kmem_cache slab_cache =3D {
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#337: FILE: mm/kmem.c:77:
+=09.name =3D "slab-cache",
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#337: FILE: mm/kmem.c:77:
+=09.name =3D "slab-cache",
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#338: FILE: mm/kmem.c:78:
+=09.objsize =3D sizeof(struct kmem_slab)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#338: FILE: mm/kmem.c:78:
+=09.objsize =3D sizeof(struct kmem_slab)
             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#341: FILE: mm/kmem.c:81:
+static struct kmem_cache magazine_cache =3D {
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#342: FILE: mm/kmem.c:82:
+=09.name =3D "magazine-cache",
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#342: FILE: mm/kmem.c:82:
+=09.name =3D "magazine-cache",
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#343: FILE: mm/kmem.c:83:
+=09.objsize =3D sizeof(struct kmem_magazine),
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#343: FILE: mm/kmem.c:83:
+=09.objsize =3D sizeof(struct kmem_magazine),
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#344: FILE: mm/kmem.c:84:
+=09.ctor =3D kmem_magazine_ctor
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#344: FILE: mm/kmem.c:84:
+=09.ctor =3D kmem_magazine_ctor
          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#347: FILE: mm/kmem.c:87:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: mm/kmem.c:95:
+=09page->lru.next =3D (struct list_head *)cache;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#355: FILE: mm/kmem.c:95:
+=09page->lru.next =3D (struct list_head *)cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#355: FILE: mm/kmem.c:95:
+=09page->lru.next =3D (struct list_head *)cache;
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#360: FILE: mm/kmem.c:100:
+=09return (struct kmem_cache *)page->lru.next;
 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#365: FILE: mm/kmem.c:105:
+=09page->lru.prev =3D (struct list_head *)slab;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#365: FILE: mm/kmem.c:105:
+=09page->lru.prev =3D (struct list_head *)slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#365: FILE: mm/kmem.c:105:
+=09page->lru.prev =3D (struct list_head *)slab;
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#370: FILE: mm/kmem.c:110:
+=09return (struct kmem_slab *)page->lru.prev;
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: mm/kmem.c:113:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#380: FILE: mm/kmem.c:120:
+=09cache->stats.grown++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#385: FILE: mm/kmem.c:125:
+=09cache->stats.reaped++;
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#388: FILE: mm/kmem.c:128:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#395: FILE: mm/kmem.c:135:
+=09memset(mag, 0, sizeof(*mag));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#396: FILE: mm/kmem.c:136:
+=09INIT_LIST_HEAD(&mag->list);
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: mm/kmem.c:140:
+static void kmem_magazine_ctor(void *obj, struct kmem_cache *cache,
+=09=09=09       unsigned long flags)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#400: FILE: mm/kmem.c:140:
+=09=09=09       unsigned long flags)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: mm/kmem.c:140:
+=09=09=09       unsigned long flags)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: mm/kmem.c:140:
+=09=09=09       unsigned long flags)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#402: FILE: mm/kmem.c:142:
+=09struct kmem_magazine *mag =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#402: FILE: mm/kmem.c:142:
+=09struct kmem_magazine *mag =3D obj;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#403: FILE: mm/kmem.c:143:
+=09if (cache !=3D &magazine_cache)
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#403: FILE: mm/kmem.c:143:
+=09if (cache !=3D &magazine_cache)
              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#403: FILE: mm/kmem.c:143:
+=09if (cache !=3D &magazine_cache)
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#404: FILE: mm/kmem.c:144:
+=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: mm/kmem.c:144:
+=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#405: FILE: mm/kmem.c:145:
+=09init_magazine(mag);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#410: FILE: mm/kmem.c:150:
+=09return mag->rounds =3D=3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#410: FILE: mm/kmem.c:150:
+=09return mag->rounds =3D=3D 0;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: mm/kmem.c:150:
+=09return mag->rounds =3D=3D 0;
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#415: FILE: mm/kmem.c:155:
+=09return mag->rounds =3D=3D MAX_ROUNDS;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#415: FILE: mm/kmem.c:155:
+=09return mag->rounds =3D=3D MAX_ROUNDS;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#415: FILE: mm/kmem.c:155:
+=09return mag->rounds =3D=3D MAX_ROUNDS;
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#420: FILE: mm/kmem.c:160:
+=09BUG_ON(magazine_is_empty(mag));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#421: FILE: mm/kmem.c:161:
+=09return mag->objs[--mag->rounds];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#426: FILE: mm/kmem.c:166:
+=09BUG_ON(magazine_is_full(mag));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#427: FILE: mm/kmem.c:167:
+=09mag->objs[mag->rounds++] =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#427: FILE: mm/kmem.c:167:
+=09mag->objs[mag->rounds++] =3D obj;
                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: mm/kmem.c:171:
+static struct kmem_cpu_cache *__cpu_cache_get(struct kmem_cache *cache,
+=09=09=09=09=09      unsigned long cpu)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#431: FILE: mm/kmem.c:171:
+=09=09=09=09=09      unsigned long cpu)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: mm/kmem.c:171:
+=09=09=09=09=09      unsigned long cpu)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: mm/kmem.c:171:
+=09=09=09=09=09      unsigned long cpu)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: mm/kmem.c:171:
+=09=09=09=09=09      unsigned long cpu)
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: mm/kmem.c:171:
+=09=09=09=09=09      unsigned long cpu)
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#433: FILE: mm/kmem.c:173:
+=09return &cache->cpu_cache[cpu];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#438: FILE: mm/kmem.c:178:
+=09return __cpu_cache_get(cache, smp_processor_id());
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: mm/kmem.c:182:
+static void depot_put_full(struct kmem_cache *cache,
+=09=09=09   struct kmem_magazine *magazine)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#442: FILE: mm/kmem.c:182:
+=09=09=09   struct kmem_magazine *magazine)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#442: FILE: mm/kmem.c:182:
+=09=09=09   struct kmem_magazine *magazine)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#442: FILE: mm/kmem.c:182:
+=09=09=09   struct kmem_magazine *magazine)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#444: FILE: mm/kmem.c:184:
+=09BUG_ON(!magazine_is_full(magazine));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#445: FILE: mm/kmem.c:185:
+=09list_add(&magazine->list, &cache->full_magazines);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#450: FILE: mm/kmem.c:190:
+=09struct kmem_magazine *ret =3D list_entry(cache->full_magazines.next,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#450: FILE: mm/kmem.c:190:
+=09struct kmem_magazine *ret =3D list_entry(cache->full_magazines.next,
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#451: FILE: mm/kmem.c:191:
+=09=09=09=09=09       struct kmem_magazine, list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: mm/kmem.c:191:
+=09=09=09=09=09       struct kmem_magazine, list);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: mm/kmem.c:191:
+=09=09=09=09=09       struct kmem_magazine, list);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: mm/kmem.c:191:
+=09=09=09=09=09       struct kmem_magazine, list);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: mm/kmem.c:191:
+=09=09=09=09=09       struct kmem_magazine, list);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#452: FILE: mm/kmem.c:192:
+=09list_del(&ret->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#453: FILE: mm/kmem.c:193:
+=09BUG_ON(!magazine_is_full(ret));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#454: FILE: mm/kmem.c:194:
+=09return ret;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: mm/kmem.c:198:
+static void depot_put_empty(struct kmem_cache *cache,
+=09=09=09    struct kmem_magazine *magazine)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#458: FILE: mm/kmem.c:198:
+=09=09=09    struct kmem_magazine *magazine)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#458: FILE: mm/kmem.c:198:
+=09=09=09    struct kmem_magazine *magazine)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#458: FILE: mm/kmem.c:198:
+=09=09=09    struct kmem_magazine *magazine)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#460: FILE: mm/kmem.c:200:
+=09BUG_ON(!magazine_is_empty(magazine));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#461: FILE: mm/kmem.c:201:
+=09list_add(&magazine->list, &cache->empty_magazines);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#466: FILE: mm/kmem.c:206:
+=09struct kmem_magazine *ret =3D list_entry(cache->empty_magazines.next,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#466: FILE: mm/kmem.c:206:
+=09struct kmem_magazine *ret =3D list_entry(cache->empty_magazines.next,
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#467: FILE: mm/kmem.c:207:
+=09=09=09=09=09       struct kmem_magazine, list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: mm/kmem.c:207:
+=09=09=09=09=09       struct kmem_magazine, list);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: mm/kmem.c:207:
+=09=09=09=09=09       struct kmem_magazine, list);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: mm/kmem.c:207:
+=09=09=09=09=09       struct kmem_magazine, list);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: mm/kmem.c:207:
+=09=09=09=09=09       struct kmem_magazine, list);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#468: FILE: mm/kmem.c:208:
+=09list_del(&ret->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#469: FILE: mm/kmem.c:209:
+=09BUG_ON(!magazine_is_empty(ret));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#470: FILE: mm/kmem.c:210:
+=09return ret;
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#473: FILE: mm/kmem.c:213:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#480: FILE: mm/kmem.c:220:
+=09return cache->name;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/kmem.c:225:
+static inline struct kmem_bufctl *obj_to_bufctl(struct kmem_cache *cache,
+=09=09=09=09=09=09struct kmem_slab *slab,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/kmem.c:225:
+=09=09=09=09=09=09struct kmem_slab *slab,
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/kmem.c:226:
+=09=09=09=09=09=09void *ptr)
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#488: FILE: mm/kmem.c:228:
+=09return ptr + (cache->objsize) - sizeof(struct kmem_bufctl);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#493: FILE: mm/kmem.c:233:
+=09spin_lock_init(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#494: FILE: mm/kmem.c:234:
+=09INIT_LIST_HEAD(&cache->full_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#495: FILE: mm/kmem.c:235:
+=09INIT_LIST_HEAD(&cache->partial_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#496: FILE: mm/kmem.c:236:
+=09INIT_LIST_HEAD(&cache->empty_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#497: FILE: mm/kmem.c:237:
+=09INIT_LIST_HEAD(&cache->full_magazines);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#498: FILE: mm/kmem.c:238:
+=09INIT_LIST_HEAD(&cache->empty_magazines);
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: mm/kmem.c:242:
+static void kmem_cache_ctor(void *obj, struct kmem_cache *cache,
+=09=09=09    unsigned long flags)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#502: FILE: mm/kmem.c:242:
+=09=09=09    unsigned long flags)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#502: FILE: mm/kmem.c:242:
+=09=09=09    unsigned long flags)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#502: FILE: mm/kmem.c:242:
+=09=09=09    unsigned long flags)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#504: FILE: mm/kmem.c:244:
+=09struct kmem_cache *cachep =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#504: FILE: mm/kmem.c:244:
+=09struct kmem_cache *cachep =3D obj;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#505: FILE: mm/kmem.c:245:
+=09if (cache !=3D &cache_cache)
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#505: FILE: mm/kmem.c:245:
+=09if (cache !=3D &cache_cache)
              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#505: FILE: mm/kmem.c:245:
+=09if (cache !=3D &cache_cache)
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#506: FILE: mm/kmem.c:246:
+=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#506: FILE: mm/kmem.c:246:
+=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#507: FILE: mm/kmem.c:247:
+=09init_cache(cachep);
 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#510: FILE: mm/kmem.c:250:
+#define MAX_WASTAGE (PAGE_SIZE/8)
                               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#514: FILE: mm/kmem.c:254:
+=09return cache->objsize < MAX_WASTAGE;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#519: FILE: mm/kmem.c:259:
+=09return (1UL << order) * PAGE_SIZE;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#524: FILE: mm/kmem.c:264:
+=09return order_to_size(cache->cache_order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#529: FILE: mm/kmem.c:269:
+=09unsigned long mgmt_size =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#529: FILE: mm/kmem.c:269:
+=09unsigned long mgmt_size =3D 0;
                            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#530: FILE: mm/kmem.c:270:
+=09if (mgmt_in_slab(cache))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#531: FILE: mm/kmem.c:271:
+=09=09mgmt_size =3D sizeof(struct kmem_slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#531: FILE: mm/kmem.c:271:
+=09=09mgmt_size =3D sizeof(struct kmem_slab);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#531: FILE: mm/kmem.c:271:
+=09=09mgmt_size =3D sizeof(struct kmem_slab);
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#533: FILE: mm/kmem.c:273:
+=09return (slab_size(cache) - mgmt_size) / cache->objsize;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: mm/kmem.c:277:
+static void *obj_at(struct kmem_cache *cache, struct kmem_slab *slab,
+=09=09    unsigned long idx)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#537: FILE: mm/kmem.c:277:
+=09=09    unsigned long idx)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: mm/kmem.c:277:
+=09=09    unsigned long idx)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#539: FILE: mm/kmem.c:279:
+=09return slab->mem + idx * cache->objsize;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#542: FILE: mm/kmem.c:282:
+static void init_slab_bufctl(struct kmem_cache *cache, struct kmem_slab *s=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#544: FILE: mm/kmem.c:283:
+static void init_slab_bufctl(struct kmem_cache *cache, struct kmem_slab *s=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#545: FILE: mm/kmem.c:284:
+=09unsigned long i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#546: FILE: mm/kmem.c:285:
+=09struct kmem_bufctl *bufctl;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#547: FILE: mm/kmem.c:286:
+=09void *obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#549: FILE: mm/kmem.c:288:
+=09for (i =3D 0; i < cache->slab_capacity-1; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#549: FILE: mm/kmem.c:288:
+=09for (i =3D 0; i < cache->slab_capacity-1; i++) {
           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#549: FILE: mm/kmem.c:288:
+=09for (i =3D 0; i < cache->slab_capacity-1; i++) {
                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#550: FILE: mm/kmem.c:289:
+=09=09obj =3D obj_at(cache, slab, i);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#550: FILE: mm/kmem.c:289:
+=09=09obj =3D obj_at(cache, slab, i);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#550: FILE: mm/kmem.c:289:
+=09=09obj =3D obj_at(cache, slab, i);
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#551: FILE: mm/kmem.c:290:
+=09=09bufctl =3D obj_to_bufctl(cache, slab, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#551: FILE: mm/kmem.c:290:
+=09=09bufctl =3D obj_to_bufctl(cache, slab, obj);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#551: FILE: mm/kmem.c:290:
+=09=09bufctl =3D obj_to_bufctl(cache, slab, obj);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#552: FILE: mm/kmem.c:291:
+=09=09bufctl->addr =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#552: FILE: mm/kmem.c:291:
+=09=09bufctl->addr =3D obj;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#552: FILE: mm/kmem.c:291:
+=09=09bufctl->addr =3D obj;
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#553: FILE: mm/kmem.c:292:
+=09=09bufctl->next =3D obj_to_bufctl(cache, slab, obj+cache->objsize);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#553: FILE: mm/kmem.c:292:
+=09=09bufctl->next =3D obj_to_bufctl(cache, slab, obj+cache->objsize);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#553: FILE: mm/kmem.c:292:
+=09=09bufctl->next =3D obj_to_bufctl(cache, slab, obj+cache->objsize);
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#553: FILE: mm/kmem.c:292:
+=09=09bufctl->next =3D obj_to_bufctl(cache, slab, obj+cache->objsize);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#554: FILE: mm/kmem.c:293:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#555: FILE: mm/kmem.c:294:
+=09obj =3D obj_at(cache, slab, cache->slab_capacity-1);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#555: FILE: mm/kmem.c:294:
+=09obj =3D obj_at(cache, slab, cache->slab_capacity-1);
        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#555: FILE: mm/kmem.c:294:
+=09obj =3D obj_at(cache, slab, cache->slab_capacity-1);
                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#556: FILE: mm/kmem.c:295:
+=09bufctl =3D obj_to_bufctl(cache, slab, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#556: FILE: mm/kmem.c:295:
+=09bufctl =3D obj_to_bufctl(cache, slab, obj);
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#557: FILE: mm/kmem.c:296:
+=09bufctl->addr =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#557: FILE: mm/kmem.c:296:
+=09bufctl->addr =3D obj;
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#558: FILE: mm/kmem.c:297:
+=09bufctl->next =3D NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#558: FILE: mm/kmem.c:297:
+=09bufctl->next =3D NULL;
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#560: FILE: mm/kmem.c:299:
+=09slab->free =3D obj_to_bufctl(cache, slab, slab->mem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#560: FILE: mm/kmem.c:299:
+=09slab->free =3D obj_to_bufctl(cache, slab, slab->mem);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#563: FILE: mm/kmem.c:302:
+static struct kmem_slab *create_slab(struct kmem_cache *cache, gfp_t gfp_f=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#565: FILE: mm/kmem.c:303:
+static struct kmem_slab *create_slab(struct kmem_cache *cache, gfp_t gfp_f=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#566: FILE: mm/kmem.c:304:
+=09struct page *page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#567: FILE: mm/kmem.c:305:
+=09void *addr;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#568: FILE: mm/kmem.c:306:
+=09struct kmem_slab *slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#569: FILE: mm/kmem.c:307:
+=09int nr_pages;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#571: FILE: mm/kmem.c:309:
+=09page =3D alloc_pages(cache->gfp_flags, cache->cache_order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#571: FILE: mm/kmem.c:309:
+=09page =3D alloc_pages(cache->gfp_flags, cache->cache_order);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#572: FILE: mm/kmem.c:310:
+=09if (!page)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#573: FILE: mm/kmem.c:311:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#573: FILE: mm/kmem.c:311:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#575: FILE: mm/kmem.c:313:
+=09addr =3D page_address(page);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#575: FILE: mm/kmem.c:313:
+=09addr =3D page_address(page);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#577: FILE: mm/kmem.c:315:
+=09if (mgmt_in_slab(cache))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#578: FILE: mm/kmem.c:316:
+=09=09slab =3D addr + slab_size(cache) - sizeof(*slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#578: FILE: mm/kmem.c:316:
+=09=09slab =3D addr + slab_size(cache) - sizeof(*slab);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#578: FILE: mm/kmem.c:316:
+=09=09slab =3D addr + slab_size(cache) - sizeof(*slab);
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#579: FILE: mm/kmem.c:317:
+=09else {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#580: FILE: mm/kmem.c:318:
+=09=09slab =3D kmem_cache_alloc(&slab_cache, gfp_flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#580: FILE: mm/kmem.c:318:
+=09=09slab =3D kmem_cache_alloc(&slab_cache, gfp_flags);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#580: FILE: mm/kmem.c:318:
+=09=09slab =3D kmem_cache_alloc(&slab_cache, gfp_flags);
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#581: FILE: mm/kmem.c:319:
+=09=09if (!slab)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#581: FILE: mm/kmem.c:319:
+=09=09if (!slab)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#582: FILE: mm/kmem.c:320:
+=09=09=09goto failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#582: FILE: mm/kmem.c:320:
+=09=09=09goto failed;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#582: FILE: mm/kmem.c:320:
+=09=09=09goto failed;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#583: FILE: mm/kmem.c:321:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#585: FILE: mm/kmem.c:323:
+=09INIT_LIST_HEAD(&slab->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#586: FILE: mm/kmem.c:324:
+=09slab->nr_available =3D cache->slab_capacity;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#586: FILE: mm/kmem.c:324:
+=09slab->nr_available =3D cache->slab_capacity;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#587: FILE: mm/kmem.c:325:
+=09slab->mem =3D addr;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#587: FILE: mm/kmem.c:325:
+=09slab->mem =3D addr;
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#588: FILE: mm/kmem.c:326:
+=09init_slab_bufctl(cache, slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#590: FILE: mm/kmem.c:328:
+=09nr_pages =3D 1 << cache->cache_order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#590: FILE: mm/kmem.c:328:
+=09nr_pages =3D 1 << cache->cache_order;
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#591: FILE: mm/kmem.c:329:
+=09add_page_state(nr_slab, nr_pages);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#593: FILE: mm/kmem.c:331:
+=09while (nr_pages--) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#594: FILE: mm/kmem.c:332:
+=09=09SetPageSlab(page);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#594: FILE: mm/kmem.c:332:
+=09=09SetPageSlab(page);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#595: FILE: mm/kmem.c:333:
+=09=09page_set_cache(page, cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#595: FILE: mm/kmem.c:333:
+=09=09page_set_cache(page, cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#596: FILE: mm/kmem.c:334:
+=09=09page_set_slab(page, slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#596: FILE: mm/kmem.c:334:
+=09=09page_set_slab(page, slab);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#597: FILE: mm/kmem.c:335:
+=09=09page++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#597: FILE: mm/kmem.c:335:
+=09=09page++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#598: FILE: mm/kmem.c:336:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#600: FILE: mm/kmem.c:338:
+=09cache->free_objects +=3D cache->slab_capacity;
 ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#600: FILE: mm/kmem.c:338:
+=09cache->free_objects +=3D cache->slab_capacity;
                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#602: FILE: mm/kmem.c:340:
+=09return slab;
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#604: FILE: mm/kmem.c:342:
+  failed:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#605: FILE: mm/kmem.c:343:
+=09free_pages((unsigned long)addr, cache->cache_order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#606: FILE: mm/kmem.c:344:
+=09return NULL;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: mm/kmem.c:348:
+static void construct_object(void *obj, struct kmem_cache *cache,
+=09=09=09     gfp_t gfp_flags)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#610: FILE: mm/kmem.c:348:
+=09=09=09     gfp_t gfp_flags)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: mm/kmem.c:348:
+=09=09=09     gfp_t gfp_flags)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: mm/kmem.c:348:
+=09=09=09     gfp_t gfp_flags)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#612: FILE: mm/kmem.c:350:
+=09unsigned long ctor_flags =3D SLAB_CTOR_CONSTRUCTOR;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#612: FILE: mm/kmem.c:350:
+=09unsigned long ctor_flags =3D SLAB_CTOR_CONSTRUCTOR;
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#614: FILE: mm/kmem.c:352:
+=09if (!cache->ctor)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#615: FILE: mm/kmem.c:353:
+=09=09return;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#615: FILE: mm/kmem.c:353:
+=09=09return;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#617: FILE: mm/kmem.c:355:
+=09if (!(gfp_flags & __GFP_WAIT))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#618: FILE: mm/kmem.c:356:
+=09=09ctor_flags |=3D SLAB_CTOR_ATOMIC;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#618: FILE: mm/kmem.c:356:
+=09=09ctor_flags |=3D SLAB_CTOR_ATOMIC;
    ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#618: FILE: mm/kmem.c:356:
+=09=09ctor_flags |=3D SLAB_CTOR_ATOMIC;
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#620: FILE: mm/kmem.c:358:
+=09cache->ctor(obj, cache, ctor_flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#625: FILE: mm/kmem.c:363:
+=09if (unlikely(cache->dtor))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#626: FILE: mm/kmem.c:364:
+=09=09cache->dtor(obj, cache, 0);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#626: FILE: mm/kmem.c:364:
+=09=09cache->dtor(obj, cache, 0);
    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#631: FILE: mm/kmem.c:369:
+=09unsigned long addr =3D (unsigned long)slab->mem;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#631: FILE: mm/kmem.c:369:
+=09unsigned long addr =3D (unsigned long)slab->mem;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#631: FILE: mm/kmem.c:369:
+=09unsigned long addr =3D (unsigned long)slab->mem;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#632: FILE: mm/kmem.c:370:
+=09struct page *page =3D virt_to_page(addr);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#632: FILE: mm/kmem.c:370:
+=09struct page *page =3D virt_to_page(addr);
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#633: FILE: mm/kmem.c:371:
+=09unsigned long nr_pages;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#635: FILE: mm/kmem.c:373:
+=09BUG_ON(slab->nr_available !=3D cache->slab_capacity);
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#635: FILE: mm/kmem.c:373:
+=09BUG_ON(slab->nr_available !=3D cache->slab_capacity);
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#637: FILE: mm/kmem.c:375:
+=09if (!mgmt_in_slab(cache))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#638: FILE: mm/kmem.c:376:
+=09=09kmem_cache_free(&slab_cache, slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#638: FILE: mm/kmem.c:376:
+=09=09kmem_cache_free(&slab_cache, slab);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#640: FILE: mm/kmem.c:378:
+=09nr_pages =3D 1 << cache->cache_order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#640: FILE: mm/kmem.c:378:
+=09nr_pages =3D 1 << cache->cache_order;
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#642: FILE: mm/kmem.c:380:
+=09sub_page_state(nr_slab, nr_pages);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#644: FILE: mm/kmem.c:382:
+=09while (nr_pages--) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#645: FILE: mm/kmem.c:383:
+=09=09if (!TestClearPageSlab(page))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#645: FILE: mm/kmem.c:383:
+=09=09if (!TestClearPageSlab(page))
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#646: FILE: mm/kmem.c:384:
+=09=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: mm/kmem.c:384:
+=09=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: mm/kmem.c:384:
+=09=09=09BUG();
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#647: FILE: mm/kmem.c:385:
+=09=09page++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#647: FILE: mm/kmem.c:385:
+=09=09page++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#648: FILE: mm/kmem.c:386:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#649: FILE: mm/kmem.c:387:
+=09free_pages(addr, cache->cache_order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#650: FILE: mm/kmem.c:388:
+=09cache->free_objects -=3D cache->slab_capacity;
 ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#650: FILE: mm/kmem.c:388:
+=09cache->free_objects -=3D cache->slab_capacity;
                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#652: FILE: mm/kmem.c:390:
+=09stats_inc_reaped(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#655: FILE: mm/kmem.c:393:
+static struct kmem_slab *expand_cache(struct kmem_cache *cache, gfp_t gfp_=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#657: FILE: mm/kmem.c:394:
+static struct kmem_slab *expand_cache(struct kmem_cache *cache, gfp_t gfp_=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#658: FILE: mm/kmem.c:395:
+=09struct kmem_slab *slab =3D create_slab(cache, gfp_flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#658: FILE: mm/kmem.c:395:
+=09struct kmem_slab *slab =3D create_slab(cache, gfp_flags);
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#659: FILE: mm/kmem.c:396:
+=09if (!slab)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#660: FILE: mm/kmem.c:397:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#660: FILE: mm/kmem.c:397:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#662: FILE: mm/kmem.c:399:
+=09list_add_tail(&slab->list, &cache->full_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#663: FILE: mm/kmem.c:400:
+=09stats_inc_grown(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#665: FILE: mm/kmem.c:402:
+=09return slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#670: FILE: mm/kmem.c:407:
+=09struct kmem_slab *slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#671: FILE: mm/kmem.c:408:
+=09struct list_head *list =3D NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#671: FILE: mm/kmem.c:408:
+=09struct list_head *list =3D NULL;
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#672: FILE: mm/kmem.c:409:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#673: FILE: mm/kmem.c:410:
+=09if (!list_empty(&cache->partial_slabs))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#674: FILE: mm/kmem.c:411:
+=09=09list =3D &cache->partial_slabs;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#674: FILE: mm/kmem.c:411:
+=09=09list =3D &cache->partial_slabs;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#674: FILE: mm/kmem.c:411:
+=09=09list =3D &cache->partial_slabs;
            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#674: FILE: mm/kmem.c:411:
+=09=09list =3D &cache->partial_slabs;
                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#675: FILE: mm/kmem.c:412:
+=09else if (!list_empty(&cache->full_slabs))
+=09=09list =3D &cache->full_slabs;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#675: FILE: mm/kmem.c:412:
+=09else if (!list_empty(&cache->full_slabs))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#676: FILE: mm/kmem.c:413:
+=09=09list =3D &cache->full_slabs;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#676: FILE: mm/kmem.c:413:
+=09=09list =3D &cache->full_slabs;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#676: FILE: mm/kmem.c:413:
+=09=09list =3D &cache->full_slabs;
            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#676: FILE: mm/kmem.c:413:
+=09=09list =3D &cache->full_slabs;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#677: FILE: mm/kmem.c:414:
+=09else
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#678: FILE: mm/kmem.c:415:
+=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#678: FILE: mm/kmem.c:415:
+=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#680: FILE: mm/kmem.c:417:
+=09slab =3D list_entry(list->next, struct kmem_slab, list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#680: FILE: mm/kmem.c:417:
+=09slab =3D list_entry(list->next, struct kmem_slab, list);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#681: FILE: mm/kmem.c:418:
+=09BUG_ON(!slab->nr_available);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#682: FILE: mm/kmem.c:419:
+=09return slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#687: FILE: mm/kmem.c:424:
+=09void *obj =3D slab->free->addr;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#687: FILE: mm/kmem.c:424:
+=09void *obj =3D slab->free->addr;
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#688: FILE: mm/kmem.c:425:
+=09slab->free =3D slab->free->next;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#688: FILE: mm/kmem.c:425:
+=09slab->free =3D slab->free->next;
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#689: FILE: mm/kmem.c:426:
+=09slab->nr_available--;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#690: FILE: mm/kmem.c:427:
+=09cache->free_objects--;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#691: FILE: mm/kmem.c:428:
+=09return obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#697: FILE: mm/kmem.c:434:
+=09struct kmem_slab *slab;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#698: FILE: mm/kmem.c:435:
+=09void *ret;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#700: FILE: mm/kmem.c:437:
+=09if (list_empty(&cache->partial_slabs) &&
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#701: FILE: mm/kmem.c:438:
+=09    list_empty(&cache->full_slabs) &&
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#702: FILE: mm/kmem.c:439:
+=09    !expand_cache(cache, gfp_flags))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#703: FILE: mm/kmem.c:440:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#703: FILE: mm/kmem.c:440:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#705: FILE: mm/kmem.c:442:
+=09slab =3D find_slab(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#705: FILE: mm/kmem.c:442:
+=09slab =3D find_slab(cache);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#706: FILE: mm/kmem.c:443:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#706: FILE: mm/kmem.c:443:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#706: FILE: mm/kmem.c:443:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#707: FILE: mm/kmem.c:444:
+=09=09list_move(&slab->list, &cache->partial_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#707: FILE: mm/kmem.c:444:
+=09=09list_move(&slab->list, &cache->partial_slabs);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#709: FILE: mm/kmem.c:446:
+=09ret =3D alloc_obj(cache, slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#709: FILE: mm/kmem.c:446:
+=09ret =3D alloc_obj(cache, slab);
        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#710: FILE: mm/kmem.c:447:
+=09if (!slab->nr_available)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#711: FILE: mm/kmem.c:448:
+=09=09list_move(&slab->list, &cache->empty_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#711: FILE: mm/kmem.c:448:
+=09=09list_move(&slab->list, &cache->empty_slabs);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#713: FILE: mm/kmem.c:450:
+=09return ret;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#718: FILE: mm/kmem.c:455:
+=09struct kmem_magazine *tmp =3D cpu_cache->loaded;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#718: FILE: mm/kmem.c:455:
+=09struct kmem_magazine *tmp =3D cpu_cache->loaded;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#719: FILE: mm/kmem.c:456:
+=09cpu_cache->loaded =3D cpu_cache->prev;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#719: FILE: mm/kmem.c:456:
+=09cpu_cache->loaded =3D cpu_cache->prev;
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#720: FILE: mm/kmem.c:457:
+=09cpu_cache->prev =3D tmp;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#720: FILE: mm/kmem.c:457:
+=09cpu_cache->prev =3D tmp;
                    ^

CHECK:SPACING: No space is necessary after a cast
#738: FILE: mm/kmem.c:475:
+=09unsigned long addr =3D (unsigned long) ptr;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#738: FILE: mm/kmem.c:475:
+=09unsigned long addr =3D (unsigned long) ptr;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#738: FILE: mm/kmem.c:475:
+=09unsigned long addr =3D (unsigned long) ptr;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#738: FILE: mm/kmem.c:475:
+=09unsigned long addr =3D (unsigned long) ptr;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#739: FILE: mm/kmem.c:476:
+=09unsigned long min_addr =3D PAGE_OFFSET;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#739: FILE: mm/kmem.c:476:
+=09unsigned long min_addr =3D PAGE_OFFSET;
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#740: FILE: mm/kmem.c:477:
+=09unsigned long size =3D cache->objsize;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#740: FILE: mm/kmem.c:477:
+=09unsigned long size =3D cache->objsize;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#741: FILE: mm/kmem.c:478:
+=09struct page *page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#743: FILE: mm/kmem.c:480:
+=09if (unlikely(addr < min_addr))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#744: FILE: mm/kmem.c:481:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#744: FILE: mm/kmem.c:481:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#745: FILE: mm/kmem.c:482:
+=09if (unlikely(addr > (unsigned long)high_memory - size))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#746: FILE: mm/kmem.c:483:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#746: FILE: mm/kmem.c:483:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#747: FILE: mm/kmem.c:484:
+=09if (unlikely(!kern_addr_valid(addr)))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#748: FILE: mm/kmem.c:485:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#748: FILE: mm/kmem.c:485:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#749: FILE: mm/kmem.c:486:
+=09if (unlikely(!kern_addr_valid(addr + size - 1)))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#750: FILE: mm/kmem.c:487:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#750: FILE: mm/kmem.c:487:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#751: FILE: mm/kmem.c:488:
+=09page =3D virt_to_page(ptr);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#751: FILE: mm/kmem.c:488:
+=09page =3D virt_to_page(ptr);
         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#752: FILE: mm/kmem.c:489:
+=09if (unlikely(!PageSlab(page)))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#753: FILE: mm/kmem.c:490:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#753: FILE: mm/kmem.c:490:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#754: FILE: mm/kmem.c:491:
+=09if (unlikely(page_get_cache(page) !=3D cache))
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#754: FILE: mm/kmem.c:491:
+=09if (unlikely(page_get_cache(page) !=3D cache))
                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#755: FILE: mm/kmem.c:492:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#755: FILE: mm/kmem.c:492:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#756: FILE: mm/kmem.c:493:
+=09return 1;
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#757: FILE: mm/kmem.c:494:
+  out:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#758: FILE: mm/kmem.c:495:
+=09return 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#773: FILE: mm/kmem.c:510:
+=09void *ret =3D NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#773: FILE: mm/kmem.c:510:
+=09void *ret =3D NULL;
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#774: FILE: mm/kmem.c:511:
+=09unsigned long flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#775: FILE: mm/kmem.c:512:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#775: FILE: mm/kmem.c:512:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#777: FILE: mm/kmem.c:514:
+=09spin_lock_irqsave(&cpu_cache->lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#779: FILE: mm/kmem.c:516:
+=09while (1) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#780: FILE: mm/kmem.c:517:
+=09=09if (likely(!magazine_is_empty(cpu_cache->loaded))) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#780: FILE: mm/kmem.c:517:
+=09=09if (likely(!magazine_is_empty(cpu_cache->loaded))) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#781: FILE: mm/kmem.c:518:
+=09=09=09ret =3D magazine_get(cpu_cache->loaded);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#781: FILE: mm/kmem.c:518:
+=09=09=09ret =3D magazine_get(cpu_cache->loaded);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#781: FILE: mm/kmem.c:518:
+=09=09=09ret =3D magazine_get(cpu_cache->loaded);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#781: FILE: mm/kmem.c:518:
+=09=09=09ret =3D magazine_get(cpu_cache->loaded);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#782: FILE: mm/kmem.c:519:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#782: FILE: mm/kmem.c:519:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#782: FILE: mm/kmem.c:519:
+=09=09=09break;
       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#783: FILE: mm/kmem.c:520:
+=09=09} else if (magazine_is_full(cpu_cache->prev)) {
+=09=09=09swap_magazines(cpu_cache);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#783: FILE: mm/kmem.c:520:
+=09=09} else if (magazine_is_full(cpu_cache->prev)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#783: FILE: mm/kmem.c:520:
+=09=09} else if (magazine_is_full(cpu_cache->prev)) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#784: FILE: mm/kmem.c:521:
+=09=09=09swap_magazines(cpu_cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#784: FILE: mm/kmem.c:521:
+=09=09=09swap_magazines(cpu_cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#784: FILE: mm/kmem.c:521:
+=09=09=09swap_magazines(cpu_cache);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#785: FILE: mm/kmem.c:522:
+=09=09=09continue;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#785: FILE: mm/kmem.c:522:
+=09=09=09continue;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#785: FILE: mm/kmem.c:522:
+=09=09=09continue;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#786: FILE: mm/kmem.c:523:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#786: FILE: mm/kmem.c:523:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#788: FILE: mm/kmem.c:525:
+=09=09spin_lock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#788: FILE: mm/kmem.c:525:
+=09=09spin_lock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#790: FILE: mm/kmem.c:527:
+=09=09if (list_empty(&cache->full_magazines)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#790: FILE: mm/kmem.c:527:
+=09=09if (list_empty(&cache->full_magazines)) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#791: FILE: mm/kmem.c:528:
+=09=09=09ret =3D slab_alloc(cache, gfp_flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#791: FILE: mm/kmem.c:528:
+=09=09=09ret =3D slab_alloc(cache, gfp_flags);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#791: FILE: mm/kmem.c:528:
+=09=09=09ret =3D slab_alloc(cache, gfp_flags);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#791: FILE: mm/kmem.c:528:
+=09=09=09ret =3D slab_alloc(cache, gfp_flags);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#792: FILE: mm/kmem.c:529:
+=09=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#792: FILE: mm/kmem.c:529:
+=09=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#792: FILE: mm/kmem.c:529:
+=09=09=09spin_unlock(&cache->lists_lock);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#793: FILE: mm/kmem.c:530:
+=09=09=09if (ret)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#793: FILE: mm/kmem.c:530:
+=09=09=09if (ret)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#793: FILE: mm/kmem.c:530:
+=09=09=09if (ret)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#794: FILE: mm/kmem.c:531:
+=09=09=09=09construct_object(ret, cache, gfp_flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#794: FILE: mm/kmem.c:531:
+=09=09=09=09construct_object(ret, cache, gfp_flags);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#794: FILE: mm/kmem.c:531:
+=09=09=09=09construct_object(ret, cache, gfp_flags);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#794: FILE: mm/kmem.c:531:
+=09=09=09=09construct_object(ret, cache, gfp_flags);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#795: FILE: mm/kmem.c:532:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#795: FILE: mm/kmem.c:532:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#795: FILE: mm/kmem.c:532:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#796: FILE: mm/kmem.c:533:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#796: FILE: mm/kmem.c:533:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#797: FILE: mm/kmem.c:534:
+=09=09depot_put_empty(cache, cpu_cache->prev);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#797: FILE: mm/kmem.c:534:
+=09=09depot_put_empty(cache, cpu_cache->prev);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#798: FILE: mm/kmem.c:535:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#798: FILE: mm/kmem.c:535:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#798: FILE: mm/kmem.c:535:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#799: FILE: mm/kmem.c:536:
+=09=09cpu_cache->loaded =3D depot_get_full(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#799: FILE: mm/kmem.c:536:
+=09=09cpu_cache->loaded =3D depot_get_full(cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#799: FILE: mm/kmem.c:536:
+=09=09cpu_cache->loaded =3D depot_get_full(cache);
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#801: FILE: mm/kmem.c:538:
+=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#801: FILE: mm/kmem.c:538:
+=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#802: FILE: mm/kmem.c:539:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#804: FILE: mm/kmem.c:541:
+=09spin_unlock_irqrestore(&cpu_cache->lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#805: FILE: mm/kmem.c:542:
+=09return ret;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#809: FILE: mm/kmem.c:546:
+void *kmem_cache_alloc_node(struct kmem_cache *cache, unsigned int __nocas=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#811: FILE: mm/kmem.c:547:
+void *kmem_cache_alloc_node(struct kmem_cache *cache, unsigned int __nocas=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#812: FILE: mm/kmem.c:548:
+=09return kmem_cache_alloc(cache, flags);
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: mm/kmem.c:553:
+static void free_obj(struct kmem_cache *cache, struct kmem_slab *slab,
+=09=09     void *obj)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#817: FILE: mm/kmem.c:553:
+=09=09     void *obj)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#817: FILE: mm/kmem.c:553:
+=09=09     void *obj)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#819: FILE: mm/kmem.c:555:
+=09struct kmem_bufctl *bufctl;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#821: FILE: mm/kmem.c:557:
+=09bufctl =3D obj_to_bufctl(cache, slab, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#821: FILE: mm/kmem.c:557:
+=09bufctl =3D obj_to_bufctl(cache, slab, obj);
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#822: FILE: mm/kmem.c:558:
+=09bufctl->next =3D slab->free;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#822: FILE: mm/kmem.c:558:
+=09bufctl->next =3D slab->free;
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#823: FILE: mm/kmem.c:559:
+=09bufctl->addr =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#823: FILE: mm/kmem.c:559:
+=09bufctl->addr =3D obj;
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#825: FILE: mm/kmem.c:561:
+=09slab->free =3D bufctl;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#825: FILE: mm/kmem.c:561:
+=09slab->free =3D bufctl;
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#826: FILE: mm/kmem.c:562:
+=09slab->nr_available++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#827: FILE: mm/kmem.c:563:
+=09cache->free_objects++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#832: FILE: mm/kmem.c:568:
+=09struct page *page =3D virt_to_page(obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#832: FILE: mm/kmem.c:568:
+=09struct page *page =3D virt_to_page(obj);
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#833: FILE: mm/kmem.c:569:
+=09struct kmem_slab *slab =3D page_get_slab(page);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#833: FILE: mm/kmem.c:569:
+=09struct kmem_slab *slab =3D page_get_slab(page);
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#835: FILE: mm/kmem.c:571:
+=09if (page_get_cache(page) !=3D cache)
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#835: FILE: mm/kmem.c:571:
+=09if (page_get_cache(page) !=3D cache)
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#836: FILE: mm/kmem.c:572:
+=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#836: FILE: mm/kmem.c:572:
+=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#838: FILE: mm/kmem.c:574:
+=09if (slab->nr_available =3D=3D 0)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#838: FILE: mm/kmem.c:574:
+=09if (slab->nr_available =3D=3D 0)
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#838: FILE: mm/kmem.c:574:
+=09if (slab->nr_available =3D=3D 0)
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#839: FILE: mm/kmem.c:575:
+=09=09list_move(&slab->list, &cache->partial_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#839: FILE: mm/kmem.c:575:
+=09=09list_move(&slab->list, &cache->partial_slabs);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#841: FILE: mm/kmem.c:577:
+=09free_obj(cache, slab, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#843: FILE: mm/kmem.c:579:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#843: FILE: mm/kmem.c:579:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#843: FILE: mm/kmem.c:579:
+=09if (slab->nr_available =3D=3D cache->slab_capacity)
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#844: FILE: mm/kmem.c:580:
+=09=09list_move(&slab->list, &cache->full_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#844: FILE: mm/kmem.c:580:
+=09=09list_move(&slab->list, &cache->full_slabs);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#859: FILE: mm/kmem.c:595:
+=09unsigned long flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#860: FILE: mm/kmem.c:596:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#860: FILE: mm/kmem.c:596:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#862: FILE: mm/kmem.c:598:
+=09if (!obj)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#863: FILE: mm/kmem.c:599:
+=09=09return;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#863: FILE: mm/kmem.c:599:
+=09=09return;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#865: FILE: mm/kmem.c:601:
+=09spin_lock_irqsave(&cpu_cache->lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#867: FILE: mm/kmem.c:603:
+=09while (1) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#868: FILE: mm/kmem.c:604:
+=09=09if (!magazine_is_full(cpu_cache->loaded)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#868: FILE: mm/kmem.c:604:
+=09=09if (!magazine_is_full(cpu_cache->loaded)) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#869: FILE: mm/kmem.c:605:
+=09=09=09magazine_put(cpu_cache->loaded, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#869: FILE: mm/kmem.c:605:
+=09=09=09magazine_put(cpu_cache->loaded, obj);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#869: FILE: mm/kmem.c:605:
+=09=09=09magazine_put(cpu_cache->loaded, obj);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#870: FILE: mm/kmem.c:606:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#870: FILE: mm/kmem.c:606:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#870: FILE: mm/kmem.c:606:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#871: FILE: mm/kmem.c:607:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#871: FILE: mm/kmem.c:607:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#873: FILE: mm/kmem.c:609:
+=09=09if (magazine_is_empty(cpu_cache->prev)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#873: FILE: mm/kmem.c:609:
+=09=09if (magazine_is_empty(cpu_cache->prev)) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#874: FILE: mm/kmem.c:610:
+=09=09=09swap_magazines(cpu_cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#874: FILE: mm/kmem.c:610:
+=09=09=09swap_magazines(cpu_cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#874: FILE: mm/kmem.c:610:
+=09=09=09swap_magazines(cpu_cache);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#875: FILE: mm/kmem.c:611:
+=09=09=09continue;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#875: FILE: mm/kmem.c:611:
+=09=09=09continue;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#875: FILE: mm/kmem.c:611:
+=09=09=09continue;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#876: FILE: mm/kmem.c:612:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#876: FILE: mm/kmem.c:612:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#877: FILE: mm/kmem.c:613:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#878: FILE: mm/kmem.c:614:
+=09=09spin_lock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#878: FILE: mm/kmem.c:614:
+=09=09spin_lock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#879: FILE: mm/kmem.c:615:
+=09=09if (unlikely(list_empty(&cache->empty_magazines))) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#879: FILE: mm/kmem.c:615:
+=09=09if (unlikely(list_empty(&cache->empty_magazines))) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#880: FILE: mm/kmem.c:616:
+=09=09=09struct kmem_magazine *magazine;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#880: FILE: mm/kmem.c:616:
+=09=09=09struct kmem_magazine *magazine;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#880: FILE: mm/kmem.c:616:
+=09=09=09struct kmem_magazine *magazine;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#882: FILE: mm/kmem.c:618:
+=09=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#882: FILE: mm/kmem.c:618:
+=09=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#882: FILE: mm/kmem.c:618:
+=09=09=09spin_unlock(&cache->lists_lock);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#883: FILE: mm/kmem.c:619:
+=09=09=09magazine =3D kmem_cache_alloc(&magazine_cache,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#883: FILE: mm/kmem.c:619:
+=09=09=09magazine =3D kmem_cache_alloc(&magazine_cache,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#883: FILE: mm/kmem.c:619:
+=09=09=09magazine =3D kmem_cache_alloc(&magazine_cache,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#883: FILE: mm/kmem.c:619:
+=09=09=09magazine =3D kmem_cache_alloc(&magazine_cache,
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#884: FILE: mm/kmem.c:620:
+=09=09=09=09=09=09    GFP_KERNEL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#885: FILE: mm/kmem.c:621:
+=09=09=09if (magazine) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: mm/kmem.c:621:
+=09=09=09if (magazine) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: mm/kmem.c:621:
+=09=09=09if (magazine) {
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#886: FILE: mm/kmem.c:622:
+=09=09=09=09depot_put_empty(cache, magazine);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#886: FILE: mm/kmem.c:622:
+=09=09=09=09depot_put_empty(cache, magazine);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#886: FILE: mm/kmem.c:622:
+=09=09=09=09depot_put_empty(cache, magazine);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#886: FILE: mm/kmem.c:622:
+=09=09=09=09depot_put_empty(cache, magazine);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#887: FILE: mm/kmem.c:623:
+=09=09=09=09continue;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#887: FILE: mm/kmem.c:623:
+=09=09=09=09continue;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#887: FILE: mm/kmem.c:623:
+=09=09=09=09continue;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#887: FILE: mm/kmem.c:623:
+=09=09=09=09continue;
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#888: FILE: mm/kmem.c:624:
+=09=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#888: FILE: mm/kmem.c:624:
+=09=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#888: FILE: mm/kmem.c:624:
+=09=09=09}
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#889: FILE: mm/kmem.c:625:
+=09=09=09destruct_object(obj, cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#889: FILE: mm/kmem.c:625:
+=09=09=09destruct_object(obj, cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#889: FILE: mm/kmem.c:625:
+=09=09=09destruct_object(obj, cache);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#890: FILE: mm/kmem.c:626:
+=09=09=09spin_lock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#890: FILE: mm/kmem.c:626:
+=09=09=09spin_lock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#890: FILE: mm/kmem.c:626:
+=09=09=09spin_lock(&cache->lists_lock);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#891: FILE: mm/kmem.c:627:
+=09=09=09slab_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#891: FILE: mm/kmem.c:627:
+=09=09=09slab_free(cache, obj);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#891: FILE: mm/kmem.c:627:
+=09=09=09slab_free(cache, obj);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#892: FILE: mm/kmem.c:628:
+=09=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#892: FILE: mm/kmem.c:628:
+=09=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#892: FILE: mm/kmem.c:628:
+=09=09=09spin_unlock(&cache->lists_lock);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#893: FILE: mm/kmem.c:629:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#893: FILE: mm/kmem.c:629:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#893: FILE: mm/kmem.c:629:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#894: FILE: mm/kmem.c:630:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#894: FILE: mm/kmem.c:630:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#895: FILE: mm/kmem.c:631:
+=09=09depot_put_full(cache, cpu_cache->prev);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#895: FILE: mm/kmem.c:631:
+=09=09depot_put_full(cache, cpu_cache->prev);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#896: FILE: mm/kmem.c:632:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#896: FILE: mm/kmem.c:632:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#896: FILE: mm/kmem.c:632:
+=09=09cpu_cache->prev =3D cpu_cache->loaded;
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#897: FILE: mm/kmem.c:633:
+=09=09cpu_cache->loaded =3D depot_get_empty(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#897: FILE: mm/kmem.c:633:
+=09=09cpu_cache->loaded =3D depot_get_empty(cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#897: FILE: mm/kmem.c:633:
+=09=09cpu_cache->loaded =3D depot_get_empty(cache);
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#898: FILE: mm/kmem.c:634:
+=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#898: FILE: mm/kmem.c:634:
+=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#899: FILE: mm/kmem.c:635:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#901: FILE: mm/kmem.c:637:
+=09spin_unlock_irqrestore(&cpu_cache->lock, flags);
 ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#904: FILE: mm/kmem.c:640:
+EXPORT_SYMBOL(kmem_cache_free);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#906: FILE: mm/kmem.c:642:
+static void free_slab_list(struct kmem_cache *cache, struct list_head *sla=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#908: FILE: mm/kmem.c:643:
+static void free_slab_list(struct kmem_cache *cache, struct list_head *sla=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#909: FILE: mm/kmem.c:644:
+=09struct kmem_slab *slab, *tmp;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#911: FILE: mm/kmem.c:646:
+=09list_for_each_entry_safe(slab, tmp, slab_list, list) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#912: FILE: mm/kmem.c:647:
+=09=09list_del(&slab->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#912: FILE: mm/kmem.c:647:
+=09=09list_del(&slab->list);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#913: FILE: mm/kmem.c:648:
+=09=09destroy_slab(cache, slab);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#913: FILE: mm/kmem.c:648:
+=09=09destroy_slab(cache, slab);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#914: FILE: mm/kmem.c:649:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#919: FILE: mm/kmem.c:654:
+=09free_slab_list(cache, &cache->full_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#920: FILE: mm/kmem.c:655:
+=09free_slab_list(cache, &cache->partial_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#921: FILE: mm/kmem.c:656:
+=09free_slab_list(cache, &cache->empty_slabs);
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: mm/kmem.c:660:
+static void purge_magazine(struct kmem_cache *cache,
+=09=09=09   struct kmem_magazine *mag)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#925: FILE: mm/kmem.c:660:
+=09=09=09   struct kmem_magazine *mag)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#925: FILE: mm/kmem.c:660:
+=09=09=09   struct kmem_magazine *mag)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#925: FILE: mm/kmem.c:660:
+=09=09=09   struct kmem_magazine *mag)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#927: FILE: mm/kmem.c:662:
+=09while (!magazine_is_empty(mag)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#928: FILE: mm/kmem.c:663:
+=09=09void *obj =3D magazine_get(mag);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#928: FILE: mm/kmem.c:663:
+=09=09void *obj =3D magazine_get(mag);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#928: FILE: mm/kmem.c:663:
+=09=09void *obj =3D magazine_get(mag);
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#929: FILE: mm/kmem.c:664:
+=09=09destruct_object(obj, cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: mm/kmem.c:664:
+=09=09destruct_object(obj, cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#930: FILE: mm/kmem.c:665:
+=09=09spin_lock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#930: FILE: mm/kmem.c:665:
+=09=09spin_lock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#931: FILE: mm/kmem.c:666:
+=09=09slab_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#931: FILE: mm/kmem.c:666:
+=09=09slab_free(cache, obj);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#932: FILE: mm/kmem.c:667:
+=09=09spin_unlock(&cache->lists_lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#932: FILE: mm/kmem.c:667:
+=09=09spin_unlock(&cache->lists_lock);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#933: FILE: mm/kmem.c:668:
+=09}
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: mm/kmem.c:672:
+static void destroy_magazine(struct kmem_cache *cache,
+=09=09=09     struct kmem_magazine *mag)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#937: FILE: mm/kmem.c:672:
+=09=09=09     struct kmem_magazine *mag)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#937: FILE: mm/kmem.c:672:
+=09=09=09     struct kmem_magazine *mag)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#937: FILE: mm/kmem.c:672:
+=09=09=09     struct kmem_magazine *mag)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#939: FILE: mm/kmem.c:674:
+=09if (!mag)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#940: FILE: mm/kmem.c:675:
+=09=09return;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#940: FILE: mm/kmem.c:675:
+=09=09return;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#942: FILE: mm/kmem.c:677:
+=09purge_magazine(cache, mag);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#943: FILE: mm/kmem.c:678:
+=09kmem_cache_free(&magazine_cache, mag);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#948: FILE: mm/kmem.c:683:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#950: FILE: mm/kmem.c:685:
+=09for (i =3D 0; i < NR_CPUS; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#950: FILE: mm/kmem.c:685:
+=09for (i =3D 0; i < NR_CPUS; i++) {
           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#950: FILE: mm/kmem.c:685:
+=09for (i =3D 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#951: FILE: mm/kmem.c:686:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#951: FILE: mm/kmem.c:686:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#951: FILE: mm/kmem.c:686:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#952: FILE: mm/kmem.c:687:
+=09=09destroy_magazine(cache, cpu_cache->loaded);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#952: FILE: mm/kmem.c:687:
+=09=09destroy_magazine(cache, cpu_cache->loaded);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#953: FILE: mm/kmem.c:688:
+=09=09destroy_magazine(cache, cpu_cache->prev);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#953: FILE: mm/kmem.c:688:
+=09=09destroy_magazine(cache, cpu_cache->prev);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#954: FILE: mm/kmem.c:689:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#959: FILE: mm/kmem.c:694:
+=09int err =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#959: FILE: mm/kmem.c:694:
+=09int err =3D 0;
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#961: FILE: mm/kmem.c:696:
+=09spin_lock_init(&cpu_cache->lock);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#963: FILE: mm/kmem.c:698:
+=09cpu_cache->loaded =3D kmem_cache_alloc(&magazine_cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#963: FILE: mm/kmem.c:698:
+=09cpu_cache->loaded =3D kmem_cache_alloc(&magazine_cache, GFP_KERNEL);
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#964: FILE: mm/kmem.c:699:
+=09if (!cpu_cache->loaded)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#965: FILE: mm/kmem.c:700:
+=09=09goto failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#965: FILE: mm/kmem.c:700:
+=09=09goto failed;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#967: FILE: mm/kmem.c:702:
+=09cpu_cache->prev =3D kmem_cache_alloc(&magazine_cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#967: FILE: mm/kmem.c:702:
+=09cpu_cache->prev =3D kmem_cache_alloc(&magazine_cache, GFP_KERNEL);
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#968: FILE: mm/kmem.c:703:
+=09if (!cpu_cache->prev)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#969: FILE: mm/kmem.c:704:
+=09=09goto failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#969: FILE: mm/kmem.c:704:
+=09=09goto failed;
    ^

WARNING:INDENTED_LABEL: labels should not be indented
#971: FILE: mm/kmem.c:706:
+  out:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#972: FILE: mm/kmem.c:707:
+=09return err;
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#974: FILE: mm/kmem.c:709:
+  failed:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#975: FILE: mm/kmem.c:710:
+=09kmem_cache_free(&magazine_cache, cpu_cache->loaded);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#976: FILE: mm/kmem.c:711:
+=09err =3D -ENOMEM;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#976: FILE: mm/kmem.c:711:
+=09err =3D -ENOMEM;
        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#976: FILE: mm/kmem.c:711:
+=09err =3D -ENOMEM;
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#977: FILE: mm/kmem.c:712:
+=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#982: FILE: mm/kmem.c:717:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#983: FILE: mm/kmem.c:718:
+=09int ret =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#983: FILE: mm/kmem.c:718:
+=09int ret =3D 0;
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#985: FILE: mm/kmem.c:720:
+=09for (i =3D 0; i < NR_CPUS; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#985: FILE: mm/kmem.c:720:
+=09for (i =3D 0; i < NR_CPUS; i++) {
           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#985: FILE: mm/kmem.c:720:
+=09for (i =3D 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#986: FILE: mm/kmem.c:721:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#986: FILE: mm/kmem.c:721:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#986: FILE: mm/kmem.c:721:
+=09=09struct kmem_cpu_cache *cpu_cache =3D __cpu_cache_get(cache, i);
                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#987: FILE: mm/kmem.c:722:
+=09=09ret =3D init_cpu_cache(cpu_cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#987: FILE: mm/kmem.c:722:
+=09=09ret =3D init_cpu_cache(cpu_cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#987: FILE: mm/kmem.c:722:
+=09=09ret =3D init_cpu_cache(cpu_cache);
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#988: FILE: mm/kmem.c:723:
+=09=09if (ret)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#988: FILE: mm/kmem.c:723:
+=09=09if (ret)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#989: FILE: mm/kmem.c:724:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#989: FILE: mm/kmem.c:724:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#989: FILE: mm/kmem.c:724:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#990: FILE: mm/kmem.c:725:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#992: FILE: mm/kmem.c:727:
+=09if (ret)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#993: FILE: mm/kmem.c:728:
+=09=09free_cpu_caches(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#993: FILE: mm/kmem.c:728:
+=09=09free_cpu_caches(cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#995: FILE: mm/kmem.c:730:
+=09return ret;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#998: FILE: mm/kmem.c:733:
+static unsigned long wastage(struct kmem_cache *cache, unsigned long order=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1000: FILE: mm/kmem.c:734:
+static unsigned long wastage(struct kmem_cache *cache, unsigned long order=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1001: FILE: mm/kmem.c:735:
+=09unsigned long size =3D order_to_size(order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1001: FILE: mm/kmem.c:735:
+=09unsigned long size =3D order_to_size(order);
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1002: FILE: mm/kmem.c:736:
+=09return size % cache->objsize;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1007: FILE: mm/kmem.c:741:
+=09unsigned int prev, order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1009: FILE: mm/kmem.c:743:
+=09prev =3D order =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1009: FILE: mm/kmem.c:743:
+=09prev =3D order =3D 0;
         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1009: FILE: mm/kmem.c:743:
+=09prev =3D order =3D 0;
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1011: FILE: mm/kmem.c:745:
+=09/*
 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1012: FILE: mm/kmem.c:746:
+=09/*
+=09 * First find the first order in which the objects fit.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1013: FILE: mm/kmem.c:747:
+=09 * First find the first order in which the objects fit.
+=09 */=20

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#1013: FILE: mm/kmem.c:747:
+=09 */=20
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1014: FILE: mm/kmem.c:748:
+=09while (1) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1015: FILE: mm/kmem.c:749:
+=09=09if (cache->objsize <=3D order_to_size(order))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1015: FILE: mm/kmem.c:749:
+=09=09if (cache->objsize <=3D order_to_size(order))
    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#1015: FILE: mm/kmem.c:749:
+=09=09if (cache->objsize <=3D order_to_size(order))
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1016: FILE: mm/kmem.c:750:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1016: FILE: mm/kmem.c:750:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1016: FILE: mm/kmem.c:750:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1017: FILE: mm/kmem.c:751:
+=09=09if (++order > MAX_ORDER) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1017: FILE: mm/kmem.c:751:
+=09=09if (++order > MAX_ORDER) {
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1018: FILE: mm/kmem.c:752:
+=09=09=09order =3D -1;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1018: FILE: mm/kmem.c:752:
+=09=09=09order =3D -1;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1018: FILE: mm/kmem.c:752:
+=09=09=09order =3D -1;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1018: FILE: mm/kmem.c:752:
+=09=09=09order =3D -1;
                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1018: FILE: mm/kmem.c:752:
+=09=09=09order =3D -1;
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1019: FILE: mm/kmem.c:753:
+=09=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1019: FILE: mm/kmem.c:753:
+=09=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1019: FILE: mm/kmem.c:753:
+=09=09=09goto out;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1020: FILE: mm/kmem.c:754:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1020: FILE: mm/kmem.c:754:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1021: FILE: mm/kmem.c:755:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1023: FILE: mm/kmem.c:757:
+=09/*
 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1024: FILE: mm/kmem.c:758:
+=09/*
+=09 * Then see if we can find a better one.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1025: FILE: mm/kmem.c:759:
+=09 */

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1026: FILE: mm/kmem.c:760:
+=09while (order < MAX_ORDER-1) {
 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1026: FILE: mm/kmem.c:760:
+=09while (order < MAX_ORDER-1) {
                            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1027: FILE: mm/kmem.c:761:
+=09=09unsigned long prev_wastage, current_wastage;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1027: FILE: mm/kmem.c:761:
+=09=09unsigned long prev_wastage, current_wastage;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1029: FILE: mm/kmem.c:763:
+=09=09prev =3D order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1029: FILE: mm/kmem.c:763:
+=09=09prev =3D order;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1029: FILE: mm/kmem.c:763:
+=09=09prev =3D order;
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1030: FILE: mm/kmem.c:764:
+=09=09prev_wastage =3D wastage(cache, prev);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1030: FILE: mm/kmem.c:764:
+=09=09prev_wastage =3D wastage(cache, prev);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1030: FILE: mm/kmem.c:764:
+=09=09prev_wastage =3D wastage(cache, prev);
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1031: FILE: mm/kmem.c:765:
+=09=09current_wastage =3D wastage(cache, ++order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1031: FILE: mm/kmem.c:765:
+=09=09current_wastage =3D wastage(cache, ++order);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1031: FILE: mm/kmem.c:765:
+=09=09current_wastage =3D wastage(cache, ++order);
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1033: FILE: mm/kmem.c:767:
+=09=09if (prev_wastage < current_wastage ||
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1033: FILE: mm/kmem.c:767:
+=09=09if (prev_wastage < current_wastage ||
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1034: FILE: mm/kmem.c:768:
+=09=09    prev_wastage-current_wastage < MAX_WASTAGE) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1034: FILE: mm/kmem.c:768:
+=09=09    prev_wastage-current_wastage < MAX_WASTAGE) {
    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1034: FILE: mm/kmem.c:768:
+=09=09    prev_wastage-current_wastage < MAX_WASTAGE) {
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1035: FILE: mm/kmem.c:769:
+=09=09=09order =3D prev;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1035: FILE: mm/kmem.c:769:
+=09=09=09order =3D prev;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1035: FILE: mm/kmem.c:769:
+=09=09=09order =3D prev;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1035: FILE: mm/kmem.c:769:
+=09=09=09order =3D prev;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1036: FILE: mm/kmem.c:770:
+=09=09=09break;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1036: FILE: mm/kmem.c:770:
+=09=09=09break;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1036: FILE: mm/kmem.c:770:
+=09=09=09break;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1037: FILE: mm/kmem.c:771:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1037: FILE: mm/kmem.c:771:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1038: FILE: mm/kmem.c:772:
+=09}
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1040: FILE: mm/kmem.c:774:
+  out:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1041: FILE: mm/kmem.c:775:
+=09return order;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: mm/kmem.c:814:
+struct kmem_cache *kmem_cache_create(const char *name, size_t objsize,
+=09=09=09=09     size_t align, unsigned long flags,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1080: FILE: mm/kmem.c:814:
+=09=09=09=09     size_t align, unsigned long flags,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1080: FILE: mm/kmem.c:814:
+=09=09=09=09     size_t align, unsigned long flags,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1080: FILE: mm/kmem.c:814:
+=09=09=09=09     size_t align, unsigned long flags,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1080: FILE: mm/kmem.c:814:
+=09=09=09=09     size_t align, unsigned long flags,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1081: FILE: mm/kmem.c:815:
+=09=09=09=09     kmem_ctor_fn ctor, kmem_dtor_fn dtor)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1081: FILE: mm/kmem.c:815:
+=09=09=09=09     kmem_ctor_fn ctor, kmem_dtor_fn dtor)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1081: FILE: mm/kmem.c:815:
+=09=09=09=09     kmem_ctor_fn ctor, kmem_dtor_fn dtor)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1081: FILE: mm/kmem.c:815:
+=09=09=09=09     kmem_ctor_fn ctor, kmem_dtor_fn dtor)
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1083: FILE: mm/kmem.c:817:
+=09struct kmem_cache *cache =3D kmem_cache_alloc(&cache_cache, GFP_KERNEL)=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1083: FILE: mm/kmem.c:817:
+=09struct kmem_cache *cache =3D kmem_cache_alloc(&cache_cache, GFP_KERNEL)=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1083: FILE: mm/kmem.c:817:
+=09struct kmem_cache *cache =3D kmem_cache_alloc(&cache_cache, GFP_KERNEL)=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1085: FILE: mm/kmem.c:818:
+=09if (!cache)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1086: FILE: mm/kmem.c:819:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1086: FILE: mm/kmem.c:819:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1088: FILE: mm/kmem.c:821:
+=09cache->name =3D name;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1088: FILE: mm/kmem.c:821:
+=09cache->name =3D name;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1089: FILE: mm/kmem.c:822:
+=09cache->objsize =3D objsize;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1089: FILE: mm/kmem.c:822:
+=09cache->objsize =3D objsize;
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1090: FILE: mm/kmem.c:823:
+=09cache->ctor =3D ctor;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1090: FILE: mm/kmem.c:823:
+=09cache->ctor =3D ctor;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1091: FILE: mm/kmem.c:824:
+=09cache->dtor =3D dtor;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1091: FILE: mm/kmem.c:824:
+=09cache->dtor =3D dtor;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1092: FILE: mm/kmem.c:825:
+=09cache->free_objects =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1092: FILE: mm/kmem.c:825:
+=09cache->free_objects =3D 0;
                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1094: FILE: mm/kmem.c:827:
+=09cache->cache_order =3D cache_order(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1094: FILE: mm/kmem.c:827:
+=09cache->cache_order =3D cache_order(cache);
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1095: FILE: mm/kmem.c:828:
+=09if (cache->cache_order < 0)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1096: FILE: mm/kmem.c:829:
+=09=09goto failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1096: FILE: mm/kmem.c:829:
+=09=09goto failed;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1098: FILE: mm/kmem.c:831:
+=09cache->slab_capacity =3D slab_capacity(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1098: FILE: mm/kmem.c:831:
+=09cache->slab_capacity =3D slab_capacity(cache);
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1100: FILE: mm/kmem.c:833:
+=09memset(&cache->stats, 0, sizeof(struct kmem_cache_statistics));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1102: FILE: mm/kmem.c:835:
+=09if (init_cpu_caches(cache))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1103: FILE: mm/kmem.c:836:
+=09=09goto failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1103: FILE: mm/kmem.c:836:
+=09=09goto failed;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1105: FILE: mm/kmem.c:838:
+=09down(&cache_chain_sem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1106: FILE: mm/kmem.c:839:
+=09list_add(&cache->next, &cache_chain);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1107: FILE: mm/kmem.c:840:
+=09up(&cache_chain_sem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1109: FILE: mm/kmem.c:842:
+=09return cache;
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1111: FILE: mm/kmem.c:844:
+  failed:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1112: FILE: mm/kmem.c:845:
+=09kmem_cache_free(&cache_cache, cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1113: FILE: mm/kmem.c:846:
+=09return NULL;
 ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1116: FILE: mm/kmem.c:849:
+EXPORT_SYMBOL(kmem_cache_create);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1120: FILE: mm/kmem.c:853:
+=09struct kmem_magazine *magazine, *tmp;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1122: FILE: mm/kmem.c:855:
+=09list_for_each_entry_safe(magazine, tmp, &cache->empty_magazines, list) =
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1124: FILE: mm/kmem.c:856:
+=09=09list_del(&magazine->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1124: FILE: mm/kmem.c:856:
+=09=09list_del(&magazine->list);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1125: FILE: mm/kmem.c:857:
+=09=09destroy_magazine(cache, magazine);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1125: FILE: mm/kmem.c:857:
+=09=09destroy_magazine(cache, magazine);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1126: FILE: mm/kmem.c:858:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1128: FILE: mm/kmem.c:860:
+=09list_for_each_entry_safe(magazine, tmp, &cache->full_magazines, list) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1129: FILE: mm/kmem.c:861:
+=09=09list_del(&magazine->list);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1129: FILE: mm/kmem.c:861:
+=09=09list_del(&magazine->list);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1130: FILE: mm/kmem.c:862:
+=09=09destroy_magazine(cache, magazine);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1130: FILE: mm/kmem.c:862:
+=09=09destroy_magazine(cache, magazine);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1131: FILE: mm/kmem.c:863:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1155: FILE: mm/kmem.c:887:
+=09unsigned long flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1157: FILE: mm/kmem.c:889:
+=09down(&cache_chain_sem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1158: FILE: mm/kmem.c:890:
+=09list_del(&cache->next);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1159: FILE: mm/kmem.c:891:
+=09up(&cache_chain_sem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1161: FILE: mm/kmem.c:893:
+=09spin_lock_irqsave(&cache->lists_lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1162: FILE: mm/kmem.c:894:
+=09free_cpu_caches(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1163: FILE: mm/kmem.c:895:
+=09free_depot_magazines(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1164: FILE: mm/kmem.c:896:
+=09free_cache_slabs(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1165: FILE: mm/kmem.c:897:
+=09kmem_cache_free(&cache_cache, cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1166: FILE: mm/kmem.c:898:
+=09spin_unlock_irqrestore(&cache->lists_lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1168: FILE: mm/kmem.c:900:
+=09return 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1174: FILE: mm/kmem.c:906:
+=09unsigned long flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1175: FILE: mm/kmem.c:907:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1175: FILE: mm/kmem.c:907:
+=09struct kmem_cpu_cache *cpu_cache =3D cpu_cache_get(cache);
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1177: FILE: mm/kmem.c:909:
+=09purge_magazine(cache, cpu_cache->loaded);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1178: FILE: mm/kmem.c:910:
+=09purge_magazine(cache, cpu_cache->prev);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1180: FILE: mm/kmem.c:912:
+=09spin_lock_irqsave(&cache->lists_lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1181: FILE: mm/kmem.c:913:
+=09free_depot_magazines(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1182: FILE: mm/kmem.c:914:
+=09free_slab_list(cache, &cache->full_slabs);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1183: FILE: mm/kmem.c:915:
+=09spin_unlock_irqrestore(&cache->lists_lock, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1184: FILE: mm/kmem.c:916:
+=09return 0;
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1188: FILE: mm/kmem.c:920:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1208: FILE: mm/kmem.c:939:
+=09struct list_head *walk;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1210: FILE: mm/kmem.c:941:
+=09if (down_trylock(&cache_chain_sem))
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1211: FILE: mm/kmem.c:942:
+=09=09goto out;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1211: FILE: mm/kmem.c:942:
+=09=09goto out;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1213: FILE: mm/kmem.c:944:
+=09list_for_each(walk, &cache_chain) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1214: FILE: mm/kmem.c:945:
+=09=09struct kmem_cache *cache =3D list_entry(walk, struct kmem_cache,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1214: FILE: mm/kmem.c:945:
+=09=09struct kmem_cache *cache =3D list_entry(walk, struct kmem_cache,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1214: FILE: mm/kmem.c:945:
+=09=09struct kmem_cache *cache =3D list_entry(walk, struct kmem_cache,
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1215: FILE: mm/kmem.c:946:
+=09=09=09=09=09=09      next);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1216: FILE: mm/kmem.c:947:
+=09=09kmem_cache_shrink(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1216: FILE: mm/kmem.c:947:
+=09=09kmem_cache_shrink(cache);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1217: FILE: mm/kmem.c:948:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1219: FILE: mm/kmem.c:950:
+=09up(&cache_chain_sem);
 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1220: FILE: mm/kmem.c:951:
+  out:

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1221: FILE: mm/kmem.c:952:
+=09/* Setup the next iteration */
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1222: FILE: mm/kmem.c:953:
+=09schedule_delayed_work(&__get_cpu_var(reap_work),
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1223: FILE: mm/kmem.c:954:
+=09=09=09      REAP_TIMEOUT_CPU_CACHES);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1223: FILE: mm/kmem.c:954:
+=09=09=09      REAP_TIMEOUT_CPU_CACHES);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1223: FILE: mm/kmem.c:954:
+=09=09=09      REAP_TIMEOUT_CPU_CACHES);
       ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1236: FILE: mm/kmem.c:965:
+static void __devinit start_cpu_timer(int cpu)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1238: FILE: mm/kmem.c:967:
+=09struct work_struct *reap_work =3D &per_cpu(reap_work, cpu);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1238: FILE: mm/kmem.c:967:
+=09struct work_struct *reap_work =3D &per_cpu(reap_work, cpu);
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#1238: FILE: mm/kmem.c:967:
+=09struct work_struct *reap_work =3D &per_cpu(reap_work, cpu);
                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1240: FILE: mm/kmem.c:969:
+=09/*
 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1241: FILE: mm/kmem.c:970:
+=09/*
+=09 * When this gets called from do_initcalls via cpucache_init(),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1244: FILE: mm/kmem.c:973:
+=09 */

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1245: FILE: mm/kmem.c:974:
+=09if (keventd_up() && reap_work->func =3D=3D NULL) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1245: FILE: mm/kmem.c:974:
+=09if (keventd_up() && reap_work->func =3D=3D NULL) {
                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: mm/kmem.c:974:
+=09if (keventd_up() && reap_work->func =3D=3D NULL) {
                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1246: FILE: mm/kmem.c:975:
+=09=09INIT_WORK(reap_work, cache_reap, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1246: FILE: mm/kmem.c:975:
+=09=09INIT_WORK(reap_work, cache_reap, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1247: FILE: mm/kmem.c:976:
+=09=09schedule_delayed_work_on(cpu, reap_work, HZ + 3 * cpu);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1247: FILE: mm/kmem.c:976:
+=09=09schedule_delayed_work_on(cpu, reap_work, HZ + 3 * cpu);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1248: FILE: mm/kmem.c:977:
+=09}
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1251: FILE: mm/kmem.c:980:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1260: FILE: mm/kmem.c:989:
+=09loff_t n =3D *pos;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1260: FILE: mm/kmem.c:989:
+=09loff_t n =3D *pos;
             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1260: FILE: mm/kmem.c:989:
+=09loff_t n =3D *pos;
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1261: FILE: mm/kmem.c:990:
+=09struct list_head *p;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1263: FILE: mm/kmem.c:992:
+=09down(&cache_chain_sem);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1264: FILE: mm/kmem.c:993:
+=09if (!n) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1265: FILE: mm/kmem.c:994:
+=09=09/*
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1265: FILE: mm/kmem.c:994:
+=09=09/*
    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1266: FILE: mm/kmem.c:995:
+=09=09/*
+=09=09 * Output format version, so at least we can change it

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1268: FILE: mm/kmem.c:997:
+=09=09 */

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1269: FILE: mm/kmem.c:998:
+=09=09seq_puts(m, "slabinfo - version: 2.1\n");
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1269: FILE: mm/kmem.c:998:
+=09=09seq_puts(m, "slabinfo - version: 2.1\n");
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1270: FILE: mm/kmem.c:999:
+=09=09seq_puts(m, "# name            <active_objs> <num_objs> <objsize> <o=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1270: FILE: mm/kmem.c:999:
+=09=09seq_puts(m, "# name            <active_objs> <num_objs> <objsize> <o=
    ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                      ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                                   ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                                     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1272: FILE: mm/kmem.c:1000:
+=09=09seq_puts(m, " : tunables <limit> <batchcount> <sharedfactor>");
                                                                  ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                             ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                                         ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                                           ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1273: FILE: mm/kmem.c:1001:
+=09=09seq_puts(m, " : slabdata <active_slabs> <num_slabs> <sharedavail>");
                                                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1342: FILE: mm/kmem.c:1070:
+=09=09printk(KERN_ERR "slab: cache %s error: %s\n", name, error);
                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1342: FILE: mm/kmem.c:1070:
+=09=09printk(KERN_ERR "slab: cache %s error: %s\n", name, error);
                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1342: FILE: mm/kmem.c:1070:
+=09=09printk(KERN_ERR "slab: cache %s error: %s\n", name, error);
                                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1342: FILE: mm/kmem.c:1070:
+=09=09printk(KERN_ERR "slab: cache %s error: %s\n", name, error);
                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxO)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                                       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1344: FILE: mm/kmem.c:1072:
+=09seq_printf(m, "%-17s %6lu %6lu %6u %4u %4d",
                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1347: FILE: mm/kmem.c:1075:
+=09seq_printf(m, " : slabdata %6lu %6lu %6lu",
                               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1347: FILE: mm/kmem.c:1075:
+=09seq_printf(m, " : slabdata %6lu %6lu %6lu",
                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1347: FILE: mm/kmem.c:1075:
+=09seq_printf(m, " : slabdata %6lu %6lu %6lu",
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: mm/kmem.c:1084:
+ * slabinfo_op - iterator that generates /proc/slabinfo$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: mm/kmem.c:1085:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: mm/kmem.c:1086:
+ * Output layout:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: mm/kmem.c:1087:
+ * cache-name$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1360: FILE: mm/kmem.c:1088:
+ * num-active-objs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: mm/kmem.c:1089:
+ * total-objs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: mm/kmem.c:1090:
+ * object size$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: mm/kmem.c:1091:
+ * num-active-slabs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: mm/kmem.c:1092:
+ * total-slabs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: mm/kmem.c:1093:
+ * num-pages-per-slab$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: mm/kmem.c:1094:
+ * + further values on SMP and with statistics enabled$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: mm/kmem.c:1095:
+ */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1383: FILE: mm/kmem.c:1111:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: mm/kmem.c:1113:
+ *=09Memory Allocator Initialization$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: mm/kmem.c:1114:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1417: FILE: mm/kmem.c:1145:
+  out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1454: FILE: mm/kmem.c:1182:
+  failed:$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1465: FILE: mm/kmem.c:1193:
+=09 */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1484: FILE: test/CuTest.c:1:
+#include <assert.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1728: FILE: test/CuTest.c:230:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1868: FILE: test/include/CuTest.h:1:
+#ifndef CU_TEST_H

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1878: FILE: test/include/CuTest.h:11:
+char* CuStrAlloc(int size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <CuStrAlloc>
#1878: FILE: test/include/CuTest.h:11:
+char* CuStrAlloc(int size);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1879: FILE: test/include/CuTest.h:12:
+char* CuStrCopy(const char* old);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1879: FILE: test/include/CuTest.h:12:
+char* CuStrCopy(const char* old);

CHECK:CAMELCASE: Avoid CamelCase: <CuStrCopy>
#1879: FILE: test/include/CuTest.h:12:
+char* CuStrCopy(const char* old);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1881: FILE: test/include/CuTest.h:14:
+#define CU_ALLOC(TYPE)=09=09((TYPE*) malloc(sizeof(TYPE)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1881: FILE: test/include/CuTest.h:14:
+#define CU_ALLOC(TYPE)=09=09((TYPE*) malloc(sizeof(TYPE)))
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1881: FILE: test/include/CuTest.h:14:
+#define CU_ALLOC(TYPE)=09=09((TYPE*) malloc(sizeof(TYPE)))
                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1881: FILE: test/include/CuTest.h:14:
+#define CU_ALLOC(TYPE)=09=09((TYPE*) malloc(sizeof(TYPE)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1883: FILE: test/include/CuTest.h:16:
+#define HUGE_STRING_LEN=098192
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1883: FILE: test/include/CuTest.h:16:
+#define HUGE_STRING_LEN=098192

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1884: FILE: test/include/CuTest.h:17:
+#define STRING_MAX=09=09256
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1884: FILE: test/include/CuTest.h:17:
+#define STRING_MAX=09=09256
                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1884: FILE: test/include/CuTest.h:17:
+#define STRING_MAX=09=09256

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1885: FILE: test/include/CuTest.h:18:
+#define STRING_INC=09=09256
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1885: FILE: test/include/CuTest.h:18:
+#define STRING_INC=09=09256
                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1885: FILE: test/include/CuTest.h:18:
+#define STRING_INC=09=09256

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1887: FILE: test/include/CuTest.h:20:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1888: FILE: test/include/CuTest.h:21:
+typedef struct
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1889: FILE: test/include/CuTest.h:22:
+=09int length;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1890: FILE: test/include/CuTest.h:23:
+=09int size;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1891: FILE: test/include/CuTest.h:24:
+=09char* buffer;
 ^

CHECK:CAMELCASE: Avoid CamelCase: <CuString>
#1892: FILE: test/include/CuTest.h:25:
+} CuString;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1894: FILE: test/include/CuTest.h:27:
+void CuStringInit(CuString* str);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringInit>
#1894: FILE: test/include/CuTest.h:27:
+void CuStringInit(CuString* str);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1895: FILE: test/include/CuTest.h:28:
+CuString* CuStringNew(void);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringNew>
#1895: FILE: test/include/CuTest.h:28:
+CuString* CuStringNew(void);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringDelete>
#1896: FILE: test/include/CuTest.h:29:
+void CuStringDelete(CuString *str);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1897: FILE: test/include/CuTest.h:30:
+void CuStringRead(CuString* str, const char* path);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1897: FILE: test/include/CuTest.h:30:
+void CuStringRead(CuString* str, const char* path);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringRead>
#1897: FILE: test/include/CuTest.h:30:
+void CuStringRead(CuString* str, const char* path);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1898: FILE: test/include/CuTest.h:31:
+void CuStringAppend(CuString* str, const char* text);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1898: FILE: test/include/CuTest.h:31:
+void CuStringAppend(CuString* str, const char* text);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringAppend>
#1898: FILE: test/include/CuTest.h:31:
+void CuStringAppend(CuString* str, const char* text);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1899: FILE: test/include/CuTest.h:32:
+void CuStringAppendChar(CuString* str, char ch);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringAppendChar>
#1899: FILE: test/include/CuTest.h:32:
+void CuStringAppendChar(CuString* str, char ch);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1900: FILE: test/include/CuTest.h:33:
+void CuStringAppendFormat(CuString* str, const char* format, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1900: FILE: test/include/CuTest.h:33:
+void CuStringAppendFormat(CuString* str, const char* format, ...);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringAppendFormat>
#1900: FILE: test/include/CuTest.h:33:
+void CuStringAppendFormat(CuString* str, const char* format, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1901: FILE: test/include/CuTest.h:34:
+void CuStringInsert(CuString* str, const char* text, int pos);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1901: FILE: test/include/CuTest.h:34:
+void CuStringInsert(CuString* str, const char* text, int pos);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringInsert>
#1901: FILE: test/include/CuTest.h:34:
+void CuStringInsert(CuString* str, const char* text, int pos);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1902: FILE: test/include/CuTest.h:35:
+void CuStringResize(CuString* str, int newSize);

CHECK:CAMELCASE: Avoid CamelCase: <CuStringResize>
#1902: FILE: test/include/CuTest.h:35:
+void CuStringResize(CuString* str, int newSize);

CHECK:CAMELCASE: Avoid CamelCase: <newSize>
#1902: FILE: test/include/CuTest.h:35:
+void CuStringResize(CuString* str, int newSize);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1906: FILE: test/include/CuTest.h:39:
+typedef struct CuTest CuTest;

CHECK:CAMELCASE: Avoid CamelCase: <CuTest>
#1906: FILE: test/include/CuTest.h:39:
+typedef struct CuTest CuTest;

CHECK:CAMELCASE: Avoid CamelCase: <TestFunction>
#1908: FILE: test/include/CuTest.h:41:
+typedef void (*TestFunction)(CuTest *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1911: FILE: test/include/CuTest.h:44:
+struct CuTest
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1912: FILE: test/include/CuTest.h:45:
+=09const char* name;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1912: FILE: test/include/CuTest.h:45:
+=09const char* name;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1913: FILE: test/include/CuTest.h:46:
+=09TestFunction function;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1914: FILE: test/include/CuTest.h:47:
+=09int failed;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1915: FILE: test/include/CuTest.h:48:
+=09int ran;
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1916: FILE: test/include/CuTest.h:49:
+=09const char* message;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1916: FILE: test/include/CuTest.h:49:
+=09const char* message;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1917: FILE: test/include/CuTest.h:50:
+=09jmp_buf *jumpBuf;
 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1917: FILE: test/include/CuTest.h:50:
+=09jmp_buf *jumpBuf;
            ^

CHECK:CAMELCASE: Avoid CamelCase: <jumpBuf>
#1917: FILE: test/include/CuTest.h:50:
+=09jmp_buf *jumpBuf;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1920: FILE: test/include/CuTest.h:53:
+void CuTestInit(CuTest* t, const char* name, TestFunction function);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1920: FILE: test/include/CuTest.h:53:
+void CuTestInit(CuTest* t, const char* name, TestFunction function);

CHECK:CAMELCASE: Avoid CamelCase: <CuTestInit>
#1920: FILE: test/include/CuTest.h:53:
+void CuTestInit(CuTest* t, const char* name, TestFunction function);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1921: FILE: test/include/CuTest.h:54:
+CuTest* CuTestNew(const char* name, TestFunction function);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1921: FILE: test/include/CuTest.h:54:
+CuTest* CuTestNew(const char* name, TestFunction function);

CHECK:CAMELCASE: Avoid CamelCase: <CuTestNew>
#1921: FILE: test/include/CuTest.h:54:
+CuTest* CuTestNew(const char* name, TestFunction function);

CHECK:CAMELCASE: Avoid CamelCase: <CuTestDelete>
#1922: FILE: test/include/CuTest.h:55:
+void CuTestDelete(CuTest *tc);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1923: FILE: test/include/CuTest.h:56:
+void CuTestRun(CuTest* tc);

CHECK:CAMELCASE: Avoid CamelCase: <CuTestRun>
#1923: FILE: test/include/CuTest.h:56:
+void CuTestRun(CuTest* tc);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1926: FILE: test/include/CuTest.h:59:
+void CuFail_Line(CuTest* tc, const char* file, int line, const char* messa=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1926: FILE: test/include/CuTest.h:59:
+void CuFail_Line(CuTest* tc, const char* file, int line, const char* messa=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1926: FILE: test/include/CuTest.h:59:
+void CuFail_Line(CuTest* tc, const char* file, int line, const char* messa=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1926: FILE: test/include/CuTest.h:59:
+void CuFail_Line(CuTest* tc, const char* file, int line, const char* messa=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuFail_Line>
#1926: FILE: test/include/CuTest.h:59:
+void CuFail_Line(CuTest* tc, const char* file, int line, const char* messa=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1928: FILE: test/include/CuTest.h:60:
+void CuAssert_Line(CuTest* tc, const char* file, int line, const char* mes=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1928: FILE: test/include/CuTest.h:60:
+void CuAssert_Line(CuTest* tc, const char* file, int line, const char* mes=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1928: FILE: test/include/CuTest.h:60:
+void CuAssert_Line(CuTest* tc, const char* file, int line, const char* mes=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1928: FILE: test/include/CuTest.h:60:
+void CuAssert_Line(CuTest* tc, const char* file, int line, const char* mes=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssert_Line>
#1928: FILE: test/include/CuTest.h:60:
+void CuAssert_Line(CuTest* tc, const char* file, int line, const char* mes=

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1930: FILE: test/include/CuTest.h:61:
+void CuAssertStrEquals_LineMsg(CuTest* tc,

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertStrEquals_LineMsg>
#1930: FILE: test/include/CuTest.h:61:
+void CuAssertStrEquals_LineMsg(CuTest* tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1931: FILE: test/include/CuTest.h:62:
+void CuAssertStrEquals_LineMsg(CuTest* tc,
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1931: FILE: test/include/CuTest.h:62:
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1931: FILE: test/include/CuTest.h:62:
+=09const char* file, int line, const char* message,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1931: FILE: test/include/CuTest.h:62:
+=09const char* file, int line, const char* message,
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1932: FILE: test/include/CuTest.h:63:
+=09const char* expected, const char* actual);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1932: FILE: test/include/CuTest.h:63:
+=09const char* expected, const char* actual);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1932: FILE: test/include/CuTest.h:63:
+=09const char* expected, const char* actual);
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1933: FILE: test/include/CuTest.h:64:
+void CuAssertIntEquals_LineMsg(CuTest* tc,

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertIntEquals_LineMsg>
#1933: FILE: test/include/CuTest.h:64:
+void CuAssertIntEquals_LineMsg(CuTest* tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1934: FILE: test/include/CuTest.h:65:
+void CuAssertIntEquals_LineMsg(CuTest* tc,
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1934: FILE: test/include/CuTest.h:65:
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1934: FILE: test/include/CuTest.h:65:
+=09const char* file, int line, const char* message,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1934: FILE: test/include/CuTest.h:65:
+=09const char* file, int line, const char* message,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1935: FILE: test/include/CuTest.h:66:
+=09int expected, int actual);
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1936: FILE: test/include/CuTest.h:67:
+void CuAssertDblEquals_LineMsg(CuTest* tc,

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertDblEquals_LineMsg>
#1936: FILE: test/include/CuTest.h:67:
+void CuAssertDblEquals_LineMsg(CuTest* tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1937: FILE: test/include/CuTest.h:68:
+void CuAssertDblEquals_LineMsg(CuTest* tc,
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1937: FILE: test/include/CuTest.h:68:
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1937: FILE: test/include/CuTest.h:68:
+=09const char* file, int line, const char* message,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1937: FILE: test/include/CuTest.h:68:
+=09const char* file, int line, const char* message,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1938: FILE: test/include/CuTest.h:69:
+=09double expected, double actual, double delta);
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1939: FILE: test/include/CuTest.h:70:
+void CuAssertPtrEquals_LineMsg(CuTest* tc,

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertPtrEquals_LineMsg>
#1939: FILE: test/include/CuTest.h:70:
+void CuAssertPtrEquals_LineMsg(CuTest* tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1940: FILE: test/include/CuTest.h:71:
+void CuAssertPtrEquals_LineMsg(CuTest* tc,
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1940: FILE: test/include/CuTest.h:71:
+=09const char* file, int line, const char* message,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1940: FILE: test/include/CuTest.h:71:
+=09const char* file, int line, const char* message,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1940: FILE: test/include/CuTest.h:71:
+=09const char* file, int line, const char* message,
 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1941: FILE: test/include/CuTest.h:72:
+=09void* expected, void* actual);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1941: FILE: test/include/CuTest.h:72:
+=09void* expected, void* actual);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1945: FILE: test/include/CuTest.h:76:
+#define CuFail(tc, ms)                        CuFail_Line(  (tc), __FILE__=
                                                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1945: FILE: test/include/CuTest.h:76:
+#define CuFail(tc, ms)                        CuFail_Line(  (tc), __FILE__=

CHECK:CAMELCASE: Avoid CamelCase: <CuFail>
#1945: FILE: test/include/CuTest.h:76:
+#define CuFail(tc, ms)                        CuFail_Line(  (tc), __FILE__=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1945: FILE: test/include/CuTest.h:76:
+#define CuFail(tc, ms)                        CuFail_Line(  (tc), __FILE__=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1947: FILE: test/include/CuTest.h:77:
+#define CuAssert(tc, ms, cond)                CuAssert_Line((tc), __FILE__=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssert>
#1947: FILE: test/include/CuTest.h:77:
+#define CuAssert(tc, ms, cond)                CuAssert_Line((tc), __FILE__=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1947: FILE: test/include/CuTest.h:77:
+#define CuAssert(tc, ms, cond)                CuAssert_Line((tc), __FILE__=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1949: FILE: test/include/CuTest.h:78:
+#define CuAssertTrue(tc, cond)                CuAssert_Line((tc), __FILE__=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertTrue>
#1949: FILE: test/include/CuTest.h:78:
+#define CuAssertTrue(tc, cond)                CuAssert_Line((tc), __FILE__=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1949: FILE: test/include/CuTest.h:78:
+#define CuAssertTrue(tc, cond)                CuAssert_Line((tc), __FILE__=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: test/include/CuTest.h:80:
+#define CuAssertStrEquals(tc,ex,ac)           CuAssertStrEquals_LineMsg((t=
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: test/include/CuTest.h:80:
+#define CuAssertStrEquals(tc,ex,ac)           CuAssertStrEquals_LineMsg((t=
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1952: FILE: test/include/CuTest.h:80:
+#define CuAssertStrEquals(tc,ex,ac)           CuAssertStrEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertStrEquals>
#1952: FILE: test/include/CuTest.h:80:
+#define CuAssertStrEquals(tc,ex,ac)           CuAssertStrEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1952: FILE: test/include/CuTest.h:80:
+#define CuAssertStrEquals(tc,ex,ac)           CuAssertStrEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=
                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertStrEquals_Msg>
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1954: FILE: test/include/CuTest.h:81:
+#define CuAssertStrEquals_Msg(tc,ms,ex,ac)    CuAssertStrEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1956: FILE: test/include/CuTest.h:82:
+#define CuAssertIntEquals(tc,ex,ac)           CuAssertIntEquals_LineMsg((t=
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1956: FILE: test/include/CuTest.h:82:
+#define CuAssertIntEquals(tc,ex,ac)           CuAssertIntEquals_LineMsg((t=
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1956: FILE: test/include/CuTest.h:82:
+#define CuAssertIntEquals(tc,ex,ac)           CuAssertIntEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertIntEquals>
#1956: FILE: test/include/CuTest.h:82:
+#define CuAssertIntEquals(tc,ex,ac)           CuAssertIntEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1956: FILE: test/include/CuTest.h:82:
+#define CuAssertIntEquals(tc,ex,ac)           CuAssertIntEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=
                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertIntEquals_Msg>
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1958: FILE: test/include/CuTest.h:83:
+#define CuAssertIntEquals_Msg(tc,ms,ex,ac)    CuAssertIntEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=
                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertDblEquals>
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1960: FILE: test/include/CuTest.h:84:
+#define CuAssertDblEquals(tc,ex,ac,dl)        CuAssertDblEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=
                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertDblEquals_Msg>
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1962: FILE: test/include/CuTest.h:85:
+#define CuAssertDblEquals_Msg(tc,ms,ex,ac,dl) CuAssertDblEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1964: FILE: test/include/CuTest.h:86:
+#define CuAssertPtrEquals(tc,ex,ac)           CuAssertPtrEquals_LineMsg((t=
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1964: FILE: test/include/CuTest.h:86:
+#define CuAssertPtrEquals(tc,ex,ac)           CuAssertPtrEquals_LineMsg((t=
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1964: FILE: test/include/CuTest.h:86:
+#define CuAssertPtrEquals(tc,ex,ac)           CuAssertPtrEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertPtrEquals>
#1964: FILE: test/include/CuTest.h:86:
+#define CuAssertPtrEquals(tc,ex,ac)           CuAssertPtrEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1964: FILE: test/include/CuTest.h:86:
+#define CuAssertPtrEquals(tc,ex,ac)           CuAssertPtrEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=
                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertPtrEquals_Msg>
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1966: FILE: test/include/CuTest.h:87:
+#define CuAssertPtrEquals_Msg(tc,ms,ex,ac)    CuAssertPtrEquals_LineMsg((t=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=
                                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertPtrNotNull>
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1969: FILE: test/include/CuTest.h:89:
+#define CuAssertPtrNotNull(tc,p)        CuAssert_Line((tc),__FILE__,__LINE=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=
                                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuAssertPtrNotNullMsg>
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1971: FILE: test/include/CuTest.h:90:
+#define CuAssertPtrNotNullMsg(tc,msg,p) CuAssert_Line((tc),__FILE__,__LINE=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1976: FILE: test/include/CuTest.h:94:
+#define MAX_TEST_CASES=091024
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1976: FILE: test/include/CuTest.h:94:
+#define MAX_TEST_CASES=091024

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=
                                                                         ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=
                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=
                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteAdd>
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1978: FILE: test/include/CuTest.h:96:
+#define SUITE_ADD_TEST(SUITE,TEST)=09CuSuiteAdd(SUITE, CuTestNew(#TEST, TE=

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1981: FILE: test/include/CuTest.h:98:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1982: FILE: test/include/CuTest.h:99:
+typedef struct
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1983: FILE: test/include/CuTest.h:100:
+=09int count;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1984: FILE: test/include/CuTest.h:101:
+=09CuTest* list[MAX_TEST_CASES];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1985: FILE: test/include/CuTest.h:102:
+=09int failCount;
 ^

CHECK:CAMELCASE: Avoid CamelCase: <failCount>
#1985: FILE: test/include/CuTest.h:102:
+=09int failCount;

CHECK:CAMELCASE: Avoid CamelCase: <CuSuite>
#1987: FILE: test/include/CuTest.h:104:
+} CuSuite;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1989: FILE: test/include/CuTest.h:106:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1990: FILE: test/include/CuTest.h:107:
+void CuSuiteInit(CuSuite* testSuite);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteInit>
#1990: FILE: test/include/CuTest.h:107:
+void CuSuiteInit(CuSuite* testSuite);

CHECK:CAMELCASE: Avoid CamelCase: <testSuite>
#1990: FILE: test/include/CuTest.h:107:
+void CuSuiteInit(CuSuite* testSuite);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1991: FILE: test/include/CuTest.h:108:
+CuSuite* CuSuiteNew(void);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteNew>
#1991: FILE: test/include/CuTest.h:108:
+CuSuite* CuSuiteNew(void);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteDelete>
#1992: FILE: test/include/CuTest.h:109:
+void CuSuiteDelete(CuSuite *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'CuSuite *' should also have an identifier name
#1992: FILE: test/include/CuTest.h:109:
+void CuSuiteDelete(CuSuite *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1993: FILE: test/include/CuTest.h:110:
+void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase);

CHECK:CAMELCASE: Avoid CamelCase: <testCase>
#1993: FILE: test/include/CuTest.h:110:
+void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1994: FILE: test/include/CuTest.h:111:
+void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1994: FILE: test/include/CuTest.h:111:
+void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteAddSuite>
#1994: FILE: test/include/CuTest.h:111:
+void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2);

CHECK:CAMELCASE: Avoid CamelCase: <testSuite2>
#1994: FILE: test/include/CuTest.h:111:
+void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1995: FILE: test/include/CuTest.h:112:
+void CuSuiteRun(CuSuite* testSuite);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteRun>
#1995: FILE: test/include/CuTest.h:112:
+void CuSuiteRun(CuSuite* testSuite);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1996: FILE: test/include/CuTest.h:113:
+void CuSuiteSummary(CuSuite* testSuite, CuString* summary);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1996: FILE: test/include/CuTest.h:113:
+void CuSuiteSummary(CuSuite* testSuite, CuString* summary);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteSummary>
#1996: FILE: test/include/CuTest.h:113:
+void CuSuiteSummary(CuSuite* testSuite, CuString* summary);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1997: FILE: test/include/CuTest.h:114:
+void CuSuiteDetails(CuSuite* testSuite, CuString* details);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1997: FILE: test/include/CuTest.h:114:
+void CuSuiteDetails(CuSuite* testSuite, CuString* details);

CHECK:CAMELCASE: Avoid CamelCase: <CuSuiteDetails>
#1997: FILE: test/include/CuTest.h:114:
+void CuSuiteDetails(CuSuite* testSuite, CuString* details);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#2008: FILE: test/make-tests.sh:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2068: FILE: test/mm/kmalloc-test.c:1:
+#include <CuTest.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2073: FILE: test/mm/kmalloc-test.c:6:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2074: FILE: test/mm/kmalloc-test.c:7:
+=09void *obj1 =3D kmalloc(10, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2074: FILE: test/mm/kmalloc-test.c:7:
+=09void *obj1 =3D kmalloc(10, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2075: FILE: test/mm/kmalloc-test.c:8:
+=09void *obj2 =3D kmalloc(10, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2075: FILE: test/mm/kmalloc-test.c:8:
+=09void *obj2 =3D kmalloc(10, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2076: FILE: test/mm/kmalloc-test.c:9:
+=09CuAssertIntEquals(ct, (unsigned long)obj1+32, (unsigned long)obj2);
 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2076: FILE: test/mm/kmalloc-test.c:9:
+=09CuAssertIntEquals(ct, (unsigned long)obj1+32, (unsigned long)obj2);
                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2077: FILE: test/mm/kmalloc-test.c:10:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2082: FILE: test/mm/kmalloc-test.c:15:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2083: FILE: test/mm/kmalloc-test.c:16:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2084: FILE: test/mm/kmalloc-test.c:17:
+=09char *obj =3D kzalloc(10, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2084: FILE: test/mm/kmalloc-test.c:17:
+=09char *obj =3D kzalloc(10, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2085: FILE: test/mm/kmalloc-test.c:18:
+=09for (i =3D 0; i < 10; i++)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2085: FILE: test/mm/kmalloc-test.c:18:
+=09for (i =3D 0; i < 10; i++)
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2086: FILE: test/mm/kmalloc-test.c:19:
+=09=09CuAssertIntEquals(ct, 0, obj[i]);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2086: FILE: test/mm/kmalloc-test.c:19:
+=09=09CuAssertIntEquals(ct, 0, obj[i]);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2087: FILE: test/mm/kmalloc-test.c:20:
+=09kmem_cache_release();
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2096: FILE: test/mm/kmem-test.c:1:
+#include <CuTest.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2101: FILE: test/mm/kmem-test.c:6:
+#define DEFAULT_OBJSIZE (PAGE_SIZE/2)
                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2106: FILE: test/mm/kmem-test.c:11:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2107: FILE: test/mm/kmem-test.c:12:
+=09struct kmem_cache *cache =3D kmem_cache_create("object_cache", 512, 0, =
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2107: FILE: test/mm/kmem-test.c:12:
+=09struct kmem_cache *cache =3D kmem_cache_create("object_cache", 512, 0, =
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2109: FILE: test/mm/kmem-test.c:13:
+=09CuAssertStrEquals(ct, "object_cache", cache->name);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2110: FILE: test/mm/kmem-test.c:14:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2111: FILE: test/mm/kmem-test.c:15:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2116: FILE: test/mm/kmem-test.c:20:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2117: FILE: test/mm/kmem-test.c:21:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2117: FILE: test/mm/kmem-test.c:21:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2117: FILE: test/mm/kmem-test.c:21:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2119: FILE: test/mm/kmem-test.c:22:
+=09CuAssertIntEquals(ct, 0, cache->stats.grown);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2120: FILE: test/mm/kmem-test.c:23:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2120: FILE: test/mm/kmem-test.c:23:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2121: FILE: test/mm/kmem-test.c:24:
+=09CuAssertIntEquals(ct, 1, cache->stats.grown);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2122: FILE: test/mm/kmem-test.c:25:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2123: FILE: test/mm/kmem-test.c:26:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2124: FILE: test/mm/kmem-test.c:27:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2127: FILE: test/mm/kmem-test.c:30:
+static void alloc_objs(struct kmem_cache *cache, void *objs[], size_t nr_o=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2129: FILE: test/mm/kmem-test.c:31:
+static void alloc_objs(struct kmem_cache *cache, void *objs[], size_t nr_o=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2130: FILE: test/mm/kmem-test.c:32:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2131: FILE: test/mm/kmem-test.c:33:
+=09for (i =3D 0; i < nr_objs; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2131: FILE: test/mm/kmem-test.c:33:
+=09for (i =3D 0; i < nr_objs; i++) {
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2132: FILE: test/mm/kmem-test.c:34:
+=09=09objs[i] =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2132: FILE: test/mm/kmem-test.c:34:
+=09=09objs[i] =3D kmem_cache_alloc(cache, GFP_KERNEL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2132: FILE: test/mm/kmem-test.c:34:
+=09=09objs[i] =3D kmem_cache_alloc(cache, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2133: FILE: test/mm/kmem-test.c:35:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2136: FILE: test/mm/kmem-test.c:38:
+static void free_objs(struct kmem_cache *cache, void *objs[], size_t nr_ob=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2138: FILE: test/mm/kmem-test.c:39:
+static void free_objs(struct kmem_cache *cache, void *objs[], size_t nr_ob=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2139: FILE: test/mm/kmem-test.c:40:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2140: FILE: test/mm/kmem-test.c:41:
+=09for (i =3D 0; i < nr_objs; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2140: FILE: test/mm/kmem-test.c:41:
+=09for (i =3D 0; i < nr_objs; i++) {
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2141: FILE: test/mm/kmem-test.c:42:
+=09=09kmem_cache_free(cache, objs[i]);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2141: FILE: test/mm/kmem-test.c:42:
+=09=09kmem_cache_free(cache, objs[i]);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2142: FILE: test/mm/kmem-test.c:43:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2147: FILE: test/mm/kmem-test.c:48:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2148: FILE: test/mm/kmem-test.c:49:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2148: FILE: test/mm/kmem-test.c:49:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2148: FILE: test/mm/kmem-test.c:49:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2150: FILE: test/mm/kmem-test.c:50:
+=09void *objs[MAX_OBJS];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2151: FILE: test/mm/kmem-test.c:51:
+=09alloc_objs(cache, objs, MAX_OBJS);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2152: FILE: test/mm/kmem-test.c:52:
+=09free_objs(cache, objs, MAX_OBJS);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2153: FILE: test/mm/kmem-test.c:53:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2154: FILE: test/mm/kmem-test.c:54:
+=09CuAssertIntEquals(ct, 1, list_empty(&cache->full_slabs));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2155: FILE: test/mm/kmem-test.c:55:
+=09CuAssertIntEquals(ct, 1, list_empty(&cache->partial_slabs));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2156: FILE: test/mm/kmem-test.c:56:
+=09CuAssertIntEquals(ct, 1, list_empty(&cache->empty_slabs));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2157: FILE: test/mm/kmem-test.c:57:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2162: FILE: test/mm/kmem-test.c:62:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2163: FILE: test/mm/kmem-test.c:63:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2163: FILE: test/mm/kmem-test.c:63:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2163: FILE: test/mm/kmem-test.c:63:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2165: FILE: test/mm/kmem-test.c:64:
+=09void *objs[MAX_OBJS];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2166: FILE: test/mm/kmem-test.c:65:
+=09alloc_objs(cache, objs, MAX_OBJS);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2167: FILE: test/mm/kmem-test.c:66:
+=09CuAssertIntEquals(ct, (MAX_OBJS*DEFAULT_OBJSIZE/PAGE_SIZE), cache->stat=
 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2167: FILE: test/mm/kmem-test.c:66:
+=09CuAssertIntEquals(ct, (MAX_OBJS*DEFAULT_OBJSIZE/PAGE_SIZE), cache->stat=
                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2167: FILE: test/mm/kmem-test.c:66:
+=09CuAssertIntEquals(ct, (MAX_OBJS*DEFAULT_OBJSIZE/PAGE_SIZE), cache->stat=
                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2167: FILE: test/mm/kmem-test.c:66:
+=09CuAssertIntEquals(ct, (MAX_OBJS*DEFAULT_OBJSIZE/PAGE_SIZE), cache->stat=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2169: FILE: test/mm/kmem-test.c:67:
+=09free_objs(cache, objs, MAX_OBJS);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2170: FILE: test/mm/kmem-test.c:68:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2171: FILE: test/mm/kmem-test.c:69:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2176: FILE: test/mm/kmem-test.c:74:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2177: FILE: test/mm/kmem-test.c:75:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2177: FILE: test/mm/kmem-test.c:75:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2177: FILE: test/mm/kmem-test.c:75:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2179: FILE: test/mm/kmem-test.c:76:
+=09void *obj1 =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2179: FILE: test/mm/kmem-test.c:76:
+=09void *obj1 =3D kmem_cache_alloc(cache, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2180: FILE: test/mm/kmem-test.c:77:
+=09kmem_cache_free(cache, obj1);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2181: FILE: test/mm/kmem-test.c:78:
+=09void *obj2 =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2181: FILE: test/mm/kmem-test.c:78:
+=09void *obj2 =3D kmem_cache_alloc(cache, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2182: FILE: test/mm/kmem-test.c:79:
+=09kmem_cache_free(cache, obj2);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2183: FILE: test/mm/kmem-test.c:80:
+=09CuAssertPtrEquals(ct, obj1, obj2);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2184: FILE: test/mm/kmem-test.c:81:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2185: FILE: test/mm/kmem-test.c:82:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2190: FILE: test/mm/kmem-test.c:87:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2191: FILE: test/mm/kmem-test.c:88:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2191: FILE: test/mm/kmem-test.c:88:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2191: FILE: test/mm/kmem-test.c:88:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2193: FILE: test/mm/kmem-test.c:89:
+=09void *obj1 =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2193: FILE: test/mm/kmem-test.c:89:
+=09void *obj1 =3D kmem_cache_alloc(cache, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2194: FILE: test/mm/kmem-test.c:90:
+=09void *obj2 =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2194: FILE: test/mm/kmem-test.c:90:
+=09void *obj2 =3D kmem_cache_alloc(cache, GFP_KERNEL);
               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2195: FILE: test/mm/kmem-test.c:91:
+=09CuAssertPtrEquals(ct, obj1+(DEFAULT_OBJSIZE), obj2);
 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2195: FILE: test/mm/kmem-test.c:91:
+=09CuAssertPtrEquals(ct, obj1+(DEFAULT_OBJSIZE), obj2);
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2196: FILE: test/mm/kmem-test.c:92:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2197: FILE: test/mm/kmem-test.c:93:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2204: FILE: test/mm/kmem-test.c:100:
+static void ctor_dtor(void *obj, struct kmem_cache *cache, unsigned long f=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2206: FILE: test/mm/kmem-test.c:101:
+static void ctor_dtor(void *obj, struct kmem_cache *cache, unsigned long f=
+{

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2207: FILE: test/mm/kmem-test.c:102:
+=09nr_ctor_dtor_called++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2208: FILE: test/mm/kmem-test.c:103:
+=09cache_passed_to_ctor_dtor =3D cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2208: FILE: test/mm/kmem-test.c:103:
+=09cache_passed_to_ctor_dtor =3D cache;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2209: FILE: test/mm/kmem-test.c:104:
+=09flags_passed_to_ctor_dtor =3D flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2209: FILE: test/mm/kmem-test.c:104:
+=09flags_passed_to_ctor_dtor =3D flags;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2214: FILE: test/mm/kmem-test.c:109:
+=09nr_ctor_dtor_called =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2214: FILE: test/mm/kmem-test.c:109:
+=09nr_ctor_dtor_called =3D 0;
                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2215: FILE: test/mm/kmem-test.c:110:
+=09cache_passed_to_ctor_dtor =3D NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2215: FILE: test/mm/kmem-test.c:110:
+=09cache_passed_to_ctor_dtor =3D NULL;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2216: FILE: test/mm/kmem-test.c:111:
+=09flags_passed_to_ctor_dtor =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2216: FILE: test/mm/kmem-test.c:111:
+=09flags_passed_to_ctor_dtor =3D 0;
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2221: FILE: test/mm/kmem-test.c:116:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2222: FILE: test/mm/kmem-test.c:117:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2222: FILE: test/mm/kmem-test.c:117:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2222: FILE: test/mm/kmem-test.c:117:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2224: FILE: test/mm/kmem-test.c:118:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2225: FILE: test/mm/kmem-test.c:119:
+=09reset_ctor_dtor();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2226: FILE: test/mm/kmem-test.c:120:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2226: FILE: test/mm/kmem-test.c:120:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2227: FILE: test/mm/kmem-test.c:121:
+=09CuAssertIntEquals(ct, 1, nr_ctor_dtor_called);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2228: FILE: test/mm/kmem-test.c:122:
+=09CuAssertPtrEquals(ct, cache, cache_passed_to_ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2229: FILE: test/mm/kmem-test.c:123:
+=09CuAssertIntEquals(ct, SLAB_CTOR_CONSTRUCTOR,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2230: FILE: test/mm/kmem-test.c:124:
+=09=09=09  flags_passed_to_ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2230: FILE: test/mm/kmem-test.c:124:
+=09=09=09  flags_passed_to_ctor_dtor);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2230: FILE: test/mm/kmem-test.c:124:
+=09=09=09  flags_passed_to_ctor_dtor);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2231: FILE: test/mm/kmem-test.c:125:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2232: FILE: test/mm/kmem-test.c:126:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2237: FILE: test/mm/kmem-test.c:131:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2238: FILE: test/mm/kmem-test.c:132:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2238: FILE: test/mm/kmem-test.c:132:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2238: FILE: test/mm/kmem-test.c:132:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2240: FILE: test/mm/kmem-test.c:133:
+=09=09=09=09=09=09     0, 0, ctor_dtor, NULL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2241: FILE: test/mm/kmem-test.c:134:
+=09reset_ctor_dtor();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2242: FILE: test/mm/kmem-test.c:135:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_ATOMIC);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2242: FILE: test/mm/kmem-test.c:135:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_ATOMIC);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2243: FILE: test/mm/kmem-test.c:136:
+=09CuAssertIntEquals(ct, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_ATOMIC,
 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2243: FILE: test/mm/kmem-test.c:136:
+=09CuAssertIntEquals(ct, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_ATOMIC,
                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2244: FILE: test/mm/kmem-test.c:137:
+=09=09=09  flags_passed_to_ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2244: FILE: test/mm/kmem-test.c:137:
+=09=09=09  flags_passed_to_ctor_dtor);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2244: FILE: test/mm/kmem-test.c:137:
+=09=09=09  flags_passed_to_ctor_dtor);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2245: FILE: test/mm/kmem-test.c:138:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2246: FILE: test/mm/kmem-test.c:139:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2247: FILE: test/mm/kmem-test.c:140:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2252: FILE: test/mm/kmem-test.c:145:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2253: FILE: test/mm/kmem-test.c:146:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2253: FILE: test/mm/kmem-test.c:146:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2253: FILE: test/mm/kmem-test.c:146:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2255: FILE: test/mm/kmem-test.c:147:
+=09=09=09=09=09=09     0, 0, NULL, ctor_dtor);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2256: FILE: test/mm/kmem-test.c:148:
+=09reset_ctor_dtor();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2257: FILE: test/mm/kmem-test.c:149:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2257: FILE: test/mm/kmem-test.c:149:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2258: FILE: test/mm/kmem-test.c:150:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2259: FILE: test/mm/kmem-test.c:151:
+=09CuAssertIntEquals(ct, 0, nr_ctor_dtor_called);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2260: FILE: test/mm/kmem-test.c:152:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2261: FILE: test/mm/kmem-test.c:153:
+=09CuAssertIntEquals(ct, 1, nr_ctor_dtor_called);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2262: FILE: test/mm/kmem-test.c:154:
+=09CuAssertPtrEquals(ct, cache, cache_passed_to_ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2263: FILE: test/mm/kmem-test.c:155:
+=09CuAssertIntEquals(ct, 0, flags_passed_to_ctor_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2264: FILE: test/mm/kmem-test.c:156:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2269: FILE: test/mm/kmem-test.c:161:
+static void memset_ctor(void *obj, struct kmem_cache *cache, unsigned long=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2272: FILE: test/mm/kmem-test.c:164:
+=09memset(obj, PATTERN, cache->objsize);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2275: FILE: test/mm/kmem-test.c:167:
+static void memcmp_dtor(void *obj, struct kmem_cache *cache, unsigned long=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2278: FILE: test/mm/kmem-test.c:170:
+=09int i;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2279: FILE: test/mm/kmem-test.c:171:
+=09char *array =3D obj;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2279: FILE: test/mm/kmem-test.c:171:
+=09char *array =3D obj;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2281: FILE: test/mm/kmem-test.c:173:
+=09for (i =3D 0; i < cache->objsize; i++) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2281: FILE: test/mm/kmem-test.c:173:
+=09for (i =3D 0; i < cache->objsize; i++) {
           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2282: FILE: test/mm/kmem-test.c:174:
+=09=09if (array[i] !=3D PATTERN)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2282: FILE: test/mm/kmem-test.c:174:
+=09=09if (array[i] !=3D PATTERN)
    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#2282: FILE: test/mm/kmem-test.c:174:
+=09=09if (array[i] !=3D PATTERN)
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2283: FILE: test/mm/kmem-test.c:175:
+=09=09=09BUG();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2283: FILE: test/mm/kmem-test.c:175:
+=09=09=09BUG();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2283: FILE: test/mm/kmem-test.c:175:
+=09=09=09BUG();
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2284: FILE: test/mm/kmem-test.c:176:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2289: FILE: test/mm/kmem-test.c:181:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2290: FILE: test/mm/kmem-test.c:182:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2290: FILE: test/mm/kmem-test.c:182:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2290: FILE: test/mm/kmem-test.c:182:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", DEFAULT_OBJSIZE=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2292: FILE: test/mm/kmem-test.c:183:
+=09=09=09=09=09=09     0, 0, memset_ctor,
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2293: FILE: test/mm/kmem-test.c:184:
+=09=09=09=09=09=09     memcmp_dtor);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2294: FILE: test/mm/kmem-test.c:185:
+=09reset_ctor_dtor();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2295: FILE: test/mm/kmem-test.c:186:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2295: FILE: test/mm/kmem-test.c:186:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2296: FILE: test/mm/kmem-test.c:187:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2297: FILE: test/mm/kmem-test.c:188:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2298: FILE: test/mm/kmem-test.c:189:
+=09kmem_cache_release();
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2302: FILE: test/mm/kmem-test.c:193:
+static void assert_num_objs_and_cache_order(CuTest *ct,
+=09=09=09=09=09    unsigned long expected_num_objs,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2302: FILE: test/mm/kmem-test.c:193:
+=09=09=09=09=09    unsigned long expected_num_objs,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2302: FILE: test/mm/kmem-test.c:193:
+=09=09=09=09=09    unsigned long expected_num_objs,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2302: FILE: test/mm/kmem-test.c:193:
+=09=09=09=09=09    unsigned long expected_num_objs,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2302: FILE: test/mm/kmem-test.c:193:
+=09=09=09=09=09    unsigned long expected_num_objs,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2302: FILE: test/mm/kmem-test.c:193:
+=09=09=09=09=09    unsigned long expected_num_objs,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2303: FILE: test/mm/kmem-test.c:194:
+=09=09=09=09=09    unsigned int expected_order,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2303: FILE: test/mm/kmem-test.c:194:
+=09=09=09=09=09    unsigned int expected_order,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2303: FILE: test/mm/kmem-test.c:194:
+=09=09=09=09=09    unsigned int expected_order,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2303: FILE: test/mm/kmem-test.c:194:
+=09=09=09=09=09    unsigned int expected_order,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2303: FILE: test/mm/kmem-test.c:194:
+=09=09=09=09=09    unsigned int expected_order,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2304: FILE: test/mm/kmem-test.c:195:
+=09=09=09=09=09    unsigned long objsize)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2304: FILE: test/mm/kmem-test.c:195:
+=09=09=09=09=09    unsigned long objsize)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2304: FILE: test/mm/kmem-test.c:195:
+=09=09=09=09=09    unsigned long objsize)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2304: FILE: test/mm/kmem-test.c:195:
+=09=09=09=09=09    unsigned long objsize)
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2304: FILE: test/mm/kmem-test.c:195:
+=09=09=09=09=09    unsigned long objsize)
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2306: FILE: test/mm/kmem-test.c:197:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2307: FILE: test/mm/kmem-test.c:198:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", objsize,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2307: FILE: test/mm/kmem-test.c:198:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", objsize,
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2308: FILE: test/mm/kmem-test.c:199:
+=09=09=09=09=09=09     0, 0, NULL, NULL);
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2309: FILE: test/mm/kmem-test.c:200:
+=09CuAssertIntEquals(ct, expected_num_objs, cache->slab_capacity);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2310: FILE: test/mm/kmem-test.c:201:
+=09CuAssertIntEquals(ct, expected_order, cache->cache_order);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2311: FILE: test/mm/kmem-test.c:202:
+=09kmem_cache_destroy(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2312: FILE: test/mm/kmem-test.c:203:
+=09kmem_cache_release();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2317: FILE: test/mm/kmem-test.c:208:
+=09assert_num_objs_and_cache_order(ct, 127, 0, 32);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2318: FILE: test/mm/kmem-test.c:209:
+=09assert_num_objs_and_cache_order(ct, 63, 0, 64);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2319: FILE: test/mm/kmem-test.c:210:
+=09assert_num_objs_and_cache_order(ct, 31, 0, 128);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2320: FILE: test/mm/kmem-test.c:211:
+=09assert_num_objs_and_cache_order(ct, 15, 0, 256);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2321: FILE: test/mm/kmem-test.c:212:
+=09assert_num_objs_and_cache_order(ct,  8, 0, 512);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2322: FILE: test/mm/kmem-test.c:213:
+=09assert_num_objs_and_cache_order(ct,  4, 0, 1024);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2323: FILE: test/mm/kmem-test.c:214:
+=09assert_num_objs_and_cache_order(ct,  2, 0, 2048);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2324: FILE: test/mm/kmem-test.c:215:
+=09assert_num_objs_and_cache_order(ct,  1, 0, 4096);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2325: FILE: test/mm/kmem-test.c:216:
+=09assert_num_objs_and_cache_order(ct,  1, 1, 8192);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2326: FILE: test/mm/kmem-test.c:217:
+=09assert_num_objs_and_cache_order(ct,  1, 2, 16384);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2327: FILE: test/mm/kmem-test.c:218:
+=09assert_num_objs_and_cache_order(ct,  1, 3, 32768);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2328: FILE: test/mm/kmem-test.c:219:
+=09assert_num_objs_and_cache_order(ct,  1, 11, (1<<MAX_ORDER)*PAGE_SIZE);
 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2328: FILE: test/mm/kmem-test.c:219:
+=09assert_num_objs_and_cache_order(ct,  1, 11, (1<<MAX_ORDER)*PAGE_SIZE);
                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2328: FILE: test/mm/kmem-test.c:219:
+=09assert_num_objs_and_cache_order(ct,  1, 11, (1<<MAX_ORDER)*PAGE_SIZE);
                                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2333: FILE: test/mm/kmem-test.c:224:
+=09assert_num_objs_and_cache_order(ct, 5, 0, 765);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2334: FILE: test/mm/kmem-test.c:225:
+=09assert_num_objs_and_cache_order(ct, 1, 1, PAGE_SIZE+1);
 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2334: FILE: test/mm/kmem-test.c:225:
+=09assert_num_objs_and_cache_order(ct, 1, 1, PAGE_SIZE+1);
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2335: FILE: test/mm/kmem-test.c:226:
+=09assert_num_objs_and_cache_order(ct, 7, 3, PAGE_SIZE+512);
 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2335: FILE: test/mm/kmem-test.c:226:
+=09assert_num_objs_and_cache_order(ct, 7, 3, PAGE_SIZE+512);
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2340: FILE: test/mm/kmem-test.c:231:
+=09kmem_cache_init();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2341: FILE: test/mm/kmem-test.c:232:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", PAGE_SIZE, 0, 0=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2341: FILE: test/mm/kmem-test.c:232:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", PAGE_SIZE, 0, 0=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2341: FILE: test/mm/kmem-test.c:232:
+=09struct kmem_cache *cache =3D kmem_cache_create("cache", PAGE_SIZE, 0, 0=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2343: FILE: test/mm/kmem-test.c:233:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2343: FILE: test/mm/kmem-test.c:233:
+=09void *obj =3D kmem_cache_alloc(cache, GFP_KERNEL);
              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2344: FILE: test/mm/kmem-test.c:234:
+=09kmem_cache_free(cache, obj);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2345: FILE: test/mm/kmem-test.c:235:
+=09CuAssertIntEquals(ct, 0, cache->stats.reaped);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2346: FILE: test/mm/kmem-test.c:236:
+=09kmem_cache_shrink(cache);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2347: FILE: test/mm/kmem-test.c:237:
+=09CuAssertIntEquals(ct, 1, list_empty(&cache->full_slabs));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2348: FILE: test/mm/kmem-test.c:238:
+=09CuAssertIntEquals(ct, 1, cache->stats.reaped);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2349: FILE: test/mm/kmem-test.c:239:
+=09kmem_cache_destroy(cache);
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2359: FILE: test/include/linux/gfp.h:1:
+#ifndef __LINUX_GFP_H

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2366: FILE: test/include/linux/gfp.h:8:
+#define __GFP_DMA=09((__force gfp_t)0x01u)
                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2366: FILE: test/include/linux/gfp.h:8:
+#define __GFP_DMA=09((__force gfp_t)0x01u)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2367: FILE: test/include/linux/gfp.h:9:
+#define __GFP_HIGHMEM=09((__force gfp_t)0x02u)
                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2367: FILE: test/include/linux/gfp.h:9:
+#define __GFP_HIGHMEM=09((__force gfp_t)0x02u)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2381: FILE: test/include/linux/gfp.h:22:
+#define __GFP_WAIT=09((__force gfp_t)0x10u)=09/* Can wait and reschedule? =
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2381: FILE: test/include/linux/gfp.h:22:
+#define __GFP_WAIT=09((__force gfp_t)0x10u)=09/* Can wait and reschedule? =
                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2381: FILE: test/include/linux/gfp.h:22:
+#define __GFP_WAIT=09((__force gfp_t)0x10u)=09/* Can wait and reschedule? =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2383: FILE: test/include/linux/gfp.h:23:
+#define __GFP_WAIT=09((__force gfp_t)0x10u)=09/* Can wait and reschedule? =
+#define __GFP_HIGH=09((__force gfp_t)0x20u)=09/* Should access emergency p=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2385: FILE: test/include/linux/gfp.h:24:
+#define __GFP_HIGH=09((__force gfp_t)0x20u)=09/* Should access emergency p=
+#define __GFP_IO=09((__force gfp_t)0x40u)=09/* Can start physical IO? */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2386: FILE: test/include/linux/gfp.h:25:
+#define __GFP_FS=09((__force gfp_t)0x80u)=09/* Can call down to low-level =
                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2386: FILE: test/include/linux/gfp.h:25:
+#define __GFP_FS=09((__force gfp_t)0x80u)=09/* Can call down to low-level =
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2386: FILE: test/include/linux/gfp.h:25:
+#define __GFP_FS=09((__force gfp_t)0x80u)=09/* Can call down to low-level =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2388: FILE: test/include/linux/gfp.h:26:
+#define __GFP_FS=09((__force gfp_t)0x80u)=09/* Can call down to low-level =
+#define __GFP_COLD=09((__force gfp_t)0x100u)=09/* Cache-cold page required=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2390: FILE: test/include/linux/gfp.h:28:
+#define __GFP_NOWARN=09((__force gfp_t)0x200u)=09/* Suppress page allocati=
                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2390: FILE: test/include/linux/gfp.h:28:
+#define __GFP_NOWARN=09((__force gfp_t)0x200u)=09/* Suppress page allocati=
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2390: FILE: test/include/linux/gfp.h:28:
+#define __GFP_NOWARN=09((__force gfp_t)0x200u)=09/* Suppress page allocati=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2392: FILE: test/include/linux/gfp.h:29:
+#define __GFP_NOWARN=09((__force gfp_t)0x200u)=09/* Suppress page allocati=
+#define __GFP_REPEAT=09((__force gfp_t)0x400u)=09/* Retry the allocation. =

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2394: FILE: test/include/linux/gfp.h:31:
+#define __GFP_NOFAIL=09((__force gfp_t)0x800u)=09/* Retry for ever.  Canno=
                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2394: FILE: test/include/linux/gfp.h:31:
+#define __GFP_NOFAIL=09((__force gfp_t)0x800u)=09/* Retry for ever.  Canno=
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2394: FILE: test/include/linux/gfp.h:31:
+#define __GFP_NOFAIL=09((__force gfp_t)0x800u)=09/* Retry for ever.  Canno=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2396: FILE: test/include/linux/gfp.h:32:
+#define __GFP_NOFAIL=09((__force gfp_t)0x800u)=09/* Retry for ever.  Canno=
+#define __GFP_NORETRY=09((__force gfp_t)0x1000u)/* Do not retry.  Might fa=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2398: FILE: test/include/linux/gfp.h:33:
+#define __GFP_NORETRY=09((__force gfp_t)0x1000u)/* Do not retry.  Might fa=
+#define __GFP_NO_GROW=09((__force gfp_t)0x2000u)/* Slab internal usage */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2399: FILE: test/include/linux/gfp.h:34:
+#define __GFP_COMP=09((__force gfp_t)0x4000u)/* Add compound page metadata=
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2399: FILE: test/include/linux/gfp.h:34:
+#define __GFP_COMP=09((__force gfp_t)0x4000u)/* Add compound page metadata=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2401: FILE: test/include/linux/gfp.h:36:
+#define __GFP_ZERO=09((__force gfp_t)0x8000u)/* Return zeroed page on succ=
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2401: FILE: test/include/linux/gfp.h:36:
+#define __GFP_ZERO=09((__force gfp_t)0x8000u)/* Return zeroed page on succ=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2403: FILE: test/include/linux/gfp.h:37:
+#define __GFP_ZERO=09((__force gfp_t)0x8000u)/* Return zeroed page on succ=
+#define __GFP_NOMEMALLOC ((__force gfp_t)0x10000u) /* Don't use emergency =

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#2405: FILE: test/include/linux/gfp.h:38:
+#define __GFP_NORECLAIM  ((__force gfp_t)0x20000u) /* No realy zone reclai=
                                                          ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2405: FILE: test/include/linux/gfp.h:38:
+#define __GFP_NOMEMALLOC ((__force gfp_t)0x10000u) /* Don't use emergency =
+#define __GFP_NORECLAIM  ((__force gfp_t)0x20000u) /* No realy zone reclai=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2407: FILE: test/include/linux/gfp.h:39:
+#define __GFP_NORECLAIM  ((__force gfp_t)0x20000u) /* No realy zone reclai=
+#define __GFP_HARDWALL   ((__force gfp_t)0x40000u) /* Enforce hardwall cpu=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2409: FILE: test/include/linux/gfp.h:40:
+#define __GFP_HARDWALL   ((__force gfp_t)0x40000u) /* Enforce hardwall cpu=
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2414: FILE: test/include/linux/gfp.h:45:
+#define GFP_LEVEL_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| \
                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2414: FILE: test/include/linux/gfp.h:45:
+#define GFP_LEVEL_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| \
                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2414: FILE: test/include/linux/gfp.h:45:
+#define GFP_LEVEL_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| \
                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#2414: FILE: test/include/linux/gfp.h:45:
+#define GFP_LEVEL_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| \
                                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#2415: FILE: test/include/linux/gfp.h:46:
+=09=09=09__GFP_COLD|__GFP_NOWARN|__GFP_REPEAT| \
                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#2416: FILE: test/include/linux/gfp.h:47:
+=09=09=09__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
                                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2417: FILE: test/include/linux/gfp.h:48:
+=09=09=09__GFP_NOMEMALLOC|__GFP_NORECLAIM|__GFP_HARDWALL)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2417: FILE: test/include/linux/gfp.h:48:
+=09=09=09__GFP_NOMEMALLOC|__GFP_NORECLAIM|__GFP_HARDWALL)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2417: FILE: test/include/linux/gfp.h:48:
+=09=09=09__GFP_NOMEMALLOC|__GFP_NORECLAIM|__GFP_HARDWALL)
       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2417: FILE: test/include/linux/gfp.h:48:
+=09=09=09__GFP_NOMEMALLOC|__GFP_NORECLAIM|__GFP_HARDWALL)
                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2417: FILE: test/include/linux/gfp.h:48:
+=09=09=09__GFP_NOMEMALLOC|__GFP_NORECLAIM|__GFP_HARDWALL)
                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2419: FILE: test/include/linux/gfp.h:50:
+#define GFP_ATOMIC=09(__GFP_HIGH)
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2419: FILE: test/include/linux/gfp.h:50:
+#define GFP_ATOMIC=09(__GFP_HIGH)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2420: FILE: test/include/linux/gfp.h:51:
+#define GFP_NOIO=09(__GFP_WAIT)
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2420: FILE: test/include/linux/gfp.h:51:
+#define GFP_NOIO=09(__GFP_WAIT)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2421: FILE: test/include/linux/gfp.h:52:
+#define GFP_NOFS=09(__GFP_WAIT | __GFP_IO)
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2421: FILE: test/include/linux/gfp.h:52:
+#define GFP_NOFS=09(__GFP_WAIT | __GFP_IO)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2422: FILE: test/include/linux/gfp.h:53:
+#define GFP_KERNEL=09(__GFP_WAIT | __GFP_IO | __GFP_FS)
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2422: FILE: test/include/linux/gfp.h:53:
+#define GFP_KERNEL=09(__GFP_WAIT | __GFP_IO | __GFP_FS)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2423: FILE: test/include/linux/gfp.h:54:
+#define GFP_USER=09(__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2423: FILE: test/include/linux/gfp.h:54:
+#define GFP_USER=09(__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2424: FILE: test/include/linux/gfp.h:55:
+#define GFP_HIGHUSER=09(__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL =
                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2424: FILE: test/include/linux/gfp.h:55:
+#define GFP_HIGHUSER=09(__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL =

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2426: FILE: test/include/linux/gfp.h:56:
+=09=09=09 __GFP_HIGHMEM)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2426: FILE: test/include/linux/gfp.h:56:
+=09=09=09 __GFP_HIGHMEM)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2426: FILE: test/include/linux/gfp.h:56:
+=09=09=09 __GFP_HIGHMEM)
       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2430: FILE: test/include/linux/gfp.h:59:
+/* Flag - indicates that the buffer will be suitable for DMA.  Ignored on =
+   platforms, used as appropriate on others */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2430: FILE: test/include/linux/gfp.h:59:
+   platforms, used as appropriate on others */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2442: FILE: test/include/asm/processor.h:1:
+#ifndef __LINUX_PROCESSOR_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2453: FILE: test/include/linux/compiler-gcc3.h:1:
+/* Never include this file directly.  Include <linux/compiler.h> instead. =

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2459: FILE: test/include/linux/compiler-gcc3.h:7:
+#if __GNUC_MINOR__ >=3D 1
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2460: FILE: test/include/linux/compiler-gcc3.h:8:
+# define inline=09=09inline=09=09__attribute__((always_inline))
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2460: FILE: test/include/linux/compiler-gcc3.h:8:
+# define inline=09=09inline=09=09__attribute__((always_inline))
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2460: FILE: test/include/linux/compiler-gcc3.h:8:
+# define inline=09=09inline=09=09__attribute__((always_inline))
                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2460: FILE: test/include/linux/compiler-gcc3.h:8:
+# define inline=09=09inline=09=09__attribute__((always_inline))
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2460: FILE: test/include/linux/compiler-gcc3.h:8:
+# define inline=09=09inline=09=09__attribute__((always_inline))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2461: FILE: test/include/linux/compiler-gcc3.h:9:
+# define __inline__=09__inline__=09__attribute__((always_inline))
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2461: FILE: test/include/linux/compiler-gcc3.h:9:
+# define __inline__=09__inline__=09__attribute__((always_inline))
                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2461: FILE: test/include/linux/compiler-gcc3.h:9:
+# define __inline__=09__inline__=09__attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline__
#2461: FILE: test/include/linux/compiler-gcc3.h:9:
+# define __inline__=09__inline__=09__attribute__((always_inline))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2462: FILE: test/include/linux/compiler-gcc3.h:10:
+# define __inline=09__inline=09__attribute__((always_inline))
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2462: FILE: test/include/linux/compiler-gcc3.h:10:
+# define __inline=09__inline=09__attribute__((always_inline))
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2462: FILE: test/include/linux/compiler-gcc3.h:10:
+# define __inline=09__inline=09__attribute__((always_inline))

WARNING:INLINE: plain inline is preferred over __inline
#2462: FILE: test/include/linux/compiler-gcc3.h:10:
+# define __inline=09__inline=09__attribute__((always_inline))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2466: FILE: test/include/linux/compiler-gcc3.h:14:
+# define __deprecated=09=09__attribute__((deprecated))
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2466: FILE: test/include/linux/compiler-gcc3.h:14:
+# define __deprecated=09=09__attribute__((deprecated))
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2466: FILE: test/include/linux/compiler-gcc3.h:14:
+# define __deprecated=09=09__attribute__((deprecated))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2469: FILE: test/include/linux/compiler-gcc3.h:17:
+#if __GNUC_MINOR__ >=3D 3
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2471: FILE: test/include/linux/compiler-gcc3.h:19:
+# define __attribute_used__=09__attribute__((__unused__))
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2471: FILE: test/include/linux/compiler-gcc3.h:19:
+# define __attribute_used__=09__attribute__((__unused__))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2474: FILE: test/include/linux/compiler-gcc3.h:22:
+#define __attribute_const__=09__attribute__((__const__))
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2474: FILE: test/include/linux/compiler-gcc3.h:22:
+#define __attribute_const__=09__attribute__((__const__))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2476: FILE: test/include/linux/compiler-gcc3.h:24:
+#if __GNUC_MINOR__ >=3D 1
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2477: FILE: test/include/linux/compiler-gcc3.h:25:
+#define  noinline=09=09__attribute__((noinline))
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2477: FILE: test/include/linux/compiler-gcc3.h:25:
+#define  noinline=09=09__attribute__((noinline))
                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2477: FILE: test/include/linux/compiler-gcc3.h:25:
+#define  noinline=09=09__attribute__((noinline))

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2480: FILE: test/include/linux/compiler-gcc3.h:28:
+#if __GNUC_MINOR__ >=3D 4
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2481: FILE: test/include/linux/compiler-gcc3.h:29:
+#define __must_check=09=09__attribute__((warn_unused_result))
                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2481: FILE: test/include/linux/compiler-gcc3.h:29:
+#define __must_check=09=09__attribute__((warn_unused_result))
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2481: FILE: test/include/linux/compiler-gcc3.h:29:
+#define __must_check=09=09__attribute__((warn_unused_result))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2491: FILE: test/include/asm/system.h:1:
+#ifndef __LINUX_SYSTEM_H

WARNING:MEMORY_BARRIER: memory barrier without comment
#2494: FILE: test/include/asm/system.h:4:
+#define smp_wmb(x) x

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2495: FILE: test/include/asm/system.h:5:
+#define cmpxchg(ptr,o,n)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2495: FILE: test/include/asm/system.h:5:
+#define cmpxchg(ptr,o,n)
                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2505: FILE: test/include/asm/bug.h:1:
+#ifndef _I386_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2512: FILE: test/include/asm/bug.h:8:
+#define BUG() assert(!"bug")

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2514: FILE: test/include/asm/bug.h:10:
+#define BUG_ON(cond) assert(!cond)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cond' may be better as '(cond)' to avoid precedence issues
#2514: FILE: test/include/asm/bug.h:10:
+#define BUG_ON(cond) assert(!cond)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2525: FILE: test/include/linux/mm.h:1:
+#ifndef __MM_H

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#2534: FILE: test/include/linux/mm.h:10:
+#include <asm/pgtable.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2537: FILE: test/include/linux/mm.h:13:
+=09unsigned long flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2538: FILE: test/include/linux/mm.h:14:
+=09void *virtual;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2539: FILE: test/include/linux/mm.h:15:
+=09struct list_head lru;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2540: FILE: test/include/linux/mm.h:16:
+=09struct list_head memory_map;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2541: FILE: test/include/linux/mm.h:17:
+=09unsigned int order;
 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#2546: FILE: test/include/linux/mm.h:22:
+#define PageSlab(page) (page->flags & 0x01)

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#2547: FILE: test/include/linux/mm.h:23:
+#define SetPageSlab(page) do { page->flags |=3D 0x01; } while (0)
                                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#2547: FILE: test/include/linux/mm.h:23:
+#define SetPageSlab(page) do { page->flags |=3D 0x01; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2547: FILE: test/include/linux/mm.h:23:
+#define SetPageSlab(page) do { page->flags |=3D 0x01; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#2548: FILE: test/include/linux/mm.h:24:
+#define ClearPageSlab(page) do { page->flags &=3D ~0x01; } while (0)
                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#2548: FILE: test/include/linux/mm.h:24:
+#define ClearPageSlab(page) do { page->flags &=3D ~0x01; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2548: FILE: test/include/linux/mm.h:24:
+#define ClearPageSlab(page) do { page->flags &=3D ~0x01; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2550: FILE: test/include/linux/mm.h:26:
+#define add_page_state(member,delta)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2551: FILE: test/include/linux/mm.h:27:
+#define sub_page_state(member,delta)
                              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2555: FILE: test/include/linux/mm.h:31:
+=09int ret =3D page->flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2555: FILE: test/include/linux/mm.h:31:
+=09int ret =3D page->flags;
            ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2556: FILE: test/include/linux/mm.h:32:
+=09ClearPageSlab(page);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2557: FILE: test/include/linux/mm.h:33:
+=09return ret;
 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#2560: FILE: test/include/linux/mm.h:36:
+#define page_address(page) (page->virtual)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2562: FILE: test/include/linux/mm.h:38:
+extern struct page *alloc_pages(gfp_t, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2562: FILE: test/include/linux/mm.h:38:
+extern struct page *alloc_pages(gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2562: FILE: test/include/linux/mm.h:38:
+extern struct page *alloc_pages(gfp_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2563: FILE: test/include/linux/mm.h:39:
+extern void free_pages(unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2563: FILE: test/include/linux/mm.h:39:
+extern void free_pages(unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2563: FILE: test/include/linux/mm.h:39:
+extern void free_pages(unsigned long, unsigned int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2573: FILE: include/linux/kmem.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2574: FILE: include/linux/kmem.h:2:
+ * include/linux/kmem.h - An object-caching memory allocator.

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#2592: FILE: include/linux/kmem.h:20:
+#include <asm/cache.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2600: FILE: include/linux/kmem.h:28:
+=09void *addr;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2601: FILE: include/linux/kmem.h:29:
+=09void *next;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2616: FILE: include/linux/kmem.h:44:
+=09struct list_head list;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2617: FILE: include/linux/kmem.h:45:
+=09void *mem;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2618: FILE: include/linux/kmem.h:46:
+=09size_t nr_available;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2619: FILE: include/linux/kmem.h:47:
+=09struct kmem_bufctl *free;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2622: FILE: include/linux/kmem.h:50:
+enum { MAX_ROUNDS =3D 10 };
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2636: FILE: include/linux/kmem.h:64:
+=09size_t rounds;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2637: FILE: include/linux/kmem.h:65:
+=09void *objs[MAX_ROUNDS];
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2638: FILE: include/linux/kmem.h:66:
+=09struct list_head list;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2642: FILE: include/linux/kmem.h:70:
+=09spinlock_t lock;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2643: FILE: include/linux/kmem.h:71:
+=09struct kmem_magazine *loaded;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2644: FILE: include/linux/kmem.h:72:
+=09struct kmem_magazine *prev;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2648: FILE: include/linux/kmem.h:76:
+=09unsigned long grown;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2649: FILE: include/linux/kmem.h:77:
+=09unsigned long reaped;
 ^

WARNING:TYPO_SPELLING: 'objec' may be misspelled - perhaps 'object'?
#2666: FILE: include/linux/kmem.h:94:
+ * @empty_magazines: List of empty magazines that do not contain any objec=
                                                                      ^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2670: FILE: include/linux/kmem.h:97:
+=09struct kmem_cpu_cache cpu_cache[NR_CPUS];
 ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2670: FILE: include/linux/kmem.h:97:
+=09struct kmem_cpu_cache cpu_cache[NR_CPUS];

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2671: FILE: include/linux/kmem.h:98:
+=09size_t objsize;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2672: FILE: include/linux/kmem.h:99:
+=09gfp_t gfp_flags;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2673: FILE: include/linux/kmem.h:100:
+=09unsigned int slab_capacity;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2674: FILE: include/linux/kmem.h:101:
+=09unsigned int cache_order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2675: FILE: include/linux/kmem.h:102:
+=09spinlock_t lists_lock;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2676: FILE: include/linux/kmem.h:103:
+=09struct list_head full_slabs;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2677: FILE: include/linux/kmem.h:104:
+=09struct list_head partial_slabs;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2678: FILE: include/linux/kmem.h:105:
+=09struct list_head empty_slabs;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2679: FILE: include/linux/kmem.h:106:
+=09struct list_head full_magazines;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2680: FILE: include/linux/kmem.h:107:
+=09struct list_head empty_magazines;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2681: FILE: include/linux/kmem.h:108:
+=09struct kmem_cache_statistics stats;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2682: FILE: include/linux/kmem.h:109:
+=09kmem_ctor_fn ctor;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2683: FILE: include/linux/kmem.h:110:
+=09kmem_ctor_fn dtor;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2684: FILE: include/linux/kmem.h:111:
+=09const char *name;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2685: FILE: include/linux/kmem.h:112:
+=09struct list_head next;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2686: FILE: include/linux/kmem.h:113:
+=09unsigned long active_objects;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2687: FILE: include/linux/kmem.h:114:
+=09unsigned long free_objects;
 ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2690: FILE: include/linux/kmem.h:117:
+typedef struct kmem_cache kmem_cache_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2692: FILE: include/linux/kmem.h:119:
+extern void kmem_cache_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2693: FILE: include/linux/kmem.h:120:
+extern void kmem_cache_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_ctor_fn' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_ctor_fn' should also have an identifier name
#2694: FILE: include/linux/kmem.h:121:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2695: FILE: include/linux/kmem.h:122:
+extern struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2695: FILE: include/linux/kmem.h:122:
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2695: FILE: include/linux/kmem.h:122:
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2695: FILE: include/linux/kmem.h:122:
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2695: FILE: include/linux/kmem.h:122:
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2695: FILE: include/linux/kmem.h:122:
+=09=09=09=09=09    unsigned long, kmem_ctor_fn,
             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2696: FILE: include/linux/kmem.h:123:
+=09=09=09=09=09    kmem_ctor_fn);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2696: FILE: include/linux/kmem.h:123:
+=09=09=09=09=09    kmem_ctor_fn);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2696: FILE: include/linux/kmem.h:123:
+=09=09=09=09=09    kmem_ctor_fn);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2696: FILE: include/linux/kmem.h:123:
+=09=09=09=09=09    kmem_ctor_fn);
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2696: FILE: include/linux/kmem.h:123:
+=09=09=09=09=09    kmem_ctor_fn);
             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2697: FILE: include/linux/kmem.h:124:
+extern int kmem_cache_destroy(struct kmem_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#2697: FILE: include/linux/kmem.h:124:
+extern int kmem_cache_destroy(struct kmem_cache *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2698: FILE: include/linux/kmem.h:125:
+extern int kmem_cache_shrink(struct kmem_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#2698: FILE: include/linux/kmem.h:125:
+extern int kmem_cache_shrink(struct kmem_cache *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2699: FILE: include/linux/kmem.h:126:
+extern const char *kmem_cache_name(struct kmem_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2700: FILE: include/linux/kmem.h:127:
+extern void *kmem_cache_alloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#2700: FILE: include/linux/kmem.h:127:
+extern void *kmem_cache_alloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2700: FILE: include/linux/kmem.h:127:
+extern void *kmem_cache_alloc(struct kmem_cache *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2701: FILE: include/linux/kmem.h:128:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, unsigned int __nocast, =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#2701: FILE: include/linux/kmem.h:128:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, unsigned int __nocast, =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int __nocast' should also have an identifier name
#2701: FILE: include/linux/kmem.h:128:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, unsigned int __nocast, =

WARNING:FUNCTION_ARGUMENTS: function definition argument 't' should also have an identifier name
#2701: FILE: include/linux/kmem.h:128:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, unsigned int __nocast, =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2703: FILE: include/linux/kmem.h:129:
+extern void kmem_cache_free(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#2703: FILE: include/linux/kmem.h:129:
+extern void kmem_cache_free(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2703: FILE: include/linux/kmem.h:129:
+extern void kmem_cache_free(struct kmem_cache *, void *);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2706: FILE: include/linux/kmem.h:132:
+#define=09SLAB_NOFS=09GFP_NOFS
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2706: FILE: include/linux/kmem.h:132:
+#define=09SLAB_NOFS=09GFP_NOFS
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2707: FILE: include/linux/kmem.h:133:
+#define=09SLAB_NOIO=09GFP_NOIO
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2707: FILE: include/linux/kmem.h:133:
+#define=09SLAB_NOIO=09GFP_NOIO
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2708: FILE: include/linux/kmem.h:134:
+#define=09SLAB_ATOMIC=09GFP_ATOMIC
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2708: FILE: include/linux/kmem.h:134:
+#define=09SLAB_ATOMIC=09GFP_ATOMIC
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2709: FILE: include/linux/kmem.h:135:
+#define=09SLAB_USER=09GFP_USER
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2709: FILE: include/linux/kmem.h:135:
+#define=09SLAB_USER=09GFP_USER
                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2710: FILE: include/linux/kmem.h:136:
+#define=09SLAB_KERNEL=09GFP_KERNEL
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2710: FILE: include/linux/kmem.h:136:
+#define=09SLAB_KERNEL=09GFP_KERNEL
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2711: FILE: include/linux/kmem.h:137:
+#define=09SLAB_DMA=09GFP_DMA
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2711: FILE: include/linux/kmem.h:137:
+#define=09SLAB_DMA=09GFP_DMA
                   ^

WARNING:TYPO_SPELLING: 'whe' may be misspelled - perhaps 'when'?
#2713: FILE: include/linux/kmem.h:139:
+/* Flags passed to kmem_cache_create(). The first three are only valid whe=
                                                                        ^^^

WARNING:TYPO_SPELLING: 'Peform' may be misspelled - perhaps 'Perform'?
#2717: FILE: include/linux/kmem.h:142:
+#define=09SLAB_DEBUG_FREE=09=090x00000100UL=09/* Peform (expensive) checks=
                                                  ^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2717: FILE: include/linux/kmem.h:142:
+#define=09SLAB_DEBUG_FREE=09=090x00000100UL=09/* Peform (expensive) checks=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2717: FILE: include/linux/kmem.h:142:
+#define=09SLAB_DEBUG_FREE=09=090x00000100UL=09/* Peform (expensive) checks=
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2717: FILE: include/linux/kmem.h:142:
+#define=09SLAB_DEBUG_FREE=09=090x00000100UL=09/* Peform (expensive) checks=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2717: FILE: include/linux/kmem.h:142:
+#define=09SLAB_DEBUG_FREE=09=090x00000100UL=09/* Peform (expensive) checks=
                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2719: FILE: include/linux/kmem.h:144:
+#define=09SLAB_DEBUG_INITIAL=090x00000200UL=09/* Call constructor (as veri=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2719: FILE: include/linux/kmem.h:144:
+#define=09SLAB_DEBUG_INITIAL=090x00000200UL=09/* Call constructor (as veri=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2719: FILE: include/linux/kmem.h:144:
+#define=09SLAB_DEBUG_INITIAL=090x00000200UL=09/* Call constructor (as veri=
                                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2721: FILE: include/linux/kmem.h:145:
+#define=09SLAB_DEBUG_INITIAL=090x00000200UL=09/* Call constructor (as veri=
+#define=09SLAB_RED_ZONE=09=090x00000400UL=09/* Red zone objs in a cache */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2722: FILE: include/linux/kmem.h:146:
+#define=09SLAB_POISON=09=090x00000800UL=09/* Poison objects */
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2722: FILE: include/linux/kmem.h:146:
+#define=09SLAB_POISON=09=090x00000800UL=09/* Poison objects */
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2722: FILE: include/linux/kmem.h:146:
+#define=09SLAB_POISON=09=090x00000800UL=09/* Poison objects */
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2722: FILE: include/linux/kmem.h:146:
+#define=09SLAB_POISON=09=090x00000800UL=09/* Poison objects */
                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2723: FILE: include/linux/kmem.h:147:
+#define=09SLAB_NO_REAP=09=090x00001000UL=09/* never reap from the cache */
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2723: FILE: include/linux/kmem.h:147:
+#define=09SLAB_NO_REAP=09=090x00001000UL=09/* never reap from the cache */
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2723: FILE: include/linux/kmem.h:147:
+#define=09SLAB_NO_REAP=09=090x00001000UL=09/* never reap from the cache */
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2723: FILE: include/linux/kmem.h:147:
+#define=09SLAB_NO_REAP=09=090x00001000UL=09/* never reap from the cache */
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2724: FILE: include/linux/kmem.h:148:
+#define=09SLAB_HWCACHE_ALIGN=090x00002000UL=09/* align objs on a h/w cache=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2724: FILE: include/linux/kmem.h:148:
+#define=09SLAB_HWCACHE_ALIGN=090x00002000UL=09/* align objs on a h/w cache=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2724: FILE: include/linux/kmem.h:148:
+#define=09SLAB_HWCACHE_ALIGN=090x00002000UL=09/* align objs on a h/w cache=
                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2726: FILE: include/linux/kmem.h:150:
+#define SLAB_CACHE_DMA=09=090x00004000UL=09/* use GFP_DMA memory */
                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2726: FILE: include/linux/kmem.h:150:
+#define SLAB_CACHE_DMA=09=090x00004000UL=09/* use GFP_DMA memory */
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2726: FILE: include/linux/kmem.h:150:
+#define SLAB_CACHE_DMA=09=090x00004000UL=09/* use GFP_DMA memory */
                                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2726: FILE: include/linux/kmem.h:150:
+#define SLAB_CACHE_DMA=09=090x00004000UL=09/* use GFP_DMA memory */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2727: FILE: include/linux/kmem.h:151:
+#define SLAB_MUST_HWCACHE_ALIGN=090x00008000UL=09/* force alignment */
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2727: FILE: include/linux/kmem.h:151:
+#define SLAB_MUST_HWCACHE_ALIGN=090x00008000UL=09/* force alignment */
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2727: FILE: include/linux/kmem.h:151:
+#define SLAB_MUST_HWCACHE_ALIGN=090x00008000UL=09/* force alignment */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2728: FILE: include/linux/kmem.h:152:
+#define SLAB_STORE_USER=09=090x00010000UL=09/* store the last owner for bu=
                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2728: FILE: include/linux/kmem.h:152:
+#define SLAB_STORE_USER=09=090x00010000UL=09/* store the last owner for bu=
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2728: FILE: include/linux/kmem.h:152:
+#define SLAB_STORE_USER=09=090x00010000UL=09/* store the last owner for bu=
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2728: FILE: include/linux/kmem.h:152:
+#define SLAB_STORE_USER=09=090x00010000UL=09/* store the last owner for bu=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2730: FILE: include/linux/kmem.h:153:
+#define SLAB_STORE_USER=09=090x00010000UL=09/* store the last owner for bu=
+#define SLAB_RECLAIM_ACCOUNT=090x00020000UL=09/* track pages allocated to =

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2732: FILE: include/linux/kmem.h:154:
+#define SLAB_RECLAIM_ACCOUNT=090x00020000UL=09/* track pages allocated to =
+=09=09=09=09=09=09   what is reclaimable later*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2732: FILE: include/linux/kmem.h:154:
+=09=09=09=09=09=09   what is reclaimable later*/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2733: FILE: include/linux/kmem.h:155:
+#define SLAB_PANIC=09=090x00040000UL=09/* panic if kmem_cache_create() fai=
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2733: FILE: include/linux/kmem.h:155:
+#define SLAB_PANIC=09=090x00040000UL=09/* panic if kmem_cache_create() fai=
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2733: FILE: include/linux/kmem.h:155:
+#define SLAB_PANIC=09=090x00040000UL=09/* panic if kmem_cache_create() fai=
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2733: FILE: include/linux/kmem.h:155:
+#define SLAB_PANIC=09=090x00040000UL=09/* panic if kmem_cache_create() fai=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2735: FILE: include/linux/kmem.h:156:
+#define SLAB_PANIC=09=090x00040000UL=09/* panic if kmem_cache_create() fai=
+#define SLAB_DESTROY_BY_RCU=090x00080000UL=09/* defer freeing pages to RCU=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2739: FILE: include/linux/kmem.h:160:
+#define=09SLAB_CTOR_CONSTRUCTOR=090x001UL=09=09/* if not set, then deconst=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2739: FILE: include/linux/kmem.h:160:
+#define=09SLAB_CTOR_CONSTRUCTOR=090x001UL=09=09/* if not set, then deconst=
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2739: FILE: include/linux/kmem.h:160:
+#define=09SLAB_CTOR_CONSTRUCTOR=090x001UL=09=09/* if not set, then deconst=
                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2739: FILE: include/linux/kmem.h:160:
+#define=09SLAB_CTOR_CONSTRUCTOR=090x001UL=09=09/* if not set, then deconst=
                                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2741: FILE: include/linux/kmem.h:161:
+#define=09SLAB_CTOR_CONSTRUCTOR=090x001UL=09=09/* if not set, then deconst=
+#define SLAB_CTOR_ATOMIC=090x002UL=09=09/* tell constructor it can't sleep=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2743: FILE: include/linux/kmem.h:163:
+#define=09SLAB_CTOR_VERIFY=090x004UL=09=09/* tell constructor it's a verif=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2743: FILE: include/linux/kmem.h:163:
+#define=09SLAB_CTOR_VERIFY=090x004UL=09=09/* tell constructor it's a verif=
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2743: FILE: include/linux/kmem.h:163:
+#define=09SLAB_CTOR_VERIFY=090x004UL=09=09/* tell constructor it's a verif=
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2743: FILE: include/linux/kmem.h:163:
+#define=09SLAB_CTOR_VERIFY=090x004UL=09=09/* tell constructor it's a verif=
                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2745: FILE: include/linux/kmem.h:164:
+#define=09SLAB_CTOR_VERIFY=090x004UL=09=09/* tell constructor it's a verif=
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2749: FILE: include/linux/kmem.h:167:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2754: FILE: include/linux/kmem.h:172:
+extern void kmalloc_init(void);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2757: FILE: include/linux/kmem.h:175:
+=09size_t cs_size;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2758: FILE: include/linux/kmem.h:176:
+=09struct kmem_cache *cs_cache, *cs_dma_cache;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2763: FILE: include/linux/kmem.h:181:
+extern void *kmalloc_node(size_t size, unsigned int __nocast flags, int no=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2763: FILE: include/linux/kmem.h:181:
+extern void *kmalloc_node(size_t size, unsigned int __nocast flags, int no=

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2765: FILE: include/linux/kmem.h:182:
+extern void *__kmalloc(size_t, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2765: FILE: include/linux/kmem.h:182:
+extern void *__kmalloc(size_t, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2765: FILE: include/linux/kmem.h:182:
+extern void *__kmalloc(size_t, gfp_t);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2769: FILE: include/linux/kmem.h:186:
+=09if (__builtin_constant_p(size)) {
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2770: FILE: include/linux/kmem.h:187:
+=09=09int i =3D 0;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2770: FILE: include/linux/kmem.h:187:
+=09=09int i =3D 0;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2770: FILE: include/linux/kmem.h:187:
+=09=09int i =3D 0;
             ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2771: FILE: include/linux/kmem.h:188:
+#define CACHE(x) \
+=09=09if (size <=3D x) \
+=09=09=09goto found; \
+=09=09else \
+=09=09=09i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2772: FILE: include/linux/kmem.h:189:
+=09=09if (size <=3D x) \
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2772: FILE: include/linux/kmem.h:189:
+=09=09if (size <=3D x) \
    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#2772: FILE: include/linux/kmem.h:189:
+=09=09if (size <=3D x) \
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2773: FILE: include/linux/kmem.h:190:
+=09=09=09goto found; \
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2773: FILE: include/linux/kmem.h:190:
+=09=09=09goto found; \
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2773: FILE: include/linux/kmem.h:190:
+=09=09=09goto found; \
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2774: FILE: include/linux/kmem.h:191:
+=09=09else \
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2774: FILE: include/linux/kmem.h:191:
+=09=09else \
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2775: FILE: include/linux/kmem.h:192:
+=09=09=09i++;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2775: FILE: include/linux/kmem.h:192:
+=09=09=09i++;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2775: FILE: include/linux/kmem.h:192:
+=09=09=09i++;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2778: FILE: include/linux/kmem.h:195:
+=09=09{
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2778: FILE: include/linux/kmem.h:195:
+=09=09{
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2779: FILE: include/linux/kmem.h:196:
+=09=09=09extern void __you_cannot_kmalloc_that_much(void);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2779: FILE: include/linux/kmem.h:196:
+=09=09=09extern void __you_cannot_kmalloc_that_much(void);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2779: FILE: include/linux/kmem.h:196:
+=09=09=09extern void __you_cannot_kmalloc_that_much(void);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2780: FILE: include/linux/kmem.h:197:
+=09=09=09__you_cannot_kmalloc_that_much();
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2780: FILE: include/linux/kmem.h:197:
+=09=09=09__you_cannot_kmalloc_that_much();
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2780: FILE: include/linux/kmem.h:197:
+=09=09=09__you_cannot_kmalloc_that_much();
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2781: FILE: include/linux/kmem.h:198:
+=09=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2781: FILE: include/linux/kmem.h:198:
+=09=09}
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2783: FILE: include/linux/kmem.h:200:
+=09=09return kmem_cache_alloc((flags & GFP_DMA) ?
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2783: FILE: include/linux/kmem.h:200:
+=09=09return kmem_cache_alloc((flags & GFP_DMA) ?
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2784: FILE: include/linux/kmem.h:201:
+=09=09=09malloc_sizes[i].cs_dma_cache :
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2784: FILE: include/linux/kmem.h:201:
+=09=09=09malloc_sizes[i].cs_dma_cache :
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2784: FILE: include/linux/kmem.h:201:
+=09=09=09malloc_sizes[i].cs_dma_cache :
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2785: FILE: include/linux/kmem.h:202:
+=09=09=09malloc_sizes[i].cs_cache, flags);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2785: FILE: include/linux/kmem.h:202:
+=09=09=09malloc_sizes[i].cs_cache, flags);
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2785: FILE: include/linux/kmem.h:202:
+=09=09=09malloc_sizes[i].cs_cache, flags);
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2786: FILE: include/linux/kmem.h:203:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2787: FILE: include/linux/kmem.h:204:
+=09return __kmalloc(size, flags);
 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2790: FILE: include/linux/kmem.h:207:
+extern void *kzalloc(size_t, gfp_t);

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2800: FILE: include/linux/kmem.h:217:
+=09if (n !=3D 0 && size > INT_MAX / n)
 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#2800: FILE: include/linux/kmem.h:217:
+=09if (n !=3D 0 && size > INT_MAX / n)
          ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2801: FILE: include/linux/kmem.h:218:
+=09=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2801: FILE: include/linux/kmem.h:218:
+=09=09return NULL;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2802: FILE: include/linux/kmem.h:219:
+=09return kzalloc(n * size, flags);
 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2805: FILE: include/linux/kmem.h:222:
+extern void kfree(const void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2806: FILE: include/linux/kmem.h:223:
+extern unsigned int ksize(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#2806: FILE: include/linux/kmem.h:223:
+extern unsigned int ksize(const void *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2808: FILE: include/linux/kmem.h:225:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2822: FILE: include/linux/kmem.h:239:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2852: FILE: test/include/stdlib.h:1:
+#ifndef __STDLIB_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2857: FILE: test/include/stdlib.h:6:
+extern void *malloc(size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2858: FILE: test/include/stdlib.h:7:
+extern void *calloc(size_t, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2858: FILE: test/include/stdlib.h:7:
+extern void *calloc(size_t, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2858: FILE: test/include/stdlib.h:7:
+extern void *calloc(size_t, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2859: FILE: test/include/stdlib.h:8:
+extern void free(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2859: FILE: test/include/stdlib.h:8:
+extern void free(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2860: FILE: test/include/stdlib.h:9:
+extern void *realloc(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2860: FILE: test/include/stdlib.h:9:
+extern void *realloc(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2860: FILE: test/include/stdlib.h:9:
+extern void *realloc(void *, size_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2870: FILE: test/mm/page_alloc.c:1:
+#include <linux/kernel.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2883: FILE: test/mm/page_alloc.c:14:
+=09struct page *page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2885: FILE: test/mm/page_alloc.c:16:
+=09list_for_each_entry(page, &pages, memory_map) {
 ^

CHECK:SPACING: No space is necessary after a cast
#2886: FILE: test/mm/page_alloc.c:17:
+=09=09unsigned long virtual =3D (unsigned long) page->virtual;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2886: FILE: test/mm/page_alloc.c:17:
+=09=09unsigned long virtual =3D (unsigned long) page->virtual;

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2886: FILE: test/mm/page_alloc.c:17:
+=09=09unsigned long virtual =3D (unsigned long) page->virtual;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2886: FILE: test/mm/page_alloc.c:17:
+=09=09unsigned long virtual =3D (unsigned long) page->virtual;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2886: FILE: test/mm/page_alloc.c:17:
+=09=09unsigned long virtual =3D (unsigned long) page->virtual;
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
    ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2888: FILE: test/mm/page_alloc.c:19:
+=09=09if (virtual <=3D addr && addr < virtual+(1<<page->order)*PAGE_SIZE)
                                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2889: FILE: test/mm/page_alloc.c:20:
+=09=09=09return page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2889: FILE: test/mm/page_alloc.c:20:
+=09=09=09return page;
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2889: FILE: test/mm/page_alloc.c:20:
+=09=09=09return page;
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2890: FILE: test/mm/page_alloc.c:21:
+=09}
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2891: FILE: test/mm/page_alloc.c:22:
+=09return NULL;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2896: FILE: test/mm/page_alloc.c:27:
+=09unsigned long nr_pages =3D 1<<order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2896: FILE: test/mm/page_alloc.c:27:
+=09unsigned long nr_pages =3D 1<<order;
                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2896: FILE: test/mm/page_alloc.c:27:
+=09unsigned long nr_pages =3D 1<<order;
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2897: FILE: test/mm/page_alloc.c:28:
+=09struct page *page =3D malloc(sizeof(*page));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2897: FILE: test/mm/page_alloc.c:28:
+=09struct page *page =3D malloc(sizeof(*page));
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2898: FILE: test/mm/page_alloc.c:29:
+=09memset(page, 0, sizeof(*page));
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2899: FILE: test/mm/page_alloc.c:30:
+=09page->order =3D order;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2899: FILE: test/mm/page_alloc.c:30:
+=09page->order =3D order;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2900: FILE: test/mm/page_alloc.c:31:
+=09page->virtual =3D calloc(nr_pages, PAGE_SIZE);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2900: FILE: test/mm/page_alloc.c:31:
+=09page->virtual =3D calloc(nr_pages, PAGE_SIZE);
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2901: FILE: test/mm/page_alloc.c:32:
+=09INIT_LIST_HEAD(&page->memory_map);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2902: FILE: test/mm/page_alloc.c:33:
+=09list_add(&page->memory_map, &pages);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2903: FILE: test/mm/page_alloc.c:34:
+=09return page;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2908: FILE: test/mm/page_alloc.c:39:
+=09struct page *page =3D virt_to_page(addr);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2908: FILE: test/mm/page_alloc.c:39:
+=09struct page *page =3D virt_to_page(addr);
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2909: FILE: test/mm/page_alloc.c:40:
+=09free(page->virtual);
 ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2910: FILE: test/mm/page_alloc.c:41:
+=09free(page);
 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2913: FILE: test/mm/page_alloc.c:44:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3093: FILE: test/include/asm/page.h:1:
+#ifndef __LINUX_PAGE_H

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3101: FILE: test/include/asm/page.h:9:
+#define PAGE_MASK    (~(PAGE_SIZE-1))
                                  ^

CHECK:SPACING: No space is necessary after a cast
#3103: FILE: test/include/asm/page.h:11:
+#define virt_to_page(addr) __virt_to_page((unsigned long) addr)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3105: FILE: test/include/asm/page.h:13:
+extern struct page *__virt_to_page(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#3105: FILE: test/include/asm/page.h:13:
+extern struct page *__virt_to_page(unsigned long);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3115: FILE: test/include/linux/spinlock.h:1:
+#ifndef __LINUX_SPINLOCK_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#3118: FILE: test/include/linux/spinlock.h:4:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3120: FILE: test/include/linux/spinlock.h:6:
+typedef int spinlock_t;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3123: FILE: test/include/linux/spinlock.h:9:
+#define spin_lock_irqsave(x, y) (y =3D 1)
                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3124: FILE: test/include/linux/spinlock.h:10:
+#define spin_unlock_irqrestore(x, y) (y =3D 0)
                                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3136: FILE: test/include/linux/mmzone.h:1:
+#ifndef __LINUX_MMZONE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3151: FILE: test/include/linux/threads.h:1:
+#ifndef __LINUX_THREADS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3164: FILE: test/include/linux/module.h:1:
+#ifndef __LINUX_MODULE_H

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3167: FILE: test/include/linux/module.h:4:
+#define EXPORT_SYMBOL(x)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3168: FILE: test/include/linux/module.h:5:
+#define EXPORT_SYMBOL_GPL(x)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3178: FILE: test/kernel/panic.c:1:
+extern void abort(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3178: FILE: test/kernel/panic.c:1:
+extern void abort(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3180: FILE: test/kernel/panic.c:3:
+void panic(const char * fmt, ...)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3182: FILE: test/kernel/panic.c:5:
+=09abort();
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3191: FILE: test/include/asm/pgtable.h:1:
+#ifndef __ASM_PGTABLE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3204: FILE: test/include/asm/semaphore.h:1:
+#ifndef __ASM_SEMAPHORE_H

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3224: FILE: test/include/asm/semaphore.h:21:
+=09return 1;
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3235: FILE: test/include/asm/uaccess.h:1:
+#ifndef __ASM_UACCESS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3246: FILE: test/include/linux/config.h:1:
+#ifndef __LINUX_CONFIG_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3261: FILE: test/include/linux/seq_file.h:1:
+#ifndef __LINUX_SEQFILE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3272: FILE: test/include/asm/param.h:1:
+#ifndef __ASM_PARAM_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3285: FILE: test/include/asm/percpu.h:1:
+#ifndef __ARCH_I386_PERCPU__

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3298: FILE: test/include/linux/sched.h:1:
+#ifndef __LINUX_SCHED_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3312: FILE: test/kernel/timer.c:1:
+#include <linux/timer.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3324: FILE: test/kernel/workqueue.c:1:
+#include <linux/workqueue.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3328: FILE: test/kernel/workqueue.c:5:
+=09return 1;
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#3331: FILE: test/kernel/workqueue.c:8:
+int fastcall schedule_delayed_work(struct work_struct *work, unsigned long=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3334: FILE: test/kernel/workqueue.c:11:
+=09return 1;
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3338: FILE: test/kernel/workqueue.c:15:
+int schedule_delayed_work_on(int cpu,
+=09=09=09struct work_struct *work, unsigned long delay)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3338: FILE: test/kernel/workqueue.c:15:
+=09=09=09struct work_struct *work, unsigned long delay)
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3338: FILE: test/kernel/workqueue.c:15:
+=09=09=09struct work_struct *work, unsigned long delay)
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3338: FILE: test/kernel/workqueue.c:15:
+=09=09=09struct work_struct *work, unsigned long delay)
       ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3340: FILE: test/kernel/workqueue.c:17:
+=09return 1;
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3349: FILE: test/include/asm/thread_info.h:1:
+#ifndef __ASM_THREADINFO_H

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#3355: FILE: test/include/asm/thread_info.h:7:
+#include <asm/processor.h>

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#3358: FILE: test/include/asm/thread_info.h:10:
+=09unsigned long flags;
 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1602 errors, 161 warnings, 172 checks, 2926 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
