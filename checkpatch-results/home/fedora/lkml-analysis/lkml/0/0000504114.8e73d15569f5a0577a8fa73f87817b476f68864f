WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#58: 
//  EXTRAVERSION =-pre3
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/asm-i386/syscall.h:1:
+#ifndef __ASM_SYSCALL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: include/asm-i386/syscall.h:8:
+ * ^IAMD supports sysenter/sysexit since K7.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: include/asm-i386/syscall.h:27:
+		void * cur_tsk;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#118: FILE: include/asm-i386/syscall.h:31:
+};
+extern union sysenter_struct sysenter_data[NR_CPUS];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-i386/syscall.h:46:
+#define _syscallSEP0(type,name) \
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <_syscallSEP0>
#133: FILE: include/asm-i386/syscall.h:46:
+#define _syscallSEP0(type,name) \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#133: FILE: include/asm-i386/syscall.h:46:
+#define _syscallSEP0(type,name) \
+type name(void) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name) \
+		: "ecx", "edx", "edi", "flags"); \
+__syscall_return(type,__res); \
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-i386/syscall.h:59:
+__syscall_return(type,__res); \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-i386/syscall.h:62:
+#define _syscallSEP1(type,name,type1,arg1) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-i386/syscall.h:62:
+#define _syscallSEP1(type,name,type1,arg1) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-i386/syscall.h:62:
+#define _syscallSEP1(type,name,type1,arg1) \
                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <_syscallSEP1>
#149: FILE: include/asm-i386/syscall.h:62:
+#define _syscallSEP1(type,name,type1,arg1) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#149: FILE: include/asm-i386/syscall.h:62:
+#define _syscallSEP1(type,name,type1,arg1) \
+type name(type1 arg1) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)) \
+		: "ecx", "edx", "edi", "flags"); \
+__syscall_return(type,__res); \
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: include/asm-i386/syscall.h:75:
+__syscall_return(type,__res); \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <_syscallSEP2>
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1,type2 arg2) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+		: "edx", "edi", "flags"); \
+__syscall_return(type,__res); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#165: FILE: include/asm-i386/syscall.h:78:
+#define _syscallSEP2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1,type2 arg2) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+		: "edx", "edi", "flags"); \
+__syscall_return(type,__res); \
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: include/asm-i386/syscall.h:79:
+type name(type1 arg1,type2 arg2) \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#178: FILE: include/asm-i386/syscall.h:91:
+__syscall_return(type,__res); \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <_syscallSEP3>
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1,type2 arg2,type3 arg3) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+			"d" ((long)(arg3)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1,type2 arg2,type3 arg3) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+			"d" ((long)(arg3)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#181: FILE: include/asm-i386/syscall.h:94:
+#define _syscallSEP3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1,type2 arg2,type3 arg3) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+			"d" ((long)(arg3)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/asm-i386/syscall.h:95:
+type name(type1 arg1,type2 arg2,type3 arg3) \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/asm-i386/syscall.h:95:
+type name(type1 arg1,type2 arg2,type3 arg3) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/asm-i386/syscall.h:108:
+__syscall_return(type,__res); \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
                                                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <_syscallSEP4>
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+	  		"d" ((long)(arg3)),"S" ((long)(arg4)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+	  		"d" ((long)(arg3)),"S" ((long)(arg4)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+	  		"d" ((long)(arg3)),"S" ((long)(arg4)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+} 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#198: FILE: include/asm-i386/syscall.h:111:
+#define _syscallSEP4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+long __res; \
+__asm__ __volatile__( \
+		"mov $1f, %%edi\n\t" \
+		"push %%ebp\n\t" \
+		"mov %%esp, %%ebp\n\t" \
+		"sysenter\n\t" \
+		"1:pop %%ebp\n\t" \
+		: "=a" (__res) \
+		: "0" (__NR_##name), "b" ((long)(arg1)), "c" ((long)(arg2)) \
+	  		"d" ((long)(arg3)),"S" ((long)(arg4)) \
+		: "edi", "flags"); \
+__syscall_return(type,__res); \
+} 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: include/asm-i386/syscall.h:112:
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: include/asm-i386/syscall.h:123:
+^I  ^I^I"d" ((long)(arg3)),"S" ((long)(arg4)) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: include/asm-i386/syscall.h:123:
+^I  ^I^I"d" ((long)(arg3)),"S" ((long)(arg4)) \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#210: FILE: include/asm-i386/syscall.h:123:
+	  		"d" ((long)(arg3)),"S" ((long)(arg4)) \
 	  		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: include/asm-i386/syscall.h:125:
+__syscall_return(type,__res); \
                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: include/asm-i386/syscall.h:126:
+} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#230: FILE: arch/i386/kernel/setup.c:2775:
+extern void system_call_SYSENTER(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/i386/kernel/setup.c:2842:
+^I}^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#281: FILE: arch/i386/kernel/traps.c:924:
+	set_intr_gate(1,&debug);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#281: FILE: arch/i386/kernel/traps.c:924:
+	set_intr_gate(1,&debug);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: arch/i386/kernel/entry.S:290:
+^Ipushl %eax^I# orig_eax^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: arch/i386/kernel/entry.S:357:
+^Imovl (%eax), %eax^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 6 warnings, 16 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
