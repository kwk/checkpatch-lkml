WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#131: FILE: fs/jbd/journal.c:250:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#132: FILE: fs/jbd/journal.c:251:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a
+						     good idea, because that depends on threads that

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: fs/jbd/journal.c:252:
+						     may be already stopped. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/jbd/journal.c:255:
+^I^I^Ijbd_debug(1, "Resuming kjournald\n");^I^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: fs/jbd/journal.c:256:
+		} else		/* we assume on resume that commits are already there,

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#138: FILE: fs/jbd/journal.c:257:
+		} else		/* we assume on resume that commits are already there,
+				   so we don't sleep */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: fs/jbd/journal.c:257:
+				   so we don't sleep */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: fs/reiserfs/journal.c:61:
+#include <linux/suspend.h> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/reiserfs/journal.c:1891:
+  current->flags |= PF_KERNTHREAD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/reiserfs/journal.c:1906:
+    if (current->flags & PF_FREEZE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#167: FILE: fs/reiserfs/journal.c:1906:
+    if (current->flags & PF_FREEZE) {
+	    refrigerator(PF_IOTHREAD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: fs/reiserfs/journal.c:1906:
+    if (current->flags & PF_FREEZE) {
[...]
+    } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: fs/reiserfs/journal.c:1908:
+    } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#169: FILE: fs/reiserfs/journal.c:1908:
+    } else
[...]
+	    interruptible_sleep_on_timeout(&reiserfs_commit_thread_wait, 5 * HZ) ;

CHECK:BRACES: Unbalanced braces around else statement
#169: FILE: fs/reiserfs/journal.c:1908:
+    } else

WARNING:SPACING: space prohibited before semicolon
#171: FILE: fs/reiserfs/journal.c:1910:
+	    interruptible_sleep_on_timeout(&reiserfs_commit_thread_wait, 5 * HZ) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#198: FILE: include/linux/sched.h:374:
+#define PF_KERNTHREAD	0x00040000	/* this thread is a kernel thread that cannot be sent signals to */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#206: FILE: include/linux/suspend.h:1:
+#ifndef _LINUX_SWSUSP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#221: FILE: include/linux/suspend.h:16:
+typedef struct pbe {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: include/linux/suspend.h:19:
+^Iswp_entry_t swap_address;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: include/linux/suspend.h:20:
+^Iswp_entry_t dummy;^I^I/* we need scratch space at $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: include/linux/suspend.h:41:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#246: FILE: include/linux/suspend.h:41:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: include/linux/suspend.h:41:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: include/linux/suspend.h:42:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: include/linux/suspend.h:42:
+   $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/suspend.h:46:
+extern int shrink_mem(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/suspend.h:49:
+extern void software_suspend(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/suspend.h:50:
+extern void software_resume(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: include/linux/suspend.h:51:
+extern int resume_setup(char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/suspend.h:53:
+extern int register_suspend_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#258: FILE: include/linux/suspend.h:53:
+extern int register_suspend_notifier(struct notifier_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/suspend.h:54:
+extern int unregister_suspend_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#259: FILE: include/linux/suspend.h:54:
+extern int unregister_suspend_notifier(struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/suspend.h:55:
+extern void refrigerator(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#260: FILE: include/linux/suspend.h:55:
+extern void refrigerator(unsigned long);

ERROR:SPACING: space required before the open parenthesis '('
#263: FILE: include/linux/suspend.h:58:
+#define software_suspend()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#264: FILE: include/linux/suspend.h:59:
+#define software_resume()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#265: FILE: include/linux/suspend.h:60:
+#define register_suspend_notifier(a)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: include/linux/suspend.h:61:
+#define unregister_suspend_notifier(a)	do { } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#267: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#345: FILE: mm/vmscan.c:753:
+		if (kswapd_can_sleep()) {
 			schedule();
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: mm/vmscan.c:756:
+^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 21 warnings, 13 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
