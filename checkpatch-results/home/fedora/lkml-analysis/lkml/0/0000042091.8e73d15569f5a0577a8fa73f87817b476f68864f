WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/unionfs/dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#68: FILE: fs/unionfs/dentry.c:24:
+				     struct nameidata *nd);
 				                       ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#69: FILE: fs/unionfs/dentry.c:25:
+extern void unionfs_d_release(struct dentry *dentry);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#70: FILE: fs/unionfs/dentry.c:26:
+extern void unionfs_d_iput(struct dentry *dentry, struct inode *inode);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#75: FILE: fs/unionfs/dentry.c:31:
+int unionfs_d_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                   ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#91: FILE: fs/unionfs/dentry.c:47:
+		printk(KERN_DEBUG "unhashed dentry being revalidated: %*s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: fs/unionfs/dentry.c:52:
+	BUG_ON(dbstart(dentry) == -1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: fs/unionfs/dentry.c:69:
+		BUG_ON(IS_ROOT(dentry));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdgen != sbgen'
#117: FILE: fs/unionfs/dentry.c:73:
+		if (!restart && (pdgen != sbgen)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#123: FILE: fs/unionfs/dentry.c:79:
+			     d_revalidate(dentry->d_parent, nd))) {
 			                                    ^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dentry->d_parent->d_op->d_revalidate'
#123: FILE: fs/unionfs/dentry.c:79:
+			    (dentry->d_parent->d_op->
+			     d_revalidate(dentry->d_parent, nd))) {

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: fs/unionfs/dentry.c:86:
+		BUG_ON(pdgen != sbgen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/unionfs/dentry.c:93:
+			struct dentry *hidden_dentry;
+			for (bindex = bstart; bindex <= bend; bindex++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: fs/unionfs/dentry.c:112:
+				struct inode *hidden_inode;
+				for (bindex = bstart; bindex <= bend; bindex++) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#162: FILE: fs/unionfs/dentry.c:118:
+					iput(hidden_inode);
 					^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#179: FILE: fs/unionfs/dentry.c:135:
+			/* current unionfs_lookup_backend() doesn't return
+			   a valid dentry */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/unionfs/dentry.c:135:
+			   a valid dentry */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: fs/unionfs/dentry.c:152:
+	BUG_ON(bstart == -1);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#200: FILE: fs/unionfs/dentry.c:156:
+		if (!hidden_dentry || !hidden_dentry->d_op
+		    || !hidden_dentry->d_op->d_revalidate)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: fs/unionfs/dentry.c:159:
+		if (!hidden_dentry->d_op->d_revalidate(hidden_dentry, nd))
 		                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/unionfs/dentry.c:174:
+int unionfs_d_revalidate_wrap(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#224: FILE: fs/unionfs/dentry.c:180:
+	err = unionfs_d_revalidate(dentry, nd);
 	                                   ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#237: FILE: fs/unionfs/dentry.c:193:
+	 * on the dentry before calling dbstart, etc. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#242: FILE: fs/unionfs/dentry.c:198:
+		printk(KERN_DEBUG "dentry without private data: %*s",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#248: FILE: fs/unionfs/dentry.c:204:
+		/* the failed lookup has a dtohd_ptr set to null,
+		   but this is a better check */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: fs/unionfs/dentry.c:204:
+		   but this is a better check */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#249: FILE: fs/unionfs/dentry.c:205:
+		printk(KERN_DEBUG "dentry without hidden dentries : %*s",

WARNING:RETURN_VOID: void function return statements are not generally useful
#274: FILE: fs/unionfs/dentry.c:230:
+	return;
+}

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#276: FILE: fs/unionfs/dentry.c:232:
+struct dentry_operations unionfs_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 27 warnings, 2 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
