WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
To create the architecture for private per-cpu-scheduler functions we create

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/sched.h:466:
+extern void cpu_attach_domain(struct sched_domain *sd, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: include/linux/scheduler.h:1:
+struct sched_drv

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#100: FILE: include/linux/scheduler.h:2:
+struct sched_drv
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#102: FILE: include/linux/scheduler.h:4:
+	void (*set_oom_timeslice)(task_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#107: FILE: include/linux/scheduler.h:9:
+	int (*idle_cpu)(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#108: FILE: include/linux/scheduler.h:10:
+	void (*init_idle)(task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#108: FILE: include/linux/scheduler.h:10:
+	void (*init_idle)(task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#109: FILE: include/linux/scheduler.h:11:
+	void (*exit)(task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#110: FILE: include/linux/scheduler.h:12:
+	void (*fork)(task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#115: FILE: include/linux/scheduler.h:17:
+	void (*tail)(task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#116: FILE: include/linux/scheduler.h:18:
+	int (*setscheduler)(pid_t, int, struct sched_param __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: include/linux/scheduler.h:18:
+	int (*setscheduler)(pid_t, int, struct sched_param __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sched_param __user *' should also have an identifier name
#116: FILE: include/linux/scheduler.h:18:
+	int (*setscheduler)(pid_t, int, struct sched_param __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#117: FILE: include/linux/scheduler.h:19:
+	void (*set_user_nice)(task_t *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#117: FILE: include/linux/scheduler.h:19:
+	void (*set_user_nice)(task_t *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#118: FILE: include/linux/scheduler.h:20:
+	long (*rr_get_interval)(pid_t, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#118: FILE: include/linux/scheduler.h:20:
+	long (*rr_get_interval)(pid_t, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const task_t *' should also have an identifier name
#120: FILE: include/linux/scheduler.h:22:
+	int (*task_curr)(const task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const task_t *' should also have an identifier name
#121: FILE: include/linux/scheduler.h:23:
+	int (*task_nice)(const task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const task_t *' should also have an identifier name
#122: FILE: include/linux/scheduler.h:24:
+	int (*task_prio)(const task_t *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: include/linux/scheduler.h:25:
+	int (*try_to_wake_up)(task_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#123: FILE: include/linux/scheduler.h:25:
+	int (*try_to_wake_up)(task_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#123: FILE: include/linux/scheduler.h:25:
+	int (*try_to_wake_up)(task_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#123: FILE: include/linux/scheduler.h:25:
+	int (*try_to_wake_up)(task_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#124: FILE: include/linux/scheduler.h:26:
+	void (*wake_up_new_task)(task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#124: FILE: include/linux/scheduler.h:26:
+	void (*wake_up_new_task)(task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#128: FILE: include/linux/scheduler.h:30:
+	int (*set_cpus_allowed)(task_t *, cpumask_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t' should also have an identifier name
#128: FILE: include/linux/scheduler.h:30:
+	int (*set_cpus_allowed)(task_t *, cpumask_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#129: FILE: include/linux/scheduler.h:31:
+	void (*wait_task_inactive)(task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sched_domain *' should also have an identifier name
#130: FILE: include/linux/scheduler.h:32:
+	void (*cpu_attach_domain)(struct sched_domain *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#130: FILE: include/linux/scheduler.h:32:
+	void (*cpu_attach_domain)(struct sched_domain *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#138: FILE: kernel/scheduler.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#139: FILE: kernel/scheduler.c:2:
+ *  kernel/scheduler.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#152: FILE: kernel/scheduler.c:15:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#155: FILE: kernel/scheduler.c:18:
+#include <asm/mmu_context.h>

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#214: FILE: kernel/scheduler.c:77:
+void __devinit init_idle(task_t *task, int cpu)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: kernel/scheduler.c:115:
+void wait_task_inactive(task_t * task)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#262: FILE: kernel/scheduler.c:125:
+void __devinit cpu_attach_domain(struct sched_domain *sd, int cpu)

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#287: FILE: kernel/scheduler.c:150:
+	return scheduler->yield();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#311: FILE: kernel/scheduler.c:174:
+int try_to_wake_up(task_t *task, unsigned state, int sync)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 38 warnings, 1 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
