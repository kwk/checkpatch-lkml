WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
How did those four ext2-specific lines come to be part of fs.h in the first 

WARNING:TYPO_SPELLING: 'maintainance' may be misspelled - perhaps 'maintenance'?
#149: 
At this point, I will stop work on these patches (except for maintainance) 
                                                             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'concensus' may be misspelled - perhaps 'consensus'?
#150: 
until a concensus is reached on the approach.  Assuming that consensus is 
        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'maintainance' may be misspelled - perhaps 'maintenance'?
#157: 
without these global changes, further simplifying maintainance issues.
                                                  ^^^^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#255: FILE: drivers/block/rd.c:676:
+	if ((inode = get_empty_inode(NULL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#264: FILE: drivers/block/rd.c:686:
+	if ((out_inode = get_empty_inode(NULL)) == NULL)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#278: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#278: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

CHECK:SPACING: No space is necessary after a cast
#279: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc(cache? cache: inode_cachep, SLAB_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/inode.c:81:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
+	return (struct inode *) kmem_cache_alloc(cache? cache: inode_cachep, SLAB_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#279: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc(cache? cache: inode_cachep, SLAB_KERNEL);
 	                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#279: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc(cache? cache: inode_cachep, SLAB_KERNEL);
 	                                                     ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#285: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#285: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#289: FILE: fs/inode.c:90:
+	kmem_cache_free(cache? cache: inode_cachep, inode);
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#289: FILE: fs/inode.c:90:
+	kmem_cache_free(cache? cache: inode_cachep, inode);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#305: FILE: fs/inode.c:100:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) == SLAB_CTOR_CONSTRUCTOR)
 	                              ^

CHECK:SPACING: No space is necessary after a cast
#308: FILE: fs/inode.c:102:
+		struct inode *inode = (struct inode *) p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: fs/inode.c:103:
+		struct inode *inode = (struct inode *) p;
+		kmem_cache_clear(cache, inode);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#325: FILE: fs/inode.c:732:
+#if 1

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: fs/inode.c:786:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#349: FILE: fs/inode.c:786:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#349: FILE: fs/inode.c:786:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: fs/inode.c:787:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
+	memset(&inode->u, 0, given? given: sizeof(inode->u));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#350: FILE: fs/inode.c:787:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#350: FILE: fs/inode.c:787:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: fs/inode.c:917:
+^I^Iif (!(fs->inode_cache = kmem_cache_create(fs->name, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#425: FILE: fs/inode.c:917:
+		if (!(fs->inode_cache = kmem_cache_create(fs->name, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: fs/inode.c:918:
+		if (!(fs->inode_cache = kmem_cache_create(fs->name, 
+		    offsetof(struct inode, u) + fs->inode_size,

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#434: FILE: fs/inode.c:926:
+	return kmem_cache_destroy(fs->inode_cache)? -EBUSY: 0;
 	                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#434: FILE: fs/inode.c:926:
+	return kmem_cache_destroy(fs->inode_cache)? -EBUSY: 0;
 	                                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#473: FILE: fs/super.c:123:
+		if (!(err = create_inode_cache(fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#500: FILE: fs/super.c:149:
+			if (fs->inode_cache && (err = destroy_inode_cache(fs)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: fs/super.c:428:
+        unsigned size = fs->super_size?$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: fs/super.c:428:
+        unsigned size = fs->super_size?$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#529: FILE: fs/super.c:428:
+        unsigned size = fs->super_size?

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#529: FILE: fs/super.c:428:
+        unsigned size = fs->super_size?
                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#530: FILE: fs/super.c:429:
+	    offsetof(struct super_block, u) + fs->super_size:
 	                                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#533: FILE: fs/super.c:432:
+	printk(">>> %s super size is %i\n", fs->name, size); // loseme

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#534: FILE: fs/super.c:433:
+	if ((s = kmalloc(size, GFP_USER))) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#562: FILE: fs/super.c:675:
+	struct super_block * s = alloc_super(fs_type);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'diretories' may be misspelled - perhaps 'directories'?
#593: FILE: include/linux/fs.h:739:
+	 * non-directories) are allowed, but not unconnected diretories.
 	                                                     ^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#628: FILE: include/linux/fs.h:960:
+	unsigned super_size, inode_size;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#642: FILE: include/linux/fs.h:1339:
+extern struct inode *get_empty_inode(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/fs.h:1351:
+extern int create_inode_cache(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/fs.h:1352:
+extern int destroy_inode_cache(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/fs.h:1353:
+extern void remove_suid(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#670: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#670: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#682: FILE: mm/slab.c:1083:
+	unsigned size = cachep->objsize;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#685: FILE: mm/slab.c:1086:
+		size -= BYTES_PER_WORD*2;
 		                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000487231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 17 warnings, 10 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000487231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
