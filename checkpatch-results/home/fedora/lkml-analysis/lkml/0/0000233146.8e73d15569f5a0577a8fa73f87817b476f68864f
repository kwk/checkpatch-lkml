WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
  let's think about the way we access the file which contained in a tar file

WARNING:TYPO_SPELLING: 'writen' may be misspelled - perhaps 'written'?
#42: 
it was writen by Kazuto Miyoshi (kaz@earth.email.ne.jp) Hirokazu
       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: fs/Kconfig:1011:
+config TAR_FS
+       tristate "Tar fs support"
+       help
+         tarfs can help you mount a .tar file. then you can access

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#61: FILE: fs/Kconfig:1014:
the files in the

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: fs/tarfs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: fs/tarfs/dir.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: fs/tarfs/dir.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#96: FILE: fs/tarfs/dir.c:18:
+ * Version: $Id: dir.c,v 1.9 2001/02/25 21:39:03 kaz Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#110: FILE: fs/tarfs/dir.c:32:
+static int tarfs_readdir(struct file * filp,
                                        ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: fs/tarfs/dir.c:32:
+static int tarfs_readdir(struct file * filp,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: fs/tarfs/dir.c:33:
+                        void * dirent, filldir_t filldir)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/tarfs/dir.c:33:
+static int tarfs_readdir(struct file * filp,
+                        void * dirent, filldir_t filldir)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: fs/tarfs/dir.c:33:
+                        void * dirent, filldir_t filldir)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/tarfs/dir.c:33:
+                        void * dirent, filldir_t filldir)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: fs/tarfs/dir.c:35:
+  struct inode *inode = filp->f_dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/tarfs/dir.c:36:
+  int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: fs/tarfs/dir.c:37:
+  struct tarent *dir_tarent, *ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: fs/tarfs/dir.c:38:
+  int dtype=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#116: FILE: fs/tarfs/dir.c:38:
+  int dtype=0;
            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: fs/tarfs/dir.c:39:
+  int count, stored;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: fs/tarfs/dir.c:41:
+  dir_tarent = TARENT(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/tarfs/dir.c:43:
+  message("tarfs: tarfs_readdir (dir_tarent %p, f_pos %ld)\n",$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_readdir', this function's name, in a string
#121: FILE: fs/tarfs/dir.c:43:
+  message("tarfs: tarfs_readdir (dir_tarent %p, f_pos %ld)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: fs/tarfs/dir.c:44:
+         dir_tarent, (long)filp->f_pos);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: fs/tarfs/dir.c:44:
+  message("tarfs: tarfs_readdir (dir_tarent %p, f_pos %ld)\n",
+         dir_tarent, (long)filp->f_pos);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: fs/tarfs/dir.c:44:
+         dir_tarent, (long)filp->f_pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: fs/tarfs/dir.c:46:
+  stored=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#124: FILE: fs/tarfs/dir.c:46:
+  stored=0;
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/tarfs/dir.c:49:
+  if (filp->f_pos==0){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#127: FILE: fs/tarfs/dir.c:49:
+  if (filp->f_pos==0){
+    err = filldir(dirent, ".", 1,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#127: FILE: fs/tarfs/dir.c:49:
+  if (filp->f_pos==0){
                  ^

ERROR:SPACING: space required before the open brace '{'
#127: FILE: fs/tarfs/dir.c:49:
+  if (filp->f_pos==0){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/tarfs/dir.c:50:
+    err = filldir(dirent, ".", 1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/tarfs/dir.c:51:
+                 filp->f_pos, inode->i_ino, DT_DIR);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/tarfs/dir.c:51:
+    err = filldir(dirent, ".", 1,
+                 filp->f_pos, inode->i_ino, DT_DIR);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/tarfs/dir.c:51:
+                 filp->f_pos, inode->i_ino, DT_DIR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/tarfs/dir.c:52:
+    filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/tarfs/dir.c:53:
+    stored=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: fs/tarfs/dir.c:53:
+    stored=1;
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/tarfs/dir.c:54:
+    goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/tarfs/dir.c:55:
+  }$

WARNING:REPEATED_WORD: Possible repeated word: 'dot'
#135: FILE: fs/tarfs/dir.c:57:
+  /* entry 1: dot dot */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/tarfs/dir.c:58:
+  if (filp->f_pos==1){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#136: FILE: fs/tarfs/dir.c:58:
+  if (filp->f_pos==1){
+    err = filldir(dirent, "..", 2,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#136: FILE: fs/tarfs/dir.c:58:
+  if (filp->f_pos==1){
                  ^

ERROR:SPACING: space required before the open brace '{'
#136: FILE: fs/tarfs/dir.c:58:
+  if (filp->f_pos==1){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/tarfs/dir.c:59:
+    err = filldir(dirent, "..", 2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/tarfs/dir.c:60:
+                 filp->f_pos, dir_tarent->parent->ino, DT_DIR);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/tarfs/dir.c:60:
+    err = filldir(dirent, "..", 2,
+                 filp->f_pos, dir_tarent->parent->ino, DT_DIR);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/tarfs/dir.c:60:
+                 filp->f_pos, dir_tarent->parent->ino, DT_DIR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/tarfs/dir.c:61:
+    filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/tarfs/dir.c:62:
+    stored=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#140: FILE: fs/tarfs/dir.c:62:
+    stored=1;
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/tarfs/dir.c:63:
+    goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/tarfs/dir.c:64:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/tarfs/dir.c:67:
+  ent=dir_tarent->children;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: fs/tarfs/dir.c:67:
+  ent=dir_tarent->children;
      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){
+    ent=ent->neighbors;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){
            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){
                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){
                                        ^

ERROR:SPACING: space required before the open brace '{'
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#146: FILE: fs/tarfs/dir.c:68:
+  for(count=2; count<filp->f_pos && ent!=0; count++){
+    ent=ent->neighbors;
+  }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: fs/tarfs/dir.c:69:
+    ent=ent->neighbors;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#147: FILE: fs/tarfs/dir.c:69:
+    ent=ent->neighbors;
        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: fs/tarfs/dir.c:70:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/tarfs/dir.c:72:
+  if (ent==0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#150: FILE: fs/tarfs/dir.c:72:
+  if (ent==0)
+    goto out;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#150: FILE: fs/tarfs/dir.c:72:
+  if (ent==0)
          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: fs/tarfs/dir.c:73:
+    goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){
+    if (S_ISDIR(ent->mode))

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){
            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){
                    ^

ERROR:SPACING: space required before the open brace '{'
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: fs/tarfs/dir.c:75:
+  for(; ent!=0; ent=ent->neighbors){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: fs/tarfs/dir.c:76:
+    if (S_ISDIR(ent->mode))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#154: FILE: fs/tarfs/dir.c:76:
+    if (S_ISDIR(ent->mode))
+      dtype=DT_DIR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: fs/tarfs/dir.c:77:
+      dtype=DT_DIR;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#155: FILE: fs/tarfs/dir.c:77:
+      dtype=DT_DIR;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/tarfs/dir.c:78:
+    else if (S_ISREG(ent->mode))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#156: FILE: fs/tarfs/dir.c:78:
+    else if (S_ISREG(ent->mode))
+      dtype=DT_REG;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/tarfs/dir.c:79:
+      dtype=DT_REG;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: fs/tarfs/dir.c:79:
+      dtype=DT_REG;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/tarfs/dir.c:81:
+    message("tarfs: tarfs_readdir : adding %s\n", ent->name);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_readdir', this function's name, in a string
#159: FILE: fs/tarfs/dir.c:81:
+    message("tarfs: tarfs_readdir : adding %s\n", ent->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/tarfs/dir.c:82:
+    err = filldir(dirent, ent->name, strlen(ent->name),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/tarfs/dir.c:83:
+               filp->f_pos, ent->ino, dtype);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/tarfs/dir.c:83:
+    err = filldir(dirent, ent->name, strlen(ent->name),
+               filp->f_pos, ent->ino, dtype);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/tarfs/dir.c:83:
+               filp->f_pos, ent->ino, dtype);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/tarfs/dir.c:84:
+    if (err)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#162: FILE: fs/tarfs/dir.c:84:
+    if (err)
+      goto out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/tarfs/dir.c:85:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: fs/tarfs/dir.c:87:
+    stored++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/tarfs/dir.c:88:
+    filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/tarfs/dir.c:89:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/tarfs/dir.c:92:
+  message("tarfs: tarfs_readdir() done\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_readdir', this function's name, in a string
#170: FILE: fs/tarfs/dir.c:92:
+  message("tarfs: tarfs_readdir() done\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: fs/tarfs/dir.c:93:
+  return stored;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#174: FILE: fs/tarfs/dir.c:96:
+struct file_operations tarfs_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#175: FILE: fs/tarfs/dir.c:97:
+       read:           generic_read_dir,       /* just put error */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#176: FILE: fs/tarfs/dir.c:98:
+       readdir:        tarfs_readdir,
               ^

WARNING:INDENTED_LABEL: labels should not be indented
#176: FILE: fs/tarfs/dir.c:98:
+       readdir:        tarfs_readdir,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: fs/tarfs/file.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#198: FILE: fs/tarfs/file.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#199: FILE: fs/tarfs/file.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#201: FILE: fs/tarfs/file.c:18:
+ * Version: $Id: file.c,v 1.8 2001/02/25 21:39:03 kaz Exp $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#215: FILE: fs/tarfs/file.c:32:
+static loff_t tarfs_file_lseek(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/tarfs/file.c:33:
+       struct file *file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/tarfs/file.c:34:
+       loff_t offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/tarfs/file.c:35:
+       int origin)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: fs/tarfs/file.c:37:
+       static int event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: fs/tarfs/file.c:38:
+       struct inode *inode = file->f_dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/tarfs/file.c:40:
+       switch (origin) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#223: FILE: fs/tarfs/file.c:40:
+       switch (origin) {
+               case 2:
[...]
+               case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: fs/tarfs/file.c:41:
+               case 2:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: fs/tarfs/file.c:41:
+               case 2:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/tarfs/file.c:42:
+                       offset += inode->i_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/tarfs/file.c:42:
+                       offset += inode->i_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/tarfs/file.c:43:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/tarfs/file.c:43:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/tarfs/file.c:44:
+               case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/tarfs/file.c:44:
+               case 1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: fs/tarfs/file.c:45:
+                       offset += file->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: fs/tarfs/file.c:45:
+                       offset += file->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: fs/tarfs/file.c:46:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/tarfs/file.c:47:
+       if (offset<0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#230: FILE: fs/tarfs/file.c:47:
+       if (offset<0)
+               return -EINVAL;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#230: FILE: fs/tarfs/file.c:47:
+       if (offset<0)
                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/tarfs/file.c:48:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/tarfs/file.c:48:
+               return -EINVAL;$

CHECK:SPACING: No space is necessary after a cast
#232: FILE: fs/tarfs/file.c:49:
+       if (((unsigned long long) offset >> 32) != 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: fs/tarfs/file.c:49:
+       if (((unsigned long long) offset >> 32) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#232: FILE: fs/tarfs/file.c:49:
+       if (((unsigned long long) offset >> 32) != 0) {
+               if (offset > TARFS_MAX_SIZE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: fs/tarfs/file.c:50:
+               if (offset > TARFS_MAX_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: fs/tarfs/file.c:50:
+               if (offset > TARFS_MAX_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#233: FILE: fs/tarfs/file.c:50:
+               if (offset > TARFS_MAX_SIZE)
+                       return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: fs/tarfs/file.c:51:
+                       return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: fs/tarfs/file.c:51:
+                       return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/tarfs/file.c:52:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: fs/tarfs/file.c:53:
+       if (offset != file->f_pos) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#236: FILE: fs/tarfs/file.c:53:
+       if (offset != file->f_pos) {
+               file->f_pos = offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: fs/tarfs/file.c:54:
+               file->f_pos = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: fs/tarfs/file.c:54:
+               file->f_pos = offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: fs/tarfs/file.c:55:
+               //file->f_reada = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: fs/tarfs/file.c:56:
+               file->f_version = ++event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: fs/tarfs/file.c:56:
+               file->f_version = ++event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/tarfs/file.c:57:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: fs/tarfs/file.c:58:
+       return offset;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#244: FILE: fs/tarfs/file.c:61:
+static int tarfs_open_file (struct inode * inode, struct file * filp)
                                                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: fs/tarfs/file.c:61:
+static int tarfs_open_file (struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: fs/tarfs/file.c:61:
+static int tarfs_open_file (struct inode * inode, struct file * filp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: fs/tarfs/file.c:61:
+static int tarfs_open_file (struct inode * inode, struct file * filp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: fs/tarfs/file.c:63:
+       if (!(filp->f_flags & O_LARGEFILE) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#246: FILE: fs/tarfs/file.c:63:
+       if (!(filp->f_flags & O_LARGEFILE) &&
[...]
+               return -EFBIG;

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: fs/tarfs/file.c:64:
+           inode->i_size > TARFS_MAX_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: fs/tarfs/file.c:64:
+           inode->i_size > TARFS_MAX_SIZE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: fs/tarfs/file.c:65:
+               return -EFBIG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: fs/tarfs/file.c:65:
+               return -EFBIG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: fs/tarfs/file.c:66:
+       return 0;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#252: FILE: fs/tarfs/file.c:69:
+struct file_operations tarfs_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#253: FILE: fs/tarfs/file.c:70:
+       llseek:         tarfs_file_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#254: FILE: fs/tarfs/file.c:71:
+       read:           generic_file_read,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#254: FILE: fs/tarfs/file.c:71:
+       read:           generic_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#255: FILE: fs/tarfs/file.c:72:
+       mmap:           generic_file_mmap,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#255: FILE: fs/tarfs/file.c:72:
+       mmap:           generic_file_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#256: FILE: fs/tarfs/file.c:73:
+       open:           tarfs_open_file,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#256: FILE: fs/tarfs/file.c:73:
+       open:           tarfs_open_file,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: fs/tarfs/inode.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#279: FILE: fs/tarfs/inode.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#280: FILE: fs/tarfs/inode.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#282: FILE: fs/tarfs/inode.c:18:
+ * Version: $Id: inode.c,v 1.13 2001/02/25 21:39:03 kaz Exp $

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#297: FILE: fs/tarfs/inode.c:33:
+extern struct address_space_operations tarfs_aops;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#298: FILE: fs/tarfs/inode.c:34:
+extern struct inode_operations tarfs_symlink_inode_operations;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#298: FILE: fs/tarfs/inode.c:34:
+extern struct inode_operations tarfs_symlink_inode_operations;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: fs/tarfs/inode.c:35:
+void tarfs_read_inode (struct inode * inode)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: fs/tarfs/inode.c:35:
+void tarfs_read_inode (struct inode * inode)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: fs/tarfs/inode.c:37:
+  struct tarent *ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: fs/tarfs/inode.c:39:
+  printk("tarfs: tarfs_read_inode(ino=%ld)\n", inode->i_ino);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: fs/tarfs/inode.c:39:
+  printk("tarfs: tarfs_read_inode(ino=%ld)\n", inode->i_ino);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_read_inode', this function's name, in a string
#303: FILE: fs/tarfs/inode.c:39:
+  printk("tarfs: tarfs_read_inode(ino=%ld)\n", inode->i_ino);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: fs/tarfs/inode.c:41:
+  ent=lookup_tarent(inode->i_sb, inode->i_ino);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#305: FILE: fs/tarfs/inode.c:41:
+  ent=lookup_tarent(inode->i_sb, inode->i_ino);
      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: fs/tarfs/inode.c:42:
+  if (!ent)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#306: FILE: fs/tarfs/inode.c:42:
+  if (!ent)
+    goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: fs/tarfs/inode.c:43:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/tarfs/inode.c:45:
+  inode->i_mode = ent->mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: fs/tarfs/inode.c:46:
+  message("tarfs: tarfs_read_inode() -> mode %d\n", inode->i_mode);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_read_inode', this function's name, in a string
#310: FILE: fs/tarfs/inode.c:46:
+  message("tarfs: tarfs_read_inode() -> mode %d\n", inode->i_mode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: fs/tarfs/inode.c:47:
+  inode->i_uid = ent->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: fs/tarfs/inode.c:48:
+  inode->i_gid = ent->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: fs/tarfs/inode.c:49:
+  inode->i_nlink = ent->nlink;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: fs/tarfs/inode.c:50:
+  inode->i_size = ent->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: fs/tarfs/inode.c:51:
+  inode->i_atime.tv_sec = ent->atime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: fs/tarfs/inode.c:52:
+  inode->i_ctime.tv_sec = ent->ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: fs/tarfs/inode.c:53:
+  inode->i_mtime.tv_sec = ent->mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: fs/tarfs/inode.c:54:
+  TARENT(inode) = ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: fs/tarfs/inode.c:56:
+  if (S_ISREG(inode->i_mode)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#320: FILE: fs/tarfs/inode.c:56:
+  if (S_ISREG(inode->i_mode)) {
+    inode->i_fop = &tarfs_file_operations;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: fs/tarfs/inode.c:57:
+    inode->i_fop = &tarfs_file_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: fs/tarfs/inode.c:58:
+    inode->i_mapping->a_ops = &tarfs_aops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: fs/tarfs/inode.c:59:
+  } else if (S_ISDIR(inode->i_mode)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#323: FILE: fs/tarfs/inode.c:59:
+  } else if (S_ISDIR(inode->i_mode)) {
+    inode->i_op = &tarfs_dir_inode_operations;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: fs/tarfs/inode.c:60:
+    inode->i_op = &tarfs_dir_inode_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: fs/tarfs/inode.c:61:
+    inode->i_fop = &tarfs_dir_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: fs/tarfs/inode.c:62:
+  } else if (S_ISLNK(inode->i_mode)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#326: FILE: fs/tarfs/inode.c:62:
+  } else if (S_ISLNK(inode->i_mode)) {
+    inode->i_op = &tarfs_symlink_inode_operations;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: fs/tarfs/inode.c:63:
+    inode->i_op = &tarfs_symlink_inode_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: fs/tarfs/inode.c:64:
+  } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#328: FILE: fs/tarfs/inode.c:64:
+  } else {
[...]
+    error("tarfs: unsupported file type (i_mode=%d)\n", inode->i_mode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: fs/tarfs/inode.c:66:
+    error("tarfs: unsupported file type (i_mode=%d)\n", inode->i_mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: fs/tarfs/inode.c:67:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: fs/tarfs/inode.c:69:
+  return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: fs/tarfs/inode.c:72:
+    make_bad_inode(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: fs/tarfs/inode.c:73:
+    return;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: fs/tarfs/inode.c:80:
+static int tarfs_get_block(struct inode *inode, sector_t iblock,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: fs/tarfs/inode.c:81:
+  if (create){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#346: FILE: fs/tarfs/inode.c:81:
+  if (create){
+    printk("Can not create file on tarfs\n");

ERROR:SPACING: space required before the open brace '{'
#346: FILE: fs/tarfs/inode.c:81:
+  if (create){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: fs/tarfs/inode.c:82:
+    printk("Can not create file on tarfs\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#347: FILE: fs/tarfs/inode.c:82:
+    printk("Can not create file on tarfs\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: fs/tarfs/inode.c:83:
+    return -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: fs/tarfs/inode.c:84:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: fs/tarfs/inode.c:89:
+  map_bh(bh_result, inode->i_sb, TARENT(inode)->pos + iblock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: fs/tarfs/inode.c:91:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: fs/tarfs/inode.c:99:
+  printk("tarfs_readpage\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#364: FILE: fs/tarfs/inode.c:99:
+  printk("tarfs_readpage\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_readpage', this function's name, in a string
#364: FILE: fs/tarfs/inode.c:99:
+  printk("tarfs_readpage\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: fs/tarfs/inode.c:100:
+  return block_read_full_page(page, tarfs_get_block);$

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#368: FILE: fs/tarfs/inode.c:103:
+struct address_space_operations tarfs_aops = {

WARNING:INDENTED_LABEL: labels should not be indented
#369: FILE: fs/tarfs/inode.c:104:
+       readpage:  tarfs_readpage,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: fs/tarfs/inode.c:110:
+  char *s = (char *)TARENT(dentry->d_inode)->linkname;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: fs/tarfs/inode.c:111:
+  char *s = (char *)TARENT(dentry->d_inode)->linkname;
+  return vfs_readlink(dentry, buffer, buflen, s);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: fs/tarfs/inode.c:111:
+  return vfs_readlink(dentry, buffer, buflen, s);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#379: FILE: fs/tarfs/inode.c:114:
+static int tarfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: fs/tarfs/inode.c:116:
+  char *s = (char *)TARENT(dentry->d_inode)->linkname;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#382: FILE: fs/tarfs/inode.c:117:
+  return vfs_follow_link(nd, s);
                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#382: FILE: fs/tarfs/inode.c:117:
+  char *s = (char *)TARENT(dentry->d_inode)->linkname;
+  return vfs_follow_link(nd, s);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: fs/tarfs/inode.c:117:
+  return vfs_follow_link(nd, s);$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#385: FILE: fs/tarfs/inode.c:120:
+struct inode_operations tarfs_symlink_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#386: FILE: fs/tarfs/inode.c:121:
+       readlink:  tarfs_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#387: FILE: fs/tarfs/inode.c:122:
+       follow_link:    tarfs_follow_link,
                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#387: FILE: fs/tarfs/inode.c:122:
+       follow_link:    tarfs_follow_link,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: fs/tarfs/namei.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#423: FILE: fs/tarfs/namei.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#424: FILE: fs/tarfs/namei.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#426: FILE: fs/tarfs/namei.c:18:
+ * Version: $Id: namei.c,v 1.8 2001/02/25 21:39:03 kaz Exp $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#439: FILE: fs/tarfs/namei.c:31:
+static struct dentry *tarfs_lookup(struct inode * dir, struct dentry *dentry)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: fs/tarfs/namei.c:33:
+  struct tarent *ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: fs/tarfs/namei.c:35:
+  message("tarfs: tarfs_lookup()\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_lookup', this function's name, in a string
#443: FILE: fs/tarfs/namei.c:35:
+  message("tarfs: tarfs_lookup()\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){
+    if (!strcmp(ent->name, dentry->d_name.name)){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){
          ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){
                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){
                                             ^

ERROR:SPACING: space required before the open brace '{'
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: fs/tarfs/namei.c:37:
+  for(ent=TARENT(dir)->children; ent!=0; ent=ent->neighbors){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: fs/tarfs/namei.c:38:
+    if (!strcmp(ent->name, dentry->d_name.name)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#446: FILE: fs/tarfs/namei.c:38:
+    if (!strcmp(ent->name, dentry->d_name.name)){
+      d_add(dentry, iget(dir->i_sb, ent->ino));

ERROR:SPACING: space required before the open brace '{'
#446: FILE: fs/tarfs/namei.c:38:
+    if (!strcmp(ent->name, dentry->d_name.name)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: fs/tarfs/namei.c:39:
+      d_add(dentry, iget(dir->i_sb, ent->ino));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: fs/tarfs/namei.c:40:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: fs/tarfs/namei.c:41:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: fs/tarfs/namei.c:42:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: fs/tarfs/namei.c:43:
+  d_add(dentry, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: fs/tarfs/namei.c:46:
+  return NULL;$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#457: FILE: fs/tarfs/namei.c:49:
+struct inode_operations tarfs_dir_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#458: FILE: fs/tarfs/namei.c:50:
+  lookup:      tarfs_lookup,

WARNING:TYPO_SPELLING: 'writen' may be misspelled - perhaps 'written'?
#467: FILE: fs/tarfs/README:1:
+tarfs was writen by
           ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#483: FILE: fs/tarfs/super.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#497: FILE: fs/tarfs/super.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#498: FILE: fs/tarfs/super.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#500: FILE: fs/tarfs/super.c:18:
+ * Version: $Id: super.c,v 1.18 2001/02/25 21:39:03 kaz Exp $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#517: FILE: fs/tarfs/super.c:35:
+void tarfs_put_super (struct super_block * sb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: fs/tarfs/super.c:35:
+void tarfs_put_super (struct super_block * sb)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#519: FILE: fs/tarfs/super.c:37:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: fs/tarfs/super.c:38:
+  printk("tarfs : tarfs_put_super\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: fs/tarfs/super.c:38:
+  printk("tarfs : tarfs_put_super\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_put_super', this function's name, in a string
#520: FILE: fs/tarfs/super.c:38:
+  printk("tarfs : tarfs_put_super\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: fs/tarfs/super.c:40:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: fs/tarfs/super.c:42:
+  delete_all_tarents_and_hash(sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: fs/tarfs/super.c:45:
+  if (TARSB(sb)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#527: FILE: fs/tarfs/super.c:45:
+  if (TARSB(sb)){
+    kfree(TARSB(sb));

ERROR:SPACING: space required before the open brace '{'
#527: FILE: fs/tarfs/super.c:45:
+  if (TARSB(sb)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#527: FILE: fs/tarfs/super.c:45:
+  if (TARSB(sb)){
+    kfree(TARSB(sb));
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: fs/tarfs/super.c:46:
+    kfree(TARSB(sb));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: fs/tarfs/super.c:47:
+  }$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: fs/tarfs/super.c:50:
+int tarfs_statfs (struct super_block * sb, struct kstatfs * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: fs/tarfs/super.c:50:
+int tarfs_statfs (struct super_block * sb, struct kstatfs * buf)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: fs/tarfs/super.c:50:
+int tarfs_statfs (struct super_block * sb, struct kstatfs * buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: fs/tarfs/super.c:52:
+  message("tarfs : tarfs_statfs\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_statfs', this function's name, in a string
#534: FILE: fs/tarfs/super.c:52:
+  message("tarfs : tarfs_statfs\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: fs/tarfs/super.c:54:
+  buf->f_type = TARFS_SUPER_MAGIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: fs/tarfs/super.c:55:
+  buf->f_bsize = sb->s_blocksize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: fs/tarfs/super.c:56:
+  buf->f_blocks = TARSB(sb)->s_files;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: fs/tarfs/super.c:57:
+  buf->f_bfree = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: fs/tarfs/super.c:58:
+  buf->f_bavail = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: fs/tarfs/super.c:59:
+  buf->f_files = TARSB(sb)->s_files;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: fs/tarfs/super.c:60:
+  buf->f_ffree = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: fs/tarfs/super.c:61:
+  buf->f_namelen = TARFS_NAME_LEN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: fs/tarfs/super.c:62:
+  return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#547: FILE: fs/tarfs/super.c:65:
+int tarfs_remount (struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#547: FILE: fs/tarfs/super.c:65:
+int tarfs_remount (struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#547: FILE: fs/tarfs/super.c:65:
+int tarfs_remount (struct super_block * sb, int * flags, char * data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: fs/tarfs/super.c:65:
+int tarfs_remount (struct super_block * sb, int * flags, char * data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: fs/tarfs/super.c:67:
+  message("tarfs : tarfs_remount\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_remount', this function's name, in a string
#549: FILE: fs/tarfs/super.c:67:
+  message("tarfs : tarfs_remount\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: fs/tarfs/super.c:69:
+  if (!(*flags & MS_RDONLY)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#551: FILE: fs/tarfs/super.c:69:
+  if (!(*flags & MS_RDONLY)){
[...]
+    return -EINVAL;

ERROR:SPACING: space required before the open brace '{'
#551: FILE: fs/tarfs/super.c:69:
+  if (!(*flags & MS_RDONLY)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/tarfs/super.c:71:
+    return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: fs/tarfs/super.c:72:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: fs/tarfs/super.c:74:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: fs/tarfs/super.c:79:
+  struct buffer_head *bh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: fs/tarfs/super.c:80:
+  struct posix_header *ph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: fs/tarfs/super.c:81:
+  extern int allow_v7_format;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#563: FILE: fs/tarfs/super.c:81:
+  extern int allow_v7_format;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: fs/tarfs/super.c:82:
+  int ok=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#564: FILE: fs/tarfs/super.c:82:
+  int ok=0;
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: fs/tarfs/super.c:84:
+  if (allow_v7_format){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#566: FILE: fs/tarfs/super.c:84:
+  if (allow_v7_format){
[...]
+    return 1;

ERROR:SPACING: space required before the open brace '{'
#566: FILE: fs/tarfs/super.c:84:
+  if (allow_v7_format){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: fs/tarfs/super.c:86:
+    return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: fs/tarfs/super.c:87:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: fs/tarfs/super.c:89:
+  bh = sb_bread(sb, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: fs/tarfs/super.c:90:
+  if (!bh)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#572: FILE: fs/tarfs/super.c:90:
+  if (!bh)
+    return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: fs/tarfs/super.c:91:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: fs/tarfs/super.c:93:
+  ph = (struct posix_header*)((char *)bh->b_data);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#575: FILE: fs/tarfs/super.c:93:
+  ph = (struct posix_header*)((char *)bh->b_data);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: fs/tarfs/super.c:94:
+  message("magic %s\n", ph->magic);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: fs/tarfs/super.c:95:
+  ok = !strncmp(ph->magic, "ustar", 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: fs/tarfs/super.c:96:
+  brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: fs/tarfs/super.c:98:
+  return ok;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#583: FILE: fs/tarfs/super.c:101:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#588: FILE: fs/tarfs/super.c:106:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: fs/tarfs/super.c:107:
+  sb_set_blocksize(sb, TAR_BLOCKSIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: fs/tarfs/super.c:109:
+  printk("tarfs: tarfs_fill_super()\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#591: FILE: fs/tarfs/super.c:109:
+  printk("tarfs: tarfs_fill_super()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tarfs_fill_super', this function's name, in a string
#591: FILE: fs/tarfs/super.c:109:
+  printk("tarfs: tarfs_fill_super()\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: fs/tarfs/super.c:110:
+  message("tarfs: mount flags: %ld\n", sb->s_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: fs/tarfs/super.c:114:
+  if (!check_magic(sb)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#596: FILE: fs/tarfs/super.c:114:
+  if (!check_magic(sb)){
+    printk("tarfs: Not a tar file, or old v7 format\n");

ERROR:SPACING: space required before the open brace '{'
#596: FILE: fs/tarfs/super.c:114:
+  if (!check_magic(sb)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: fs/tarfs/super.c:115:
+    printk("tarfs: Not a tar file, or old v7 format\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#597: FILE: fs/tarfs/super.c:115:
+    printk("tarfs: Not a tar file, or old v7 format\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: fs/tarfs/super.c:116:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: fs/tarfs/super.c:117:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: fs/tarfs/super.c:120:
+  TARSB(sb) = kmalloc(sizeof(struct tarfs_sb_info), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: fs/tarfs/super.c:121:
+  if (!TARSB(sb)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#603: FILE: fs/tarfs/super.c:121:
+  if (!TARSB(sb)){
+    printk("tarfs: Can not allocate fs dependent sb data\n");

ERROR:SPACING: space required before the open brace '{'
#603: FILE: fs/tarfs/super.c:121:
+  if (!TARSB(sb)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: fs/tarfs/super.c:122:
+    printk("tarfs: Can not allocate fs dependent sb data\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#604: FILE: fs/tarfs/super.c:122:
+    printk("tarfs: Can not allocate fs dependent sb data\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: fs/tarfs/super.c:123:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: fs/tarfs/super.c:124:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: fs/tarfs/super.c:126:
+  TARSB(sb)->parsed=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#608: FILE: fs/tarfs/super.c:126:
+  TARSB(sb)->parsed=0;
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: fs/tarfs/super.c:127:
+  TARSB(sb)->ihash=(struct tarent**)$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#609: FILE: fs/tarfs/super.c:127:
+  TARSB(sb)->ihash=(struct tarent**)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#609: FILE: fs/tarfs/super.c:127:
+  TARSB(sb)->ihash=(struct tarent**)
                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: fs/tarfs/super.c:128:
+    kmalloc(sizeof(struct tarent *[TARENT_HASHSIZE]), GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#610: FILE: fs/tarfs/super.c:128:
+    kmalloc(sizeof(struct tarent *[TARENT_HASHSIZE]), GFP_KERNEL);
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: fs/tarfs/super.c:129:
+  if (!TARSB(sb)->ihash)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#611: FILE: fs/tarfs/super.c:129:
+  if (!TARSB(sb)->ihash)
+    goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: fs/tarfs/super.c:130:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: fs/tarfs/super.c:131:
+  memset(TARSB(sb)->ihash, 0, sizeof(struct tarent *[TARENT_HASHSIZE]));$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#613: FILE: fs/tarfs/super.c:131:
+  memset(TARSB(sb)->ihash, 0, sizeof(struct tarent *[TARENT_HASHSIZE]));
                                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: fs/tarfs/super.c:133:
+  TARSB(sb)->s_files=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#615: FILE: fs/tarfs/super.c:133:
+  TARSB(sb)->s_files=0;
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: fs/tarfs/super.c:134:
+  TARSB(sb)->s_blocks=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#616: FILE: fs/tarfs/super.c:134:
+  TARSB(sb)->s_blocks=0;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: fs/tarfs/super.c:135:
+  TARSB(sb)->s_maxino=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#617: FILE: fs/tarfs/super.c:135:
+  TARSB(sb)->s_maxino=1;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: fs/tarfs/super.c:137:
+  sb->s_op = &tarfs_sops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: fs/tarfs/super.c:138:
+  sb->s_root = d_alloc_root(iget(sb, TARFS_ROOT_INO));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: fs/tarfs/super.c:139:
+  if (!sb->s_root) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#621: FILE: fs/tarfs/super.c:139:
+  if (!sb->s_root) {
+    goto err_out;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#621: FILE: fs/tarfs/super.c:139:
+  if (!sb->s_root) {
+    goto err_out;
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: fs/tarfs/super.c:140:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: fs/tarfs/super.c:141:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: fs/tarfs/super.c:144:
+  sb->s_flags = MS_RDONLY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: fs/tarfs/super.c:145:
+  sb->s_dirt = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: fs/tarfs/super.c:146:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: fs/tarfs/super.c:149:
+  if (TARSB(sb) && TARSB(sb)->ihash){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#631: FILE: fs/tarfs/super.c:149:
+  if (TARSB(sb) && TARSB(sb)->ihash){
+    kfree(TARSB(sb)->ihash);

ERROR:SPACING: space required before the open brace '{'
#631: FILE: fs/tarfs/super.c:149:
+  if (TARSB(sb) && TARSB(sb)->ihash){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#631: FILE: fs/tarfs/super.c:149:
+  if (TARSB(sb) && TARSB(sb)->ihash){
+    kfree(TARSB(sb)->ihash);
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: fs/tarfs/super.c:150:
+    kfree(TARSB(sb)->ihash);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: fs/tarfs/super.c:151:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: fs/tarfs/super.c:152:
+  if (TARSB(sb)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#634: FILE: fs/tarfs/super.c:152:
+  if (TARSB(sb)){
+    kfree(TARSB(sb));

ERROR:SPACING: space required before the open brace '{'
#634: FILE: fs/tarfs/super.c:152:
+  if (TARSB(sb)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#634: FILE: fs/tarfs/super.c:152:
+  if (TARSB(sb)){
+    kfree(TARSB(sb));
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: fs/tarfs/super.c:153:
+    kfree(TARSB(sb));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: fs/tarfs/super.c:154:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: fs/tarfs/super.c:155:
+  printk("tarfs:fillsuper error\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: fs/tarfs/super.c:155:
+  printk("tarfs:fillsuper error\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: fs/tarfs/super.c:156:
+  return 1;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#641: FILE: fs/tarfs/super.c:159:
+static struct super_block * tarfs_get_super (struct file_system_type

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#641: FILE: fs/tarfs/super.c:159:
+static struct super_block * tarfs_get_super (struct file_system_type

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: fs/tarfs/super.c:160:
+       int flags, const char *dev_name, void * data)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#643: FILE: fs/tarfs/super.c:160:
+       int flags, const char *dev_name, void * data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: fs/tarfs/super.c:162:
+       return get_sb_bdev(fs_type, flags, dev_name, data, tarfs_fill_super);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#648: FILE: fs/tarfs/super.c:165:
+extern void tarfs_read_inode (struct inode * inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: fs/tarfs/super.c:165:
+extern void tarfs_read_inode (struct inode * inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: fs/tarfs/super.c:166:
+extern void tarfs_write_inode (struct inode * inode, int wait);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#649: FILE: fs/tarfs/super.c:166:
+extern void tarfs_write_inode (struct inode * inode, int wait);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#649: FILE: fs/tarfs/super.c:166:
+extern void tarfs_write_inode (struct inode * inode, int wait);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: fs/tarfs/super.c:167:
+extern void tarfs_put_inode (struct inode * inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#650: FILE: fs/tarfs/super.c:167:
+extern void tarfs_put_inode (struct inode * inode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#650: FILE: fs/tarfs/super.c:167:
+extern void tarfs_put_inode (struct inode * inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#651: FILE: fs/tarfs/super.c:168:
+extern void tarfs_delete_inode (struct inode * inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#651: FILE: fs/tarfs/super.c:168:
+extern void tarfs_delete_inode (struct inode * inode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#651: FILE: fs/tarfs/super.c:168:
+extern void tarfs_delete_inode (struct inode * inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: fs/tarfs/super.c:169:
+extern void tarfs_truncate (struct inode * inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: fs/tarfs/super.c:169:
+extern void tarfs_truncate (struct inode * inode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#652: FILE: fs/tarfs/super.c:169:
+extern void tarfs_truncate (struct inode * inode);

WARNING:INDENTED_LABEL: labels should not be indented
#655: FILE: fs/tarfs/super.c:172:
+       read_inode:     tarfs_read_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#656: FILE: fs/tarfs/super.c:173:
+       put_super:      tarfs_put_super,
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#656: FILE: fs/tarfs/super.c:173:
+       put_super:      tarfs_put_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#657: FILE: fs/tarfs/super.c:174:
+       statfs:         tarfs_statfs,
              ^

WARNING:INDENTED_LABEL: labels should not be indented
#657: FILE: fs/tarfs/super.c:174:
+       statfs:         tarfs_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#658: FILE: fs/tarfs/super.c:175:
+       remount_fs:     tarfs_remount,
                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#658: FILE: fs/tarfs/super.c:175:
+       remount_fs:     tarfs_remount,

WARNING:INDENTED_LABEL: labels should not be indented
#664: FILE: fs/tarfs/super.c:181:
+       owner:           THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#665: FILE: fs/tarfs/super.c:182:
+       name:            "tarfs",
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#665: FILE: fs/tarfs/super.c:182:
+       name:            "tarfs",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#666: FILE: fs/tarfs/super.c:183:
+       get_sb:          tarfs_get_super,
              ^

WARNING:INDENTED_LABEL: labels should not be indented
#666: FILE: fs/tarfs/super.c:183:
+       get_sb:          tarfs_get_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#667: FILE: fs/tarfs/super.c:184:
+       kill_sb:        kill_block_super,
               ^

WARNING:INDENTED_LABEL: labels should not be indented
#667: FILE: fs/tarfs/super.c:184:
+       kill_sb:        kill_block_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#668: FILE: fs/tarfs/super.c:185:
+       fs_flags:               FS_REQUIRES_DEV,
                ^

WARNING:INDENTED_LABEL: labels should not be indented
#668: FILE: fs/tarfs/super.c:185:
+       fs_flags:               FS_REQUIRES_DEV,

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#676: FILE: fs/tarfs/super.c:193:
+int tarfs_debug=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#676: FILE: fs/tarfs/super.c:193:
+int tarfs_debug=0;
                ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#677: FILE: fs/tarfs/super.c:194:
+int allow_v7_format=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#677: FILE: fs/tarfs/super.c:194:
+int allow_v7_format=0;
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: fs/tarfs/super.c:202:
+  printk(KERN_INFO "tarfs: init_tar_fs (debug=%d)\n", tarfs_debug);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#685: FILE: fs/tarfs/super.c:202:
+  printk(KERN_INFO "tarfs: init_tar_fs (debug=%d)\n", tarfs_debug);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_tar_fs', this function's name, in a string
#685: FILE: fs/tarfs/super.c:202:
+  printk(KERN_INFO "tarfs: init_tar_fs (debug=%d)\n", tarfs_debug);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: fs/tarfs/super.c:203:
+  return register_filesystem(&tar_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: fs/tarfs/super.c:208:
+  printk(KERN_INFO "tarfs: exit_tar_fs\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#691: FILE: fs/tarfs/super.c:208:
+  printk(KERN_INFO "tarfs: exit_tar_fs\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_tar_fs', this function's name, in a string
#691: FILE: fs/tarfs/super.c:208:
+  printk(KERN_INFO "tarfs: exit_tar_fs\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: fs/tarfs/super.c:209:
+  unregister_filesystem(&tar_fs_type);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#705: FILE: fs/tarfs/tarent.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#719: FILE: fs/tarfs/tarent.c:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#720: FILE: fs/tarfs/tarent.c:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#722: FILE: fs/tarfs/tarent.c:18:
+ * Version: $Id: tarent.c,v 1.18 2001/02/25 21:39:03 kaz Exp $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: fs/tarfs/tarent.c:41:
+  char buf[512];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: fs/tarfs/tarent.c:42:
+  unsigned long val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: fs/tarfs/tarent.c:43:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){
+    error("tarfs: zero or too long siz for getval8\n");

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){
          ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){
                      ^

ERROR:SPACING: space required before the open brace '{'
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#749: FILE: fs/tarfs/tarent.c:45:
+  if (siz>512 || siz <=0){
+    error("tarfs: zero or too long siz for getval8\n");
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: fs/tarfs/tarent.c:46:
+    error("tarfs: zero or too long siz for getval8\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'getval8', this function's name, in a string
#750: FILE: fs/tarfs/tarent.c:46:
+    error("tarfs: zero or too long siz for getval8\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: fs/tarfs/tarent.c:47:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){
+    if (!isspace(p[i]))        /* '\0' is control character */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){
        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){
             ^

ERROR:SPACING: space required before the open brace '{'
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){

ERROR:SPACING: space required before the open parenthesis '('
#753: FILE: fs/tarfs/tarent.c:49:
+  for(i=0; i<siz; i++){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: fs/tarfs/tarent.c:50:
+    if (!isspace(p[i]))        /* '\0' is control character */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#754: FILE: fs/tarfs/tarent.c:50:
+    if (!isspace(p[i]))        /* '\0' is control character */
+      break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: fs/tarfs/tarent.c:51:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: fs/tarfs/tarent.c:52:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: fs/tarfs/tarent.c:54:
+  memcpy(buf, p+i, siz-i);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#758: FILE: fs/tarfs/tarent.c:54:
+  memcpy(buf, p+i, siz-i);
                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#758: FILE: fs/tarfs/tarent.c:54:
+  memcpy(buf, p+i, siz-i);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: fs/tarfs/tarent.c:55:
+  buf[siz-i]='\0';$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#759: FILE: fs/tarfs/tarent.c:55:
+  buf[siz-i]='\0';
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#759: FILE: fs/tarfs/tarent.c:55:
+  buf[siz-i]='\0';
             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: fs/tarfs/tarent.c:57:
+  val=simple_strtoul(buf, NULL, 8);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#761: FILE: fs/tarfs/tarent.c:57:
+  val=simple_strtoul(buf, NULL, 8);
      ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#761: FILE: fs/tarfs/tarent.c:57:
+  val=simple_strtoul(buf, NULL, 8);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: fs/tarfs/tarent.c:58:
+  message("getval8 [%s] %ld\n", buf, val);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'getval8', this function's name, in a string
#762: FILE: fs/tarfs/tarent.c:58:
+  message("getval8 [%s] %ld\n", buf, val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: fs/tarfs/tarent.c:60:
+  return val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: fs/tarfs/tarent.c:68:
+  message("tarfs: feeding ino %ld\n", TARSB(sb)->s_maxino);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: fs/tarfs/tarent.c:69:
+  return ++(TARSB(sb)->s_maxino);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: fs/tarfs/tarent.c:76:
+static void hash_tarent(struct super_block *sb, struct tarent *t,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: fs/tarfs/tarent.c:77:
+  struct tarent **tentp = TARSB(sb)->ihash+ino%TARENT_HASHSIZE;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#782: FILE: fs/tarfs/tarent.c:77:
+  struct tarent **tentp = TARSB(sb)->ihash+ino%TARENT_HASHSIZE;
                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#782: FILE: fs/tarfs/tarent.c:77:
+  struct tarent **tentp = TARSB(sb)->ihash+ino%TARENT_HASHSIZE;
                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: fs/tarfs/tarent.c:83:
+  t->next_hash = *tentp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: fs/tarfs/tarent.c:84:
+  *tentp = t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: fs/tarfs/tarent.c:92:
+  struct tarent *ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: fs/tarfs/tarent.c:94:
+  if (!TARSB(sb)->parsed){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#799: FILE: fs/tarfs/tarent.c:94:
+  if (!TARSB(sb)->parsed){
+    message("tarfs: !!! sb->parsed == 0\n");

ERROR:SPACING: space required before the open brace '{'
#799: FILE: fs/tarfs/tarent.c:94:
+  if (!TARSB(sb)->parsed){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: fs/tarfs/tarent.c:95:
+    message("tarfs: !!! sb->parsed == 0\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: fs/tarfs/tarent.c:96:
+    if (parse_tar(sb))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#801: FILE: fs/tarfs/tarent.c:96:
+    if (parse_tar(sb))
+      goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: fs/tarfs/tarent.c:97:
+      goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: fs/tarfs/tarent.c:98:
+    TARSB(sb)->parsed=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#803: FILE: fs/tarfs/tarent.c:98:
+    TARSB(sb)->parsed=1;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: fs/tarfs/tarent.c:99:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: fs/tarfs/tarent.c:101:
+  if (ino < 2){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#806: FILE: fs/tarfs/tarent.c:101:
+  if (ino < 2){
+    error("tarfs: lookup_tarent() no such inode %ld\n", ino);

ERROR:SPACING: space required before the open brace '{'
#806: FILE: fs/tarfs/tarent.c:101:
+  if (ino < 2){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: fs/tarfs/tarent.c:102:
+    error("tarfs: lookup_tarent() no such inode %ld\n", ino);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lookup_tarent', this function's name, in a string
#807: FILE: fs/tarfs/tarent.c:102:
+    error("tarfs: lookup_tarent() no such inode %ld\n", ino);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: fs/tarfs/tarent.c:103:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: fs/tarfs/tarent.c:104:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: fs/tarfs/tarent.c:106:
+  for(ent=TARSB(sb)->ihash[ino%TARENT_HASHSIZE];$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#811: FILE: fs/tarfs/tarent.c:106:
+  for(ent=TARSB(sb)->ihash[ino%TARENT_HASHSIZE];
[...]
+    if (ent->ino==ino){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#811: FILE: fs/tarfs/tarent.c:106:
+  for(ent=TARSB(sb)->ihash[ino%TARENT_HASHSIZE];
          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#811: FILE: fs/tarfs/tarent.c:106:
+  for(ent=TARSB(sb)->ihash[ino%TARENT_HASHSIZE];
                               ^

ERROR:SPACING: space required before the open parenthesis '('
#811: FILE: fs/tarfs/tarent.c:106:
+  for(ent=TARSB(sb)->ihash[ino%TARENT_HASHSIZE];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: fs/tarfs/tarent.c:107:
+      ent!=0;$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#812: FILE: fs/tarfs/tarent.c:107:
+      ent!=0;
          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: fs/tarfs/tarent.c:108:
+      ent=NEXT_HASH(ent)){$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#813: FILE: fs/tarfs/tarent.c:108:
+      ent=NEXT_HASH(ent)){
          ^

ERROR:SPACING: space required before the open brace '{'
#813: FILE: fs/tarfs/tarent.c:108:
+      ent=NEXT_HASH(ent)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: fs/tarfs/tarent.c:109:
+    if (ent->ino==ino){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#814: FILE: fs/tarfs/tarent.c:109:
+    if (ent->ino==ino){
+      return (ent->hardlinked ? ent->hardlinked : ent);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#814: FILE: fs/tarfs/tarent.c:109:
+    if (ent->ino==ino){
                 ^

ERROR:SPACING: space required before the open brace '{'
#814: FILE: fs/tarfs/tarent.c:109:
+    if (ent->ino==ino){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#814: FILE: fs/tarfs/tarent.c:109:
+    if (ent->ino==ino){
+      return (ent->hardlinked ? ent->hardlinked : ent);
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: fs/tarfs/tarent.c:110:
+      return (ent->hardlinked ? ent->hardlinked : ent);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#815: FILE: fs/tarfs/tarent.c:110:
+      return (ent->hardlinked ? ent->hardlinked : ent);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/tarfs/tarent.c:111:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: fs/tarfs/tarent.c:112:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: fs/tarfs/tarent.c:115:
+  return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: fs/tarfs/tarent.c:119:
+                         struct posix_header *, char *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: fs/tarfs/tarent.c:119:
+static struct tarent *add_tarent(struct super_block *, unsigned long,
+                         struct posix_header *, char *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: fs/tarfs/tarent.c:119:
+                         struct posix_header *, char *);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#830: FILE: fs/tarfs/tarent.c:125:
+               struct posix_header *ph, struct tarent *te, int blk)
                                                        ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: fs/tarfs/tarent.c:125:
+               struct posix_header *ph, struct tarent *te, int blk)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: fs/tarfs/tarent.c:125:
+static void set_tarent(struct super_block *sb,
+               struct posix_header *ph, struct tarent *te, int blk)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: fs/tarfs/tarent.c:125:
+               struct posix_header *ph, struct tarent *te, int blk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: fs/tarfs/tarent.c:127:
+  unsigned long mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: fs/tarfs/tarent.c:128:
+  time_t mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: fs/tarfs/tarent.c:129:
+  struct tarent *link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: fs/tarfs/tarent.c:131:
+  message("set_tarent (blk=%d)\n", blk);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_tarent', this function's name, in a string
#836: FILE: fs/tarfs/tarent.c:131:
+  message("set_tarent (blk=%d)\n", blk);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: fs/tarfs/tarent.c:133:
+  mode=getval8(ph->mode, sizeof(ph->mode));$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#838: FILE: fs/tarfs/tarent.c:133:
+  mode=getval8(ph->mode, sizeof(ph->mode));
       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: fs/tarfs/tarent.c:134:
+  switch(ph->typeflag){$

ERROR:SPACING: space required before the open brace '{'
#839: FILE: fs/tarfs/tarent.c:134:
+  switch(ph->typeflag){

ERROR:SPACING: space required before the open parenthesis '('
#839: FILE: fs/tarfs/tarent.c:134:
+  switch(ph->typeflag){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: fs/tarfs/tarent.c:135:
+  case TARFS_DIRTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: fs/tarfs/tarent.c:137:
+    te->mode = S_IFDIR|(mode & TARFS_MODEMASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#842: FILE: fs/tarfs/tarent.c:137:
+    te->mode = S_IFDIR|(mode & TARFS_MODEMASK);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: fs/tarfs/tarent.c:143:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: fs/tarfs/tarent.c:145:
+  case TARFS_LNKTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: fs/tarfs/tarent.c:147:
+    te->linkname = kmalloc(strlen(ph->linkname)+1, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#852: FILE: fs/tarfs/tarent.c:147:
+    te->linkname = kmalloc(strlen(ph->linkname)+1, GFP_KERNEL);
                                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: fs/tarfs/tarent.c:148:
+    if (!te->linkname){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#853: FILE: fs/tarfs/tarent.c:148:
+    if (!te->linkname){
+      error("tarfs: Can not assign linkname\n");

ERROR:SPACING: space required before the open brace '{'
#853: FILE: fs/tarfs/tarent.c:148:
+    if (!te->linkname){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: fs/tarfs/tarent.c:149:
+      error("tarfs: Can not assign linkname\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: fs/tarfs/tarent.c:150:
+      te->linkname = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: fs/tarfs/tarent.c:151:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: fs/tarfs/tarent.c:152:
+    strcpy(te->linkname, ph->linkname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: fs/tarfs/tarent.c:153:
+    message("hardlink %s->%s\n", te->name, te->linkname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: fs/tarfs/tarent.c:156:
+    link=add_tarent(sb, 0, 0, te->linkname);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#861: FILE: fs/tarfs/tarent.c:156:
+    link=add_tarent(sb, 0, 0, te->linkname);
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: fs/tarfs/tarent.c:157:
+    te->hardlinked = link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: fs/tarfs/tarent.c:158:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: fs/tarfs/tarent.c:160:
+  case TARFS_SYMTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: fs/tarfs/tarent.c:162:
+    te->mode = S_IFLNK|(mode & TARFS_MODEMASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#867: FILE: fs/tarfs/tarent.c:162:
+    te->mode = S_IFLNK|(mode & TARFS_MODEMASK);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: fs/tarfs/tarent.c:163:
+    te->nlink = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: fs/tarfs/tarent.c:164:
+    te->linkname = kmalloc(strlen(ph->linkname)+1, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#869: FILE: fs/tarfs/tarent.c:164:
+    te->linkname = kmalloc(strlen(ph->linkname)+1, GFP_KERNEL);
                                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: fs/tarfs/tarent.c:165:
+    if (!te->linkname){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#870: FILE: fs/tarfs/tarent.c:165:
+    if (!te->linkname){
+      error("tarfs: Can not assign linkname\n");

ERROR:SPACING: space required before the open brace '{'
#870: FILE: fs/tarfs/tarent.c:165:
+    if (!te->linkname){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: fs/tarfs/tarent.c:166:
+      error("tarfs: Can not assign linkname\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: fs/tarfs/tarent.c:167:
+      te->linkname = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: fs/tarfs/tarent.c:168:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: fs/tarfs/tarent.c:169:
+    strcpy(te->linkname, ph->linkname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: fs/tarfs/tarent.c:170:
+    message("symlink %s->%s\n", te->name, te->linkname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: fs/tarfs/tarent.c:171:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: fs/tarfs/tarent.c:173:
+  case TARFS_REGTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: fs/tarfs/tarent.c:174:
+  case TARFS_AREGTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: fs/tarfs/tarent.c:177:
+    te->mode = S_IFREG|(mode & TARFS_MODEMASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#882: FILE: fs/tarfs/tarent.c:177:
+    te->mode = S_IFREG|(mode & TARFS_MODEMASK);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: fs/tarfs/tarent.c:182:
+    te->size = getval8(ph->size, sizeof(ph->size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: fs/tarfs/tarent.c:183:
+    te->nlink = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: fs/tarfs/tarent.c:184:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: fs/tarfs/tarent.c:188:
+    error("Unsupported typeflag %d (%c) blk %d, ignored\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: fs/tarfs/tarent.c:189:
+         ph->typeflag, ph->typeflag, blk);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: fs/tarfs/tarent.c:189:
+    error("Unsupported typeflag %d (%c) blk %d, ignored\n",
+         ph->typeflag, ph->typeflag, blk);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: fs/tarfs/tarent.c:189:
+         ph->typeflag, ph->typeflag, blk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: fs/tarfs/tarent.c:190:
+    te->mode = S_IFREG|(mode & TARFS_MODEMASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#895: FILE: fs/tarfs/tarent.c:190:
+    te->mode = S_IFREG|(mode & TARFS_MODEMASK);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: fs/tarfs/tarent.c:191:
+    te->size = getval8(ph->size, sizeof(ph->size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: fs/tarfs/tarent.c:192:
+    te->nlink = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: fs/tarfs/tarent.c:193:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: fs/tarfs/tarent.c:194:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: fs/tarfs/tarent.c:196:
+  mtime=getval8(ph->mtime, sizeof(ph->mtime));$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#901: FILE: fs/tarfs/tarent.c:196:
+  mtime=getval8(ph->mtime, sizeof(ph->mtime));
        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: fs/tarfs/tarent.c:197:
+  te->mtime = mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: fs/tarfs/tarent.c:198:
+  te->atime = mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: fs/tarfs/tarent.c:199:
+  te->ctime = mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: fs/tarfs/tarent.c:201:
+  te->uid = getval8(ph->uid, sizeof(ph->uid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: fs/tarfs/tarent.c:202:
+  te->gid = getval8(ph->gid, sizeof(ph->gid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: fs/tarfs/tarent.c:203:
+  te->pos = blk;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#916: FILE: fs/tarfs/tarent.c:211:
+  struct tarent *te;
                  ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: fs/tarfs/tarent.c:211:
+  struct tarent *te;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#918: FILE: fs/tarfs/tarent.c:213:
+  te = (struct tarent *)kmalloc(sizeof(struct tarent), GFP_KERNEL);
   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: fs/tarfs/tarent.c:213:
+  te = (struct tarent *)kmalloc(sizeof(struct tarent), GFP_KERNEL);$

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#918: FILE: fs/tarfs/tarent.c:213:
+  te = (struct tarent *)kmalloc(sizeof(struct tarent), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*te)...) over kmalloc(sizeof(struct tarent)...)
#918: FILE: fs/tarfs/tarent.c:213:
+  te = (struct tarent *)kmalloc(sizeof(struct tarent), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#919: FILE: fs/tarfs/tarent.c:214:
+  if (!te)
        ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: fs/tarfs/tarent.c:214:
+  if (!te)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#919: FILE: fs/tarfs/tarent.c:214:
+  if (!te)
+    goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: fs/tarfs/tarent.c:215:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: fs/tarfs/tarent.c:216:
+  te->name=kmalloc(len+1, GFP_KERNEL);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#921: FILE: fs/tarfs/tarent.c:216:
+  te->name=kmalloc(len+1, GFP_KERNEL);
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#921: FILE: fs/tarfs/tarent.c:216:
+  te->name=kmalloc(len+1, GFP_KERNEL);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: fs/tarfs/tarent.c:217:
+  if (!te->name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#922: FILE: fs/tarfs/tarent.c:217:
+  if (!te->name)
+    goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: fs/tarfs/tarent.c:218:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: fs/tarfs/tarent.c:220:
+  strcpy(te->name, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: fs/tarfs/tarent.c:222:
+  te->linkname=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#927: FILE: fs/tarfs/tarent.c:222:
+  te->linkname=0;
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: fs/tarfs/tarent.c:224:
+  te->ino=ino;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: fs/tarfs/tarent.c:224:
+  te->ino=ino;
          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: fs/tarfs/tarent.c:225:
+  te->children=te->neighbors=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#930: FILE: fs/tarfs/tarent.c:225:
+  te->children=te->neighbors=0;
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#930: FILE: fs/tarfs/tarent.c:225:
+  te->children=te->neighbors=0;
                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#930: FILE: fs/tarfs/tarent.c:225:
+  te->children=te->neighbors=0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#931: FILE: fs/tarfs/tarent.c:226:
+  te->parent=te;
              ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: fs/tarfs/tarent.c:226:
+  te->parent=te;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#931: FILE: fs/tarfs/tarent.c:226:
+  te->parent=te;
             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: fs/tarfs/tarent.c:234:
+  te->mtime = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: fs/tarfs/tarent.c:235:
+  te->atime = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: fs/tarfs/tarent.c:236:
+  te->ctime = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: fs/tarfs/tarent.c:240:
+  te->pos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: fs/tarfs/tarent.c:242:
+  te->nlink = te->size = 2;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#947: FILE: fs/tarfs/tarent.c:242:
+  te->nlink = te->size = 2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: fs/tarfs/tarent.c:243:
+  te->mode=S_IFDIR|0777;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#948: FILE: fs/tarfs/tarent.c:243:
+  te->mode=S_IFDIR|0777;
           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#948: FILE: fs/tarfs/tarent.c:243:
+  te->mode=S_IFDIR|0777;
                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: fs/tarfs/tarent.c:245:
+  te->hardlinked = 0;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#952: FILE: fs/tarfs/tarent.c:247:
+  return te;
          ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: fs/tarfs/tarent.c:247:
+  return te;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#955: FILE: fs/tarfs/tarent.c:250:
+  if (te && te->name)
       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: fs/tarfs/tarent.c:250:
+  if (te && te->name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#955: FILE: fs/tarfs/tarent.c:250:
+  if (te && te->name)
+    kfree(te->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: fs/tarfs/tarent.c:251:
+    kfree(te->name);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#957: FILE: fs/tarfs/tarent.c:252:
+  if (te)
       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: fs/tarfs/tarent.c:252:
+  if (te)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#957: FILE: fs/tarfs/tarent.c:252:
+  if (te)
+    kfree(te);

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#958: FILE: fs/tarfs/tarent.c:253:
+    kfree(te);
           ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: fs/tarfs/tarent.c:253:
+    kfree(te);$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#958: FILE: fs/tarfs/tarent.c:253:
+  if (te)
+    kfree(te);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: fs/tarfs/tarent.c:255:
+  return 0;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#963: FILE: fs/tarfs/tarent.c:258:
+static void delete_tarent(struct tarent *te)
                                          ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#965: FILE: fs/tarfs/tarent.c:260:
+  if (te){
       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: fs/tarfs/tarent.c:260:
+  if (te){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#965: FILE: fs/tarfs/tarent.c:260:
+  if (te){
+    if (te->name){

ERROR:SPACING: space required before the open brace '{'
#965: FILE: fs/tarfs/tarent.c:260:
+  if (te){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: fs/tarfs/tarent.c:261:
+    if (te->name){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#966: FILE: fs/tarfs/tarent.c:261:
+    if (te->name){
+      kfree(te->name);

ERROR:SPACING: space required before the open brace '{'
#966: FILE: fs/tarfs/tarent.c:261:
+    if (te->name){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#966: FILE: fs/tarfs/tarent.c:261:
+    if (te->name){
+      kfree(te->name);
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: fs/tarfs/tarent.c:262:
+      kfree(te->name);$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#967: FILE: fs/tarfs/tarent.c:262:
+    if (te->name){
+      kfree(te->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: fs/tarfs/tarent.c:263:
+    }$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#969: FILE: fs/tarfs/tarent.c:264:
+    kfree(te);
           ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: fs/tarfs/tarent.c:264:
+    kfree(te);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: fs/tarfs/tarent.c:265:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: fs/tarfs/tarent.c:273:
+  message("tarfs: add_to_parent %p %p\n", p, c);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_to_parent', this function's name, in a string
#978: FILE: fs/tarfs/tarent.c:273:
+  message("tarfs: add_to_parent %p %p\n", p, c);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: fs/tarfs/tarent.c:275:
+  if (!(p && S_ISDIR(p->mode)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#980: FILE: fs/tarfs/tarent.c:275:
+  if (!(p && S_ISDIR(p->mode)))
+    BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: fs/tarfs/tarent.c:276:
+    BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#981: FILE: fs/tarfs/tarent.c:276:
+    BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: fs/tarfs/tarent.c:278:
+  if (c==0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#983: FILE: fs/tarfs/tarent.c:278:
+  if (c==0)
+    BUG();

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#983: FILE: fs/tarfs/tarent.c:278:
+  if (c==0)
        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: fs/tarfs/tarent.c:279:
+    BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#984: FILE: fs/tarfs/tarent.c:279:
+    BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: fs/tarfs/tarent.c:281:
+  c->parent = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: fs/tarfs/tarent.c:282:
+  c->neighbors = p->children;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: fs/tarfs/tarent.c:283:
+  p->children = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: fs/tarfs/tarent.c:284:
+  p->size+=1;$

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#989: FILE: fs/tarfs/tarent.c:284:
+  p->size+=1;
          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: fs/tarfs/tarent.c:285:
+  p->nlink+=1;$

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#990: FILE: fs/tarfs/tarent.c:285:
+  p->nlink+=1;
           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: fs/tarfs/tarent.c:289:
+                                    char **next, int *len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: fs/tarfs/tarent.c:289:
+static struct tarent *lookup_child_and_chop(struct tarent *p, char *n,
+                                    char **next, int *len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: fs/tarfs/tarent.c:289:
+                                    char **next, int *len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: fs/tarfs/tarent.c:291:
+  char *c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: fs/tarfs/tarent.c:292:
+  struct tarent *pp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: fs/tarfs/tarent.c:293:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: fs/tarfs/tarent.c:295:
+  if (p==0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1000: FILE: fs/tarfs/tarent.c:295:
+  if (p==0)
+    BUG();

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1000: FILE: fs/tarfs/tarent.c:295:
+  if (p==0)
        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: fs/tarfs/tarent.c:296:
+    BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1001: FILE: fs/tarfs/tarent.c:296:
+    BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: fs/tarfs/tarent.c:298:
+  message("tarfs: lookup_child_and_chop %p %p\n", p, n);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lookup_child_and_chop', this function's name, in a string
#1003: FILE: fs/tarfs/tarent.c:298:
+  message("tarfs: lookup_child_and_chop %p %p\n", p, n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: fs/tarfs/tarent.c:299:
+  if (n){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1004: FILE: fs/tarfs/tarent.c:299:
+  if (n){
+    message("tarfs: name = %s\n", n);

ERROR:SPACING: space required before the open brace '{'
#1004: FILE: fs/tarfs/tarent.c:299:
+  if (n){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1004: FILE: fs/tarfs/tarent.c:299:
+  if (n){
+    message("tarfs: name = %s\n", n);
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: fs/tarfs/tarent.c:300:
+    message("tarfs: name = %s\n", n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: fs/tarfs/tarent.c:301:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){
+    if (*c=='/'){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){
             ^

ERROR:SPACING: space required before the open brace '{'
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){

ERROR:SPACING: space required before the open parenthesis '('
#1009: FILE: fs/tarfs/tarent.c:304:
+  for(c=n, i=0; ; i++, c++){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: fs/tarfs/tarent.c:305:
+    if (*c=='/'){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1010: FILE: fs/tarfs/tarent.c:305:
+    if (*c=='/'){
+      *c=0;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1010: FILE: fs/tarfs/tarent.c:305:
+    if (*c=='/'){
           ^

ERROR:SPACING: space required before the open brace '{'
#1010: FILE: fs/tarfs/tarent.c:305:
+    if (*c=='/'){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: fs/tarfs/tarent.c:306:
+      *c=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1011: FILE: fs/tarfs/tarent.c:306:
+      *c=0;
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: fs/tarfs/tarent.c:307:
+      *next=c+1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1012: FILE: fs/tarfs/tarent.c:307:
+      *next=c+1;
            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1012: FILE: fs/tarfs/tarent.c:307:
+      *next=c+1;
              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: fs/tarfs/tarent.c:308:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: fs/tarfs/tarent.c:309:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: fs/tarfs/tarent.c:310:
+    if (*c=='\0'){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1015: FILE: fs/tarfs/tarent.c:310:
+    if (*c=='\0'){
+      *next=0;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1015: FILE: fs/tarfs/tarent.c:310:
+    if (*c=='\0'){
           ^

ERROR:SPACING: space required before the open brace '{'
#1015: FILE: fs/tarfs/tarent.c:310:
+    if (*c=='\0'){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: fs/tarfs/tarent.c:311:
+      *next=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1016: FILE: fs/tarfs/tarent.c:311:
+      *next=0;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: fs/tarfs/tarent.c:312:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: fs/tarfs/tarent.c:313:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: fs/tarfs/tarent.c:314:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: fs/tarfs/tarent.c:316:
+  message("tarfs: len %d\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: fs/tarfs/tarent.c:317:
+  *len=i;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1022: FILE: fs/tarfs/tarent.c:317:
+  *len=i;
       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){
+    message("pp %p\n", pp);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){
         ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){
                                ^

ERROR:SPACING: space required before the open brace '{'
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){

ERROR:SPACING: space required before the open parenthesis '('
#1024: FILE: fs/tarfs/tarent.c:319:
+  for(pp=p->children; pp!=0; pp=pp->neighbors){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: fs/tarfs/tarent.c:320:
+    message("pp %p\n", pp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: fs/tarfs/tarent.c:321:
+    if (pp==0){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1026: FILE: fs/tarfs/tarent.c:321:
+    if (pp==0){
+      message("pp==0 BUG!\n");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1026: FILE: fs/tarfs/tarent.c:321:
+    if (pp==0){
           ^

ERROR:SPACING: space required before the open brace '{'
#1026: FILE: fs/tarfs/tarent.c:321:
+    if (pp==0){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: fs/tarfs/tarent.c:322:
+      message("pp==0 BUG!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: fs/tarfs/tarent.c:323:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: fs/tarfs/tarent.c:324:
+    }else if (pp->name==0){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1029: FILE: fs/tarfs/tarent.c:324:
+    }else if (pp->name==0){
+      message("pp->name==0. BUG!\n");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1029: FILE: fs/tarfs/tarent.c:324:
+    }else if (pp->name==0){
                       ^

ERROR:SPACING: space required before the open brace '{'
#1029: FILE: fs/tarfs/tarent.c:324:
+    }else if (pp->name==0){

ERROR:SPACING: space required after that close brace '}'
#1029: FILE: fs/tarfs/tarent.c:324:
+    }else if (pp->name==0){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: fs/tarfs/tarent.c:325:
+      message("pp->name==0. BUG!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: fs/tarfs/tarent.c:326:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: fs/tarfs/tarent.c:327:
+    }else{$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1032: FILE: fs/tarfs/tarent.c:327:
+    }else{
+      message("comparing %s to %s\n", pp->name, n);

ERROR:SPACING: space required before the open brace '{'
#1032: FILE: fs/tarfs/tarent.c:327:
+    }else{

ERROR:SPACING: space required after that close brace '}'
#1032: FILE: fs/tarfs/tarent.c:327:
+    }else{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: fs/tarfs/tarent.c:328:
+      message("comparing %s to %s\n", pp->name, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: fs/tarfs/tarent.c:329:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: fs/tarfs/tarent.c:330:
+    if (!strcmp(pp->name, n)){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1035: FILE: fs/tarfs/tarent.c:330:
+    if (!strcmp(pp->name, n)){
+      message("tarfs: lookup_child_and_chop found child\n");

ERROR:SPACING: space required before the open brace '{'
#1035: FILE: fs/tarfs/tarent.c:330:
+    if (!strcmp(pp->name, n)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: fs/tarfs/tarent.c:331:
+      message("tarfs: lookup_child_and_chop found child\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lookup_child_and_chop', this function's name, in a string
#1036: FILE: fs/tarfs/tarent.c:331:
+      message("tarfs: lookup_child_and_chop found child\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: fs/tarfs/tarent.c:332:
+      return pp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: fs/tarfs/tarent.c:333:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: fs/tarfs/tarent.c:334:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: fs/tarfs/tarent.c:335:
+  message("tarfs: lookup_child_and_chop found NO child\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lookup_child_and_chop', this function's name, in a string
#1040: FILE: fs/tarfs/tarent.c:335:
+  message("tarfs: lookup_child_and_chop found NO child\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: fs/tarfs/tarent.c:336:
+  return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1045: FILE: fs/tarfs/tarent.c:340:
+                              struct tarent *p, char *n, char **next)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: fs/tarfs/tarent.c:340:
+static struct tarent *add_until_slash(struct super_block *sb,
+                              struct tarent *p, char *n, char **next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: fs/tarfs/tarent.c:340:
+                              struct tarent *p, char *n, char **next)$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1047: FILE: fs/tarfs/tarent.c:342:
+  struct tarent *te;
                  ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: fs/tarfs/tarent.c:342:
+  struct tarent *te;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: fs/tarfs/tarent.c:343:
+  int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: fs/tarfs/tarent.c:344:
+  unsigned long ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: fs/tarfs/tarent.c:346:
+  message("add_until_slash (%s)\n", n);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_until_slash', this function's name, in a string
#1051: FILE: fs/tarfs/tarent.c:346:
+  message("add_until_slash (%s)\n", n);

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1052: FILE: fs/tarfs/tarent.c:347:
+  te = lookup_child_and_chop(p, n, next, &len);
   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: fs/tarfs/tarent.c:347:
+  te = lookup_child_and_chop(p, n, next, &len);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1053: FILE: fs/tarfs/tarent.c:348:
+  if (te){
       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: fs/tarfs/tarent.c:348:
+  if (te){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1053: FILE: fs/tarfs/tarent.c:348:
+  if (te){
+    return te;

ERROR:SPACING: space required before the open brace '{'
#1053: FILE: fs/tarfs/tarent.c:348:
+  if (te){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1053: FILE: fs/tarfs/tarent.c:348:
+  if (te){
+    return te;
+  }

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1054: FILE: fs/tarfs/tarent.c:349:
+    return te;
            ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: fs/tarfs/tarent.c:349:
+    return te;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: fs/tarfs/tarent.c:350:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: fs/tarfs/tarent.c:352:
+  ino=get_new_ino(sb);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1057: FILE: fs/tarfs/tarent.c:352:
+  ino=get_new_ino(sb);
      ^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1059: FILE: fs/tarfs/tarent.c:354:
+  te = get_new_tarent(n, len, ino);
   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1059: FILE: fs/tarfs/tarent.c:354:
+  te = get_new_tarent(n, len, ino);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1060: FILE: fs/tarfs/tarent.c:355:
+  if (!te)
        ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: fs/tarfs/tarent.c:355:
+  if (!te)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1060: FILE: fs/tarfs/tarent.c:355:
+  if (!te)
+    goto err_out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: fs/tarfs/tarent.c:356:
+    goto err_out;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1063: FILE: fs/tarfs/tarent.c:358:
+  hash_tarent(sb, te, ino);
                   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: fs/tarfs/tarent.c:358:
+  hash_tarent(sb, te, ino);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1064: FILE: fs/tarfs/tarent.c:359:
+  add_to_parent(p, te);
                    ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: fs/tarfs/tarent.c:359:
+  add_to_parent(p, te);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1066: FILE: fs/tarfs/tarent.c:361:
+  return te;
          ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: fs/tarfs/tarent.c:361:
+  return te;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1069: FILE: fs/tarfs/tarent.c:364:
+  if (te)
       ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: fs/tarfs/tarent.c:364:
+  if (te)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1069: FILE: fs/tarfs/tarent.c:364:
+  if (te)
+    delete_tarent(te);

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1070: FILE: fs/tarfs/tarent.c:365:
+    delete_tarent(te);
                   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/tarfs/tarent.c:365:
+    delete_tarent(te);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/tarfs/tarent.c:366:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/tarfs/tarent.c:371:
+  for(; *n=='/'; n++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1076: FILE: fs/tarfs/tarent.c:371:
+  for(; *n=='/'; n++)
+    ;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1076: FILE: fs/tarfs/tarent.c:371:
+  for(; *n=='/'; n++)
           ^

ERROR:SPACING: space required before the open parenthesis '('
#1076: FILE: fs/tarfs/tarent.c:371:
+  for(; *n=='/'; n++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: fs/tarfs/tarent.c:372:
+    ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: fs/tarfs/tarent.c:374:
+  return n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1086: FILE: fs/tarfs/tarent.c:381:
+                                 unsigned long blk, int *fatal)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: fs/tarfs/tarent.c:381:
+static unsigned long count_header_blocks(struct super_block *sb,
+                                 unsigned long blk, int *fatal)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: fs/tarfs/tarent.c:381:
+                                 unsigned long blk, int *fatal)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: fs/tarfs/tarent.c:383:
+  struct buffer_head *bh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: fs/tarfs/tarent.c:384:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: fs/tarfs/tarent.c:385:
+  int blocks=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1090: FILE: fs/tarfs/tarent.c:385:
+  int blocks=0;
             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: fs/tarfs/tarent.c:386:
+  int typeflag, isextended;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: fs/tarfs/tarent.c:388:
+  bh = sb_bread(sb, blk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: fs/tarfs/tarent.c:389:
+  if (!bh){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1094: FILE: fs/tarfs/tarent.c:389:
+  if (!bh){
+    error("tarfs: failed to read headers\n");

ERROR:SPACING: space required before the open brace '{'
#1094: FILE: fs/tarfs/tarent.c:389:
+  if (!bh){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: fs/tarfs/tarent.c:390:
+    error("tarfs: failed to read headers\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: fs/tarfs/tarent.c:391:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: fs/tarfs/tarent.c:392:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: fs/tarfs/tarent.c:394:
+  blocks++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: fs/tarfs/tarent.c:395:
+  typeflag = ((struct posix_header *)(bh->b_data))->typeflag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: fs/tarfs/tarent.c:396:
+  brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: fs/tarfs/tarent.c:398:
+  switch(typeflag){$

ERROR:SPACING: space required before the open brace '{'
#1103: FILE: fs/tarfs/tarent.c:398:
+  switch(typeflag){

ERROR:SPACING: space required before the open parenthesis '('
#1103: FILE: fs/tarfs/tarent.c:398:
+  switch(typeflag){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: fs/tarfs/tarent.c:399:
+  case TARFS_REGTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: fs/tarfs/tarent.c:400:
+  case TARFS_AREGTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: fs/tarfs/tarent.c:401:
+  case TARFS_LNKTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: fs/tarfs/tarent.c:402:
+  case TARFS_SYMTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: fs/tarfs/tarent.c:403:
+  case TARFS_CHRTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: fs/tarfs/tarent.c:404:
+  case TARFS_BLKTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: fs/tarfs/tarent.c:405:
+  case TARFS_DIRTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: fs/tarfs/tarent.c:406:
+  case TARFS_FIFOTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: fs/tarfs/tarent.c:407:
+  case TARFS_CONTTYPE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1114: FILE: fs/tarfs/tarent.c:409:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1115: FILE: fs/tarfs/tarent.c:410:
+  case TARFS_GNU_DUMPDIR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: fs/tarfs/tarent.c:411:
+  case TARFS_GNU_LONGLINK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: fs/tarfs/tarent.c:412:
+  case TARFS_GNU_LONGNAME:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1118: FILE: fs/tarfs/tarent.c:413:
+  case TARFS_GNU_MULTIVOL:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1119: FILE: fs/tarfs/tarent.c:414:
+  case TARFS_GNU_NAMES:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1120: FILE: fs/tarfs/tarent.c:415:
+  case TARFS_GNU_SPARSE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: fs/tarfs/tarent.c:416:
+  case TARFS_GNU_VOLHDR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: fs/tarfs/tarent.c:418:
+    printk("Encountering guu extra header\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1123: FILE: fs/tarfs/tarent.c:418:
+    printk("Encountering guu extra header\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: fs/tarfs/tarent.c:419:
+    bh = sb_bread(sb, blk+1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1124: FILE: fs/tarfs/tarent.c:419:
+    bh = sb_bread(sb, blk+1);
                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: fs/tarfs/tarent.c:420:
+    if (!bh){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1125: FILE: fs/tarfs/tarent.c:420:
+    if (!bh){
+      error("tarfs: failed to read extra headers\n");

ERROR:SPACING: space required before the open brace '{'
#1125: FILE: fs/tarfs/tarent.c:420:
+    if (!bh){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: fs/tarfs/tarent.c:421:
+      error("tarfs: failed to read extra headers\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: fs/tarfs/tarent.c:422:
+      goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: fs/tarfs/tarent.c:423:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: fs/tarfs/tarent.c:424:
+    blocks++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: fs/tarfs/tarent.c:425:
+    isextended = ((struct extra_header *)(bh->b_data))->isextended;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: fs/tarfs/tarent.c:426:
+    brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: fs/tarfs/tarent.c:427:
+    if (isextended)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1132: FILE: fs/tarfs/tarent.c:427:
+    if (isextended)
+      goto out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: fs/tarfs/tarent.c:428:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: fs/tarfs/tarent.c:431:
+    printk("Encountering guu sparce header\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1136: FILE: fs/tarfs/tarent.c:431:
+    printk("Encountering guu sparce header\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){
+      bh = sb_bread(sb, blk+2+i);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){
          ^

ERROR:SPACING: space required after that ';' (ctx:OxV)
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){
             ^

ERROR:SPACING: space required before the open brace '{'
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){

ERROR:SPACING: space required before the open parenthesis '('
#1137: FILE: fs/tarfs/tarent.c:432:
+    for(i=0;;i++, blocks++){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: fs/tarfs/tarent.c:433:
+      bh = sb_bread(sb, blk+2+i);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1138: FILE: fs/tarfs/tarent.c:433:
+      bh = sb_bread(sb, blk+2+i);
                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1138: FILE: fs/tarfs/tarent.c:433:
+      bh = sb_bread(sb, blk+2+i);
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: fs/tarfs/tarent.c:434:
+      if (!bh){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 7)
#1139: FILE: fs/tarfs/tarent.c:434:
+      if (!bh){
+       error("tarfs: failed to read extra headers\n");

ERROR:SPACING: space required before the open brace '{'
#1139: FILE: fs/tarfs/tarent.c:434:
+      if (!bh){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: fs/tarfs/tarent.c:435:
+       error("tarfs: failed to read extra headers\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: fs/tarfs/tarent.c:436:
+       goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: fs/tarfs/tarent.c:437:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: fs/tarfs/tarent.c:438:
+      isextended = ((struct sparse_header *)(bh->b_data))->isextended;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: fs/tarfs/tarent.c:439:
+      brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: fs/tarfs/tarent.c:440:
+      if (isextended)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 7)
#1145: FILE: fs/tarfs/tarent.c:440:
+      if (isextended)
+       break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1146: FILE: fs/tarfs/tarent.c:441:
+       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: fs/tarfs/tarent.c:442:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: fs/tarfs/tarent.c:443:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: fs/tarfs/tarent.c:445:
+    error("tarfs: invalid or unsupported typeflag. Headers can not be$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: fs/tarfs/tarent.c:446:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: fs/tarfs/tarent.c:447:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: fs/tarfs/tarent.c:449:
+ out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: fs/tarfs/tarent.c:450:
+  message("non fatal %d\n", blocks);$

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1156: FILE: fs/tarfs/tarent.c:450:
+  message("non fatal %d\n", blocks);
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1157: FILE: fs/tarfs/tarent.c:451:
+  *fatal=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: fs/tarfs/tarent.c:452:
+  return blocks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: fs/tarfs/tarent.c:454:
+ err_out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: fs/tarfs/tarent.c:455:
+  message("fatal\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: fs/tarfs/tarent.c:456:
+  *fatal=1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: fs/tarfs/tarent.c:457:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: fs/tarfs/tarent.c:461:
+ * Add tarent$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: fs/tarfs/tarent.c:462:
+ * ph != 0, name==0 : normal use.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: fs/tarfs/tarent.c:463:
+ * ph == 0, name!=0 : just pre-assign a entry (for hardlink)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: fs/tarfs/tarent.c:464:
+ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1172: FILE: fs/tarfs/tarent.c:466:
+                         struct posix_header *ph, char *name)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: fs/tarfs/tarent.c:466:
+                         struct posix_header *ph, char *name)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: fs/tarfs/tarent.c:468:
+  char *n=0;$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1175: FILE: fs/tarfs/tarent.c:469:
+  struct tarent *te=0;
                  ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: fs/tarfs/tarent.c:469:
+  struct tarent *te=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: fs/tarfs/tarent.c:470:
+  struct tarent *parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: fs/tarfs/tarent.c:472:
+  /* lookup_tarent can not be used here */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: fs/tarfs/tarent.c:473:
+  parent = TARSB(sb)->root_tarent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: fs/tarfs/tarent.c:475:
+  n = (name ? name : ph->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: fs/tarfs/tarent.c:477:
+  message("Adding tarentry [%s]\n", ph->name);$

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1183: FILE: fs/tarfs/tarent.c:477:
+  message("Adding tarentry [%s]\n", ph->name);

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1183: FILE: fs/tarfs/tarent.c:477:
+  message("Adding tarentry [%s]\n", ph->name);
                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Adding>
#1183: FILE: fs/tarfs/tarent.c:477:
+  message("Adding tarentry [%s]\n", ph->name);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: fs/tarfs/tarent.c:479:
+  for(;;){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: fs/tarfs/tarent.c:480:
+    if (n==0){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: fs/tarfs/tarent.c:481:
+      message("tarfs: no more components(1).\n");$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1187: FILE: fs/tarfs/tarent.c:481:
+      message("tarfs: no more components(1).\n");
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: fs/tarfs/tarent.c:482:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: fs/tarfs/tarent.c:483:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: fs/tarfs/tarent.c:485:
+    n = skip_slash(n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: fs/tarfs/tarent.c:486:
+    if (*n=='\0'){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: fs/tarfs/tarent.c:487:
+      message("tarfs: no more components(2).\n");$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1193: FILE: fs/tarfs/tarent.c:487:
+      message("tarfs: no more components(2).\n");
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1194: FILE: fs/tarfs/tarent.c:488:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: fs/tarfs/tarent.c:489:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: fs/tarfs/tarent.c:490:
+    if ( *n=='.' && (*(n+1)=='/' || *(n+1)=='\0') ){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: fs/tarfs/tarent.c:491:
+      message("tarfs: skipping dot\n");$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1197: FILE: fs/tarfs/tarent.c:491:
+      message("tarfs: skipping dot\n");
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: fs/tarfs/tarent.c:492:
+      n++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: fs/tarfs/tarent.c:493:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: fs/tarfs/tarent.c:494:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: fs/tarfs/tarent.c:495:
+    if ( *n=='.' && *(n+1)=='.' && (*(n+2)=='/' || *(n+2)=='\0') ){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: fs/tarfs/tarent.c:496:
+      n+=2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: fs/tarfs/tarent.c:497:
+      if (parent==TARSB(sb)->root_tarent){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: fs/tarfs/tarent.c:498:
+       message("tarfs: Oops going higher than root, ignored.\n");$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1204: FILE: fs/tarfs/tarent.c:498:
+       message("tarfs: Oops going higher than root, ignored.\n");
                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Oops>
#1204: FILE: fs/tarfs/tarent.c:498:
+       message("tarfs: Oops going higher than root, ignored.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: fs/tarfs/tarent.c:500:
+       /* Drop this entry */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: fs/tarfs/tarent.c:501:
+       goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: fs/tarfs/tarent.c:502:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: fs/tarfs/tarent.c:503:
+      parent=parent->parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: fs/tarfs/tarent.c:505:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: fs/tarfs/tarent.c:506:
+    }$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1214: FILE: fs/tarfs/tarent.c:508:
+    te=add_until_slash(sb, parent, n, &n);
     ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: fs/tarfs/tarent.c:508:
+    te=add_until_slash(sb, parent, n, &n);$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1215: FILE: fs/tarfs/tarent.c:509:
+    parent = te;
              ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: fs/tarfs/tarent.c:509:
+    parent = te;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: fs/tarfs/tarent.c:510:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: fs/tarfs/tarent.c:512:
+ out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: fs/tarfs/tarent.c:513:
+  if (ph)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: fs/tarfs/tarent.c:514:
+    set_tarent(sb, ph, parent, blk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1222: FILE: fs/tarfs/tarent.c:516:
+ err_out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: fs/tarfs/tarent.c:517:
+  return parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: fs/tarfs/tarent.c:521:
+ * Deleet all tarents and hash.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: fs/tarfs/tarent.c:522:
+ */$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1231: FILE: fs/tarfs/tarent.c:525:
+  struct tarent *te, **tp;
                  ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: fs/tarfs/tarent.c:525:
+  struct tarent *te, **tp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: fs/tarfs/tarent.c:526:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: fs/tarfs/tarent.c:528:
+  if ( (tp=TARSB(sb)->ihash)==0 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: fs/tarfs/tarent.c:529:
+    return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: fs/tarfs/tarent.c:531:
+  for(i=0; i<TARENT_HASHSIZE; i++){$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1238: FILE: fs/tarfs/tarent.c:532:
+    for(te=*(tp+i); te!=0; te=NEXT_HASH(te))
         ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1238: FILE: fs/tarfs/tarent.c:532:
+    for(te=*(tp+i); te!=0; te=NEXT_HASH(te))
                     ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1238: FILE: fs/tarfs/tarent.c:532:
+    for(te=*(tp+i); te!=0; te=NEXT_HASH(te))
                            ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1238: FILE: fs/tarfs/tarent.c:532:
+    for(te=*(tp+i); te!=0; te=NEXT_HASH(te))
                                         ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: fs/tarfs/tarent.c:532:
+    for(te=*(tp+i); te!=0; te=NEXT_HASH(te))$

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1239: FILE: fs/tarfs/tarent.c:533:
+      delete_tarent(te);
                     ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: fs/tarfs/tarent.c:533:
+      delete_tarent(te);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: fs/tarfs/tarent.c:534:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: fs/tarfs/tarent.c:535:
+  kfree(TARSB(sb)->ihash);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: fs/tarfs/tarent.c:539:
+ * Parse tar archive and gather necessary information$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: fs/tarfs/tarent.c:540:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: fs/tarfs/tarent.c:543:
+  struct buffer_head *bh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: fs/tarfs/tarent.c:544:
+  struct tarent **tent=0, *root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: fs/tarfs/tarent.c:545:
+  int tarblk, fatal;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: fs/tarfs/tarent.c:546:
+  struct posix_header *ph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: fs/tarfs/tarent.c:547:
+  //dev_t dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: fs/tarfs/tarent.c:548:
+  unsigned long size, headers;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: fs/tarfs/tarent.c:550:
+  //dev = sb->s_dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));
                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));
                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#1257: FILE: fs/tarfs/tarent.c:551:
+  //printk("tarfs: parse start (%d,%d)\n", MAJOR(dev), MINOR(dev));
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: fs/tarfs/tarent.c:553:
+  /* create dummy root */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: fs/tarfs/tarent.c:554:
+  root=get_new_tarent("root", 4, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: fs/tarfs/tarent.c:555:
+  if (!root)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: fs/tarfs/tarent.c:556:
+    goto err_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1263: FILE: fs/tarfs/tarent.c:557:
+  hash_tarent(sb, root, get_new_ino(sb) /* 2 */);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: fs/tarfs/tarent.c:558:
+  root->mode=S_IFDIR|0777;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: fs/tarfs/tarent.c:559:
+  TARSB(sb)->root_tarent=root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: fs/tarfs/tarent.c:561:
+  tarblk=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: fs/tarfs/tarent.c:562:
+  for(;;){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: fs/tarfs/tarent.c:563:
+    bh = sb_bread(sb, tarblk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: fs/tarfs/tarent.c:564:
+    if (!bh){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1271: FILE: fs/tarfs/tarent.c:565:
+      /* XXX: disk error or end-of-device */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: fs/tarfs/tarent.c:566:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: fs/tarfs/tarent.c:567:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: fs/tarfs/tarent.c:569:
+    ph = (struct posix_header*)((char *)bh->b_data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: fs/tarfs/tarent.c:570:
+    if (ph->name[0] == '\0'){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: fs/tarfs/tarent.c:571:
+      brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: fs/tarfs/tarent.c:572:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: fs/tarfs/tarent.c:573:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1281: FILE: fs/tarfs/tarent.c:575:
+    /* Skip headers */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1282: FILE: fs/tarfs/tarent.c:576:
+    headers=count_header_blocks(sb, tarblk, &fatal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: fs/tarfs/tarent.c:577:
+    if (fatal){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: fs/tarfs/tarent.c:578:
+      error("Encountering unsupported typeflag blk %d, abort parsing\n",$

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1284: FILE: fs/tarfs/tarent.c:578:
+      error("Encountering unsupported typeflag blk %d, abort parsing\n",
                                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Encountering>
#1284: FILE: fs/tarfs/tarent.c:578:
+      error("Encountering unsupported typeflag blk %d, abort parsing\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1285: FILE: fs/tarfs/tarent.c:579:
+           tarblk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: fs/tarfs/tarent.c:579:
+           tarblk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: fs/tarfs/tarent.c:580:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1287: FILE: fs/tarfs/tarent.c:581:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1289: FILE: fs/tarfs/tarent.c:583:
+    tarblk+=headers;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1290: FILE: fs/tarfs/tarent.c:584:
+    add_tarent(sb, tarblk, ph, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1292: FILE: fs/tarfs/tarent.c:586:
+    /* Skip contents of the file */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1293: FILE: fs/tarfs/tarent.c:587:
+    size=getval8(ph->size, sizeof(ph->size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: fs/tarfs/tarent.c:588:
+    tarblk += (size+TAR_BLOCKSIZE-1)/TAR_BLOCKSIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1296: FILE: fs/tarfs/tarent.c:590:
+    brelse(bh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1297: FILE: fs/tarfs/tarent.c:591:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1299: FILE: fs/tarfs/tarent.c:593:
+  printk("tarfs: parse done (%ld inodes created)\n",$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1299: FILE: fs/tarfs/tarent.c:593:
+  printk("tarfs: parse done (%ld inodes created)\n",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1299: FILE: fs/tarfs/tarent.c:593:
+  printk("tarfs: parse done (%ld inodes created)\n",
                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1299: FILE: fs/tarfs/tarent.c:593:
+  printk("tarfs: parse done (%ld inodes created)\n",
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: fs/tarfs/tarent.c:594:
+        TARSB(sb)->s_maxino-2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: fs/tarfs/tarent.c:594:
+        TARSB(sb)->s_maxino-2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: fs/tarfs/tarent.c:596:
+  /* XXX: Poor statistics info  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1303: FILE: fs/tarfs/tarent.c:597:
+  TARSB(sb)->s_files = TARSB(sb)->s_maxino-2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1304: FILE: fs/tarfs/tarent.c:598:
+  TARSB(sb)->s_blocks = tarblk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: fs/tarfs/tarent.c:600:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: fs/tarfs/tarent.c:602:
+ err_out:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: fs/tarfs/tarent.c:603:
+  if (tent)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: fs/tarfs/tarent.c:604:
+    *tent = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: fs/tarfs/tarent.c:605:
+  if (root)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: fs/tarfs/tarent.c:606:
+    delete_tarent(root);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: fs/tarfs/tarent.c:607:
+  return -1;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1321: FILE: fs/tarfs/tarfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1335: FILE: fs/tarfs/tarfs.h:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1336: FILE: fs/tarfs/tarfs.h:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1338: FILE: fs/tarfs/tarfs.h:18:
+ * Version: $Id: tarfs.h,v 1.13 2001/02/25 21:39:03 kaz Exp $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1352: FILE: fs/tarfs/tarfs.h:32:
+#define message if (tarfs_debug) printk

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)0x7fffffff' could be '0x7fffffffUL'
#1361: FILE: fs/tarfs/tarfs.h:41:
+#define TARFS_MAX_SIZE ((unsigned long)0x7fffffff)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1364: FILE: fs/tarfs/tarfs.h:44:
+#define TARENT(inode)  ((struct tarent*)((inode)->u.generic_ip))

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1368: FILE: fs/tarfs/tarfs.h:48:
+struct tarent
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1370: FILE: fs/tarfs/tarfs.h:50:
+  umode_t mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: fs/tarfs/tarfs.h:51:
+  uid_t uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: fs/tarfs/tarfs.h:52:
+  gid_t gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: fs/tarfs/tarfs.h:53:
+  loff_t size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: fs/tarfs/tarfs.h:54:
+  nlink_t nlink;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1375: FILE: fs/tarfs/tarfs.h:55:
+  time_t atime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1376: FILE: fs/tarfs/tarfs.h:56:
+  time_t ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1377: FILE: fs/tarfs/tarfs.h:57:
+  time_t mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: fs/tarfs/tarfs.h:60:
+  unsigned long pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: fs/tarfs/tarfs.h:63:
+  char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: fs/tarfs/tarfs.h:66:
+  char *linkname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1389: FILE: fs/tarfs/tarfs.h:69:
+  int ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: fs/tarfs/tarfs.h:72:
+  struct tarent *parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: fs/tarfs/tarfs.h:73:
+  struct tarent *children;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: fs/tarfs/tarfs.h:74:
+  struct tarent *neighbors;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: fs/tarfs/tarfs.h:77:
+  struct tarent *next_hash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: fs/tarfs/tarfs.h:80:
+  struct tarent *hardlinked;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1409: FILE: fs/tarfs/tarfs.h:89:
+  int parsed;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: fs/tarfs/tarfs.h:92:
+  struct tarent *root_tarent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: fs/tarfs/tarfs.h:95:
+  struct tarent **ihash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1418: FILE: fs/tarfs/tarfs.h:98:
+  unsigned long s_files;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1419: FILE: fs/tarfs/tarfs.h:99:
+  unsigned long s_blocks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1422: FILE: fs/tarfs/tarfs.h:102:
+  unsigned long s_maxino;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1425: FILE: fs/tarfs/tarfs.h:105:
+#define TARSB(sb)  ((struct tarfs_sb_info*)((sb)->s_fs_info))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1429: FILE: fs/tarfs/tarfs.h:109:
+extern struct inode_operations tarfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1430: FILE: fs/tarfs/tarfs.h:110:
+extern struct inode_operations tarfs_file_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1431: FILE: fs/tarfs/tarfs.h:111:
+extern struct file_operations tarfs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1432: FILE: fs/tarfs/tarfs.h:112:
+extern struct file_operations tarfs_dir_operations;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1436: FILE: fs/tarfs/tarfs.h:116:
+                  char * buf, size_t count, loff_t *ppos);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1436: FILE: fs/tarfs/tarfs.h:116:
+ssize_t tarfs_read(struct inode *inode,
+                  char * buf, size_t count, loff_t *ppos);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1436: FILE: fs/tarfs/tarfs.h:116:
+                  char * buf, size_t count, loff_t *ppos);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1436: FILE: fs/tarfs/tarfs.h:116:
+                  char * buf, size_t count, loff_t *ppos);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1445: FILE: fs/tarfs/tarinf.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1459: FILE: fs/tarfs/tarinf.h:15:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1460: FILE: fs/tarfs/tarinf.h:16:
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1462: FILE: fs/tarfs/tarinf.h:18:
+ * Version: $Id: tarinf.h,v 1.3 2001/02/25 21:39:03 kaz Exp $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1500: FILE: fs/tarfs/tarinf.h:56:
+struct posix_header
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1501: FILE: fs/tarfs/tarinf.h:57:
+  char name[100];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1502: FILE: fs/tarfs/tarinf.h:58:
+  char mode[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1503: FILE: fs/tarfs/tarinf.h:59:
+  char uid[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1504: FILE: fs/tarfs/tarinf.h:60:
+  char gid[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1505: FILE: fs/tarfs/tarinf.h:61:
+  char size[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1506: FILE: fs/tarfs/tarinf.h:62:
+  char mtime[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1507: FILE: fs/tarfs/tarinf.h:63:
+  char chksum[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1508: FILE: fs/tarfs/tarinf.h:64:
+  char typeflag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1509: FILE: fs/tarfs/tarinf.h:65:
+  char linkname[100];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1510: FILE: fs/tarfs/tarinf.h:66:
+  char magic[6];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1511: FILE: fs/tarfs/tarinf.h:67:
+  char version[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1512: FILE: fs/tarfs/tarinf.h:68:
+  char uname[32];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1513: FILE: fs/tarfs/tarinf.h:69:
+  char gname[32];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1514: FILE: fs/tarfs/tarinf.h:70:
+  char devmajor[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1515: FILE: fs/tarfs/tarinf.h:71:
+  char devminor[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1516: FILE: fs/tarfs/tarinf.h:72:
+  char prefix[155];$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1524: FILE: fs/tarfs/tarinf.h:80:
+struct sparse
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1525: FILE: fs/tarfs/tarinf.h:81:
+  char offset[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: fs/tarfs/tarinf.h:82:
+  char numbytes[12];$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1531: FILE: fs/tarfs/tarinf.h:87:
+struct extra_header
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: fs/tarfs/tarinf.h:88:
+  char atime[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: fs/tarfs/tarinf.h:89:
+  char ctime[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: fs/tarfs/tarinf.h:90:
+  char offset[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1535: FILE: fs/tarfs/tarinf.h:91:
+  char realsize[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1536: FILE: fs/tarfs/tarinf.h:92:
+  char longnames[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1537: FILE: fs/tarfs/tarinf.h:93:
+  char unused_pad1[68];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1538: FILE: fs/tarfs/tarinf.h:94:
+  struct sparse sp[SPARSES_IN_EXTRA_HEADER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1539: FILE: fs/tarfs/tarinf.h:95:
+  char isextended;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1543: FILE: fs/tarfs/tarinf.h:99:
+struct sparse_header
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1544: FILE: fs/tarfs/tarinf.h:100:
+  struct sparse sp[SPARSES_IN_SPARSE_HEADER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1545: FILE: fs/tarfs/tarinf.h:101:
+  char isextended;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1549: FILE: fs/tarfs/tarinf.h:105:
+struct oldgnu_header
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1550: FILE: fs/tarfs/tarinf.h:106:
+  char unused_pad1[345];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1551: FILE: fs/tarfs/tarinf.h:107:
+  char atime[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1552: FILE: fs/tarfs/tarinf.h:108:
+  char ctime[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1553: FILE: fs/tarfs/tarinf.h:109:
+  char offset[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: fs/tarfs/tarinf.h:110:
+  char longnames[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1555: FILE: fs/tarfs/tarinf.h:111:
+  char unused_pad2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1556: FILE: fs/tarfs/tarinf.h:112:
+  struct sparse sp[SPARSES_IN_OLDGNU_HEADER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1557: FILE: fs/tarfs/tarinf.h:113:
+  char isextended;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1558: FILE: fs/tarfs/tarinf.h:114:
+  char realsize[12];$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233146.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 225 errors, 864 warnings, 52 checks, 1449 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233146.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
