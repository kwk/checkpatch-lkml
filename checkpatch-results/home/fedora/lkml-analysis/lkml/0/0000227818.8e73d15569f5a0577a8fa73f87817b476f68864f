WARNING:TYPO_SPELLING: 'calles' may be misspelled - perhaps 'calls'?
#33: 
 (1) There is a new console driver calles "stderr" which (as the name
                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'registeres' may be misspelled - perhaps 'registers'?
#74: 
because it registeres very early in the boot process.  But as it isn't
           ^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#124: FILE: arch/um/Kconfig_char:4:
+config STDERR_CONSOLE
+	bool "stderr console"
+	default y
+	help
+	console driver which dumps all printk messages to stderr.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chan->ops->write == NULL'
#208: FILE: arch/um/drivers/chan_kern.c:248:
+		if (!chan->output || (chan->ops->write == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->ops->write"
#208: FILE: arch/um/drivers/chan_kern.c:248:
+		if (!chan->output || (chan->ops->write == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open brace '{'
#215: FILE: arch/um/drivers/chan_kern.c:253:
+			if ((ret == -EAGAIN) || ((ret >= 0) && (ret < len))){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret >= 0'
#215: FILE: arch/um/drivers/chan_kern.c:253:
+			if ((ret == -EAGAIN) || ((ret >= 0) && (ret < len))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret < len'
#215: FILE: arch/um/drivers/chan_kern.c:253:
+			if ((ret == -EAGAIN) || ((ret >= 0) && (ret < len))){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: arch/um/drivers/chan_kern.c:259:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#236: FILE: arch/um/drivers/chan_kern.c:284:
+	if (0 != parse_chan_pair(line->init_str, &line->chan_list,

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#239: FILE: arch/um/drivers/chan_kern.c:287:
+	if (0 != open_chan(&line->chan_list))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#241: FILE: arch/um/drivers/chan_kern.c:289:
+	printk("Console initialized on /dev/%s%d\n",co->name,co->index);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: arch/um/drivers/chan_kern.c:289:
+	printk("Console initialized on /dev/%s%d\n",co->name,co->index);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: arch/um/drivers/chan_kern.c:289:
+	printk("Console initialized on /dev/%s%d\n",co->name,co->index);
 	                                                    ^

ERROR:SPACING: space required before the open brace '{'
#294: FILE: arch/um/drivers/chan_user.c:158:
+			     tty) && (pid == -1)){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: arch/um/drivers/line.c:29:
+^Iif (line) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: arch/um/drivers/line.c:38:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->buffer"
#346: FILE: arch/um/drivers/line.c:46:
+	if (dev->buffer == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->buffer"
#363: FILE: arch/um/drivers/line.c:61:
+		if (line->buffer == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line->buffer == NULL'
#372: FILE: arch/um/drivers/line.c:91:
+	if ((line->buffer == NULL) || (line->head == line->tail))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line->head == line->tail'
#372: FILE: arch/um/drivers/line.c:91:
+	if ((line->buffer == NULL) || (line->head == line->tail))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->buffer"
#372: FILE: arch/um/drivers/line.c:91:
+	if ((line->buffer == NULL) || (line->head == line->tail))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#429: FILE: arch/um/drivers/line.c:157:
+void line_set_termios(struct tty_struct *tty, struct termios * old)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: arch/um/drivers/line.c:174:
+        { TCSETS,      NULL,       "TCSETS"      },$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: arch/um/drivers/line.c:174:
+        { TCSETS,      NULL,       "TCSETS"      },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: arch/um/drivers/line.c:175:
+        { TCSETSW,     NULL,       "TCSETSW"     },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/um/drivers/line.c:175:
+        { TCSETSW,     NULL,       "TCSETSW"     },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: arch/um/drivers/line.c:176:
+        { TCFLSH,      NULL,       "TCFLSH"      },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: arch/um/drivers/line.c:176:
+        { TCFLSH,      NULL,       "TCFLSH"      },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: arch/um/drivers/line.c:177:
+        { TCSBRK,      NULL,       "TCSBRK"      },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/um/drivers/line.c:177:
+        { TCSBRK,      NULL,       "TCSBRK"      },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: arch/um/drivers/line.c:180:
+        { TCSETSF,     KERN_DEBUG, "TCSETSF"     },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: arch/um/drivers/line.c:180:
+        { TCSETSF,     KERN_DEBUG, "TCSETSF"     },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: arch/um/drivers/line.c:181:
+        { TCGETA,      KERN_DEBUG, "TCGETA"      },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: arch/um/drivers/line.c:181:
+        { TCGETA,      KERN_DEBUG, "TCGETA"      },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: arch/um/drivers/line.c:182:
+        { TIOCMGET,    KERN_DEBUG, "TIOCMGET"    },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: arch/um/drivers/line.c:182:
+        { TIOCMGET,    KERN_DEBUG, "TIOCMGET"    },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: arch/um/drivers/line.c:183:
+        { TCSBRKP,     KERN_DEBUG, "TCSBRKP"     },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: arch/um/drivers/line.c:183:
+        { TCSBRKP,     KERN_DEBUG, "TCSBRKP"     },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: arch/um/drivers/line.c:184:
+        { TIOCMSET,    KERN_DEBUG, "TIOCMSET"    },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: arch/um/drivers/line.c:184:
+        { TIOCMSET,    KERN_DEBUG, "TIOCMSET"    },$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: arch/um/drivers/line.c:193:
+int line_ioctl(struct tty_struct *tty, struct file * file,

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: arch/um/drivers/line.c:200:
+	switch(cmd) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#473: FILE: arch/um/drivers/line.c:201:
+#if 0

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#483: FILE: arch/um/drivers/line.c:211:
+			if (NULL != tty_ioctls[i].level)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: arch/um/drivers/line.c:212:
+				printk("%s%s: %s: ioctl %s called\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#485: FILE: arch/um/drivers/line.c:213:
+				       tty_ioctls[i].level, __FUNCTION__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#488: FILE: arch/um/drivers/line.c:216:
+			printk(KERN_ERR "%s: %s: unknown ioctl: 0x%x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#489: FILE: arch/um/drivers/line.c:217:
+			       __FUNCTION__, tty->name, cmd);

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: arch/um/drivers/line.c:279:
+	if(!line->have_irq)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: arch/um/drivers/line.c:329:
+^Ichan_window_size(&line->chan_list, &tty->winsize.ws_row, $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#637: FILE: arch/um/drivers/line.c:338:
+void line_close(struct tty_struct *tty, struct file * filp)
                                                       ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: arch/um/drivers/line.c:338:
+void line_close(struct tty_struct *tty, struct file * filp)

ERROR:SPACING: space required before the open brace '{'
#673: FILE: arch/um/drivers/line.c:380:
+	else if (n >= 0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#673: FILE: arch/um/drivers/line.c:380:
 	}
+	else if (n >= 0){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#679: FILE: arch/um/drivers/line.c:385:
+		if (lines[n].init_pri <= INIT_ONE){

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#697: FILE: arch/um/drivers/line.c:473:
+	if (0 == room)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#698: FILE: arch/um/drivers/line.c:474:
+		printk(KERN_DEBUG "%s: %s: no room left in buffer\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#699: FILE: arch/um/drivers/line.c:475:
+		       __FUNCTION__,tty->name);
 		                   ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#699: FILE: arch/um/drivers/line.c:475:
+		       __FUNCTION__,tty->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#711: FILE: arch/um/drivers/line.c:503:
+		printk("%s: can't register %s driver\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: arch/um/drivers/line.c:504:
+		       __FUNCTION__,line_driver->name);
 		                   ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#712: FILE: arch/um/drivers/line.c:504:
+		       __FUNCTION__,line_driver->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tty"
#744: FILE: arch/um/drivers/line.c:573:
+	if (tty != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: arch/um/drivers/line.c:574:
+^I^Ichan_window_size(&line->chan_list, $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!winch"
#761: FILE: arch/um/drivers/line.c:594:
+	if (winch == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#770: FILE: arch/um/drivers/line.c:602:
+^I^I^I^I   .tty ^I= tty });$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#805: FILE: arch/um/drivers/ssl.c:57:
+^I.device_name ^I^I= "ttyS",$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#838: FILE: arch/um/drivers/ssl.c:109:
+#if 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#900: FILE: arch/um/drivers/ssl.c:147:
+^I.close ^I ^I^I= line_close,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#901: FILE: arch/um/drivers/ssl.c:148:
+^I.write ^I ^I^I= line_write,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#902: FILE: arch/um/drivers/ssl.c:149:
+^I.put_char ^I^I= line_put_char,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#904: FILE: arch/um/drivers/ssl.c:151:
+^I.chars_in_buffer ^I= line_chars_in_buffer,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#905: FILE: arch/um/drivers/ssl.c:152:
+^I.set_termios ^I^I= line_set_termios,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: arch/um/drivers/ssl.c:153:
+^I.ioctl ^I ^I^I= line_ioctl,$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#907: FILE: arch/um/drivers/ssl.c:154:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#945: FILE: arch/um/drivers/ssl.c:190:
+	return console_open_chan(line,co,&opts);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#945: FILE: arch/um/drivers/ssl.c:190:
+	return console_open_chan(line,co,&opts);
 	                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#945: FILE: arch/um/drivers/ssl.c:190:
+	return console_open_chan(line,co,&opts);
 	                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_title"
#977: FILE: arch/um/drivers/ssl.c:214:
+	if (new_title != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: arch/um/drivers/ssl.c:227:
+^Iclose_lines(serial_lines, $

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(serial_lines)
#993: FILE: arch/um/drivers/ssl.c:228:
+		    sizeof(serial_lines)/sizeof(serial_lines[0]));

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#993: FILE: arch/um/drivers/ssl.c:228:
+		    sizeof(serial_lines)/sizeof(serial_lines[0]));
 		                        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#995: FILE: arch/um/drivers/ssl.c:230:
+}
+__uml_exitcall(ssl_exit);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1021: FILE: arch/um/drivers/stderr_console.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'registeres' may be misspelled - perhaps 'registers'?
#1030: FILE: arch/um/drivers/stderr_console.c:10:
+ * Don't register by default -- as this registeres very early in the
                                         ^^^^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1036: FILE: arch/um/drivers/stderr_console.c:16:
+static int use_stderr_console = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: arch/um/drivers/stderr_console.c:18:
+static void stderr_console_write(struct console *console, const char *string, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1039: FILE: arch/um/drivers/stderr_console.c:19:
+				 unsigned len)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1062: FILE: arch/um/drivers/stderr_console.c:42:
+	use_stderr_console = simple_strtoul(str,&str,0);
 	                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1062: FILE: arch/um/drivers/stderr_console.c:42:
+	use_stderr_console = simple_strtoul(str,&str,0);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1062: FILE: arch/um/drivers/stderr_console.c:42:
+	use_stderr_console = simple_strtoul(str,&str,0);
 	                                            ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1062: FILE: arch/um/drivers/stderr_console.c:42:
+	use_stderr_console = simple_strtoul(str,&str,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1065: FILE: arch/um/drivers/stderr_console.c:45:
+__setup("stderr=", stderr_setup);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1154: FILE: arch/um/drivers/stdio_console.c:117:
+^I.close ^I ^I^I= line_close,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1155: FILE: arch/um/drivers/stdio_console.c:118:
+^I.write ^I ^I^I= line_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1156: FILE: arch/um/drivers/stdio_console.c:119:
+ ^I.write_room^I^I= line_write_room,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1156: FILE: arch/um/drivers/stdio_console.c:119:
+ ^I.write_room^I^I= line_write_room,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: arch/um/drivers/stdio_console.c:119:
+ ^I.write_room^I^I= line_write_room,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1157: FILE: arch/um/drivers/stdio_console.c:120:
+^I.chars_in_buffer ^I= line_chars_in_buffer,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1158: FILE: arch/um/drivers/stdio_console.c:121:
+^I.set_termios ^I^I= line_set_termios,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1159: FILE: arch/um/drivers/stdio_console.c:122:
+^I.ioctl ^I ^I^I= line_ioctl,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1206: FILE: arch/um/drivers/stdio_console.c:145:
+	return console_open_chan(line,co,&opts);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1206: FILE: arch/um/drivers/stdio_console.c:145:
+	return console_open_chan(line,co,&opts);
 	                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1206: FILE: arch/um/drivers/stdio_console.c:145:
+	return console_open_chan(line,co,&opts);
 	                                 ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1235: FILE: arch/um/drivers/stdio_console.c:165:
+	if (NULL == console_driver)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1237: FILE: arch/um/drivers/stdio_console.c:167:
+	printk(KERN_INFO "Initialized stdio console driver\n");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#1239: FILE: arch/um/drivers/stdio_console.c:169:
+	lines_init(vts, sizeof(vts)/sizeof(vts[0]));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1239: FILE: arch/um/drivers/stdio_console.c:169:
+	lines_init(vts, sizeof(vts)/sizeof(vts[0]));
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#1242: FILE: arch/um/drivers/stdio_console.c:172:
+	if(new_title != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_title"
#1242: FILE: arch/um/drivers/stdio_console.c:172:
+	if(new_title != NULL)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#1256: FILE: arch/um/drivers/stdio_console.c:185:
+	close_lines(vts, sizeof(vts)/sizeof(vts[0]));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1256: FILE: arch/um/drivers/stdio_console.c:185:
+	close_lines(vts, sizeof(vts)/sizeof(vts[0]));
 	                            ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1258: FILE: arch/um/drivers/stdio_console.c:187:
+}
+__uml_exitcall(console_exit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1322: FILE: arch/um/include/chan_kern.h:37:
+extern int console_open_chan(struct line *line, struct console *co,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1327: FILE: arch/um/include/chan_kern.h:40:
+extern void chan_enable_winch(struct list_head *chans, struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1328: FILE: arch/um/include/chan_kern.h:41:
+extern void enable_chan(struct list_head *chans, struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1343: FILE: arch/um/include/chan_user.h:46:
+extern void register_winch(int fd,  struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1344: FILE: arch/um/include/chan_user.h:47:
+extern void register_winch_irq(int fd, int tty_fd, int pid, struct tty_struct *tty);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1374: FILE: arch/um/include/line.h:69:
+extern void line_close(struct tty_struct *tty, struct file * filp);
                                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1374: FILE: arch/um/include/line.h:69:
+extern void line_close(struct tty_struct *tty, struct file * filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: arch/um/include/line.h:69:
+extern void line_close(struct tty_struct *tty, struct file * filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1380: FILE: arch/um/include/line.h:74:
+extern int line_write(struct tty_struct *tty, const unsigned char *buf, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: arch/um/include/line.h:75:
+extern void line_put_char(struct tty_struct *tty, unsigned char ch);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1382: FILE: arch/um/include/line.h:76:
+extern void line_set_termios(struct tty_struct *tty, struct termios * old);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1382: FILE: arch/um/include/line.h:76:
+extern void line_set_termios(struct tty_struct *tty, struct termios * old);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1383: FILE: arch/um/include/line.h:77:
+extern int line_chars_in_buffer(struct tty_struct *tty);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1385: FILE: arch/um/include/line.h:79:
+extern int line_ioctl(struct tty_struct *tty, struct file * file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1385: FILE: arch/um/include/line.h:79:
+extern int line_ioctl(struct tty_struct *tty, struct file * file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1389: FILE: arch/um/include/line.h:82:
+extern int line_setup_irq(int fd, int input, int output, struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1392: FILE: arch/um/include/line.h:84:
+extern void line_disable(struct tty_struct *tty, int current_irq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227818.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 54 warnings, 32 checks, 1177 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227818.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
