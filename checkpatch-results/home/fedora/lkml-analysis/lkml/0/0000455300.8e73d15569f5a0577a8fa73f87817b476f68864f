WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
- Savlage s390 xpram code from kernel version dependant compilation disease.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#31: 
- Savlage s390 xpram code from kernel version dependant compilation disease.
                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#165: FILE: drivers/block/floppy.c:636:
+static void (*do_floppy)(void) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: drivers/block/floppy.c:1879:
+		printk("do_floppy=%p\n", do_floppy);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: drivers/cdrom/gscd.c:295:
+		printk("GSCD: bad cmd %p\n", CURRENT->cmd);

WARNING:TYPO_SPELLING: 'reson' may be misspelled - perhaps 'reason'?
#402: FILE: drivers/cdrom/sbpcd.c:349:
+ * I have presumably found the reson for the above - there was a bogous
                                ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#565: FILE: drivers/cdrom/sbpcd.c:4832:
+static void do_sbpcd_request(request_queue_t * q)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: drivers/cdrom/sbpcd.c:5841:
+		sprintf (nbuff, "c0t%d/cd", D_S[j].drv_id);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#731: FILE: drivers/cdrom/sbpcd.c:5848:
+			printk(" sbpcd: Unable to register with Uniform CD-ROm driver\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#871: FILE: drivers/ide/hd.c:118:
+#define SET_HANDLER(x) \
 if ((DEVICE_INTR = (x)) != NULL) \
 	SET_TIMER; \
 else \
+	del_timer(&device_timer);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#871: FILE: drivers/ide/hd.c:118:
+#define SET_HANDLER(x) \
 if ((DEVICE_INTR = (x)) != NULL) \
 	SET_TIMER; \
 else \
+	del_timer(&device_timer);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#915: FILE: drivers/s390/block/xpram.c:62:
+char kernel_version [] = UTS_RELEASE;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space prohibited after that open parenthesis '('
#1071: FILE: drivers/s390/block/xpram.c:812:
+	if ( devs != -EINVAL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1071: FILE: drivers/s390/block/xpram.c:812:
+	if ( devs != -EINVAL )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1072: FILE: drivers/s390/block/xpram.c:813:
+		if ( xpram_read_size_list_tail(&str,devs,sizes) < 0 ) {
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1072: FILE: drivers/s390/block/xpram.c:813:
+		if ( xpram_read_size_list_tail(&str,devs,sizes) < 0 ) {
 		                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1072: FILE: drivers/s390/block/xpram.c:813:
+		if ( xpram_read_size_list_tail(&str,devs,sizes) < 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1072: FILE: drivers/s390/block/xpram.c:813:
+		if ( xpram_read_size_list_tail(&str,devs,sizes) < 0 ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1072: FILE: drivers/s390/block/xpram.c:813:
+		if ( xpram_read_size_list_tail(&str,devs,sizes) < 0 ) {
[...]
-#endif /* V24 */
[...]
-#if (XPRAM_VERSION == 24)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1085: FILE: drivers/s390/block/xpram.c:817:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1305: FILE: include/linux/blk.h:289:
+#  define CLEAR_INTR DEVICE_INTR = NULL

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 8 warnings, 1 checks, 1116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
