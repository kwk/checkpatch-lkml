WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/asm-alpha/bug.h:1:
+#ifndef _ALPHA_BUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#71: FILE: include/asm-alpha/bug.h:7:
+/* ??? Would be nice to use .gprel32 here, but we can't be sure that the
+   function loaded the GP, so this could fail in modules.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#71: FILE: include/asm-alpha/bug.h:7:
+   function loaded the GP, so this could fail in modules.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#72: FILE: include/asm-alpha/bug.h:8:
+#define BUG() \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#72: FILE: include/asm-alpha/bug.h:8:
+#define BUG() \
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \
+		       : : "i" (PAL_bugchk), "i"(__LINE__), "i"(__FILE__))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: include/asm-alpha/bug.h:9:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#73: FILE: include/asm-alpha/bug.h:9:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#73: FILE: include/asm-alpha/bug.h:9:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#76: FILE: include/asm-alpha/bug.h:12:
+#define PAGE_BUG(page)	BUG()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: include/asm-cris/bug.h:1:
+#ifndef _CRIS_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: include/asm-cris/bug.h:4:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#104: FILE: include/asm-cris/bug.h:4:
+#define BUG() do { \
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: include/asm-cris/bug.h:5:
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: include/asm-cris/bug.h:5:
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#108: FILE: include/asm-cris/bug.h:8:
+#define PAGE_BUG(page) do { \
+         BUG(); \
+} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: include/asm-cris/bug.h:9:
+         BUG(); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: include/asm-cris/bug.h:9:
+         BUG(); \$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: include/asm-cris/bug.h:9:
+         BUG(); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: include/asm-i386/bug.h:1:
+#ifndef _I386_BUG_H

WARNING:IF_1: Consider removing the #if 1 and its #endif
#151: FILE: include/asm-i386/bug.h:13:
+#if 1	/* Set to zero for a slightly smaller kernel */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: include/asm-i386/bug.h:14:
+#define BUG()				\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: include/asm-i386/bug.h:14:
+#define BUG()				\
+ __asm__ __volatile__(	"ud2\n"		\
+			"\t.word %c0\n"	\
+			"\t.long %c1\n"	\
+			 : : "i" (__LINE__), "i" (__FILE__))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: include/asm-i386/bug.h:15:
+ __asm__ __volatile__(^I"ud2\n"^I^I\$

ERROR:SPACING: space prohibited after that open parenthesis '('
#153: FILE: include/asm-i386/bug.h:15:
+ __asm__ __volatile__(	"ud2\n"		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: include/asm-i386/bug.h:20:
+#define BUG() __asm__ __volatile__("ud2\n")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#158: FILE: include/asm-i386/bug.h:20:
+#define BUG() __asm__ __volatile__("ud2\n")

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#161: FILE: include/asm-i386/bug.h:23:
+#define PAGE_BUG(page) do { \
+	BUG(); \
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: include/asm-i386/bug.h:24:
+	BUG(); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#201: FILE: include/asm-ia64/bug.h:1:
+#ifndef _ASM_IA64_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: include/asm-ia64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: include/asm-ia64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#204: FILE: include/asm-ia64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)
                                                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: include/asm-ia64/bug.h:5:
+#define PAGE_BUG(page) do { BUG(); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#205: FILE: include/asm-ia64/bug.h:5:
+#define PAGE_BUG(page) do { BUG(); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: include/asm-m68k/bug.h:1:
+#ifndef _M68K_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: include/asm-m68k/bug.h:8:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#238: FILE: include/asm-m68k/bug.h:9:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: include/asm-m68k/bug.h:13:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: include/asm-m68k/bug.h:14:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#248: FILE: include/asm-m68k/bug.h:19:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#248: FILE: include/asm-m68k/bug.h:19:
+#define BUG() do { \
+	asm volatile("illegal"); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#253: FILE: include/asm-m68k/bug.h:24:
+#define PAGE_BUG(page) do { \
+	BUG(); \
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#254: FILE: include/asm-m68k/bug.h:25:
+	BUG(); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#294: FILE: include/asm-mips/bug.h:1:
+/* $Id$ */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#294: FILE: include/asm-mips/bug.h:1:
+/* $Id$ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#298: FILE: include/asm-mips/bug.h:5:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: include/asm-mips/bug.h:5:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#298: FILE: include/asm-mips/bug.h:5:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)
                                                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#299: FILE: include/asm-mips/bug.h:6:
+#define PAGE_BUG(page) do {  BUG(); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#299: FILE: include/asm-mips/bug.h:6:
+#define PAGE_BUG(page) do {  BUG(); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#318: FILE: include/asm-mips64/bug.h:1:
+#ifndef _ASM_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#321: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#321: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)
                                                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: include/asm-mips64/bug.h:5:
+#define PAGE_BUG(page) do {  BUG(); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#322: FILE: include/asm-mips64/bug.h:5:
+#define PAGE_BUG(page) do {  BUG(); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#341: FILE: include/asm-parisc/bug.h:1:
+#ifndef _PARISC_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: include/asm-parisc/bug.h:10:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#350: FILE: include/asm-parisc/bug.h:10:
+#define BUG() do { \
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \
+} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#351: FILE: include/asm-parisc/bug.h:11:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#354: FILE: include/asm-parisc/bug.h:14:
+#define PAGE_BUG(page) do { \
+	BUG(); \
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: include/asm-parisc/bug.h:15:
+	BUG(); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: include/asm-ppc/bug.h:1:
+#ifndef _PPC_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: include/asm-ppc/bug.h:8:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#395: FILE: include/asm-ppc/bug.h:9:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: include/asm-ppc/bug.h:13:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: include/asm-ppc/bug.h:14:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: include/asm-ppc/bug.h:18:
+#define PAGE_BUG(page) do { BUG(); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#404: FILE: include/asm-ppc/bug.h:18:
+#define PAGE_BUG(page) do { BUG(); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#434: FILE: include/asm-s390/bug.h:1:
+#ifndef _S390_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: include/asm-s390/bug.h:4:
+#define BUG() do { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: include/asm-s390/bug.h:6:
+        __asm__ __volatile__(".word 0x0000"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: include/asm-s390/bug.h:6:
+        __asm__ __volatile__(".word 0x0000"); \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: include/asm-s390/bug.h:7:
+} while (0)                                       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#442: FILE: include/asm-s390/bug.h:9:
+#define PAGE_BUG(page) do { \
+        BUG(); \
+} while (0)                      

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: include/asm-s390/bug.h:10:
+        BUG(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: include/asm-s390/bug.h:10:
+        BUG(); \$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: include/asm-s390/bug.h:10:
+        BUG(); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: include/asm-s390/bug.h:11:
+} while (0)                      $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#470: FILE: include/asm-s390x/bug.h:1:
+#ifndef _S390_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: include/asm-s390x/bug.h:4:
+#define BUG() do { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: include/asm-s390x/bug.h:6:
+        __asm__ __volatile__(".long 0"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: include/asm-s390x/bug.h:6:
+        __asm__ __volatile__(".long 0"); \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: include/asm-s390x/bug.h:7:
+} while (0)                                       $

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#478: FILE: include/asm-s390x/bug.h:9:
+#define PAGE_BUG(page) do { \
+        BUG(); \
+} while (0)                      

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: include/asm-s390x/bug.h:10:
+        BUG(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: include/asm-s390x/bug.h:10:
+        BUG(); \$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: include/asm-s390x/bug.h:10:
+        BUG(); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: include/asm-s390x/bug.h:11:
+} while (0)                      $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#506: FILE: include/asm-sh/bug.h:1:
+#ifndef __ASM_SH_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: include/asm-sh/bug.h:7:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#513: FILE: include/asm-sh/bug.h:8:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#517: FILE: include/asm-sh/bug.h:12:
+#define PAGE_BUG(page) do { \
+	BUG(); \
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: include/asm-sh/bug.h:13:
+	BUG(); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#548: FILE: include/asm-sparc/bug.h:1:
+/* $Id$ */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#548: FILE: include/asm-sparc/bug.h:1:
+/* $Id$ */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#557: FILE: include/asm-sparc/bug.h:10:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: include/asm-sparc/bug.h:12:
+#define BUG() do { \

WARNING:MEMORY_BARRIER: memory barrier without comment
#560: FILE: include/asm-sparc/bug.h:13:
+	mb(); \

WARNING:MEMORY_BARRIER: memory barrier without comment
#562: FILE: include/asm-sparc/bug.h:15:
+	mb(); \

ERROR:SPACING: space required before the open parenthesis '('
#563: FILE: include/asm-sparc/bug.h:16:
+} while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: include/asm-sparc/bug.h:18:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: include/asm-sparc/bug.h:19:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#566: FILE: include/asm-sparc/bug.h:19:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; \
 	                                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#570: FILE: include/asm-sparc/bug.h:23:
+#define PAGE_BUG(page)	BUG()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#606: FILE: include/asm-sparc64/bug.h:1:
+/* $Id$ */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#606: FILE: include/asm-sparc64/bug.h:1:
+/* $Id$ */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: include/asm-sparc64/bug.h:7:
+extern void do_BUG(const char *file, int line);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#613: FILE: include/asm-sparc64/bug.h:8:
+#define BUG() do {					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: include/asm-sparc64/bug.h:13:
+#define BUG()		__builtin_trap()

CHECK:LINE_SPACING: Please don't use multiple blank lines
#621: FILE: include/asm-sparc64/bug.h:16:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#652: FILE: include/linux/dcache.h:10:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#663: FILE: include/linux/kernel.h:193:
+#include <asm/bug.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 96 warnings, 3 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
