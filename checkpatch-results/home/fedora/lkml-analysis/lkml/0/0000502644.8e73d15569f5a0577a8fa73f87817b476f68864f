WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -urN linux-virgin/include/linux/bootmem.h linux/include/linux/bootmem.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: include/linux/segment_tree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#85: FILE: include/linux/segment_tree.h:2:
+ * linux/include/linux/segment_tree.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#110: FILE: include/linux/segment_tree.h:27:
+typedef struct segment_tree_node {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#115: FILE: include/linux/segment_tree.h:32:
+typedef union segment_buf {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#120: FILE: include/linux/segment_tree.h:37:
+typedef struct segment_tree_root {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#127: FILE: include/linux/segment_tree.h:44:
+#define segment_end(node) ((node)->start.value + (node)->length.value - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#135: FILE: include/linux/segment_tree.h:52:
+#define segment_contains_point(node, point) \
+	(segment_start(node) <= (point) && segment_end(node) >= (point))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'point' - possible side-effects?
#135: FILE: include/linux/segment_tree.h:52:
+#define segment_contains_point(node, point) \
+	(segment_start(node) <= (point) && segment_end(node) >= (point))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#144: FILE: include/linux/segment_tree.h:61:
+#define segment_disjoint(node1, node2) \
+	(segment_above(node1, node2) || segment_below(node1, node2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#144: FILE: include/linux/segment_tree.h:61:
+#define segment_disjoint(node1, node2) \
+	(segment_above(node1, node2) || segment_below(node1, node2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#147: FILE: include/linux/segment_tree.h:64:
+#define segment_intersect(node1, node2) \
+	(segment_start(node1) <= segment_end(node2) \
+		&& segment_start(node2) <= segment_end(node1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#147: FILE: include/linux/segment_tree.h:64:
+#define segment_intersect(node1, node2) \
+	(segment_start(node1) <= segment_end(node2) \
+		&& segment_start(node2) <= segment_end(node1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#149: FILE: include/linux/segment_tree.h:66:
+	(segment_start(node1) <= segment_end(node2) \
+		&& segment_start(node2) <= segment_end(node1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#151: FILE: include/linux/segment_tree.h:68:
+#define segment_contains(node1, node2) \
+	(segment_start(node1) <= segment_start(node2) \
+		&& segment_end(node1) >= segment_end(node2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#151: FILE: include/linux/segment_tree.h:68:
+#define segment_contains(node1, node2) \
+	(segment_start(node1) <= segment_start(node2) \
+		&& segment_end(node1) >= segment_end(node2))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#153: FILE: include/linux/segment_tree.h:70:
+	(segment_start(node1) <= segment_start(node2) \
+		&& segment_end(node1) >= segment_end(node2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#155: FILE: include/linux/segment_tree.h:72:
+#define segment_set_endpoints(node, start, end) \
+	do { \
+		segment_length(node) = (end) - (start) + 1; \
+		segment_start(node) = (start); \
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#155: FILE: include/linux/segment_tree.h:72:
+#define segment_set_endpoints(node, start, end) \
+	do { \
+		segment_length(node) = (end) - (start) + 1; \
+		segment_start(node) = (start); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: include/linux/segment_tree.h:76:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#161: FILE: include/linux/segment_tree.h:78:
+#define segment_unite(node1, node2) \
+	segment_set_endpoints(node1, \
+		min(segment_start(node1),segment_start(node2)), \
+		max(segment_end(node1), segment_end(node2)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#161: FILE: include/linux/segment_tree.h:78:
+#define segment_unite(node1, node2) \
+	segment_set_endpoints(node1, \
+		min(segment_start(node1),segment_start(node2)), \
+		max(segment_end(node1), segment_end(node2)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: include/linux/segment_tree.h:80:
+		min(segment_start(node1),segment_start(node2)), \
 		                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#166: FILE: include/linux/segment_tree.h:83:
+#define segment_union(seg_union, node1, node2) \
+	segment_set_endpoints(seg_union, \
+		min(segment_start(node1),segment_start(node2)), \
+		max(segment_end(node1), segment_end(node2)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#166: FILE: include/linux/segment_tree.h:83:
+#define segment_union(seg_union, node1, node2) \
+	segment_set_endpoints(seg_union, \
+		min(segment_start(node1),segment_start(node2)), \
+		max(segment_end(node1), segment_end(node2)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: include/linux/segment_tree.h:85:
+		min(segment_start(node1),segment_start(node2)), \
 		                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node1' - possible side-effects?
#171: FILE: include/linux/segment_tree.h:88:
+#define segment_intersection(intersect, node1, node2) \
+	segment_set_endpoints(intersect, \
+		max(segment_start(node1), segment_start(node2)), \
+		min(segment_end(node1), segment_end(node2)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node2' - possible side-effects?
#171: FILE: include/linux/segment_tree.h:88:
+#define segment_intersection(intersect, node1, node2) \
+	segment_set_endpoints(intersect, \
+		max(segment_start(node1), segment_start(node2)), \
+		min(segment_end(node1), segment_end(node2)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#176: FILE: include/linux/segment_tree.h:93:
+#define segment_set_start(node, start) \
+	segment_set_endpoints(node, start, segment_end(node))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#179: FILE: include/linux/segment_tree.h:96:
+#define segment_set_end(node, end) \
+	segment_set_endpoints(node, segment_start(node), end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#190: FILE: include/linux/segment_tree.h:107:
+static inline unsigned segment_tree_contains_point(segment_tree_node_t *root,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/linux/segment_tree.h:108:
+static inline unsigned segment_tree_contains_point(segment_tree_node_t *root,
+							unsigned long point)

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: include/linux/segment_tree.h:112:
+	if(!root)

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: include/linux/segment_tree.h:116:
+	while(node) {

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: include/linux/segment_tree.h:117:
+		if(segment_contains_point(start_segment_treap(node), point))

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: include/linux/segment_tree.h:119:
+		else if(segment_below_point(start_segment_treap(node), point))

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: include/linux/segment_tree.h:121:
+		else if(segment_above_point(start_segment_treap(node), point))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: include/linux/segment_tree.h:124:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: include/linux/segment_tree.h:129:
+static inline unsigned segment_tree_intersects(segment_tree_node_t *root,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: include/linux/segment_tree.h:130:
+static inline unsigned segment_tree_intersects(segment_tree_node_t *root,
+						segment_tree_node_t *segment)

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: include/linux/segment_tree.h:134:
+	if(!root)

ERROR:SPACING: space required before the open parenthesis '('
#221: FILE: include/linux/segment_tree.h:138:
+	while(node) {

ERROR:SPACING: space required before the open parenthesis '('
#222: FILE: include/linux/segment_tree.h:139:
+		if(segment_intersect(start_segment_treap(node), segment))

ERROR:SPACING: space required before the open parenthesis '('
#224: FILE: include/linux/segment_tree.h:141:
+		else if(segment_below(start_segment_treap(node), segment))

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: include/linux/segment_tree.h:143:
+		else if(segment_above(start_segment_treap(node), segment))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: include/linux/segment_tree.h:146:
+			BUG();

ERROR:SPACING: space prohibited after that open parenthesis '('
#242: FILE: include/linux/segment_tree.h:159:
+static inline void segment_complement(	segment_tree_node_t **segment,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: include/linux/segment_tree.h:160:
+static inline void segment_complement(	segment_tree_node_t **segment,
+					segment_tree_node_t  *to_remove,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#246: FILE: include/linux/segment_tree.h:163:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#247: FILE: include/linux/segment_tree.h:164:
+	if(segment_disjoint(*segment, to_remove)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#248: FILE: include/linux/segment_tree.h:165:
+	if(segment_disjoint(*segment, to_remove)) {
+

ERROR:SPACING: space required before the open parenthesis '('
#251: FILE: include/linux/segment_tree.h:168:
+	} else if(segment_contains(to_remove, *segment)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#252: FILE: include/linux/segment_tree.h:169:
+	} else if(segment_contains(to_remove, *segment)) {
+

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: include/linux/segment_tree.h:172:
+	} else if(segment_start(*segment) == segment_start(to_remove)) {

ERROR:SPACING: space required before the open parenthesis '('
#262: FILE: include/linux/segment_tree.h:179:
+	} else if(segment_end(*segment) == segment_end(to_remove)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#281: FILE: include/linux/segment_tree.h:198:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: include/linux/segment_tree.h:204:
+ * to the endpoints. This is a derived key so it unfortunately may not be $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: include/linux/segment_tree.h:208:
+static inline void segment_end_split(treap_root_t root, unsigned long end,
+				treap_root_t less, treap_root_t more)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#298: FILE: include/linux/segment_tree.h:215:
+	sentinel.left = sentinel.right = sentinel.parent = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#300: FILE: include/linux/segment_tree.h:217:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: include/linux/segment_tree.h:218:
+		if(!*root) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#301: FILE: include/linux/segment_tree.h:218:
+		if(!*root) {
[...]
+		} else if(end > end_treap(*root) && !(*root)->right) {
[...]
+		} else if(end <= end_treap(*root) && !(*root)->left) {
[...]
+		} else if(end > end_treap(*root))
[...]
+		else /* end <= end_treap(*root) */
[...]

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: include/linux/segment_tree.h:221:
+		} else if(end > end_treap(*root) && !(*root)->right) {

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: include/linux/segment_tree.h:226:
+		} else if(end <= end_treap(*root) && !(*root)->left) {

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: include/linux/segment_tree.h:231:
+		} else if(end > end_treap(*root))

ERROR:SPACING: space required before the open parenthesis '('
#322: FILE: include/linux/segment_tree.h:239:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: include/linux/segment_tree.h:240:
+		if((*root)->left && (*root)->left->priority > (*root)->priority)

ERROR:SPACING: space required before the open parenthesis '('
#325: FILE: include/linux/segment_tree.h:242:
+		else if((*root)->right

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#326: FILE: include/linux/segment_tree.h:243:
+		else if((*root)->right
+				&& (*root)->right->priority > (*root)->priority)

ERROR:SPACING: space required before the open parenthesis '('
#329: FILE: include/linux/segment_tree.h:246:
+		if(!(*root)->parent)

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: include/linux/segment_tree.h:248:
+		else if(!(*root)->parent->parent)

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: include/linux/segment_tree.h:250:
+		else if((*root)->parent->parent->left == (*root)->parent)

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: include/linux/segment_tree.h:252:
+		else if((*root)->parent->parent->right == (*root)->parent)

ERROR:SPACING: space required before the open parenthesis '('
#343: FILE: include/linux/segment_tree.h:260:
+	if(*less) (*less)->parent = NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#343: FILE: include/linux/segment_tree.h:260:
+	if(*less) (*less)->parent = NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#344: FILE: include/linux/segment_tree.h:261:
+	if(*more) (*more)->parent = NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#344: FILE: include/linux/segment_tree.h:261:
+	if(*more) (*more)->parent = NULL;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#355: FILE: include/linux/segment_tree.h:272:
+#define segment_delete(node) \
+	do { \
+		treap_root_delete(segment_start_link(node)); \
+		treap_root_delete(segment_length_link(node)); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: include/linux/segment_tree.h:276:
+	} while(0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: include/linux/segment_tree.h:279:
+static inline void segment_all_intersect(treap_root_t root,
+					unsigned long start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: include/linux/segment_tree.h:284:
+	treap_node_t *less_end, *more_end, *more_start, *less_start;
+	less_start = more_start = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#367: FILE: include/linux/segment_tree.h:284:
+	less_start = more_start = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#369: FILE: include/linux/segment_tree.h:286:
+	if(start) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: include/linux/segment_tree.h:287:
+		less_end = more_end = NULL;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#382: FILE: include/linux/segment_tree.h:299:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#389: FILE: include/linux/segment_tree.h:306:
+extern void early_printk(const char *fmt, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#391: FILE: include/linux/segment_tree.h:308:
+static void print_ptr_graph(treap_root_t root) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: include/linux/segment_tree.h:309:
+	if(!*root)

CHECK:BRACES: braces {} should be used on all arms of this statement
#392: FILE: include/linux/segment_tree.h:309:
+	if(!*root)
[...]
+	else if(!(*root)->marker) {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: include/linux/segment_tree.h:311:
+	else if(!(*root)->marker) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: include/linux/segment_tree.h:315:
+		early_printk("x%p [label=\"%p, start=%lu,\\nlength=%lu\"];\n",
+				*root, *root, segment_start(seg), segment_length(seg));

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: include/linux/segment_tree.h:316:
+		if((*root)->parent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: include/linux/segment_tree.h:318:
+			early_printk("x%p -> x%p [label=\"parent\"];\n",
+						*root, (*root)->parent);

ERROR:SPACING: space required before the open parenthesis '('
#402: FILE: include/linux/segment_tree.h:319:
+		if((*root)->left)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: include/linux/segment_tree.h:321:
+			early_printk("x%p -> x%p [label=\"left\"];\n",
+						*root, (*root)->left);

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: include/linux/segment_tree.h:322:
+		if((*root)->right)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: include/linux/segment_tree.h:324:
+			early_printk("x%p -> x%p [label=\"right\"];\n",
+						*root, (*root)->right);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#419: FILE: include/linux/segment_tree.h:336:
+}
+static void print_length_graph(treap_root_t root) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#419: FILE: include/linux/segment_tree.h:336:
+static void print_length_graph(treap_root_t root) {

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: include/linux/segment_tree.h:337:
+	if(!*root)

CHECK:BRACES: braces {} should be used on all arms of this statement
#420: FILE: include/linux/segment_tree.h:337:
+	if(!*root)
[...]
+	else if(!(*root)->marker) {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#422: FILE: include/linux/segment_tree.h:339:
+	else if(!(*root)->marker) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: include/linux/segment_tree.h:343:
+		early_printk("x%p [label=\"%p: start=%lu,\\nlength=%lu\"];\n",
+				*root, *root, segment_start(seg), segment_length(seg));

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: include/linux/segment_tree.h:344:
+		if((*root)->parent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: include/linux/segment_tree.h:346:
+			early_printk("x%p -> x%p [label=\"parent\"];\n",
+						*root, (*root)->parent);

ERROR:SPACING: space required before the open parenthesis '('
#430: FILE: include/linux/segment_tree.h:347:
+		if((*root)->left)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: include/linux/segment_tree.h:349:
+			early_printk("x%p -> x%p [label=\"left\"];\n",
+						*root, (*root)->left);

ERROR:SPACING: space required before the open parenthesis '('
#433: FILE: include/linux/segment_tree.h:350:
+		if((*root)->right)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: include/linux/segment_tree.h:352:
+			early_printk("x%p -> x%p [label=\"right\"];\n",
+						*root, (*root)->right);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#450: FILE: include/linux/treap.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#451: FILE: include/linux/treap.h:2:
+ * linux/include/linux/treap.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#486: FILE: include/linux/treap.h:37:
+typedef struct treap_node {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#493: FILE: include/linux/treap.h:44:
+typedef treap_node_t **treap_root_t;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'root' may be better as '(root)' to avoid precedence issues
#495: FILE: include/linux/treap.h:46:
+#define TREAP_INIT(root) \
+	do { \
+		*root = NULL; \
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#495: FILE: include/linux/treap.h:46:
+#define TREAP_INIT(root) \
+	do { \
+		*root = NULL; \
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: include/linux/treap.h:49:
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#500: FILE: include/linux/treap.h:51:
+#define treap_entry(ptr, type, member) \
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: include/linux/treap.h:52:
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#503: FILE: include/linux/treap.h:54:
+#define treap_node_link(node) \
+	((!(node) || !(node)->parent) ? NULL :				  \
+		((node) == (node)->parent->left) ? &(node)->parent->left  \
+						 : &(node)->parent->right)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tmp' - possible side-effects?
#508: FILE: include/linux/treap.h:59:
+#define treap_find_parent_and_remove_child(tmp, parent)	\
+	do {						\
+		parent = tmp->parent;			\
+		if(parent && parent->left == tmp)	\
+			parent->left = NULL;		\
+		else if(parent && parent->right == tmp)	\
+			parent->right = NULL;		\
+		else if(parent)				\
+			BUG();				\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tmp' may be better as '(tmp)' to avoid precedence issues
#508: FILE: include/linux/treap.h:59:
+#define treap_find_parent_and_remove_child(tmp, parent)	\
+	do {						\
+		parent = tmp->parent;			\
+		if(parent && parent->left == tmp)	\
+			parent->left = NULL;		\
+		else if(parent && parent->right == tmp)	\
+			parent->right = NULL;		\
+		else if(parent)				\
+			BUG();				\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#508: FILE: include/linux/treap.h:59:
+#define treap_find_parent_and_remove_child(tmp, parent)	\
+	do {						\
+		parent = tmp->parent;			\
+		if(parent && parent->left == tmp)	\
+			parent->left = NULL;		\
+		else if(parent && parent->right == tmp)	\
+			parent->right = NULL;		\
+		else if(parent)				\
+			BUG();				\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#511: FILE: include/linux/treap.h:62:
+		if(parent && parent->left == tmp)	\

ERROR:SPACING: space required before the open parenthesis '('
#513: FILE: include/linux/treap.h:64:
+		else if(parent && parent->right == tmp)	\

ERROR:SPACING: space required before the open parenthesis '('
#515: FILE: include/linux/treap.h:66:
+		else if(parent)				\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: include/linux/treap.h:67:
+			BUG();				\

ERROR:SPACING: space required before the open parenthesis '('
#517: FILE: include/linux/treap.h:68:
+	} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: include/linux/treap.h:70:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#520: FILE: include/linux/treap.h:71:
+#define treap_find_leftmost_leaf(node)					\
+	do {								\
+		if(!node)						\
+			break;						\
+		while(1) {						\
+			if(node->left)					\
+				node = node->left;			\
+			else if(node->right)				\
+				node = node->right;			\
+			else						\
+				break;					\
+		}							\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#520: FILE: include/linux/treap.h:71:
+#define treap_find_leftmost_leaf(node)					\
+	do {								\
+		if(!node)						\
+			break;						\
+		while(1) {						\
+			if(node->left)					\
+				node = node->left;			\
+			else if(node->right)				\
+				node = node->right;			\
+			else						\
+				break;					\
+		}							\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#522: FILE: include/linux/treap.h:73:
+		if(!node)						\

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: include/linux/treap.h:75:
+		while(1) {						\

ERROR:SPACING: space required before the open parenthesis '('
#525: FILE: include/linux/treap.h:76:
+			if(node->left)					\

ERROR:SPACING: space required before the open parenthesis '('
#527: FILE: include/linux/treap.h:78:
+			else if(node->right)				\

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: include/linux/treap.h:83:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#554: FILE: include/linux/treap.h:105:
+	if(*root) {

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: include/linux/treap.h:109:
+		if(y) {

ERROR:SPACING: space required before the open parenthesis '('
#559: FILE: include/linux/treap.h:110:
+			if(T && T->left  == x) T->left  = y;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: include/linux/treap.h:110:
+			if(T && T->left  == x) T->left  = y;

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: include/linux/treap.h:111:
+			if(T && T->right == x) T->right = y;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#560: FILE: include/linux/treap.h:111:
+			if(T && T->right == x) T->right = y;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#575: FILE: include/linux/treap.h:126:
+			/*
+			x->left = A;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#580: FILE: include/linux/treap.h:131:
+			if(B) B->parent = x;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#580: FILE: include/linux/treap.h:131:
+			if(B) B->parent = x;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: include/linux/treap.h:134:
+			/*
+			y->right = C;

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: include/linux/treap.h:146:
+	if(*root) {

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: include/linux/treap.h:150:
+		if(x) {

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: include/linux/treap.h:151:
+			if(T && T->left  == y) T->left  = x;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#600: FILE: include/linux/treap.h:151:
+			if(T && T->left  == y) T->left  = x;

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: include/linux/treap.h:152:
+			if(T && T->right == y) T->right = x;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#601: FILE: include/linux/treap.h:152:
+			if(T && T->right == y) T->right = x;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#616: FILE: include/linux/treap.h:167:
+			/*
+			x->left = A;

ERROR:SPACING: space required before the open parenthesis '('
#621: FILE: include/linux/treap.h:172:
+			if(B) B->parent = y;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#621: FILE: include/linux/treap.h:172:
+			if(B) B->parent = y;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#624: FILE: include/linux/treap.h:175:
+			/*
+			y->right = C;

ERROR:SPACING: space required before the open parenthesis '('
#635: FILE: include/linux/treap.h:186:
+	while(1) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#636: FILE: include/linux/treap.h:187:
+	while(1) {
+

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: include/linux/treap.h:188:
+		if(!root || !*root) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#637: FILE: include/linux/treap.h:188:
+		if(!root || !*root) return NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#637: FILE: include/linux/treap.h:188:
+		if(!root || !*root) return NULL;
[...]
+		else if(!(*root)->left && !(*root)->right) {
[...]
+		} else if(!(*root)->left) {
[...]
+		} else if(!(*root)->right) {
[...]
+		} else if((*root)->left->priority > (*root)->right->priority) {
[...]
+		} else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#638: FILE: include/linux/treap.h:189:
+		else if(!(*root)->left && !(*root)->right) {

ERROR:SPACING: space required before the open parenthesis '('
#642: FILE: include/linux/treap.h:193:
+		} else if(!(*root)->left) {

ERROR:SPACING: space required before the open parenthesis '('
#645: FILE: include/linux/treap.h:196:
+		} else if(!(*root)->right) {

ERROR:SPACING: space required before the open parenthesis '('
#648: FILE: include/linux/treap.h:199:
+		} else if((*root)->left->priority > (*root)->right->priority) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: include/linux/treap.h:212:
+	treap_root_t tree = root;
+	node->left = node->right = node->parent = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#661: FILE: include/linux/treap.h:212:
+	node->left = node->right = node->parent = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#663: FILE: include/linux/treap.h:214:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: include/linux/treap.h:215:
+		if(!*root) {

ERROR:SPACING: space required before the open parenthesis '('
#667: FILE: include/linux/treap.h:218:
+		} else if(node->value <= (*root)->value && !(*root)->left) {

ERROR:SPACING: space required before the open parenthesis '('
#672: FILE: include/linux/treap.h:223:
+		} else if(node->value > (*root)->value && !(*root)->right) {

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: include/linux/treap.h:228:
+		} else if(node->value <= (*root)->value) {

ERROR:SPACING: space required before the open parenthesis '('
#683: FILE: include/linux/treap.h:234:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#684: FILE: include/linux/treap.h:235:
+		if(!*root) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#684: FILE: include/linux/treap.h:235:
+		if(!*root) return;

ERROR:SPACING: space required before the open parenthesis '('
#685: FILE: include/linux/treap.h:236:
+		else if((*root)->left

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#686: FILE: include/linux/treap.h:237:
+		else if((*root)->left
+				&& (*root)->left->priority > (*root)->priority)

ERROR:SPACING: space required before the open parenthesis '('
#688: FILE: include/linux/treap.h:239:
+		else if((*root)->right

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#689: FILE: include/linux/treap.h:240:
+		else if((*root)->right
+				&& (*root)->right->priority > (*root)->priority)

ERROR:SPACING: space required before the open parenthesis '('
#692: FILE: include/linux/treap.h:243:
+		if(!(*root)->parent)

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: include/linux/treap.h:245:
+		else if(!(*root)->parent->parent)

ERROR:SPACING: space required before the open parenthesis '('
#696: FILE: include/linux/treap.h:247:
+		else if((*root)->parent == (*root)->parent->parent->left)

ERROR:SPACING: space required before the open parenthesis '('
#698: FILE: include/linux/treap.h:249:
+		else if((*root)->parent == (*root)->parent->parent->right)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#701: FILE: include/linux/treap.h:252:
+
+	}

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: include/linux/treap.h:257:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#707: FILE: include/linux/treap.h:258:
+		if(!*root) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#707: FILE: include/linux/treap.h:258:
+		if(!*root) return NULL;

ERROR:SPACING: space required before the open parenthesis '('
#708: FILE: include/linux/treap.h:259:
+		else if(k < (*root)->value) root = &(*root)->left;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#708: FILE: include/linux/treap.h:259:
+		else if(k < (*root)->value) root = &(*root)->left;

ERROR:SPACING: space required before the open parenthesis '('
#709: FILE: include/linux/treap.h:260:
+		else if(k > (*root)->value) root = &(*root)->right;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#709: FILE: include/linux/treap.h:260:
+		else if(k > (*root)->value) root = &(*root)->right;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#710: FILE: include/linux/treap.h:261:
+		else return treap_root_delete(root);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: include/linux/treap.h:266:
+static inline void treap_split(treap_root_t root, unsigned long k,
+					treap_root_t less, treap_root_t more)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#721: FILE: include/linux/treap.h:272:
+	sentinel.parent = sentinel.left = sentinel.right = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#727: FILE: include/linux/treap.h:278:
+	if(*less) (*less)->parent = NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#727: FILE: include/linux/treap.h:278:
+	if(*less) (*less)->parent = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#728: FILE: include/linux/treap.h:279:
+	if(*more) (*more)->parent = NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#728: FILE: include/linux/treap.h:279:
+	if(*more) (*more)->parent = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: include/linux/treap.h:285:
+static inline void treap_join(treap_root_t root,
+				treap_root_t left, treap_root_t right)

WARNING:LINE_SPACING: Missing a blank line after declarations
#737: FILE: include/linux/treap.h:288:
+	treap_node_t sentinel;
+	sentinel.priority = 0UL;

ERROR:SPACING: space required before the open parenthesis '('
#742: FILE: include/linux/treap.h:293:
+	if(*left)  (*left)->parent  = &sentinel;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: include/linux/treap.h:293:
+	if(*left)  (*left)->parent  = &sentinel;

ERROR:SPACING: space required before the open parenthesis '('
#743: FILE: include/linux/treap.h:294:
+	if(*right) (*right)->parent = &sentinel;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#743: FILE: include/linux/treap.h:294:
+	if(*right) (*right)->parent = &sentinel;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#838: FILE: mm/bootmem.c:88:
+#define NR_SEGMENTS (8*PAGE_SIZE/sizeof(segment_buf_t))
                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#838: FILE: mm/bootmem.c:88:
+#define NR_SEGMENTS (8*PAGE_SIZE/sizeof(segment_buf_t))
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#844: FILE: mm/bootmem.c:94:
+#define RND_DN(x,n) ((x) & ~((n)-1))
                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#844: FILE: mm/bootmem.c:94:
+#define RND_DN(x,n) ((x) & ~((n)-1))
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#845: FILE: mm/bootmem.c:95:
+#define RND_UP(x,n) RND_DN((x) + (n) - 1, n)
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#845: FILE: mm/bootmem.c:95:
+#define RND_UP(x,n) RND_DN((x) + (n) - 1, n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: mm/bootmem.c:96:
+#define DIV_DN(x,n) (RND_DN(x,n) / (n))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: mm/bootmem.c:96:
+#define DIV_DN(x,n) (RND_DN(x,n) / (n))
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#846: FILE: mm/bootmem.c:96:
+#define DIV_DN(x,n) (RND_DN(x,n) / (n))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#847: FILE: mm/bootmem.c:97:
+#define DIV_UP(x,n) (RND_UP(x,n) / (n))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#847: FILE: mm/bootmem.c:97:
+#define DIV_UP(x,n) (RND_UP(x,n) / (n))
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#847: FILE: mm/bootmem.c:97:
+#define DIV_UP(x,n) (RND_UP(x,n) / (n))

WARNING:MISPLACED_INIT: __initdata should be placed after random_seed
#864: FILE: mm/bootmem.c:112:
+static unsigned long __initdata random_seed = 1UL;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: mm/bootmem.c:126:
+	random_seed = a*(random_seed - k*q) - r*k;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: mm/bootmem.c:126:
+	random_seed = a*(random_seed - k*q) - r*k;
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: mm/bootmem.c:126:
+	random_seed = a*(random_seed - k*q) - r*k;
 	                                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#889: FILE: mm/bootmem.c:137:
+	unsigned k;

ERROR:SPACING: space required before the open parenthesis '('
#892: FILE: mm/bootmem.c:140:
+	for(k = 0; k < NR_SEGMENTS - 1; ++k)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#893: FILE: mm/bootmem.c:141:
+		segment_pool[k].next = &segment_pool[k+1];
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#894: FILE: mm/bootmem.c:142:
+	segment_pool[NR_SEGMENTS-1].next = NULL;
 	                        ^

ERROR:SPACING: space required before the open parenthesis '('
#906: FILE: mm/bootmem.c:154:
+	if(!bdata->free_segments)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: mm/bootmem.c:168:
+static void __init segment_insert(segment_tree_root_t *root,
+			segment_tree_node_t *node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: mm/bootmem.c:181:
+static void __init segment_free(bootmem_data_t *bdata,
+						segment_tree_node_t *node)

ERROR:SPACING: space required before the open parenthesis '('
#942: FILE: mm/bootmem.c:185:
+	if(!node)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#956: FILE: mm/bootmem.c:199:
+unsigned long __init bootmem_bootmap_pages (unsigned long pages)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#958: FILE: mm/bootmem.c:201:
+	return DIV_UP(NR_SEGMENTS*sizeof(segment_buf_t),PAGE_SIZE);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#958: FILE: mm/bootmem.c:201:
+	return DIV_UP(NR_SEGMENTS*sizeof(segment_buf_t),PAGE_SIZE);
 	                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#992: FILE: mm/bootmem.c:232:
+	return RND_UP(NR_SEGMENTS*sizeof(segment_buf_t), PAGE_SIZE);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: mm/bootmem.c:264:
+	segment_all_intersect(&bdata->segment_tree.start_tree,
+				start, end, &intersect);

ERROR:SPACING: space required before the open parenthesis '('
#1056: FILE: mm/bootmem.c:271:
+	if(!intersect)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1057: FILE: mm/bootmem.c:272:
+		printk(KERN_WARNING "the interval [%lu, %lu] "

WARNING:SPLIT_STRING: quoted string split across lines
#1058: FILE: mm/bootmem.c:273:
+		printk(KERN_WARNING "the interval [%lu, %lu] "
+					"was multiply reserved (!intersect)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open parenthesis '('
#1088: FILE: mm/bootmem.c:303:
+	while(tmp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1091: FILE: mm/bootmem.c:306:
+		segment_tree_node_t *avail = start_segment_treap(tmp);
+		treap_find_parent_and_remove_child(tmp, parent);

ERROR:SPACING: space required before the open parenthesis '('
#1096: FILE: mm/bootmem.c:311:
+		if(!segment_contains(avail, &segment)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: mm/bootmem.c:313:
+			segment_set_endpoints(multiple_left,
+					segment_start(&segment),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: mm/bootmem.c:316:
+			segment_complement(&multiple_left, avail,
+							&multiple_right);

ERROR:SPACING: space required before the open parenthesis '('
#1102: FILE: mm/bootmem.c:317:
+			if(multiple_left)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1103: FILE: mm/bootmem.c:318:
+				printk(KERN_WARNING "the interval [%lu, %lu] "

WARNING:SPLIT_STRING: quoted string split across lines
#1104: FILE: mm/bootmem.c:319:
+				printk(KERN_WARNING "the interval [%lu, %lu] "
+					" was multiply reserved (left)\n",

ERROR:SPACING: space required before the open parenthesis '('
#1107: FILE: mm/bootmem.c:322:
+			if(multiple_right)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1108: FILE: mm/bootmem.c:323:
+				printk(KERN_WARNING "the interval [%lu, %lu] "

WARNING:SPLIT_STRING: quoted string split across lines
#1109: FILE: mm/bootmem.c:324:
+				printk(KERN_WARNING "the interval [%lu, %lu] "
+					" was multiply reserved (right)\n",

ERROR:SPACING: space required before the open parenthesis '('
#1114: FILE: mm/bootmem.c:329:
+		if(!treap_root_delete(segment_length_link(tmp)))

ERROR:SPACING: space required before the open parenthesis '('
#1119: FILE: mm/bootmem.c:334:
+		if(!avail)

ERROR:SPACING: space required before the open parenthesis '('
#1124: FILE: mm/bootmem.c:339:
+		if(fragment) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1125: FILE: mm/bootmem.c:340:
+		if(fragment) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1128: FILE: mm/bootmem.c:343:
+			if(!avail)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1129: FILE: mm/bootmem.c:344:
+				BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: mm/bootmem.c:347:
+			segment_set_endpoints(avail, segment_start(fragment),
+						segment_end(fragment));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: mm/bootmem.c:362:
+static void __init free_bootmem_core(bootmem_data_t *bdata, unsigned long addr,
+							unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1163: FILE: mm/bootmem.c:375:
+	segment_all_intersect(&bdata->segment_tree.start_tree,
+			start ? start - 1 : start, end + 1, &intersect);

ERROR:SPACING: space required before the open parenthesis '('
#1192: FILE: mm/bootmem.c:392:
+	while(tmp) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1193: FILE: mm/bootmem.c:393:
+	while(tmp) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1197: FILE: mm/bootmem.c:397:
+		if(segment_intersect(&freed, avail)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1199: FILE: mm/bootmem.c:399:
+			printk(KERN_WARNING "the interval [%lu, %lu] "

WARNING:SPLIT_STRING: quoted string split across lines
#1200: FILE: mm/bootmem.c:400:
+			printk(KERN_WARNING "the interval [%lu, %lu] "
+				"was multiply made available\n",

ERROR:SPACING: space required before the open parenthesis '('
#1210: FILE: mm/bootmem.c:407:
+		if(!treap_root_delete(segment_length_link(tmp)))

ERROR:SPACING: space required before the open parenthesis '('
#1220: FILE: mm/bootmem.c:417:
+	if(!avail)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1221: FILE: mm/bootmem.c:418:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1224: FILE: mm/bootmem.c:421:
+	segment_set_endpoints(avail, segment_start(&segment),
+					segment_end(&segment));

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#1242: FILE: mm/bootmem.c:434:
+ * mod the largest page frame number. A conditional is used instead of
+ * of remainder so as to avoid the overhead of division.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#1252: FILE: mm/bootmem.c:443:
+#define FEASIBLE(seg, len, align) \
+	((RND_UP(segment_start(seg), align) + (len) - 1) <= segment_end(seg))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1255: FILE: mm/bootmem.c:446:
+#define STARTS_BELOW(seg,goal,align,len) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1255: FILE: mm/bootmem.c:446:
+#define STARTS_BELOW(seg,goal,align,len) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1255: FILE: mm/bootmem.c:446:
+#define STARTS_BELOW(seg,goal,align,len) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'goal' - possible side-effects?
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'align' - possible side-effects?
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#1261: FILE: mm/bootmem.c:452:
+#define GOAL_WITHIN(seg,goal,align,len) \
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1262: FILE: mm/bootmem.c:453:
+	(STARTS_BELOW(seg,goal,align,len) && ENDS_ABOVE(seg,goal,align,len))
 	                                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#1273: FILE: mm/bootmem.c:464:
+#define OBJECTIVE(seg, goal, align, len)				\
+(	GOAL_WITHIN(seg,goal,align,len) 				\
+	? 0UL								\
+	: (								\
+		GOAL_ABOVE(seg, goal, align)				\
+		? DISTANCE_ABOVE(seg, goal, align)			\
+		: DISTANCE_BELOW(seg, goal, align)			\
+	)								\
+)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'goal' - possible side-effects?
#1273: FILE: mm/bootmem.c:464:
+#define OBJECTIVE(seg, goal, align, len)				\
+(	GOAL_WITHIN(seg,goal,align,len) 				\
+	? 0UL								\
+	: (								\
+		GOAL_ABOVE(seg, goal, align)				\
+		? DISTANCE_ABOVE(seg, goal, align)			\
+		: DISTANCE_BELOW(seg, goal, align)			\
+	)								\
+)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'align' - possible side-effects?
#1273: FILE: mm/bootmem.c:464:
+#define OBJECTIVE(seg, goal, align, len)				\
+(	GOAL_WITHIN(seg,goal,align,len) 				\
+	? 0UL								\
+	: (								\
+		GOAL_ABOVE(seg, goal, align)				\
+		? DISTANCE_ABOVE(seg, goal, align)			\
+		: DISTANCE_BELOW(seg, goal, align)			\
+	)								\
+)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1274: FILE: mm/bootmem.c:465:
+(^IGOAL_WITHIN(seg,goal,align,len) ^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1274: FILE: mm/bootmem.c:465:
+(	GOAL_WITHIN(seg,goal,align,len) 				\
  	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1274: FILE: mm/bootmem.c:465:
+(	GOAL_WITHIN(seg,goal,align,len) 				\
  	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1274: FILE: mm/bootmem.c:465:
+(	GOAL_WITHIN(seg,goal,align,len) 				\
  	                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1274: FILE: mm/bootmem.c:465:
+(	GOAL_WITHIN(seg,goal,align,len) 				\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1334: FILE: mm/bootmem.c:518:
+	feasible = infeasible = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#1336: FILE: mm/bootmem.c:520:
+	if(!align)

ERROR:SPACING: space required before the open parenthesis '('
#1341: FILE: mm/bootmem.c:524:
+	if(!length)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1363: FILE: mm/bootmem.c:528:
+	treap_split(&bdata->segment_tree.length_tree, length, &infeasible,
+								&feasible);

ERROR:SPACING: space required before the open parenthesis '('
#1367: FILE: mm/bootmem.c:532:
+	while(tmp) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1368: FILE: mm/bootmem.c:533:
+	while(tmp) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1369: FILE: mm/bootmem.c:534:
+		if(tmp->marker == UNVISITED) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1369: FILE: mm/bootmem.c:534:
+		if(tmp->marker == UNVISITED) {
[...]
+		} else if(tmp->marker == LEFT_SEARCHED) {
[...]
+		} else if(tmp->marker == RIGHT_SEARCHED)
[...]
+		else if(tmp->marker == VISITED) {
[...]
-		for (j = i + 1; j < i + areasize; ++j) {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#1370: FILE: mm/bootmem.c:535:
+			if(tmp->left) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1370: FILE: mm/bootmem.c:535:
+			if(tmp->left) {
[...]
+			} else if(tmp->right) {
[...]
+			} else
[...]

ERROR:SPACING: space required before the open parenthesis '('
#1374: FILE: mm/bootmem.c:539:
+			} else if(tmp->right) {

CHECK:BRACES: Unbalanced braces around else statement
#1378: FILE: mm/bootmem.c:543:
+			} else

ERROR:SPACING: space required before the open parenthesis '('
#1380: FILE: mm/bootmem.c:545:
+		} else if(tmp->marker == LEFT_SEARCHED) {

ERROR:SPACING: space required before the open parenthesis '('
#1381: FILE: mm/bootmem.c:546:
+			if(tmp->right) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1381: FILE: mm/bootmem.c:546:
+			if(tmp->right) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1385: FILE: mm/bootmem.c:550:
+			} else

ERROR:SPACING: space required before the open parenthesis '('
#1387: FILE: mm/bootmem.c:552:
+		} else if(tmp->marker == RIGHT_SEARCHED)

ERROR:SPACING: space required before the open parenthesis '('
#1389: FILE: mm/bootmem.c:554:
+		else if(tmp->marker == VISITED) {

CHECK:BRACES: Unbalanced braces around else statement
#1402: FILE: mm/bootmem.c:558:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1403: FILE: mm/bootmem.c:559:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1405: FILE: mm/bootmem.c:561:
+		if(!tmp)

ERROR:SPACING: space required before the open parenthesis '('
#1410: FILE: mm/bootmem.c:566:
+		if(!optimum && FEASIBLE(node, length, align))

ERROR:SPACING: space required before the open parenthesis '('
#1414: FILE: mm/bootmem.c:570:
+		else if(FEASIBLE(node, length, align)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1415: FILE: mm/bootmem.c:571:
+		else if(FEASIBLE(node, length, align)
+			&& (OBJECTIVE(node, goal, align, length)

ERROR:SPACING: space required before the open parenthesis '('
#1430: FILE: mm/bootmem.c:583:
+	if(!optimum) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1432: FILE: mm/bootmem.c:585:
+		treap_join(&bdata->segment_tree.length_tree, &feasible,
+								&infeasible);

ERROR:SPACING: space required before the open parenthesis '('
#1440: FILE: mm/bootmem.c:589:
+	if(!treap_root_delete(treap_node_link(&optimum->start)))

ERROR:SPACING: space required before the open parenthesis '('
#1443: FILE: mm/bootmem.c:592:
+	if(!treap_root_delete(treap_node_link(&optimum->length)))

ERROR:SPACING: space required before the open parenthesis '('
#1465: FILE: mm/bootmem.c:606:
+	if(!segment_contains(optimum, &reserved))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: mm/bootmem.c:608:
+		segment_set_endpoints(&reserved,
+				RND_UP(segment_start(optimum), align),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1468: FILE: mm/bootmem.c:609:
+				RND_UP(segment_start(optimum),align)+length-1);
 				                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1468: FILE: mm/bootmem.c:609:
+				RND_UP(segment_start(optimum),align)+length-1);
 				                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1468: FILE: mm/bootmem.c:609:
+				RND_UP(segment_start(optimum),align)+length-1);
 				                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1471: FILE: mm/bootmem.c:612:
+	segment_set_endpoints(&left_half, segment_start(optimum),
+					segment_end(optimum));

ERROR:SPACING: space required before the open parenthesis '('
#1477: FILE: mm/bootmem.c:618:
+	if(!left && !right)

ERROR:SPACING: space required before the open parenthesis '('
#1480: FILE: mm/bootmem.c:621:
+	if(left) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1482: FILE: mm/bootmem.c:623:
+		segment_set_endpoints(optimum, segment_start(left),
+						segment_end(left));

ERROR:SPACING: space required before the open parenthesis '('
#1486: FILE: mm/bootmem.c:627:
+	if(right) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1488: FILE: mm/bootmem.c:629:
+		segment_tree_node_t *segment = segment_alloc(bdata);
+		if(!segment)

ERROR:SPACING: space required before the open parenthesis '('
#1488: FILE: mm/bootmem.c:629:
+		if(!segment)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: mm/bootmem.c:632:
+		segment_set_endpoints(segment, segment_start(right),
+						segment_end(right));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1567: FILE: mm/bootmem.c:668:
+	printk("Available physical memory:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1569: FILE: mm/bootmem.c:670:
+	free_bootmem_core(pgdat->bdata, mapstart,
+			RND_UP(NR_SEGMENTS*sizeof(segment_buf_t), PAGE_SIZE));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1569: FILE: mm/bootmem.c:670:
+			RND_UP(NR_SEGMENTS*sizeof(segment_buf_t), PAGE_SIZE));
 			                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1588: FILE: mm/bootmem.c:680:
+	while(tmp) {

ERROR:SPACING: space required before the open parenthesis '('
#1632: FILE: mm/bootmem.c:724:
+		if(start < end)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1633: FILE: mm/bootmem.c:725:
+			printk("available segment: [%lu,%lu]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1634: FILE: mm/bootmem.c:726:
+			printk("available segment: [%lu,%lu]\n",
+				start * PAGE_SIZE,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1639: FILE: mm/bootmem.c:731:
+		for(	page  =  pgdat->node_mem_map + (start - node_start);
[...]
+                		ClearPageReserved(page);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1639: FILE: mm/bootmem.c:731:
+		for(	page  =  pgdat->node_mem_map + (start - node_start);

ERROR:SPACING: space required before the open parenthesis '('
#1639: FILE: mm/bootmem.c:731:
+		for(	page  =  pgdat->node_mem_map + (start - node_start);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1642: FILE: mm/bootmem.c:734:
+			++page) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1643: FILE: mm/bootmem.c:735:
+                ^I^IClearPageReserved(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1643: FILE: mm/bootmem.c:735:
+                ^I^IClearPageReserved(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: mm/bootmem.c:735:
+                ^I^IClearPageReserved(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1644: FILE: mm/bootmem.c:736:
+                ^I^Iset_page_count(page, 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1644: FILE: mm/bootmem.c:736:
+                ^I^Iset_page_count(page, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: mm/bootmem.c:736:
+                ^I^Iset_page_count(page, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1645: FILE: mm/bootmem.c:737:
+                ^I^I__free_page(page);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1645: FILE: mm/bootmem.c:737:
+                ^I^I__free_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: mm/bootmem.c:737:
+                ^I^I__free_page(page);$

ERROR:SPACING: space required before the open parenthesis '('
#1654: FILE: mm/bootmem.c:746:
+		if(start < end)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1672: FILE: mm/bootmem.c:761:
+unsigned long __init init_bootmem_node (pg_data_t *pgdat,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1682: FILE: mm/bootmem.c:769:
+void __init reserve_bootmem_node (pg_data_t *pgdat, unsigned long physaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: mm/bootmem.c:770:
+void __init reserve_bootmem_node (pg_data_t *pgdat, unsigned long physaddr,
+							unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1689: FILE: mm/bootmem.c:775:
+void * __init __alloc_bootmem_node (pg_data_t *pgdat, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1690: FILE: mm/bootmem.c:776:
+void * __init __alloc_bootmem_node (pg_data_t *pgdat, unsigned long size,
+					unsigned long align, unsigned long goal)

ERROR:SPACING: space required before the open parenthesis '('
#1696: FILE: mm/bootmem.c:781:
+	if(ptr)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1699: FILE: mm/bootmem.c:784:
+	printk(KERN_ALERT "bootmem alloc of %lu bytes failed!\n", size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1704: FILE: mm/bootmem.c:789:
+void __init free_bootmem_node (pg_data_t *pgdat, unsigned long physaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1705: FILE: mm/bootmem.c:790:
+void __init free_bootmem_node (pg_data_t *pgdat, unsigned long physaddr,
+							unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1747: FILE: mm/bootmem.c:829:
+void __init free_bootmem (unsigned long addr, unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1760: FILE: mm/bootmem.c:840:
+void __init reserve_bootmem (unsigned long addr, unsigned long size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1764: FILE: mm/bootmem.c:843:
+	unsigned in_any_node = 0;

ERROR:SPACING: space required before the open parenthesis '('
#1779: FILE: mm/bootmem.c:858:
+	while(pgdat) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1780: FILE: mm/bootmem.c:859:
+		unsigned in_node;

ERROR:SPACING: space required before the open parenthesis '('
#1786: FILE: mm/bootmem.c:865:
+		if(in_node)

ERROR:SPACING: space required before the open parenthesis '('
#1791: FILE: mm/bootmem.c:870:
+	if(!in_any_node)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1792: FILE: mm/bootmem.c:871:
+		printk(KERN_WARNING "the interval [%lu, %lu] "

WARNING:SPLIT_STRING: quoted string split across lines
#1793: FILE: mm/bootmem.c:872:
+		printk(KERN_WARNING "the interval [%lu, %lu] "
+			"was multiply reserved\n",

ERROR:SPACING: space required before the open parenthesis '('
#1808: FILE: mm/bootmem.c:886:
+	while(pgdat) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1822: FILE: mm/bootmem.c:899:
+void * __init __alloc_bootmem (unsigned long size, unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1823: FILE: mm/bootmem.c:900:
+void * __init __alloc_bootmem (unsigned long size, unsigned long align,
+							unsigned long goal)

ERROR:SPACING: space required before the open parenthesis '('
#1846: FILE: mm/bootmem.c:908:
+		if(ptr)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000502644.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 187 errors, 63 warnings, 124 checks, 1789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000502644.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
