WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Latest version of swap prefetching also available in incremental form and for 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/swap.h:191:
+extern void prepare_prefetch(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/swap.h:192:
+extern void add_to_swapped_list(unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/swap.h:193:
+extern void remove_from_swapped_list(unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/swap.h:194:
+extern void delay_prefetch(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/swap.h:198:
+extern void zone_statistics(struct zonelist *zonelist, struct zone *z);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/swap.h:240:
+extern int add_to_swap_cache(struct page *page, swp_entry_t entry);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#146: FILE: init/Kconfig:90:
+config SWAP_PREFETCH
+	bool "Support for prefetching swapped memory"
+	depends on SWAP && EXPERIMENTAL
+	default n
+	---help---
+	  This option will allow the kernel to prefetch swapped memory pages
+	  when idle. The pages will be kept on both swap and in swap_cache
+	  thus avoiding the need for further I/O if either ram or swap space
+	  is required.
+	  
+	  What this will do on workstations is slowly bring back applications
+	  that have swapped out after memory intensive workloads back into
+	  physical ram if you have free ram at a later stage and the machine
+	  is relatively idle. This means that when you come back to your
+	  computer after leaving it idle for a while, applications will come
+	  to life faster. Note that your swap usage will appear to increase
+	  but these are cached pages, can be dropped freely by the vm, and it
+	  should stabilise around 50% swap usage.
+	  
+	  Desktop users will most likely want to say Y.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: init/Kconfig:99:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: init/Kconfig:108:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: mm/page_alloc.c:765:
+^Ireturn 0;^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: mm/swap_prefetch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#249: FILE: mm/swap_prefetch.c:2:
+ * linux/mm/swap_prefetch.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#271: FILE: mm/swap_prefetch.c:24:
+	spinlock_t		lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: mm/swap_prefetch.c:26:
+^Istruct radix_tree_root^Iswap_tree;^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: mm/swap_prefetch.c:39:
+^I.busy ^I^I= 0,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: mm/swap_prefetch.c:40:
+^I.list  ^I^I= LIST_HEAD_INIT(swapped.list),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: mm/swap_prefetch.c:43:
+^I.count ^I^I= 0,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: mm/swap_prefetch.c:61:
+	swapped.cache = kmem_cache_create("swapped_entry", se_size,
+		0, 0, NULL, NULL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_prefetch', this function's name, in a string
#310: FILE: mm/swap_prefetch.c:63:
+		panic("prepare_prefetch(): cannot create swapped_entry SLAB cache");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/swap_prefetch.c:108:
+		entry = list_entry(swapped.list.next,
+				struct swapped_entry_t, swapped_list);

CHECK:BRACES: braces {} should be used on all arms of this statement
#369: FILE: mm/swap_prefetch.c:122:
+	if (likely(!error)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#382: FILE: mm/swap_prefetch.c:135:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone"
#445: FILE: mm/swap_prefetch.c:198:
+	if (zone == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: mm/swap_prefetch.c:343:
+		entry = list_entry(swapped.list.next,
+			struct swapped_entry_t, swapped_list);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#622: FILE: mm/swap_prefetch.c:375:
+		if (!(prefetched = trickle_swap()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#636: FILE: mm/swap_prefetch.c:389:
+	if (waitqueue_active(&kprefetchd_wait))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 13 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
