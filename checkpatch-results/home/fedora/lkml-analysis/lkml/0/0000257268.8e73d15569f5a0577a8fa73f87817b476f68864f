WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> level and use kobjects directly...each piece of data will have a kobject, 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: drivers/pci/vpd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#89: FILE: drivers/pci/vpd.c:2:
+ * drivers/pci/vpd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#99: FILE: drivers/pci/vpd.c:12:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: drivers/pci/vpd.c:17:
+extern struct dentry * sysfs_get_dentry(struct dentry *, const char *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: drivers/pci/vpd.c:17:
+extern struct dentry * sysfs_get_dentry(struct dentry *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#104: FILE: drivers/pci/vpd.c:17:
+extern struct dentry * sysfs_get_dentry(struct dentry *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#104: FILE: drivers/pci/vpd.c:17:
+extern struct dentry * sysfs_get_dentry(struct dentry *, const char *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: drivers/pci/vpd.c:18:
+extern int sysfs_create_subdir(struct kobject *, const char *, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#105: FILE: drivers/pci/vpd.c:18:
+extern int sysfs_create_subdir(struct kobject *, const char *, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#105: FILE: drivers/pci/vpd.c:18:
+extern int sysfs_create_subdir(struct kobject *, const char *, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#105: FILE: drivers/pci/vpd.c:18:
+extern int sysfs_create_subdir(struct kobject *, const char *, struct dentry **);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: drivers/pci/vpd.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: drivers/pci/vpd.c:23:
+static void * krealloc(void *ptr, size_t newsize, int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: drivers/pci/vpd.c:27:
+	void *newptr = kmalloc(newsize, flags);
+	if (!newptr)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: drivers/pci/vpd.c:51:
+	printk("VPD: idx %d tag %x len %d\n", i, x, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: drivers/pci/vpd.c:58:
+static ssize_t vpd_read(struct file *file, char __user *buf, size_t count,
+		loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: drivers/pci/vpd.c:77:
+static ssize_t vpd_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#169: FILE: drivers/pci/vpd.c:82:
+static struct file_operations vpd_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#180: FILE: drivers/pci/vpd.c:93:
+	printk("VPD: Creating %s %s\n", name, contents);

WARNING:LINE_SPACING: Missing a blank line after declarations
#207: FILE: drivers/pci/vpd.c:120:
+	char *content = kmalloc(len + 1, GFP_KERNEL);
+	memcpy(content, data, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: drivers/pci/vpd.c:126:
+static int vpd_create_tags(struct dentry *dir, unsigned char *data, int len,
+		int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: drivers/pci/vpd.c:129:
+	int error, i = 0;
+	while (i < len) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: drivers/pci/vpd.c:132:
+		char *tagcont = kmalloc(l + 4, GFP_KERNEL);
+		tagcont[0] = data[i];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: drivers/pci/vpd.c:141:
+		printk("i = %d, len = %d\n", i, len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: drivers/pci/vpd.c:151:
+	unsigned char accum = 0;
+	for (i = 0; i < len; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: drivers/pci/vpd.c:153:
+		printk("pos 0x%x byte 0x%x, cxsum = 0x%x\n", i, data[i], accum);

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: drivers/pci/vpd.c:174:
+		int len = isapnp_get_len(data, &i, &tag);
+		if (tag == ISA_TAG_END) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#261: FILE: drivers/pci/vpd.c:174:
+		if (tag == ISA_TAG_END) {
[...]
+		} else if (tag == ISA_TAG_ANSIIDSTR) {
[...]
+		} else if (tag == ISA_TAG_VPD_R) {
[...]
+		} else if (tag == ISA_TAG_VPD_W) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: drivers/pci/vpd.c:224:
+			char *new_vpd = krealloc(vpd, vpd_size, GFP_KERNEL);
+			if (!new_vpd) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#369: FILE: drivers/pci/vpd.c:282:
+EXPORT_SYMBOL(pci_setup_vpd);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#370: FILE: drivers/pci/vpd.c:283:
+EXPORT_SYMBOL(device_add_vpd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#371: FILE: drivers/pci/vpd.c:284:
+EXPORT_SYMBOL(device_remove_vpd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: include/linux/isapnp.h:94:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 27 warnings, 5 checks, 387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
