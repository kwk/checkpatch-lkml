Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'partion' may be misspelled - perhaps 'partition'?
#26: 
Some peoples reported the problem of fatfs on large partion (> 128GB),
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
    *ino = (sector << sbi->dir_per_block_bits) + (offset >> MSDOS_DIR_BITS);

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#46: 
 fs/msdos/namei.c           |   70 +++++++++++++++---------------
    ^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#66: FILE: fs/fat/dir.c:205:
+		if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#75: FILE: fs/fat/dir.c:256:
+				if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos)<0)
 				                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#96: FILE: fs/fat/dir.c:396:
+	if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#105: FILE: fs/fat/dir.c:453:
+			if (fat_get_entry(inode,&cpos,&bh,&de,&i_pos) == -1)
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#132: FILE: fs/fat/dir.c:701:
+	while (fat_get_entry(dir,&pos,&bh,&de,&i_pos) > -1) {
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#150: FILE: fs/fat/dir.c:731:
+	while (fat_get_entry(dir,&curr,bh,de,i_pos) > -1) {
 	                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#150: FILE: fs/fat/dir.c:731:
+	while (fat_get_entry(dir,&curr,bh,de,i_pos) > -1) {
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: fs/fat/dir.c:731:
+	while (fat_get_entry(dir,&curr,bh,de,i_pos) > -1) {
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: fs/fat/dir.c:731:
+	while (fat_get_entry(dir,&curr,bh,de,i_pos) > -1) {
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: fs/fat/dir.c:731:
+	while (fat_get_entry(dir,&curr,bh,de,i_pos) > -1) {
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                                ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#159: FILE: fs/fat/dir.c:746:
+	do fat_get_entry(dir,&curr,bh,de,i_pos); while (++row<slots);
 	                                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#360: FILE: fs/fat/inode.c:984:
+		printk("dev = %s, i_pos = %llu\n", kdevname(inode->i_dev), i_pos);

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/fat/misc.c:387:
+             (sbi->fat_bits != 32) ? 0 : (CF_LE_W(data[entry].starthi) << 16) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/fat/misc.c:387:
+             (sbi->fat_bits != 32) ? 0 : (CF_LE_W(data[entry].starthi) << 16) \$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#425: FILE: fs/fat/misc.c:414:
+	if (!(bh = fat_bread(sb, sector)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#435: FILE: fs/fat/misc.c:422:
+			if (!i_pos) RSS_COUNT

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#444: FILE: fs/fat/misc.c:429:
+			if (i_pos) {
+				*i_pos = ((loff_t)sector << sbi->dir_per_block_bits) + entry;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: fs/fat/misc.c:524:
+		return raw_scan_nonroot(sb,start,name,NULL,i_pos,res_bh,res_de);
 		                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: fs/fat/misc.c:526:
+		return raw_scan_root(sb,name,NULL,i_pos,res_bh,res_de);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: fs/fat/misc.c:526:
+		return raw_scan_root(sb,name,NULL,i_pos,res_bh,res_de);
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: fs/fat/misc.c:526:
+		return raw_scan_root(sb,name,NULL,i_pos,res_bh,res_de);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: fs/fat/misc.c:526:
+		return raw_scan_root(sb,name,NULL,i_pos,res_bh,res_de);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#527: FILE: fs/fat/misc.c:526:
+		return raw_scan_root(sb,name,NULL,i_pos,res_bh,res_de);
 		                                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir->i_ino == MSDOS_ROOT_INO'
#549: FILE: fs/fat/misc.c:539:
+	if ((dir->i_ino == MSDOS_ROOT_INO) && (sbi->fat_bits != 32))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->fat_bits != 32'
#549: FILE: fs/fat/misc.c:539:
+	if ((dir->i_ino == MSDOS_ROOT_INO) && (sbi->fat_bits != 32))

CHECK:BRACES: braces {} should be used on all arms of this statement
#549: FILE: fs/fat/misc.c:539:
+	if ((dir->i_ino == MSDOS_ROOT_INO) && (sbi->fat_bits != 32))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#551: FILE: fs/fat/misc.c:541:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir->i_ino != MSDOS_ROOT_INO'
#552: FILE: fs/fat/misc.c:542:
+		if ((dir->i_ino != MSDOS_ROOT_INO) && !MSDOS_I(dir)->i_start)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#554: FILE: fs/fat/misc.c:544:
+			return 0; /* in mkdir */
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#554: FILE: fs/fat/misc.c:544:
+		else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: fs/msdos/namei.c:252:
+ ^Iif (res < 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#652: FILE: fs/msdos/namei.c:252:
+ ^Iif (res < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: fs/msdos/namei.c:252:
+ ^Iif (res < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: fs/msdos/namei.c:445:
+    struct msdos_dir_entry *old_de, loff_t old_i_pos, int is_hid)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#767: FILE: fs/msdos/namei.c:460:
+	if (fat_scan(new_dir, new_name, &new_bh, &new_de, &new_i_pos) >= 0
+	    && !new_inode)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                                              ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#873: FILE: fs/vfat/namei.c:976:
+		if (fat_get_entry(dir,&offset,last_bh,last_de,&sinfo->i_pos)>=0)
 		                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#938: FILE: fs/vfat/namei.c:1189:
+				&dotdot_de,&dotdot_i_pos)) < 0)
 				          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#938: FILE: fs/vfat/namei.c:1189:
+				&dotdot_de,&dotdot_i_pos)) < 0)
 				           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: include/linux/msdos_fs.h:283:
+extern void fat_attach(struct inode *inode, loff_t i_pos);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: include/linux/msdos_fs.h:285:
+extern struct inode *fat_iget(struct super_block *sb, loff_t i_pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1000: FILE: include/linux/msdos_fs.h:309:
+extern int fat__get_entry(struct inode *dir, loff_t *pos,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 76 errors, 10 warnings, 10 checks, 898 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
