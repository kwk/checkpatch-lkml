WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
 (3) Move those maintenance routines to a new non-NFS4 specific file (client.c)

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#53: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#115: FILE: fs/nfs/callback.c:177:
+	dprintk("%s: %u.%u.%u.%u NFSv4 callback!\n", __FUNCTION__, NIPQUAD(addr->sin_addr));

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#169: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: fs/nfs/client.c:1:
+/* client.c: NFS client sharing and management code

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: fs/nfs/client.c:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: fs/nfs/client.c:66:
+	if ((clp = kzalloc(sizeof(*clp), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: fs/nfs/client.c:72:
+		dprintk("%s: couldn't start rpciod! Error = %d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#245: FILE: fs/nfs/client.c:72:
+				__FUNCTION__, error);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_free_client', this function's name, in a string
#302: FILE: fs/nfs/client.c:129:
+	dprintk("--> nfs_free_client(%d)\n", clp->cl_nfsversion);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: fs/nfs/client.c:142:
+		BUG_ON(!list_empty(&clp->cl_state_owners));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#327: FILE: fs/nfs/client.c:154:
+	if (__test_and_clear_bit(NFS_CS_RPCIOD, &clp->cl_res_state))
+	rpciod_down();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_free_client', this function's name, in a string
#333: FILE: fs/nfs/client.c:160:
+	dprintk("<-- nfs_free_client()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_put_client', this function's name, in a string
#341: FILE: fs/nfs/client.c:168:
+	dprintk("--> nfs_put_client({%d})\n", atomic_read(&clp->cl_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: fs/nfs/client.c:174:
+		BUG_ON(!list_empty(&clp->cl_superblocks));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: fs/nfs/client.c:220:
+	BUG_ON(clp->cl_cons_state == 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_client', this function's name, in a string
#409: FILE: fs/nfs/client.c:236:
+	dprintk("--> nfs_get_client(%s,"NIPQUAD_FMT":%d,%d)\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#409: FILE: fs/nfs/client.c:236:
+	dprintk("--> nfs_get_client(%s,"NIPQUAD_FMT":%d,%d)\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_client', this function's name, in a string
#435: FILE: fs/nfs/client.c:262:
+	dprintk("--> nfs_get_client() = %p [new]\n", clp);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_client', this function's name, in a string
#474: FILE: fs/nfs/client.c:301:
+	dprintk("--> nfs_get_client() = %p [share]\n", clp);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#503: FILE: fs/nfs/delegation.c:149:
+					__FUNCTION__, NIPQUAD(clp->cl_addr.sin_addr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#538: FILE: fs/nfs/internal.h:19:
+extern void nfs_put_client(struct nfs_client *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_client *' should also have an identifier name
#538: FILE: fs/nfs/internal.h:19:
+extern void nfs_put_client(struct nfs_client *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: fs/nfs/internal.h:20:
+extern struct nfs_client *nfs_find_client(const struct sockaddr_in *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct sockaddr_in *' should also have an identifier name
#539: FILE: fs/nfs/internal.h:20:
+extern struct nfs_client *nfs_find_client(const struct sockaddr_in *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#539: FILE: fs/nfs/internal.h:20:
+extern struct nfs_client *nfs_find_client(const struct sockaddr_in *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: fs/nfs/internal.h:21:
+extern struct nfs_client *nfs_get_client(const char *, const struct sockaddr_in *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#540: FILE: fs/nfs/internal.h:21:
+extern struct nfs_client *nfs_get_client(const char *, const struct sockaddr_in *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct sockaddr_in *' should also have an identifier name
#540: FILE: fs/nfs/internal.h:21:
+extern struct nfs_client *nfs_get_client(const char *, const struct sockaddr_in *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#540: FILE: fs/nfs/internal.h:21:
+extern struct nfs_client *nfs_get_client(const char *, const struct sockaddr_in *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: fs/nfs/internal.h:22:
+extern void nfs_mark_client_ready(struct nfs_client *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_client *' should also have an identifier name
#541: FILE: fs/nfs/internal.h:22:
+extern void nfs_mark_client_ready(struct nfs_client *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#541: FILE: fs/nfs/internal.h:22:
+extern void nfs_mark_client_ready(struct nfs_client *, int);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#854: FILE: fs/nfs/super.c:1134:
+				__FUNCTION__);

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#959: FILE: include/linux/nfs_fs_sb.h:23:
+	char *			cl_hostname;	/* hostname of server */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#963: FILE: include/linux/nfs_fs_sb.h:27:
+	struct rpc_clnt *	cl_rpcclient;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#982: FILE: include/linux/nfs_fs_sb.h:46:
+	spinlock_t		cl_lock;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#995: FILE: include/linux/nfs_fs_sb.h:59:
+	struct idmap *		cl_idmap;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054148.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 26 warnings, 8 checks, 861 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054148.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
