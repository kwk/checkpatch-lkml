WARNING:TYPO_SPELLING: 'algorythm' may be misspelled - perhaps 'algorithm'?
#49: 
supplied to file search algorythm, otherwise it will not work. So two
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'algorythms' may be misspelled - perhaps 'algorithms'?
#50: 
different algorythms are used depending on used iocharset:
          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'algorythm' may be misspelled - perhaps 'algorithm'?
#57: 
algorythm. A 256 byte table is created and filled with characters taken
^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
--- linux-2.6.11.1/fs/hfs/catalog.c.orig	2005-03-18 00:34:30.000000000 +0300

CHECK:CAMELCASE: Avoid CamelCase: <CName>
#92: FILE: fs/hfs/catalog.c:28:
+		hfs_triv2mac(&key->cat.CName, name, sbi->unix2mac, sbi->nls);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: fs/hfs/hfs_fs.h:176:
+extern void hfs_cat_build_key(btree_key *, u32, struct qstr *, struct hfs_sb_info *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'btree_key *' should also have an identifier name
#294: FILE: fs/hfs/hfs_fs.h:176:
+extern void hfs_cat_build_key(btree_key *, u32, struct qstr *, struct hfs_sb_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#294: FILE: fs/hfs/hfs_fs.h:176:
+extern void hfs_cat_build_key(btree_key *, u32, struct qstr *, struct hfs_sb_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#294: FILE: fs/hfs/hfs_fs.h:176:
+extern void hfs_cat_build_key(btree_key *, u32, struct qstr *, struct hfs_sb_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hfs_sb_info *' should also have an identifier name
#294: FILE: fs/hfs/hfs_fs.h:176:
+extern void hfs_cat_build_key(btree_key *, u32, struct qstr *, struct hfs_sb_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: fs/hfs/hfs_fs.h:240:
+extern unsigned char *hfs_load_charset(char *iocharset, int codepage);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: fs/hfs/hfs_fs.h:241:
+extern unsigned char *hfs_revert_charset(unsigned char *mac2unix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: fs/hfs/hfs_fs.h:242:
+extern void hfs_triv2mac(struct hfs_name *, struct qstr *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hfs_name *' should also have an identifier name
#306: FILE: fs/hfs/hfs_fs.h:242:
+extern void hfs_triv2mac(struct hfs_name *, struct qstr *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#306: FILE: fs/hfs/hfs_fs.h:242:
+extern void hfs_triv2mac(struct hfs_name *, struct qstr *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#306: FILE: fs/hfs/hfs_fs.h:242:
+extern void hfs_triv2mac(struct hfs_name *, struct qstr *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nls_table *' should also have an identifier name
#306: FILE: fs/hfs/hfs_fs.h:242:
+extern void hfs_triv2mac(struct hfs_name *, struct qstr *, unsigned char *, struct nls_table *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: fs/hfs/hfs_fs.h:243:
+extern int hfs_mac2triv(char *, const struct hfs_name *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#307: FILE: fs/hfs/hfs_fs.h:243:
+extern int hfs_mac2triv(char *, const struct hfs_name *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct hfs_name *' should also have an identifier name
#307: FILE: fs/hfs/hfs_fs.h:243:
+extern int hfs_mac2triv(char *, const struct hfs_name *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#307: FILE: fs/hfs/hfs_fs.h:243:
+extern int hfs_mac2triv(char *, const struct hfs_name *, unsigned char *, struct nls_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nls_table *' should also have an identifier name
#307: FILE: fs/hfs/hfs_fs.h:243:
+extern int hfs_mac2triv(char *, const struct hfs_name *, unsigned char *, struct nls_table *);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#340: FILE: fs/hfs/super.c:72:
+	if (hsb->nls)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#345: FILE: fs/hfs/super.c:77:
+	if (hsb->mac2unix)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: fs/hfs/super.c:82:
+	if (hsb->unix2mac)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#355: FILE: fs/hfs/super.c:87:
+	if (hsb->iocharset)
+	{

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#379: FILE: fs/hfs/super.c:240:
+			hsb->codepage = simple_strtoul(value, &value, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#389: FILE: fs/hfs/super.c:252:
+		} else if (!strcmp(this_char, "iocharset") && value) {
+                       if (hsb->iocharset)

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: fs/hfs/super.c:253:
+                       if (hsb->iocharset)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: fs/hfs/super.c:253:
+                       if (hsb->iocharset)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#390: FILE: fs/hfs/super.c:253:
+                       if (hsb->iocharset)
+                               kfree(hsb->iocharset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: fs/hfs/super.c:254:
+                               kfree(hsb->iocharset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: fs/hfs/super.c:254:
+                               kfree(hsb->iocharset);$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#391: FILE: fs/hfs/super.c:254:
+                       if (hsb->iocharset)
+                               kfree(hsb->iocharset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: fs/hfs/super.c:255:
+                       hsb->iocharset = kmalloc(strlen(value)+1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: fs/hfs/super.c:255:
+                       hsb->iocharset = kmalloc(strlen(value)+1, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: fs/hfs/super.c:255:
+                       hsb->iocharset = kmalloc(strlen(value)+1, GFP_KERNEL);
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: fs/hfs/super.c:256:
+                       if (!hsb->iocharset)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: fs/hfs/super.c:256:
+                       if (!hsb->iocharset)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#393: FILE: fs/hfs/super.c:256:
+                       if (!hsb->iocharset)
+                               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: fs/hfs/super.c:257:
+                               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: fs/hfs/super.c:257:
+                               return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: fs/hfs/super.c:258:
+                       strcpy(hsb->iocharset, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: fs/hfs/super.c:258:
+                       strcpy(hsb->iocharset, value);$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#412: FILE: fs/hfs/super.c:321:
+	if (sbi->iocharset)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#414: FILE: fs/hfs/super.c:323:
+		if (strcmp(sbi->iocharset, "utf8"))
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#423: FILE: fs/hfs/super.c:332:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#423: FILE: fs/hfs/super.c:332:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: fs/hfs/trans.c:40:
+	sprintf(buf,"cp%d",codepage);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: fs/hfs/trans.c:40:
+	sprintf(buf,"cp%d",codepage);
 	                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: fs/hfs/trans.c:54:
+		memset (mac2unix, 0, 256);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#495: FILE: fs/hfs/trans.c:55:
+		memset (buf, 0, sizeof(buf));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#496: FILE: fs/hfs/trans.c:56:
+		for(i=0; i<256; i++) {
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#496: FILE: fs/hfs/trans.c:56:
+		for(i=0; i<256; i++) {
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#496: FILE: fs/hfs/trans.c:56:
+		for(i=0; i<256; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#501: FILE: fs/hfs/trans.c:61:
+				/* FIXME: To enable UTF-8 support you'll need to:
+				   1. Replace the following '1' with NLS_MAX_CHARSET_SIZE;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#503: FILE: fs/hfs/trans.c:63:
+				   3. Rework reverse translation routine (reverse translation table would

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#507: FILE: fs/hfs/trans.c:67:
+				if (clen > 0)
+				{

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#511: FILE: fs/hfs/trans.c:71:
+						hfs_warn ("hfs_fs: duplicating character %02X (translated for second time from %02X) in NLS tables!\n", mac2unix[i], i);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#511: FILE: fs/hfs/trans.c:71:
+						hfs_warn ("hfs_fs: duplicating character %02X (translated for second time from %02X) in NLS tables!\n", mac2unix[i], i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: fs/hfs/trans.c:72:
+						kfree (mac2unix);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#522: FILE: fs/hfs/trans.c:82:
+		for(i=1; i<256; i++) {
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#522: FILE: fs/hfs/trans.c:82:
+		for(i=1; i<256; i++) {
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#522: FILE: fs/hfs/trans.c:82:
+		for(i=1; i<256; i++) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: fs/hfs/trans.c:88:
+						hfs_warn ("hfs_fs: weird, extra untranslated characters appear! Kernel BUG!\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: fs/hfs/trans.c:89:
+						kfree (mac2unix);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: fs/hfs/trans.c:102:
+^Ireturn mac2unix;^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#557: FILE: fs/hfs/trans.c:117:
+		for(i=0; i<256; i++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#557: FILE: fs/hfs/trans.c:117:
+		for(i=0; i<256; i++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: fs/hfs/trans.c:117:
+		for(i=0; i<256; i++)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#586: FILE: fs/hfs/trans.c:148:
+			l = nls->char2uni(&p[i], len-i, &uni);
 			                            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#587: FILE: fs/hfs/trans.c:149:
+			if (l > 0)
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#597: FILE: fs/hfs/trans.c:159:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#599: FILE: fs/hfs/trans.c:161:
+			if (l < 0)
+			{

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hfs_mac2triv', this function's name, in a string
#603: FILE: fs/hfs/trans.c:165:
+				hfs_warn("hfs_fs/hfs_mac2triv(): weird, non-translatable character appear! KERNEL BUG!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#607: FILE: fs/hfs/trans.c:169:
+		return dl;
+	} else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#608: FILE: fs/hfs/trans.c:170:
+		for (i = 0; i < len; i++)
+		{

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#627: FILE: fs/hfs/trans.c:194:
+void hfs_triv2mac(struct hfs_name *out, struct qstr *in, unsigned char *table, struct nls_table *nls)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#646: FILE: fs/hfs/trans.c:208:
+			l = utf8_mbtowc(&uni, &src[i], len-i);
 			                                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#647: FILE: fs/hfs/trans.c:209:
+			if (l > 0)
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#652: FILE: fs/hfs/trans.c:214:
+				if (l > 0)
+				{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#659: FILE: fs/hfs/trans.c:221:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#661: FILE: fs/hfs/trans.c:223:
+			if (l < 0)
+			{

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hfs_triv2mac', this function's name, in a string
#666: FILE: fs/hfs/trans.c:228:
+				hfs_warn("hfs_fs/hfs_triv2mac(): weird, non-translatable character appear! KERNEL BUG!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#671: FILE: fs/hfs/trans.c:233:
+		out->len = len = min((unsigned int)HFS_NAMELEN, in->len);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:MINMAX: min() should probably be min_t(unsigned int, HFS_NAMELEN, in->len)
#671: FILE: fs/hfs/trans.c:233:
+		out->len = len = min((unsigned int)HFS_NAMELEN, in->len);

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ignore>
#699: FILE: fs/isofs/inode.c:367:
+	{Opt_ignore, "hfscodepage=%s"},

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#709: FILE: fs/nls/Kconfig:335:
+config NLS_CODEPAGE_10007
+	tristate "Macintosh CP10007 (Russian, Ukrainian)"
+	depends on NLS
+	help
+	  The Macintosh HFS file system family can deal with filenames in
+	  native language character sets. These character sets are stored in
+	  so-called codepages. You need to include the appropriate codepage

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#738: FILE: fs/nls/nls_cp10007.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: fs/nls/nls_cp10007.c:16:
+^I0x0000, 0x0001, 0x0002, 0x0003, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: fs/nls/nls_cp10007.c:17:
+^I0x0004, 0x0005, 0x0006, 0x0007, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: fs/nls/nls_cp10007.c:18:
+^I0x0008, 0x0009, 0x000a, 0x000b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: fs/nls/nls_cp10007.c:19:
+^I0x000c, 0x000d, 0x000e, 0x000f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: fs/nls/nls_cp10007.c:21:
+^I0x0010, 0x0011, 0x0012, 0x0013, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: fs/nls/nls_cp10007.c:22:
+^I0x0014, 0x0015, 0x0016, 0x0017, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: fs/nls/nls_cp10007.c:23:
+^I0x0018, 0x0019, 0x001a, 0x001b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: fs/nls/nls_cp10007.c:24:
+^I0x001c, 0x001d, 0x001e, 0x001f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: fs/nls/nls_cp10007.c:26:
+^I0x0020, 0x0021, 0x0022, 0x0023, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: fs/nls/nls_cp10007.c:27:
+^I0x0024, 0x0025, 0x0026, 0x0027, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: fs/nls/nls_cp10007.c:28:
+^I0x0028, 0x0029, 0x002a, 0x002b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: fs/nls/nls_cp10007.c:29:
+^I0x002c, 0x002d, 0x002e, 0x002f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: fs/nls/nls_cp10007.c:31:
+^I0x0030, 0x0031, 0x0032, 0x0033, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: fs/nls/nls_cp10007.c:32:
+^I0x0034, 0x0035, 0x0036, 0x0037, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: fs/nls/nls_cp10007.c:33:
+^I0x0038, 0x0039, 0x003a, 0x003b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: fs/nls/nls_cp10007.c:34:
+^I0x003c, 0x003d, 0x003e, 0x003f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: fs/nls/nls_cp10007.c:36:
+^I0x0040, 0x0041, 0x0042, 0x0043, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: fs/nls/nls_cp10007.c:37:
+^I0x0044, 0x0045, 0x0046, 0x0047, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: fs/nls/nls_cp10007.c:38:
+^I0x0048, 0x0049, 0x004a, 0x004b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: fs/nls/nls_cp10007.c:39:
+^I0x004c, 0x004d, 0x004e, 0x004f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: fs/nls/nls_cp10007.c:41:
+^I0x0050, 0x0051, 0x0052, 0x0053, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: fs/nls/nls_cp10007.c:42:
+^I0x0054, 0x0055, 0x0056, 0x0057, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: fs/nls/nls_cp10007.c:43:
+^I0x0058, 0x0059, 0x005a, 0x005b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: fs/nls/nls_cp10007.c:44:
+^I0x005c, 0x005d, 0x005e, 0x005f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: fs/nls/nls_cp10007.c:46:
+^I0x0060, 0x0061, 0x0062, 0x0063, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: fs/nls/nls_cp10007.c:47:
+^I0x0064, 0x0065, 0x0066, 0x0067, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: fs/nls/nls_cp10007.c:48:
+^I0x0068, 0x0069, 0x006a, 0x006b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: fs/nls/nls_cp10007.c:49:
+^I0x006c, 0x006d, 0x006e, 0x006f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: fs/nls/nls_cp10007.c:51:
+^I0x0070, 0x0071, 0x0072, 0x0073, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: fs/nls/nls_cp10007.c:52:
+^I0x0074, 0x0075, 0x0076, 0x0077, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: fs/nls/nls_cp10007.c:53:
+^I0x0078, 0x0079, 0x007a, 0x007b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#791: FILE: fs/nls/nls_cp10007.c:54:
+^I0x007c, 0x007d, 0x007e, 0x007f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#793: FILE: fs/nls/nls_cp10007.c:56:
+^I0x0410, 0x0411, 0x0412, 0x0413, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: fs/nls/nls_cp10007.c:57:
+^I0x0414, 0x0415, 0x0416, 0x0417, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: fs/nls/nls_cp10007.c:58:
+^I0x0418, 0x0419, 0x041a, 0x041b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: fs/nls/nls_cp10007.c:59:
+^I0x041c, 0x041d, 0x041e, 0x041f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: fs/nls/nls_cp10007.c:61:
+^I0x0420, 0x0421, 0x0422, 0x0423, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: fs/nls/nls_cp10007.c:62:
+^I0x0424, 0x0425, 0x0426, 0x0427, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: fs/nls/nls_cp10007.c:63:
+^I0x0428, 0x0429, 0x042a, 0x042b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: fs/nls/nls_cp10007.c:64:
+^I0x042c, 0x042d, 0x042e, 0x042f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: fs/nls/nls_cp10007.c:66:
+^I0x2020, 0x00b0, 0x0490, 0x00a3, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: fs/nls/nls_cp10007.c:67:
+^I0x00a7, 0x2022, 0x00b6, 0x0406, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: fs/nls/nls_cp10007.c:68:
+^I0x00ae, 0x00a9, 0x2122, 0x0402, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: fs/nls/nls_cp10007.c:69:
+^I0x0452, 0x2260, 0x0403, 0x0453, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: fs/nls/nls_cp10007.c:71:
+^I0x221e, 0x00b1, 0x2264, 0x2265, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: fs/nls/nls_cp10007.c:72:
+^I0x0456, 0x00b5, 0x0491, 0x0408, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: fs/nls/nls_cp10007.c:73:
+^I0x0404, 0x0454, 0x0407, 0x0457, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: fs/nls/nls_cp10007.c:74:
+^I0x0409, 0x0459, 0x040a, 0x045a, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: fs/nls/nls_cp10007.c:76:
+^I0x0458, 0x0405, 0x00ac, 0x221a, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#814: FILE: fs/nls/nls_cp10007.c:77:
+^I0x0192, 0x2248, 0x2206, 0x00ab, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: fs/nls/nls_cp10007.c:78:
+^I0x00bb, 0x2026, 0x00a0, 0x040b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: fs/nls/nls_cp10007.c:79:
+^I0x045b, 0x040c, 0x045c, 0x0455, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: fs/nls/nls_cp10007.c:81:
+^I0x2013, 0x2014, 0x201c, 0x201d, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: fs/nls/nls_cp10007.c:82:
+^I0x2018, 0x2019, 0x00f7, 0x201e, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: fs/nls/nls_cp10007.c:83:
+^I0x040e, 0x045e, 0x040f, 0x045f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: fs/nls/nls_cp10007.c:84:
+^I0x2116, 0x0401, 0x0451, 0x044f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: fs/nls/nls_cp10007.c:86:
+^I0x0430, 0x0431, 0x0432, 0x0433, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: fs/nls/nls_cp10007.c:87:
+^I0x0434, 0x0435, 0x0436, 0x0437, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#825: FILE: fs/nls/nls_cp10007.c:88:
+^I0x0438, 0x0439, 0x043a, 0x043b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: fs/nls/nls_cp10007.c:89:
+^I0x043c, 0x043d, 0x043e, 0x043f, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: fs/nls/nls_cp10007.c:91:
+^I0x0440, 0x0441, 0x0442, 0x0443, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: fs/nls/nls_cp10007.c:92:
+^I0x0444, 0x0445, 0x0446, 0x0447, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: fs/nls/nls_cp10007.c:93:
+^I0x0448, 0x0449, 0x044a, 0x044b, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: fs/nls/nls_cp10007.c:94:
+^I0x044c, 0x044d, 0x044e, 0x20ac, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: fs/nls/nls_cp10007.c:227:
+^Ipage00, page01, NULL,   NULL,   page04, NULL,   NULL,   NULL,   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: fs/nls/nls_cp10007.c:228:
+^INULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: fs/nls/nls_cp10007.c:229:
+^INULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: fs/nls/nls_cp10007.c:230:
+^INULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   NULL,   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: fs/nls/nls_cp10007.c:231:
+^Ipage20, page21, page22, NULL,   NULL,   NULL,   NULL,   NULL,   $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1092: FILE: fs/nls/nls_cp10007.mod.c:1:
+#include <linux/module.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".gnu.linkonce.this_module") over __attribute__((section(".gnu.linkonce.this_module")))
#1100: FILE: fs/nls/nls_cp10007.mod.c:9:
+__attribute__((section(".gnu.linkonce.this_module"))) = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: fs/nls/nls_cp10007.mod.c:10:
+ .name = __stringify(KBUILD_MODNAME),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: fs/nls/nls_cp10007.mod.c:11:
+ .init = init_module,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: fs/nls/nls_cp10007.mod.c:13:
+ .exit = cleanup_module,$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#1110: FILE: fs/nls/nls_cp10007.mod.c:19:
+__attribute__((section(".modinfo"))) =

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#1120: FILE: fs/udf/super.c:277:
+	Opt_err, Opt_ignore

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: Documentation/filesystems/hfs.txt:48:
+^I$

WARNING:TYPO_SPELLING: 'behavour' may be misspelled - perhaps 'behaviour'?
#1170: FILE: Documentation/filesystems/hfs.txt:51:
+	any problems, remove it, this will restore old behavour of the
 	                                               ^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 105 errors, 50 warnings, 12 checks, 1027 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
