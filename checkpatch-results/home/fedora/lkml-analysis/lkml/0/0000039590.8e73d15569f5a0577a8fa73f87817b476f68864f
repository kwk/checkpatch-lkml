WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#104: FILE: include/linux/securebits.h:22:
+/* When set, exec()ing a suid/sgid program does not force reinstate
+   all "regular" capabilities. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#104: FILE: include/linux/securebits.h:22:
+   all "regular" capabilities. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#140: FILE: security/commoncap.c:102:
+	 * cap_capset_set will intersect them anyway */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#149: FILE: security/commoncap.c:111:
+	target->cap_inheritable = cap_intersect (*permitted, *inheritable);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: security/commoncap.c:120:
+	cap_set_full (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: security/commoncap.c:122:
+	cap_set_full (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#164: FILE: security/commoncap.c:125:
+	if (!issecure (SECURE_NO_SXID_SANITIZE) && (bprm->is_suid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#165: FILE: security/commoncap.c:126:
+	if (!issecure (SECURE_NO_SXID_SANITIZE) && (bprm->is_suid
+						    || bprm->is_sgid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#169: FILE: security/commoncap.c:130:
+		if ((current->uid != 0 && current->euid != 0
+		     && current->suid != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#170: FILE: security/commoncap.c:131:
+		     && current->suid != 0)
+		    || issecure (SECURE_NOROOT)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#170: FILE: security/commoncap.c:131:
+		    || issecure (SECURE_NOROOT)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#172: FILE: security/commoncap.c:133:
+			/* Ensure that they don't get _more_ caps when they
+			   might not expect it.  Note that dropping

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: security/commoncap.c:137:
+			   soooooo ugly! */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: security/commoncap.c:171:
+	new_effective = cap_intersect (bprm->cap_permitted, bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#219: FILE: security/commoncap.c:172:
+	new_effective = cap_intersect (new_effective, cap_bset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#220: FILE: security/commoncap.c:173:
+	working = cap_intersect (bprm->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#222: FILE: security/commoncap.c:175:
+	working = cap_intersect (working, current->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: security/commoncap.c:176:
+	new_effective = cap_combine (new_effective, working);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#234: FILE: security/commoncap.c:192:
+				new_effective = cap_intersect (new_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#262: FILE: security/commoncap.c:210:
+	cap_task_post_setuid (old_ruid, old_euid, old_suid, LSM_SETID_RES);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: security/commoncap.c:219:
+	   test between the old and new capability sets. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#278: FILE: security/commoncap.c:221:
+	return ((bprm->is_suid || bprm->is_sgid)
+		&& !cap_issubset (bprm->cap_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: security/commoncap.c:221:
+		&& !cap_issubset (bprm->cap_permitted,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#288: FILE: security/commoncap.c:288:
+		current->cap_inheritable
+			= cap_intersect (current->cap_inheritable,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: security/commoncap.c:288:
+			= cap_intersect (current->cap_inheritable,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#297: FILE: security/commoncap.c:295:
+	if (old_euid != 0 && current->euid == 0 && !current->keep_capabilities) {
 		current->cap_effective = current->cap_permitted;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039590.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 21 warnings, 5 checks, 213 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039590.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
