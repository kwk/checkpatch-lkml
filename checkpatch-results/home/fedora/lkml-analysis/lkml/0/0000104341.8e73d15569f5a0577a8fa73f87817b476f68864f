WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootComplete>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <PktCmd>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#36: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete(struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP);

CHECK:CAMELCASE: Avoid CamelCase: <RIOAtVec2Ctrl>
#51: FILE: drivers/char/rio/rioboot.c:85:
+static uchar RIOAtVec2Ctrl[] = {

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeRTA>
#80: FILE: drivers/char/rio/rioboot.c:107:
+int RIOBootCodeRTA(p, rbp)

CHECK:CAMELCASE: Avoid CamelCase: <DownLoad>
#82: FILE: drivers/char/rio/rioboot.c:109:
+struct DownLoad *rbp;

CHECK:SPACING: No space is necessary after a cast
#95: FILE: drivers/char/rio/rioboot.c:119:
+	rio_dprintk(RIO_DEBUG_BOOT, "Data at user address 0x%x\n", (int) rbp->DataP);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <DataP>
#95: FILE: drivers/char/rio/rioboot.c:119:
+	rio_dprintk(RIO_DEBUG_BOOT, "Data at user address 0x%x\n", (int) rbp->DataP);

WARNING:TYPO_SPELLING: 'asside' may be misspelled - perhaps 'aside'?
#102: FILE: drivers/char/rio/rioboot.c:122:
+	 ** Check that we have set asside enough memory for this
 	                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#104: FILE: drivers/char/rio/rioboot.c:124:
+	if (rbp->Count > SIXTY_FOUR_K) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOBooting>
#115: FILE: drivers/char/rio/rioboot.c:132:
+	if (p->RIOBooting) {

CHECK:SPACING: No space is necessary after a cast
#157: FILE: drivers/char/rio/rioboot.c:152:
+	bzero((caddr_t) p->RIOBootPackets, offset);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootPackets>
#157: FILE: drivers/char/rio/rioboot.c:152:
+	bzero((caddr_t) p->RIOBootPackets, offset);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#163: FILE: drivers/char/rio/rioboot.c:158:
+	if (copyin((int) rbp->DataP, ((caddr_t) (p->RIOBootPackets)) + offset, rbp->Count) == COPYFAIL) {

CHECK:SPACING: No space is necessary after a cast
#163: FILE: drivers/char/rio/rioboot.c:158:
+	if (copyin((int) rbp->DataP, ((caddr_t) (p->RIOBootPackets)) + offset, rbp->Count) == COPYFAIL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOBootPackets'
#163: FILE: drivers/char/rio/rioboot.c:158:
+	if (copyin((int) rbp->DataP, ((caddr_t) (p->RIOBootPackets)) + offset, rbp->Count) == COPYFAIL) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <RIONumBootPkts>
#181: FILE: drivers/char/rio/rioboot.c:170:
+	p->RIONumBootPkts = (rbp->Count + offset) / RTA_BOOT_DATA_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCount>
#182: FILE: drivers/char/rio/rioboot.c:171:
+	p->RIOBootCount = rbp->Count;

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#196: FILE: drivers/char/rio/rioboot.c:182:
+	switch (HostP->Type) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#204: FILE: drivers/char/rio/rioboot.c:185:
+		WBYTE(HostP->Control, BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF]);

CHECK:CAMELCASE: Avoid CamelCase: <Control>
#204: FILE: drivers/char/rio/rioboot.c:185:
+		WBYTE(HostP->Control, BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF]);

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#204: FILE: drivers/char/rio/rioboot.c:185:
+		WBYTE(HostP->Control, BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF]);

CHECK:CAMELCASE: Avoid CamelCase: <Ivec>
#204: FILE: drivers/char/rio/rioboot.c:185:
+		WBYTE(HostP->Control, BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF]);

CHECK:CAMELCASE: Avoid CamelCase: <xF>
#204: FILE: drivers/char/rio/rioboot.c:185:
+		WBYTE(HostP->Control, BOOT_FROM_RAM | EXTERNAL_BUS_ON | HostP->Mode | RIOAtVec2Ctrl[HostP->Ivec & 0xF]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: drivers/char/rio/rioboot.c:191:
+^I^I ** MCA handles IRQ vectors differently, so we don't write $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 157 exceeds 100 columns
#233: FILE: drivers/char/rio/rioboot.c:203:
+		OUTBZ(HostP->Slot, EISA_CONTROL_PORT, HostP->Mode | RIOEisaVec2Ctrl[HostP->Ivec] | EISA_TP_RUN | EISA_TP_BUS_ENABLE | EISA_TP_BOOT_FROM_RAM);

CHECK:CAMELCASE: Avoid CamelCase: <Slot>
#233: FILE: drivers/char/rio/rioboot.c:203:
+		OUTBZ(HostP->Slot, EISA_CONTROL_PORT, HostP->Mode | RIOEisaVec2Ctrl[HostP->Ivec] | EISA_TP_RUN | EISA_TP_BUS_ENABLE | EISA_TP_BOOT_FROM_RAM);

CHECK:CAMELCASE: Avoid CamelCase: <RIOEisaVec2Ctrl>
#233: FILE: drivers/char/rio/rioboot.c:203:
+		OUTBZ(HostP->Slot, EISA_CONTROL_PORT, HostP->Mode | RIOEisaVec2Ctrl[HostP->Ivec] | EISA_TP_RUN | EISA_TP_BUS_ENABLE | EISA_TP_BOOT_FROM_RAM);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeHOST>
#265: FILE: drivers/char/rio/rioboot.c:234:
+int RIOBootCodeHOST(p, rbp)

CHECK:CAMELCASE: Avoid CamelCase: <RIONumHosts>
#284: FILE: drivers/char/rio/rioboot.c:254:
+	for (host = 0; host < p->RIONumHosts; host++) {

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#291: FILE: drivers/char/rio/rioboot.c:258:
+		rio_dprintk(RIO_DEBUG_BOOT, "Host Type = 0x%x, Mode = 0x%x, IVec = 0x%x\n", HostP->Type, HostP->Mode, HostP->Ivec);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: drivers/char/rio/rioboot.c:260:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#296: FILE: drivers/char/rio/rioboot.c:261:
+		if ((HostP->Flags & RUN_STATE) != RC_WAITING) {

CHECK:SPACING: No space is necessary after a cast
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];
 		                   ^

CHECK:CAMELCASE: Avoid CamelCase: <StartP>
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];

CHECK:CAMELCASE: Avoid CamelCase: <Cad>
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];

CHECK:CAMELCASE: Avoid CamelCase: <RIOConf>
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];

CHECK:CAMELCASE: Avoid CamelCase: <HostLoadBase>
#325: FILE: drivers/char/rio/rioboot.c:277:
+		StartP = (caddr_t) & Cad[p->RIOConf.HostLoadBase - rbp->Count];

CHECK:SPACING: No space is necessary after a cast
#327: FILE: drivers/char/rio/rioboot.c:279:
+		rio_dprintk(RIO_DEBUG_BOOT, "kernel virtual address for host is 0x%x\n", (int) Cad);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#328: FILE: drivers/char/rio/rioboot.c:280:
+		rio_dprintk(RIO_DEBUG_BOOT, "kernel virtual address for download is 0x%x\n", (int) StartP);

CHECK:SPACING: No space is necessary after a cast
#328: FILE: drivers/char/rio/rioboot.c:280:
+		rio_dprintk(RIO_DEBUG_BOOT, "kernel virtual address for download is 0x%x\n", (int) StartP);

CHECK:SPACING: No space is necessary after a cast
#363: FILE: drivers/char/rio/rioboot.c:294:
+		RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHostReset>
#363: FILE: drivers/char/rio/rioboot.c:294:
+		RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#363: FILE: drivers/char/rio/rioboot.c:294:
+		RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

CHECK:CAMELCASE: Avoid CamelCase: <CardP>
#363: FILE: drivers/char/rio/rioboot.c:294:
+		RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: drivers/char/rio/rioboot.c:304:
+^I^I ** PCI hostcard can't cope with 32 bit accesses and so need to copy $

CHECK:CAMELCASE: Avoid CamelCase: <DownCode>
#382: FILE: drivers/char/rio/rioboot.c:311:
+			if (!DownCode) {

CHECK:SPACING: No space is necessary after a cast
#394: FILE: drivers/char/rio/rioboot.c:319:
+			if (copyin((int) rbp->DataP, DownCode, rbp->Count) == COPYFAIL) {

CHECK:CAMELCASE: Avoid CamelCase: <Copy>
#404: FILE: drivers/char/rio/rioboot.c:327:
+			HostP->Copy(DownCode, StartP, rbp->Count);

CHECK:SPACING: No space is necessary after a cast
#411: FILE: drivers/char/rio/rioboot.c:330:
+		} else if (copyin((int) rbp->DataP, StartP, rbp->Count) == COPYFAIL) {

WARNING:TYPO_SPELLING: 'Upto' may be misspelled - perhaps 'Up to'?
#498: FILE: drivers/char/rio/rioboot.c:342:
+		 ** Upto this point the code has been fairly rational, and possibly
 		    ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#563: FILE: drivers/char/rio/rioboot.c:407:
+
+

CHECK:SPACING: No space is necessary after a cast
#571: FILE: drivers/char/rio/rioboot.c:414:
+		DestP = (BYTE *) & Cad[0x7FF8];	/* <<<---- READ THE ABOVE COMMENTS */

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#571: FILE: drivers/char/rio/rioboot.c:414:
+		DestP = (BYTE *) & Cad[0x7FF8];	/* <<<---- READ THE ABOVE COMMENTS */
 		                 ^

CHECK:CAMELCASE: Avoid CamelCase: <DestP>
#571: FILE: drivers/char/rio/rioboot.c:414:
+		DestP = (BYTE *) & Cad[0x7FF8];	/* <<<---- READ THE ABOVE COMMENTS */

CHECK:SPACING: No space is necessary after a cast
#604: FILE: drivers/char/rio/rioboot.c:430:
+		WBYTE(DestP[0], NFIX(((ushort) (~offset) >> (ushort) 12) & 0xF));

CHECK:CAMELCASE: Avoid CamelCase: <OldParmMap>
#635: FILE: drivers/char/rio/rioboot.c:453:
+		rio_dprintk(RIO_DEBUG_BOOT, "Original parmmap is 0x%x\n", OldParmMap);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#648: FILE: drivers/char/rio/rioboot.c:460:
+		rio_dprintk(RIO_DEBUG_BOOT, "Host Type = 0x%x, Mode = 0x%x, IVec = 0x%x\n", HostP->Type, HostP->Mode, HostP->Ivec);

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#662: FILE: drivers/char/rio/rioboot.c:467:
+		 ** Now, wait for upto five seconds for the Tp to setup the parmmap
 		                  ^^^^

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#665: FILE: drivers/char/rio/rioboot.c:470:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && (RWORD(HostP->__ParmMapR) == OldParmMap); wait_count++) {

CHECK:CAMELCASE: Avoid CamelCase: <StartupTime>
#665: FILE: drivers/char/rio/rioboot.c:470:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && (RWORD(HostP->__ParmMapR) == OldParmMap); wait_count++) {

CHECK:CAMELCASE: Avoid CamelCase: <__ParmMapR>
#665: FILE: drivers/char/rio/rioboot.c:470:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && (RWORD(HostP->__ParmMapR) == OldParmMap); wait_count++) {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#666: FILE: drivers/char/rio/rioboot.c:471:
+			rio_dprintk(RIO_DEBUG_BOOT, "Checkout %d, 0x%x\n", wait_count, RWORD(HostP->__ParmMapR));

CHECK:SPACING: No space is necessary after a cast
#731: FILE: drivers/char/rio/rioboot.c:485:
+			RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#745: FILE: drivers/char/rio/rioboot.c:499:
+		ParmMapP = (PARM_MAP *) RIO_PTR(Cad, RWORD(HostP->__ParmMapR));

CHECK:SPACING: No space is necessary after a cast
#746: FILE: drivers/char/rio/rioboot.c:500:
+		rio_dprintk(RIO_DEBUG_BOOT, "ParmMapP : %x\n", (int) ParmMapP);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#747: FILE: drivers/char/rio/rioboot.c:501:
+		ParmMapP = (PARM_MAP *) ((unsigned long) Cad + (unsigned long) ((RWORD((HostP->__ParmMapR))) & 0xFFFF));

CHECK:SPACING: No space is necessary after a cast
#747: FILE: drivers/char/rio/rioboot.c:501:
+		ParmMapP = (PARM_MAP *) ((unsigned long) Cad + (unsigned long) ((RWORD((HostP->__ParmMapR))) & 0xFFFF));

CHECK:SPACING: No space is necessary after a cast
#748: FILE: drivers/char/rio/rioboot.c:502:
+		rio_dprintk(RIO_DEBUG_BOOT, "ParmMapP : %x\n", (int) ParmMapP);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: drivers/char/rio/rioboot.c:506:
+^I^I ** with a mask to say how many PHBs to use, and $

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#756: FILE: drivers/char/rio/rioboot.c:510:
+			rio_dprintk(RIO_DEBUG_BOOT, "RIO Mesg Run Fail %s\n", HostP->Name);

CHECK:SPACING: No space is necessary after a cast
#760: FILE: drivers/char/rio/rioboot.c:514:
+			RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#767: FILE: drivers/char/rio/rioboot.c:521:
+		 ** this is a wait of upto two seconds....
 		                      ^^^^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#769: FILE: drivers/char/rio/rioboot.c:523:
+		rio_dprintk(RIO_DEBUG_BOOT, "Looking for init_done - %d ticks\n", p->RIOConf.StartupTime);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#774: FILE: drivers/char/rio/rioboot.c:525:
+		for (wait_count = 0; (wait_count < p->RIOConf.StartupTime) && !RWORD(ParmMapP->init_done); wait_count++) {

CHECK:SPACING: No space is necessary after a cast
#792: FILE: drivers/char/rio/rioboot.c:536:
+			RIOHostReset(HostP->Type, (struct DpRam *) HostP->CardP, HostP->Slot);

CHECK:CAMELCASE: Avoid CamelCase: <UniqueNum>
#804: FILE: drivers/char/rio/rioboot.c:544:
+		rio_dprintk(RIO_DEBUG_BOOT, "Host ID %x Running\n", HostP->UniqueNum);

CHECK:SPACING: No space is necessary after a cast
#812: FILE: drivers/char/rio/rioboot.c:549:
+		WWORD(ParmMapP->timer, (short) p->RIOConf.Timer);

CHECK:CAMELCASE: Avoid CamelCase: <Timer>
#812: FILE: drivers/char/rio/rioboot.c:549:
+		WWORD(ParmMapP->timer, (short) p->RIOConf.Timer);

CHECK:CAMELCASE: Avoid CamelCase: <PhbP>
#827: FILE: drivers/char/rio/rioboot.c:556:
+		HostP->PhbP = (PHB *) RIO_PTR(Cad, RWORD(ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#828: FILE: drivers/char/rio/rioboot.c:557:
+		HostP->RupP = (RUP *) RIO_PTR(Cad, RWORD(ParmMapP->rups));

CHECK:SPACING: No space is necessary after a cast
#829: FILE: drivers/char/rio/rioboot.c:558:
+		HostP->PhbNumP = (ushort *) RIO_PTR(Cad, RWORD(ParmMapP->phb_num_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <PhbNumP>
#829: FILE: drivers/char/rio/rioboot.c:558:
+		HostP->PhbNumP = (ushort *) RIO_PTR(Cad, RWORD(ParmMapP->phb_num_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <LinkStrP>
#830: FILE: drivers/char/rio/rioboot.c:559:
+		HostP->LinkStrP = (LPB *) RIO_PTR(Cad, RWORD(ParmMapP->link_str_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <RupN>
#840: FILE: drivers/char/rio/rioboot.c:564:
+		for (RupN = 0; RupN < MAX_RUP; RupN++) {

CHECK:CAMELCASE: Avoid CamelCase: <UnixRups>
#841: FILE: drivers/char/rio/rioboot.c:565:
+			HostP->UnixRups[RupN].RupP = &HostP->RupP[RupN];

CHECK:CAMELCASE: Avoid CamelCase: <Id>
#842: FILE: drivers/char/rio/rioboot.c:566:
+			HostP->UnixRups[RupN].Id = RupN + 1;

CHECK:CAMELCASE: Avoid CamelCase: <BaseSysPort>
#855: FILE: drivers/char/rio/rioboot.c:574:
+			HostP->UnixRups[RupN + MAX_RUP].BaseSysPort = NO_PORT;

CHECK:CAMELCASE: Avoid CamelCase: <RupLock>
#856: FILE: drivers/char/rio/rioboot.c:575:
+			spin_lock_init(&HostP->UnixRups[RupN + MAX_RUP].RupLock);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#867: FILE: drivers/char/rio/rioboot.c:581:
+		for (PortN = p->RIOFirstPortsMapped; PortN < p->RIOLastPortsMapped + PORTS_PER_RTA; PortN++) {

CHECK:CAMELCASE: Avoid CamelCase: <PortN>
#867: FILE: drivers/char/rio/rioboot.c:581:
+		for (PortN = p->RIOFirstPortsMapped; PortN < p->RIOLastPortsMapped + PORTS_PER_RTA; PortN++) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOFirstPortsMapped>
#867: FILE: drivers/char/rio/rioboot.c:581:
+		for (PortN = p->RIOFirstPortsMapped; PortN < p->RIOLastPortsMapped + PORTS_PER_RTA; PortN++) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPortsMapped>
#867: FILE: drivers/char/rio/rioboot.c:581:
+		for (PortN = p->RIOFirstPortsMapped; PortN < p->RIOLastPortsMapped + PORTS_PER_RTA; PortN++) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOPortp>
#868: FILE: drivers/char/rio/rioboot.c:582:
+			if (p->RIOPortp[PortN]->HostP == HostP) {

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#874: FILE: drivers/char/rio/rioboot.c:587:
+				if (!PortP->Mapped)

CHECK:CAMELCASE: Avoid CamelCase: <Mapped>
#874: FILE: drivers/char/rio/rioboot.c:587:
+				if (!PortP->Mapped)

CHECK:CAMELCASE: Avoid CamelCase: <TxAdd>
#888: FILE: drivers/char/rio/rioboot.c:595:
+				PortP->TxAdd = (WORD *) RIO_PTR(Cad, RWORD(PhbP->tx_add));

CHECK:SPACING: No space is necessary after a cast
#889: FILE: drivers/char/rio/rioboot.c:596:
+				PortP->TxStart = (WORD *) RIO_PTR(Cad, RWORD(PhbP->tx_start));

CHECK:CAMELCASE: Avoid CamelCase: <TxStart>
#889: FILE: drivers/char/rio/rioboot.c:596:
+				PortP->TxStart = (WORD *) RIO_PTR(Cad, RWORD(PhbP->tx_start));

CHECK:SPACING: No space is necessary after a cast
#890: FILE: drivers/char/rio/rioboot.c:597:
+				PortP->TxEnd = (WORD *) RIO_PTR(Cad, RWORD(PhbP->tx_end));

CHECK:CAMELCASE: Avoid CamelCase: <TxEnd>
#890: FILE: drivers/char/rio/rioboot.c:597:
+				PortP->TxEnd = (WORD *) RIO_PTR(Cad, RWORD(PhbP->tx_end));

CHECK:SPACING: No space is necessary after a cast
#891: FILE: drivers/char/rio/rioboot.c:598:
+				PortP->RxRemove = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_remove));

CHECK:CAMELCASE: Avoid CamelCase: <RxRemove>
#891: FILE: drivers/char/rio/rioboot.c:598:
+				PortP->RxRemove = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_remove));

CHECK:SPACING: No space is necessary after a cast
#892: FILE: drivers/char/rio/rioboot.c:599:
+				PortP->RxStart = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_start));

CHECK:CAMELCASE: Avoid CamelCase: <RxStart>
#892: FILE: drivers/char/rio/rioboot.c:599:
+				PortP->RxStart = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_start));

CHECK:SPACING: No space is necessary after a cast
#893: FILE: drivers/char/rio/rioboot.c:600:
+				PortP->RxEnd = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_end));

CHECK:CAMELCASE: Avoid CamelCase: <RxEnd>
#893: FILE: drivers/char/rio/rioboot.c:600:
+				PortP->RxEnd = (WORD *) RIO_PTR(Cad, RWORD(PhbP->rx_end));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#908: FILE: drivers/char/rio/rioboot.c:611:
+		rio_dprintk(RIO_DEBUG_BOOT, "Set the card running... \n");

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootRup>
#945: FILE: drivers/char/rio/rioboot.c:638:
+int RIOBootRup(p, Rup, HostP, PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#945: FILE: drivers/char/rio/rioboot.c:638:
+int RIOBootRup(p, Rup, HostP, PacketP)

CHECK:SPACING: No space is necessary after a cast
#953: FILE: drivers/char/rio/rioboot.c:644:
+	struct PktCmd *PktCmdP = (struct PktCmd *) PacketP->data;

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#987: FILE: drivers/char/rio/rioboot.c:666:
+	if ((RBYTE(PacketP->len) & PKT_CMD_BIT) && (RBYTE(PktCmdP->Command) == BOOT_COMPLETED))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#997: FILE: drivers/char/rio/rioboot.c:672:
+	if (!(CmdBlkP = RIOGetCmdBlk())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#997: FILE: drivers/char/rio/rioboot.c:672:
+	if (!(CmdBlkP = RIOGetCmdBlk())) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOGetCmdBlk>
#997: FILE: drivers/char/rio/rioboot.c:672:
+	if (!(CmdBlkP = RIOGetCmdBlk())) {

CHECK:SPACING: No space is necessary after a cast
#1008: FILE: drivers/char/rio/rioboot.c:680:
+	CmdBlkP->Packet.dest_unit = Rup < (ushort) MAX_RUP ? Rup : 0;

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#1008: FILE: drivers/char/rio/rioboot.c:680:
+	CmdBlkP->Packet.dest_unit = Rup < (ushort) MAX_RUP ? Rup : 0;

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: drivers/char/rio/rioboot.c:686:
+	PktReplyP = (struct PktCmd_M *) CmdBlkP->Packet.data;

CHECK:CAMELCASE: Avoid CamelCase: <PktReplyP>
#1017: FILE: drivers/char/rio/rioboot.c:686:
+	PktReplyP = (struct PktCmd_M *) CmdBlkP->Packet.data;

CHECK:CAMELCASE: Avoid CamelCase: <PktCmd_M>
#1017: FILE: drivers/char/rio/rioboot.c:686:
+	PktReplyP = (struct PktCmd_M *) CmdBlkP->Packet.data;

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#1038: FILE: drivers/char/rio/rioboot.c:696:
+			rio_dprintk(RIO_DEBUG_BOOT, "Unexpected command %d on BOOT RUP %d of host %d\n", PktCmdP->Command, Rup, HostP - p->RIOHosts);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#1038: FILE: drivers/char/rio/rioboot.c:696:
+			rio_dprintk(RIO_DEBUG_BOOT, "Unexpected command %d on BOOT RUP %d of host %d\n", PktCmdP->Command, Rup, HostP - p->RIOHosts);

CHECK:CAMELCASE: Avoid CamelCase: <ShowPacket>
#1039: FILE: drivers/char/rio/rioboot.c:697:
+			ShowPacket(DBG_BOOT, PacketP);

CHECK:CAMELCASE: Avoid CamelCase: <RIOFreeCmdBlk>
#1040: FILE: drivers/char/rio/rioboot.c:698:
+			RIOFreeCmdBlk(CmdBlkP);

CHECK:CAMELCASE: Avoid CamelCase: <BootSequence>
#1090: FILE: drivers/char/rio/rioboot.c:726:
+		PktReplyP->BootSequence.LoadBase = p->RIOConf.RtaLoadBase;

CHECK:CAMELCASE: Avoid CamelCase: <LoadBase>
#1090: FILE: drivers/char/rio/rioboot.c:726:
+		PktReplyP->BootSequence.LoadBase = p->RIOConf.RtaLoadBase;

CHECK:CAMELCASE: Avoid CamelCase: <RtaLoadBase>
#1090: FILE: drivers/char/rio/rioboot.c:726:
+		PktReplyP->BootSequence.LoadBase = p->RIOConf.RtaLoadBase;

CHECK:CAMELCASE: Avoid CamelCase: <CodeSize>
#1091: FILE: drivers/char/rio/rioboot.c:727:
+		PktReplyP->BootSequence.CodeSize = p->RIOBootCount;

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: drivers/char/rio/rioboot.c:731:
+		bcopy("BOOT", (void *) &CmdBlkP->Packet.data[BOOT_SEQUENCE_LEN], 4);

WARNING:LONG_LINE: line length of 192 exceeds 100 columns
#1102: FILE: drivers/char/rio/rioboot.c:733:
+		rio_dprintk(RIO_DEBUG_BOOT, "Boot RTA on Host %d Rup %d - %d (0x%x) packets to 0x%x\n", HostP - p->RIOHosts, Rup, p->RIONumBootPkts, p->RIONumBootPkts, p->RIOConf.RtaLoadBase);

CHECK:CAMELCASE: Avoid CamelCase: <RIOQueueCmdBlk>
#1119: FILE: drivers/char/rio/rioboot.c:743:
+		RIOQueueCmdBlk(HostP, Rup, CmdBlkP);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1131: FILE: drivers/char/rio/rioboot.c:752:
+	rio_dprintk(RIO_DEBUG_BOOT, "Boot block %d on Host %d Rup%d\n", sequence, HostP - p->RIOHosts, Rup);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1138: FILE: drivers/char/rio/rioboot.c:755:
+		rio_dprintk(RIO_DEBUG_BOOT, "Got a request for packet %d, max is %d\n", sequence, p->RIONumBootPkts);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1146: FILE: drivers/char/rio/rioboot.c:761:
+	bcopy(p->RIOBootPackets[p->RIONumBootPkts - sequence - 1], PktReplyP->BootData, RTA_BOOT_DATA_SIZE);

CHECK:CAMELCASE: Avoid CamelCase: <BootData>
#1146: FILE: drivers/char/rio/rioboot.c:761:
+	bcopy(p->RIOBootPackets[p->RIONumBootPkts - sequence - 1], PktReplyP->BootData, RTA_BOOT_DATA_SIZE);

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1177: FILE: drivers/char/rio/rioboot.c:777:
+	struct Map *MapP = NULL;
 	            ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#1177: FILE: drivers/char/rio/rioboot.c:777:
+	struct Map *MapP = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#1177: FILE: drivers/char/rio/rioboot.c:777:
+	struct Map *MapP = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <MapP2>
#1178: FILE: drivers/char/rio/rioboot.c:778:
+	struct Map *MapP2 = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Flag>
#1179: FILE: drivers/char/rio/rioboot.c:779:
+	int Flag;

CHECK:CAMELCASE: Avoid CamelCase: <EmptySlot>
#1182: FILE: drivers/char/rio/rioboot.c:782:
+	int EmptySlot = -1;

CHECK:CAMELCASE: Avoid CamelCase: <MyType>
#1184: FILE: drivers/char/rio/rioboot.c:784:
+	char *MyType, *MyName;

CHECK:CAMELCASE: Avoid CamelCase: <MyName>
#1184: FILE: drivers/char/rio/rioboot.c:784:
+	char *MyType, *MyName;

CHECK:CAMELCASE: Avoid CamelCase: <MyLink>
#1185: FILE: drivers/char/rio/rioboot.c:785:
+	uint MyLink;

CHECK:CAMELCASE: Avoid CamelCase: <RtaType>
#1186: FILE: drivers/char/rio/rioboot.c:786:
+	ushort RtaType;

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1187: FILE: drivers/char/rio/rioboot.c:787:
+	uint RtaUniq = (RBYTE(PktCmdP->UniqNum[0])) + (RBYTE(PktCmdP->UniqNum[1]) << 8) + (RBYTE(PktCmdP->UniqNum[2]) << 16) + (RBYTE(PktCmdP->UniqNum[3]) << 24);

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniq>
#1187: FILE: drivers/char/rio/rioboot.c:787:
+	uint RtaUniq = (RBYTE(PktCmdP->UniqNum[0])) + (RBYTE(PktCmdP->UniqNum[1]) << 8) + (RBYTE(PktCmdP->UniqNum[2]) << 16) + (RBYTE(PktCmdP->UniqNum[3]) << 24);

CHECK:CAMELCASE: Avoid CamelCase: <UniqNum>
#1187: FILE: drivers/char/rio/rioboot.c:787:
+	uint RtaUniq = (RBYTE(PktCmdP->UniqNum[0])) + (RBYTE(PktCmdP->UniqNum[1]) << 8) + (RBYTE(PktCmdP->UniqNum[2]) << 16) + (RBYTE(PktCmdP->UniqNum[3]) << 24);

CHECK:SPACING: No space is necessary after a cast
#1205: FILE: drivers/char/rio/rioboot.c:799:
+	if (Rup >= (ushort) MAX_RUP) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1205: FILE: drivers/char/rio/rioboot.c:799:
+	if (Rup >= (ushort) MAX_RUP) {
[...]
 	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#1206: FILE: drivers/char/rio/rioboot.c:800:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: Host %s has booted an RTA(%d) on link %c\n", HostP->Name, 8 * RtaType, RBYTE(PktCmdP->LinkNum) + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <LinkNum>
#1206: FILE: drivers/char/rio/rioboot.c:800:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: Host %s has booted an RTA(%d) on link %c\n", HostP->Name, 8 * RtaType, RBYTE(PktCmdP->LinkNum) + 'A');

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#1219: FILE: drivers/char/rio/rioboot.c:802:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: RTA %s has booted an RTA(%d) on link %c\n", HostP->Mapping[Rup].Name, 8 * RtaType, RBYTE(PktCmdP->LinkNum) + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <Mapping>
#1219: FILE: drivers/char/rio/rioboot.c:802:
+		rio_dprintk(RIO_DEBUG_BOOT, "RIO: RTA %s has booted an RTA(%d) on link %c\n", HostP->Mapping[Rup].Name, 8 * RtaType, RBYTE(PktCmdP->LinkNum) + 'A');

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'RtaUniq == 0x00000000'
#1224: FILE: drivers/char/rio/rioboot.c:807:
+	if ((RtaUniq == 0x00000000) || (RtaUniq == 0xffffffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'RtaUniq == 0xffffffff'
#1224: FILE: drivers/char/rio/rioboot.c:807:
+	if ((RtaUniq == 0x00000000) || (RtaUniq == 0xffffffff)) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootOk>
#1252: FILE: drivers/char/rio/rioboot.c:817:
+	if (!RIOBootOk(p, HostP, RtaUniq)) {

CHECK:SPACING: No space is necessary after a cast
#1254: FILE: drivers/char/rio/rioboot.c:819:
+		if (Rup < (ushort) MAX_RUP) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOSuspendBootRta>
#1260: FILE: drivers/char/rio/rioboot.c:825:
+			if (RIOSuspendBootRta(HostP, HostP->Mapping[Rup].ID, MyLink)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1260: FILE: drivers/char/rio/rioboot.c:825:
+			if (RIOSuspendBootRta(HostP, HostP->Mapping[Rup].ID, MyLink)) {
+				rio_dprintk(RIO_DEBUG_BOOT, "RTA failed to suspend booting on link %c\n", 'A' + MyLink);
+			}

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1261: FILE: drivers/char/rio/rioboot.c:826:
+				rio_dprintk(RIO_DEBUG_BOOT, "RTA failed to suspend booting on link %c\n", 'A' + MyLink);

CHECK:CAMELCASE: Avoid CamelCase: <WaitNoBoot>
#1269: FILE: drivers/char/rio/rioboot.c:834:
+			WWORD(HostP->LinkStrP[MyLink].WaitNoBoot, 30);

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#1284: FILE: drivers/char/rio/rioboot.c:836:
+		rio_dprintk(RIO_DEBUG_BOOT, "RTA %x not owned - suspend booting down link %c on unit %x\n", RtaUniq, 'A' + MyLink, HostP->Mapping[Rup].RtaUniqueNum);

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniqueNum>
#1284: FILE: drivers/char/rio/rioboot.c:836:
+		rio_dprintk(RIO_DEBUG_BOOT, "RTA %x not owned - suspend booting down link %c on unit %x\n", RtaUniq, 'A' + MyLink, HostP->Mapping[Rup].RtaUniqueNum);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1320: FILE: drivers/char/rio/rioboot.c:854:
+		if ((HostP->Mapping[entry].Flags & SLOT_IN_USE) && (HostP->Mapping[entry].RtaUniqueNum == RtaUniq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'HostP->Mapping[entry].RtaUniqueNum == RtaUniq'
#1320: FILE: drivers/char/rio/rioboot.c:854:
+		if ((HostP->Mapping[entry].Flags & SLOT_IN_USE) && (HostP->Mapping[entry].RtaUniqueNum == RtaUniq)) {

CHECK:CAMELCASE: Avoid CamelCase: <svFlags>
#1324: FILE: drivers/char/rio/rioboot.c:857:
+			RIO_SV_BROADCAST(HostP->svFlags[entry]);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1339: FILE: drivers/char/rio/rioboot.c:859:
+			if ((sysport = HostP->Mapping[entry].SysPort) != NO_PORT) {

CHECK:CAMELCASE: Avoid CamelCase: <SysPort>
#1339: FILE: drivers/char/rio/rioboot.c:859:
+			if ((sysport = HostP->Mapping[entry].SysPort) != NO_PORT) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOFirstPortsBooted>
#1340: FILE: drivers/char/rio/rioboot.c:860:
+				if (sysport < p->RIOFirstPortsBooted)

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPortsBooted>
#1342: FILE: drivers/char/rio/rioboot.c:862:
+				if (sysport > p->RIOLastPortsBooted)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1373: FILE: drivers/char/rio/rioboot.c:880:
+			if (RtaType == TYPE_RTA16) {
[...]
+			} else {
[...]

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1374: FILE: drivers/char/rio/rioboot.c:881:
+				rio_dprintk(RIO_DEBUG_BOOT, "RTA will be given IDs %d+%d\n", entry + 1, entry2 + 1);

CHECK:SPACING: No space is necessary after a cast
#1402: FILE: drivers/char/rio/rioboot.c:891:
+	if (Rup >= (ushort) MAX_RUP) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1449: FILE: drivers/char/rio/rioboot.c:916:
+		if ((HostP->Mapping[entry].Flags & SLOT_TENTATIVE) && (HostP->Mapping[entry].RtaUniqueNum == RtaUniq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'HostP->Mapping[entry].RtaUniqueNum == RtaUniq'
#1449: FILE: drivers/char/rio/rioboot.c:916:
+		if ((HostP->Mapping[entry].Flags & SLOT_TENTATIVE) && (HostP->Mapping[entry].RtaUniqueNum == RtaUniq)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1450: FILE: drivers/char/rio/rioboot.c:917:
+			if (RtaType == TYPE_RTA16) {
[...]
+			} else
[...]

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1452: FILE: drivers/char/rio/rioboot.c:919:
+				if ((HostP->Mapping[entry2].Flags & SLOT_TENTATIVE) && (HostP->Mapping[entry2].RtaUniqueNum == RtaUniq))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'HostP->Mapping[entry2].RtaUniqueNum == RtaUniq'
#1452: FILE: drivers/char/rio/rioboot.c:919:
+				if ((HostP->Mapping[entry2].Flags & SLOT_TENTATIVE) && (HostP->Mapping[entry2].RtaUniqueNum == RtaUniq))

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1453: FILE: drivers/char/rio/rioboot.c:920:
+					rio_dprintk(RIO_DEBUG_BOOT, "Found previous tentative slots (%d+%d)\n", entry, entry2);

CHECK:BRACES: Unbalanced braces around else statement
#1456: FILE: drivers/char/rio/rioboot.c:923:
+			} else

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1457: FILE: drivers/char/rio/rioboot.c:924:
+				rio_dprintk(RIO_DEBUG_BOOT, "Found previous tentative slot (%d)\n", entry);

CHECK:CAMELCASE: Avoid CamelCase: <RIONoMessage>
#1458: FILE: drivers/char/rio/rioboot.c:925:
+			if (!p->RIONoMessage)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1459: FILE: drivers/char/rio/rioboot.c:926:
+				cprintf("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1541: FILE: drivers/char/rio/rioboot.c:958:
+			if ((p->RIOHosts[host].Mapping[rta].Flags & (SLOT_IN_USE | SLOT_TENTATIVE)) && (p->RIOHosts[host].Mapping[rta].RtaUniqueNum == RtaUniq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOHosts[host].Mapping[rta].RtaUniqueNum == RtaUniq'
#1541: FILE: drivers/char/rio/rioboot.c:958:
+			if ((p->RIOHosts[host].Mapping[rta].Flags & (SLOT_IN_USE | SLOT_TENTATIVE)) && (p->RIOHosts[host].Mapping[rta].RtaUniqueNum == RtaUniq)) {

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1543: FILE: drivers/char/rio/rioboot.c:960:
+				MapP = &p->RIOHosts[host].Mapping[rta];
 				^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1544: FILE: drivers/char/rio/rioboot.c:961:
+				if (RtaType == TYPE_RTA16) {
[...]
+				} else
[...]

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#1546: FILE: drivers/char/rio/rioboot.c:963:
+					rio_dprintk(RIO_DEBUG_BOOT, "This RTA is units %d+%d from host %s\n", rta + 1, MapP->ID2, p->RIOHosts[host].Name);

CHECK:BRACES: Unbalanced braces around else statement
#1547: FILE: drivers/char/rio/rioboot.c:964:
+				} else

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#1548: FILE: drivers/char/rio/rioboot.c:965:
+					rio_dprintk(RIO_DEBUG_BOOT, "This RTA is unit %d from host %s\n", rta + 1, p->RIOHosts[host].Name);

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1602: FILE: drivers/char/rio/rioboot.c:981:
+	if (!MapP) {
 	     ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1605: FILE: drivers/char/rio/rioboot.c:984:
+			rio_dprintk(RIO_DEBUG_BOOT, "Check table entry %d (%x)", rta, p->RIOSavedTable[rta].RtaUniqueNum);

CHECK:CAMELCASE: Avoid CamelCase: <RIOSavedTable>
#1605: FILE: drivers/char/rio/rioboot.c:984:
+			rio_dprintk(RIO_DEBUG_BOOT, "Check table entry %d (%x)", rta, p->RIOSavedTable[rta].RtaUniqueNum);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1607: FILE: drivers/char/rio/rioboot.c:986:
+			if ((p->RIOSavedTable[rta].Flags & SLOT_IN_USE) && (p->RIOSavedTable[rta].RtaUniqueNum == RtaUniq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOSavedTable[rta].RtaUniqueNum == RtaUniq'
#1607: FILE: drivers/char/rio/rioboot.c:986:
+			if ((p->RIOSavedTable[rta].Flags & SLOT_IN_USE) && (p->RIOSavedTable[rta].RtaUniqueNum == RtaUniq)) {

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1608: FILE: drivers/char/rio/rioboot.c:987:
+				MapP = &p->RIOSavedTable[rta];
 				^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1610: FILE: drivers/char/rio/rioboot.c:989:
+				if (RtaType == TYPE_RTA16) {
[...]
+				} else
[...]

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1611: FILE: drivers/char/rio/rioboot.c:990:
+					for (entry2 = rta + 1; entry2 < TOTAL_MAP_ENTRIES; entry2++) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1612: FILE: drivers/char/rio/rioboot.c:991:
+						if (p->RIOSavedTable[entry2].RtaUniqueNum == RtaUniq)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1612: FILE: drivers/char/rio/rioboot.c:991:
+						if (p->RIOSavedTable[entry2].RtaUniqueNum == RtaUniq)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1616: FILE: drivers/char/rio/rioboot.c:995:
+					rio_dprintk(RIO_DEBUG_BOOT, "This RTA is from table entries %d+%d\n", rta, entry2);

CHECK:BRACES: Unbalanced braces around else statement
#1617: FILE: drivers/char/rio/rioboot.c:996:
+				} else

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1618: FILE: drivers/char/rio/rioboot.c:997:
+					rio_dprintk(RIO_DEBUG_BOOT, "This RTA is from table entry %d\n", rta);

CHECK:CAMELCASE: Avoid CamelCase: <RIOFindFreeID>
#1669: FILE: drivers/char/rio/rioboot.c:1018:
+		if (RIOFindFreeID(p, HostP, &entry, &entry2) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <RIODefaultName>
#1670: FILE: drivers/char/rio/rioboot.c:1019:
+			RIODefaultName(p, HostP, entry);

CHECK:CAMELCASE: Avoid CamelCase: <FillSlot>
#1671: FILE: drivers/char/rio/rioboot.c:1020:
+			FillSlot(entry, entry2, RtaUniq, HostP);

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1716: FILE: drivers/char/rio/rioboot.c:1043:
+		if (MapP) {
 		    ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1716: FILE: drivers/char/rio/rioboot.c:1043:
+		if (MapP) {
[...]
-			RIO_SV_BROADCAST(HostP->svFlags[entry2]);
[...]

WARNING:LONG_LINE_STRING: line length of 134 exceeds 100 columns
#1718: FILE: drivers/char/rio/rioboot.c:1045:
+				rio_dprintk(RIO_DEBUG_BOOT, "This RTA configured on another host - move entry to current host (1)\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1721: FILE: drivers/char/rio/rioboot.c:1048:
+				HostP->Mapping[entry].Flags = SLOT_IN_USE | RTA_BOOTED | RTA_NEWBOOT;

CHECK:CAMELCASE: Avoid CamelCase: <RIOReMapPorts>
#1739: FILE: drivers/char/rio/rioboot.c:1052:
+				RIOReMapPorts(p, HostP, &HostP->Mapping[entry]);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1744: FILE: drivers/char/rio/rioboot.c:1057:
+				rio_dprintk(RIO_DEBUG_BOOT, "SysPort %d, Name %s\n", (int) MapP->SysPort, MapP->Name);

CHECK:SPACING: No space is necessary after a cast
#1744: FILE: drivers/char/rio/rioboot.c:1057:
+				rio_dprintk(RIO_DEBUG_BOOT, "SysPort %d, Name %s\n", (int) MapP->SysPort, MapP->Name);

WARNING:LONG_LINE_STRING: line length of 136 exceeds 100 columns
#1746: FILE: drivers/char/rio/rioboot.c:1059:
+				rio_dprintk(RIO_DEBUG_BOOT, "This RTA has a tentative entry on another host - delete that entry (1)\n");

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1747: FILE: drivers/char/rio/rioboot.c:1060:
+				HostP->Mapping[entry].Flags = SLOT_TENTATIVE | RTA_BOOTED | RTA_NEWBOOT;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1761: FILE: drivers/char/rio/rioboot.c:1066:
+				if (Flag & SLOT_IN_USE) {
[...]
-			rio_dprintk (RIO_DEBUG_BOOT, "SysPort %d, Name %s\n",
[...]

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#1762: FILE: drivers/char/rio/rioboot.c:1067:
+					HostP->Mapping[entry2].Flags = SLOT_IN_USE | RTA_BOOTED | RTA_NEWBOOT | RTA16_SECOND_SLOT;

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1789: FILE: drivers/char/rio/rioboot.c:1077:
+						p->RIOFirstPortsBooted = HostP->Mapping[entry2].SysPort;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1791: FILE: drivers/char/rio/rioboot.c:1079:
+						p->RIOLastPortsBooted = HostP->Mapping[entry2].SysPort;

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#1792: FILE: drivers/char/rio/rioboot.c:1080:
+					rio_dprintk(RIO_DEBUG_BOOT, "SysPort %d, Name %s\n", (int) HostP->Mapping[entry2].SysPort, HostP->Mapping[entry].Name);

CHECK:SPACING: No space is necessary after a cast
#1792: FILE: drivers/char/rio/rioboot.c:1080:
+					rio_dprintk(RIO_DEBUG_BOOT, "SysPort %d, Name %s\n", (int) HostP->Mapping[entry2].SysPort, HostP->Mapping[entry].Name);

CHECK:BRACES: Unbalanced braces around else statement
#1793: FILE: drivers/char/rio/rioboot.c:1081:
+				} else

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1794: FILE: drivers/char/rio/rioboot.c:1082:
+					HostP->Mapping[entry2].Flags = SLOT_TENTATIVE | RTA_BOOTED | RTA_NEWBOOT | RTA16_SECOND_SLOT;

CHECK:SPACING: No space is necessary after a cast
#1809: FILE: drivers/char/rio/rioboot.c:1086:
+				bzero((caddr_t) MapP2, sizeof(struct Map));

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#1811: FILE: drivers/char/rio/rioboot.c:1088:
+			bzero((caddr_t) MapP, sizeof(struct Map));
 			                ^^^^

CHECK:SPACING: No space is necessary after a cast
#1811: FILE: drivers/char/rio/rioboot.c:1088:
+			bzero((caddr_t) MapP, sizeof(struct Map));

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1813: FILE: drivers/char/rio/rioboot.c:1090:
+				cprintf("An orphaned RTA has been adopted by %s '%s' (%c).\n", MyType, MyName, MyLink + 'A');

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1815: FILE: drivers/char/rio/rioboot.c:1092:
+			cprintf("RTA connected to %s '%s' (%c) not configured.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <RIOSetChange>
#1816: FILE: drivers/char/rio/rioboot.c:1093:
+		RIOSetChange(p);

WARNING:LONG_LINE: line length of 175 exceeds 100 columns
#1841: FILE: drivers/char/rio/rioboot.c:1103:
+		cprintf("The RTA connected to %s '%s' (%c) cannot be configured.  You cannot configure more than 128 ports to one host card.\n", MyType, MyName, MyLink + 'A');

CHECK:CAMELCASE: Avoid CamelCase: <NumExtraBooted>
#1842: FILE: drivers/char/rio/rioboot.c:1104:
+	for (entry = 0; entry < HostP->NumExtraBooted; entry++) {

CHECK:CAMELCASE: Avoid CamelCase: <ExtraUnits>
#1843: FILE: drivers/char/rio/rioboot.c:1105:
+		if (HostP->ExtraUnits[entry] == RtaUniq) {

CHECK:CAMELCASE: Avoid CamelCase: <Entry>
#1877: FILE: drivers/char/rio/rioboot.c:1135:
+	int Entry;

CHECK:CAMELCASE: Avoid CamelCase: <HostUniq>
#1878: FILE: drivers/char/rio/rioboot.c:1136:
+	uint HostUniq = HostP->UniqueNum;

CHECK:CAMELCASE: Avoid CamelCase: <RIOBindTab>
#1893: FILE: drivers/char/rio/rioboot.c:1142:
+	for (Entry = 0; (Entry < MAX_RTA_BINDINGS) && (p->RIOBindTab[Entry] != 0); Entry++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOBindTab[Entry] == HostUniq'
#1894: FILE: drivers/char/rio/rioboot.c:1143:
+		if ((p->RIOBindTab[Entry] == HostUniq) || (p->RIOBindTab[Entry] == RtaUniq))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOBindTab[Entry] == RtaUniq'
#1894: FILE: drivers/char/rio/rioboot.c:1143:
+		if ((p->RIOBindTab[Entry] == HostUniq) || (p->RIOBindTab[Entry] == RtaUniq))

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1924: FILE: drivers/char/rio/rioboot.c:1171:
+		HostP->Mapping[entry2].Flags = (RTA_BOOTED | RTA_NEWBOOT | SLOT_TENTATIVE | RTA16_SECOND_SLOT);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104341.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 68 warnings, 169 checks, 1904 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104341.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
