WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
--- linux-2.6.11-rc2-mm1-modules.orig/security/seclvl.c	2005-02-03 15:41:46.043754544 -0600

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: security/seclvl.c:126:
+	char * name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: security/seclvl.c:150:
+seclvl_attr_store(struct kobject * kobj,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: security/seclvl.c:151:
+		  struct attribute * attr, const char * buf, size_t len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: security/seclvl.c:151:
+		  struct attribute * attr, const char * buf, size_t len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: security/seclvl.c:153:
+	struct seclvl_obj * obj = container_of(kobj, struct seclvl_obj, kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#108: FILE: security/seclvl.c:154:
+	struct seclvl_attribute * attribute =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: security/seclvl.c:160:
+seclvl_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: security/seclvl.c:160:
+seclvl_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: security/seclvl.c:160:
+seclvl_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: security/seclvl.c:162:
+	struct seclvl_obj * obj = container_of(kobj, struct seclvl_obj, kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: security/seclvl.c:163:
+	struct seclvl_attribute * attribute =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: security/seclvl.c:217:
+static ssize_t seclvl_read_file(struct seclvl_obj * obj, char * buff)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: security/seclvl.c:217:
+static ssize_t seclvl_read_file(struct seclvl_obj * obj, char * buff)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: security/seclvl.c:254:
+seclvl_write_file(struct seclvl_obj * obj, const char * buff, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: security/seclvl.c:254:
+seclvl_write_file(struct seclvl_obj * obj, const char * buff, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: security/seclvl.c:285:
+static ssize_t seclvl_read_passwd(struct seclvl_obj * obj, char * buff)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: security/seclvl.c:285:
+static ssize_t seclvl_read_passwd(struct seclvl_obj * obj, char * buff)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: security/seclvl.c:311:
+plaintext_to_sha1(unsigned char * hash, const char * plaintext, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: security/seclvl.c:311:
+plaintext_to_sha1(unsigned char * hash, const char * plaintext, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: security/seclvl.c:313:
+	char * pg_virt_addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: security/seclvl.c:314:
+	struct crypto_tfm * tfm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: security/seclvl.c:352:
+seclvl_write_passwd(struct seclvl_obj * obj, const char * buff, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: security/seclvl.c:352:
+seclvl_write_passwd(struct seclvl_obj * obj, const char * buff, size_t count)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#198: FILE: security/seclvl.c:380:
+		if (hashed_password[i] != tmp[i]) {
 			return -EPERM;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: security/seclvl.c:399:
+seclvl_ptrace(struct task_struct * parent, struct task_struct * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: security/seclvl.c:399:
+seclvl_ptrace(struct task_struct * parent, struct task_struct * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: security/seclvl.c:417:
+static int seclvl_capable(struct task_struct * tsk, int cap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: security/seclvl.c:476:
+static int seclvl_settime(struct timespec * tv, struct timezone * tz)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: security/seclvl.c:476:
+static int seclvl_settime(struct timespec * tv, struct timezone * tz)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: security/seclvl.c:501:
+	struct block_device * bdev = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: security/seclvl.c:619:
+static int seclvl_umount(struct vfsmount * mnt, int flags)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#266: FILE: security/seclvl.c:659:
+		if ((rc = plaintext_to_sha1(hashed_password, passwd,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#293: FILE: security/seclvl.c:730:
+	if ((rc = process_password())) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#302: FILE: security/seclvl.c:750:
+	if ((rc = do_sysfs_registrations())) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 2 warnings, 0 checks, 244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
