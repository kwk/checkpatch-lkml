WARNING:TYPO_SPELLING: 'follwoing' may be misspelled - perhaps 'following'?
#37: 
This patch contains forward-ports of the follwoing fixes
                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
diff -uNr --exclude-from=dontdiff linux.orig/drivers/char/raw.c linux/drivers/char/raw.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: mm/memory.c:147:
+static inline void establish_pte(struct vm_area_struct * vma, unsigned long address,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: mm/memory.c:148:
+static inline void establish_pte(struct vm_area_struct * vma, unsigned long address,
+				pte_t *page_table, pte_t entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: mm/memory.c:155:
+static inline void break_cow(struct vm_area_struct * vma, struct page *	old_page,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#131: FILE: mm/memory.c:155:
+static inline void break_cow(struct vm_area_struct * vma, struct page *	old_page,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: mm/memory.c:156:
+^I^I^I^Istruct page * new_page, unsigned long address, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: mm/memory.c:156:
+static inline void break_cow(struct vm_area_struct * vma, struct page *	old_page,
+				struct page * new_page, unsigned long address, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: mm/memory.c:156:
+				struct page * new_page, unsigned long address, 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: mm/memory.c:159:
+	copy_cow_page(old_page,new_page,address);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: mm/memory.c:159:
+	copy_cow_page(old_page,new_page,address);
 	                               ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#138: FILE: mm/memory.c:162:
+	establish_pte(vma, address, page_table, pte_mkwrite(pte_mkdirty(mk_pte(new_page, vma->vm_page_prot))));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#156: FILE: mm/memory.c:262:
+						if (pte_dirty(pte)) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#157: FILE: mm/memory.c:263:
+							struct page * new_page = alloc_page(GFP_HIGHUSER);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: mm/memory.c:263:
+							struct page * new_page = alloc_page(GFP_HIGHUSER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: mm/memory.c:264:
+							struct page * new_page = alloc_page(GFP_HIGHUSER);
+							if (!new_page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#158: FILE: mm/memory.c:264:
+							if (!new_page)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#160: FILE: mm/memory.c:266:
+							break_cow(vma, ptepage, new_page, address, dst_pte);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: mm/memory.c:430:
+static struct page * follow_page(unsigned long address, int writeacc, int * ret) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: mm/memory.c:430:
+static struct page * follow_page(unsigned long address, int writeacc, int * ret) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: mm/memory.c:430:
+static struct page * follow_page(unsigned long address, int writeacc, int * ret) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: mm/memory.c:537:
+^I^Iif (map) { $

CHECK:BRACES: braces {} should be used on all arms of this statement
#238: FILE: mm/memory.c:537:
+		if (map) { 
[...]
+			atomic_inc(&map->rawcount);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#242: FILE: mm/memory.c:540:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: mm/page_alloc.c:102:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 9 warnings, 4 checks, 207 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
