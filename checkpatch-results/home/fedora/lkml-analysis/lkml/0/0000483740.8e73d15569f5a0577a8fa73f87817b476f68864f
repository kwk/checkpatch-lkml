WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
	As a result of the likely/unlikely thread on lkml I would like to change all 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#52: FILE: fs//attr.c:121:
+	BUG_ON(!inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#85: FILE: fs//block_dev.c:380:
+		BUG_ON(bdev->bd_openers);

CHECK:BRACES: Unbalanced braces around else statement
#95: FILE: fs//block_dev.c:409:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: fs//block_dev.c:410:
+		BUG_ON(inode->i_bdev != bdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: fs//buffer.c:508:
+	BUG_ON(bh->b_prev_free || bh->b_next_free);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#122: FILE: fs//buffer.c:695:
+			BUG_ON(!buffer_mapped(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#132: FILE: fs//buffer.c:1197:
+	BUG_ON(bh->b_inode);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#138: FILE: fs//buffer.c:1268:
offset)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: fs//buffer.c:1271:
+	BUG_ON(offset >= PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: fs//buffer.c:1384:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#163: FILE: fs//buffer.c:1413:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: fs//buffer.c:1456:
+	BUG_ON(page->buffers);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: fs//buffer.c:1517:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: fs//buffer.c:1595:
+		BUG_ON(!bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: fs//buffer.c:2021:
+			BUG_ON(buffer_new(&bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: fs//buffer.c:2030:
+			BUG_ON(!buffer_mapped(&bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: fs//buffer.c:2207:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: fs//buffer.c:2270:
+	BUG_ON(size & (get_hardsect_size(to_kdev_t(bdev->bd_dev))-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#233: FILE: fs//buffer.c:2270:
+	BUG_ON(size & (get_hardsect_size(to_kdev_t(bdev->bd_dev))-1));
 	                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: fs//buffer.c:2272:
+	BUG_ON(size < 512 || size > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: fs//buffer.c:2380:
+		BUG_ON(kdev_same(p->b_dev, B_FREE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#262: FILE: fs//dcache.c:35:
+#define check_lock()	BUG_ON(!kernel_locked())

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: fs//dcache.c:128:
+	BUG_ON(!list_empty(&dentry->d_lru));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: fs//dcache.c:343:
+		BUG_ON(atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: fs//dcache.c:652:
+	BUG_ON(!list_empty(&entry->d_alias));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: fs//dcache.c:835:
+	BUG_ON(!list_empty(&entry->d_hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: fs//dquot.c:1213:
+		BUG_ON(inode->i_dquot[cnt] == NODQUOT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: fs//exec.c:427:
+			BUG_ON(active_mm != old_mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: fs//fcntl.c:438:
+			BUG_ON((reason & __SI_MASK) != __SI_POLL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#368: FILE: fs//inode.c:82:
+	BUG_ON(inode_has_buffers(inode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: fs//inode.c:214:
+	BUG_ON(inode->i_state & I_LOCK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: fs//inode.c:510:
+	BUG_ON(inode->i_data.nrpages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: fs//inode.c:511:
+	BUG_ON(!(inode->i_state & I_FREEING));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: fs//inode.c:512:
+	BUG_ON(inode->i_state & I_CLEAR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: fs//inode.c:1039:
+		BUG_ON(inode->i_state == I_CLEAR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#414: FILE: fs//inode.c:1069:
+			BUG_ON(inode->i_state != I_CLEAR);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fl"
#430: FILE: fs//locks.c:151:
+	if (unlikely(fl == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: fs//open.c:807:
+	BUG_ON(files->fd[fd] != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "files->fd[fd]"
#447: FILE: fs//open.c:807:
+	BUG_ON(files->fd[fd] != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#464: FILE: fs//pipe.c:119:
+		BUG_ON(!PIPE_EMPTY(*inode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs//affs/file.c:220:
+		BUG_ON(ext > AFFS_INODE->i_extcnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#491: FILE: fs//affs/file.c:237:
+		BUG_ON(ext > AFFS_INODE->i_extcnt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: fs//coda/cnode.c:87:
+	BUG_ON(!coda_fideq(fid, &cii->c_fid));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: fs//coda/cnode.c:135:
+	BUG_ON(!coda_fideq(&cii->c_fid, oldfid));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#542: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#542: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#542: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#558: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#574: FILE: fs//coda/file.c:40:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: fs//coda/file.c:58:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: fs//coda/file.c:86:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#601: FILE: fs//coda/file.c:173:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#610: FILE: fs//coda/file.c:215:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: fs//coda/file.c:248:
+	BUG_ON(!cfile);

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#635: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#644: FILE: fs//coda/inode.c:224:
+	BUG_ON(cii->c_container);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#661: FILE: fs//ext2/dir.c:380:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: fs//ext2/dir.c:486:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#688: FILE: fs//ext3/super.c:1554:
+	BUG_ON(down_trylock(&sb->s_lock) == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: fs//fat/file.c:63:
+^Iif (unlikely(iblock << sb->s_blocksize_bits != $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#715: FILE: fs//fat/file.c:73:
+	BUG_ON(!phys);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#732: FILE: fs//freevxfs/vxfs_olt.c:45:
+	BUG_ON(infp->vsi_fshino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: fs//freevxfs/vxfs_olt.c:52:
+	BUG_ON(infp->vsi_iext);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#750: FILE: fs//freevxfs/vxfs_olt.c:59:
+	BUG_ON(sbp->s_blocksize % bsize);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#766: FILE: fs//hpfs/file.c:80:
+	if (unlikely(iblock<<9 != inode->u.hpfs_i.mmu_private)) {
 	                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#783: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#800: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_fsdata"
#800: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!journal->j_inode"
#816: FILE: fs//jbd/journal.c:871:
+	if (unlikely(journal->j_inode == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#833: FILE: fs//jbd/transaction.c:1882:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#850: FILE: fs//jffs2/background.c:67:
+	BUG_ON(c->gc_task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: fs//jffs2/nodelist.h:194:
+^Iif (unlikely(jeb->used_size + jeb->dirty_size + jeb->free_size != $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: fs//jffs2/nodelist.h:200:
+^Iif (unlikely(c->used_size + c->dirty_size + c->free_size + c->erasing_size $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: fs//jffs2/nodelist.h:201:
+ c->bad_size != c->flash_size)) { \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#923: FILE: fs//jffs2/nodelist.h:201:
+ c->bad_size != c->flash_size)) { \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#995: FILE: fs//jffs2/write.c:184:
+^ID1(if(unlikely(ri->hdr_crc != crc32(0, ri, sizeof(struct $

ERROR:SPACING: space required before the open parenthesis '('
#995: FILE: fs//jffs2/write.c:184:
+	D1(if(unlikely(ri->hdr_crc != crc32(0, ri, sizeof(struct 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1006: FILE: fs//jffs2/write.c:272:
+^ID1(if(unlikely(rd->hdr_crc != crc32(0, rd, sizeof(struct $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1024: FILE: fs//minix/dir.c:239:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1034: FILE: fs//minix/dir.c:338:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1057: FILE: fs//nfs/pagelist.c:148:
+	BUG_ON(!list_empty(&req->wb_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1058: FILE: fs//nfs/pagelist.c:149:
+	BUG_ON(!list_empty(&req->wb_hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1059: FILE: fs//nfs/pagelist.c:150:
+	BUG_ON(NFS_WBACK_BUSY(req));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: fs//nfs/pagelist.c:151:
+	BUG_ON(atomic_read(&cache->nr_requests) < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1086: FILE: fs//nfs/read.c:455:
+		BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1092: FILE: fs//nfs/read.c:459:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1109: FILE: fs//nfs/write.c:248:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1113: FILE: fs//nfs/write.c:250:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1130: FILE: fs//ntfs/inode.c:1829:
+	BUG_ON(*buf & (1 << (bit & 7)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1142: FILE: fs//ntfs/inode.c:1902:
+		BUG_ON(!err && nr_lcn2 < min_nr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1153: FILE: fs//ntfs/inode.c:1984:
+	BUG_ON(data->size > data->allocated || data->size < data->initialized ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: fs//ntfs/inode.c:1985:
+	BUG_ON(data->size > data->allocated || data->size < data->initialized ||
+			data->initialized > data->allocated);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1171: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1171: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1188: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1188: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1188: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1204: FILE: fs//proc/array.c:662:
+		BUG_ON(loff);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1211: FILE: fs//proc/array.c:668:
+	BUG_ON(retval > count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: fs//reiserfs/fix_node.c:834:
+    BUG_ON(p_s_tb->FEB[p_s_tb->cur_blknum]);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1228: FILE: fs//reiserfs/fix_node.c:834:
+    BUG_ON(p_s_tb->FEB[p_s_tb->cur_blknum]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: fs//reiserfs/journal.c:406:
+  if (unlikely(current->lock_depth < 0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1244: FILE: fs//reiserfs/journal.c:406:
+  if (unlikely(current->lock_depth < 0)) {
     printk("%s called without kernel lock held\n", caller) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1258: FILE: fs//reiserfs/tail_conversion.c:136:
   if (buffer_mapped(bh)) {
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: fs//reiserfs/tail_conversion.c:137:
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1262: FILE: fs//reiserfs/tail_conversion.c:137:
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1279: FILE: fs//smbfs/file.c:179:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1283: FILE: fs//smbfs/file.c:181:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1300: FILE: fs//sysv/dir.c:249:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1310: FILE: fs//sysv/dir.c:345:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1327: FILE: fs//udf/inode.c:347:
+	BUG_ON(bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1332: FILE: fs//udf/inode.c:350:
+	BUG_ON(!phys);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 98 warnings, 9 checks, 883 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
