ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: arch/ia64/oprofile/perfmon.c:79:
+int perfmon_init(struct oprofile_operations * ops)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: arch/ia64/oprofile/backtrace.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/ia64/oprofile/backtrace.c:18:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: arch/ia64/oprofile/backtrace.c:18:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#137: FILE: arch/ia64/oprofile/backtrace.c:27:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#138: FILE: arch/ia64/oprofile/backtrace.c:28:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INLINE: plain inline is preferred over __inline__
#150: FILE: arch/ia64/oprofile/backtrace.c:40:
+static __inline__ int in_old_ool_spinlock_code(unsigned long pc)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#152: FILE: arch/ia64/oprofile/backtrace.c:42:
+	extern const char ia64_spinlock_contention_pre3_4[] __attribute__ ((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#152: FILE: arch/ia64/oprofile/backtrace.c:42:
+	extern const char ia64_spinlock_contention_pre3_4[] __attribute__ ((weak));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#153: FILE: arch/ia64/oprofile/backtrace.c:43:
+	extern const char ia64_spinlock_contention_pre3_4_end[] __attribute__ ((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#153: FILE: arch/ia64/oprofile/backtrace.c:43:
+	extern const char ia64_spinlock_contention_pre3_4_end[] __attribute__ ((weak));

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: arch/ia64/oprofile/backtrace.c:46:
+	unsigned long sc_end = (unsigned long)ia64_spinlock_contention_pre3_4_end;
+	return (sc_start && sc_end && pc >= sc_start && pc < sc_end);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#164: FILE: arch/ia64/oprofile/backtrace.c:54:
+static __inline__ int in_ivt_code(unsigned long pc)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#166: FILE: arch/ia64/oprofile/backtrace.c:56:
+	extern char ia64_ivt[];

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: arch/ia64/oprofile/backtrace.c:57:
+	extern char ia64_ivt[];
+	return (pc >= (u_long)ia64_ivt && pc < (u_long)ia64_ivt+32768);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: arch/ia64/oprofile/backtrace.c:57:
+	return (pc >= (u_long)ia64_ivt && pc < (u_long)ia64_ivt+32768);
 	                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#173: FILE: arch/ia64/oprofile/backtrace.c:63:
+static __inline__ int next_frame(ia64_backtrace_t *bt)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: arch/ia64/oprofile/backtrace.c:84:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: arch/ia64/oprofile/backtrace.c:88:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: arch/ia64/oprofile/backtrace.c:96:
+	sw = (struct switch_stack *)(info+1);
 	                                 ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#269: FILE: arch/ia64/kernel/unwind.c:2113:
+EXPORT_SYMBOL(unw_init_frame_info);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#305: FILE: arch/ia64/oprofile/init.c:15:
+extern int perfmon_init(struct oprofile_operations * ops);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#307: FILE: arch/ia64/oprofile/init.c:17:
+extern void ia64_backtrace(struct pt_regs * const regs, unsigned int depth);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: arch/ia64/oprofile/init.c:19:
+void __init oprofile_arch_init(struct oprofile_operations * ops)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 3 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
