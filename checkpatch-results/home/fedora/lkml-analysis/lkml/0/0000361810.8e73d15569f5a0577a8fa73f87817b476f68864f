WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
The attached patch adds automounting support and mountpount expiry support to

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#111: FILE: fs/namei.c:441:
+	for (;;) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: fs/namei.c:444:
+			struct vfsmount *mounted;
+			spin_lock(&dcache_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#205: FILE: fs/namespace.c:684:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/namespace.c:697:
+	memset(&nd,0,sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/namespace.c:697:
+	memset(&nd,0,sizeof(nd));
 	                    ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: fs/namespace.c:697:
+	memset(&nd,0,sizeof(nd));
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: fs/namespace.c:697:
+	memset(&nd,0,sizeof(nd));
 	            ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/namespace.c:698:
+	nd.dentry = on_dentry;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#220: FILE: fs/namespace.c:699:
+	nd.mnt = on_mnt;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#224: FILE: fs/namespace.c:703:
+	while(d_mountpoint(nd.dentry) && follow_down(&nd.mnt, &nd.dentry))
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#224: FILE: fs/namespace.c:703:
+	while(d_mountpoint(nd.dentry) && follow_down(&nd.mnt, &nd.dentry))
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#224: FILE: fs/namespace.c:703:
+	while(d_mountpoint(nd.dentry) && follow_down(&nd.mnt, &nd.dentry))
 	                                                       ^^

ERROR:SPACING: space required before the open parenthesis '('
#224: FILE: fs/namespace.c:703:
+	while(d_mountpoint(nd.dentry) && follow_down(&nd.mnt, &nd.dentry))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#227: FILE: fs/namespace.c:706:
+	if (!check_mnt(nd.mnt))
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namespace.c:711:
+	if (nd.mnt->mnt_sb == mnt->mnt_sb && nd.mnt->mnt_root == nd.dentry)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namespace.c:711:
+	if (nd.mnt->mnt_sb == mnt->mnt_sb && nd.mnt->mnt_root == nd.dentry)
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namespace.c:711:
+	if (nd.mnt->mnt_sb == mnt->mnt_sb && nd.mnt->mnt_root == nd.dentry)
 	                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#235: FILE: fs/namespace.c:714:
+	err = graft_tree(mnt, &nd);
 	                       ^^

CHECK:SPACING: No space is necessary after a cast
#288: FILE: fs/namespace.c:767:
+				tmp = (int) mnt->mnt_expires_at - (int) now;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#327: FILE: fs/namespace.c:806:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#327: FILE: fs/namespace.c:806:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#381: FILE: fs/stat.c:64:
+	error = user_path_walk_stat(name, &nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#390: FILE: fs/stat.c:77:
+	error = user_path_walk_link_stat(name, &nd);
 	                                        ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#417: FILE: fs/super.c:702:
+EXPORT_SYMBOL_GPL(do_kern_mount);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#429: FILE: include/linux/dcache.h:115:
+	struct vfsmount *(*d_automount)(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#454: FILE: include/linux/mount.h:36:
+	unsigned mnt_expiry_timeout;	/* expiry timeout (in seconds) or 0 */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/linux/mount.h:46:
+extern void kern_automount_begin_expiry(struct vfsmount *mnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#489: FILE: include/linux/namei.h:42:
+#define user_path_walk_stat(name,nd) \
                                  ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: include/linux/namei.h:42:
+#define user_path_walk_stat(name,nd) \
                                 ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#490: FILE: include/linux/namei.h:43:
+	__user_walk(name, LOOKUP_FOLLOW|LOOKUP_NOAUTOMOUNT, nd)
 	                                                    ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#490: FILE: include/linux/namei.h:43:
+	__user_walk(name, LOOKUP_FOLLOW|LOOKUP_NOAUTOMOUNT, nd)
 	                               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#491: FILE: include/linux/namei.h:44:
+#define user_path_walk_link_stat(name,nd) \
                                       ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: include/linux/namei.h:44:
+#define user_path_walk_link_stat(name,nd) \
                                      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#492: FILE: include/linux/namei.h:45:
+	__user_walk(name, LOOKUP_NOAUTOMOUNT, nd)
 	                                      ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: include/linux/namei.h:60:
+extern int kern_automount(struct vfsmount *mnt, struct dentry *dentry);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361810.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 24 warnings, 6 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361810.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
