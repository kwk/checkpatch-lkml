WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -ruN linux-original/drivers/pcmcia/cistpl.c linux/drivers/pcmcia/cistpl.c

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#66: FILE: drivers/pcmcia/ds.c:112:
+	 * for multifunction devices: */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#86: FILE: drivers/pcmcia/ds.c:133:
+static int resources_available = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#95: FILE: drivers/pcmcia/ds.c:152:
+int validate_cis(client_handle_t handle, cisinfo_t *info);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: drivers/pcmcia/ds.c:153:
+int read_tuple(client_handle_t handle, cisdata_t code, void *parse);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#98: FILE: drivers/pcmcia/ds.c:155:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p_dev)...) over kmalloc(sizeof(struct pcmcia_device)...)
#118: FILE: drivers/pcmcia/ds.c:280:
+	p_dev = kmalloc(sizeof(struct pcmcia_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: drivers/pcmcia/ds.c:292:
+	 * any device information */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/pcmcia/ds.c:294:
+^I^Isprintf (p_dev->dev.bus_id, "pcmcia%d:%d.?", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: drivers/pcmcia/ds.c:294:
+		sprintf (p_dev->dev.bus_id, "pcmcia%d:%d.?", 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#134: FILE: drivers/pcmcia/ds.c:296:
+		sprintf (p_dev->dev.name, "unknown");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#145: FILE: drivers/pcmcia/ds.c:307:
+	 * the CIS is valid etc. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: drivers/pcmcia/ds.c:310:
+		cisinfo_t cisinfo;
+		ret = pcmcia_validate_cis(s->handle, &cisinfo);

CHECK:CAMELCASE: Avoid CamelCase: <Chains>
#149: FILE: drivers/pcmcia/ds.c:311:
+		if (ret || !cisinfo.Chains) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#150: FILE: drivers/pcmcia/ds.c:312:
+			printk(KERN_INFO "pcmcia: inserted card has invalid CIS.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#166: FILE: drivers/pcmcia/ds.c:328:
+	 * the number within the socket_dev */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: drivers/pcmcia/ds.c:329:
+^Isprintf (p_dev->dev.bus_id, "pcmcia%d:%d.%d", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: drivers/pcmcia/ds.c:329:
+	sprintf (p_dev->dev.bus_id, "pcmcia%d:%d.%d", 

CHECK:BRACES: braces {} should be used on all arms of this statement
#174: FILE: drivers/pcmcia/ds.c:336:
+	if (p_dev->vers1.ns) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: drivers/pcmcia/ds.c:339:
+		int i = 0;
+		for (i=0; i < p_dev->vers1.ns; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: drivers/pcmcia/ds.c:339:
+		for (i=0; i < p_dev->vers1.ns; i++) {
 		      ^

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: drivers/pcmcia/ds.c:344:
+	} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#183: FILE: drivers/pcmcia/ds.c:345:
+		sprintf (p_dev->dev.name, "unknown");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: drivers/pcmcia/ds.c:351:
+^I/* read out function ID -- rule of thumb: cards with no FUNCID, but with $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#190: FILE: drivers/pcmcia/ds.c:352:
+	 * common memory device geometry information, are probably memory cards */

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: drivers/pcmcia/ds.c:353:
+	if (has_cis && !(read_tuple(s->handle, CISTPL_FUNCID, &p_dev->funcid)))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#193: FILE: drivers/pcmcia/ds.c:355:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: drivers/pcmcia/ds.c:357:
+		cistpl_device_geo_t devgeo;
+		if (has_cis && !(read_tuple(s->handle, CISTPL_DEVICE_GEO, &devgeo))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#210: FILE: drivers/pcmcia/ds.c:372:
+	 * so go back up */

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#227: FILE: drivers/pcmcia/ds.c:389:
+		struct pcmcia_device *p_dev = container_of(p1, struct pcmcia_device, socket_device_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: drivers/pcmcia/ds.c:390:
+		struct pcmcia_device *p_dev = container_of(p1, struct pcmcia_device, socket_device_list);
+		device_unregister(&p_dev->dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: drivers/pcmcia/ds.c:408:
+^I}^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: drivers/pcmcia/ds.c:413:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: drivers/pcmcia/ds.c:467:
+    pcmcia_remove_card(s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: drivers/pcmcia/ds.c:474:
+    struct pcmcia_bus_socket *s = get_socket_info_by_nr(sn);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: drivers/pcmcia/ds.c:475:
+    struct pcmcia_bus_socket *s = get_socket_info_by_nr(sn);
+    pcmcia_add_card(s);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/pcmcia/ds.c:475:
+    pcmcia_add_card(s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/pcmcia/ds.c:476:
+    s->state |= SOCKET_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/pcmcia/ds.c:477:
+    handle_event(s, CS_EVENT_CARD_INSERTION);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/pcmcia/ds.c:478:
+    s->state &= ~SOCKET_ADDING_PENDING;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#289: FILE: drivers/pcmcia/ds.c:510:
+	if (!(s->state & SOCKET_ADDING_PENDING)) {
+	    s->state |= SOCKET_ADDING_PENDING;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#293: FILE: drivers/pcmcia/ds.c:514:
+	    s->removal.expires = jiffies + HZ/10;
 	                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: drivers/pcmcia/ds.c:896:
+    static int ioctl_resources_status = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#312: FILE: drivers/pcmcia/ds.c:896:
+    static int ioctl_resources_status = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/pcmcia/ds.c:930:
+    if ((cmd != DS_ADJUST_RESOURCE_INFO) && (ioctl_resources_status)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#320: FILE: drivers/pcmcia/ds.c:930:
+    if ((cmd != DS_ADJUST_RESOURCE_INFO) && (ioctl_resources_status)) {
+	    if (ioctl_resources_status == 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != DS_ADJUST_RESOURCE_INFO'
#320: FILE: drivers/pcmcia/ds.c:930:
+    if ((cmd != DS_ADJUST_RESOURCE_INFO) && (ioctl_resources_status)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TABSTOP: Statements should start on a tabstop
#321: FILE: drivers/pcmcia/ds.c:931:
+	    if (ioctl_resources_status == 1) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#321: FILE: drivers/pcmcia/ds.c:931:
+	    if (ioctl_resources_status == 1) {
+		    resources_available = 1;

WARNING:TABSTOP: Statements should start on a tabstop
#324: FILE: drivers/pcmcia/ds.c:934:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: drivers/pcmcia/ds.c:936:
+    }$

WARNING:TABSTOP: Statements should start on a tabstop
#332: FILE: drivers/pcmcia/ds.c:940:
+	    if (resources_available) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#332: FILE: drivers/pcmcia/ds.c:940:
+	    if (resources_available) {
[...]
+		    ioctl_resources_status = 2;

CHECK:BRACES: braces {} should be used on all arms of this statement
#332: FILE: drivers/pcmcia/ds.c:940:
+	    if (resources_available) {
[...]
+	    } else if (!ioctl_resources_status)
[...]

WARNING:TABSTOP: Statements should start on a tabstop
#337: FILE: drivers/pcmcia/ds.c:945:
+	    } else if (!ioctl_resources_status)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#337: FILE: drivers/pcmcia/ds.c:945:
+	    } else if (!ioctl_resources_status)
+		    ioctl_resources_status = 1;

WARNING:TABSTOP: Statements should start on a tabstop
#340: FILE: drivers/pcmcia/ds.c:948:
+	    break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 39 warnings, 11 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
