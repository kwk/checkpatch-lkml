WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
The patch below implements an algorithm to determine an unique GSI override for mapping GSIs to IO-APIC pins correctly. GSI overrides are required in order for ES7000 machines to function properly since IRQ to pin mappings are NOT all one-to-one. This patch applies only to the Unisys specific ES7000 machines and has been tested thoroughly on several models of the ES7000 line.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#46: FILE: arch/i386/mach-es7000/es7000.h:108:
+#define IOAPIC_GSI_BOUND(ioapic) ((ioapic+1) * (nr_ioapic_registers[ioapic]-1))
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#46: FILE: arch/i386/mach-es7000/es7000.h:108:
+#define IOAPIC_GSI_BOUND(ioapic) ((ioapic+1) * (nr_ioapic_registers[ioapic]-1))
                                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ioapic' - possible side-effects?
#46: FILE: arch/i386/mach-es7000/es7000.h:108:
+#define IOAPIC_GSI_BOUND(ioapic) ((ioapic+1) * (nr_ioapic_registers[ioapic]-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ioapic' may be better as '(ioapic)' to avoid precedence issues
#46: FILE: arch/i386/mach-es7000/es7000.h:108:
+#define IOAPIC_GSI_BOUND(ioapic) ((ioapic+1) * (nr_ioapic_registers[ioapic]-1))

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#62: FILE: arch/i386/mach-es7000/es7000plat.c:55:
+static unsigned long cycle_irqs = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#63: FILE: arch/i386/mach-es7000/es7000plat.c:56:
+static unsigned long free_irqs = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#64: FILE: arch/i386/mach-es7000/es7000plat.c:57:
+static int gsi_map[MAX_GSI_MAPSIZE] = { [0 ... MAX_GSI_MAPSIZE-1] = -1 };
                                                               ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#73: FILE: arch/i386/mach-es7000/es7000plat.c:66:
+	static int newgsi = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#75: FILE: arch/i386/mach-es7000/es7000plat.c:68:
+	if (gsi_map[gsi] != -1)
[...]
+	else if (cycle_irqs ^ free_irqs) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#83: FILE: arch/i386/mach-es7000/es7000plat.c:76:
+		Dprintk("es7000_gsi_override: free_irqs = 0x%lx\n", free_irqs);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'es7000_gsi_override', this function's name, in a string
#83: FILE: arch/i386/mach-es7000/es7000plat.c:76:
+		Dprintk("es7000_gsi_override: free_irqs = 0x%lx\n", free_irqs);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#92: FILE: arch/i386/mach-es7000/es7000plat.c:85:
+	static int initialized = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: arch/i386/mach-es7000/es7000plat.c:93:
+ ^I^Ireturn gsi;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: arch/i386/mach-es7000/es7000plat.c:93:
+ ^I^Ireturn gsi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/i386/mach-es7000/es7000plat.c:93:
+ ^I^Ireturn gsi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: arch/i386/mach-es7000/es7000plat.c:96:
+ ^I^Ireturn gsi;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: arch/i386/mach-es7000/es7000plat.c:96:
+ ^I^Ireturn gsi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/i386/mach-es7000/es7000plat.c:96:
+ ^I^Ireturn gsi;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251384.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 6 warnings, 7 checks, 111 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251384.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
