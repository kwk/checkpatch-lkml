ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#84: FILE: drivers/pci/msi.c:700:
+int pci_in_msi_mode(struct pci_dev* dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: drivers/pci/msi.c:706:
+ ^I^Ireturn 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: drivers/pci/msi.c:706:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: drivers/pci/msi.c:706:
+ ^I^Ireturn 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: drivers/pci/msi.c:708:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: drivers/pci/msi.c:708:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: drivers/pci/msi.c:708:
+   ^Iif (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#92: FILE: drivers/pci/msi.c:708:
+   	if (!(pos = pci_find_capability(dev, PCI_CAP_ID_MSI)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#113: FILE: include/linux/pci.h:883:
+static inline int pci_in_msi_mode(struct pci_dev* dev) {return 0;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#113: FILE: include/linux/pci.h:883:
+static inline int pci_in_msi_mode(struct pci_dev* dev) {return 0;}
                                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#121: FILE: include/linux/pci.h:892:
+extern int pci_in_msi_mode(struct pci_dev* dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/pci.h:892:
+extern int pci_in_msi_mode(struct pci_dev* dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: Unbalanced braces around else statement
#178: FILE: drivers/net/e1000/e1000_main.c:329:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177933.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 4 warnings, 2 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177933.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
