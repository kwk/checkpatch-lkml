WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: lib/Kconfig.debug:88:
+config SLAB_OWNER
+	bool "Track owner of slab objects"
+	depends on DEBUG_KERNEL && DEBUG_SLAB
+	help
+	  Say Y here to make the kernel keep track of some of the functions 
+	  allocating slab objects. Expensive, should only be used to track 
+	  down slab leaks.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: lib/Kconfig.debug:92:
+^I  Say Y here to make the kernel keep track of some of the functions $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: lib/Kconfig.debug:93:
+^I  allocating slab objects. Expensive, should only be used to track $

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: mm/slab.c:2514:
+	struct slab *slabp = GET_PAGE_SLAB(virt_to_page(objp));
+	if (slabp->owner_idx < 5)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#105: FILE: mm/slab.c:2515:
+		slabp->owner[slabp->owner_idx++] = (unsigned long) caller;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: mm/slab.c:3635:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: mm/slab.c:3656:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: mm/slab.c:3656:
+        $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: mm/slab.c:3656:
+        $

CHECK:SPACING: No space is necessary after a cast
#167: FILE: mm/slab.c:3672:
+	page = (char *) __get_free_page(GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: mm/slab.c:3688:
+		struct slab *slabp = list_entry(start, struct slab, list);
+		memcpy(saved_addr + x*5, slabp->owner, sizeof(slabp->owner));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#183: FILE: mm/slab.c:3688:
+		memcpy(saved_addr + x*5, slabp->owner, sizeof(slabp->owner));
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: mm/slab.c:3690:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: mm/slab.c:3696:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: mm/slab.c:3707:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/slab.c:3709:
+^I$

CHECK:SPACING: No space is necessary after a cast
#208: FILE: mm/slab.c:3713:
+	free_page((unsigned long) page);

CHECK:SPACING: No space is necessary after a cast
#215: FILE: mm/slab.c:3720:
+	free_page((unsigned long) page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: mm/slab.c:3724:
+static ssize_t $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: mm/slab.c:3726:
+write_slab_owner(struct file *file, const char __user *buffer,
+		size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: mm/slab.c:3729:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: mm/slab.c:3739:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#238: FILE: mm/slab.c:3743:
+struct file_operations proc_slab_owner_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#252: FILE: fs/proc/proc_misc.c:708:
+	extern struct file_operations proc_slab_owner_operations;

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: fs/proc/proc_misc.c:709:
+	extern struct file_operations proc_slab_owner_operations;
+	entry = create_proc_entry("slab_owner", S_IWUSR | S_IRUGO, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#253: FILE: fs/proc/proc_misc.c:709:
+	entry = create_proc_entry("slab_owner", S_IWUSR | S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#263: FILE: Documentation/slab_owner.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#269: FILE: Documentation/slab_owner.c:7:
+ * ./sort slab_owner.txt sorted_slab_owner.txt
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: Documentation/slab_owner.c:23:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: Documentation/slab_owner.c:37:
+^I^Iif (*curr == EOF) $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#321: FILE: Documentation/slab_owner.c:59:
+	if (list_size != 0 && len == list[list_size-1].len &&
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: Documentation/slab_owner.c:60:
+	if (list_size != 0 && len == list[list_size-1].len &&
+			memcmp(buf, list[list_size-1].txt, len) == 0) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#322: FILE: Documentation/slab_owner.c:60:
+			memcmp(buf, list[list_size-1].txt, len) == 0) {
 			                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#323: FILE: Documentation/slab_owner.c:61:
+		list[list_size-1].num++;
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#330: FILE: Documentation/slab_owner.c:68:
+	list[list_size].txt = malloc(len+1);
 	                                ^

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: Documentation/slab_owner.c:101:
+	for(;;) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#383: FILE: Documentation/slab_owner.c:121:
+		if (count == 0 ||
[...]
+		} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#384: FILE: Documentation/slab_owner.c:122:
+		    strcmp(list2[count-1].txt, list[i].txt) != 0) {
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: Documentation/slab_owner.c:124:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: Documentation/slab_owner.c:124:
+		} else 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#387: FILE: Documentation/slab_owner.c:125:
+			list2[count-1].num += list[i].num;
 			           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: Documentation/slab_owner.c:126:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#389: FILE: Documentation/slab_owner.c:127:
+		
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 10 warnings, 17 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
