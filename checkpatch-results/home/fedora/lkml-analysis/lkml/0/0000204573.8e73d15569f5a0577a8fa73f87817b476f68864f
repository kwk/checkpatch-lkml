WARNING:TYPO_SPELLING: 'apear' may be misspelled - perhaps 'appear'?
#30: 
The kernel patch files patch-2.6.9 and patch-2.6.10 do not apear to be
                                                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'erros' may be misspelled - perhaps 'errors'?
#45: 
	This should give a 2.6.10 kernel. The patch has three erros:
	                                                      ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -rupN linux-2.6.10p/include/linux/netfilter_ipv4/ipt_connmark.h.rej linux-2.6.10/include/linux/netfilter_ipv4/ipt_connmark.h.rej

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#107: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:24:
+#if 0

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#114: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:31:
+cheat_check(u_int32_t oldvalinv, u_int32_t newval, u_int16_t oldcheck)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#116: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:33:
+	u_int32_t diffs[] = { oldvalinv, newval };

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:34:
+	u_int32_t diffs[] = { oldvalinv, newval };
+	return csum_fold(csum_partial((char *)diffs, sizeof(diffs),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:35:
+                                      oldcheck^0xFFFF));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:35:
+                                      oldcheck^0xFFFF));$

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#118: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:35:
+                                      oldcheck^0xFFFF));
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#122: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:39:
+optlen(const u_int8_t *opt, unsigned int offset)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:42:
+	if (opt[offset] <= TCPOPT_NOP || opt[offset+1] == 0) return 1;
 	                                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#125: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:42:
+	if (opt[offset] <= TCPOPT_NOP || opt[offset+1] == 0) return 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:43:
+	else return opt[offset+1];
 	                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#126: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:43:
+	else return opt[offset+1];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#140: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:57:
+	u_int16_t tcplen, newtotlen, oldval, newmss;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#142: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:59:
+	u_int8_t *opt;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#148: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:65:
+	tcplen = (*pskb)->len - iph->ihl*4;
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:67:
+	tcph = (void *)iph + iph->ihl*4;
 	                             ^

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#152: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:69:
+	/* Since it passed flags test in tcp match, we know it is is

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:70:
+	/* Since it passed flags test in tcp match, we know it is is
+	   not a fragment, and has data >= tcp header length.  SYN

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:73:
+	   badly. --RR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#157: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:74:
+	if (tcplen != tcph->doff*4) {
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#159: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:76:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#160: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:77:
+			       "ipt_tcpmss_target: bad length (%d bytes)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#165: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:82:
+	if(tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:82:
+	if(tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:83:
+		if(!(*pskb)->dst) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#168: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:85:
+				printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:86:
+^I^I^I       ^I^I"ipt_tcpmss_target: no dst?! can't determine path-MTU\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:86:
+^I^I^I       ^I^I"ipt_tcpmss_target: no dst?! can't determine path-MTU\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#169: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:86:
+			       		"ipt_tcpmss_target: no dst?! can't determine path-MTU\n");

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:90:
+		if(dst_pmtu((*pskb)->dst) <= (sizeof(struct iphdr) + sizeof(struct tcphdr))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#175: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:92:
+				printk(KERN_ERR

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#176: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:93:
+		       			"ipt_tcpmss_target: unknown or invalid path-MTU (%d)\n", dst_pmtu((*pskb)->dst));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:93:
+^I^I       ^I^I^I"ipt_tcpmss_target: unknown or invalid path-MTU (%d)\n", dst_pmtu((*pskb)->dst));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:93:
+^I^I       ^I^I^I"ipt_tcpmss_target: unknown or invalid path-MTU (%d)\n", dst_pmtu((*pskb)->dst));$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#176: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:93:
+		       			"ipt_tcpmss_target: unknown or invalid path-MTU (%d)\n", dst_pmtu((*pskb)->dst));

CHECK:BRACES: Unbalanced braces around else statement
#181: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:98:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:101:
+ ^Iopt = (u_int8_t *)tcph;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:101:
+ ^Iopt = (u_int8_t *)tcph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:101:
+ ^Iopt = (u_int8_t *)tcph;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:102:
+	for (i = sizeof(struct tcphdr); i < tcph->doff*4; i += optlen(opt, i)){
 	                                              ^

ERROR:SPACING: space required before the open brace '{'
#185: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:102:
+	for (i = sizeof(struct tcphdr); i < tcph->doff*4; i += optlen(opt, i)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'opt[i] == TCPOPT_MSS'
#186: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:103:
+		if ((opt[i] == TCPOPT_MSS) &&
+		    ((tcph->doff*4 - i) >= TCPOLEN_MSS) &&
+		    (opt[i+1] == TCPOLEN_MSS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'opt[i+1] == TCPOLEN_MSS'
#186: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:103:
+		if ((opt[i] == TCPOPT_MSS) &&
+		    ((tcph->doff*4 - i) >= TCPOLEN_MSS) &&
+		    (opt[i+1] == TCPOLEN_MSS)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:104:
+		    ((tcph->doff*4 - i) >= TCPOLEN_MSS) &&
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:105:
+		    (opt[i+1] == TCPOLEN_MSS)) {
 		          ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#189: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:106:
+			u_int16_t oldmss;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#191: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:108:
+			oldmss = (opt[i+2] << 8) | opt[i+3];
 			               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#191: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:108:
+			oldmss = (opt[i+2] << 8) | opt[i+3];
 			                                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#193: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:110:
+			if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) &&
[...]
+					return IPT_CONTINUE;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU'
#193: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:110:
+			if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) &&
+				(oldmss <= newmss))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldmss <= newmss'
#193: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:110:
+			if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) &&
+				(oldmss <= newmss))

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:110:
+			if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:111:
+			if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) &&
+				(oldmss <= newmss))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#197: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:114:
+			opt[i+2] = (newmss & 0xff00) >> 8;
 			     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:115:
+			opt[i+3] = (newmss & 0x00ff);
 			     ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#200: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:117:
+			tcph->check = cheat_check(htons(oldmss)^0xFFFF,
 			                                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#204: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:121:
+			DEBUGP(KERN_INFO "ipt_tcpmss_target: %u.%u.%u.%u:%hu"

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:122:
+			DEBUGP(KERN_INFO "ipt_tcpmss_target: %u.%u.%u.%u:%hu"
+			       "->%u.%u.%u.%u:%hu changed TCP MSS option"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:123:
+^I^I^I       " (from %u to %u)\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#206: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:123:
+			       "->%u.%u.%u.%u:%hu changed TCP MSS option"
+			       " (from %u to %u)\n", 

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#217: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:134:
+	/*
+	 * MSS Option not found ?! add it..

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#226: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:143:
+				printk(KERN_ERR "ipt_tcpmss_target:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#226: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:143:
+				printk(KERN_ERR "ipt_tcpmss_target:"

WARNING:SPLIT_STRING: quoted string split across lines
#227: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:144:
+				printk(KERN_ERR "ipt_tcpmss_target:"
+				       " unable to allocate larger skb\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#234: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:151:
+		tcph = (void *)iph + iph->ihl*4;
 		                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:156:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:156:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:156:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#254: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:171:
+	tcph->doff += TCPOLEN_MSS/4;
 	                         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_target', this function's name, in a string
#263: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:180:
+	DEBUGP(KERN_INFO "ipt_tcpmss_target: %u.%u.%u.%u:%hu"

WARNING:SPLIT_STRING: quoted string split across lines
#264: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:181:
+	DEBUGP(KERN_INFO "ipt_tcpmss_target: %u.%u.%u.%u:%hu"
+	       "->%u.%u.%u.%u:%hu added TCP MSS option (%u)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:190:
+	BUG_ON((*pskb)->ip_summed == CHECKSUM_HW);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#286: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:203:
+	if (strcmp(m->u.kernel.match->name, "tcp") == 0
+	    && (tcpinfo->flg_cmp & TH_SYN)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:204:
+	    && (tcpinfo->flg_cmp & TH_SYN)
+	    && !(tcpinfo->invflags & IPT_TCP_INV_FLAGS))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipt_tcpmss_checkentry', this function's name, in a string
#304: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:221:
+		DEBUGP("ipt_tcpmss_checkentry: targinfosize %u != %u\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:226:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:227:
+^Iif((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU'
#310: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:227:
+	if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) && 
+			((hook_mask & ~((1 << NF_IP_FORWARD)
+			   	| (1 << NF_IP_LOCAL_OUT)
+			   	| (1 << NF_IP_POST_ROUTING))) != 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:227:
+	if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:228:
+	if((tcpmssinfo->mss == IPT_TCPMSS_CLAMP_PMTU) && 
+			((hook_mask & ~((1 << NF_IP_FORWARD)

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:229:
+^I^I^I   ^I| (1 << NF_IP_LOCAL_OUT)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#312: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:229:
+^I^I^I   ^I| (1 << NF_IP_LOCAL_OUT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:230:
+^I^I^I   ^I| (1 << NF_IP_POST_ROUTING))) != 0)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#313: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:230:
+^I^I^I   ^I| (1 << NF_IP_POST_ROUTING))) != 0)) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:231:
+		printk("TCPMSS: path-MTU clamping only supported in FORWARD, OUTPUT and POSTROUTING hooks\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#319: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:236:
+	if (e->ip.proto == IPPROTO_TCP
+	    && !(e->ip.invflags & IPT_INV_PROTO)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#320: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:237:
+	    && !(e->ip.invflags & IPT_INV_PROTO)
+	    && IPT_MATCH_ITERATE(e, find_syn_match))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#323: FILE: net/ipv4/netfilter/ipt_TCPMSS.c:240:
+	printk("TCPMSS: Only works on TCP SYN packets\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 39 warnings, 36 checks, 262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
