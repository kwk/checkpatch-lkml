WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/rcupreempt_trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#65: FILE: include/linux/rcupreempt_trace.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#66: FILE: include/linux/rcupreempt_trace.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: include/linux/rcupreempt_trace.h:21:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#79: FILE: include/linux/rcupreempt_trace.h:29:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#90: FILE: include/linux/rcupreempt_trace.h:40:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: include/linux/rcupreempt_trace.h:65:
+#define RCU_TRACE(fn, arg) ^Ifn(arg);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#115: FILE: include/linux/rcupreempt_trace.h:65:
+#define RCU_TRACE(fn, arg) 	fn(arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/rcupreempt_trace.h:70:
+extern void rcupreempt_trace_move2done(struct rcupreempt_trace *trace);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/rcupreempt_trace.h:71:
+extern void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/rcupreempt_trace.h:72:
+extern void rcupreempt_trace_try_flip1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/rcupreempt_trace.h:73:
+extern void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/rcupreempt_trace.h:74:
+extern void rcupreempt_trace_try_flip_e2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/rcupreempt_trace.h:75:
+extern void rcupreempt_trace_try_flip_e3(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/rcupreempt_trace.h:76:
+extern void rcupreempt_trace_try_flip2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/rcupreempt_trace.h:77:
+extern void rcupreempt_trace_try_flip3(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/rcupreempt_trace.h:78:
+extern void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/rcupreempt_trace.h:79:
+extern void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/rcupreempt_trace.h:80:
+extern void rcupreempt_trace_invoke(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/rcupreempt_trace.h:81:
+extern void rcupreempt_trace_next_add(struct rcupreempt_trace *trace);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#145: FILE: kernel/Kconfig.preempt:93:
+config RCU_TRACE
+	bool "Enable tracing for RCU - currently stats in /proc"
 	default y
 	help
+	  This option provides tracing in RCU which presents /proc 
+	  This option provides tracing in RCU which presents /proc 
+	  This option provides tracing in RCU which presents /proc 
+          stats for debugging RCU implementation.
 
+	  Say Y here if you want to enable RCU tracing
+	  Say Y here if you want to enable RCU tracing
 	  Say N if you are unsure.

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: kernel/Kconfig.preempt:97:
+^I  This option provides tracing in RCU which presents /proc $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: kernel/rcupreempt.c:225:
+^I^I^IRCU_TRACE(rcupreempt_trace_try_flip_e3, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: kernel/rcupreempt.c:226:
+			RCU_TRACE(rcupreempt_trace_try_flip_e3, 
+							&rcu_data.trace);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#395: FILE: kernel/rcupreempt_trace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#409: FILE: kernel/rcupreempt_trace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#410: FILE: kernel/rcupreempt_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: kernel/rcupreempt_trace.c:23:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#428: FILE: kernel/rcupreempt_trace.c:34:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#446: FILE: kernel/rcupreempt_trace.c:52:
+}
+void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#452: FILE: kernel/rcupreempt_trace.c:58:
+}
+void rcupreempt_trace_try_flip1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#456: FILE: kernel/rcupreempt_trace.c:62:
+}
+void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#460: FILE: kernel/rcupreempt_trace.c:66:
+}
+void rcupreempt_trace_try_flip_e2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#464: FILE: kernel/rcupreempt_trace.c:70:
+}
+void rcupreempt_trace_try_flip_e3(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#468: FILE: kernel/rcupreempt_trace.c:74:
+}
+void rcupreempt_trace_try_flip2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#472: FILE: kernel/rcupreempt_trace.c:78:
+}
+void rcupreempt_trace_try_flip3(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#476: FILE: kernel/rcupreempt_trace.c:82:
+}
+void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#480: FILE: kernel/rcupreempt_trace.c:86:
+}
+void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#485: FILE: kernel/rcupreempt_trace.c:91:
+}
+void rcupreempt_trace_invoke(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#489: FILE: kernel/rcupreempt_trace.c:95:
+}
+void rcupreempt_trace_next_add(struct rcupreempt_trace *trace)

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: kernel/rcupreempt_trace.c:97:
+        trace->next_add++;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: kernel/rcupreempt_trace.c:97:
+        trace->next_add++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/rcupreempt_trace.c:98:
+        trace->next_length++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: kernel/rcupreempt_trace.c:98:
+        trace->next_length++;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 24 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
