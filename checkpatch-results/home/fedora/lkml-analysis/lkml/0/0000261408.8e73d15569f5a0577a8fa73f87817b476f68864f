WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
o This patch stops the pinning of non-directory or leaf dentries and inodes. 

WARNING:TYPO_SPELLING: 'implments' may be misspelled - perhaps 'implements'?
#39: 
o This implments the ->lookup() for sysfs directory inodes and allocates
       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/sysfs/dir.c:82:
+static int init_file(struct inode * inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: fs/sysfs/dir.c:89:
+static int init_symlink(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/sysfs/dir.c:159:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/sysfs/dir.c:159:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: fs/sysfs/dir.c:161:
+	struct attribute * attr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: fs/sysfs/dir.c:162:
+	struct bin_attribute * bin_attr = NULL;

WARNING:SPACING: Unnecessary space before function pointer name
#126: FILE: fs/sysfs/dir.c:163:
+	int (* init) (struct inode *) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#126: FILE: fs/sysfs/dir.c:163:
+	int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#126: FILE: fs/sysfs/dir.c:163:
+	int (* init) (struct inode *) = NULL;
 	     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/sysfs/dir.c:166:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/sysfs/dir.c:166:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/sysfs/dir.c:167:
+                bin_attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/sysfs/dir.c:167:
+                bin_attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/sysfs/dir.c:168:
+                attr = &bin_attr->attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/sysfs/dir.c:168:
+                attr = &bin_attr->attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/sysfs/dir.c:169:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/sysfs/dir.c:169:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/sysfs/dir.c:170:
+                attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/sysfs/dir.c:170:
+                attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/sysfs/dir.c:171:
+                init = init_file;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/sysfs/dir.c:171:
+                init = init_file;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/sysfs/dir.c:172:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/sysfs/dir.c:172:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: fs/sysfs/dir.c:178:
+        if (bin_attr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/sysfs/dir.c:178:
+        if (bin_attr) {$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/sysfs/dir.c:190:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/sysfs/dir.c:190:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#157: FILE: fs/sysfs/dir.c:194:
+	err = sysfs_create(dentry, S_IFLNK|S_IRWXUGO, init_symlink);
 	                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#157: FILE: fs/sysfs/dir.c:194:
+	err = sysfs_create(dentry, S_IFLNK|S_IRWXUGO, init_symlink);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: fs/sysfs/dir.c:204:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#168: FILE: fs/sysfs/dir.c:205:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: fs/sysfs/dir.c:205:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry,
+				struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: fs/sysfs/dir.c:207:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: fs/sysfs/dir.c:208:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/sysfs/dir.c:213:
+			const unsigned char * name = sysfs_get_name(sd);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#192: FILE: fs/sysfs/dir.c:229:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: fs/sysfs/dir.c:315:
+			if (!error) {
[...]
 			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#242: FILE: fs/sysfs/file.c:331:
+struct file_operations sysfs_file_operations = {

CHECK:SPACING: No space is necessary after a cast
#267: FILE: fs/sysfs/file.c:347:
+	error = sysfs_make_dirent(parent_sd, NULL, (void *) attr, mode, type);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#281: FILE: fs/sysfs/bin.c:144:
+struct file_operations bin_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#327: FILE: fs/sysfs/sysfs.h:24:
+extern struct file_operations sysfs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#328: FILE: fs/sysfs/sysfs.h:25:
+extern struct file_operations bin_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#329: FILE: fs/sysfs/sysfs.h:26:
+extern struct inode_operations sysfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#330: FILE: fs/sysfs/sysfs.h:27:
+extern struct inode_operations sysfs_symlink_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#342: FILE: fs/sysfs/symlink.c:11:
+struct inode_operations sysfs_symlink_inode_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: fs/sysfs/symlink.c:50:
+static int sysfs_add_link(struct dentry * parent, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: fs/sysfs/symlink.c:50:
+static int sysfs_add_link(struct dentry * parent, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: fs/sysfs/symlink.c:50:
+static int sysfs_add_link(struct dentry * parent, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#364: FILE: fs/sysfs/symlink.c:52:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: fs/sysfs/symlink.c:68:
+^Ierror = sysfs_make_dirent(parent_sd, NULL, sl, S_IFLNK|S_IRWXUGO, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#373: FILE: fs/sysfs/symlink.c:68:
+	error = sysfs_make_dirent(parent_sd, NULL, sl, S_IFLNK|S_IRWXUGO, 
 	                                                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#373: FILE: fs/sysfs/symlink.c:68:
+	error = sysfs_make_dirent(parent_sd, NULL, sl, S_IFLNK|S_IRWXUGO, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: fs/sysfs/symlink.c:69:
+	error = sysfs_make_dirent(parent_sd, NULL, sl, S_IFLNK|S_IRWXUGO, 
 				SYSFS_KOBJ_LINK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 23 warnings, 6 checks, 319 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
