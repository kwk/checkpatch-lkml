WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#77: 
diff -urNp -X /home/daniel/dontdiff linux-2.5.64/include/linux/seqlock.h linux-2.5.64-isize/include/linux/seqlock.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: include/linux/seqlock.h:97:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: include/linux/seqlock.h:99:
+ * Version using sequence counter only. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#92: FILE: include/linux/seqlock.h:105:
+typedef struct seqcnt {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#93: FILE: include/linux/seqlock.h:106:
+	unsigned sequence;

CHECK:SPACING: No space is necessary after a cast
#97: FILE: include/linux/seqlock.h:110:
+#define seqcnt_init(x)	do { *(x) = (seqcnt_t) SEQCNT_ZERO; } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#97: FILE: include/linux/seqlock.h:110:
+#define seqcnt_init(x)	do { *(x) = (seqcnt_t) SEQCNT_ZERO; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#100: FILE: include/linux/seqlock.h:113:
+static inline unsigned read_seqcntbegin(const seqcnt_t *s)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#102: FILE: include/linux/seqlock.h:115:
+	unsigned ret = s->sequence;

WARNING:LINE_SPACING: Missing a blank line after declarations
#103: FILE: include/linux/seqlock.h:116:
+	unsigned ret = s->sequence;
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#103: FILE: include/linux/seqlock.h:116:
+	smp_rmb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#112: FILE: include/linux/seqlock.h:125:
+static inline int read_seqcntretry(const seqcnt_t *s, unsigned iv)

WARNING:MEMORY_BARRIER: memory barrier without comment
#114: FILE: include/linux/seqlock.h:127:
+	smp_rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: include/linux/seqlock.h:131:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: include/linux/seqlock.h:132:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: include/linux/seqlock.h:139:
+^Ismp_wmb();^I^I^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#126: FILE: include/linux/seqlock.h:139:
+	smp_wmb();			

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/seqlock.h:140:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: include/linux/seqlock.h:142:
+static inline void write_seqcntend(seqcnt_t *s) $

WARNING:MEMORY_BARRIER: memory barrier without comment
#131: FILE: include/linux/seqlock.h:144:
+	smp_wmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: drivers/block/loop.c:158:
+	printk("mcneil tmp %Ld %x", size, lo->lo_backing_file->f_dentry->d_inode->i_mapping->host);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#154: FILE: drivers/block/loop.c:158:
+	printk("mcneil tmp %Ld %x", size, lo->lo_backing_file->f_dentry->d_inode->i_mapping->host);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#178: FILE: fs/binfmt_aout.c:272:
+	    i_size_read(bprm->file->f_dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: fs/binfmt_aout.c:272:
+	    i_size_read(bprm->file->f_dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: fs/binfmt_aout.c:272:
+	    i_size_read(bprm->file->f_dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: fs/binfmt_aout.c:272:
+	    i_size_read(bprm->file->f_dentry->d_inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: fs/binfmt_aout.c:457:
+	    i_size_read(inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: fs/binfmt_aout.c:457:
+	    i_size_read(inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: fs/binfmt_aout.c:457:
+	    i_size_read(inode) < ex.a_text+ex.a_data+N_SYMSIZE(ex)+N_TXTOFF(ex)) {
 	                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: fs/buffer.c:1964:
+	lblock = (i_size_read(inode)+blocksize-1) >> inode->i_blkbits;
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#238: FILE: fs/buffer.c:1964:
+	lblock = (i_size_read(inode)+blocksize-1) >> inode->i_blkbits;
 	                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#280: FILE: fs/buffer.c:2486:
+	offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                  ^

CHECK:SPACING: No space is necessary after a cast
#324: FILE: fs/ioctl.c:43:
+			return put_user(i_size_read(inode) - filp->f_pos, (int *) arg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#395: FILE: fs/mpage.c:494:
+		unsigned offset = i_size_read(inode) & (PAGE_CACHE_SIZE - 1);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#454: FILE: include/linux/fs.h:359:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#457: FILE: include/linux/fs.h:362:
+#define i_size_ordered_init(inode) seqcnt_init(&inode->i_size_seqcnt)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#475: FILE: include/linux/fs.h:422:
+ * NOTE: in a 32bit arch with a preemptable kernel and
                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: include/linux/fs.h:431:
+static inline loff_t i_size_read(struct inode * inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#486: FILE: include/linux/fs.h:433:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#495: FILE: include/linux/fs.h:442:
+#elif BITS_PER_LONG==32 && defined(CONFIG_PREEMPT)
                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#507: FILE: include/linux/fs.h:454:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#508: FILE: include/linux/fs.h:455:
+static inline void i_size_write(struct inode * inode, loff_t i_size)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#510: FILE: include/linux/fs.h:457:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#514: FILE: include/linux/fs.h:461:
+#elif BITS_PER_LONG==32 && defined(CONFIG_PREEMPT)
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: mm/filemap.c:1501:
+                        *pos = i_size_read(inode);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: mm/filemap.c:1501:
+                        *pos = i_size_read(inode);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: mm/readahead.c:208:
+ ^Iend_index = ((isize - 1) >> PAGE_CACHE_SHIFT);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#701: FILE: mm/readahead.c:208:
+ ^Iend_index = ((isize - 1) >> PAGE_CACHE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: mm/readahead.c:208:
+ ^Iend_index = ((isize - 1) >> PAGE_CACHE_SHIFT);$

CHECK:SPACING: No space is necessary after a cast
#713: FILE: mm/shmem.c:298:
+	    ((loff_t) index << PAGE_CACHE_SHIFT) >= i_size_read(inode))

CHECK:SPACING: No space is necessary after a cast
#722: FILE: mm/shmem.c:331:
+		    ((loff_t) index << PAGE_CACHE_SHIFT) >= i_size_read(inode)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 20 warnings, 17 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
