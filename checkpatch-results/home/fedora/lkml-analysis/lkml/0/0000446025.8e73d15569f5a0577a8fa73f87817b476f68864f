WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#	           ChangeSet	1.661   -> 1.662  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	               (new)	        -> 1.1     security/security.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	               (new)	        -> 1.1     include/linux/security.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	               (new)	        -> 1.1     security/dummy.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	               (new)	        -> 1.1     security/Config.in

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	               (new)	        -> 1.1     security/capability.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	               (new)	        -> 1.1     security/Config.help

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	               (new)	        -> 1.1     security/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# 02/07/19	greg@kroah.com	1.662

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# LSM: Add all of the new security/* files for basic task control

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# This includes the security_* functions, and the default and capability

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# modules.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/security.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: include/linux/security.h:81:
+ *^Iwere changed). $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/security.h:96:
+ * ^IThis hook mediates the point when a search for a binary handler^Iwill$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: include/linux/security.h:97:
+ * ^Ibegin.  It allows a check the @bprm->security value which is set in$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: include/linux/security.h:98:
+ * ^Ithe preceding set_security call.  The primary difference from$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: include/linux/security.h:99:
+ * ^Iset_security is that the argv list and envp list are reliably$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: include/linux/security.h:100:
+ * ^Iavailable in @bprm.  This hook may be called multiple times$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: include/linux/security.h:101:
+ * ^Iduring a single execve; and in each pass set_security is called$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: include/linux/security.h:102:
+ * ^Ifirst.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: include/linux/security.h:103:
+ * ^I@bprm contains the linux_binprm structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: include/linux/security.h:233:
+ * ^ISet the security attributes in @p->security for a kernel thread that$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: include/linux/security.h:234:
+ * ^Iis being reparented to the init task.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#352: FILE: include/linux/security.h:302:
+ * ^Iallow module stacking.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: include/linux/security.h:303:
+ * ^I@name contains the name of the security module being stacked.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: include/linux/security.h:304:
+ * ^I@ops contains a pointer to the struct security_operations of the module to stack.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: include/linux/security.h:309:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: include/linux/security.h:313:
+	int (*ptrace) (struct task_struct * parent, struct task_struct * child);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: include/linux/security.h:313:
+	int (*ptrace) (struct task_struct * parent, struct task_struct * child);

WARNING:SPACING: Unnecessary space before function pointer arguments
#363: FILE: include/linux/security.h:313:
+	int (*ptrace) (struct task_struct * parent, struct task_struct * child);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#364: FILE: include/linux/security.h:314:
+	int (*capget) (struct task_struct * target,

WARNING:SPACING: Unnecessary space before function pointer arguments
#364: FILE: include/linux/security.h:314:
+	int (*capget) (struct task_struct * target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: include/linux/security.h:315:
+		       kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: include/linux/security.h:316:
+		       kernel_cap_t * inheritable, kernel_cap_t * permitted);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: include/linux/security.h:316:
+		       kernel_cap_t * inheritable, kernel_cap_t * permitted);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: include/linux/security.h:317:
+	int (*capset_check) (struct task_struct * target,

WARNING:SPACING: Unnecessary space before function pointer arguments
#367: FILE: include/linux/security.h:317:
+	int (*capset_check) (struct task_struct * target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: include/linux/security.h:318:
+			     kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: include/linux/security.h:319:
+			     kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: include/linux/security.h:320:
+			     kernel_cap_t * permitted);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: include/linux/security.h:321:
+	void (*capset_set) (struct task_struct * target,

WARNING:SPACING: Unnecessary space before function pointer arguments
#371: FILE: include/linux/security.h:321:
+	void (*capset_set) (struct task_struct * target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: include/linux/security.h:322:
+			    kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: include/linux/security.h:323:
+			    kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#374: FILE: include/linux/security.h:324:
+			    kernel_cap_t * permitted);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: include/linux/security.h:325:
+	int (*capable) (struct task_struct * tsk, int cap);

WARNING:SPACING: Unnecessary space before function pointer arguments
#375: FILE: include/linux/security.h:325:
+	int (*capable) (struct task_struct * tsk, int cap);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: include/linux/security.h:326:
+	int (*sys_security) (unsigned int id, unsigned call,

WARNING:SPACING: Unnecessary space before function pointer arguments
#376: FILE: include/linux/security.h:326:
+	int (*sys_security) (unsigned int id, unsigned call,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#379: FILE: include/linux/security.h:329:
+	int (*bprm_alloc_security) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#379: FILE: include/linux/security.h:329:
+	int (*bprm_alloc_security) (struct linux_binprm * bprm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: include/linux/security.h:330:
+	void (*bprm_free_security) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#380: FILE: include/linux/security.h:330:
+	void (*bprm_free_security) (struct linux_binprm * bprm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: include/linux/security.h:331:
+	void (*bprm_compute_creds) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#381: FILE: include/linux/security.h:331:
+	void (*bprm_compute_creds) (struct linux_binprm * bprm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: include/linux/security.h:332:
+	int (*bprm_set_security) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#382: FILE: include/linux/security.h:332:
+	int (*bprm_set_security) (struct linux_binprm * bprm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: include/linux/security.h:333:
+	int (*bprm_check_security) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#383: FILE: include/linux/security.h:333:
+	int (*bprm_check_security) (struct linux_binprm * bprm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#385: FILE: include/linux/security.h:335:
+	int (*task_create) (unsigned long clone_flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#386: FILE: include/linux/security.h:336:
+	int (*task_alloc_security) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#386: FILE: include/linux/security.h:336:
+	int (*task_alloc_security) (struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: include/linux/security.h:337:
+	void (*task_free_security) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#387: FILE: include/linux/security.h:337:
+	void (*task_free_security) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#388: FILE: include/linux/security.h:338:
+	int (*task_setuid) (uid_t id0, uid_t id1, uid_t id2, int flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#389: FILE: include/linux/security.h:339:
+	int (*task_post_setuid) (uid_t old_ruid /* or fsuid */ ,

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#389: FILE: include/linux/security.h:339:
+	int (*task_post_setuid) (uid_t old_ruid /* or fsuid */ ,
 	                                                       ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#391: FILE: include/linux/security.h:341:
+	int (*task_setgid) (gid_t id0, gid_t id1, gid_t id2, int flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: include/linux/security.h:342:
+	int (*task_setpgid) (struct task_struct * p, pid_t pgid);

WARNING:SPACING: Unnecessary space before function pointer arguments
#392: FILE: include/linux/security.h:342:
+	int (*task_setpgid) (struct task_struct * p, pid_t pgid);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: include/linux/security.h:343:
+	int (*task_getpgid) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#393: FILE: include/linux/security.h:343:
+	int (*task_getpgid) (struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: include/linux/security.h:344:
+	int (*task_getsid) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#394: FILE: include/linux/security.h:344:
+	int (*task_getsid) (struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: include/linux/security.h:345:
+	int (*task_setgroups) (int gidsetsize, gid_t * grouplist);

WARNING:SPACING: Unnecessary space before function pointer arguments
#395: FILE: include/linux/security.h:345:
+	int (*task_setgroups) (int gidsetsize, gid_t * grouplist);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: include/linux/security.h:346:
+	int (*task_setnice) (struct task_struct * p, int nice);

WARNING:SPACING: Unnecessary space before function pointer arguments
#396: FILE: include/linux/security.h:346:
+	int (*task_setnice) (struct task_struct * p, int nice);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#397: FILE: include/linux/security.h:347:
+	int (*task_setrlimit) (unsigned int resource, struct rlimit * new_rlim);

WARNING:SPACING: Unnecessary space before function pointer arguments
#397: FILE: include/linux/security.h:347:
+	int (*task_setrlimit) (unsigned int resource, struct rlimit * new_rlim);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: include/linux/security.h:348:
+	int (*task_setscheduler) (struct task_struct * p, int policy,

WARNING:SPACING: Unnecessary space before function pointer arguments
#398: FILE: include/linux/security.h:348:
+	int (*task_setscheduler) (struct task_struct * p, int policy,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#399: FILE: include/linux/security.h:349:
+				  struct sched_param * lp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: include/linux/security.h:350:
+	int (*task_getscheduler) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#400: FILE: include/linux/security.h:350:
+	int (*task_getscheduler) (struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#401: FILE: include/linux/security.h:351:
+	int (*task_kill) (struct task_struct * p,

WARNING:SPACING: Unnecessary space before function pointer arguments
#401: FILE: include/linux/security.h:351:
+	int (*task_kill) (struct task_struct * p,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: include/linux/security.h:352:
+			  struct siginfo * info, int sig);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: include/linux/security.h:353:
+	int (*task_wait) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#403: FILE: include/linux/security.h:353:
+	int (*task_wait) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#404: FILE: include/linux/security.h:354:
+	int (*task_prctl) (int option, unsigned long arg2,

WARNING:SPACING: Unnecessary space before function pointer arguments
#407: FILE: include/linux/security.h:357:
+	void (*task_kmod_set_label) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: include/linux/security.h:358:
+	void (*task_reparent_to_init) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#408: FILE: include/linux/security.h:358:
+	void (*task_reparent_to_init) (struct task_struct * p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#411: FILE: include/linux/security.h:361:
+	int (*register_security) (const char *name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: include/linux/security.h:362:
+^I                          struct security_operations *ops);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: Unnecessary space before function pointer arguments
#413: FILE: include/linux/security.h:363:
+	int (*unregister_security) (const char *name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: include/linux/security.h:364:
+^I                            struct security_operations *ops);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#417: FILE: include/linux/security.h:367:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: include/linux/security.h:369:
+extern int security_scaffolding_startup	(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: include/linux/security.h:369:
+extern int security_scaffolding_startup	(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: include/linux/security.h:370:
+extern int register_security	(struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/linux/security.h:370:
+extern int register_security	(struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: include/linux/security.h:371:
+extern int unregister_security	(struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/security.h:371:
+extern int unregister_security	(struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: include/linux/security.h:372:
+extern int mod_reg_security	(const char *name, struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/security.h:372:
+extern int mod_reg_security	(const char *name, struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: include/linux/security.h:373:
+extern int mod_unreg_security	(const char *name, struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/security.h:373:
+extern int mod_unreg_security	(const char *name, struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#424: FILE: include/linux/security.h:374:
+extern int capable		(int cap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/linux/security.h:374:
+extern int capable		(int cap);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: include/linux/security.h:379:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#474: FILE: security/capability.c:1:
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#498: FILE: security/capability.c:25:
+static int cap_capable (struct task_struct *tsk, int cap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: security/capability.c:28:
+	if (cap_raised (tsk->cap_effective, cap))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: security/capability.c:34:
+static int cap_sys_security (unsigned int id, unsigned int call,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#510: FILE: security/capability.c:37:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#513: FILE: security/capability.c:40:
+static int cap_ptrace (struct task_struct *parent, struct task_struct *child)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#516: FILE: security/capability.c:43:
+	if (!cap_issubset (child->cap_permitted, current->cap_permitted) &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: security/capability.c:44:
+	    !capable (CAP_SYS_PTRACE))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#523: FILE: security/capability.c:50:
+static int cap_capget (struct task_struct *target, kernel_cap_t * effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#523: FILE: security/capability.c:50:
+static int cap_capget (struct task_struct *target, kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: security/capability.c:51:
+		       kernel_cap_t * inheritable, kernel_cap_t * permitted)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: security/capability.c:51:
+		       kernel_cap_t * inheritable, kernel_cap_t * permitted)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#533: FILE: security/capability.c:60:
+static int cap_capset_check (struct task_struct *target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#534: FILE: security/capability.c:61:
+			     kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#535: FILE: security/capability.c:62:
+			     kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: security/capability.c:63:
+			     kernel_cap_t * permitted)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#540: FILE: security/capability.c:67:
+	if (!cap_issubset (*inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: security/capability.c:68:
+			   cap_combine (target->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: security/capability.c:74:
+	if (!cap_issubset (*permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#548: FILE: security/capability.c:75:
+			   cap_combine (target->cap_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: security/capability.c:81:
+	if (!cap_issubset (*effective, *permitted)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#554: FILE: security/capability.c:81:
+	if (!cap_issubset (*effective, *permitted)) {
+		return -EPERM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#561: FILE: security/capability.c:88:
+static void cap_capset_set (struct task_struct *target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#562: FILE: security/capability.c:89:
+			    kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#563: FILE: security/capability.c:90:
+			    kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: security/capability.c:91:
+			    kernel_cap_t * permitted)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#571: FILE: security/capability.c:98:
+static int cap_bprm_alloc_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#576: FILE: security/capability.c:103:
+static int cap_bprm_set_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#581: FILE: security/capability.c:108:
+	cap_clear (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#582: FILE: security/capability.c:109:
+	cap_clear (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#583: FILE: security/capability.c:110:
+	cap_clear (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#593: FILE: security/capability.c:120:
+	if (!issecure (SECURE_NOROOT)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#595: FILE: security/capability.c:122:
+			cap_set_full (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#596: FILE: security/capability.c:123:
+			cap_set_full (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#599: FILE: security/capability.c:126:
+			cap_set_full (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#604: FILE: security/capability.c:131:
+static int cap_bprm_check_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#609: FILE: security/capability.c:136:
+static void cap_bprm_free_security (struct linux_binprm *bprm)

WARNING:RETURN_VOID: void function return statements are not generally useful
#612: FILE: security/capability.c:139:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#615: FILE: security/capability.c:142:
+static inline int must_not_trace_exec (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#620: FILE: security/capability.c:147:
+static void cap_bprm_compute_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#626: FILE: security/capability.c:153:
+	new_permitted = cap_intersect (bprm->cap_permitted, cap_bset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#627: FILE: security/capability.c:154:
+	working = cap_intersect (bprm->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#629: FILE: security/capability.c:156:
+	new_permitted = cap_combine (new_permitted, working);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#631: FILE: security/capability.c:158:
+	if (!cap_issubset (new_permitted, current->cap_permitted)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#634: FILE: security/capability.c:161:
+		lock_kernel ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#635: FILE: security/capability.c:162:
+		if (must_not_trace_exec (current)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->fs->count'
#635: FILE: security/capability.c:162:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sig->count) > 1) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->files->count'
#635: FILE: security/capability.c:162:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sig->count) > 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->sig->count'
#635: FILE: security/capability.c:162:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sig->count) > 1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#636: FILE: security/capability.c:163:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#636: FILE: security/capability.c:163:
+		    || atomic_read (&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#637: FILE: security/capability.c:164:
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#637: FILE: security/capability.c:164:
+		    || atomic_read (&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#638: FILE: security/capability.c:165:
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sig->count) > 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#638: FILE: security/capability.c:165:
+		    || atomic_read (&current->sig->count) > 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#639: FILE: security/capability.c:166:
+			if (!capable (CAP_SETPCAP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#640: FILE: security/capability.c:167:
+				new_permitted = cap_intersect (new_permitted,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'current->cap_permitted'
#642: FILE: security/capability.c:169:
+							       current->
+							       cap_permitted);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#650: FILE: security/capability.c:177:
+	 * capability rules */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#654: FILE: security/capability.c:181:
+		    cap_intersect (new_permitted, bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#660: FILE: security/capability.c:187:
+		unlock_kernel ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#665: FILE: security/capability.c:192:
+static int cap_task_create (unsigned long clone_flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#670: FILE: security/capability.c:197:
+static int cap_task_alloc_security (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#675: FILE: security/capability.c:202:
+static void cap_task_free_security (struct task_struct *p)

WARNING:RETURN_VOID: void function return statements are not generally useful
#678: FILE: security/capability.c:205:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: security/capability.c:207:
+static int cap_task_setuid (uid_t id0, uid_t id1, uid_t id2, int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: security/capability.c:213:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#700: FILE: security/capability.c:227:
+ *  fsuid is handled elsewhere. fsuid == 0 and {r,e,s}uid!= 0 should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: security/capability.c:230:
+ *  -astor $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#715: FILE: security/capability.c:242:
+static inline void cap_emulate_setxuid (int old_ruid, int old_euid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#721: FILE: security/capability.c:248:
+		cap_clear (current->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#722: FILE: security/capability.c:249:
+		cap_clear (current->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#724: FILE: security/capability.c:251:
+	if (old_euid == 0 && current->euid != 0) {
+		cap_clear (current->cap_effective);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#725: FILE: security/capability.c:252:
+		cap_clear (current->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#727: FILE: security/capability.c:254:
+	if (old_euid != 0 && current->euid == 0) {
+		current->cap_effective = current->cap_permitted;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#732: FILE: security/capability.c:259:
+static int cap_task_post_setuid (uid_t old_ruid, uid_t old_euid, uid_t old_suid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#740: FILE: security/capability.c:267:
+		if (!issecure (SECURE_NO_SETUID_FIXUP)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#740: FILE: security/capability.c:267:
+		if (!issecure (SECURE_NO_SETUID_FIXUP)) {
+			cap_emulate_setxuid (old_ruid, old_euid, old_suid);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: security/capability.c:268:
+			cap_emulate_setxuid (old_ruid, old_euid, old_suid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#755: FILE: security/capability.c:282:
+			if (!issecure (SECURE_NO_SETUID_FIXUP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#775: FILE: security/capability.c:302:
+static int cap_task_setgid (gid_t id0, gid_t id1, gid_t id2, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#780: FILE: security/capability.c:307:
+static int cap_task_setpgid (struct task_struct *p, pid_t pgid)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#785: FILE: security/capability.c:312:
+static int cap_task_getpgid (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: security/capability.c:317:
+static int cap_task_getsid (struct task_struct *p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#795: FILE: security/capability.c:322:
+static int cap_task_setgroups (int gidsetsize, gid_t * grouplist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#795: FILE: security/capability.c:322:
+static int cap_task_setgroups (int gidsetsize, gid_t * grouplist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#800: FILE: security/capability.c:327:
+static int cap_task_setnice (struct task_struct *p, int nice)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#805: FILE: security/capability.c:332:
+static int cap_task_setrlimit (unsigned int resource, struct rlimit *new_rlim)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#810: FILE: security/capability.c:337:
+static int cap_task_setscheduler (struct task_struct *p, int policy,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#816: FILE: security/capability.c:343:
+static int cap_task_getscheduler (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#821: FILE: security/capability.c:348:
+static int cap_task_wait (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#826: FILE: security/capability.c:353:
+static int cap_task_kill (struct task_struct *p, struct siginfo *info, int sig)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#831: FILE: security/capability.c:358:
+static int cap_task_prctl (int option, unsigned long arg2, unsigned long arg3,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#837: FILE: security/capability.c:364:
+static void cap_task_kmod_set_label (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: security/capability.c:366:
+	cap_set_full (current->cap_effective);

WARNING:RETURN_VOID: void function return statements are not generally useful
#841: FILE: security/capability.c:368:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#843: FILE: security/capability.c:370:
+static void cap_task_reparent_to_init (struct task_struct *p)

WARNING:RETURN_VOID: void function return statements are not generally useful
#850: FILE: security/capability.c:377:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#852: FILE: security/capability.c:379:
+static int cap_register (const char *name, struct security_operations *ops)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#857: FILE: security/capability.c:384:
+static int cap_unregister (const char *name, struct security_operations *ops)

WARNING:INDENTED_LABEL: labels should not be indented
#863: FILE: security/capability.c:390:
+	ptrace:				cap_ptrace,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#864: FILE: security/capability.c:391:
+	capget:				cap_capget,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#864: FILE: security/capability.c:391:
+	capget:				cap_capget,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#865: FILE: security/capability.c:392:
+	capset_check:			cap_capset_check,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#865: FILE: security/capability.c:392:
+	capset_check:			cap_capset_check,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#866: FILE: security/capability.c:393:
+	capset_set:			cap_capset_set,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#866: FILE: security/capability.c:393:
+	capset_set:			cap_capset_set,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#867: FILE: security/capability.c:394:
+	capable:			cap_capable,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#867: FILE: security/capability.c:394:
+	capable:			cap_capable,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#868: FILE: security/capability.c:395:
+	sys_security:			cap_sys_security,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#868: FILE: security/capability.c:395:
+	sys_security:			cap_sys_security,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: security/capability.c:396:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#870: FILE: security/capability.c:397:
+	bprm_alloc_security:		cap_bprm_alloc_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#870: FILE: security/capability.c:397:
+	bprm_alloc_security:		cap_bprm_alloc_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#871: FILE: security/capability.c:398:
+	bprm_free_security:		cap_bprm_free_security,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#871: FILE: security/capability.c:398:
+	bprm_free_security:		cap_bprm_free_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#872: FILE: security/capability.c:399:
+	bprm_compute_creds:		cap_bprm_compute_creds,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#872: FILE: security/capability.c:399:
+	bprm_compute_creds:		cap_bprm_compute_creds,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#873: FILE: security/capability.c:400:
+	bprm_set_security:		cap_bprm_set_security,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#873: FILE: security/capability.c:400:
+	bprm_set_security:		cap_bprm_set_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#874: FILE: security/capability.c:401:
+	bprm_check_security:		cap_bprm_check_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#874: FILE: security/capability.c:401:
+	bprm_check_security:		cap_bprm_check_security,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: security/capability.c:402:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#876: FILE: security/capability.c:403:
+	task_create:			cap_task_create,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#876: FILE: security/capability.c:403:
+	task_create:			cap_task_create,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#877: FILE: security/capability.c:404:
+	task_alloc_security:		cap_task_alloc_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#877: FILE: security/capability.c:404:
+	task_alloc_security:		cap_task_alloc_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#878: FILE: security/capability.c:405:
+	task_free_security:		cap_task_free_security,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#878: FILE: security/capability.c:405:
+	task_free_security:		cap_task_free_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#879: FILE: security/capability.c:406:
+	task_setuid:			cap_task_setuid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#879: FILE: security/capability.c:406:
+	task_setuid:			cap_task_setuid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#880: FILE: security/capability.c:407:
+	task_post_setuid:		cap_task_post_setuid,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#880: FILE: security/capability.c:407:
+	task_post_setuid:		cap_task_post_setuid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#881: FILE: security/capability.c:408:
+	task_setgid:			cap_task_setgid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#881: FILE: security/capability.c:408:
+	task_setgid:			cap_task_setgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#882: FILE: security/capability.c:409:
+	task_setpgid:			cap_task_setpgid,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#882: FILE: security/capability.c:409:
+	task_setpgid:			cap_task_setpgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#883: FILE: security/capability.c:410:
+	task_getpgid:			cap_task_getpgid,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#883: FILE: security/capability.c:410:
+	task_getpgid:			cap_task_getpgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#884: FILE: security/capability.c:411:
+	task_getsid:			cap_task_getsid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#884: FILE: security/capability.c:411:
+	task_getsid:			cap_task_getsid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#885: FILE: security/capability.c:412:
+	task_setgroups:			cap_task_setgroups,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#885: FILE: security/capability.c:412:
+	task_setgroups:			cap_task_setgroups,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#886: FILE: security/capability.c:413:
+	task_setnice:			cap_task_setnice,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#886: FILE: security/capability.c:413:
+	task_setnice:			cap_task_setnice,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#887: FILE: security/capability.c:414:
+	task_setrlimit:			cap_task_setrlimit,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#887: FILE: security/capability.c:414:
+	task_setrlimit:			cap_task_setrlimit,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#888: FILE: security/capability.c:415:
+	task_setscheduler:		cap_task_setscheduler,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#888: FILE: security/capability.c:415:
+	task_setscheduler:		cap_task_setscheduler,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#889: FILE: security/capability.c:416:
+	task_getscheduler:		cap_task_getscheduler,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#889: FILE: security/capability.c:416:
+	task_getscheduler:		cap_task_getscheduler,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#890: FILE: security/capability.c:417:
+	task_wait:			cap_task_wait,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#890: FILE: security/capability.c:417:
+	task_wait:			cap_task_wait,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#891: FILE: security/capability.c:418:
+	task_kill:			cap_task_kill,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#891: FILE: security/capability.c:418:
+	task_kill:			cap_task_kill,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#892: FILE: security/capability.c:419:
+	task_prctl:			cap_task_prctl,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#892: FILE: security/capability.c:419:
+	task_prctl:			cap_task_prctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#893: FILE: security/capability.c:420:
+	task_kmod_set_label:		cap_task_kmod_set_label,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#893: FILE: security/capability.c:420:
+	task_kmod_set_label:		cap_task_kmod_set_label,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#894: FILE: security/capability.c:421:
+	task_reparent_to_init:		cap_task_reparent_to_init,
 	                     ^

WARNING:INDENTED_LABEL: labels should not be indented
#894: FILE: security/capability.c:421:
+	task_reparent_to_init:		cap_task_reparent_to_init,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: security/capability.c:422:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#896: FILE: security/capability.c:423:
+	register_security:		cap_register,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#896: FILE: security/capability.c:423:
+	register_security:		cap_register,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#897: FILE: security/capability.c:424:
+	unregister_security:		cap_unregister,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#897: FILE: security/capability.c:424:
+	unregister_security:		cap_unregister,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#906: FILE: security/capability.c:433:
+static int __init capability_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#909: FILE: security/capability.c:436:
+	if (register_security (&capability_ops)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&capability_ops'
#909: FILE: security/capability.c:436:
+	if (register_security (&capability_ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#910: FILE: security/capability.c:437:
+		printk (KERN_INFO

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#910: FILE: security/capability.c:437:
+		printk (KERN_INFO

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#913: FILE: security/capability.c:440:
+		if (mod_reg_security (MY_NAME, &capability_ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#914: FILE: security/capability.c:441:
+			printk (KERN_INFO "Failure registering capabilities "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#914: FILE: security/capability.c:441:
+			printk (KERN_INFO "Failure registering capabilities "

WARNING:SPLIT_STRING: quoted string split across lines
#915: FILE: security/capability.c:442:
+			printk (KERN_INFO "Failure registering capabilities "
+				"with primary security module.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#920: FILE: security/capability.c:447:
+	printk (KERN_INFO "Capability LSM initialized\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#920: FILE: security/capability.c:447:
+	printk (KERN_INFO "Capability LSM initialized\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#924: FILE: security/capability.c:451:
+static void __exit capability_exit (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#928: FILE: security/capability.c:455:
+		if (mod_unreg_security (MY_NAME, &capability_ops))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#929: FILE: security/capability.c:456:
+			printk (KERN_INFO "Failure unregistering capabilities "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#929: FILE: security/capability.c:456:
+			printk (KERN_INFO "Failure unregistering capabilities "

WARNING:SPLIT_STRING: quoted string split across lines
#930: FILE: security/capability.c:457:
+			printk (KERN_INFO "Failure unregistering capabilities "
+				"with primary module.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#934: FILE: security/capability.c:461:
+	if (unregister_security (&capability_ops)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&capability_ops'
#934: FILE: security/capability.c:461:
+	if (unregister_security (&capability_ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#935: FILE: security/capability.c:462:
+		printk (KERN_INFO

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#935: FILE: security/capability.c:462:
+		printk (KERN_INFO

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#940: FILE: security/capability.c:467:
+module_init (capability_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#941: FILE: security/capability.c:468:
+module_exit (capability_exit);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#949: FILE: security/dummy.c:1:
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#970: FILE: security/dummy.c:22:
+static int dummy_ptrace (struct task_struct *parent, struct task_struct *child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#975: FILE: security/dummy.c:27:
+static int dummy_capget (struct task_struct *target, kernel_cap_t * effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#975: FILE: security/dummy.c:27:
+static int dummy_capget (struct task_struct *target, kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#976: FILE: security/dummy.c:28:
+			 kernel_cap_t * inheritable, kernel_cap_t * permitted)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#976: FILE: security/dummy.c:28:
+			 kernel_cap_t * inheritable, kernel_cap_t * permitted)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#981: FILE: security/dummy.c:33:
+static int dummy_capset_check (struct task_struct *target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#982: FILE: security/dummy.c:34:
+			       kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#983: FILE: security/dummy.c:35:
+			       kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#984: FILE: security/dummy.c:36:
+			       kernel_cap_t * permitted)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: security/dummy.c:41:
+static void dummy_capset_set (struct task_struct *target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#990: FILE: security/dummy.c:42:
+			      kernel_cap_t * effective,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#991: FILE: security/dummy.c:43:
+			      kernel_cap_t * inheritable,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#992: FILE: security/dummy.c:44:
+			      kernel_cap_t * permitted)

WARNING:RETURN_VOID: void function return statements are not generally useful
#995: FILE: security/dummy.c:47:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#997: FILE: security/dummy.c:49:
+static int dummy_capable (struct task_struct *tsk, int cap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#999: FILE: security/dummy.c:51:
+	if (cap_is_fs_cap (cap) ? tsk->fsuid == 0 : tsk->euid == 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: security/dummy.c:59:
+static int dummy_sys_security (unsigned int id, unsigned int call,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1010: FILE: security/dummy.c:62:
+	return -ENOSYS;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1013: FILE: security/dummy.c:65:
+static int dummy_bprm_alloc_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1018: FILE: security/dummy.c:70:
+static void dummy_bprm_free_security (struct linux_binprm *bprm)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1021: FILE: security/dummy.c:73:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1023: FILE: security/dummy.c:75:
+static void dummy_bprm_compute_creds (struct linux_binprm *bprm)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1026: FILE: security/dummy.c:78:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1028: FILE: security/dummy.c:80:
+static int dummy_bprm_set_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1033: FILE: security/dummy.c:85:
+static int dummy_bprm_check_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1038: FILE: security/dummy.c:90:
+static int dummy_task_create (unsigned long clone_flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1043: FILE: security/dummy.c:95:
+static int dummy_task_alloc_security (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1048: FILE: security/dummy.c:100:
+static void dummy_task_free_security (struct task_struct *p)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1051: FILE: security/dummy.c:103:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1053: FILE: security/dummy.c:105:
+static int dummy_task_setuid (uid_t id0, uid_t id1, uid_t id2, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1058: FILE: security/dummy.c:110:
+static int dummy_task_post_setuid (uid_t id0, uid_t id1, uid_t id2, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1063: FILE: security/dummy.c:115:
+static int dummy_task_setgid (gid_t id0, gid_t id1, gid_t id2, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1068: FILE: security/dummy.c:120:
+static int dummy_task_setpgid (struct task_struct *p, pid_t pgid)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1073: FILE: security/dummy.c:125:
+static int dummy_task_getpgid (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1078: FILE: security/dummy.c:130:
+static int dummy_task_getsid (struct task_struct *p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1083: FILE: security/dummy.c:135:
+static int dummy_task_setgroups (int gidsetsize, gid_t * grouplist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1083: FILE: security/dummy.c:135:
+static int dummy_task_setgroups (int gidsetsize, gid_t * grouplist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1088: FILE: security/dummy.c:140:
+static int dummy_task_setnice (struct task_struct *p, int nice)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1093: FILE: security/dummy.c:145:
+static int dummy_task_setrlimit (unsigned int resource, struct rlimit *new_rlim)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1098: FILE: security/dummy.c:150:
+static int dummy_task_setscheduler (struct task_struct *p, int policy,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1104: FILE: security/dummy.c:156:
+static int dummy_task_getscheduler (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1109: FILE: security/dummy.c:161:
+static int dummy_task_wait (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1114: FILE: security/dummy.c:166:
+static int dummy_task_kill (struct task_struct *p, struct siginfo *info,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1120: FILE: security/dummy.c:172:
+static int dummy_task_prctl (int option, unsigned long arg2, unsigned long arg3,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1126: FILE: security/dummy.c:178:
+static void dummy_task_kmod_set_label (void)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1129: FILE: security/dummy.c:181:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1131: FILE: security/dummy.c:183:
+static void dummy_task_reparent_to_init (struct task_struct *p)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1133: FILE: security/dummy.c:185:
+	p->euid = p->fsuid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:RETURN_VOID: void function return statements are not generally useful
#1135: FILE: security/dummy.c:187:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1137: FILE: security/dummy.c:189:
+static int dummy_register (const char *name, struct security_operations *ops)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1142: FILE: security/dummy.c:194:
+static int dummy_unregister (const char *name, struct security_operations *ops)

WARNING:INDENTED_LABEL: labels should not be indented
#1148: FILE: security/dummy.c:200:
+	ptrace:				dummy_ptrace,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1149: FILE: security/dummy.c:201:
+	capget:				dummy_capget,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1149: FILE: security/dummy.c:201:
+	capget:				dummy_capget,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1150: FILE: security/dummy.c:202:
+	capset_check:			dummy_capset_check,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1150: FILE: security/dummy.c:202:
+	capset_check:			dummy_capset_check,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1151: FILE: security/dummy.c:203:
+	capset_set:			dummy_capset_set,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#1151: FILE: security/dummy.c:203:
+	capset_set:			dummy_capset_set,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1152: FILE: security/dummy.c:204:
+	capable:			dummy_capable,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1152: FILE: security/dummy.c:204:
+	capable:			dummy_capable,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1153: FILE: security/dummy.c:205:
+	sys_security:			dummy_sys_security,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1153: FILE: security/dummy.c:205:
+	sys_security:			dummy_sys_security,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: security/dummy.c:206:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1155: FILE: security/dummy.c:207:
+	bprm_alloc_security:		dummy_bprm_alloc_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1155: FILE: security/dummy.c:207:
+	bprm_alloc_security:		dummy_bprm_alloc_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1156: FILE: security/dummy.c:208:
+	bprm_free_security:		dummy_bprm_free_security,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#1156: FILE: security/dummy.c:208:
+	bprm_free_security:		dummy_bprm_free_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1157: FILE: security/dummy.c:209:
+	bprm_compute_creds:		dummy_bprm_compute_creds,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#1157: FILE: security/dummy.c:209:
+	bprm_compute_creds:		dummy_bprm_compute_creds,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1158: FILE: security/dummy.c:210:
+	bprm_set_security:		dummy_bprm_set_security,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1158: FILE: security/dummy.c:210:
+	bprm_set_security:		dummy_bprm_set_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1159: FILE: security/dummy.c:211:
+	bprm_check_security:		dummy_bprm_check_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1159: FILE: security/dummy.c:211:
+	bprm_check_security:		dummy_bprm_check_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1161: FILE: security/dummy.c:213:
+	task_create:			dummy_task_create,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1161: FILE: security/dummy.c:213:
+	task_create:			dummy_task_create,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1162: FILE: security/dummy.c:214:
+	task_alloc_security:		dummy_task_alloc_security,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1162: FILE: security/dummy.c:214:
+	task_alloc_security:		dummy_task_alloc_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1163: FILE: security/dummy.c:215:
+	task_free_security:		dummy_task_free_security,
 	                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#1163: FILE: security/dummy.c:215:
+	task_free_security:		dummy_task_free_security,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1164: FILE: security/dummy.c:216:
+	task_setuid:			dummy_task_setuid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1164: FILE: security/dummy.c:216:
+	task_setuid:			dummy_task_setuid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1165: FILE: security/dummy.c:217:
+	task_post_setuid:		dummy_task_post_setuid,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1165: FILE: security/dummy.c:217:
+	task_post_setuid:		dummy_task_post_setuid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1166: FILE: security/dummy.c:218:
+	task_setgid:			dummy_task_setgid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1166: FILE: security/dummy.c:218:
+	task_setgid:			dummy_task_setgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1167: FILE: security/dummy.c:219:
+	task_setpgid:			dummy_task_setpgid,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1167: FILE: security/dummy.c:219:
+	task_setpgid:			dummy_task_setpgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1168: FILE: security/dummy.c:220:
+	task_getpgid:			dummy_task_getpgid,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1168: FILE: security/dummy.c:220:
+	task_getpgid:			dummy_task_getpgid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1169: FILE: security/dummy.c:221:
+	task_getsid:			dummy_task_getsid,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1169: FILE: security/dummy.c:221:
+	task_getsid:			dummy_task_getsid,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1170: FILE: security/dummy.c:222:
+	task_setgroups:			dummy_task_setgroups,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#1170: FILE: security/dummy.c:222:
+	task_setgroups:			dummy_task_setgroups,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1171: FILE: security/dummy.c:223:
+	task_setnice:			dummy_task_setnice,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1171: FILE: security/dummy.c:223:
+	task_setnice:			dummy_task_setnice,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1172: FILE: security/dummy.c:224:
+	task_setrlimit:			dummy_task_setrlimit,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#1172: FILE: security/dummy.c:224:
+	task_setrlimit:			dummy_task_setrlimit,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1173: FILE: security/dummy.c:225:
+	task_setscheduler:		dummy_task_setscheduler,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1173: FILE: security/dummy.c:225:
+	task_setscheduler:		dummy_task_setscheduler,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1174: FILE: security/dummy.c:226:
+	task_getscheduler:		dummy_task_getscheduler,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1174: FILE: security/dummy.c:226:
+	task_getscheduler:		dummy_task_getscheduler,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1175: FILE: security/dummy.c:227:
+	task_wait:			dummy_task_wait,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1175: FILE: security/dummy.c:227:
+	task_wait:			dummy_task_wait,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1176: FILE: security/dummy.c:228:
+	task_kill:			dummy_task_kill,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1176: FILE: security/dummy.c:228:
+	task_kill:			dummy_task_kill,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1177: FILE: security/dummy.c:229:
+	task_prctl:			dummy_task_prctl,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#1177: FILE: security/dummy.c:229:
+	task_prctl:			dummy_task_prctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1178: FILE: security/dummy.c:230:
+	task_kmod_set_label:		dummy_task_kmod_set_label,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1178: FILE: security/dummy.c:230:
+	task_kmod_set_label:		dummy_task_kmod_set_label,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1179: FILE: security/dummy.c:231:
+	task_reparent_to_init:		dummy_task_reparent_to_init,
 	                     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1179: FILE: security/dummy.c:231:
+	task_reparent_to_init:		dummy_task_reparent_to_init,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: security/dummy.c:232:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1181: FILE: security/dummy.c:233:
+	register_security:		dummy_register,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1181: FILE: security/dummy.c:233:
+	register_security:		dummy_register,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1182: FILE: security/dummy.c:234:
+	unregister_security:		dummy_unregister,
 	                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1182: FILE: security/dummy.c:234:
+	unregister_security:		dummy_unregister,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1189: FILE: security/security.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1211: FILE: security/security.c:23:
+extern struct security_operations dummy_security_ops;	/* lives in dummy.c */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: security/security.c:27:
+/* This macro checks that all pointers in a struct are non-NULL.  It $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#1220: FILE: security/security.c:32:
+#define VERIFY_STRUCT(struct_type, s, e) \
+	do { \
+		unsigned long * __start = (unsigned long *)(s); \
+		unsigned long * __end = __start + \
+				sizeof(struct_type)/sizeof(unsigned long *); \
+		while (__start != __end) { \
+			if (!*__start) { \
+				printk(KERN_INFO "%s is missing something\n",\
+					#struct_type); \
+				e++; \
+				break; \
+			} \
+			__start++; \
+		} \
+	} while (0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1222: FILE: security/security.c:34:
+		unsigned long * __start = (unsigned long *)(s); \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1223: FILE: security/security.c:35:
+		unsigned long * __end = __start + \

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1224: FILE: security/security.c:36:
+				sizeof(struct_type)/sizeof(unsigned long *); \
 				                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1227: FILE: security/security.c:39:
+				printk(KERN_INFO "%s is missing something\n",\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1236: FILE: security/security.c:48:
+static int inline verify (struct security_operations *ops)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1236: FILE: security/security.c:48:
+static int inline verify (struct security_operations *ops)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1242: FILE: security/security.c:54:
+		printk (KERN_INFO "Passed a NULL security_operations "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1242: FILE: security/security.c:54:
+		printk (KERN_INFO "Passed a NULL security_operations "

WARNING:SPLIT_STRING: quoted string split across lines
#1243: FILE: security/security.c:55:
+		printk (KERN_INFO "Passed a NULL security_operations "
+			"pointer, " __FUNCTION__ " failed.\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1243: FILE: security/security.c:55:
+			"pointer, " __FUNCTION__ " failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1259: FILE: security/security.c:71:
+		printk (KERN_INFO "Not enough functions specified in the "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1259: FILE: security/security.c:71:
+		printk (KERN_INFO "Not enough functions specified in the "

WARNING:SPLIT_STRING: quoted string split across lines
#1260: FILE: security/security.c:72:
+		printk (KERN_INFO "Not enough functions specified in the "
+			"security_operation structure, " __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1260: FILE: security/security.c:72:
+			"security_operation structure, " __FUNCTION__

WARNING:TYPO_SPELLING: 'initialzes' may be misspelled - perhaps 'initializes'?
#1268: FILE: security/security.c:80:
+ * security_scaffolding_startup - initialzes the security scaffolding framework
                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1272: FILE: security/security.c:84:
+int security_scaffolding_startup (void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1274: FILE: security/security.c:86:
+	printk (KERN_INFO "Security Scaffold v" SECURITY_SCAFFOLD_VERSION

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1274: FILE: security/security.c:86:
+	printk (KERN_INFO "Security Scaffold v" SECURITY_SCAFFOLD_VERSION

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1295: FILE: security/security.c:107:
+int register_security (struct security_operations *ops)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1297: FILE: security/security.c:109:
+{
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1298: FILE: security/security.c:110:
+	if (verify (ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1299: FILE: security/security.c:111:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1299: FILE: security/security.c:111:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1299: FILE: security/security.c:111:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:SPLIT_STRING: quoted string split across lines
#1300: FILE: security/security.c:112:
+		printk (KERN_INFO __FUNCTION__ " could not verify "
+			"security_operations structure.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1304: FILE: security/security.c:116:
+		printk (KERN_INFO "There is already a security "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1304: FILE: security/security.c:116:
+		printk (KERN_INFO "There is already a security "

WARNING:SPLIT_STRING: quoted string split across lines
#1305: FILE: security/security.c:117:
+		printk (KERN_INFO "There is already a security "
+			"framework initialized, " __FUNCTION__ " failed.\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1305: FILE: security/security.c:117:
+			"framework initialized, " __FUNCTION__ " failed.\n");

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1323: FILE: security/security.c:135:
+ * an error is returned.  Otherwise the default security options is set to the
+ * the dummy_security_ops structure, and 0 is returned.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1325: FILE: security/security.c:137:
+int unregister_security (struct security_operations *ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1328: FILE: security/security.c:140:
+		printk (KERN_INFO __FUNCTION__ ": trying to unregister "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1328: FILE: security/security.c:140:
+		printk (KERN_INFO __FUNCTION__ ": trying to unregister "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1328: FILE: security/security.c:140:
+		printk (KERN_INFO __FUNCTION__ ": trying to unregister "

WARNING:SPLIT_STRING: quoted string split across lines
#1329: FILE: security/security.c:141:
+		printk (KERN_INFO __FUNCTION__ ": trying to unregister "
+			"a security_opts structure that is not "

WARNING:SPLIT_STRING: quoted string split across lines
#1330: FILE: security/security.c:142:
+			"a security_opts structure that is not "
+			"registered, failing.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1351: FILE: security/security.c:163:
+int mod_reg_security (const char *name, struct security_operations *ops)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1353: FILE: security/security.c:165:
+	if (verify (ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1354: FILE: security/security.c:166:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1354: FILE: security/security.c:166:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1354: FILE: security/security.c:166:
+		printk (KERN_INFO __FUNCTION__ " could not verify "

WARNING:SPLIT_STRING: quoted string split across lines
#1355: FILE: security/security.c:167:
+		printk (KERN_INFO __FUNCTION__ " could not verify "
+			"security operations.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1360: FILE: security/security.c:172:
+		printk (KERN_INFO __FUNCTION__ " security operations "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1360: FILE: security/security.c:172:
+		printk (KERN_INFO __FUNCTION__ " security operations "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1360: FILE: security/security.c:172:
+		printk (KERN_INFO __FUNCTION__ " security operations "

WARNING:SPLIT_STRING: quoted string split across lines
#1361: FILE: security/security.c:173:
+		printk (KERN_INFO __FUNCTION__ " security operations "
+			"already registered.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1365: FILE: security/security.c:177:
+	return security_ops->register_security (name, ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1381: FILE: security/security.c:193:
+int mod_unreg_security (const char *name, struct security_operations *ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1384: FILE: security/security.c:196:
+		printk (KERN_INFO __FUNCTION__ " invalid attempt to unregister "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1384: FILE: security/security.c:196:
+		printk (KERN_INFO __FUNCTION__ " invalid attempt to unregister "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1384: FILE: security/security.c:196:
+		printk (KERN_INFO __FUNCTION__ " invalid attempt to unregister "

WARNING:SPLIT_STRING: quoted string split across lines
#1385: FILE: security/security.c:197:
+		printk (KERN_INFO __FUNCTION__ " invalid attempt to unregister "
+			" primary security ops.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1389: FILE: security/security.c:201:
+	return security_ops->unregister_security (name, ops);

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1393: FILE: security/security.c:205:
+ * capable - calls the currently loaded security module's capable() function with the specified capability

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1402: FILE: security/security.c:214:
+int capable (int cap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1404: FILE: security/security.c:216:
+	if (security_ops->capable (current, cap)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1426: FILE: security/security.c:238:
+asmlinkage long sys_security (unsigned int id, unsigned int call,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1429: FILE: security/security.c:241:
+	return security_ops->sys_security (id, call, args);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1432: FILE: security/security.c:244:
+EXPORT_SYMBOL (register_security);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1432: FILE: security/security.c:244:
+EXPORT_SYMBOL (register_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1433: FILE: security/security.c:245:
+EXPORT_SYMBOL (unregister_security);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1433: FILE: security/security.c:245:
+EXPORT_SYMBOL (unregister_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1434: FILE: security/security.c:246:
+EXPORT_SYMBOL (mod_reg_security);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1434: FILE: security/security.c:246:
+EXPORT_SYMBOL (mod_reg_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1435: FILE: security/security.c:247:
+EXPORT_SYMBOL (mod_unreg_security);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1435: FILE: security/security.c:247:
+EXPORT_SYMBOL (mod_unreg_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1436: FILE: security/security.c:248:
+EXPORT_SYMBOL (capable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1436: FILE: security/security.c:248:
+EXPORT_SYMBOL (capable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1437: FILE: security/security.c:249:
+EXPORT_SYMBOL (security_ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1437: FILE: security/security.c:249:
+EXPORT_SYMBOL (security_ops);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 134 errors, 349 warnings, 20 checks, 1363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
