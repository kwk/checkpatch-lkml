WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -u -p -r linux/include/net/irda.sD/irda.h linux/include/net/irda/irda.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: net/irda/irmod.c:1:
+/*********************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: net/irda/irmod.c:2:
+ *                $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: net/irda/irmod.c:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: net/irda/irmod.c:14:
+ *      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: net/irda/irmod.c:15:
+ *     This program is free software; you can redistribute it and/or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: net/irda/irmod.c:16:
+ *     modify it under the terms of the GNU General Public License as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: net/irda/irmod.c:17:
+ *     published by the Free Software Foundation; either version 2 of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: net/irda/irmod.c:19:
+ *  $

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#90: FILE: net/irda/irmod.c:20:
+ *     Neither Dag Brattli nor University of Tromsø admit liability nor
                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: net/irda/irmod.c:21:
+ *     provide warranty for any of this software. This material is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: net/irda/irmod.c:23:
+ *     $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#97: FILE: net/irda/irmod.c:27:
+/*
+ * This file contains the main entry points of the IrDA stack.

WARNING:TYPO_SPELLING: 'developpers' may be misspelled - perhaps 'developers'?
#98: FILE: net/irda/irmod.c:28:
+ * They are in this file and not af_irda.c because some developpers
                                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#118: FILE: net/irda/irmod.c:48:
+extern void irda_proc_unregister(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#120: FILE: net/irda/irmod.c:50:
+extern int  irda_sysctl_register(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#121: FILE: net/irda/irmod.c:51:
+extern void irda_sysctl_unregister(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: net/irda/irmod.c:53:
+extern int  irsock_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#124: FILE: net/irda/irmod.c:54:
+extern void irsock_cleanup(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: net/irda/irmod.c:56:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: net/irda/irmod.c:56:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#126: FILE: net/irda/irmod.c:56:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#126: FILE: net/irda/irmod.c:56:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type *' should also have an identifier name
#126: FILE: net/irda/irmod.c:56:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *, 

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#130: FILE: net/irda/irmod.c:60:
+/*
+ * Module parameters

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#136: FILE: net/irda/irmod.c:66:
+EXPORT_SYMBOL(irda_debug);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#143: FILE: net/irda/irmod.c:73:
+	.type	= __constant_htons(ETH_P_IRDA),

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#148: FILE: net/irda/irmod.c:78:
+/*
+ * Function irda_notify_init (notify)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#163: FILE: net/irda/irmod.c:93:
+	strlcpy(notify->name, "Unknown", sizeof(notify->name));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#168: FILE: net/irda/irmod.c:98:
+/*
+ * Function irda_init (void)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#175: FILE: net/irda/irmod.c:105:
+	IRDA_DEBUG(0, "%s()\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: net/irda/irmod.c:108:
+ ^Iirlmp_init();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: net/irda/irmod.c:108:
+ ^Iirlmp_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: net/irda/irmod.c:108:
+ ^Iirlmp_init();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: net/irda/irmod.c:110:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: net/irda/irmod.c:113:
+ ^Iirttp_init();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: net/irda/irmod.c:113:
+ ^Iirttp_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: net/irda/irmod.c:113:
+ ^Iirttp_init();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: net/irda/irmod.c:115:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: net/irda/irmod.c:117:
+        dev_add_pack(&irda_packet_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: net/irda/irmod.c:117:
+        dev_add_pack(&irda_packet_type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: net/irda/irmod.c:128:
+ ^Iirda_device_init();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: net/irda/irmod.c:128:
+ ^Iirda_device_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: net/irda/irmod.c:128:
+ ^Iirda_device_init();$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#204: FILE: net/irda/irmod.c:134:
+/*
+ * Function irda_cleanup (void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: net/irda/irmod.c:144:
+#endif^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: net/irda/irmod.c:150:
+        dev_remove_pack(&irda_packet_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: net/irda/irmod.c:150:
+        dev_remove_pack(&irda_packet_type);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: net/irda/irmod.c:151:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#236: FILE: net/irda/irmod.c:166:
+/*
+ * The IrDA stack must be initialised *before* drivers get initialised,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: net/irda/irmod.c:181:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: net/irda/irmod.c:181:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: net/irda/irmod.c:183:
+MODULE_DESCRIPTION("The Linux IrDA Protocol Stack"); $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 31 warnings, 1 checks, 218 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
