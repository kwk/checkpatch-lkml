WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .21483-linux-2.5.68-bk11/include/asm-generic/percpu.h .21483-linux-2.5.68-bk11.updated/include/asm-generic/percpu.h

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#126: FILE: include/linux/percpu.h:7:
+#include <asm/bug.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/percpu.h:28:
+extern void *__alloc_percpu(size_t size, size_t align);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/percpu.h:29:
+extern void kfree_percpu(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#153: FILE: include/linux/percpu.h:29:
+extern void kfree_percpu(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#172: FILE: include/linux/percpu.h:35:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: include/linux/percpu.h:36:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#173: FILE: include/linux/percpu.h:36:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/percpu.h:43:
+extern void setup_per_cpu_areas(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#188: FILE: include/linux/percpu.h:48:
+#define DEFINE_PER_CPU(type, name) \
+    __typeof__(type) name##__per_cpu

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: include/linux/percpu.h:49:
+    __typeof__(type) name##__per_cpu$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: include/linux/percpu.h:61:
+	BUG_ON(align > SMP_CACHE_BYTES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: include/linux/percpu.h:62:
+	BUG_ON(size > PERCPU_POOL_SIZE/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#203: FILE: include/linux/percpu.h:62:
+	BUG_ON(size > PERCPU_POOL_SIZE/2);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#243: FILE: include/linux/percpu.h:80:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) name##__per_cpu

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#243: FILE: include/linux/percpu.h:80:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) name##__per_cpu

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#245: FILE: include/linux/percpu.h:82:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(var##__per_cpu)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#246: FILE: include/linux/percpu.h:83:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(var##__per_cpu)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#333: FILE: mm/percpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#340: FILE: mm/percpu.c:8:
+/* Simple allocator: we don't stress it hard, but do want it
+   fairly space-efficient. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: mm/percpu.c:8:
+   fairly space-efficient. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#350: FILE: mm/percpu.c:18:
+/* We could allocate multiple of these in future.  For the moment, we
+   allocate one at boot time. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#350: FILE: mm/percpu.c:18:
+   allocate one at boot time. */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#354: FILE: mm/percpu.c:22:
+struct pcpu_block
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#361: FILE: mm/percpu.c:29:
+};
+static struct pcpu_block *pcpu; /* = NULL */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#364: FILE: mm/percpu.c:32:
+extern char __per_cpu_start[], __per_cpu_end[];

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#366: FILE: mm/percpu.c:34:
+/* Splits a block into two.  Reallocs pcpu if neccessary. */
                                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#374: FILE: mm/percpu.c:42:
+			      + sizeof(pcpu->size[0]) * pcpu->num_allocated*2,
 			                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#381: FILE: mm/percpu.c:49:
+		       sizeof(pcpu->size[0])*pcpu->num_used);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: mm/percpu.c:55:
+	memmove(&pcpu->size[i+1], &pcpu->size[i],
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: mm/percpu.c:59:
+	pcpu->size[i+1] -= size;
 	            ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#405: FILE: mm/percpu.c:73:
+	unsigned int i;;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#407: FILE: mm/percpu.c:75:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: mm/percpu.c:86:
+	BUG_ON(align > SMP_CACHE_BYTES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: mm/percpu.c:87:
+	BUG_ON(size > PERCPU_POOL_SIZE/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#419: FILE: mm/percpu.c:87:
+	BUG_ON(size > PERCPU_POOL_SIZE/2);
 	                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: mm/percpu.c:100:
+		if (pcpu->size[i-1] < 0)
 		                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#433: FILE: mm/percpu.c:101:
+			pcpu->size[i-1] -= extra;
 			            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: mm/percpu.c:103:
+			pcpu->size[i-1] += extra;
 			            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: mm/percpu.c:115:
+^I^I/* Pointer will be offset by this: compensate. */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: mm/percpu.c:133:
+			BUG_ON(pcpu->size[i] > 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: mm/percpu.c:135:
+			BUG_ON(i == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: mm/percpu.c:140:
+	BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#476: FILE: mm/percpu.c:144:
+	if (pcpu->size[i-1] >= 0) {
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#477: FILE: mm/percpu.c:145:
+		pcpu->size[i-1] += pcpu->size[i];
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#479: FILE: mm/percpu.c:147:
+		memmove(&pcpu->size[i], &pcpu->size[i+1],
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: mm/percpu.c:152:
+	if (i+1 < pcpu->num_used && pcpu->size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: mm/percpu.c:152:
+	if (i+1 < pcpu->num_used && pcpu->size[i+1] >= 0) {
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#485: FILE: mm/percpu.c:153:
+		pcpu->size[i] += pcpu->size[i+1];
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: mm/percpu.c:155:
+		memmove(&pcpu->size[i+1], &pcpu->size[i+2],
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: mm/percpu.c:155:
+		memmove(&pcpu->size[i+1], &pcpu->size[i+2],
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#488: FILE: mm/percpu.c:156:
+			(pcpu->num_used - (i+1)) * sizeof(pcpu->size[0]));
 			                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: mm/percpu.c:160:
+	BUG_ON(pcpu->num_used == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: mm/percpu.c:166:
+^I/* Pointer will be offset by this amount: compensate. */ $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#518: FILE: mm/percpu.c:186:
+	base_ptr = alloc_bootmem(PERCPU_POOL_SIZE * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#526: FILE: mm/percpu.c:194:
+	for (i = 0; i < NR_CPUS; i++, ptr += PERCPU_POOL_SIZE) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: mm/percpu.c:202:
+	printk("Per-cpu data: %Zu of %u bytes\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#534: FILE: mm/percpu.c:202:
+	printk("Per-cpu data: %Zu of %u bytes\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#540: FILE: mm/percpu.c:208:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#540: FILE: mm/percpu.c:208:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#545: FILE: mm/percpu.c:213:
+	pcpu->size[1] = PERCPU_POOL_SIZE-(__per_cpu_end - __per_cpu_start);
 	                                ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#550: FILE: mm/percpu.c:218:
+__initcall(init_alloc_percpu);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#768: FILE: net/ipv6/af_inet6.c:670:
+	if (snmp6_mib_init((void **)ipv6_statistics, sizeof (struct ipv6_mib),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#772: FILE: net/ipv6/af_inet6.c:673:
+	if (snmp6_mib_init((void **)icmpv6_statistics, sizeof (struct icmpv6_mib),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#776: FILE: net/ipv6/af_inet6.c:676:
+	if (snmp6_mib_init((void **)udp_stats_in6, sizeof (struct udp_mib),

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#789: FILE: net/ipv6/proc.c:229:
+	if (snmp6_mib_init((void **)idev->stats.icmpv6, sizeof(struct icmpv6_mib), __alignof__(struct icmpv6_mib)) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 34 warnings, 26 checks, 711 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
