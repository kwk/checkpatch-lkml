WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
> > You need interrupts to handle this, even if you don't wrap it in the top

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#161: FILE: fs/jbd/journal.c:251:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#162: FILE: fs/jbd/journal.c:252:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a
+						     good idea, because that depends on threads that

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#163: FILE: fs/jbd/journal.c:253:
+						     may be already stopped. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: fs/jbd/journal.c:256:
+^I^I^Ijbd_debug(1, "Resuming kjournald\n");^I^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: fs/jbd/journal.c:257:
+		} else		/* we assume on resume that commits are already there,

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#168: FILE: fs/jbd/journal.c:258:
+		} else		/* we assume on resume that commits are already there,
+				   so we don't sleep */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: fs/jbd/journal.c:258:
+				   so we don't sleep */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#182: FILE: include/linux/sched.h:433:
+#define PF_KERNTHREAD	0x00040000	/* this thread is a kernel thread that cannot be sent signals to */

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#220: FILE: kernel/suspend.c:0:
...

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#221: FILE: kernel/suspend.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#225: FILE: kernel/suspend.c:5:
+#define INTERESTING(p) \
+			/* We don't want to touch kernel_threads..*/ \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#225: FILE: kernel/suspend.c:5:
+#define INTERESTING(p) \
+			/* We don't want to touch kernel_threads..*/ \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#225: FILE: kernel/suspend.c:5:
+#define INTERESTING(p) \
+			/* We don't want to touch kernel_threads..*/ \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#225: FILE: kernel/suspend.c:5:
+#define INTERESTING(p) \
+			/* We don't want to touch kernel_threads..*/ \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#238: FILE: kernel/suspend.c:18:
+	/* You need correct to work with real-time processes.
+	   OTOH, this way one process may see (via /proc/) some other

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: kernel/suspend.c:20:
+^I   suspended. We probably do not care. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: kernel/suspend.c:23:
+	long save;
+	save = current->state;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: kernel/suspend.c:26:
+	printk(":");

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#249: FILE: kernel/suspend.c:29:
+		flush_signals(current); /* We have signaled a kernel thread, which isn't normal behaviour

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#250: FILE: kernel/suspend.c:30:
+					   and that may lead to 100%CPU sucking because those threads

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#250: FILE: kernel/suspend.c:30:
+		flush_signals(current); /* We have signaled a kernel thread, which isn't normal behaviour
+					   and that may lead to 100%CPU sucking because those threads

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#251: FILE: kernel/suspend.c:31:
+					   just don't manage signals. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: kernel/suspend.c:36:
+	printk(":");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: kernel/suspend.c:45:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#266: FILE: kernel/suspend.c:46:
+	PRINTS( "Waiting for tasks to stop... " );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#266: FILE: kernel/suspend.c:46:
+	PRINTS( "Waiting for tasks to stop... " );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: kernel/suspend.c:47:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: kernel/suspend.c:54:
+			unsigned long flags;
+			INTERESTING(p);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#279: FILE: kernel/suspend.c:59:
+			/* FIXME: smp problem here: we may not access other process' flags
+			   without locking */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#279: FILE: kernel/suspend.c:59:
+			   without locking */

ERROR:SPACING: space prohibited after that open parenthesis '('
#290: FILE: kernel/suspend.c:70:
+			PRINTK( "\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#290: FILE: kernel/suspend.c:70:
+			PRINTK( "\n" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#291: FILE: kernel/suspend.c:71:
+			printk(KERN_ERR " stopping tasks failed (%d tasks remaining)\n", todo );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#291: FILE: kernel/suspend.c:71:
+			printk(KERN_ERR " stopping tasks failed (%d tasks remaining)\n", todo );

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: kernel/suspend.c:74:
+	} while(todo);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: kernel/suspend.c:75:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#296: FILE: kernel/suspend.c:76:
+	PRINTK( " ok\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#296: FILE: kernel/suspend.c:76:
+	PRINTK( " ok\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#304: FILE: kernel/suspend.c:84:
+	PRINTR( "Restarting tasks..." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#304: FILE: kernel/suspend.c:84:
+	PRINTR( "Restarting tasks..." );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: kernel/suspend.c:88:
+^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: kernel/suspend.c:89:
+		if (p->flags & PF_FROZEN) p->flags &= ~PF_FROZEN;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#311: FILE: kernel/suspend.c:91:
+			printk(KERN_INFO " Strange, %s not stopped\n", p->comm );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#311: FILE: kernel/suspend.c:91:
+			printk(KERN_INFO " Strange, %s not stopped\n", p->comm );

ERROR:SPACING: space prohibited after that open parenthesis '('
#315: FILE: kernel/suspend.c:95:
+	PRINTK( " done\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#315: FILE: kernel/suspend.c:95:
+	PRINTK( " done\n" );

WARNING:BRACES: braces {} are not necessary for single statement blocks
#338: FILE: mm/vmscan.c:738:
+		if (kswapd_can_sleep()) {
 			schedule();
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: mm/vmscan.c:741:
+^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 23 warnings, 3 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
