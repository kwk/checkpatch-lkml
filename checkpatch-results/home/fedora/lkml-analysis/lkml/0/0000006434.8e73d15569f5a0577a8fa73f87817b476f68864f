WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-linus

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#478: FILE: drivers/net/e1000/e1000_hw.c:429:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#483: FILE: drivers/net/e1000/e1000_hw.c:434:
+		/* fall through */

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: drivers/net/e1000/e1000_hw.c:6597:
+        hw->bus_type = e1000_bus_type_pci;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: drivers/net/e1000/e1000_hw.c:6597:
+        hw->bus_type = e1000_bus_type_pci;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: drivers/net/e1000/e1000_hw.c:7839:
+            if ((((fwsm & E1000_FWSM_MODE_MASK) >> E1000_FWSM_MODE_SHIFT) ==$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: drivers/net/e1000/e1000_hw.c:7839:
+            if ((((fwsm & E1000_FWSM_MODE_MASK) >> E1000_FWSM_MODE_SHIFT) ==$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: drivers/net/e1000/e1000_hw.c:7840:
+                   e1000_mng_mode_pt) && !(factps & E1000_FACTPS_MNGCG))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: drivers/net/e1000/e1000_hw.c:7840:
+                   e1000_mng_mode_pt) && !(factps & E1000_FACTPS_MNGCG))$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#619: FILE: drivers/net/e1000/e1000_hw.h:1308:
+	uint64_t		crcerrs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#620: FILE: drivers/net/e1000/e1000_hw.h:1309:
+	uint64_t		algnerrc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#621: FILE: drivers/net/e1000/e1000_hw.h:1310:
+	uint64_t		symerrs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#622: FILE: drivers/net/e1000/e1000_hw.h:1311:
+	uint64_t		rxerrc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#623: FILE: drivers/net/e1000/e1000_hw.h:1312:
+	uint64_t		txerrc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#624: FILE: drivers/net/e1000/e1000_hw.h:1313:
+	uint64_t		mpc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#625: FILE: drivers/net/e1000/e1000_hw.h:1314:
+	uint64_t		scc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#626: FILE: drivers/net/e1000/e1000_hw.h:1315:
+	uint64_t		ecol;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#627: FILE: drivers/net/e1000/e1000_hw.h:1316:
+	uint64_t		mcc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#628: FILE: drivers/net/e1000/e1000_hw.h:1317:
+	uint64_t		latecol;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#629: FILE: drivers/net/e1000/e1000_hw.h:1318:
+	uint64_t		colc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#630: FILE: drivers/net/e1000/e1000_hw.h:1319:
+	uint64_t		dc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#631: FILE: drivers/net/e1000/e1000_hw.h:1320:
+	uint64_t		tncrs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#632: FILE: drivers/net/e1000/e1000_hw.h:1321:
+	uint64_t		sec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#633: FILE: drivers/net/e1000/e1000_hw.h:1322:
+	uint64_t		cexterr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#634: FILE: drivers/net/e1000/e1000_hw.h:1323:
+	uint64_t		rlec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#635: FILE: drivers/net/e1000/e1000_hw.h:1324:
+	uint64_t		xonrxc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#636: FILE: drivers/net/e1000/e1000_hw.h:1325:
+	uint64_t		xontxc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#637: FILE: drivers/net/e1000/e1000_hw.h:1326:
+	uint64_t		xoffrxc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#638: FILE: drivers/net/e1000/e1000_hw.h:1327:
+	uint64_t		xofftxc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#639: FILE: drivers/net/e1000/e1000_hw.h:1328:
+	uint64_t		fcruc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#640: FILE: drivers/net/e1000/e1000_hw.h:1329:
+	uint64_t		prc64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#641: FILE: drivers/net/e1000/e1000_hw.h:1330:
+	uint64_t		prc127;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#642: FILE: drivers/net/e1000/e1000_hw.h:1331:
+	uint64_t		prc255;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#643: FILE: drivers/net/e1000/e1000_hw.h:1332:
+	uint64_t		prc511;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#644: FILE: drivers/net/e1000/e1000_hw.h:1333:
+	uint64_t		prc1023;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#645: FILE: drivers/net/e1000/e1000_hw.h:1334:
+	uint64_t		prc1522;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#646: FILE: drivers/net/e1000/e1000_hw.h:1335:
+	uint64_t		gprc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#647: FILE: drivers/net/e1000/e1000_hw.h:1336:
+	uint64_t		bprc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#648: FILE: drivers/net/e1000/e1000_hw.h:1337:
+	uint64_t		mprc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#649: FILE: drivers/net/e1000/e1000_hw.h:1338:
+	uint64_t		gptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#650: FILE: drivers/net/e1000/e1000_hw.h:1339:
+	uint64_t		gorcl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#651: FILE: drivers/net/e1000/e1000_hw.h:1340:
+	uint64_t		gorch;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#652: FILE: drivers/net/e1000/e1000_hw.h:1341:
+	uint64_t		gotcl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#653: FILE: drivers/net/e1000/e1000_hw.h:1342:
+	uint64_t		gotch;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#654: FILE: drivers/net/e1000/e1000_hw.h:1343:
+	uint64_t		rnbc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#655: FILE: drivers/net/e1000/e1000_hw.h:1344:
+	uint64_t		ruc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#656: FILE: drivers/net/e1000/e1000_hw.h:1345:
+	uint64_t		rfc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#657: FILE: drivers/net/e1000/e1000_hw.h:1346:
+	uint64_t		roc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#658: FILE: drivers/net/e1000/e1000_hw.h:1347:
+	uint64_t		rlerrc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#659: FILE: drivers/net/e1000/e1000_hw.h:1348:
+	uint64_t		rjc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#660: FILE: drivers/net/e1000/e1000_hw.h:1349:
+	uint64_t		mgprc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#661: FILE: drivers/net/e1000/e1000_hw.h:1350:
+	uint64_t		mgpdc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#662: FILE: drivers/net/e1000/e1000_hw.h:1351:
+	uint64_t		mgptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#663: FILE: drivers/net/e1000/e1000_hw.h:1352:
+	uint64_t		torl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#664: FILE: drivers/net/e1000/e1000_hw.h:1353:
+	uint64_t		torh;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#665: FILE: drivers/net/e1000/e1000_hw.h:1354:
+	uint64_t		totl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#666: FILE: drivers/net/e1000/e1000_hw.h:1355:
+	uint64_t		toth;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#667: FILE: drivers/net/e1000/e1000_hw.h:1356:
+	uint64_t		tpr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#668: FILE: drivers/net/e1000/e1000_hw.h:1357:
+	uint64_t		tpt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#669: FILE: drivers/net/e1000/e1000_hw.h:1358:
+	uint64_t		ptc64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#670: FILE: drivers/net/e1000/e1000_hw.h:1359:
+	uint64_t		ptc127;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#671: FILE: drivers/net/e1000/e1000_hw.h:1360:
+	uint64_t		ptc255;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#672: FILE: drivers/net/e1000/e1000_hw.h:1361:
+	uint64_t		ptc511;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#673: FILE: drivers/net/e1000/e1000_hw.h:1362:
+	uint64_t		ptc1023;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#674: FILE: drivers/net/e1000/e1000_hw.h:1363:
+	uint64_t		ptc1522;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#675: FILE: drivers/net/e1000/e1000_hw.h:1364:
+	uint64_t		mptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#676: FILE: drivers/net/e1000/e1000_hw.h:1365:
+	uint64_t		bptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#677: FILE: drivers/net/e1000/e1000_hw.h:1366:
+	uint64_t		tsctc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#678: FILE: drivers/net/e1000/e1000_hw.h:1367:
+	uint64_t		tsctfc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#679: FILE: drivers/net/e1000/e1000_hw.h:1368:
+	uint64_t		iac;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#680: FILE: drivers/net/e1000/e1000_hw.h:1369:
+	uint64_t		icrxptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#681: FILE: drivers/net/e1000/e1000_hw.h:1370:
+	uint64_t		icrxatc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#682: FILE: drivers/net/e1000/e1000_hw.h:1371:
+	uint64_t		ictxptc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#683: FILE: drivers/net/e1000/e1000_hw.h:1372:
+	uint64_t		ictxatc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#684: FILE: drivers/net/e1000/e1000_hw.h:1373:
+	uint64_t		ictxqec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#685: FILE: drivers/net/e1000/e1000_hw.h:1374:
+	uint64_t		ictxqmtc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#686: FILE: drivers/net/e1000/e1000_hw.h:1375:
+	uint64_t		icrxdmtc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#687: FILE: drivers/net/e1000/e1000_hw.h:1376:
+	uint64_t		icrxoc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#775: FILE: drivers/net/e1000/e1000_hw.h:1381:
+	uint8_t __iomem		*hw_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#776: FILE: drivers/net/e1000/e1000_hw.h:1382:
+	uint8_t __iomem		*flash_address;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#779: FILE: drivers/net/e1000/e1000_hw.h:1385:
+	uint32_t		phy_init_script;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#783: FILE: drivers/net/e1000/e1000_hw.h:1389:
+	uint32_t		flash_bank_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#784: FILE: drivers/net/e1000/e1000_hw.h:1390:
+	uint32_t		flash_base_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#793: FILE: drivers/net/e1000/e1000_hw.h:1399:
+	uint32_t		asf_firmware_present;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#794: FILE: drivers/net/e1000/e1000_hw.h:1400:
+	uint32_t		eeprom_semaphore_present;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#795: FILE: drivers/net/e1000/e1000_hw.h:1401:
+	uint32_t		swfw_sync_present;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#796: FILE: drivers/net/e1000/e1000_hw.h:1402:
+	uint32_t		swfwhw_semaphore_present;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#798: FILE: drivers/net/e1000/e1000_hw.h:1404:
+	uint32_t		phy_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#799: FILE: drivers/net/e1000/e1000_hw.h:1405:
+	uint32_t		phy_revision;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#800: FILE: drivers/net/e1000/e1000_hw.h:1406:
+	uint32_t		phy_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#801: FILE: drivers/net/e1000/e1000_hw.h:1407:
+	uint32_t		original_fc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#802: FILE: drivers/net/e1000/e1000_hw.h:1408:
+	uint32_t		txcw;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#803: FILE: drivers/net/e1000/e1000_hw.h:1409:
+	uint32_t		autoneg_failed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#804: FILE: drivers/net/e1000/e1000_hw.h:1410:
+	uint32_t		max_frame_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#805: FILE: drivers/net/e1000/e1000_hw.h:1411:
+	uint32_t		min_frame_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#806: FILE: drivers/net/e1000/e1000_hw.h:1412:
+	uint32_t		mc_filter_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#807: FILE: drivers/net/e1000/e1000_hw.h:1413:
+	uint32_t		num_mc_addrs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#808: FILE: drivers/net/e1000/e1000_hw.h:1414:
+	uint32_t		collision_delta;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#809: FILE: drivers/net/e1000/e1000_hw.h:1415:
+	uint32_t		tx_packet_delta;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#810: FILE: drivers/net/e1000/e1000_hw.h:1416:
+	uint32_t		ledctl_default;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#811: FILE: drivers/net/e1000/e1000_hw.h:1417:
+	uint32_t		ledctl_mode1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#812: FILE: drivers/net/e1000/e1000_hw.h:1418:
+	uint32_t		ledctl_mode2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#815: FILE: drivers/net/e1000/e1000_hw.h:1421:
+	uint16_t		phy_spd_default;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#816: FILE: drivers/net/e1000/e1000_hw.h:1422:
+	uint16_t		autoneg_advertised;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#817: FILE: drivers/net/e1000/e1000_hw.h:1423:
+	uint16_t		pci_cmd_word;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#818: FILE: drivers/net/e1000/e1000_hw.h:1424:
+	uint16_t		fc_high_water;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#819: FILE: drivers/net/e1000/e1000_hw.h:1425:
+	uint16_t		fc_low_water;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#820: FILE: drivers/net/e1000/e1000_hw.h:1426:
+	uint16_t		fc_pause_time;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#821: FILE: drivers/net/e1000/e1000_hw.h:1427:
+	uint16_t		current_ifs_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#822: FILE: drivers/net/e1000/e1000_hw.h:1428:
+	uint16_t		ifs_min_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#823: FILE: drivers/net/e1000/e1000_hw.h:1429:
+	uint16_t		ifs_max_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#824: FILE: drivers/net/e1000/e1000_hw.h:1430:
+	uint16_t		ifs_step_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#825: FILE: drivers/net/e1000/e1000_hw.h:1431:
+	uint16_t		ifs_ratio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#826: FILE: drivers/net/e1000/e1000_hw.h:1432:
+	uint16_t		device_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#827: FILE: drivers/net/e1000/e1000_hw.h:1433:
+	uint16_t		vendor_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#828: FILE: drivers/net/e1000/e1000_hw.h:1434:
+	uint16_t		subsystem_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#829: FILE: drivers/net/e1000/e1000_hw.h:1435:
+	uint16_t		subsystem_vendor_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#830: FILE: drivers/net/e1000/e1000_hw.h:1436:
+	uint8_t			revision_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#831: FILE: drivers/net/e1000/e1000_hw.h:1437:
+	uint8_t			autoneg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#832: FILE: drivers/net/e1000/e1000_hw.h:1438:
+	uint8_t			mdix;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#833: FILE: drivers/net/e1000/e1000_hw.h:1439:
+	uint8_t			forced_speed_duplex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#834: FILE: drivers/net/e1000/e1000_hw.h:1440:
+	uint8_t			wait_autoneg_complete;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#835: FILE: drivers/net/e1000/e1000_hw.h:1441:
+	uint8_t			dma_fairness;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#836: FILE: drivers/net/e1000/e1000_hw.h:1442:
+	uint8_t			mac_addr[NODE_ADDRESS_SIZE];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#837: FILE: drivers/net/e1000/e1000_hw.h:1443:
+	uint8_t			perm_mac_addr[NODE_ADDRESS_SIZE];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: drivers/net/e1000/e1000_main.c:220:
+MODULE_PARM_DESC(copybreak,
+	"Maximum size of packet that is copied to a new buffer on receive");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#897: FILE: drivers/net/e1000/e1000_main.c:275:
+			printk(KERN_INFO "e1000: copybreak disabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#899: FILE: drivers/net/e1000/e1000_main.c:277:
+			printk(KERN_INFO "e1000: copybreak enabled for "

WARNING:SPLIT_STRING: quoted string split across lines
#900: FILE: drivers/net/e1000/e1000_main.c:278:
+			printk(KERN_INFO "e1000: copybreak enabled for "
+			       "packets <= %u bytes\n", copybreak);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#913: FILE: drivers/net/e1000/e1000_main.c:483:
+		uint32_t manc = E1000_READ_REG(&adapter->hw, MANC);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#920: FILE: drivers/net/e1000/e1000_main.c:490:
+		 * from the host OS, but the packets will be handled on SMBUS */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#922: FILE: drivers/net/e1000/e1000_main.c:492:
+			uint32_t manc2h = E1000_READ_REG(&adapter->hw, MANC2H);

CHECK:BIT_MACRO: Prefer using the BIT macro
#925: FILE: drivers/net/e1000/e1000_main.c:495:
+#define E1000_MNG2HOST_PORT_623 (1 << 5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#926: FILE: drivers/net/e1000/e1000_main.c:496:
+#define E1000_MNG2HOST_PORT_664 (1 << 6)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#940: FILE: drivers/net/e1000/e1000_main.c:510:
+		uint32_t manc = E1000_READ_REG(&adapter->hw, MANC);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#949: FILE: drivers/net/e1000/e1000_main.c:519:
+		 * MANC has an enable disable that gates MANC2H */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#981: FILE: drivers/net/e1000/e1000_main.c:677:
+	uint32_t pba = 0, tx_space, min_tx_space, min_rx_space;

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1032: FILE: drivers/net/e1000/e1000_main.c:722:
+	if (legacy_pba_adjust == TRUE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1048: FILE: drivers/net/e1000/e1000_main.c:738:
+		 * large enough to accomodate two full transmit packets,
 		                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1050: FILE: drivers/net/e1000/e1000_main.c:740:
+		 * the Rx FIFO should be large enough to accomodate at least
 		                                         ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1052: FILE: drivers/net/e1000/e1000_main.c:742:
+		 * expressed in KB. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1060: FILE: drivers/net/e1000/e1000_main.c:750:
+^I^I               VLAN_TAG_SIZE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1070: FILE: drivers/net/e1000/e1000_main.c:760:
+		 * allocation, take space away from current Rx allocation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1091: FILE: drivers/net/e1000/e1000_main.c:775:
+			 * adjustment or use Early Receive if available */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1116: FILE: drivers/net/e1000/e1000_main.c:825:
+		uint32_t ctrl = E1000_READ_REG(&adapter->hw, CTRL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1119: FILE: drivers/net/e1000/e1000_main.c:828:
+		 * can cause a loss of link at power off or driver unload */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1201: FILE: drivers/net/e1000/e1000_main.c:2670:
+				uint32_t rctl = E1000_READ_REG(hw, RCTL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1202: FILE: drivers/net/e1000/e1000_main.c:2671:
+				uint32_t rctl = E1000_READ_REG(hw, RCTL);
+				E1000_WRITE_REG(hw, RCTL, rctl | E1000_RCTL_EN);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1216: FILE: drivers/net/e1000/e1000_main.c:2776:
+		if (bytes/packets > 8000)
 		         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1226: FILE: drivers/net/e1000/e1000_main.c:2784:
+			if (bytes/packets > 8000)
 			         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1228: FILE: drivers/net/e1000/e1000_main.c:2786:
+			else if ((packets < 10) || ((bytes/packets) > 1200))
 			                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1233: FILE: drivers/net/e1000/e1000_main.c:2790:
+		} else if (bytes/packets > 2000)
 		                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1285: FILE: drivers/net/e1000/e1000_main.c:3327:
+				 * into the next dword */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1288: FILE: drivers/net/e1000/e1000_main.c:3330:
+				/* fall through */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1341: FILE: drivers/net/e1000/e1000_main.c:4044:
+				unsigned int segs = skb_shinfo(skb)->gso_segs;
+				total_tx_packets += segs;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l1 <= copybreak'
#1363: FILE: drivers/net/e1000/e1000_main.c:4426:
+		if (l1 && (l1 <= copybreak) && ((length + l1) <= adapter->rx_ps_bsize0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1372: FILE: drivers/net/e1000/e1000_main.c:5171:
+	uint32_t ctrl, ctrl_ext, rctl, status;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1404: FILE: drivers/net/e1000/e1000_main.c:5271:
+	uint32_t err;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1464: FILE: drivers/net/e1000/e1000_main.c:5413:
+	 * of the driver. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1484: FILE: drivers/net/e1000/e1000_param.c:491:
+				 * used as control */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1588: FILE: drivers/net/myri10ge/myri10ge.c:229:
+module_param(myri10ge_msi, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#1602: FILE: drivers/net/myri10ge/myri10ge.c:724:
+	mgp->irq_deassert = (__iomem __be32 *) (mgp->sram + cmd.data0);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1903: FILE: drivers/net/netxen/netxen_nic.h:140:
+#define MAX_RX_JUMBO_BUFFER_LENGTH ^I8062$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2017: FILE: drivers/net/netxen/netxen_nic_isr.c:160:
+			printk(KERN_INFO "%s: %s PORT %d link %s\n",

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2078: FILE: drivers/net/netxen/netxen_nic_main.c:444:
+	udelay(500);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2246: FILE: drivers/net/sky2.c:1516:
+	/*
+	 * Both ports share the NAPI poll on port 0, so if necessary undo the

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2247: FILE: drivers/net/sky2.c:1517:
+	 * Both ports share the NAPI poll on port 0, so if necessary undo the
+	 * the disable that is done in dev_close.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2437: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1094:
+	if (skb->len < ZD_PLCP_HEADER_SIZE + IEEE80211_1ADDR_LEN +
+	               IEEE80211_FCS_LEN + sizeof(struct rx_status))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#2438: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1095:
+^I               IEEE80211_FCS_LEN + sizeof(struct rx_status))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2441: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1098:
+		dev_dbg_f(zd_mac_dev(mac), "Packet with length %u to small.\n",
+			 skb->len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2459: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1110:
+^I^I        (IEEE80211_FCS_LEN + sizeof(struct rx_status)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2463: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1113:
+^I^I         status->signal_strength);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2463: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1113:
+	update_qual_rssi(mac, skb->data, skb->len, stats.signal,
+		         status->signal_strength);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2509: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:1149:
+	if (!skb) {
+		dev_warn(zd_mac_dev(mac), "Could not allocate skb.\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2551: FILE: drivers/net/wireless/zd1211rw/zd_usb.c:601:
+			zd_mac_rx_irq(mac, buffer+l, k);
 			                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 29 warnings, 138 checks, 2252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
