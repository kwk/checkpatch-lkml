CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: drivers/pci/proc.c:202:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: drivers/pci/proc.c:391:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: drivers/pci/proc.c:399:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#165: FILE: drivers/pci/proc.c:404:
+	unsigned busaddr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: drivers/pci/proc.c:405:
+	unsigned npages;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: drivers/pci/proc.c:407:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: drivers/pci/proc.c:408:
+	type = pci_resource_flags(pdev,bar) & IORESOURCE_MEM ? pci_mmap_mem : pci_mmap_io;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: drivers/pci/proc.c:412:
+	if(npages + vma->vm_pgoff > pci_resource_len(pdev,bar) >> PAGE_SHIFT)
 	                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: drivers/pci/proc.c:412:
+	if(npages + vma->vm_pgoff > pci_resource_len(pdev,bar) >> PAGE_SHIFT)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#183: FILE: drivers/pci/proc.c:422:
+	if (ret<0)
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: drivers/pci/proc.c:427:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#221: FILE: drivers/pci/proc.c:460:
+static struct file_operations proc_pci_bar_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#255: FILE: drivers/pci/proc.c:490:
+	if (!(de = bus->procbus)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#256: FILE: drivers/pci/proc.c:491:
+		if (!( de = procdom[pci_domain_nr(bus)] )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#256: FILE: drivers/pci/proc.c:491:
+		if (!( de = procdom[pci_domain_nr(bus)] )) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: drivers/pci/proc.c:491:
+		if (!( de = procdom[pci_domain_nr(bus)] )) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#258: FILE: drivers/pci/proc.c:493:
+			de = procdom[pci_domain_nr(bus)] = proc_mkdir(name, proc_bus);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#263: FILE: drivers/pci/proc.c:498:
+		de = bus->procbus = proc_mkdir(name, de);

ERROR:SPACING: space prohibited after that open parenthesis '('
#270: FILE: drivers/pci/proc.c:503:
+	if (!( de = bus->procdevs[PCI_SLOT(dev->devfn)] )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#270: FILE: drivers/pci/proc.c:503:
+	if (!( de = bus->procdevs[PCI_SLOT(dev->devfn)] )) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#270: FILE: drivers/pci/proc.c:503:
+	if (!( de = bus->procdevs[PCI_SLOT(dev->devfn)] )) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#272: FILE: drivers/pci/proc.c:505:
+		de = bus->procdevs[PCI_SLOT(dev->devfn)] = proc_mkdir(name, bus->procbus);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#278: FILE: drivers/pci/proc.c:511:
+	de = dev->procfn = proc_mkdir(name, de);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#282: FILE: drivers/pci/proc.c:515:
+	e = dev->proccfg = create_proc_entry("config-space", S_IFREG | S_IRUGO | S_IWUSR, de);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#282: FILE: drivers/pci/proc.c:515:
+	e = dev->proccfg = create_proc_entry("config-space", S_IFREG | S_IRUGO | S_IWUSR, de);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: drivers/pci/proc.c:523:
+	for (i = 0; i < DEVICE_COUNT_RESOURCE && pci_resource_start(dev,i); i++) {
 	                                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#292: FILE: drivers/pci/proc.c:525:
+		struct pci_bar_private *private;
+		private = kmalloc(sizeof(*private), GFP_KERNEL);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#298: FILE: drivers/pci/proc.c:531:
+		e = dev->procbar[i] = create_proc_entry(name, S_IFREG | S_IRUGO | S_IWUSR, dev->procfn);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#298: FILE: drivers/pci/proc.c:531:
+		e = dev->procbar[i] = create_proc_entry(name, S_IFREG | S_IRUGO | S_IWUSR, dev->procfn);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#298: FILE: drivers/pci/proc.c:531:
+		e = dev->procbar[i] = create_proc_entry(name, S_IFREG | S_IRUGO | S_IWUSR, dev->procfn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: drivers/pci/proc.c:536:
+		e->size = pci_resource_len(dev,i);
 		                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#307: FILE: drivers/pci/proc.c:540:
+	if (!(de = bus->procdir)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#310: FILE: drivers/pci/proc.c:543:
+		de = bus->procdir = proc_mkdir(name, proc_bus_pci_dir);

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#315: FILE: drivers/pci/proc.c:548:
+	sprintf(target, "../../pci%d/bus%d/dev%d/fn%d/config-space", pci_domain_nr(bus), bus->number, PCI_SLOT(dev->devfn), PCI_FUNC(dev->devfn));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: drivers/pci/proc.c:569:
+	if ((e = dev->proccfg)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: drivers/pci/proc.c:576:
+	for (i = 0; i < DEVICE_COUNT_RESOURCE && pci_resource_start(dev,i); i++) {
 	                                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: drivers/pci/proc.c:578:
+		if(!e)

ERROR:SPACING: space required before the open parenthesis '('
#347: FILE: drivers/pci/proc.c:580:
+		if(atomic_read(&e->count))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#353: FILE: drivers/pci/proc.c:586:
+	if ((e = dev->procfn)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#361: FILE: drivers/pci/proc.c:594:
+	if ((e = dev->bus->procdevs[PCI_SLOT(dev->devfn)])) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 8 warnings, 11 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
