WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Attached is an extension which adds RFC3828 - compliant UDP-Lite functionality 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: include/linux/in.h:47:
+  IPPROTO_UDPLITE = 136,^I/* UDP-Lite Protocol (RFC 3828)^I        */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: include/linux/net.h:86:
+^ISOCK_RDM     ^I=  4,$

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#423: FILE: include/linux/snmp.h:166:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: include/linux/udplite.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: include/linux/udplite.h:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: include/linux/udplite.h:29:
+ *   Receiver specifies _minimal_ coverage length.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: include/linux/udplite.h:35:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#494: FILE: include/linux/udplite.h:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#500: FILE: include/linux/udplite.h:47:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#528: FILE: include/linux/udplite.h:75:
+	 *  UDP-Lite header when the socket is uncorked.  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#550: FILE: include/net/snmp.h:103:
 
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#564: FILE: include/net/udplite.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: include/net/udplite.h:15:
+ * there is no  UDPLITE_CSUM_DEFAULT and no UDPLITE_CSUM_NOXMIT  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: include/net/udplite.h:18:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: include/net/udplite.h:22:
+extern void udplite_err(struct sk_buff *, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#585: FILE: include/net/udplite.h:22:
+extern void udplite_err(struct sk_buff *, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#585: FILE: include/net/udplite.h:22:
+extern void udplite_err(struct sk_buff *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/net/udplite.h:23:
+extern int  udplite_sendmsg(struct kiocb *iocb, struct sock *sk,

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: include/net/udplite.h:24:
+^I ^I^I    struct msghdr *msg, size_t len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: include/net/udplite.h:24:
+^I ^I^I    struct msghdr *msg, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: include/net/udplite.h:24:
+extern int  udplite_sendmsg(struct kiocb *iocb, struct sock *sk,
+	 		    struct msghdr *msg, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/net/udplite.h:25:
+extern int  udplite_rcv(struct sk_buff *skb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#589: FILE: include/net/udplite.h:26:
+extern int  udplite_ioctl(struct sock *sk, int cmd, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#590: FILE: include/net/udplite.h:27:
+extern int  udplite_disconnect(struct sock *sk, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/net/udplite.h:28:
+extern unsigned int udplite_poll(struct file *file, struct socket *sock,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: include/net/udplite.h:29:
+				 poll_table * wait);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#602: FILE: include/net/udplite.h:39:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#611: FILE: include/net/udplite.h:48:
+	int                   (*seq_show) (struct seq_file *m, void *v);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#612: FILE: include/net/udplite.h:49:
+	struct file_operations *seq_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#618: FILE: include/net/udplite.h:55:
+	struct seq_operations seq_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#621: FILE: include/net/udplite.h:58:
+extern int  udplite_proc_register(struct udplite_seq_afinfo *afinfo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#622: FILE: include/net/udplite.h:59:
+extern void udplite_proc_unregister(struct udplite_seq_afinfo *afinfo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: include/net/udplite.h:61:
+extern int  udplite4_proc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#625: FILE: include/net/udplite.h:62:
+extern void udplite4_proc_exit(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#679: FILE: net/core/sock.c:430:
+			 * hence user must not enable this option.   */

WARNING:CONST_STRUCT: struct proto_ops should normally be const
#713: FILE: net/ipv4/af_inet.c:846:
+struct proto_ops inet_ldgram_ops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: net/ipv4/af_inet.c:928:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: net/ipv4/af_inet.c:929:
+                .type       =  SOCK_LDGRAM,           /* UDP-Lite (RFC 3828) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: net/ipv4/af_inet.c:929:
+                .type       =  SOCK_LDGRAM,           /* UDP-Lite (RFC 3828) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: net/ipv4/af_inet.c:930:
+                .protocol   =  IPPROTO_UDPLITE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: net/ipv4/af_inet.c:930:
+                .protocol   =  IPPROTO_UDPLITE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#745: FILE: net/ipv4/af_inet.c:931:
+                .prot       =  &udplite_prot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: net/ipv4/af_inet.c:931:
+                .prot       =  &udplite_prot,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: net/ipv4/af_inet.c:932:
+                .ops        =  &inet_ldgram_ops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: net/ipv4/af_inet.c:932:
+                .ops        =  &inet_ldgram_ops,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: net/ipv4/af_inet.c:933:
+                .capability = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: net/ipv4/af_inet.c:933:
+                .capability = -1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: net/ipv4/af_inet.c:934:
+                .no_check   =  0,                     /* checksum mandatory */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: net/ipv4/af_inet.c:934:
+                .no_check   =  0,                     /* checksum mandatory */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: net/ipv4/af_inet.c:935:
+                .flags      =  INET_PROTOSW_PERMANENT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: net/ipv4/af_inet.c:935:
+                .flags      =  INET_PROTOSW_PERMANENT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: net/ipv4/af_inet.c:936:
+       },$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#778: FILE: net/ipv4/af_inet.c:1177:
+	if (!(net_statistics[0] && net_statistics[1] && ip_statistics[0]
[...]
+			return -ENOMEM;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#779: FILE: net/ipv4/af_inet.c:1178:
+	if (!(net_statistics[0] && net_statistics[1] && ip_statistics[0]
+		&& ip_statistics[1] && tcp_statistics[0] && tcp_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#780: FILE: net/ipv4/af_inet.c:1179:
+		&& ip_statistics[1] && tcp_statistics[0] && tcp_statistics[1]
+		&& udp_statistics[0] && udp_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: net/ipv4/af_inet.c:1180:
+		&& udp_statistics[0] && udp_statistics[1]
+		&& udplite_statistics[0] && udplite_statistics[1]) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#781: FILE: net/ipv4/af_inet.c:1180:
+		&& udplite_statistics[0] && udplite_statistics[1]) )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#802: FILE: net/ipv4/af_inet.c:1242:
+		printk(KERN_CRIT "inet_init: Cannot add UDP-Lite protocol\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inet_init', this function's name, in a string
#802: FILE: net/ipv4/af_inet.c:1242:
+		printk(KERN_CRIT "inet_init: Cannot add UDP-Lite protocol\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#855: FILE: net/ipv4/proc.c:77:
+^I^I             atomic_read(&ip_frag_mem));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: net/ipv4/proc.c:77:
+	seq_printf(seq, "FRAG: inuse %d memory %d\n", ip_frag_nqueues,
+		             atomic_read(&ip_frag_mem));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: net/ipv4/proc.c:323:
+    seq_puts(seq, "\nUdpLite:");                           /* UDP Lite (RFC 3828) */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "snmp4_udplite_list[i].name"
#883: FILE: net/ipv4/proc.c:324:
+	for (i = 0; snmp4_udplite_list[i].name != NULL; i++)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "snmp4_udplite_list[i].name"
#887: FILE: net/ipv4/proc.c:328:
+	for (i = 0; snmp4_udplite_list[i].name != NULL; i++)

CHECK:SPACING: No space is necessary after a cast
#889: FILE: net/ipv4/proc.c:330:
+			   fold_field((void **) udplite_statistics,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#904: FILE: net/udp_lite/Kconfig:1:
+config IP_UDPLITE
+	bool "The UDP-Lite Protocol (EXPERIMENTAL)"
+	depends on INET && EXPERIMENTAL
+        default n
+	---help---
+	  The UDP Lite Protocol (RFC 3828, <http://tools.ietf.org/html/rfc3828>)
+
+	  UDP-Lite is a Standards-Track IETF transport protocol. It features a
+	  variable-length checksum, which allows partially damaged packets to be
+	  forwarded to media codecs, rather than being discarded due to invalid
+	  (UDP) checksum values. This can have advantages for the transport of
+	  multimedia (e.g. video/audio) over wireless networks.
+
+	  The socket API resembles that of UDP. Applications must indicate their
+	  wish to utilise the partial checksum coverage feature offered by UDP-
+	  Lite by setting a socket option.
+
+	  More information can be found in Documentation/networking/udp_lite.txt
+
+	  If in doubt, say N.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#928: FILE: net/udp_lite/udplitev4.c:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#934: FILE: net/udp_lite/udplitev4.c:7:
+ *  Version:    $Id: udplitev4.c,v 1.3 2006/05/25 13:57:06 root Exp root $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#946: FILE: net/udp_lite/udplitev4.c:19:
+#include <asm/uaccess.h>

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#978: FILE: net/udp_lite/udplitev4.c:51:
+/*
+ * SNMP MIB for the UDP-Lite layer

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#983: FILE: net/udp_lite/udplitev4.c:56:
+/*
+ * Global variables

CHECK:LINE_SPACING: Please don't use multiple blank lines
#989: FILE: net/udp_lite/udplitev4.c:62:
+
+

WARNING:TABSTOP: Statements should start on a tabstop
#997: FILE: net/udp_lite/udplitev4.c:70:
+	    if (inet_sk(sk)->num == num)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1018: FILE: net/udp_lite/udplitev4.c:91:
+		best = result = udplite_port_rover;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TABSTOP: Statements should start on a tabstop
#1035: FILE: net/udp_lite/udplitev4.c:108:
+			    if (++size >= best_size_so_far)

WARNING:INDENTED_LABEL: labels should not be indented
#1039: FILE: net/udp_lite/udplitev4.c:112:
+		      next:;

WARNING:INDENTED_LABEL: labels should not be indented
#1053: FILE: net/udp_lite/udplitev4.c:126:
+	      gotit:

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1054: FILE: net/udp_lite/udplitev4.c:127:
+		udplite_port_rover = snum = result;

WARNING:INDENTED_LABEL: labels should not be indented
#1084: FILE: net/udp_lite/udplitev4.c:157:
+      fail:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: net/udp_lite/udplitev4.c:164:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1104: FILE: net/udp_lite/udplitev4.c:177:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: net/udp_lite/udplitev4.c:184:
+^I                  *result  = NULL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1121: FILE: net/udp_lite/udplitev4.c:194:
+			int score = (sk->sk_family == PF_INET ? 1 : 0);
+			if (inet->rcv_saddr) {

WARNING:INLINE: plain inline is preferred over __inline__
#1155: FILE: net/udp_lite/udplitev4.c:228:
+static __inline__ struct sock *udplite_v4_lookup(u32 saddr, u16 sport,

WARNING:INDENTED_LABEL: labels should not be indented
#1194: FILE: net/udp_lite/udplitev4.c:267:
+      found:

ERROR:CODE_INDENT: code indent should use tabs where possible
#1218: FILE: net/udp_lite/udplitev4.c:291:
+^I                          (skb->data + (iph->ihl << 2));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1220: FILE: net/udp_lite/udplitev4.c:293:
+^I                   code = skb->h.icmph->code;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#1226: FILE: net/udp_lite/udplitev4.c:299:
+	if (sk == NULL) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1264: FILE: net/udp_lite/udplitev4.c:337:
+	/*
+	 *   This is handled as in UDP (cf. RFC 1122, sec. 4.1.3.3),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: net/udp_lite/udplitev4.c:338:
+         *   ICMP errors are passed back to the application.$

CHECK:SPACING: No space is necessary after a cast
#1271: FILE: net/udp_lite/udplitev4.c:344:
+		ip_icmp_error(sk, skb, err, uh->dest, info, (u8 *) (uh + 1));

WARNING:INDENTED_LABEL: labels should not be indented
#1275: FILE: net/udp_lite/udplitev4.c:348:
+      out:

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: net/udp_lite/udplitev4.c:382:
+^I                   err  = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1311: FILE: net/udp_lite/udplitev4.c:384:
+^I                   len;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1315: FILE: net/udp_lite/udplitev4.c:388:
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1319: FILE: net/udp_lite/udplitev4.c:392:
+	/*
+	 * Create a UDP-Lite header

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1328: FILE: net/udp_lite/udplitev4.c:401:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1330: FILE: net/udp_lite/udplitev4.c:403:
+^I        /* Sender has requested partial coverage via sockopts. */$

CHECK:BRACES: Unbalanced braces around else statement
#1334: FILE: net/udp_lite/udplitev4.c:407:
+			else {	                /* Genuine partial coverage  */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1343: FILE: net/udp_lite/udplitev4.c:416:
+			/*
+			 * Causes for up->pcslen > up->len (error):

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1362: FILE: net/udp_lite/udplitev4.c:435:
+	/*
+	 * Checksum computation: is mandatory in UDP-Lite (RFC 3828).

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: net/udp_lite/udplitev4.c:441:
+^I        /* Only one fragment on the socket. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1374: FILE: net/udp_lite/udplitev4.c:447:
+^I^I        /* Coverage lies within the first frame. */$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1379: FILE: net/udp_lite/udplitev4.c:452:
+				offset = (unsigned char*)skb->h.raw - skb->data;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1397: FILE: net/udp_lite/udplitev4.c:470:
+        /* RFC 3828: if computed checksum is 0, transmit it as all ones.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1398: FILE: net/udp_lite/udplitev4.c:471:
+         * The transmitted checksum MUST NOT be all zeroes (sec. 3.1).    */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1398: FILE: net/udp_lite/udplitev4.c:471:
+         * The transmitted checksum MUST NOT be all zeroes (sec. 3.1).    */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1422: FILE: net/udp_lite/udplitev4.c:495:
+^I                     connected = 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1423: FILE: net/udp_lite/udplitev4.c:496:
+                             ulen = len;          /* UDP-Lite length */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1423: FILE: net/udp_lite/udplitev4.c:496:
+                             ulen = len;          /* UDP-Lite length */$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1433: FILE: net/udp_lite/udplitev4.c:506:
+	/*
+	 *    Check the flags.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1442: FILE: net/udp_lite/udplitev4.c:515:
+		/*
+		 * There are pending frames.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1458: FILE: net/udp_lite/udplitev4.c:531:
+	/*
+	 *  Get and verify the address.

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#1461: FILE: net/udp_lite/udplitev4.c:534:
+		struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;
 		                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#1462: FILE: net/udp_lite/udplitev4.c:535:
+		if (msg->msg_namelen < sizeof(*usin))
 		                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1462: FILE: net/udp_lite/udplitev4.c:535:
+		struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;
+		if (msg->msg_namelen < sizeof(*usin))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1498: FILE: net/udp_lite/udplitev4.c:571:
+	ipc.addr = faddr = daddr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rt"
#1525: FILE: net/udp_lite/udplitev4.c:598:
+	if (rt == NULL) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1529: FILE: net/udp_lite/udplitev4.c:602:
+			.nl_u = {.ip4_u =
+				 {.daddr = faddr,.saddr = saddr,.tos = tos}},

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1529: FILE: net/udp_lite/udplitev4.c:602:
+				 {.daddr = faddr,.saddr = saddr,.tos = tos}},
 				                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1529: FILE: net/udp_lite/udplitev4.c:602:
+				 {.daddr = faddr,.saddr = saddr,.tos = tos}},
 				                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1532: FILE: net/udp_lite/udplitev4.c:605:
+^I^I^I             {.sport = inet->sport,.dport = dport}}$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1532: FILE: net/udp_lite/udplitev4.c:605:
+			.uli_u = {.ports =
+			             {.sport = inet->sport,.dport = dport}}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1532: FILE: net/udp_lite/udplitev4.c:605:
+			             {.sport = inet->sport,.dport = dport}}
 			                                  ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1556: FILE: net/udp_lite/udplitev4.c:629:
+		daddr = ipc.addr = rt->rt_dst;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1569: FILE: net/udp_lite/udplitev4.c:642:
+	/*
+	 *    Now cork the socket to pend data.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: net/udp_lite/udplitev4.c:655:
+                                     : msg->msg_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1582: FILE: net/udp_lite/udplitev4.c:655:
+                                     : msg->msg_flags);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1667: FILE: net/udp_lite/udplitev4.c:740:
+			int amount = atomic_read(&sk->sk_wmem_alloc);
+			return put_user(amount, (int __user *)arg);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#1678: FILE: net/udp_lite/udplitev4.c:751:
+			if (skb != NULL) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1680: FILE: net/udp_lite/udplitev4.c:753:
+				/*
+				 * We will only return the amount

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1698: FILE: net/udp_lite/udplitev4.c:771:
+ *---------------------------------------------------------------------------*/

WARNING:INLINE: plain inline is preferred over __inline__
#1704: FILE: net/udp_lite/udplitev4.c:777:
+static __inline__ int __udplite_checksum_complete(struct sk_buff *skb)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1708: FILE: net/udp_lite/udplitev4.c:781:
+^I               clen;       /* Coverage length as stated in header.   */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1722: FILE: net/udp_lite/udplitev4.c:795:
+	 * before this routine is called.                   */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1730: FILE: net/udp_lite/udplitev4.c:803:
+                               "UDPLITE: Illegal packet - zero checksum.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1730: FILE: net/udp_lite/udplitev4.c:803:
+                               "UDPLITE: Illegal packet - zero checksum.\n");$

CHECK:BRACES: Unbalanced braces around else statement
#1732: FILE: net/udp_lite/udplitev4.c:805:
+	} else  /* packet is law-abiding, so checksum it */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1737: FILE: net/udp_lite/udplitev4.c:810:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#1743: FILE: net/udp_lite/udplitev4.c:816:
+static __inline__ int udplite_checksum_complete(struct sk_buff *skb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1746: FILE: net/udp_lite/udplitev4.c:819:
+	return skb->ip_summed != CHECKSUM_UNNECESSARY
+	    && __udplite_checksum_complete(skb);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1763: FILE: net/udp_lite/udplitev4.c:836:
+	/*
+	 *  Check any passed addresses

WARNING:INDENTED_LABEL: labels should not be indented
#1771: FILE: net/udp_lite/udplitev4.c:844:
+      try_again:

WARNING:INDENTED_LABEL: labels should not be indented
#1806: FILE: net/udp_lite/udplitev4.c:879:
+      out_free:

WARNING:INDENTED_LABEL: labels should not be indented
#1808: FILE: net/udp_lite/udplitev4.c:881:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#1811: FILE: net/udp_lite/udplitev4.c:884:
+      csum_copy_err:

WARNING:LINE_SPACING: Missing a blank line after declarations
#1817: FILE: net/udp_lite/udplitev4.c:890:
+		int clear = 0;
+		spin_lock_bh(&sk->sk_receive_queue.lock);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1841: FILE: net/udp_lite/udplitev4.c:914:
+	/*
+	 *    1003.1g - break association.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1858: FILE: net/udp_lite/udplitev4.c:931:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1868: FILE: net/udp_lite/udplitev4.c:941:
+ *     1  if the the UDP-Lite system should process it

CHECK:SPACING: No space is necessary after a cast
#1883: FILE: net/udp_lite/udplitev4.c:956:
+	__u8  *udplitedata   = (__u8 *) uh + sizeof(struct udplitehdr);

CHECK:SPACING: No space is necessary after a cast
#1884: FILE: net/udp_lite/udplitev4.c:957:
+	__u32 *udplitedata32 = (__u32 *) udplitedata;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1901: FILE: net/udp_lite/udplitev4.c:974:
+		if (len == 1 && udplitedata[0] == 0xff) {
[...]
+		} else if (len > sizeof(struct ip_esp_hdr)
[...]
+		} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1904: FILE: net/udp_lite/udplitev4.c:977:
+		} else if (len > sizeof(struct ip_esp_hdr)
+			   && udplitedata32[0] != 0) {

CHECK:BRACES: Unbalanced braces around else statement
#1907: FILE: net/udp_lite/udplitev4.c:980:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1913: FILE: net/udp_lite/udplitev4.c:986:
+		if (len == 1 && udplitedata[0] == 0xff) {
[...]
+		} else if (len > 2 * sizeof(u32) + sizeof(struct ip_esp_hdr) &&
[...]
+		} else
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1917: FILE: net/udp_lite/udplitev4.c:990:
+			   udplitedata32[0] == 0 && udplitedata32[1] == 0) {
+

CHECK:BRACES: Unbalanced braces around else statement
#1920: FILE: net/udp_lite/udplitev4.c:993:
+		} else

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1974: FILE: net/udp_lite/udplitev4.c:1047:
+	/*
+	 *    Charge it to the socket, dropping if the queue is full.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1983: FILE: net/udp_lite/udplitev4.c:1056:
+		/*
+		 * This is an encapsulation socket, so let's see if this is

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1988: FILE: net/udp_lite/udplitev4.c:1061:
+		 * appropriately.  Otherwise, just fall through and

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2005: FILE: net/udp_lite/udplitev4.c:1078:
+		/* FALLTHROUGH -- it's a UDP-Lite Packet */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2008: FILE: net/udp_lite/udplitev4.c:1081:
+	/*
+	 * FIXME: The use of encapsulated packets has not yet been tested. The

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2032: FILE: net/udp_lite/udplitev4.c:1105:
+/*
+ *   udplite_v4_mcast_deliver  -  code taken from udp.c

CHECK:BRACES: braces {} should be used on all arms of this statement
#2049: FILE: net/udp_lite/udplitev4.c:1122:
+	if (sk) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2063: FILE: net/udp_lite/udplitev4.c:1136:
+				int ret = udplite_queue_rcv_skb(sk, skb1);
+				if (ret > 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2065: FILE: net/udp_lite/udplitev4.c:1138:
+					 * of dropping packets here. */

CHECK:BRACES: Unbalanced braces around else statement
#2070: FILE: net/udp_lite/udplitev4.c:1143:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#2087: FILE: net/udp_lite/udplitev4.c:1160:
+        /* In UDPv4 a zero checksum means that the transmitter generated no$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2088: FILE: net/udp_lite/udplitev4.c:1161:
+         * checksum. UDP-Lite (like IPv6) mandates checksums, hence packets$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2089: FILE: net/udp_lite/udplitev4.c:1162:
+         * with a zero checksum field are illegal.  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2089: FILE: net/udp_lite/udplitev4.c:1162:
+         * with a zero checksum field are illegal.  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2117: FILE: net/udp_lite/udplitev4.c:1190:
+^I                     daddr = skb->nh.iph->daddr;$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2124: FILE: net/udp_lite/udplitev4.c:1197:
+	/*
+	 *    Validate the packet and the UDP-Lite length.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#2135: FILE: net/udp_lite/udplitev4.c:1208:
+	if (sk == NULL)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2151: FILE: net/udp_lite/udplitev4.c:1224:
+		/*
+		 * MIB statistics other than incrementing the error count are

ERROR:CODE_INDENT: code indent should use tabs where possible
#2164: FILE: net/udp_lite/udplitev4.c:1237:
+                                     "UDPLITE: partial coverage %d, but "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2164: FILE: net/udp_lite/udplitev4.c:1237:
+                                     "UDPLITE: partial coverage %d, but "$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2165: FILE: net/udp_lite/udplitev4.c:1238:
+                                               "full coverage %d requ. "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2165: FILE: net/udp_lite/udplitev4.c:1238:
+                                               "full coverage %d requ. "$

WARNING:SPLIT_STRING: quoted string split across lines
#2165: FILE: net/udp_lite/udplitev4.c:1238:
+                                     "UDPLITE: partial coverage %d, but "
+                                               "full coverage %d requ. "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#2166: FILE: net/udp_lite/udplitev4.c:1239:
+               ^I^I^I     "(IP %d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2166: FILE: net/udp_lite/udplitev4.c:1239:
+               ^I^I^I     "(IP %d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2166: FILE: net/udp_lite/udplitev4.c:1239:
+               ^I^I^I     "(IP %d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#2166: FILE: net/udp_lite/udplitev4.c:1239:
+                                               "full coverage %d requ. "
+               			     "(IP %d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2175: FILE: net/udp_lite/udplitev4.c:1248:
+			       "UDPLITE: coverage %d too small, need min. %d "
+			       "(IP %d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", clen,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk"
#2188: FILE: net/udp_lite/udplitev4.c:1261:
+	if (sk != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2190: FILE: net/udp_lite/udplitev4.c:1263:
+		int ret = udplite_queue_rcv_skb(sk, skb);
+		sock_put(sk);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2193: FILE: net/udp_lite/udplitev4.c:1266:
+		/*
+		 * A return value > 0 means to resubmit the input, but

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2210: FILE: net/udp_lite/udplitev4.c:1283:
+	/*
+	 * Got a UDP-Lite packet to a port to which we don't wanna listen.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2211: FILE: net/udp_lite/udplitev4.c:1284:
+         * Ignore it and increment the count of `NoPort' messages.$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2216: FILE: net/udp_lite/udplitev4.c:1289:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2220: FILE: net/udp_lite/udplitev4.c:1293:
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2220: FILE: net/udp_lite/udplitev4.c:1293:
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#2220: FILE: net/udp_lite/udplitev4.c:1293:
+	LIMIT_NETDEBUG(KERN_NOTICE "UDPLITE: short packet, %d/%d bytes "
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2222: FILE: net/udp_lite/udplitev4.c:1295:
+                          NIPQUAD(daddr), ntohs(uh->dest)   );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2222: FILE: net/udp_lite/udplitev4.c:1295:
+                          NIPQUAD(daddr), ntohs(uh->dest)   );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2222: FILE: net/udp_lite/udplitev4.c:1295:
+                          NIPQUAD(daddr), ntohs(uh->dest)   );

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2227: FILE: net/udp_lite/udplitev4.c:1300:
+	/*
+	 * Coverage length violates RFC 3828: log and discard silently.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2230: FILE: net/udp_lite/udplitev4.c:1303:
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d, len %d)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2230: FILE: net/udp_lite/udplitev4.c:1303:
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d, len %d)\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#2230: FILE: net/udp_lite/udplitev4.c:1303:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDPLITE: bad csum coverage %d "
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d, len %d)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2232: FILE: net/udp_lite/udplitev4.c:1305:
+                     NIPQUAD(daddr), ntohs(uh->dest), len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2232: FILE: net/udp_lite/udplitev4.c:1305:
+                     NIPQUAD(daddr), ntohs(uh->dest), len);$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2238: FILE: net/udp_lite/udplitev4.c:1311:
+	/*
+	 * Checksum violated: proceed as per RFC 1122/3828.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2241: FILE: net/udp_lite/udplitev4.c:1314:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2241: FILE: net/udp_lite/udplitev4.c:1314:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),$

WARNING:SPLIT_STRING: quoted string split across lines
#2241: FILE: net/udp_lite/udplitev4.c:1314:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDPLITE: bad checksum "
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),

ERROR:CODE_INDENT: code indent should use tabs where possible
#2242: FILE: net/udp_lite/udplitev4.c:1315:
+                     ntohs(uh->source), NIPQUAD(daddr), ntohs(uh->dest));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2242: FILE: net/udp_lite/udplitev4.c:1315:
+                     ntohs(uh->source), NIPQUAD(daddr), ntohs(uh->dest));$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2248: FILE: net/udp_lite/udplitev4.c:1321:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2267: FILE: net/udp_lite/udplitev4.c:1340:
+			      int optname, char __user * optval, int optlen)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2307: FILE: net/udp_lite/udplitev4.c:1380:
+	/* Sender sets actual checksum coverage length via this option.
+	   The case coverage > packet length is handled by send module. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2307: FILE: net/udp_lite/udplitev4.c:1380:
+	   The case coverage > packet length is handled by send module. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2315: FILE: net/udp_lite/udplitev4.c:1388:
+        /* The receiver specifies a minimum checksum coverage value. To make$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2316: FILE: net/udp_lite/udplitev4.c:1389:
+         * sense, this should be set to 8 (as done below).                    */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2316: FILE: net/udp_lite/udplitev4.c:1389:
+         * sense, this should be set to 8 (as done below).                    */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2336: FILE: net/udp_lite/udplitev4.c:1409:
+			      char __user * optval, int __user * optlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2336: FILE: net/udp_lite/udplitev4.c:1409:
+			      char __user * optval, int __user * optlen)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2411: FILE: net/udp_lite/udplitev4.c:1484:
+                                /* checksum invalidated */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#2424: FILE: net/udp_lite/udplitev4.c:1497:
+		if (skb == NULL)	/* Nothing to see, move along. */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2430: FILE: net/udp_lite/udplitev4.c:1503:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2432: FILE: net/udp_lite/udplitev4.c:1505:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'are'
#2454: FILE: net/udp_lite/udplitev4.c:1527:
+ * Operations related to the proc filesystem. These are are all taken

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2456: FILE: net/udp_lite/udplitev4.c:1529:
+ *-------------------------------------------------------------------------*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2466: FILE: net/udp_lite/udplitev4.c:1539:
+		struct hlist_node *node;
+		sk_for_each(sk, node, &udplite_hash[state->bucket]) {

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2500: FILE: net/udp_lite/udplitev4.c:1573:
+	return pos? NULL : sk;
 	          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2503: FILE: net/udp_lite/udplitev4.c:1576:
+static void *udplite_seq_start(struct seq_file *seq, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2509: FILE: net/udp_lite/udplitev4.c:1582:
+static void *udplite_seq_next(struct seq_file *seq, void *v, loff_t * pos)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2570: FILE: net/udp_lite/udplitev4.c:1643:
+	p = proc_net_fops_create(afinfo->name, S_IRUGO, afinfo->seq_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2586: FILE: net/udp_lite/udplitev4.c:1659:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#2596: FILE: net/udp_lite/udplitev4.c:1669:
+	sprintf(tmpbuf, "%4d: %08X:%04X %08X:%04X"
+		" %02X %08X:%08X %02X:%08lX %08X %5d %8d %lu %d %p",

WARNING:SPLIT_STRING: quoted string split across lines
#2609: FILE: net/udp_lite/udplitev4.c:1682:
+			   "  sl  local_address rem_address   st tx_queue "
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "

WARNING:SPLIT_STRING: quoted string split across lines
#2610: FILE: net/udp_lite/udplitev4.c:1683:
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "
+			   "inode");

CHECK:BRACES: Unbalanced braces around else statement
#2611: FILE: net/udp_lite/udplitev4.c:1684:
+	else {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2622: FILE: net/udp_lite/udplitev4.c:1695:
+static struct file_operations udplite4_seq_fops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2632: FILE: net/udp_lite/udplitev4.c:1705:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2645: FILE: net/udp_lite/udplitev4.c:1718:
+EXPORT_SYMBOL(udplite_disconnect);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2646: FILE: net/udp_lite/udplitev4.c:1719:
+EXPORT_SYMBOL(udplite_hash);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2647: FILE: net/udp_lite/udplitev4.c:1720:
+EXPORT_SYMBOL(udplite_hash_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2648: FILE: net/udp_lite/udplitev4.c:1721:
+EXPORT_SYMBOL(udplite_ioctl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2649: FILE: net/udp_lite/udplitev4.c:1722:
+EXPORT_SYMBOL(udplite_port_rover);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2650: FILE: net/udp_lite/udplitev4.c:1723:
+EXPORT_SYMBOL(udplite_prot);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2651: FILE: net/udp_lite/udplitev4.c:1724:
+EXPORT_SYMBOL(udplite_sendmsg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2652: FILE: net/udp_lite/udplitev4.c:1725:
+EXPORT_SYMBOL(udplite_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2656: FILE: net/udp_lite/udplitev4.c:1729:
+EXPORT_SYMBOL(udplite_proc_unregister);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070939.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 126 warnings, 59 checks, 2493 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070939.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
