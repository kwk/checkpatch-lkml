WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
o No changes. Applies cleanly against 2.6.11-rc1 and 2.6.11-rc1-bk6. Applies

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: fs/buffer.c:1137:
+^Ipage = find_or_create_page(inode->i_mapping, index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: fs/buffer.c:1138:
+	page = find_or_create_page(inode->i_mapping, index, 
+					GFP_NOFS | __GFP_USERRCLM);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/buffer.c:3001:
+^Istruct buffer_head *ret = kmem_cache_alloc(bh_cachep, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: fs/buffer.c:3002:
+						gfp_flags|__GFP_KERNRCLM);
 						         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: fs/dcache.c:718:
+^Identry = kmem_cache_alloc(dentry_cache, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/dcache.c:719:
+^I^I^I^IGFP_KERNEL|__GFP_KERNRCLM); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/dcache.c:719:
+	dentry = kmem_cache_alloc(dentry_cache, 
+				GFP_KERNEL|__GFP_KERNRCLM); 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/dcache.c:719:
+				GFP_KERNEL|__GFP_KERNRCLM); 
 				          ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#198: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#198: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#210: FILE: fs/ext3/super.c:437:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#222: FILE: fs/ntfs/inode.c:321:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: fs/ntfs/inode.c:346:
+^Ini = (ntfs_inode *)kmem_cache_alloc(ntfs_inode_cache, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#232: FILE: fs/ntfs/inode.c:347:
+					SLAB_NOFS|__GFP_KERNRCLM);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#254: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: include/linux/gfp.h:51:
+			__GFP_USERRCLM|__GFP_KERNRCLM)
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: include/linux/mmzone.h:140:
+^I * There are ALLOC_TYPE number of MAX_ORDER free lists. Once a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: include/linux/mmzone.h:144:
+^I * Non-reclaimable. The objective is to reduce fragmentation $

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: include/linux/mmzone.h:147:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: include/linux/mmzone.h:147:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/linux/mmzone.h:147:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: include/linux/mmzone.h:149:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: include/linux/mmzone.h:155:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: include/linux/mmzone.h:155:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: include/linux/mmzone.h:155:
+ ^Istruct free_area^Ifree_area_global;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: include/linux/mmzone.h:156:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: include/linux/mmzone.h:156:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: include/linux/mmzone.h:157:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: include/linux/mmzone.h:157:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: include/linux/mmzone.h:157:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: include/linux/mmzone.h:158:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: include/linux/mmzone.h:158:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: include/linux/mmzone.h:160:
+^I * what the block is for. When a page is freed, it's index within this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: include/linux/mmzone.h:161:
+^I * bitmap is calculated using (address >> MAX_ORDER) * 2 . This means $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: include/linux/mmzone.h:162:
+^I * that pages will always be freed into the correct list in $

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: include/linux/mmzone.h:166:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#315: FILE: include/linux/mmzone.h:166:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: include/linux/mmzone.h:168:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: include/linux/mmzone.h:168:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/linux/mmzone.h:168:
+ ^Iunsigned long^I^I*free_area_usemap;$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#330: FILE: mm/page_alloc.c:51:
+int global_steal=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#330: FILE: mm/page_alloc.c:51:
+int global_steal=0;
                 ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#331: FILE: mm/page_alloc.c:52:
+int global_refill=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#331: FILE: mm/page_alloc.c:52:
+int global_refill=0;
                  ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#332: FILE: mm/page_alloc.c:53:
+int kernnorclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#332: FILE: mm/page_alloc.c:53:
+int kernnorclm_count=0;
                     ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#333: FILE: mm/page_alloc.c:54:
+int kernrclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#333: FILE: mm/page_alloc.c:54:
+int kernrclm_count=0;
                   ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#334: FILE: mm/page_alloc.c:55:
+int userrclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#334: FILE: mm/page_alloc.c:55:
+int userrclm_count=0;
                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: mm/page_alloc.c:66:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES] = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: mm/page_alloc.c:71:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: mm/page_alloc.c:71:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: mm/page_alloc.c:72:
+ 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#371: FILE: mm/page_alloc.c:132:
+static inline int get_pageblock_type(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: mm/page_alloc.c:137:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#376: FILE: mm/page_alloc.c:137:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: mm/page_alloc.c:140:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#379: FILE: mm/page_alloc.c:140:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: mm/page_alloc.c:145:
+static inline void set_pageblock_type(struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: mm/page_alloc.c:146:
+static inline void set_pageblock_type(struct page *page, 
+					struct zone *zone, int type) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: mm/page_alloc.c:149:
+	int bitidx = ((page - zone->zone_mem_map) >> MAX_ORDER) * 2;
+	bit1 = bit2 = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#388: FILE: mm/page_alloc.c:149:
+	bit1 = bit2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: mm/page_alloc.c:153:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#398: FILE: mm/page_alloc.c:159:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: mm/page_alloc.c:164:
+	clear_bit(bitidx+1, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: mm/page_alloc.c:165:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#405: FILE: mm/page_alloc.c:166:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#451: FILE: mm/page_alloc.c:337:
+	if (order >= MAX_ORDER-1) {
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global
#452: FILE: mm/page_alloc.c:338:
+		area = &(zone->free_area_global);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#485: FILE: mm/page_alloc.c:510:
+	int global_split=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#493: FILE: mm/page_alloc.c:515:
+	int retry_count=0;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: mm/page_alloc.c:517:
+	int startorder = order;
+	if (flags & __GFP_USERRCLM) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#499: FILE: mm/page_alloc.c:521:
+	}
+	else if (flags & __GFP_KERNRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: mm/page_alloc.c:535:
+^Ifor (current_order = startorder; $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#515: FILE: mm/page_alloc.c:537:
+			current_order < MAX_ORDER; ++current_order) {
+

ERROR:SPACING: space required before the open brace '{'
#528: FILE: mm/page_alloc.c:552:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#528: FILE: mm/page_alloc.c:552:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: mm/page_alloc.c:558:
+		page = list_entry(zone->free_area_global.free_list.next,
+				struct page, lru);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: mm/page_alloc.c:560:
+^I^Ilist_add(&page->lru, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: mm/page_alloc.c:561:
+		list_add(&page->lru, 
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#537: FILE: mm/page_alloc.c:561:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));
 			                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1].free_list
#537: FILE: mm/page_alloc.c:561:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#539: FILE: mm/page_alloc.c:563:
+		global_split=1;
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#543: FILE: mm/page_alloc.c:567:
+		startorder = MAX_ORDER-1;
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: mm/page_alloc.c:571:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#553: FILE: mm/page_alloc.c:577:
+	startorder=order;
 	          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#555: FILE: mm/page_alloc.c:579:
+	if (retry_count != ALLOC_TYPES) goto retry;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#595: FILE: mm/page_alloc.c:646:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: mm/page_alloc.c:651:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#606: FILE: mm/page_alloc.c:654:
+				for (i=0; i < (1<<order); i++)
 				      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#606: FILE: mm/page_alloc.c:654:
+				for (i=0; i < (1<<order); i++)
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#607: FILE: mm/page_alloc.c:655:
+					SetPageNosaveFree(pfn_to_page(start_pfn+i));
 					                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#657: FILE: mm/page_alloc.c:820:
+		free_pages -= (

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#678: FILE: mm/page_alloc.c:1383:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#692: FILE: mm/page_alloc.c:1684:
+ ^Iint type;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#692: FILE: mm/page_alloc.c:1684:
+ ^Iint type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: mm/page_alloc.c:1684:
+ ^Iint type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: mm/page_alloc.c:1685:
+ ^Istruct free_area *area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: mm/page_alloc.c:1685:
+ ^Istruct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: mm/page_alloc.c:1685:
+ ^Istruct free_area *area;$

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#695: FILE: mm/page_alloc.c:1687:
+ 	/* Initialse the three size ordered lists of free_areas */
  	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: mm/page_alloc.c:1687:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#695: FILE: mm/page_alloc.c:1687:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: mm/page_alloc.c:1687:
+ ^I/* Initialse the three size ordered lists of free_areas */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#696: FILE: mm/page_alloc.c:1688:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: mm/page_alloc.c:1691:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: mm/page_alloc.c:1691:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: mm/page_alloc.c:1696:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: mm/page_alloc.c:1696:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: mm/page_alloc.c:1697:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: mm/page_alloc.c:1697:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: mm/page_alloc.c:1697:
+ ^I/* Initialise the global pool of 2^size pages */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: mm/page_alloc.c:1698:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#706: FILE: mm/page_alloc.c:1698:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: mm/page_alloc.c:1698:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#707: FILE: mm/page_alloc.c:1699:
+	zone->free_area_global.nr_free=0;
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: mm/page_alloc.c:1827:
+^I^Izone->free_area_usemap = $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: mm/page_alloc.c:1831:
+		memset((unsigned long *)zone->free_area_usemap,
+				ALLOC_KERNNORCLM, usemapsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#737: FILE: mm/page_alloc.c:1833:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: mm/page_alloc.c:1834:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",
+				zone_names[j], size, realsize, usemapsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: mm/page_alloc.c:1914:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#749: FILE: mm/page_alloc.c:1914:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: mm/page_alloc.c:1914:
+ ^Iunsigned long nr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: mm/page_alloc.c:1916:
+ ^I/* Show global fragmentation statistics */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: mm/page_alloc.c:1916:
+ ^I/* Show global fragmentation statistics */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: mm/page_alloc.c:1916:
+ ^I/* Show global fragmentation statistics */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: mm/page_alloc.c:1922:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#760: FILE: mm/page_alloc.c:1922:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: mm/page_alloc.c:1922:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: mm/page_alloc.c:1923:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#761: FILE: mm/page_alloc.c:1923:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: mm/page_alloc.c:1923:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#761: FILE: mm/page_alloc.c:1923:
+ 		for (order = 0; order < MAX_ORDER-1; ++order) {
  		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#762: FILE: mm/page_alloc.c:1924:
+ ^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#762: FILE: mm/page_alloc.c:1924:
+ ^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: mm/page_alloc.c:1924:
+ ^I^I^Inr_bufs = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: mm/page_alloc.c:1925:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: mm/page_alloc.c:1925:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: mm/page_alloc.c:1926:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: mm/page_alloc.c:1926:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: mm/page_alloc.c:1926:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#764: FILE: mm/page_alloc.c:1926:
+ 			for (type=0; type < ALLOC_TYPES; type++) {
  			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: mm/page_alloc.c:1927:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#765: FILE: mm/page_alloc.c:1927:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: mm/page_alloc.c:1927:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#765: FILE: mm/page_alloc.c:1927:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: mm/page_alloc.c:1928:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#766: FILE: mm/page_alloc.c:1928:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: mm/page_alloc.c:1928:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: mm/page_alloc.c:1929:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#767: FILE: mm/page_alloc.c:1929:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: mm/page_alloc.c:1929:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: mm/page_alloc.c:1930:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#768: FILE: mm/page_alloc.c:1930:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: mm/page_alloc.c:1930:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: mm/page_alloc.c:1931:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#769: FILE: mm/page_alloc.c:1931:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: mm/page_alloc.c:1931:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: mm/page_alloc.c:1932:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: mm/page_alloc.c:1932:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: mm/page_alloc.c:1933:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#771: FILE: mm/page_alloc.c:1933:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: mm/page_alloc.c:1933:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: mm/page_alloc.c:1934:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#772: FILE: mm/page_alloc.c:1934:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: mm/page_alloc.c:1934:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: mm/page_alloc.c:1935:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#773: FILE: mm/page_alloc.c:1935:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: mm/page_alloc.c:1935:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#773: FILE: mm/page_alloc.c:1935:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: mm/page_alloc.c:1936:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#774: FILE: mm/page_alloc.c:1936:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: mm/page_alloc.c:1936:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: mm/page_alloc.c:1937:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#775: FILE: mm/page_alloc.c:1937:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: mm/page_alloc.c:1937:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: mm/page_alloc.c:1938:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: mm/page_alloc.c:1938:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: mm/page_alloc.c:1939:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#777: FILE: mm/page_alloc.c:1939:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: mm/page_alloc.c:1939:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: mm/page_alloc.c:1940:
+ ^I^Iseq_putc(m, '\n');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#778: FILE: mm/page_alloc.c:1940:
+ ^I^Iseq_putc(m, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: mm/page_alloc.c:1940:
+ ^I^Iseq_putc(m, '\n');$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: mm/page_alloc.c:1941:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#779: FILE: mm/page_alloc.c:1941:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: mm/page_alloc.c:1941:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: mm/page_alloc.c:1942:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: mm/page_alloc.c:1942:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: mm/page_alloc.c:1943:
+ ^I/* Show statistics for each allocation type */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#781: FILE: mm/page_alloc.c:1943:
+ ^I/* Show statistics for each allocation type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: mm/page_alloc.c:1943:
+ ^I/* Show statistics for each allocation type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: mm/page_alloc.c:1944:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#782: FILE: mm/page_alloc.c:1944:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: mm/page_alloc.c:1944:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#782: FILE: mm/page_alloc.c:1944:
+ 	seq_printf(m, "\nPer-allocation-type statistics");

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: mm/page_alloc.c:1945:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: mm/page_alloc.c:1945:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: mm/page_alloc.c:1945:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: mm/page_alloc.c:1946:
+ ^I^Iif (!zone->present_pages)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#784: FILE: mm/page_alloc.c:1946:
+ ^I^Iif (!zone->present_pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: mm/page_alloc.c:1946:
+ ^I^Iif (!zone->present_pages)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: mm/page_alloc.c:1947:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#785: FILE: mm/page_alloc.c:1947:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: mm/page_alloc.c:1947:
+ ^I^I^Icontinue;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: mm/page_alloc.c:1948:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: mm/page_alloc.c:1948:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: mm/page_alloc.c:1949:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#787: FILE: mm/page_alloc.c:1949:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: mm/page_alloc.c:1949:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: mm/page_alloc.c:1950:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#788: FILE: mm/page_alloc.c:1950:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: mm/page_alloc.c:1950:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#788: FILE: mm/page_alloc.c:1950:
+ 		for (type=0; type < ALLOC_TYPES; type++) {
  		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: mm/page_alloc.c:1952:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: mm/page_alloc.c:1952:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#790: FILE: mm/page_alloc.c:1952:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: mm/page_alloc.c:1952:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#791: FILE: mm/page_alloc.c:1953:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#791: FILE: mm/page_alloc.c:1953:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: mm/page_alloc.c:1953:
+ 			seq_printf(m, "\nNode %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: mm/page_alloc.c:1953:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#792: FILE: mm/page_alloc.c:1954:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: mm/page_alloc.c:1954:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: mm/page_alloc.c:1954:
+ ^I^I^I^I^Itype_names[type]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: mm/page_alloc.c:1955:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#793: FILE: mm/page_alloc.c:1955:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: mm/page_alloc.c:1955:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: mm/page_alloc.c:1956:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#794: FILE: mm/page_alloc.c:1956:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: mm/page_alloc.c:1956:
+ ^I^I^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#796: FILE: mm/page_alloc.c:1958:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#796: FILE: mm/page_alloc.c:1958:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: mm/page_alloc.c:1958:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#796: FILE: mm/page_alloc.c:1958:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: mm/page_alloc.c:1959:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#797: FILE: mm/page_alloc.c:1959:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: mm/page_alloc.c:1959:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: mm/page_alloc.c:1960:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#798: FILE: mm/page_alloc.c:1960:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: mm/page_alloc.c:1960:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: mm/page_alloc.c:1961:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#799: FILE: mm/page_alloc.c:1961:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: mm/page_alloc.c:1961:
+ ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: mm/page_alloc.c:1963:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: mm/page_alloc.c:1963:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: mm/page_alloc.c:1964:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#802: FILE: mm/page_alloc.c:1964:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: mm/page_alloc.c:1964:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: mm/page_alloc.c:1965:
+ ^I^Iseq_printf(m, "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#803: FILE: mm/page_alloc.c:1965:
+ ^I^Iseq_printf(m, "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: mm/page_alloc.c:1965:
+ ^I^Iseq_printf(m, "\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#803: FILE: mm/page_alloc.c:1965:
+ 		seq_printf(m, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: mm/page_alloc.c:1966:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: mm/page_alloc.c:1966:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#804: FILE: mm/page_alloc.c:1966:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: mm/page_alloc.c:1966:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#805: FILE: mm/page_alloc.c:1967:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#805: FILE: mm/page_alloc.c:1967:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: mm/page_alloc.c:1967:
+ 		seq_printf(m, "Node %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: mm/page_alloc.c:1967:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#806: FILE: mm/page_alloc.c:1968:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#806: FILE: mm/page_alloc.c:1968:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: mm/page_alloc.c:1968:
+ ^I^I^I^I^I"MAX_ORDER");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#807: FILE: mm/page_alloc.c:1969:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#807: FILE: mm/page_alloc.c:1969:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: mm/page_alloc.c:1969:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: mm/page_alloc.c:1970:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#808: FILE: mm/page_alloc.c:1970:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: mm/page_alloc.c:1970:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#808: FILE: mm/page_alloc.c:1970:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: mm/page_alloc.c:1971:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#809: FILE: mm/page_alloc.c:1971:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: mm/page_alloc.c:1971:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#810: FILE: mm/page_alloc.c:1972:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#810: FILE: mm/page_alloc.c:1972:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: mm/page_alloc.c:1972:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: mm/page_alloc.c:1973:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: mm/page_alloc.c:1973:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: mm/page_alloc.c:1977:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: mm/page_alloc.c:1977:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: mm/page_alloc.c:1978:
+ ^I/* Show bean counters */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#816: FILE: mm/page_alloc.c:1978:
+ ^I/* Show bean counters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: mm/page_alloc.c:1978:
+ ^I/* Show bean counters */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#817: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#817: FILE: mm/page_alloc.c:1979:
+ 	seq_printf(m, "\nGlobal beancounters\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: mm/page_alloc.c:1980:
+ ^Iseq_printf(m, "Global steals:     %d\n", global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: mm/page_alloc.c:1980:
+ ^Iseq_printf(m, "Global steals:     %d\n", global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: mm/page_alloc.c:1980:
+ ^Iseq_printf(m, "Global steals:     %d\n", global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: mm/page_alloc.c:1981:
+ ^Iseq_printf(m, "Global refills:    %d\n", global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: mm/page_alloc.c:1981:
+ ^Iseq_printf(m, "Global refills:    %d\n", global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: mm/page_alloc.c:1981:
+ ^Iseq_printf(m, "Global refills:    %d\n", global_refill);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: mm/page_alloc.c:1982:
+ ^Iseq_printf(m, "KernNoRclm allocs: %d\n", kernnorclm_count);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#820: FILE: mm/page_alloc.c:1982:
+ ^Iseq_printf(m, "KernNoRclm allocs: %d\n", kernnorclm_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: mm/page_alloc.c:1982:
+ ^Iseq_printf(m, "KernNoRclm allocs: %d\n", kernnorclm_count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#821: FILE: mm/page_alloc.c:1983:
+ ^Iseq_printf(m, "KernRclm allocs:   %d\n", kernrclm_count);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#821: FILE: mm/page_alloc.c:1983:
+ ^Iseq_printf(m, "KernRclm allocs:   %d\n", kernrclm_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: mm/page_alloc.c:1983:
+ ^Iseq_printf(m, "KernRclm allocs:   %d\n", kernrclm_count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#822: FILE: mm/page_alloc.c:1984:
+ ^Iseq_printf(m, "UserRclm allocs:   %d\n", userrclm_count);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#822: FILE: mm/page_alloc.c:1984:
+ ^Iseq_printf(m, "UserRclm allocs:   %d\n", userrclm_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: mm/page_alloc.c:1984:
+ ^Iseq_printf(m, "UserRclm allocs:   %d\n", userrclm_count);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: mm/page_alloc.c:1985:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[0], $

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: mm/page_alloc.c:1985:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[0], $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: mm/page_alloc.c:1985:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[0], $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: mm/page_alloc.c:1985:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[0], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: mm/page_alloc.c:1986:
+ 	seq_printf(m, "%-10s Fallback count: %d\n", type_names[0], 
+							fallback_count[0]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: mm/page_alloc.c:1987:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[1],$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#825: FILE: mm/page_alloc.c:1987:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[1],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: mm/page_alloc.c:1987:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[1],$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: mm/page_alloc.c:1988:
+ 	seq_printf(m, "%-10s Fallback count: %d\n", type_names[1],
+							fallback_count[1]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: mm/page_alloc.c:1989:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[2],$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#827: FILE: mm/page_alloc.c:1989:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[2],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: mm/page_alloc.c:1989:
+ ^Iseq_printf(m, "%-10s Fallback count: %d\n", type_names[2],$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: mm/page_alloc.c:1990:
+ 	seq_printf(m, "%-10s Fallback count: %d\n", type_names[2],
+							fallback_count[2]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: mm/page_alloc.c:1991:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: mm/page_alloc.c:1991:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: mm/page_alloc.c:1992:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: mm/page_alloc.c:1992:
+ 
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: mm/page_alloc.c:1992:
+ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210216.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 129 errors, 151 warnings, 46 checks, 624 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210216.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
