WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -uNr 2.4.0-ac9/arch/i386/kernel/setup.c 2.4.0-ac9-cr/arch/i386/kernel/setup.c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/kernel.h:65:
+extern unsigned long long memparse(char *ptr, char **retptr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: include/linux/mm.h:389:
+extern void shmem_lock(struct file * file, int lock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/mm.h:389:
+extern void shmem_lock(struct file * file, int lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#116: FILE: lib/cmdline.c:96:
+unsigned long long memparse (char *ptr, char **retptr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#119: FILE: lib/cmdline.c:98:
+	unsigned long long ret = simple_strtoull (ptr, retptr, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#119: FILE: lib/cmdline.c:98:
+	unsigned long long ret = simple_strtoull (ptr, retptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: mm/shmem.c:59:
+ * So the mm freed $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: mm/shmem.c:65:
+static void shmem_recalc_inode(struct inode * inode)

ERROR:SPACING: space required before the open brace '{'
#173: FILE: mm/shmem.c:71:
+	if (freed){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: mm/shmem.c:72:
+		struct shmem_sb_info * info = &inode->i_sb->u.shmem_sb;

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: mm/shmem.c:73:
+		struct shmem_sb_info * info = &inode->i_sb->u.shmem_sb;
+		inode->i_blocks -= freed;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#176: FILE: mm/shmem.c:74:
+		spin_lock (&info->stat_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#178: FILE: mm/shmem.c:76:
+		spin_unlock (&info->stat_lock);

CHECK:SPACING: No space is necessary after a cast
#282: FILE: mm/shmem.c:334:
+	if (inode->i_size <= (loff_t) idx * PAGE_CACHE_SIZE)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: mm/shmem.c:394:
+void shmem_lock(struct file * file, int lock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: mm/shmem.c:396:
+	struct inode * inode = file->f_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#293: FILE: mm/shmem.c:397:
+	struct shmem_inode_info * info = &inode->u.shmem_i;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: mm/shmem.c:398:
+	struct page * page;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#311: FILE: mm/shmem.c:415:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: mm/shmem.c:907:
+		if (!strcmp(this_char,"size")) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#337: FILE: mm/shmem.c:911:
+			size = memparse(value,&value);
 			                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#337: FILE: mm/shmem.c:911:
+			size = memparse(value,&value);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: mm/shmem.c:915:
+		} else if (!strcmp(this_char,"nr_blocks")) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#344: FILE: mm/shmem.c:918:
+			*blocks = memparse(value,&value);
 			                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#344: FILE: mm/shmem.c:918:
+			*blocks = memparse(value,&value);
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#351: FILE: mm/shmem.c:924:
+			*inodes = memparse(value,&value);
 			                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#351: FILE: mm/shmem.c:924:
+			*inodes = memparse(value,&value);
 			                         ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#359: FILE: mm/shmem.c:989:
+	sb->s_maxbytes = (unsigned long long)(SHMEM_NR_DIRECT + (ENTRIES_PER_PAGE*ENTRIES_PER_PAGE)) << PAGE_CACHE_SHIFT;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#359: FILE: mm/shmem.c:989:
+	sb->s_maxbytes = (unsigned long long)(SHMEM_NR_DIRECT + (ENTRIES_PER_PAGE*ENTRIES_PER_PAGE)) << PAGE_CACHE_SHIFT;
 	                                                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: mm/shmem.c:1077:
+		printk (KERN_ERR "Could not register swapfs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#379: FILE: mm/shmem.c:1077:
+		printk (KERN_ERR "Could not register swapfs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#388: FILE: mm/shmem.c:1089:
+		printk (KERN_ERR "could not kern_mount swapfs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: mm/shmem.c:1089:
+		printk (KERN_ERR "could not kern_mount swapfs\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000555638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 12 warnings, 5 checks, 310 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000555638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
