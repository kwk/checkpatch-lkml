WARNING:TYPO_SPELLING: 'instaces' may be misspelled - perhaps 'instances'?
#30: 
Subject: [RFC][PATCH 04/20] pspace: Allow multiple instaces of the process
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'instaces' may be misspelled - perhaps 'instances'?
#50: 
spaces, and implements the data for allow multiple instaces of the pid
                                                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'comparisions' may be misspelled - perhaps 'comparisons'?
#68: 
The number of comparisions performed not in conjunction with another
              ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'currenty' may be misspelled - perhaps 'currently'?
#94: 
currenty CAP_KILL is defined as the required capability to
^^^^^^^^

WARNING:TYPO_SPELLING: 'extrenally' may be misspelled - perhaps 'externally'?
#103: 
Waitpid on the extrenally visible pid of a pid namespace waits
               ^^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#159: FILE: fs/exec.c:724:
+		leader->parent = leader->real_parent = leader->pspace->child_reaper.task;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/kernel.h:127:
+extern int session_of_pgrp(struct pspace *pspace, int pgrp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/linux/pid.h:40:
+extern struct pid *FASTCALL(find_pid(enum pid_type, struct pspace *, int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#230: FILE: include/linux/pid.h:40:
+extern struct pid *FASTCALL(find_pid(enum pid_type, struct pspace *, int));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#230: FILE: include/linux/pid.h:40:
+extern struct pid *FASTCALL(find_pid(enum pid_type, struct pspace *, int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/pid.h:42:
+extern struct task_struct *find_task_by_pid_type(int type, struct pspace *pspace, int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/pid.h:44:
+extern int alloc_pidmap(struct pspace *pspace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/pid.h:45:
+extern void FASTCALL(free_pidmap(struct pspace *psapce, int pid));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#241: FILE: include/linux/pid.h:47:
+#define do_each_task_pid(pspace, who, type, task)			\
+	if ((task = find_task_by_pid_type(type, pspace, who))) {	\
 		prefetch((task)->pids[type].pid_list.next);		\
 		do {

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#241: FILE: include/linux/pid.h:47:
+#define do_each_task_pid(pspace, who, type, task)			\
+	if ((task = find_task_by_pid_type(type, pspace, who))) {	\
 		prefetch((task)->pids[type].pid_list.next);		\
 		do {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#242: FILE: include/linux/pid.h:48:
+	if ((task = find_task_by_pid_type(type, pspace, who))) {	\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#247: FILE: include/linux/pid.h:52:
+#define while_each_task_pid(pspace, who, type, task)			\
 		} while (task = pid_task((task)->pids[type].pid_list.next,\
 						type),			\
 			prefetch((task)->pids[type].pid_list.next),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#247: FILE: include/linux/pid.h:52:
+#define while_each_task_pid(pspace, who, type, task)			\
 		} while (task = pid_task((task)->pids[type].pid_list.next,\
 						type),			\
 			prefetch((task)->pids[type].pid_list.next),	\

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#252: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: include/linux/pspace.h:1:
+#ifndef _LINUX_PSPACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#265: FILE: include/linux/pspace.h:9:
+struct pidmap
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#270: FILE: include/linux/pspace.h:14:
+#define PIDMAP_ENTRIES		((PID_MAX_LIMIT + 8*PAGE_SIZE - 1)/PAGE_SIZE/8)
                       		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#270: FILE: include/linux/pspace.h:14:
+#define PIDMAP_ENTRIES		((PID_MAX_LIMIT + 8*PAGE_SIZE - 1)/PAGE_SIZE/8)
                       		                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#270: FILE: include/linux/pspace.h:14:
+#define PIDMAP_ENTRIES		((PID_MAX_LIMIT + 8*PAGE_SIZE - 1)/PAGE_SIZE/8)
                       		                                            ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#273: FILE: include/linux/pspace.h:17:
+struct pspace
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: include/linux/pspace.h:37:
+^Ireturn (tsk->pspace == pspace) || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: include/linux/pspace.h:54:
+extern void __put_pspace(struct pspace *pspace);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#316: FILE: include/linux/pspace.h:60:
+	if (atomic_dec_and_test(&pspace->count)) {
+		__put_pspace(pspace);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/pspace.h:65:
+extern int copy_pspace(int flags, struct task_struct *p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: include/linux/pspace.h:70:
+	struct pspace *pspace = tsk->pspace;
+	tsk->pspace = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: include/linux/pspace.h:71:
+^Iif (pspace->child_reaper.task == tsk) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: include/linux/pspace.h:89:
+	struct pspace *test;
+	test = tsk->pspace;

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: include/linux/pspace.h:90:
+	while((test != &init_pspace) && (test != pspace))

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#407: FILE: include/linux/sched.h:1097:
+extern int __kill_pspace_info(int , struct siginfo *, struct pspace *);
                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: include/linux/sched.h:1097:
+extern int __kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#407: FILE: include/linux/sched.h:1097:
+extern int __kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#407: FILE: include/linux/sched.h:1097:
+extern int __kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#407: FILE: include/linux/sched.h:1097:
+extern int __kill_pspace_info(int , struct siginfo *, struct pspace *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#408: FILE: include/linux/sched.h:1098:
+extern int kill_pspace_info(int , struct siginfo *, struct pspace *);
                                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: include/linux/sched.h:1098:
+extern int kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#408: FILE: include/linux/sched.h:1098:
+extern int kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#408: FILE: include/linux/sched.h:1098:
+extern int kill_pspace_info(int , struct siginfo *, struct pspace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#408: FILE: include/linux/sched.h:1098:
+extern int kill_pspace_info(int , struct siginfo *, struct pspace *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/linux/sched.h:1099:
+extern int __kill_pg_info(int sig, struct siginfo *info, struct pspace *, pid_t pgrp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#409: FILE: include/linux/sched.h:1099:
+extern int __kill_pg_info(int sig, struct siginfo *info, struct pspace *, pid_t pgrp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: include/linux/sched.h:1100:
+extern int kill_pg_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#410: FILE: include/linux/sched.h:1100:
+extern int kill_pg_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#410: FILE: include/linux/sched.h:1100:
+extern int kill_pg_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#410: FILE: include/linux/sched.h:1100:
+extern int kill_pg_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#410: FILE: include/linux/sched.h:1100:
+extern int kill_pg_info(int, struct siginfo *, struct pspace *, pid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: include/linux/sched.h:1101:
+extern int kill_proc_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#411: FILE: include/linux/sched.h:1101:
+extern int kill_proc_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#411: FILE: include/linux/sched.h:1101:
+extern int kill_proc_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#411: FILE: include/linux/sched.h:1101:
+extern int kill_proc_info(int, struct siginfo *, struct pspace *, pid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#411: FILE: include/linux/sched.h:1101:
+extern int kill_proc_info(int, struct siginfo *, struct pspace *, pid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#412: FILE: include/linux/sched.h:1102:
+extern int kill_proc_info_as_uid(int, struct siginfo *, struct pspace *, pid_t, uid_t, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/linux/sched.h:1108:
+extern int kill_pg(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#420: FILE: include/linux/sched.h:1108:
+extern int kill_pg(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#420: FILE: include/linux/sched.h:1108:
+extern int kill_pg(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#420: FILE: include/linux/sched.h:1108:
+extern int kill_pg(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#420: FILE: include/linux/sched.h:1108:
+extern int kill_pg(struct pspace *, pid_t, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/sched.h:1109:
+extern int kill_proc(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pspace *' should also have an identifier name
#421: FILE: include/linux/sched.h:1109:
+extern int kill_proc(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#421: FILE: include/linux/sched.h:1109:
+extern int kill_proc(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#421: FILE: include/linux/sched.h:1109:
+extern int kill_proc(struct pspace *, pid_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#421: FILE: include/linux/sched.h:1109:
+extern int kill_proc(struct pspace *, pid_t, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/linux/tty.h:295:
+extern int is_orphaned_pgrp(struct pspace *pspace, int pgrp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: kernel/exit.c:591:
+		if (will_become_orphaned_pgrp(pspace, pgrp, NULL) &&
+				has_stopped_jobs(pspace, pgrp)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: kernel/fork.c:872:
+^Iif ((clone_flags & CLONE_NPSPACE) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: kernel/fork.c:873:
+	if ((clone_flags & CLONE_NPSPACE) && 
+		(clone_flags & (CLONE_THREAD|CLONE_SIGHAND)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#760: FILE: kernel/fork.c:873:
+		(clone_flags & (CLONE_THREAD|CLONE_SIGHAND)))
 		                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#785: FILE: kernel/fork.c:937:
+	if ((retval = copy_pspace(clone_flags, p)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: kernel/pid.c:43:
+#define mk_pid(map, off)	(((map) - pspace->pidmap)*BITS_PER_PAGE + (off))
                         	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#905: FILE: kernel/pid.c:65:
+		[ 0 ... PIDMAP_ENTRIES-1] = { ATOMIC_INIT(BITS_PER_PAGE), NULL }
 		                      ^

ERROR:SPACING: space prohibited after that open square bracket '['
#905: FILE: kernel/pid.c:65:
+		[ 0 ... PIDMAP_ENTRIES-1] = { ATOMIC_INIT(BITS_PER_PAGE), NULL }

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#939: FILE: kernel/pid.c:90:
+	map = &pspace->pidmap[pid/BITS_PER_PAGE];
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#940: FILE: kernel/pid.c:91:
+	max_scan = (pspace->max + BITS_PER_PAGE - 1)/BITS_PER_PAGE - !offset;
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#963: FILE: kernel/pid.c:127:
+		if (map < &pspace->pidmap[(pspace->max-1)/BITS_PER_PAGE]) {
 		                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#963: FILE: kernel/pid.c:127:
+		if (map < &pspace->pidmap[(pspace->max-1)/BITS_PER_PAGE]) {
 		                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid->nr == nr'
#988: FILE: kernel/pid.c:148:
+		if ((pid->nr == nr) && (pid->pspace == pspace))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid->pspace == pspace'
#988: FILE: kernel/pid.c:148:
+		if ((pid->nr == nr) && (pid->pspace == pspace))

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#995: FILE: kernel/pid.c:154:
+static int fastcall attach_any_pid(struct pid *task_pid, task_t *task, enum pid_type type, struct pspace *pspace, int nr)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#1083: FILE: kernel/pid.c:242:
+	size_t len;
+	parent = leader->pspace;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pspace)...) over kzalloc(sizeof(struct pspace)...)
#1085: FILE: kernel/pid.c:244:
+	pspace = kzalloc(sizeof(struct pspace) + len, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: kernel/pid.c:258:
+^Iattach_any_pid(&pspace->child_reaper, leader, PIDTYPE_PID, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: kernel/pid.c:259:
+	attach_any_pid(&pspace->child_reaper, leader, PIDTYPE_PID, 
+			parent, leader->wid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1111: FILE: kernel/pid.c:270:
+	int pid;
+	get_pspace(p->pspace);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1118: FILE: kernel/pid.c:277:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: kernel/pid.c:284:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1142: FILE: kernel/pid.c:301:
+	BUG_ON(atomic_read(&pspace->count) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1150: FILE: kernel/pid.c:309:
+		BUG_ON(atomic_read(&map[i].nr_free) != BITS_PER_PAGE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: kernel/signal.c:1254:
+int kill_proc_info_as_uid(int sig, struct siginfo *info, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1300: FILE: kernel/signal.c:1255:
+^I^I^I^Istruct pspace *pspace, pid_t pid, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: kernel/signal.c:1255:
+int kill_proc_info_as_uid(int sig, struct siginfo *info, 
+				struct pspace *pspace, pid_t pid, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: kernel/signal.c:2039:
+		if (pspace_leader(current) &&
+				(is_init(current) || !sig_kernel_only(signr)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 46 warnings, 37 checks, 1226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
