WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1169: FILE: drivers/serial/Kconfig:606:
+config SERIAL_SGI_L1_CONSOLE
+	bool "SGI Altix L1 serial console support"
+	select SERIAL_CORE
+	help
+		If you have an SGI Altix and you would like to use the system
+		controller serial port as your console (you want this!),
+		say Y.  Otherwise, say N.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1190: FILE: drivers/serial/sn_console.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1217: FILE: drivers/serial/sn_console.c:28:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1250: FILE: drivers/serial/sn_console.c:61:
+ * avoid losing chars, (always has to be a power of 2) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1254: FILE: drivers/serial/sn_console.c:65:
+#define SN_SAL_UART_FIFO_SPEED_CPS 9600/10
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1254: FILE: drivers/serial/sn_console.c:65:
+#define SN_SAL_UART_FIFO_SPEED_CPS 9600/10

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1261: FILE: drivers/serial/sn_console.c:72:
+ * the following.. */

WARNING:SPACING: Unnecessary space before function pointer arguments
#1279: FILE: drivers/serial/sn_console.c:90:
+		int (*sal_puts_raw) (const char *s, int len);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1280: FILE: drivers/serial/sn_console.c:91:
+		int (*sal_puts) (const char *s, int len);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1281: FILE: drivers/serial/sn_console.c:92:
+		int (*sal_getc) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1282: FILE: drivers/serial/sn_console.c:93:
+		int (*sal_input_pending) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1283: FILE: drivers/serial/sn_console.c:94:
+		void (*sal_wakeup_transmit) (struct sn_cons_port *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sn_cons_port *' should also have an identifier name
#1283: FILE: drivers/serial/sn_console.c:94:
+		void (*sal_wakeup_transmit) (struct sn_cons_port *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1283: FILE: drivers/serial/sn_console.c:94:
+		void (*sal_wakeup_transmit) (struct sn_cons_port *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1294: FILE: drivers/serial/sn_console.c:105:
+extern u64 master_node_bedrock_address;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'initally' may be misspelled - perhaps 'initially'?
#1344: FILE: drivers/serial/sn_console.c:155:
+ * synchronous (raw) and asynchronous (buffered).  initally, early_printk
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1352: FILE: drivers/serial/sn_console.c:163:
+ * timer callback or by UART interrupt) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1354: FILE: drivers/serial/sn_console.c:165:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1398: FILE: drivers/serial/sn_console.c:209:
+	 * was done via sal or directly */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1483: FILE: drivers/serial/sn_console.c:294:
+/* uart interface structs $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1498: FILE: drivers/serial/sn_console.c:309:
+	return ("SGI SN L1");

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:TYPO_SPELLING: 'contorl' may be misspelled - perhaps 'control'?
#1565: FILE: drivers/serial/sn_console.c:376:
+ * snp_get_mctrl - get contorl line info, we just return a static value
                        ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1597: FILE: drivers/serial/sn_console.c:408:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#1658: FILE: drivers/serial/sn_console.c:469:
+static struct uart_ops sn_console_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1680: FILE: drivers/serial/sn_console.c:491:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1688: FILE: drivers/serial/sn_console.c:499:
+early_printk_sn_sal(const char *s, unsigned count)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1690: FILE: drivers/serial/sn_console.c:501:
+	extern void early_sn_setup(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1719: FILE: drivers/serial/sn_console.c:530:
+	printed_len = vsnprintf(printk_buf, sizeof (printk_buf), fmt, args);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1729: FILE: drivers/serial/sn_console.c:540:
+
+

WARNING:TYPO_SPELLING: 'receieve' may be misspelled - perhaps 'receive'?
#1746: FILE: drivers/serial/sn_console.c:557:
+		printk(KERN_ERR "sn_receive_chars - port NULL so can't receieve\n");
 		                                                       ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1746: FILE: drivers/serial/sn_console.c:557:
+		printk(KERN_ERR "sn_receive_chars - port NULL so can't receieve\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_receive_chars', this function's name, in a string
#1746: FILE: drivers/serial/sn_console.c:557:
+		printk(KERN_ERR "sn_receive_chars - port NULL so can't receieve\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'receieve' may be misspelled - perhaps 'receive'?
#1751: FILE: drivers/serial/sn_console.c:562:
+		printk(KERN_ERR "sn_receive_chars - port->sc_ops  NULL so can't receieve\n");
 		                                                                ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1751: FILE: drivers/serial/sn_console.c:562:
+		printk(KERN_ERR "sn_receive_chars - port->sc_ops  NULL so can't receieve\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_receive_chars', this function's name, in a string
#1751: FILE: drivers/serial/sn_console.c:562:
+		printk(KERN_ERR "sn_receive_chars - port->sc_ops  NULL so can't receieve\n");

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#1756: FILE: drivers/serial/sn_console.c:567:
+		/* The serial_core stuffs are initilized, use them */
 		                              ^^^^^^^^^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1759: FILE: drivers/serial/sn_console.c:570:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1759: FILE: drivers/serial/sn_console.c:570:
+	else {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1767: FILE: drivers/serial/sn_console.c:578:
+			printk(KERN_ERR "sn_console: An error occured while "
 			                                      ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1767: FILE: drivers/serial/sn_console.c:578:
+			printk(KERN_ERR "sn_console: An error occured while "

WARNING:SPLIT_STRING: quoted string split across lines
#1768: FILE: drivers/serial/sn_console.c:579:
+			printk(KERN_ERR "sn_console: An error occured while "
+			       "obtaining data from the console (0x%0x)\n", ch);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1785: FILE: drivers/serial/sn_console.c:596:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1785: FILE: drivers/serial/sn_console.c:596:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1800: FILE: drivers/serial/sn_console.c:611:
+ * writes are going through sn_sal_console_write because that's how $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1817: FILE: drivers/serial/sn_console.c:628:
+	BUG_ON(!port->sc_is_asynch);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#1820: FILE: drivers/serial/sn_console.c:631:
+		/* We're initilized, using serial core infrastructure */
 		         ^^^^^^^^^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1823: FILE: drivers/serial/sn_console.c:634:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1823: FILE: drivers/serial/sn_console.c:634:
+	else {

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#1825: FILE: drivers/serial/sn_console.c:636:
+		 * initilized yet.  Just return.  Writes are going through 
 		   ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1825: FILE: drivers/serial/sn_console.c:636:
+^I^I * initilized yet.  Just return.  Writes are going through $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1841: FILE: drivers/serial/sn_console.c:652:
+	 * then to the head, if needed */

CHECK:SPACING: No space is necessary after a cast
#1888: FILE: drivers/serial/sn_console.c:699:
+	struct sn_cons_port *port = (struct sn_cons_port *) dev_id;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1896: FILE: drivers/serial/sn_console.c:707:
+	if (status & SAL_CONSOLE_INTR_RECV) {
+		sn_receive_chars(port, regs);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1899: FILE: drivers/serial/sn_console.c:710:
+	if (status & SAL_CONSOLE_INTR_XMIT) {
+		sn_transmit_chars(port, TRANSMIT_BUFFERED);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1909: FILE: drivers/serial/sn_console.c:720:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1910: FILE: drivers/serial/sn_console.c:721:
+ * returns the console irq if interrupt is successfully registered, else 0 $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1921: FILE: drivers/serial/sn_console.c:732:
+	printk(KERN_INFO "sn_console: console proceeding in polled mode\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1927: FILE: drivers/serial/sn_console.c:738:
+ * @data: A pointer to our sn_cons_port (which contains the uart port) $

CHECK:SPACING: No space is necessary after a cast
#1937: FILE: drivers/serial/sn_console.c:748:
+	struct sn_cons_port *port = (struct sn_cons_port *) data;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1979: FILE: drivers/serial/sn_console.c:790:
+	 * console interrupts will never be enabled */

CHECK:SPACING: No space is necessary after a cast
#1997: FILE: drivers/serial/sn_console.c:808:
+	port->sc_timer.data = (unsigned long) port;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1999: FILE: drivers/serial/sn_console.c:810:
+	if (IS_RUNNING_ON_SIMULATOR())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2001: FILE: drivers/serial/sn_console.c:812:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: drivers/serial/sn_console.c:813:
+^I^I/* 960cps / 16 char FIFO = 60HZ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2003: FILE: drivers/serial/sn_console.c:814:
+		 * HZ / (SN_SAL_FIFO_SPEED_CPS / SN_SAL_FIFO_DEPTH) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2021: FILE: drivers/serial/sn_console.c:832:
+ * We attempt to switch to interrupt mode here by calling $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2054: FILE: drivers/serial/sn_console.c:865:
+static void sn_sal_console_write(struct console *, const char *, unsigned);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2056: FILE: drivers/serial/sn_console.c:867:
+extern struct uart_driver sal_console_uart;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2057: FILE: drivers/serial/sn_console.c:868:
+extern struct tty_driver *uart_console_device(struct console *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct console *' should also have an identifier name
#2057: FILE: drivers/serial/sn_console.c:868:
+extern struct tty_driver *uart_console_device(struct console *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#2057: FILE: drivers/serial/sn_console.c:868:
+extern struct tty_driver *uart_console_device(struct console *, int *);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2068: FILE: drivers/serial/sn_console.c:879:
+#define SAL_CONSOLE	&sal_console

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2097: FILE: drivers/serial/sn_console.c:908:
+	printk(KERN_INFO "sn_console: Console driver init\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2107: FILE: drivers/serial/sn_console.c:918:
+			printk("Failed to register console device using misc_register.\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2113: FILE: drivers/serial/sn_console.c:924:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2113: FILE: drivers/serial/sn_console.c:924:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2119: FILE: drivers/serial/sn_console.c:930:
+    * or async above so the proper uart structures are populated */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2119: FILE: drivers/serial/sn_console.c:930:
+	/* We register the driver and the port before switching to interrupts
+    * or async above so the proper uart structures are populated */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2122: FILE: drivers/serial/sn_console.c:933:
+^I^Iprintk("ERROR sn_sal_module_init failed uart_register_driver, line %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2122: FILE: drivers/serial/sn_console.c:933:
+		printk("ERROR sn_sal_module_init failed uart_register_driver, line %d\n", 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_sal_module_init', this function's name, in a string
#2122: FILE: drivers/serial/sn_console.c:933:
+		printk("ERROR sn_sal_module_init failed uart_register_driver, line %d\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2123: FILE: drivers/serial/sn_console.c:934:
+		printk("ERROR sn_sal_module_init failed uart_register_driver, line %d\n", 
+		  __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2138: FILE: drivers/serial/sn_console.c:949:
+		printk(KERN_ERR "%s: unable to add port\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2138: FILE: drivers/serial/sn_console.c:949:
+		printk(KERN_ERR "%s: unable to add port\n", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2143: FILE: drivers/serial/sn_console.c:954:
+	 * before we get here through the module initcalls */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2144: FILE: drivers/serial/sn_console.c:955:
+	if (!sal_console_port.sc_is_asynch) {
+		sn_sal_switch_to_asynch(&sal_console_port);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2149: FILE: drivers/serial/sn_console.c:960:
+	if (!IS_RUNNING_ON_SIMULATOR()) {
+		sn_sal_switch_to_interrupts(&sal_console_port);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2182: FILE: drivers/serial/sn_console.c:993:
+static void puts_raw_fixed(const char *s, int count) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2185: FILE: drivers/serial/sn_console.c:996:
+^Istruct sn_cons_port *port = &sal_console_port;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2202: FILE: drivers/serial/sn_console.c:1013:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2203: FILE: drivers/serial/sn_console.c:1014:
+ * This is referenced in the console struct.  It is used for early $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2205: FILE: drivers/serial/sn_console.c:1016:
+ * such as kdb.  The console_lock must be held when we get here.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2209: FILE: drivers/serial/sn_console.c:1020:
+ * We don't use this special case code if we're not registered with serial $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2215: FILE: drivers/serial/sn_console.c:1026:
+sn_sal_console_write(struct console *co, const char *s, unsigned count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2218: FILE: drivers/serial/sn_console.c:1029:
+^Istruct sn_cons_port *port = &sal_console_port;^I^I^I$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2220: FILE: drivers/serial/sn_console.c:1031:
+	static int stole_lock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2223: FILE: drivers/serial/sn_console.c:1034:
+	BUG_ON(!port->sc_is_asynch);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2226: FILE: drivers/serial/sn_console.c:1037:
+^I *  yet.  So only do the fancy recovery after registering $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2229: FILE: drivers/serial/sn_console.c:1040:
+	if (port->sc_port.info) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2231: FILE: drivers/serial/sn_console.c:1042:
+^I ^I* oops, kdb, panic, etc.  make sure they get it. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2231: FILE: drivers/serial/sn_console.c:1042:
+^I ^I* oops, kdb, panic, etc.  make sure they get it. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2231: FILE: drivers/serial/sn_console.c:1042:
+	 	* oops, kdb, panic, etc.  make sure they get it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2231: FILE: drivers/serial/sn_console.c:1042:
+		/* somebody really wants this output, might be an
+	 	* oops, kdb, panic, etc.  make sure they get it. */

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#2233: FILE: drivers/serial/sn_console.c:1044:
+		if (spin_is_locked(&port->sc_port.lock)) {

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:CODE_INDENT: code indent should use tabs where possible
#2239: FILE: drivers/serial/sn_console.c:1050:
+^I^I ^I * We attempt to determine if someone has died with the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2239: FILE: drivers/serial/sn_console.c:1050:
+^I^I ^I * We attempt to determine if someone has died with the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2240: FILE: drivers/serial/sn_console.c:1051:
+^I^I ^I * lock. We wait ~20 secs after the head and tail ptrs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2240: FILE: drivers/serial/sn_console.c:1051:
+^I^I ^I * lock. We wait ~20 secs after the head and tail ptrs$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2241: FILE: drivers/serial/sn_console.c:1052:
+^I^I ^I * stop moving and assume the lock holder is not functional$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2241: FILE: drivers/serial/sn_console.c:1052:
+^I^I ^I * stop moving and assume the lock holder is not functional$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2242: FILE: drivers/serial/sn_console.c:1053:
+^I^I ^I * and plow ahead. If the lock is freed within the time out$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2242: FILE: drivers/serial/sn_console.c:1053:
+^I^I ^I * and plow ahead. If the lock is freed within the time out$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2243: FILE: drivers/serial/sn_console.c:1054:
+^I^I ^I * period we re-get the lock and go ahead normally. We also$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2243: FILE: drivers/serial/sn_console.c:1054:
+^I^I ^I * period we re-get the lock and go ahead normally. We also$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2244: FILE: drivers/serial/sn_console.c:1055:
+^I^I ^I * remember if we have plowed ahead so that we don't have$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2244: FILE: drivers/serial/sn_console.c:1055:
+^I^I ^I * remember if we have plowed ahead so that we don't have$

WARNING:TYPO_SPELLING: 'asumption' may be misspelled - perhaps 'assumption'?
#2245: FILE: drivers/serial/sn_console.c:1056:
+			 * to wait out the time out period again - the asumption
 			                                               ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2246: FILE: drivers/serial/sn_console.c:1057:
+^I^I ^I * is that we will time out again.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2246: FILE: drivers/serial/sn_console.c:1057:
+^I^I ^I * is that we will time out again.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2247: FILE: drivers/serial/sn_console.c:1058:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2247: FILE: drivers/serial/sn_console.c:1058:
+^I^I ^I */$

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#2250: FILE: drivers/serial/sn_console.c:1061:
+				if (!spin_is_locked(&port->sc_port.lock) || stole_lock) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2257: FILE: drivers/serial/sn_console.c:1068:
+				}
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#2257: FILE: drivers/serial/sn_console.c:1068:
+				else {

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#2259: FILE: drivers/serial/sn_console.c:1070:
+					if ((lhead != port->sc_port.info->xmit.head) || (ltail != port->sc_port.info->xmit.tail)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lhead != port->sc_port.info->xmit.head'
#2259: FILE: drivers/serial/sn_console.c:1070:
+					if ((lhead != port->sc_port.info->xmit.head) || (ltail != port->sc_port.info->xmit.tail)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ltail != port->sc_port.info->xmit.tail'
#2259: FILE: drivers/serial/sn_console.c:1070:
+					if ((lhead != port->sc_port.info->xmit.head) || (ltail != port->sc_port.info->xmit.tail)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2272: FILE: drivers/serial/sn_console.c:1083:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#2272: FILE: drivers/serial/sn_console.c:1083:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2277: FILE: drivers/serial/sn_console.c:1088:
+^I^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2278: FILE: drivers/serial/sn_console.c:1089:
+		} 
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#2278: FILE: drivers/serial/sn_console.c:1089:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2288: FILE: drivers/serial/sn_console.c:1099:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2288: FILE: drivers/serial/sn_console.c:1099:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2294: FILE: drivers/serial/sn_console.c:1105:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2319: FILE: drivers/serial/sn_console.c:1130:
+		DPRINTF ("sn_sal_serial_console_init : register console\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_sal_serial_console_init', this function's name, in a string
#2319: FILE: drivers/serial/sn_console.c:1130:
+		DPRINTF ("sn_sal_serial_console_init : register console\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 74 warnings, 23 checks, 1184 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
