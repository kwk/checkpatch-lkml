WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
The attached patch introduces a simple mutex implementation as an alternative

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#82: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/linux/semaphore.h:1:
+/* semaphore.h: include the various types of semaphore in one package

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: include/linux/mutex.h:1:
+/* mutex.h: mutex semaphore implementation base

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: include/linux/mutex-simple.h:1:
+/* mutex-simple.h: simple exchange-based mutexes

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#212: FILE: include/linux/mutex-simple.h:45:
+	spinlock_t		wait_lock;

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: include/linux/mutex-simple.h:61:
+#define mutex_release(mutex)	do { (mutex)->state = 0; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#228: FILE: include/linux/mutex-simple.h:61:
+#define mutex_release(mutex)	do { (mutex)->state = 0; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#237: FILE: include/linux/mutex-simple.h:70:
+# define __MUTEX_OWNER_INIT(owner) , .__owner = (owner)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: include/linux/mutex-simple.h:75:
+#define __MUTEX_INITIALISER(name,_state,owner)			\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: include/linux/mutex-simple.h:75:
+#define __MUTEX_INITIALISER(name,_state,owner)			\
                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#250: FILE: include/linux/mutex-simple.h:83:
+#define __DECLARE_MUTEX_GENERIC(name, owner, state)			\
+	struct mutex name = __MUTEX_INITIALISER(name, owner, state)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#260: FILE: include/linux/mutex-simple.h:93:
+			      unsigned state,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#276: FILE: include/linux/mutex-simple.h:109:
+static inline void init_MUTEX_LOCKED (struct mutex *mutex)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/mutex-simple.h:114:
+extern void __down(struct mutex *mutex);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/mutex-simple.h:115:
+extern int  __down_interruptible(struct mutex *mutex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/mutex-simple.h:116:
+extern void __up(struct mutex *mutex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/mutex-simple.h:119:
+extern void __up_bad(struct mutex *mutex);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#299: FILE: include/linux/mutex-simple.h:132:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: include/linux/mutex-simple.h:132:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#369: FILE: lib/Kconfig.debug:114:
+config DEBUG_MUTEX_OWNER
+	bool "Mutex owner tracking and checking"
+	depends on DEBUG_KERNEL
+	help
+	  If you say Y here, the process currently owning a mutex will be
+	  remembered, and a warning will be issued if anyone other than that
+	  process releases it.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: lib/mutex-simple.c:1:
+/* mutex-simple.c: simple mutex slow paths

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#459: FILE: lib/mutex-simple.c:62:
+EXPORT_SYMBOL(__down);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#520: FILE: lib/mutex-simple.c:123:
+EXPORT_SYMBOL(__down_interruptible);

WARNING:MEMORY_BARRIER: memory barrier without comment
#544: FILE: lib/mutex-simple.c:147:
+	mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#550: FILE: lib/mutex-simple.c:153:
+EXPORT_SYMBOL(__up);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#559: FILE: lib/mutex-simple.c:162:
+		printk(KERN_ERR

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#564: FILE: lib/mutex-simple.c:167:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#564: FILE: lib/mutex-simple.c:167:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#565: FILE: lib/mutex-simple.c:168:
+		printk(KERN_ERR

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#574: FILE: lib/mutex-simple.c:177:
+EXPORT_SYMBOL(__up_bad);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#590: FILE: lib/semaphore-sleepers.c:57:
+fastcall void __sched __down_sem(struct semaphore * sem)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#599: FILE: lib/semaphore-sleepers.c:94:
+fastcall int __sched __down_sem_interruptible(struct semaphore * sem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: lib/semaphore-sleepers.c:157:
+fastcall int __down_sem_trylock(struct semaphore * sem)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 17 warnings, 8 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
