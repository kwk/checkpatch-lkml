WARNING:TYPO_SPELLING: 'functionnal' may be misspelled - perhaps 'functional'?
#75: FILE: drivers/trace/Config.help:28:
+  The impact of a fully functionnal system (kernel event logging +
                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: drivers/trace/tracer.c:1:
+/*****************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: drivers/trace/tracer.c:14:
+ *    13/03/00, Modified tracer so that the daemon mmaps the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Chaging' may be misspelled - perhaps 'Changing'?
#137: FILE: drivers/trace/tracer.c:21:
+ *    09/09/99, Chaging the format of an event record in order to
                 ^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#161: FILE: drivers/trace/tracer.c:45:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#163: FILE: drivers/trace/tracer.c:47:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#164: FILE: drivers/trace/tracer.c:48:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#165: FILE: drivers/trace/tracer.c:49:
+#include <asm/pgtable.h>

CHECK:CAMELCASE: Avoid CamelCase: <sMajorNumber>
#176: FILE: drivers/trace/tracer.c:60:
+static int		sMajorNumber;		/* Major number of the tracer */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <sOpenCount>
#177: FILE: drivers/trace/tracer.c:61:
+static int		sOpenCount;		/* Number of times device is open */

CHECK:CAMELCASE: Avoid CamelCase: <sTracLock>
#179: FILE: drivers/trace/tracer.c:63:
+static int		sTracLock;		/* Tracer lock used to lock primary buffer */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: drivers/trace/tracer.c:64:
+static spinlock_t ^IsSpinLock;^I^I/* Spinlock in order to lock kernel */$

CHECK:CAMELCASE: Avoid CamelCase: <sSpinLock>
#180: FILE: drivers/trace/tracer.c:64:
+static spinlock_t 	sSpinLock;		/* Spinlock in order to lock kernel */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: drivers/trace/tracer.c:66:
+static int ^I^IsSignalSent;^I^I/* A signal has been sent to the daemon */$

CHECK:CAMELCASE: Avoid CamelCase: <sSignalSent>
#182: FILE: drivers/trace/tracer.c:66:
+static int 		sSignalSent;		/* A signal has been sent to the daemon */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#183: FILE: drivers/trace/tracer.c:67:
+static struct task_struct* sDaemonTaskStruct;	/* Task structure of the tracer daemon */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <sDaemonTaskStruct>
#183: FILE: drivers/trace/tracer.c:67:
+static struct task_struct* sDaemonTaskStruct;	/* Task structure of the tracer daemon */

CHECK:CAMELCASE: Avoid CamelCase: <sTracerStarted>
#185: FILE: drivers/trace/tracer.c:69:
+static int		sTracerStarted;		/* Is the tracer started */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedEvents>
#186: FILE: drivers/trace/tracer.c:70:
+static trace_event_mask	sTracedEvents;		/* Bit-field of events being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sLogEventDetailsMask>
#187: FILE: drivers/trace/tracer.c:71:
+static trace_event_mask	sLogEventDetailsMask;	/* Log the details of the events mask */

CHECK:CAMELCASE: Avoid CamelCase: <sLogCPUID>
#188: FILE: drivers/trace/tracer.c:72:
+static int		sLogCPUID;		/* Log the CPUID associated with each event */

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#189: FILE: drivers/trace/tracer.c:73:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */
           		                     	       ^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#189: FILE: drivers/trace/tracer.c:73:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <sUseSyscallEIPBounds>
#189: FILE: drivers/trace/tracer.c:73:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */

CHECK:CAMELCASE: Avoid CamelCase: <sLowerEIPBoundSet>
#190: FILE: drivers/trace/tracer.c:74:
+static int		sLowerEIPBoundSet;	/* The lower bound EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sUpperEIPBoundSet>
#191: FILE: drivers/trace/tracer.c:75:
+static int		sUpperEIPBoundSet;	/* The upper bound EIP has been set */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#192: FILE: drivers/trace/tracer.c:76:
+static void*		sLowerEIPBound;		/* The lower bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sLowerEIPBound>
#192: FILE: drivers/trace/tracer.c:76:
+static void*		sLowerEIPBound;		/* The lower bound EIP */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#193: FILE: drivers/trace/tracer.c:77:
+static void*		sUpperEIPBound;		/* The upper bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sUpperEIPBound>
#193: FILE: drivers/trace/tracer.c:77:
+static void*		sUpperEIPBound;		/* The upper bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingPID>
#194: FILE: drivers/trace/tracer.c:78:
+static int		sTracingPID;		/* Tracing only the events for one pid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingPGRP>
#195: FILE: drivers/trace/tracer.c:79:
+static int		sTracingPGRP;		/* Tracing only the events for one process group */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingGID>
#196: FILE: drivers/trace/tracer.c:80:
+static int		sTracingGID;		/* Tracing only the events for one gid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingUID>
#197: FILE: drivers/trace/tracer.c:81:
+static int		sTracingUID;		/* Tracing only the events for one uid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedPID>
#198: FILE: drivers/trace/tracer.c:82:
+static pid_t		sTracedPID;		/* PID being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedPGRP>
#199: FILE: drivers/trace/tracer.c:83:
+static pid_t		sTracedPGRP;		/* Process group being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedGID>
#200: FILE: drivers/trace/tracer.c:84:
+static gid_t		sTracedGID;		/* GID being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedUID>
#201: FILE: drivers/trace/tracer.c:85:
+static uid_t		sTracedUID;		/* UID being traced */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#202: FILE: drivers/trace/tracer.c:86:
+static int		sSyscallEIPDepthSet;	/* The call depth at which to fetch EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sSyscallEIPDepthSet>
#202: FILE: drivers/trace/tracer.c:86:
+static int		sSyscallEIPDepthSet;	/* The call depth at which to fetch EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sSyscallEIPDepth>
#203: FILE: drivers/trace/tracer.c:87:
+static int		sSyscallEIPDepth;	/* The call depth at which to fetch the EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sBufReadComplete>
#205: FILE: drivers/trace/tracer.c:89:
+static int		sBufReadComplete;	/* Number of buffers completely filled */

CHECK:CAMELCASE: Avoid CamelCase: <sSizeReadIncomplete>
#206: FILE: drivers/trace/tracer.c:90:
+static int		sSizeReadIncomplete;	/* Quantity of data read from incomplete buffers */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#207: FILE: drivers/trace/tracer.c:91:
+static int		sEventsLost;		/* Number of events lost because of lack of buffer space */

CHECK:CAMELCASE: Avoid CamelCase: <sEventsLost>
#207: FILE: drivers/trace/tracer.c:91:
+static int		sEventsLost;		/* Number of events lost because of lack of buffer space */

CHECK:CAMELCASE: Avoid CamelCase: <sBufSize>
#208: FILE: drivers/trace/tracer.c:92:
+static u32		sBufSize;		/* Buffer sizes */

CHECK:CAMELCASE: Avoid CamelCase: <sAllocSize>
#209: FILE: drivers/trace/tracer.c:93:
+static u32		sAllocSize;		/* Size of buffers allocated */

CHECK:CAMELCASE: Avoid CamelCase: <sBufferID>
#210: FILE: drivers/trace/tracer.c:94:
+static u32		sBufferID;		/* Unique buffer ID */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#211: FILE: drivers/trace/tracer.c:95:
+static char*		sTracBuf = NULL;	/* Trace buffer */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#211: FILE: drivers/trace/tracer.c:95:
+static char*		sTracBuf = NULL;	/* Trace buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sTracBuf>
#211: FILE: drivers/trace/tracer.c:95:
+static char*		sTracBuf = NULL;	/* Trace buffer */

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#212: FILE: drivers/trace/tracer.c:96:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */
             		                	                   ^^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#212: FILE: drivers/trace/tracer.c:96:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#212: FILE: drivers/trace/tracer.c:96:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

CHECK:CAMELCASE: Avoid CamelCase: <sWritBuf>
#212: FILE: drivers/trace/tracer.c:96:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#213: FILE: drivers/trace/tracer.c:97:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#213: FILE: drivers/trace/tracer.c:97:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

CHECK:CAMELCASE: Avoid CamelCase: <sReadBuf>
#213: FILE: drivers/trace/tracer.c:97:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#214: FILE: drivers/trace/tracer.c:98:
+static char*		sWritBufEnd;		/* End of write buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sWritBufEnd>
#214: FILE: drivers/trace/tracer.c:98:
+static char*		sWritBufEnd;		/* End of write buffer */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#215: FILE: drivers/trace/tracer.c:99:
+static char*		sReadBufEnd;		/* End of read buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sReadBufEnd>
#215: FILE: drivers/trace/tracer.c:99:
+static char*		sReadBufEnd;		/* End of read buffer */

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#216: FILE: drivers/trace/tracer.c:100:
+static char*		sWritPos;		/* Current position for writting */
             		         		                        ^^^^^^^^

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#216: FILE: drivers/trace/tracer.c:100:
+static char*		sWritPos;		/* Current position for writting */

CHECK:CAMELCASE: Avoid CamelCase: <sWritPos>
#216: FILE: drivers/trace/tracer.c:100:
+static char*		sWritPos;		/* Current position for writting */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#217: FILE: drivers/trace/tracer.c:101:
+static char*		sReadLimit;		/* Limit at which read should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sReadLimit>
#217: FILE: drivers/trace/tracer.c:101:
+static char*		sReadLimit;		/* Limit at which read should stop */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#218: FILE: drivers/trace/tracer.c:102:
+static char*		sWritLimit;		/* Limit at which write should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sWritLimit>
#218: FILE: drivers/trace/tracer.c:102:
+static char*		sWritLimit;		/* Limit at which write should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sBufferStartTime>
#221: FILE: drivers/trace/tracer.c:105:
+static struct timeval sBufferStartTime;		/* The time at which the buffer was started */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#224: FILE: drivers/trace/tracer.c:108:
+static char *sUserEventData = NULL;		/* The data associated with a user event */

CHECK:CAMELCASE: Avoid CamelCase: <sUserEventData>
#224: FILE: drivers/trace/tracer.c:108:
+static char *sUserEventData = NULL;		/* The data associated with a user event */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: drivers/trace/tracer.c:110:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <sEventStructSize>
#228: FILE: drivers/trace/tracer.c:112:
+static int sEventStructSize[TRACE_EV_MAX + 1] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#229: FILE: drivers/trace/tracer.c:113:
+static int sEventStructSize[TRACE_EV_MAX + 1] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#230: FILE: drivers/trace/tracer.c:114:
+	sizeof(trace_start)		/* TRACE_START */ ,
 	                   		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#231: FILE: drivers/trace/tracer.c:115:
+	sizeof(trace_syscall_entry)	/* TRACE_SYSCALL_ENTRY */ ,
 	                           	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#232: FILE: drivers/trace/tracer.c:116:
+	0				/* TRACE_SYSCALL_EXIT */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#233: FILE: drivers/trace/tracer.c:117:
+	sizeof(trace_trap_entry)	/* TRACE_TRAP_ENTRY */ ,
 	                        	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#234: FILE: drivers/trace/tracer.c:118:
+	0				/* TRACE_TRAP_EXIT */ ,
 	 				                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#235: FILE: drivers/trace/tracer.c:119:
+	sizeof(trace_irq_entry)		/* TRACE_IRQ_ENTRY */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#236: FILE: drivers/trace/tracer.c:120:
+	0				/* TRACE_IRQ_EXIT */ ,
 	 				                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#237: FILE: drivers/trace/tracer.c:121:
+	sizeof(trace_schedchange)	/* TRACE_SCHEDCHANGE */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#238: FILE: drivers/trace/tracer.c:122:
+	0				/* TRACE_KERNEL_TIMER */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#239: FILE: drivers/trace/tracer.c:123:
+	sizeof(trace_soft_irq)		/* TRACE_SOFT_IRQ */ ,
 	                      		                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#240: FILE: drivers/trace/tracer.c:124:
+	sizeof(trace_process)		/* TRACE_PROCESS */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#241: FILE: drivers/trace/tracer.c:125:
+	sizeof(trace_file_system)	/* TRACE_FILE_SYSTEM */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#242: FILE: drivers/trace/tracer.c:126:
+	sizeof(trace_timer)		/* TRACE_TIMER */ ,
 	                   		                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#243: FILE: drivers/trace/tracer.c:127:
+	sizeof(trace_memory)		/* TRACE_MEMORY */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#244: FILE: drivers/trace/tracer.c:128:
+	sizeof(trace_socket)		/* TRACE_SOCKET */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#245: FILE: drivers/trace/tracer.c:129:
+	sizeof(trace_ipc)		/* TRACE_IPC */ ,
 	                 		                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#246: FILE: drivers/trace/tracer.c:130:
+	sizeof(trace_network)		/* TRACE_NETWORK */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#247: FILE: drivers/trace/tracer.c:131:
+	sizeof(trace_buffer_start)	/* TRACE_BUFFER_START */ ,
 	                          	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#248: FILE: drivers/trace/tracer.c:132:
+	0				/* TRACE_BUFFER_END */ ,
 	 				                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#249: FILE: drivers/trace/tracer.c:133:
+	sizeof(trace_new_event)		/* TRACE_NEW_EVENT */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#250: FILE: drivers/trace/tracer.c:134:
+	sizeof(trace_custom)		/* TRACE_CUSTOM */ ,
 	                    		                   ^

CHECK:CAMELCASE: Avoid CamelCase: <sTracerFileOps>
#255: FILE: drivers/trace/tracer.c:139:
+static struct file_operations sTracerFileOps =

WARNING:CONST_STRUCT: struct file_operations should normally be const
#255: FILE: drivers/trace/tracer.c:139:
+static struct file_operations sTracerFileOps =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#256: FILE: drivers/trace/tracer.c:140:
+static struct file_operations sTracerFileOps =
+{

WARNING:INDENTED_LABEL: labels should not be indented
#257: FILE: drivers/trace/tracer.c:141:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#258: FILE: drivers/trace/tracer.c:142:
+	ioctl:		tracer_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#258: FILE: drivers/trace/tracer.c:142:
+	ioctl:		tracer_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#259: FILE: drivers/trace/tracer.c:143:
+	mmap:		tracer_mmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#259: FILE: drivers/trace/tracer.c:143:
+	mmap:		tracer_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#260: FILE: drivers/trace/tracer.c:144:
+	open:		tracer_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#260: FILE: drivers/trace/tracer.c:144:
+	open:		tracer_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#261: FILE: drivers/trace/tracer.c:145:
+	release:	tracer_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#261: FILE: drivers/trace/tracer.c:145:
+	release:	tracer_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#262: FILE: drivers/trace/tracer.c:146:
+	fsync:		tracer_fsync,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#262: FILE: drivers/trace/tracer.c:146:
+	fsync:		tracer_fsync,

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#265: FILE: drivers/trace/tracer.c:149:
+/************************************************************************************************************/

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#266: FILE: drivers/trace/tracer.c:150:
+/************************************** Code inspired from BTTV driver **************************************/

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#267: FILE: drivers/trace/tracer.c:151:
+/************************************************************************************************************/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: drivers/trace/tracer.c:152:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE		/* This inspired by rtai/shmem */

CHECK:SPACING: No space is necessary after a cast
#278: FILE: drivers/trace/tracer.c:162:
+	kva = (unsigned long) page_address(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#294: FILE: drivers/trace/tracer.c:178:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#296: FILE: drivers/trace/tracer.c:180:
+		mem_map_reserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#311: FILE: drivers/trace/tracer.c:195:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/trace/tracer.c:196:
+	while ((long) size > 0) {

CHECK:SPACING: No space is necessary after a cast
#313: FILE: drivers/trace/tracer.c:197:
+		mem_map_unreserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#325: FILE: drivers/trace/tracer.c:209:
+	unsigned long start = (unsigned long) adr;

CHECK:SPACING: No space is necessary after a cast
#328: FILE: drivers/trace/tracer.c:212:
+	pos = (unsigned long) start_pos;

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#339: FILE: drivers/trace/tracer.c:223:
+/************************************************************************************************************/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#339: FILE: drivers/trace/tracer.c:223:
+}
+/************************************************************************************************************/

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#340: FILE: drivers/trace/tracer.c:224:
+/************************************************************************************************************/

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#341: FILE: drivers/trace/tracer.c:225:
+/************************************************************************************************************/

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#347: FILE: drivers/trace/tracer.c:231:
+ *     begining the buffer write position.
        ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#349: FILE: drivers/trace/tracer.c:233:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#349: FILE: drivers/trace/tracer.c:233:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#349: FILE: drivers/trace/tracer.c:233:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: drivers/trace/tracer.c:234:
+do\
+{\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: drivers/trace/tracer.c:236:
+   memcpy(DEST, SRC, SIZE);\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: drivers/trace/tracer.c:237:
+   DEST += SIZE;\$

ERROR:SPACING: space required before the open parenthesis '('
#354: FILE: drivers/trace/tracer.c:238:
+} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: drivers/trace/tracer.c:246:
+ * Return values : $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: drivers/trace/tracer.c:253:
+ *     be called from an interrupt handling routine and from $

CHECK:CAMELCASE: Avoid CamelCase: <pmEventID>
#372: FILE: drivers/trace/tracer.c:256:
+int trace(u8 pmEventID,

CHECK:CAMELCASE: Avoid CamelCase: <pmEventStruct>
#373: FILE: drivers/trace/tracer.c:257:
+	  void *pmEventStruct)

CHECK:CAMELCASE: Avoid CamelCase: <lVarDataLen>
#375: FILE: drivers/trace/tracer.c:259:
+	int lVarDataLen = 0;		/* Length of variable length data to be copied, if any */

WARNING:TYPO_SPELLING: 'Begining' may be misspelled - perhaps 'Beginning'?
#376: FILE: drivers/trace/tracer.c:260:
+	void *lVarDataBeg = NULL;	/* Begining of variable length data to be copied */
 	                         	   ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lVarDataBeg>
#376: FILE: drivers/trace/tracer.c:260:
+	void *lVarDataBeg = NULL;	/* Begining of variable length data to be copied */

CHECK:CAMELCASE: Avoid CamelCase: <lSendSignal>
#377: FILE: drivers/trace/tracer.c:261:
+	int lSendSignal = FALSE;	/* Should the daemon be summoned */

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#378: FILE: drivers/trace/tracer.c:262:
+	u8 lCPUID;			/* CPUID of currently runing process */
 	          			                      ^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lCPUID>
#378: FILE: drivers/trace/tracer.c:262:
+	u8 lCPUID;			/* CPUID of currently runing process */

CHECK:CAMELCASE: Avoid CamelCase: <lDataSize>
#379: FILE: drivers/trace/tracer.c:263:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#379: FILE: drivers/trace/tracer.c:263:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:CAMELCASE: Avoid CamelCase: <lSigInfo>
#380: FILE: drivers/trace/tracer.c:264:
+	struct siginfo lSigInfo;	/* Signal information */

CHECK:CAMELCASE: Avoid CamelCase: <lTime>
#381: FILE: drivers/trace/tracer.c:265:
+	struct timeval lTime;		/* Event time */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#382: FILE: drivers/trace/tracer.c:266:
+	unsigned long int lFlags;	/* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lFlags>
#382: FILE: drivers/trace/tracer.c:266:
+	unsigned long int lFlags;	/* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lTimeDelta>
#383: FILE: drivers/trace/tracer.c:267:
+	trace_time_delta lTimeDelta;	/* The time elapsed between now and the last event */

CHECK:CAMELCASE: Avoid CamelCase: <pIncomingProcess>
#384: FILE: drivers/trace/tracer.c:268:
+	struct task_struct *pIncomingProcess = NULL;	/* Pointer to incoming process */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sDaemonTaskStruct"
#387: FILE: drivers/trace/tracer.c:271:
+	if (sDaemonTaskStruct == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_PROCESS'
#391: FILE: drivers/trace/tracer.c:275:
+	if ((pmEventID == TRACE_EV_PROCESS) &&
+	    (pmEventStruct != NULL) &&
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventStruct != NULL'
#391: FILE: drivers/trace/tracer.c:275:
+	if ((pmEventID == TRACE_EV_PROCESS) &&
+	    (pmEventStruct != NULL) &&
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pmEventStruct"
#392: FILE: drivers/trace/tracer.c:276:
+	    (pmEventStruct != NULL) &&

CHECK:SPACING: No space is necessary after a cast
#393: FILE: drivers/trace/tracer.c:277:
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#397: FILE: drivers/trace/tracer.c:281:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracerStarted == TRUE'
#397: FILE: drivers/trace/tracer.c:281:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_START'
#397: FILE: drivers/trace/tracer.c:281:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_BUFFER_START'
#397: FILE: drivers/trace/tracer.c:281:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#397: FILE: drivers/trace/tracer.c:281:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <TraceEvent>
#398: FILE: drivers/trace/tracer.c:282:
+		goto TraceEvent;

WARNING:INDENTED_LABEL: labels should not be indented
#402: FILE: drivers/trace/tracer.c:286:
+      TraceEvent:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#409: FILE: drivers/trace/tracer.c:293:
+	if ((pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#409: FILE: drivers/trace/tracer.c:293:
+	if ((pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#413: FILE: drivers/trace/tracer.c:297:
+			pIncomingProcess = (struct task_struct *) (((trace_schedchange *) pmEventStruct)->in);

CHECK:SPACING: No space is necessary after a cast
#413: FILE: drivers/trace/tracer.c:297:
+			pIncomingProcess = (struct task_struct *) (((trace_schedchange *) pmEventStruct)->in);

CHECK:SPACING: No space is necessary after a cast
#416: FILE: drivers/trace/tracer.c:300:
+			(((trace_schedchange *) pmEventStruct)->in) = pIncomingProcess->pid;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPID == TRUE'
#419: FILE: drivers/trace/tracer.c:303:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != sTracedPID'
#419: FILE: drivers/trace/tracer.c:303:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#419: FILE: drivers/trace/tracer.c:303:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#420: FILE: drivers/trace/tracer.c:304:
+			/* Record this event if it is the scheduling change bringing in the traced PID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#421: FILE: drivers/trace/tracer.c:305:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPGRP == TRUE'
#427: FILE: drivers/trace/tracer.c:311:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pgrp != sTracedPGRP'
#427: FILE: drivers/trace/tracer.c:311:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#427: FILE: drivers/trace/tracer.c:311:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#428: FILE: drivers/trace/tracer.c:312:
+			/* Record this event if it is the scheduling change bringing in a process of the traced PGRP */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#429: FILE: drivers/trace/tracer.c:313:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingGID == TRUE'
#435: FILE: drivers/trace/tracer.c:319:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->egid != sTracedGID'
#435: FILE: drivers/trace/tracer.c:319:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#435: FILE: drivers/trace/tracer.c:319:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#436: FILE: drivers/trace/tracer.c:320:
+			/* Record this event if it is the scheduling change bringing in a process of the traced GID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#437: FILE: drivers/trace/tracer.c:321:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingUID == TRUE'
#443: FILE: drivers/trace/tracer.c:327:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != sTracedUID'
#443: FILE: drivers/trace/tracer.c:327:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#443: FILE: drivers/trace/tracer.c:327:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#444: FILE: drivers/trace/tracer.c:328:
+			/* Record this event if it is the scheduling change bringing in a process of the traced UID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#445: FILE: drivers/trace/tracer.c:329:
+			if (pIncomingProcess == NULL)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#463: FILE: drivers/trace/tracer.c:347:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)

CHECK:SPACING: No space is necessary after a cast
#463: FILE: drivers/trace/tracer.c:347:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#464: FILE: drivers/trace/tracer.c:348:
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#464: FILE: drivers/trace/tracer.c:348:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/trace/tracer.c:348:
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#465: FILE: drivers/trace/tracer.c:349:
+				/* Remember the string's begining and update size variables */
 				                         ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#466: FILE: drivers/trace/tracer.c:350:
+				lVarDataBeg = ((trace_file_system *) pmEventStruct)->file_name;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#467: FILE: drivers/trace/tracer.c:351:
+				lVarDataLen = ((trace_file_system *) pmEventStruct)->event_data2 + 1;

CHECK:SPACING: No space is necessary after a cast
#467: FILE: drivers/trace/tracer.c:351:
+				lVarDataLen = ((trace_file_system *) pmEventStruct)->event_data2 + 1;

CHECK:SPACING: No space is necessary after a cast
#468: FILE: drivers/trace/tracer.c:352:
+				lDataSize += (uint16_t) lVarDataLen;

CHECK:SPACING: No space is necessary after a cast
#474: FILE: drivers/trace/tracer.c:358:
+			lVarDataBeg = ((trace_custom *) pmEventStruct)->data;

CHECK:SPACING: No space is necessary after a cast
#475: FILE: drivers/trace/tracer.c:359:
+			lVarDataLen = ((trace_custom *) pmEventStruct)->data_size;

CHECK:SPACING: No space is necessary after a cast
#476: FILE: drivers/trace/tracer.c:360:
+			lDataSize += (uint16_t) lVarDataLen;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#481: FILE: drivers/trace/tracer.c:365:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLogCPUID == TRUE'
#481: FILE: drivers/trace/tracer.c:365:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#481: FILE: drivers/trace/tracer.c:365:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#481: FILE: drivers/trace/tracer.c:365:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#481: FILE: drivers/trace/tracer.c:365:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#492: FILE: drivers/trace/tracer.c:376:
+	/* The following time calculations have to be done within the spinlock because
+	   otherwise the event order could be inverted. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: drivers/trace/tracer.c:376:
+	   otherwise the event order could be inverted. */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#497: FILE: drivers/trace/tracer.c:381:
+	/* Compute the time delta between this event and the time at which this buffer was started */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#504: FILE: drivers/trace/tracer.c:388:
+		if (sSignalSent == TRUE) {

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#518: FILE: drivers/trace/tracer.c:402:
+		/* Recompute the time delta since sBufferStartTime has changed because of the buffer change */

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#523: FILE: drivers/trace/tracer.c:407:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLogCPUID == TRUE'
#523: FILE: drivers/trace/tracer.c:407:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#523: FILE: drivers/trace/tracer.c:407:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#523: FILE: drivers/trace/tracer.c:407:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#523: FILE: drivers/trace/tracer.c:407:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#557: FILE: drivers/trace/tracer.c:441:
+	if (lSendSignal == TRUE) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#570: FILE: drivers/trace/tracer.c:454:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: drivers/trace/tracer.c:455:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#571: FILE: drivers/trace/tracer.c:455:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

CHECK:BRACES: Unbalanced braces around else statement
#576: FILE: drivers/trace/tracer.c:460:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <pmTime>
#596: FILE: drivers/trace/tracer.c:480:
+void tracer_switch_buffers(struct timeval pmTime)

CHECK:CAMELCASE: Avoid CamelCase: <lTempBuf>
#598: FILE: drivers/trace/tracer.c:482:
+	char *lTempBuf;			/* Temporary buffer pointer */

CHECK:CAMELCASE: Avoid CamelCase: <lTempBufEnd>
#599: FILE: drivers/trace/tracer.c:483:
+	char *lTempBufEnd;		/* Temporary buffer end pointer */

CHECK:CAMELCASE: Avoid CamelCase: <lInitWritPos>
#600: FILE: drivers/trace/tracer.c:484:
+	char *lInitWritPos;		/* Initial write position */

CHECK:CAMELCASE: Avoid CamelCase: <lEventID>
#601: FILE: drivers/trace/tracer.c:485:
+	u8 lEventID;			/* Event ID of last event */

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#602: FILE: drivers/trace/tracer.c:486:
+	u8 lCPUID;			/* CPUID of currently runing process */
 	          			                      ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#603: FILE: drivers/trace/tracer.c:487:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:CAMELCASE: Avoid CamelCase: <lSizeLost>
#604: FILE: drivers/trace/tracer.c:488:
+	u32 lSizeLost;			/* Size delta between last event and end of buffer */

CHECK:CAMELCASE: Avoid CamelCase: <lStartBufferEvent>
#606: FILE: drivers/trace/tracer.c:490:
+	trace_buffer_start lStartBufferEvent;	/* Start of the new buffer event */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#614: FILE: drivers/trace/tracer.c:498:
+	if (sLogCPUID == TRUE) {

CHECK:SPACING: No space is necessary after a cast
#636: FILE: drivers/trace/tracer.c:520:
+	*((u32 *) (sWritBufEnd - sizeof(lSizeLost))) = lSizeLost;

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#660: FILE: drivers/trace/tracer.c:544:
+	/* Set the time of begining of this buffer */
 	                   ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Time>
#665: FILE: drivers/trace/tracer.c:549:
+	lStartBufferEvent.Time = pmTime;

WARNING:TYPO_SPELLING: 'thes' may be misspelled - perhaps 'this'?
#715: FILE: drivers/trace/tracer.c:599:
+ *     that it's the server that make thes ioctl.
                                       ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <pmInode>
#717: FILE: drivers/trace/tracer.c:601:
+int tracer_ioctl(struct inode *pmInode,

CHECK:CAMELCASE: Avoid CamelCase: <pmFile>
#718: FILE: drivers/trace/tracer.c:602:
+		 struct file *pmFile,

CHECK:CAMELCASE: Avoid CamelCase: <pmCmd>
#719: FILE: drivers/trace/tracer.c:603:
+		 unsigned int pmCmd,

CHECK:CAMELCASE: Avoid CamelCase: <pmArg>
#720: FILE: drivers/trace/tracer.c:604:
+		 unsigned long pmArg)

CHECK:CAMELCASE: Avoid CamelCase: <lRetValue>
#722: FILE: drivers/trace/tracer.c:606:
+	int lRetValue;			/* Function return value */

CHECK:CAMELCASE: Avoid CamelCase: <lDevMinor>
#723: FILE: drivers/trace/tracer.c:607:
+	int lDevMinor;			/* Device minor number */

CHECK:CAMELCASE: Avoid CamelCase: <lNewUserEventID>
#724: FILE: drivers/trace/tracer.c:608:
+	int lNewUserEventID;		/* ID of newly created user event */

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#725: FILE: drivers/trace/tracer.c:609:
+	trace_start lStartEvent;	/* Event marking the begining of the trace */
 	                        	                     ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lStartEvent>
#725: FILE: drivers/trace/tracer.c:609:
+	trace_start lStartEvent;	/* Event marking the begining of the trace */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#726: FILE: drivers/trace/tracer.c:610:
+	unsigned long int lFlags;	/* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lUserEvent>
#727: FILE: drivers/trace/tracer.c:611:
+	trace_custom lUserEvent;	/* The user event to be logged */

CHECK:CAMELCASE: Avoid CamelCase: <lTraceMask>
#728: FILE: drivers/trace/tracer.c:612:
+	trace_change_mask lTraceMask;	/* Event mask */

CHECK:CAMELCASE: Avoid CamelCase: <lNewUserEvent>
#729: FILE: drivers/trace/tracer.c:613:
+	trace_new_event lNewUserEvent;	/* The event to be created for the user */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#732: FILE: drivers/trace/tracer.c:616:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#733: FILE: drivers/trace/tracer.c:617:
+	printk("Tracer: Command %d \n", pmCmd);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#733: FILE: drivers/trace/tracer.c:617:
+	printk("Tracer: Command %d \n", pmCmd);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor == 0'
#740: FILE: drivers/trace/tracer.c:624:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracerStarted == TRUE'
#740: FILE: drivers/trace/tracer.c:624:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_STOP'
#740: FILE: drivers/trace/tracer.c:624:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_DATA_COMITTED'
#740: FILE: drivers/trace/tracer.c:624:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#741: FILE: drivers/trace/tracer.c:625:
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#741: FILE: drivers/trace/tracer.c:625:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#741: FILE: drivers/trace/tracer.c:625:
+	    && (sTracerStarted == TRUE) && (pmCmd != TRACER_STOP) && (pmCmd != TRACER_DATA_COMITTED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor == 1'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_CREATE_USER_EVENT'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_DESTROY_USER_EVENT'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_TRACE_USER_EVENT'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_SET_EVENT_MASK'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_GET_EVENT_MASK'
#745: FILE: drivers/trace/tracer.c:629:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#746: FILE: drivers/trace/tracer.c:630:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#747: FILE: drivers/trace/tracer.c:631:
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#748: FILE: drivers/trace/tracer.c:632:
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#749: FILE: drivers/trace/tracer.c:633:
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#750: FILE: drivers/trace/tracer.c:634:
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#751: FILE: drivers/trace/tracer.c:635:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUseSyscallEIPBounds == TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sSyscallEIPDepthSet == TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUseSyscallEIPBounds == TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLowerEIPBoundSet != TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUpperEIPBoundSet != TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPID == TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPGRP == TRUE'
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#758: FILE: drivers/trace/tracer.c:642:
+		if (((sUseSyscallEIPBounds == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#759: FILE: drivers/trace/tracer.c:643:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#759: FILE: drivers/trace/tracer.c:643:
+		     && (sSyscallEIPDepthSet == TRUE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#760: FILE: drivers/trace/tracer.c:644:
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#760: FILE: drivers/trace/tracer.c:644:
+		    || ((sUseSyscallEIPBounds == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#761: FILE: drivers/trace/tracer.c:645:
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#761: FILE: drivers/trace/tracer.c:645:
+			&& ((sLowerEIPBoundSet != TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#762: FILE: drivers/trace/tracer.c:646:
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#762: FILE: drivers/trace/tracer.c:646:
+			    || (sUpperEIPBoundSet != TRUE)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#763: FILE: drivers/trace/tracer.c:647:
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#763: FILE: drivers/trace/tracer.c:647:
+		    || ((sTracingPID == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#764: FILE: drivers/trace/tracer.c:648:
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#764: FILE: drivers/trace/tracer.c:648:
+			&& (sTracingPGRP == TRUE)))

CHECK:CAMELCASE: Avoid CamelCase: <MagicNumber>
#792: FILE: drivers/trace/tracer.c:676:
+		lStartEvent.MagicNumber = TRACER_MAGIC_NUMBER;

WARNING:TYPO_SPELLING: 'ArchType' may be misspelled - perhaps 'Archetype'?
#793: FILE: drivers/trace/tracer.c:677:
+		lStartEvent.ArchType = TRACE_ARCH_TYPE;
 		            ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <ArchType>
#793: FILE: drivers/trace/tracer.c:677:
+		lStartEvent.ArchType = TRACE_ARCH_TYPE;

CHECK:CAMELCASE: Avoid CamelCase: <ArchVariant>
#794: FILE: drivers/trace/tracer.c:678:
+		lStartEvent.ArchVariant = TRACE_ARCH_VARIANT;

CHECK:CAMELCASE: Avoid CamelCase: <SystemType>
#795: FILE: drivers/trace/tracer.c:679:
+		lStartEvent.SystemType = TRACE_SYS_TYPE_VANILLA_LINUX;

CHECK:CAMELCASE: Avoid CamelCase: <MajorVersion>
#796: FILE: drivers/trace/tracer.c:680:
+		lStartEvent.MajorVersion = TRACER_VERSION_MAJOR;

CHECK:CAMELCASE: Avoid CamelCase: <MinorVersion>
#797: FILE: drivers/trace/tracer.c:681:
+		lStartEvent.MinorVersion = TRACER_VERSION_MINOR;

CHECK:CAMELCASE: Avoid CamelCase: <BufferSize>
#798: FILE: drivers/trace/tracer.c:682:
+		lStartEvent.BufferSize = sBufSize;

CHECK:CAMELCASE: Avoid CamelCase: <EventMask>
#799: FILE: drivers/trace/tracer.c:683:
+		lStartEvent.EventMask = sTracedEvents;

CHECK:CAMELCASE: Avoid CamelCase: <DetailsMask>
#800: FILE: drivers/trace/tracer.c:684:
+		lStartEvent.DetailsMask = sLogEventDetailsMask;

CHECK:CAMELCASE: Avoid CamelCase: <LogCPUID>
#801: FILE: drivers/trace/tracer.c:685:
+		lStartEvent.LogCPUID = sLogCPUID;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#830: FILE: drivers/trace/tracer.c:714:
+		/* Acquire the lock to avoid SMP case of where another CPU is writing a trace
+		   while buffer is being switched */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#830: FILE: drivers/trace/tracer.c:714:
+		   while buffer is being switched */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#833: FILE: drivers/trace/tracer.c:717:
+		/* Switch the buffers to ensure that the end of the buffer mark is set (time isn't important) */

WARNING:TYPO_SPELLING: 'reasonnable' may be misspelled - perhaps 'reasonable'?
#847: FILE: drivers/trace/tracer.c:731:
+		/* Is the given size "reasonnable" */
 		                      ^^^^^^^^^^^

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#853: FILE: drivers/trace/tracer.c:737:
+		return tracer_set_buffer_size(pmArg);
+		break;

CHECK:SPACING: No space is necessary after a cast
#857: FILE: drivers/trace/tracer.c:741:
+		if (copy_from_user(&sTracedEvents, (void *) pmArg, sizeof(sTracedEvents)))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#863: FILE: drivers/trace/tracer.c:747:
+		if (copy_from_user(&sLogEventDetailsMask, (void *) pmArg, sizeof(sLogEventDetailsMask)))

CHECK:SPACING: No space is necessary after a cast
#863: FILE: drivers/trace/tracer.c:747:
+		if (copy_from_user(&sLogEventDetailsMask, (void *) pmArg, sizeof(sLogEventDetailsMask)))

CHECK:SPACING: No space is necessary after a cast
#908: FILE: drivers/trace/tracer.c:792:
+		sLowerEIPBound = (void *) pmArg;

CHECK:SPACING: No space is necessary after a cast
#920: FILE: drivers/trace/tracer.c:804:
+		sUpperEIPBound = (void *) pmArg;

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#926: FILE: drivers/trace/tracer.c:810:
+	/* The daemon has comitted the last trace */
 	                  ^^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#928: FILE: drivers/trace/tracer.c:812:
+#if 0

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#929: FILE: drivers/trace/tracer.c:813:
+		printk("Tracer: Data has been comitted \n");
 		                              ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#929: FILE: drivers/trace/tracer.c:813:
+		printk("Tracer: Data has been comitted \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#929: FILE: drivers/trace/tracer.c:813:
+		printk("Tracer: Data has been comitted \n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#941: FILE: drivers/trace/tracer.c:825:
+		return sEventsLost;
+		break;

CHECK:SPACING: No space is necessary after a cast
#946: FILE: drivers/trace/tracer.c:830:
+		if (copy_from_user(&lNewUserEvent, (void *) pmArg, sizeof(lNewUserEvent)))

WARNING:TYPO_SPELLING: 'succeded' may be misspelled - perhaps 'succeeded'?
#956: FILE: drivers/trace/tracer.c:840:
+		/* Has the operation succeded */
 		                     ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#962: FILE: drivers/trace/tracer.c:846:
+			if (copy_to_user((void *) pmArg, &lNewUserEvent, sizeof(lNewUserEvent))) {

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#963: FILE: drivers/trace/tracer.c:847:
+				/* Since we were unable to tell the user about the event, destroy it */

CHECK:BRACES: Unbalanced braces around else statement
#967: FILE: drivers/trace/tracer.c:851:
+		} else

CHECK:SPACING: No space is necessary after a cast
#975: FILE: drivers/trace/tracer.c:859:
+		trace_destroy_event((int) pmArg);

CHECK:SPACING: No space is necessary after a cast
#981: FILE: drivers/trace/tracer.c:865:
+		if (copy_from_user(&lUserEvent, (void *) pmArg, sizeof(lUserEvent)))

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: drivers/trace/tracer.c:886:
+		if (copy_from_user(&(lTraceMask.mask), (void *) pmArg, sizeof(lTraceMask.mask)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lTraceMask.mask
#1002: FILE: drivers/trace/tracer.c:886:
+		if (copy_from_user(&(lTraceMask.mask), (void *) pmArg, sizeof(lTraceMask.mask)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1009: FILE: drivers/trace/tracer.c:893:
+		/* Change the event mask. (This has to be done second or else may loose the
+		   information if the user decides to stop logging "change mask" events) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1009: FILE: drivers/trace/tracer.c:893:
+		   information if the user decides to stop logging "change mask" events) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lTraceMask.mask
#1010: FILE: drivers/trace/tracer.c:894:
+		memcpy(&sTracedEvents, &(lTraceMask.mask), sizeof(lTraceMask.mask));

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1021: FILE: drivers/trace/tracer.c:905:
+		return lRetValue;
+		break;

CHECK:SPACING: No space is necessary after a cast
#1026: FILE: drivers/trace/tracer.c:910:
+		if (copy_to_user((void *) pmArg, &sTracedEvents, sizeof(sTracedEvents)))

WARNING:TYPO_SPELLING: 'Unknow' may be misspelled - perhaps 'Unknown'?
#1030: FILE: drivers/trace/tracer.c:914:
+	/* Unknow command */
 	   ^^^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1032: FILE: drivers/trace/tracer.c:916:
+		return -ENOSYS;

CHECK:CAMELCASE: Avoid CamelCase: <pmVmArea>
#1051: FILE: drivers/trace/tracer.c:935:
+		struct vm_area_struct *pmVmArea)

CHECK:SPACING: No space is necessary after a cast
#1061: FILE: drivers/trace/tracer.c:945:
+				       (char *) pmVmArea->vm_start,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1065: FILE: drivers/trace/tracer.c:949:
+#if 0

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1066: FILE: drivers/trace/tracer.c:950:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

CHECK:SPACING: No space is necessary after a cast
#1066: FILE: drivers/trace/tracer.c:950:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1066: FILE: drivers/trace/tracer.c:950:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1066: FILE: drivers/trace/tracer.c:950:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1067: FILE: drivers/trace/tracer.c:951:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

CHECK:SPACING: No space is necessary after a cast
#1067: FILE: drivers/trace/tracer.c:951:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1067: FILE: drivers/trace/tracer.c:951:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1067: FILE: drivers/trace/tracer.c:951:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1068: FILE: drivers/trace/tracer.c:952:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

CHECK:SPACING: No space is necessary after a cast
#1068: FILE: drivers/trace/tracer.c:952:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1068: FILE: drivers/trace/tracer.c:952:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1068: FILE: drivers/trace/tracer.c:952:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#1069: FILE: drivers/trace/tracer.c:953:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

CHECK:SPACING: No space is necessary after a cast
#1069: FILE: drivers/trace/tracer.c:953:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1069: FILE: drivers/trace/tracer.c:953:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1069: FILE: drivers/trace/tracer.c:953:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: drivers/trace/tracer.c:962:
+ * Parameters : $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor > 0'
#1092: FILE: drivers/trace/tracer.c:976:
+	if ((lDevMinor > 0) && (lDevMinor != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor != 1'
#1092: FILE: drivers/trace/tracer.c:976:
+	if ((lDevMinor > 0) && (lDevMinor != 1))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1100: FILE: drivers/trace/tracer.c:984:
+			return -EBUSY;
+		else

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#1101: FILE: drivers/trace/tracer.c:985:
+			/* Only increment use, this is just another user process trying to log user events */

CHECK:CAMELCASE: Avoid CamelCase: <IncrementUse>
#1102: FILE: drivers/trace/tracer.c:986:
+			goto IncrementUse;

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1107: FILE: drivers/trace/tracer.c:991:
+	/* Reset the default configuration since this is the daemon and he will complete the setup */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1110: FILE: drivers/trace/tracer.c:994:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1112: FILE: drivers/trace/tracer.c:996:
+	printk("<1>Process %d opened the tracing device \n", sDaemonTaskStruct->pid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1112: FILE: drivers/trace/tracer.c:996:
+	printk("<1>Process %d opened the tracing device \n", sDaemonTaskStruct->pid);

WARNING:INDENTED_LABEL: labels should not be indented
#1115: FILE: drivers/trace/tracer.c:999:
+      IncrementUse:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1133: FILE: drivers/trace/tracer.c:1017:
+ * Return values : $

CHECK:CAMELCASE: Avoid CamelCase: <DecrementUse>
#1147: FILE: drivers/trace/tracer.c:1031:
+		goto DecrementUse;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1151: FILE: drivers/trace/tracer.c:1035:
+		printk(KERN_ALERT "Tracer: Lost %d events \n", sEventsLost);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1151: FILE: drivers/trace/tracer.c:1035:
+		printk(KERN_ALERT "Tracer: Lost %d events \n", sEventsLost);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#1157: FILE: drivers/trace/tracer.c:1041:
+	if (sTracBuf != NULL)

WARNING:INDENTED_LABEL: labels should not be indented
#1182: FILE: drivers/trace/tracer.c:1066:
+      DecrementUse:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: drivers/trace/tracer.c:1084:
+ * Return values : $

WARNING:TYPO_SPELLING: 'toi' may be misspelled - perhaps 'to'?
#1206: FILE: drivers/trace/tracer.c:1090:
+ * Sonia : ne m oublie pas, je suis toujours a toi....
                                                ^^^

CHECK:CAMELCASE: Avoid CamelCase: <pmDEntry>
#1209: FILE: drivers/trace/tracer.c:1093:
+		 struct dentry *pmDEntry,

CHECK:CAMELCASE: Avoid CamelCase: <pmDataSync>
#1210: FILE: drivers/trace/tracer.c:1094:
+		 int pmDataSync)

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1212: FILE: drivers/trace/tracer.c:1096:
+	unsigned long int lFlags;

CHECK:CAMELCASE: Avoid CamelCase: <pmSize>
#1251: FILE: drivers/trace/tracer.c:1135:
+int tracer_set_buffer_size(int pmSize)

CHECK:CAMELCASE: Avoid CamelCase: <lSizeAlloc>
#1253: FILE: drivers/trace/tracer.c:1137:
+	int lSizeAlloc;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#1259: FILE: drivers/trace/tracer.c:1143:
+	if (sTracBuf != NULL)

CHECK:SPACING: No space is necessary after a cast
#1263: FILE: drivers/trace/tracer.c:1147:
+	if ((sTracBuf = (char *) rvmalloc(lSizeAlloc)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1263: FILE: drivers/trace/tracer.c:1147:
+	if ((sTracBuf = (char *) rvmalloc(lSizeAlloc)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <lError>
#1302: FILE: drivers/trace/tracer.c:1186:
+	int lError = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1350: FILE: drivers/trace/tracer.c:1234:
+ * Return values : $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1360: FILE: drivers/trace/tracer.c:1244:
+	if ((lError = tracer_set_default_config()) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1384: FILE: drivers/trace/tracer.c:1268:
+	if ((sUserEventData = vmalloc(CUSTOM_EVENT_MAX_SIZE)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1394: FILE: drivers/trace/tracer.c:1278:
+	if ((lError = register_tracer(trace)) < 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1394: FILE: drivers/trace/tracer.c:1278:
+	if ((lError = register_tracer(trace)) < 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1396: FILE: drivers/trace/tracer.c:1280:
+		printk(KERN_ALERT "Tracer: Unable to register tracer with kernel, tracer disabled \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1396: FILE: drivers/trace/tracer.c:1280:
+		printk(KERN_ALERT "Tracer: Unable to register tracer with kernel, tracer disabled \n");

CHECK:BRACES: Unbalanced braces around else statement
#1400: FILE: drivers/trace/tracer.c:1284:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1401: FILE: drivers/trace/tracer.c:1285:
+		printk(KERN_INFO "Tracer: Initialization complete \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1401: FILE: drivers/trace/tracer.c:1285:
+		printk(KERN_INFO "Tracer: Initialization complete \n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1414: FILE: drivers/trace/tracer.c:1298:
+ *        rule out any possibility of getting more trace $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#1428: FILE: drivers/trace/tracer.c:1312:
+	if (sTracBuf != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1442: FILE: drivers/trace/tracer.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1443: FILE: drivers/trace/tracer.h:2:
+ * drivers/trace/tracer.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1463: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1463: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1463: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1485: FILE: drivers/trace/tracer.h:44:
+#define TRACER_MAGIC_NUMBER     0x00D6B7ED	/* That day marks an important historical event ... */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1488: FILE: drivers/trace/tracer.h:47:
+typedef struct _trace_start {

WARNING:TYPO_SPELLING: 'ArchType' may be misspelled - perhaps 'Archetype'?
#1490: FILE: drivers/trace/tracer.h:49:
+	u32 ArchType;		/* Type of architecture */
 	    ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1503: FILE: drivers/trace/tracer.h:62:
+typedef struct _trace_buffer_start {

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#1509: FILE: drivers/trace/tracer.h:68:
+#define TRACER_START                      TRACER_MAGIC_NUMBER + 0	/* Start tracing events using the current configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1509: FILE: drivers/trace/tracer.h:68:
+#define TRACER_START                      TRACER_MAGIC_NUMBER + 0	/* Start tracing events using the current configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1510: FILE: drivers/trace/tracer.h:69:
+#define TRACER_STOP                       TRACER_MAGIC_NUMBER + 1	/* Stop tracing */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1511: FILE: drivers/trace/tracer.h:70:
+#define TRACER_CONFIG_DEFAULT             TRACER_MAGIC_NUMBER + 2	/* Set the tracer to the default configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1511: FILE: drivers/trace/tracer.h:70:
+#define TRACER_CONFIG_DEFAULT             TRACER_MAGIC_NUMBER + 2	/* Set the tracer to the default configuration */

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#1512: FILE: drivers/trace/tracer.h:71:
+#define TRACER_CONFIG_MEMORY_BUFFERS      TRACER_MAGIC_NUMBER + 3	/* Set the memory buffers the daemon wants us to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1512: FILE: drivers/trace/tracer.h:71:
+#define TRACER_CONFIG_MEMORY_BUFFERS      TRACER_MAGIC_NUMBER + 3	/* Set the memory buffers the daemon wants us to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1513: FILE: drivers/trace/tracer.h:72:
+#define TRACER_CONFIG_EVENTS              TRACER_MAGIC_NUMBER + 4	/* Trace the given events */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#1514: FILE: drivers/trace/tracer.h:73:
+#define TRACER_CONFIG_DETAILS             TRACER_MAGIC_NUMBER + 5	/* Record the details of the event, or not */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1514: FILE: drivers/trace/tracer.h:73:
+#define TRACER_CONFIG_DETAILS             TRACER_MAGIC_NUMBER + 5	/* Record the details of the event, or not */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#1515: FILE: drivers/trace/tracer.h:74:
+#define TRACER_CONFIG_CPUID               TRACER_MAGIC_NUMBER + 6	/* Record the CPUID associated with the event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1515: FILE: drivers/trace/tracer.h:74:
+#define TRACER_CONFIG_CPUID               TRACER_MAGIC_NUMBER + 6	/* Record the CPUID associated with the event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1516: FILE: drivers/trace/tracer.h:75:
+#define TRACER_CONFIG_PID                 TRACER_MAGIC_NUMBER + 7	/* Trace only one process */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1517: FILE: drivers/trace/tracer.h:76:
+#define TRACER_CONFIG_PGRP                TRACER_MAGIC_NUMBER + 8	/* Trace only the given process group */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1517: FILE: drivers/trace/tracer.h:76:
+#define TRACER_CONFIG_PGRP                TRACER_MAGIC_NUMBER + 8	/* Trace only the given process group */

WARNING:LONG_LINE_COMMENT: line length of 123 exceeds 100 columns
#1518: FILE: drivers/trace/tracer.h:77:
+#define TRACER_CONFIG_GID                 TRACER_MAGIC_NUMBER + 9	/* Trace the processes of a given group of users */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1518: FILE: drivers/trace/tracer.h:77:
+#define TRACER_CONFIG_GID                 TRACER_MAGIC_NUMBER + 9	/* Trace the processes of a given group of users */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#1519: FILE: drivers/trace/tracer.h:78:
+#define TRACER_CONFIG_UID                 TRACER_MAGIC_NUMBER + 10	/* Trace the processes of a given user */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1519: FILE: drivers/trace/tracer.h:78:
+#define TRACER_CONFIG_UID                 TRACER_MAGIC_NUMBER + 10	/* Trace the processes of a given user */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#1520: FILE: drivers/trace/tracer.h:79:
+#define TRACER_CONFIG_SYSCALL_EIP_DEPTH   TRACER_MAGIC_NUMBER + 11	/* Set the call depth at which the EIP should be fetched on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1520: FILE: drivers/trace/tracer.h:79:
+#define TRACER_CONFIG_SYSCALL_EIP_DEPTH   TRACER_MAGIC_NUMBER + 11	/* Set the call depth at which the EIP should be fetched on syscall */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#1521: FILE: drivers/trace/tracer.h:80:
+#define TRACER_CONFIG_SYSCALL_EIP_LOWER   TRACER_MAGIC_NUMBER + 12	/* Set the lowerbound address from which EIP is recorded on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1521: FILE: drivers/trace/tracer.h:80:
+#define TRACER_CONFIG_SYSCALL_EIP_LOWER   TRACER_MAGIC_NUMBER + 12	/* Set the lowerbound address from which EIP is recorded on syscall */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#1522: FILE: drivers/trace/tracer.h:81:
+#define TRACER_CONFIG_SYSCALL_EIP_UPPER   TRACER_MAGIC_NUMBER + 13	/* Set the upperbound address from which EIP is recorded on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1522: FILE: drivers/trace/tracer.h:81:
+#define TRACER_CONFIG_SYSCALL_EIP_UPPER   TRACER_MAGIC_NUMBER + 13	/* Set the upperbound address from which EIP is recorded on syscall */

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#1523: FILE: drivers/trace/tracer.h:82:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */
                                                                   	                  ^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1523: FILE: drivers/trace/tracer.h:82:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1523: FILE: drivers/trace/tracer.h:82:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1524: FILE: drivers/trace/tracer.h:83:
+#define TRACER_GET_EVENTS_LOST            TRACER_MAGIC_NUMBER + 15	/* Get the number of events lost */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1524: FILE: drivers/trace/tracer.h:83:
+#define TRACER_GET_EVENTS_LOST            TRACER_MAGIC_NUMBER + 15	/* Get the number of events lost */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1525: FILE: drivers/trace/tracer.h:84:
+#define TRACER_CREATE_USER_EVENT          TRACER_MAGIC_NUMBER + 16	/* Create a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1525: FILE: drivers/trace/tracer.h:84:
+#define TRACER_CREATE_USER_EVENT          TRACER_MAGIC_NUMBER + 16	/* Create a user tracable event */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1526: FILE: drivers/trace/tracer.h:85:
+#define TRACER_DESTROY_USER_EVENT         TRACER_MAGIC_NUMBER + 17	/* Destroy a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1526: FILE: drivers/trace/tracer.h:85:
+#define TRACER_DESTROY_USER_EVENT         TRACER_MAGIC_NUMBER + 17	/* Destroy a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1527: FILE: drivers/trace/tracer.h:86:
+#define TRACER_TRACE_USER_EVENT           TRACER_MAGIC_NUMBER + 18	/* Trace a user event */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1528: FILE: drivers/trace/tracer.h:87:
+#define TRACER_SET_EVENT_MASK             TRACER_MAGIC_NUMBER + 19	/* Set the trace event mask */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1528: FILE: drivers/trace/tracer.h:87:
+#define TRACER_SET_EVENT_MASK             TRACER_MAGIC_NUMBER + 19	/* Set the trace event mask */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1529: FILE: drivers/trace/tracer.h:88:
+#define TRACER_GET_EVENT_MASK             TRACER_MAGIC_NUMBER + 20	/* Get the trace event mask */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1529: FILE: drivers/trace/tracer.h:88:
+#define TRACER_GET_EVENT_MASK             TRACER_MAGIC_NUMBER + 20	/* Get the trace event mask */

WARNING:INLINE: plain inline is preferred over __inline__
#1531: FILE: drivers/trace/tracer.h:90:
+extern __inline__ int ltt_set_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1544: FILE: drivers/trace/tracer.h:103:
+extern __inline__ int ltt_clear_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1557: FILE: drivers/trace/tracer.h:116:
+extern __inline__ int ltt_test_bit(int nr, void *addr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1569: FILE: drivers/trace/tracer.h:128:
+ (u8,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1570: FILE: drivers/trace/tracer.h:129:
+  void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timeval' should also have an identifier name
#1571: FILE: drivers/trace/tracer.h:130:
+void tracer_switch_buffers

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1572: FILE: drivers/trace/tracer.h:131:
+ (struct timeval);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1573: FILE: drivers/trace/tracer.h:132:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1573: FILE: drivers/trace/tracer.h:132:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1573: FILE: drivers/trace/tracer.h:132:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1573: FILE: drivers/trace/tracer.h:132:
+int tracer_ioctl

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1574: FILE: drivers/trace/tracer.h:133:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1575: FILE: drivers/trace/tracer.h:134:
+  struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1576: FILE: drivers/trace/tracer.h:135:
+  unsigned int,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1577: FILE: drivers/trace/tracer.h:136:
+  unsigned long);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1578: FILE: drivers/trace/tracer.h:137:
+int tracer_mmap

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#1578: FILE: drivers/trace/tracer.h:137:
+int tracer_mmap

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1579: FILE: drivers/trace/tracer.h:138:
+ (struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1580: FILE: drivers/trace/tracer.h:139:
+  struct vm_area_struct *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1581: FILE: drivers/trace/tracer.h:140:
+int tracer_open

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1581: FILE: drivers/trace/tracer.h:140:
+int tracer_open

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1582: FILE: drivers/trace/tracer.h:141:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1583: FILE: drivers/trace/tracer.h:142:
+  struct file *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1584: FILE: drivers/trace/tracer.h:143:
+int tracer_release

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1584: FILE: drivers/trace/tracer.h:143:
+int tracer_release

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1585: FILE: drivers/trace/tracer.h:144:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1586: FILE: drivers/trace/tracer.h:145:
+  struct file *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1587: FILE: drivers/trace/tracer.h:146:
+int tracer_fsync

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1587: FILE: drivers/trace/tracer.h:146:
+int tracer_fsync

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1587: FILE: drivers/trace/tracer.h:146:
+int tracer_fsync

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1588: FILE: drivers/trace/tracer.h:147:
+ (struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1589: FILE: drivers/trace/tracer.h:148:
+  struct dentry *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: drivers/trace/tracer.h:149:
+  int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1593: FILE: drivers/trace/tracer.h:152:
+ (void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1596: FILE: drivers/trace/tracer.h:155:
+ (int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1598: FILE: drivers/trace/tracer.h:157:
+ (void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1600: FILE: drivers/trace/tracer.h:159:
+ (void);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434463.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 80 errors, 177 warnings, 221 checks, 1544 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434463.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
