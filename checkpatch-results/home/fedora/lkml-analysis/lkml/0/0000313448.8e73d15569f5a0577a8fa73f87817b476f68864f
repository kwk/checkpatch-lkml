WARNING:TYPO_SPELLING: 'explaination' may be misspelled - perhaps 'explanation'?
#66: 
contains some patch explaination and usage info.  This page hasn't
                    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: arch/i386/Kconfig:709:
+config MEMHOTPLUGTEST
+       bool "Memory hotplug test"
+       default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#114: FILE: arch/i386/mm/discontig.c:119:
+	printk("NUMA - single node, flat memory mode, but broken in several blocks\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: arch/i386/mm/discontig.c:125:
+		printk("Rounding down maxpfn %d -> %d\n", max_pfn, pfn);

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: arch/i386/mm/discontig.c:128:
+	for(i = 0; i < MAX_NUMNODES; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#127: FILE: arch/i386/mm/discontig.c:132:
+		if (pfn < max_pfn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: arch/i386/mm/discontig.c:134:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: arch/i386/mm/discontig.c:137:
+			printk("total %d blocks, max %d\n", i, max_pfn);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#138: FILE: arch/i386/mm/discontig.c:143:
+	/* Fill in the physnode_map with our simplistic memory model,
+	* all memory is in node 0.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#140: FILE: arch/i386/mm/discontig.c:145:
+	for (pfn = node_start_pfn[0]; pfn <= max_pfn;
+	       pfn += PAGES_PER_ELEMENT)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: arch/i386/mm/discontig.c:151:
+         /* Indicate there is one node available. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: arch/i386/mm/discontig.c:246:
+		memset(node_remap_start_vaddr[node], 0,
+		    node_remap_size[node] * PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/i386/mm/discontig.c:249:
+	kclist_add(&numa_kc, node_remap_start_vaddr[numnodes - 1],
+	    node_remap_offset[numnodes - 1] << PAGE_SHIFT);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/asm-i386/mmzone.h:132:
+extern int get_memcfg_numa_blks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: include/linux/mm.h:224:
+			printk("Page: %lx ", (long)p);			\

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: include/linux/mm.h:225:
+			for(i = 0; i < sizeof(struct page); i++)	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: include/linux/mm.h:226:
+				printk(" %02x", ((unsigned char *)p)[i]); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: include/linux/mm.h:227:
+			printk("\n");					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: include/linux/mm.h:228:
+			BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#280: FILE: include/linux/swap.h:186:
+int FASTCALL(try_to_unmap(struct page *, int));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#280: FILE: include/linux/swap.h:186:
+int FASTCALL(try_to_unmap(struct page *, int));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#395: FILE: mm/page_alloc.c:57:
+static char zone_active[MAX_NR_ZONES*MAX_NUMNODES];
                                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#438: FILE: mm/page_alloc.c:524:
+	if (page != NULL && ! zone_active[page->flags >> ZONE_SHIFT])
 	                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#438: FILE: mm/page_alloc.c:524:
+	if (page != NULL && ! zone_active[page->flags >> ZONE_SHIFT])

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: mm/page_alloc.c:525:
+		printk("alloc_page from disabled zone: %p\n", page);

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: mm/page_alloc.c:536:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[i]"
#453: FILE: mm/page_alloc.c:539:
+		if (zone_table[i] == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: mm/page_alloc.c:540:
+			BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#467: FILE: mm/page_alloc.c:593:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#478: FILE: mm/page_alloc.c:625:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#489: FILE: mm/page_alloc.c:652:
+			if (! zone_activep(z))
 			    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#500: FILE: mm/page_alloc.c:681:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: mm/page_alloc.c:1157:
+		for(; k >= 0; k--) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: mm/page_alloc.c:1716:
+static int mhtest_read(char *page, char **start, off_t off, int count,
+    int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: mm/page_alloc.c:1716:
+    int *eof, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#573: FILE: mm/page_alloc.c:1723:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#575: FILE: mm/page_alloc.c:1725:
+		if (z == NULL)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#577: FILE: mm/page_alloc.c:1727:
+		if (! z->present_pages)
 		    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: mm/page_alloc.c:1731:
+		len = sprintf(p, "Zone %d: %sabled free %d, active %d, present %d\n", i,
+		    zone_active[i] ? "en" : "dis", z->free_pages, z->nr_active,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: mm/page_alloc.c:1750:
+static int mhtest_write(struct file *file, const char *buffer,
+    unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: mm/page_alloc.c:1750:
+    unsigned long count, void *data)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#615: FILE: mm/page_alloc.c:1765:
+	if (p == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#619: FILE: mm/page_alloc.c:1769:
+	idx = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#621: FILE: mm/page_alloc.c:1771:
+	if (idx > MAX_NR_ZONES*MAX_NUMNODES) {
 	                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#622: FILE: mm/page_alloc.c:1772:
+		printk("Argument out of range\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#626: FILE: mm/page_alloc.c:1776:
+		printk("disable %d\n", idx);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#628: FILE: mm/page_alloc.c:1778:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#632: FILE: mm/page_alloc.c:1782:
+			pcp->low = pcp->high = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#635: FILE: mm/page_alloc.c:1785:
+			pcp->low = pcp->high = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#641: FILE: mm/page_alloc.c:1791:
+			printk("Zone %d still active (proceeding anyway)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: mm/page_alloc.c:1792:
+			printk("Zone %d still active (proceeding anyway)\n",
+			    idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#643: FILE: mm/page_alloc.c:1793:
+		printk("purge %d\n", idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#648: FILE: mm/page_alloc.c:1798:
+		printk("enable %d\n", idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: mm/page_alloc.c:1800:
+^I^Izone_table[idx]->pages_high = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#653: FILE: mm/page_alloc.c:1803:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#667: FILE: mm/page_alloc.c:1817:
+		if (zone_table[idx] == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#672: FILE: mm/page_alloc.c:1822:
+			printk(" %lx", (unsigned long)list_entry(l, struct page, lru));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#678: FILE: mm/page_alloc.c:1828:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#680: FILE: mm/page_alloc.c:1830:
+		if (zone_table[idx] == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#682: FILE: mm/page_alloc.c:1832:
+		for(i = 0; i < zone_table[idx]->spanned_pages; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#684: FILE: mm/page_alloc.c:1834:
+				printk(" %lx", (unsigned long)&zone_table[idx]->zone_mem_map[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#685: FILE: mm/page_alloc.c:1835:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#696: FILE: mm/page_alloc.c:1846:
+	if (entry == NULL)

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#703: FILE: mm/page_alloc.c:1853:
+__initcall(procmhtest_init);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#715: FILE: mm/rmap.c:295:
+static int try_to_unmap_one(struct page * page, pte_addr_t paddr, int force)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#724: FILE: mm/rmap.c:325:
+	if (! force && (vma->vm_flags & VM_LOCKED)) {
 	    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#733: FILE: mm/rmap.c:385:
+int try_to_unmap(struct page * page, int force)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#764: FILE: mm/shmem.c:85:
+	    PAGE_CACHE_SHIFT-PAGE_SHIFT);
 	                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#781: FILE: mm/swap_state.c:240:
+		printk("move_from_swap_cache: under remap %p\n", page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'move_from_swap_cache', this function's name, in a string
#781: FILE: mm/swap_state.c:240:
+		printk("move_from_swap_cache: under remap %p\n", page);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: mm/swap_state.c:244:
+^I$

WARNING:INDENTED_LABEL: labels should not be indented
#803: FILE: mm/swapfile.c:610:
+	again:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#823: FILE: mm/swapfile.c:758:
+			BUG_ON(PageAgain(page));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: mm/vmalloc.c:451:
+       return __vmalloc(size, GFP_KERNEL, PAGE_KERNEL);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#915: FILE: mm/vmscan.c:1078:
+print_buffer(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#917: FILE: mm/vmscan.c:1080:
+	struct address_space* mapping = page->mapping;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#921: FILE: mm/vmscan.c:1084:
+	bh = head = page_buffers(page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#922: FILE: mm/vmscan.c:1085:
+	printk("buffers:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#924: FILE: mm/vmscan.c:1087:
+		printk(" %lx %d\n", bh->b_state, atomic_read(&bh->b_count));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#928: FILE: mm/vmscan.c:1091:
+	printk("\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#931: FILE: mm/vmscan.c:1094:
+}
+/* try to remap a page. returns non-zero on failure */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpage"
#941: FILE: mm/vmscan.c:1104:
+	if (newpage == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#944: FILE: mm/vmscan.c:1107:
+		BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#948: FILE: mm/vmscan.c:1111:
+	if (! PagePrivate(page) && PageWriteback(page)) {
 	    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#949: FILE: mm/vmscan.c:1112:
+		BUG_ON(page->mapping != &swapper_space);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#950: FILE: mm/vmscan.c:1113:
+		printk("remap_onepage: swap cache? %p\n", page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_onepage', this function's name, in a string
#950: FILE: mm/vmscan.c:1113:
+		printk("remap_onepage: swap cache? %p\n", page);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#958: FILE: mm/vmscan.c:1121:
+		if (! --waitcnt)
 		    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping"
#965: FILE: mm/vmscan.c:1128:
+		    mapping != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping->a_ops->writepage"
#966: FILE: mm/vmscan.c:1129:
+		    mapping->a_ops->writepage != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#968: FILE: mm/vmscan.c:1131:
+			if (test_clear_page_dirty(page)) {
[...]
+			} else
[...]

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#993: FILE: mm/vmscan.c:1156:
+				if (! PagePrivate(page))
 				    ^

CHECK:BRACES: Unbalanced braces around else statement
#995: FILE: mm/vmscan.c:1158:
+			} else

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1006: FILE: mm/vmscan.c:1169:
+			if (! --waitcnt) {
 			    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#1013: FILE: mm/vmscan.c:1176:
+	if (mapping == NULL) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1014: FILE: mm/vmscan.c:1177:
+		if (! page_mapped(page)) {
 		    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: mm/vmscan.c:1179:
+				printk("page %p not mapped: count %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: mm/vmscan.c:1180:
+				printk("page %p not mapped: count %d\n",
+				    page, page_count(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1029: FILE: mm/vmscan.c:1192:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1034: FILE: mm/vmscan.c:1197:
+		printk("mapping changed %p -> %p, page %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: mm/vmscan.c:1198:
+		printk("mapping changed %p -> %p, page %p\n",
+		    mapping, page->mapping, page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!radix_tree_delete"
#1036: FILE: mm/vmscan.c:1199:
+	if (radix_tree_delete(&mapping->page_tree, page->index) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1072: FILE: mm/vmscan.c:1235:
+		printk("buffer reappeared\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1083: FILE: mm/vmscan.c:1246:
+			printk("remap_onepage: still waiting on %p %d\n", page, waitcnt);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_onepage', this function's name, in a string
#1083: FILE: mm/vmscan.c:1246:
+			printk("remap_onepage: still waiting on %p %d\n", page, waitcnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: mm/vmscan.c:1254:
+	BUG_ON(page_count(page) == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#1092: FILE: mm/vmscan.c:1255:
+	if (mapping != page->mapping && page->mapping != NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1093: FILE: mm/vmscan.c:1256:
+		printk("mapping changed %p -> %p, page %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1094: FILE: mm/vmscan.c:1257:
+		printk("mapping changed %p -> %p, page %p\n",
+		    mapping, page->mapping, page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1107: FILE: mm/vmscan.c:1270:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1113: FILE: mm/vmscan.c:1276:
+		if (p != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1115: FILE: mm/vmscan.c:1278:
+			printk("page %p newpage %p radix %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1116: FILE: mm/vmscan.c:1279:
+			printk("page %p newpage %p radix %p\n",
+			    page, newpage, p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1117: FILE: mm/vmscan.c:1280:
+			BUG_ON(p == newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1119: FILE: mm/vmscan.c:1282:
+		BUG_ON(page->mapping != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#1119: FILE: mm/vmscan.c:1282:
+		BUG_ON(page->mapping != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: mm/vmscan.c:1285:
+			printk("newpage count %d != 1, %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: mm/vmscan.c:1286:
+			printk("newpage count %d != 1, %p\n",
+			    page_count(newpage), newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1124: FILE: mm/vmscan.c:1287:
+			BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1127: FILE: mm/vmscan.c:1290:
+		newpage->mapping = page->mapping = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1139: FILE: mm/vmscan.c:1302:
+	if (p == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1141: FILE: mm/vmscan.c:1304:
+		BUG_ON(page->mapping != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#1141: FILE: mm/vmscan.c:1304:
+		BUG_ON(page->mapping != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1145: FILE: mm/vmscan.c:1308:
+	BUG_ON(mapping != page->mapping);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1149: FILE: mm/vmscan.c:1312:
+	if (PageDirty(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1152: FILE: mm/vmscan.c:1315:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1188: FILE: mm/vmscan.c:1351:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!radix_tree_delete"
#1192: FILE: mm/vmscan.c:1355:
+	if (radix_tree_delete(&mapping->page_tree, page->index) == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1205: FILE: mm/vmscan.c:1368:
+	for(; page_count(newpage) > 2; waitcnt++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1209: FILE: mm/vmscan.c:1372:
+			printk("You are hosed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1210: FILE: mm/vmscan.c:1373:
+			printk("newpage %p\n", newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1211: FILE: mm/vmscan.c:1374:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1214: FILE: mm/vmscan.c:1377:
+	BUG_ON(PageUptodate(newpage));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1220: FILE: mm/vmscan.c:1383:
+		printk("newpage %p truncated. page %p\n", newpage, page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1221: FILE: mm/vmscan.c:1384:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: mm/vmscan.c:1388:
+	BUG_ON(page_count(newpage) != 2);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1230: FILE: mm/vmscan.c:1393:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1260: FILE: mm/vmscan.c:1423:
+		printk("remapd already running\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remapd', this function's name, in a string
#1260: FILE: mm/vmscan.c:1423:
+		printk("remapd already running\n");

ERROR:SPACING: space required before the open parenthesis '('
#1265: FILE: mm/vmscan.c:1428:
+	while(nr_failed < 100) {

ERROR:SPACING: space required before the open parenthesis '('
#1267: FILE: mm/vmscan.c:1430:
+		for(active = 0; active < 2; active++) {

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1270: FILE: mm/vmscan.c:1433:
+			for(i = 0; ! list_empty(l) && i < 10; i++) {
 			           ^

ERROR:SPACING: space required before the open parenthesis '('
#1270: FILE: mm/vmscan.c:1433:
+			for(i = 0; ! list_empty(l) && i < 10; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: mm/vmscan.c:1440:
+						    list_entry(page->lru.prev,
+						    struct page, lru);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1279: FILE: mm/vmscan.c:1442:
+						if (&page->lru == l) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1281: FILE: mm/vmscan.c:1444:
+							/* scanned the whole
+							   list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1281: FILE: mm/vmscan.c:1444:
+							   list */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1285: FILE: mm/vmscan.c:1448:
+						if (page == page1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1286: FILE: mm/vmscan.c:1449:
+							BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1288: FILE: mm/vmscan.c:1451:
+					if (! fastmode) {
 					    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1289: FILE: mm/vmscan.c:1452:
+						printk("used up fastmode\n");

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1293: FILE: mm/vmscan.c:1456:
+				if (! TestClearPageLRU(page))
 				    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1294: FILE: mm/vmscan.c:1457:
+					BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1298: FILE: mm/vmscan.c:1461:
+					/* the page is in pagevec_release();
+					   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1298: FILE: mm/vmscan.c:1461:
+					   shrink_cache says so. */

WARNING:INDENTED_LABEL: labels should not be indented
#1315: FILE: mm/vmscan.c:1478:
+	got_page:

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1324: FILE: mm/vmscan.c:1487:
+	while (! list_empty(&failedp)) {
 	       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1336: FILE: mm/vmscan.c:1499:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1344: FILE: mm/vmscan.c:1507:
+^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#1349: FILE: mm/vmscan.c:1512:
+	for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1349: FILE: mm/vmscan.c:1512:
+	for(i = 0; i < NR_CPUS; i++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313448.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 79 warnings, 45 checks, 1180 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313448.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
