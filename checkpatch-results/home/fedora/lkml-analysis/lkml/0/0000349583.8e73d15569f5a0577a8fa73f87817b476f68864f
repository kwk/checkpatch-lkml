WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
modutils. I haven't tested it yet since I don't have any 2.6 kernel right here.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: Makefile.am:6:
+modinfo_SOURCES = modinfo.c gzfiles.c testing.h $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#120: FILE: depmod.c:301:
+	if (new->mmap == NULL)
+	    new->mmap = MAP_FAILED;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new->mmap"
#120: FILE: depmod.c:301:
+	if (new->mmap == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: gzfiles.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#153: FILE: gzfiles.c:24:
+typedef struct gz_stream {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: gzfiles.c:25:
+    z_stream stream;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: gzfiles.c:26:
+    int      z_err;   /* error code for last stream operation */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: gzfiles.c:27:
+    int      z_eof;   /* set if end of input file */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: gzfiles.c:28:
+    FILE     *file;   /* .gz file */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: gzfiles.c:29:
+    Byte     *inbuf;  /* input buffer */$

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#158: FILE: gzfiles.c:29:
+    Byte     *inbuf;  /* input buffer */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: gzfiles.c:30:
+    Byte     *outbuf; /* output buffer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: gzfiles.c:31:
+    uLong    crc;     /* crc32 of uncompressed data */$

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#160: FILE: gzfiles.c:31:
+    uLong    crc;     /* crc32 of uncompressed data */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: gzfiles.c:32:
+    char     *msg;    /* error message */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: gzfiles.c:33:
+    char     *path;   /* path name for debugging only */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: gzfiles.c:34:
+    int      transparent; /* 1 if input file is not a .gz file */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: gzfiles.c:35:
+    char     mode;    /* 'w' or 'r' */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: gzfiles.c:36:
+    long     startpos; /* start of compressed data in file (header skipped) */$

CHECK:CAMELCASE: Avoid CamelCase: <gzFile>
#172: FILE: gzfiles.c:43:
+static gzFile gzf_fds[MAXFD];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: gzfiles.c:48:
+    int fd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: gzfiles.c:49:
+    gzFile g;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: gzfiles.c:51:
+    if ((g=gzopen(name, "rb")) != NULL) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#180: FILE: gzfiles.c:51:
+    if ((g=gzopen(name, "rb")) != NULL) {
           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#180: FILE: gzfiles.c:51:
+    if ((g=gzopen(name, "rb")) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#181: FILE: gzfiles.c:52:
+	fd=fileno(((gz_stream*)g)->file);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: gzfiles.c:52:
+	fd=fileno(((gz_stream*)g)->file);
 	  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#182: FILE: gzfiles.c:53:
+	gzf_fds[fd]=g;
 	           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: gzfiles.c:54:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: gzfiles.c:55:
+    else if ((fd=open(name, mode)) != -1) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: gzfiles.c:55:
+    else if ((fd=open(name, mode)) != -1) {
                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: gzfiles.c:55:
+    else if ((fd=open(name, mode)) != -1) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#184: FILE: gzfiles.c:55:
+    }
+    else if ((fd=open(name, mode)) != -1) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#185: FILE: gzfiles.c:56:
+	gzf_fds[fd]=NULL; /* NULL means not GZ mode */
 	           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: gzfiles.c:57:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: gzfiles.c:58:
+    return fd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: gzfiles.c:63:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#192: FILE: gzfiles.c:63:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#192: FILE: gzfiles.c:63:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#192: FILE: gzfiles.c:63:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gzf_fds[fd]"
#192: FILE: gzfiles.c:63:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: gzfiles.c:65:
+    else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: gzfiles.c:71:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#200: FILE: gzfiles.c:71:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#200: FILE: gzfiles.c:71:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#200: FILE: gzfiles.c:71:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gzf_fds[fd]"
#200: FILE: gzfiles.c:71:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: gzfiles.c:73:
+    else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: gzfiles.c:79:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#208: FILE: gzfiles.c:79:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#208: FILE: gzfiles.c:79:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#208: FILE: gzfiles.c:79:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)
                                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gzf_fds[fd]"
#208: FILE: gzfiles.c:79:
+    if (fd<0 || fd>=MAXFD || gzf_fds[fd]==NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: gzfiles.c:81:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#227: FILE: gzfiles.c:98:
+	do {
+	    if (allocated < used + READBLK) {

WARNING:TABSTOP: Statements should start on a tabstop
#228: FILE: gzfiles.c:99:
+	    if (allocated < used + READBLK) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#230: FILE: gzfiles.c:101:
+		if (new == NULL) {
+		    free(ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#230: FILE: gzfiles.c:101:
+		if (new == NULL) {

WARNING:TABSTOP: Statements should start on a tabstop
#232: FILE: gzfiles.c:103:
+		    return NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: gzfiles.c:107:
+^I    }^I$

WARNING:TABSTOP: Statements should start on a tabstop
#236: FILE: gzfiles.c:107:
+	    }	

WARNING:TABSTOP: Statements should start on a tabstop
#239: FILE: gzfiles.c:110:
+	    if (r < 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#242: FILE: gzfiles.c:113:
+	    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#246: FILE: gzfiles.c:117:
+	if (size != NULL)
+	    *size = used;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "size"
#246: FILE: gzfiles.c:117:
+	if (size != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: gzfiles.c:123:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#258: FILE: gzfiles.h:1:
+#ifndef GZFILES_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: gzfiles.h:5:
+extern int gzf_open(const char *name, int mode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: gzfiles.h:6:
+extern int gzf_read(int fd, void *buf, size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: gzfiles.h:7:
+extern off_t gzf_lseek(int fd, off_t offset, int whence);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: gzfiles.h:8:
+extern void gzf_close(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: gzfiles.h:9:
+extern void *gzf_load(int fd, off_t *size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#302: FILE: insmod.c:110:
+	if (map == NULL)
+	    map = MAP_FAILED;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map"
#302: FILE: insmod.c:110:
+	if (map == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#330: FILE: modinfo.c:230:
+	if (map == NULL)
+	    map = MAP_FAILED;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map"
#330: FILE: modinfo.c:230:
+	if (map == NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 40 warnings, 17 checks, 275 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
