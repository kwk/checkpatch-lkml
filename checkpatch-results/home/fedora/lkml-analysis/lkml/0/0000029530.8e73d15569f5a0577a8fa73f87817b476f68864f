WARNING:CONST_STRUCT: struct file_operations should normally be const
#47: FILE: include/linux/file.h:70:
+struct file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/file.h:73:
+extern int init_file(struct file *, struct vfsmount *, struct dentry *dentry,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#50: FILE: include/linux/file.h:73:
+extern int init_file(struct file *, struct vfsmount *, struct dentry *dentry,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#50: FILE: include/linux/file.h:73:
+extern int init_file(struct file *, struct vfsmount *, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#51: FILE: include/linux/file.h:74:
+extern int init_file(struct file *, struct vfsmount *, struct dentry *dentry,
+		mode_t mode, const struct file_operations *fop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/file.h:75:
+extern struct file *alloc_file(struct vfsmount *, struct dentry *dentry,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#52: FILE: include/linux/file.h:75:
+extern struct file *alloc_file(struct vfsmount *, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#53: FILE: include/linux/file.h:76:
+extern struct file *alloc_file(struct vfsmount *, struct dentry *dentry,
+		mode_t mode, const struct file_operations *fop);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: fs/file_table.c:144:
+struct file *alloc_file(struct vfsmount *mnt,  struct dentry *dentry,
+		mode_t mode, const struct file_operations *fop)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#78: FILE: fs/file_table.c:156:
+EXPORT_SYMBOL(alloc_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: fs/file_table.c:159:
+int init_file(struct file *file, struct vfsmount *mnt,
+	   struct dentry *dentry, mode_t mode,

WARNING:LINE_SPACING: Missing a blank line after declarations
#85: FILE: fs/file_table.c:163:
+	int error = 0;
+	file->f_vfsmnt = mntget(mnt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#93: FILE: fs/file_table.c:171:
+EXPORT_SYMBOL(init_file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/hugetlbfs/inode.c:783:
+	file = alloc_file(hugetlbfs_vfsmount, dentry,
+			FMODE_WRITE | FMODE_READ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: mm/shmem.c:2474:
+	file = alloc_file(shm_mnt, dentry, FMODE_WRITE | FMODE_READ,
+				&shmem_file_operations);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#183: FILE: mm/shmem.c:2485:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: mm/tiny-shmem.c:77:
+	file = alloc_file(shm_mnt, dentry, FMODE_WRITE | FMODE_READ,
+			&ramfs_file_operations);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#230: FILE: mm/tiny-shmem.c:90:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: net/socket.c:351:
+	file = alloc_file(sock_mnt, dentry, FMODE_READ | FMODE_WRITE,
+			&socket_file_ops);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029530.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 9 warnings, 10 checks, 315 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029530.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
