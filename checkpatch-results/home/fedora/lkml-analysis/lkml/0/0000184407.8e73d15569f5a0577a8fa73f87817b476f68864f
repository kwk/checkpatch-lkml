WARNING:TYPO_SPELLING: 'Threrefore' may be misspelled - perhaps 'Therefore'?
#33: 
readpage/writepage. Threrefore, this patch is optional.
                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#49: FILE: drivers/block/loop.c:281:
+do_lo_send_xip(struct loop_device *lo, struct bio_vec *bvec, int bsize, loff_t pos,
+		struct page* ignored)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#49: FILE: drivers/block/loop.c:281:
+		struct page* ignored)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#53: FILE: drivers/block/loop.c:285:
+	struct address_space_operations *aops = mapping->a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#56: FILE: drivers/block/loop.c:288:
+	unsigned size, offset, bv_offs;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: drivers/block/loop.c:301:
+		IV = ((sector_t)index << (PAGE_CACHE_SHIFT - 9))+(offset >> 9);
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#76: FILE: drivers/block/loop.c:308:
+			index*(PAGE_SIZE/512), 0);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#76: FILE: drivers/block/loop.c:308:
+			index*(PAGE_SIZE/512), 0);
 			                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#79: FILE: drivers/block/loop.c:311:
+		if (unlikely(IS_ERR(page))) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#79: FILE: drivers/block/loop.c:311:
+		if (unlikely(IS_ERR(page))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#80: FILE: drivers/block/loop.c:312:
+			if (PTR_ERR(page) == -ENODATA) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#83: FILE: drivers/block/loop.c:315:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#85: FILE: drivers/block/loop.c:317:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#86: FILE: drivers/block/loop.c:318:
+			BUG_ON(!PageUptodate(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: drivers/block/loop.c:330:
+			printk(KERN_ERR "loop: transfer error block %llu\n",

CHECK:BRACES: Unbalanced braces around else statement
#136: FILE: drivers/block/loop.c:440:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#151: FILE: drivers/block/loop.c:875:
+		if (!(lo_flags & (LO_FLAGS_USE_AOPS | LO_FLAGS_USE_XIP))
+		    && !file->f_op->write)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 6 warnings, 10 checks, 119 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
