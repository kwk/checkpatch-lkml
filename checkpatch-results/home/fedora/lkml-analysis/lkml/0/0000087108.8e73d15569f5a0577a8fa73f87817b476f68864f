WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
- Modify get_user to use __get_user_asm macro, instead of __get_user_x macro.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: include/asm-m32r/uaccess.h:81:
+^I^I: "1" (addr), "r" ((int)(size)), ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: include/asm-m32r/uaccess.h:172:
+	__get_user_check((x),(ptr),sizeof(*(ptr)))
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: include/asm-m32r/uaccess.h:172:
+	__get_user_check((x),(ptr),sizeof(*(ptr)))
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/asm-m32r/uaccess.h:191:
+	__put_user_check((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/asm-m32r/uaccess.h:191:
+	__put_user_check((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: include/asm-m32r/uaccess.h:214:
+	__get_user_nocheck((x),(ptr),sizeof(*(ptr)))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: include/asm-m32r/uaccess.h:214:
+	__get_user_nocheck((x),(ptr),sizeof(*(ptr)))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#215: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
+({									\
+	long __gu_err = 0;						\
+	unsigned long __gu_val;						\
+	might_sleep();							\
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#225: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
+({									\
+	long __gu_err = -EFAULT;					\
+	unsigned long __gu_val = 0;					\
+	const __typeof__(*(ptr)) __user *__gu_addr = (ptr);		\
+	might_sleep();							\
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#225: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
+({									\
+	long __gu_err = -EFAULT;					\
+	unsigned long __gu_val = 0;					\
+	const __typeof__(*(ptr)) __user *__gu_addr = (ptr);		\
+	might_sleep();							\
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: include/asm-m32r/uaccess.h:232:
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: include/asm-m32r/uaccess.h:232:
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/asm-m32r/uaccess.h:238:
+extern long __get_user_bad(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'retval' - possible side-effects?
#239: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#243: FILE: include/asm-m32r/uaccess.h:244:
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#244: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#244: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#245: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#245: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#246: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#246: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#247: FILE: include/asm-m32r/uaccess.h:248:
+	  default: (x) = __get_user_bad();				\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#247: FILE: include/asm-m32r/uaccess.h:248:
+	  default: (x) = __get_user_bad();				\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#251: FILE: include/asm-m32r/uaccess.h:252:
+#define __get_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	ld"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=&r" (err), "=&r" (x)				\
+		: "r" (addr), "i" (-EFAULT), "0" (err)			\
+		: "r14", "memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#251: FILE: include/asm-m32r/uaccess.h:252:
+#define __get_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	ld"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=&r" (err), "=&r" (x)				\
+		: "r" (addr), "i" (-EFAULT), "0" (err)			\
+		: "r14", "memory")

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#254: FILE: include/asm-m32r/uaccess.h:255:
+		"1:	ld"itype" %1,@%2\n"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/asm-m32r/uaccess.h:293:
+	__put_user_nocheck((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/asm-m32r/uaccess.h:293:
+	__put_user_nocheck((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#315: FILE: include/asm-m32r/uaccess.h:316:
+#define __put_user_u64(x, addr, err)					\
+        __asm__ __volatile__(						\
+                "       .fillinsn\n"					\
+                "1:     st %L1,@%2\n"					\
+                "       .fillinsn\n"					\
+                "2:     st %H1,@(4,%2)\n"				\
+                "       .fillinsn\n"					\
+                "3:\n"							\
+                ".section .fixup,\"ax\"\n"				\
+                "       .balign 4\n"					\
+                "4:     ldi %0,%3\n"					\
+                "       seth r14,#high(3b)\n"				\
+                "       or3 r14,r14,#low(3b)\n"				\
+                "       jmp r14\n"					\
+                ".previous\n"						\
+                ".section __ex_table,\"a\"\n"				\
+                "       .balign 4\n"					\
+                "       .long 1b,4b\n"					\
+                "       .long 2b,4b\n"					\
+                ".previous"						\
+                : "=&r" (err)						\
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)		\
                 : "r14", "memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#315: FILE: include/asm-m32r/uaccess.h:316:
+#define __put_user_u64(x, addr, err)					\
+        __asm__ __volatile__(						\
+                "       .fillinsn\n"					\
+                "1:     st %L1,@%2\n"					\
+                "       .fillinsn\n"					\
+                "2:     st %H1,@(4,%2)\n"				\
+                "       .fillinsn\n"					\
+                "3:\n"							\
+                ".section .fixup,\"ax\"\n"				\
+                "       .balign 4\n"					\
+                "4:     ldi %0,%3\n"					\
+                "       seth r14,#high(3b)\n"				\
+                "       or3 r14,r14,#low(3b)\n"				\
+                "       jmp r14\n"					\
+                ".previous\n"						\
+                ".section __ex_table,\"a\"\n"				\
+                "       .balign 4\n"					\
+                "       .long 1b,4b\n"					\
+                "       .long 2b,4b\n"					\
+                ".previous"						\
+                : "=&r" (err)						\
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)		\
                 : "r14", "memory")

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: include/asm-m32r/uaccess.h:317:
+        __asm__ __volatile__(^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/asm-m32r/uaccess.h:317:
+        __asm__ __volatile__(^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: include/asm-m32r/uaccess.h:318:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/asm-m32r/uaccess.h:318:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: include/asm-m32r/uaccess.h:319:
+                "1:     st %L1,@%2\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: include/asm-m32r/uaccess.h:319:
+                "1:     st %L1,@%2\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: include/asm-m32r/uaccess.h:320:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/asm-m32r/uaccess.h:320:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: include/asm-m32r/uaccess.h:321:
+                "2:     st %H1,@(4,%2)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: include/asm-m32r/uaccess.h:321:
+                "2:     st %H1,@(4,%2)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: include/asm-m32r/uaccess.h:322:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: include/asm-m32r/uaccess.h:322:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: include/asm-m32r/uaccess.h:323:
+                "3:\n"^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: include/asm-m32r/uaccess.h:323:
+                "3:\n"^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: include/asm-m32r/uaccess.h:324:
+                ".section .fixup,\"ax\"\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: include/asm-m32r/uaccess.h:324:
+                ".section .fixup,\"ax\"\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: include/asm-m32r/uaccess.h:325:
+                "       .balign 4\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: include/asm-m32r/uaccess.h:325:
+                "       .balign 4\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: include/asm-m32r/uaccess.h:326:
+                "4:     ldi %0,%3\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: include/asm-m32r/uaccess.h:326:
+                "4:     ldi %0,%3\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: include/asm-m32r/uaccess.h:327:
+                "       seth r14,#high(3b)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: include/asm-m32r/uaccess.h:327:
+                "       seth r14,#high(3b)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: include/asm-m32r/uaccess.h:328:
+                "       or3 r14,r14,#low(3b)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: include/asm-m32r/uaccess.h:328:
+                "       or3 r14,r14,#low(3b)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: include/asm-m32r/uaccess.h:329:
+                "       jmp r14\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: include/asm-m32r/uaccess.h:329:
+                "       jmp r14\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: include/asm-m32r/uaccess.h:330:
+                ".previous\n"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: include/asm-m32r/uaccess.h:330:
+                ".previous\n"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: include/asm-m32r/uaccess.h:331:
+                ".section __ex_table,\"a\"\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/asm-m32r/uaccess.h:331:
+                ".section __ex_table,\"a\"\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: include/asm-m32r/uaccess.h:332:
+                "       .balign 4\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/asm-m32r/uaccess.h:332:
+                "       .balign 4\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: include/asm-m32r/uaccess.h:333:
+                "       .long 1b,4b\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: include/asm-m32r/uaccess.h:333:
+                "       .long 1b,4b\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: include/asm-m32r/uaccess.h:334:
+                "       .long 2b,4b\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: include/asm-m32r/uaccess.h:334:
+                "       .long 2b,4b\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: include/asm-m32r/uaccess.h:335:
+                ".previous"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: include/asm-m32r/uaccess.h:335:
+                ".previous"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: include/asm-m32r/uaccess.h:336:
+                : "=&r" (err)^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: include/asm-m32r/uaccess.h:336:
+                : "=&r" (err)^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: include/asm-m32r/uaccess.h:337:
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: include/asm-m32r/uaccess.h:337:
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/asm-m32r/uaccess.h:368:
+extern void __put_user_bad(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#450: FILE: include/asm-m32r/uaccess.h:643:
+	__generic_copy_from_user((to),(from),(n));	\
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#450: FILE: include/asm-m32r/uaccess.h:643:
+	__generic_copy_from_user((to),(from),(n));	\
 	                                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087108.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 27 warnings, 11 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087108.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
