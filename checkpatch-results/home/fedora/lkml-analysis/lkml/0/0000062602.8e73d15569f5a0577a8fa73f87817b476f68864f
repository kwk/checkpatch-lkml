CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/statistic.h:131:
+extern void statistic_set(struct statistic *, int, s64, u64);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#159: FILE: include/linux/statistic.h:131:
+extern void statistic_set(struct statistic *, int, s64, u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#159: FILE: include/linux/statistic.h:131:
+extern void statistic_set(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#159: FILE: include/linux/statistic.h:131:
+extern void statistic_set(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#159: FILE: include/linux/statistic.h:131:
+extern void statistic_set(struct statistic *, int, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/statistic.h:147:
+extern void statistic_add_counter_inc(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#176: FILE: include/linux/statistic.h:147:
+extern void statistic_add_counter_inc(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#176: FILE: include/linux/statistic.h:147:
+extern void statistic_add_counter_inc(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#176: FILE: include/linux/statistic.h:147:
+extern void statistic_add_counter_inc(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/statistic.h:148:
+extern void statistic_add_counter_prod(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#177: FILE: include/linux/statistic.h:148:
+extern void statistic_add_counter_prod(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#177: FILE: include/linux/statistic.h:148:
+extern void statistic_add_counter_prod(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#177: FILE: include/linux/statistic.h:148:
+extern void statistic_add_counter_prod(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/statistic.h:149:
+extern void statistic_add_util(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#178: FILE: include/linux/statistic.h:149:
+extern void statistic_add_util(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#178: FILE: include/linux/statistic.h:149:
+extern void statistic_add_util(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#178: FILE: include/linux/statistic.h:149:
+extern void statistic_add_util(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/statistic.h:150:
+extern void statistic_add_histogram_lin(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#179: FILE: include/linux/statistic.h:150:
+extern void statistic_add_histogram_lin(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#179: FILE: include/linux/statistic.h:150:
+extern void statistic_add_histogram_lin(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#179: FILE: include/linux/statistic.h:150:
+extern void statistic_add_histogram_lin(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/statistic.h:151:
+extern void statistic_add_histogram_log2(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#180: FILE: include/linux/statistic.h:151:
+extern void statistic_add_histogram_log2(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#180: FILE: include/linux/statistic.h:151:
+extern void statistic_add_histogram_log2(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#180: FILE: include/linux/statistic.h:151:
+extern void statistic_add_histogram_log2(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/statistic.h:152:
+extern void statistic_add_sparse(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#181: FILE: include/linux/statistic.h:152:
+extern void statistic_add_sparse(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#181: FILE: include/linux/statistic.h:152:
+extern void statistic_add_sparse(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#181: FILE: include/linux/statistic.h:152:
+extern void statistic_add_sparse(struct statistic *, s64, u64);

WARNING:TYPO_SPELLING: 'proessing' may be misspelled - perhaps 'processing'?
#185: FILE: include/linux/statistic.h:156:
+ * @type: data proessing mode to be used (must match statistic_info::defaults)
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'perfomance' may be misspelled - perhaps 'performance'?
#196: FILE: include/linux/statistic.h:167:
+ * Use this when you feel that the perfomance gain outweighs the loss
                                    ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: include/linux/statistic.h:176:
+static inline void _statistic_add_as(int type, struct statistic *stat, int i,
+		       s64 value, u64 incr)

WARNING:TYPO_SPELLING: 'proessing' may be misspelled - perhaps 'processing'?
#235: FILE: include/linux/statistic.h:206:
+ * @type: data proessing mode to be used (must match statistic_info::defaults)
                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'perfomance' may be misspelled - perhaps 'performance'?
#246: FILE: include/linux/statistic.h:217:
+ * Use this when you feel that the perfomance gain outweighs the loss
                                    ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: include/linux/statistic.h:226:
+static inline void statistic_add_as(int type, struct statistic *stat, int i,
+		      s64 value, u64 incr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: include/linux/statistic.h:230:
+	unsigned long flags;
+	local_irq_save(flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062602.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 27 warnings, 9 checks, 410 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062602.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
