CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#42: FILE: include/linux/sunrpc/xdr.h:149:
+extern int read_bytes_from_xdr_buf(struct xdr_buf *, int, void *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_buf *' should also have an identifier name
#42: FILE: include/linux/sunrpc/xdr.h:149:
+extern int read_bytes_from_xdr_buf(struct xdr_buf *, int, void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#42: FILE: include/linux/sunrpc/xdr.h:149:
+extern int read_bytes_from_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#42: FILE: include/linux/sunrpc/xdr.h:149:
+extern int read_bytes_from_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#42: FILE: include/linux/sunrpc/xdr.h:149:
+extern int read_bytes_from_xdr_buf(struct xdr_buf *, int, void *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: include/linux/sunrpc/xdr.h:150:
+extern int write_bytes_to_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_buf *' should also have an identifier name
#43: FILE: include/linux/sunrpc/xdr.h:150:
+extern int write_bytes_to_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#43: FILE: include/linux/sunrpc/xdr.h:150:
+extern int write_bytes_to_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#43: FILE: include/linux/sunrpc/xdr.h:150:
+extern int write_bytes_to_xdr_buf(struct xdr_buf *, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#43: FILE: include/linux/sunrpc/xdr.h:150:
+extern int write_bytes_to_xdr_buf(struct xdr_buf *, int, void *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/linux/sunrpc/xdr.h:172:
+extern int xdr_encode_word(struct xdr_buf *, int, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_buf *' should also have an identifier name
#51: FILE: include/linux/sunrpc/xdr.h:172:
+extern int xdr_encode_word(struct xdr_buf *, int, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#51: FILE: include/linux/sunrpc/xdr.h:172:
+extern int xdr_encode_word(struct xdr_buf *, int, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#51: FILE: include/linux/sunrpc/xdr.h:172:
+extern int xdr_encode_word(struct xdr_buf *, int, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/sunrpc/xdr.h:173:
+extern int xdr_decode_word(struct xdr_buf *, int, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_buf *' should also have an identifier name
#52: FILE: include/linux/sunrpc/xdr.h:173:
+extern int xdr_decode_word(struct xdr_buf *, int, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#52: FILE: include/linux/sunrpc/xdr.h:173:
+extern int xdr_decode_word(struct xdr_buf *, int, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#52: FILE: include/linux/sunrpc/xdr.h:173:
+extern int xdr_decode_word(struct xdr_buf *, int, u32 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/sunrpc/xdr.h:183:
+extern int xdr_decode_array2(struct xdr_buf *buf, unsigned int base,

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: include/linux/sunrpc/xdr.h:184:
+                             struct xdr_array2_desc *desc);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: include/linux/sunrpc/xdr.h:184:
+                             struct xdr_array2_desc *desc);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/linux/sunrpc/xdr.h:185:
+extern int xdr_encode_array2(struct xdr_buf *buf, unsigned int base,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#79: FILE: net/sunrpc/sunrpc_syms.c:133:
+EXPORT_SYMBOL(xdr_decode_word);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#80: FILE: net/sunrpc/sunrpc_syms.c:134:
+EXPORT_SYMBOL(xdr_encode_array2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#81: FILE: net/sunrpc/sunrpc_syms.c:135:
+EXPORT_SYMBOL(xdr_decode_array2);

WARNING:MINMAX: min() should probably be min_t(int, len, subbuf.head[0].iov_len)
#106: FILE: net/sunrpc/xdr.c:882:
+	this_len = min(len, (int)subbuf.head[0].iov_len);

WARNING:MINMAX: min() should probably be min_t(int, len, subbuf.page_len)
#110: FILE: net/sunrpc/xdr.c:886:
+	this_len = min(len, (int)subbuf.page_len);

WARNING:MINMAX: min() should probably be min_t(int, len, subbuf.tail[0].iov_len)
#115: FILE: net/sunrpc/xdr.c:891:
+	this_len = min(len, (int)subbuf.tail[0].iov_len);

CHECK:SPACING: No space is necessary after a cast
#170: FILE: net/sunrpc/xdr.c:977:
+		    (unsigned long) base + 4 + desc->array_len *

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: net/sunrpc/xdr.c:987:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#196: FILE: net/sunrpc/xdr.c:1003:
+			if (encode) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#201: FILE: net/sunrpc/xdr.c:1008:
+			} else

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#229: FILE: net/sunrpc/xdr.c:1036:
+						if (err)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#241: FILE: net/sunrpc/xdr.c:1048:
+						if (err)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#262: FILE: net/sunrpc/xdr.c:1069:
+						if (err)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#274: FILE: net/sunrpc/xdr.c:1081:
+						if (err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: net/sunrpc/xdr.c:1094:
+			avail_page = min(avail_here,
+				 (unsigned int) PAGE_CACHE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#287: FILE: net/sunrpc/xdr.c:1094:
+				 (unsigned int) PAGE_CACHE_SIZE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#299: FILE: net/sunrpc/xdr.c:1106:
+			if (encode)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#301: FILE: net/sunrpc/xdr.c:1108:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: net/sunrpc/xdr.c:1125:
+^I$

CHECK:SPACING: No space is necessary after a cast
#339: FILE: net/sunrpc/xdr.c:1146:
+	if ((unsigned long) base + 4 + desc->array_len * desc->elem_size >

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213055.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 25 warnings, 14 checks, 293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213055.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
