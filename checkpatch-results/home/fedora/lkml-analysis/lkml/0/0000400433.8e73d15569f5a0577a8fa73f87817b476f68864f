WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -u --recursive --new-file linux-2.5.56-04-auth_upcall/fs/Kconfig linux-2.5.56-05-rpc_gss/fs/Kconfig

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: include/linux/sunrpc/auth_gss.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#127: FILE: include/linux/sunrpc/auth_gss.h:11:
+ * $Id$

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: include/linux/sunrpc/auth_gss.h:71:
+ * the wire when communicating with a server. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#192: FILE: include/linux/sunrpc/auth_gss.h:76:
+	spinlock_t		gc_seq_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#242: FILE: include/linux/sunrpc/auth.h:75:
+						 * case) */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth*' should also have an identifier name
#255: FILE: include/linux/sunrpc/auth.h:94:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct auth_cred *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auth_cred *' should also have an identifier name
#255: FILE: include/linux/sunrpc/auth.h:94:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct auth_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#255: FILE: include/linux/sunrpc/auth.h:94:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct auth_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rpc_authflavor_t' should also have an identifier name
#263: FILE: include/linux/sunrpc/auth.h:112:
+u32			pseudoflavor_to_flavor(rpc_authflavor_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#272: FILE: include/linux/sunrpc/gss_api.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#282: FILE: include/linux/sunrpc/gss_api.h:11:
+ * $Id$

CHECK:SPACING: No space is necessary after a cast
#297: FILE: include/linux/sunrpc/gss_api.h:26:
+#define GSS_C_NO_BUFFER		((struct xdr_netobj) 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#298: FILE: include/linux/sunrpc/gss_api.h:27:
+#define GSS_C_NO_CONTEXT	((struct gss_ctx *) 0)

CHECK:SPACING: No space is necessary after a cast
#299: FILE: include/linux/sunrpc/gss_api.h:28:
+#define GSS_C_NULL_OID		((struct xdr_netobj) 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: include/linux/sunrpc/gss_api.h:34:
+ * the prototypes specified in RFC 2744. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#306: FILE: include/linux/sunrpc/gss_api.h:35:
+u32 gss_import_sec_context(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#310: FILE: include/linux/sunrpc/gss_api.h:39:
+u32 gss_get_mic(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#315: FILE: include/linux/sunrpc/gss_api.h:44:
+u32 gss_verify_mic(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#320: FILE: include/linux/sunrpc/gss_api.h:49:
+u32 gss_delete_sec_context(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: include/linux/sunrpc/gss_api.h:53:
+ * triples) that we currently support: */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: include/linux/sunrpc/gss_api.h:71:
+struct gss_api_mech * gss_pseudoflavor_to_mech(u32 pseudoflavor);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <gss_pseudoflavor_to_mechOID>
#343: FILE: include/linux/sunrpc/gss_api.h:72:
+int gss_pseudoflavor_to_mechOID(u32 pseudoflavor, struct xdr_netobj *mech);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#348: FILE: include/linux/sunrpc/gss_api.h:77:
+ * no actual security; the following function registers that mechanism: */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#363: FILE: include/linux/sunrpc/gss_api.h:92:
+	u32 (*gss_import_sec_context)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#366: FILE: include/linux/sunrpc/gss_api.h:95:
+	u32 (*gss_get_mic)(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: include/linux/sunrpc/gss_api.h:97:
+^I^I^Iu32^I^I^Iqop, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#371: FILE: include/linux/sunrpc/gss_api.h:100:
+	u32 (*gss_verify_mic)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#376: FILE: include/linux/sunrpc/gss_api.h:105:
+	void (*gss_delete_sec_context)(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_netobj *' should also have an identifier name
#381: FILE: include/linux/sunrpc/gss_api.h:110:
+int gss_mech_register(struct xdr_netobj *, struct gss_api_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gss_api_ops *' should also have an identifier name
#381: FILE: include/linux/sunrpc/gss_api.h:110:
+int gss_mech_register(struct xdr_netobj *, struct gss_api_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gss_api_mech *' should also have an identifier name
#384: FILE: include/linux/sunrpc/gss_api.h:113:
+int gss_mech_unregister(struct gss_api_mech *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#390: FILE: include/linux/sunrpc/gss_api.h:119:
+ * reference count. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: include/linux/sunrpc/gss_api.h:120:
+struct gss_api_mech * gss_mech_get_by_OID(struct xdr_netobj *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xdr_netobj *' should also have an identifier name
#391: FILE: include/linux/sunrpc/gss_api.h:120:
+struct gss_api_mech * gss_mech_get_by_OID(struct xdr_netobj *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: include/linux/sunrpc/gss_api.h:123:
+struct gss_api_mech * gss_mech_get(struct gss_api_mech *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gss_api_mech *' should also have an identifier name
#394: FILE: include/linux/sunrpc/gss_api.h:123:
+struct gss_api_mech * gss_mech_get(struct gss_api_mech *);

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#397: FILE: include/linux/sunrpc/gss_api.h:126:
+ * Note that for every succesful gss_get_mech call there must be exactly
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: include/linux/sunrpc/gss_api.h:127:
+ * one corresponding call to gss_mech_put.*/

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gss_api_mech *' should also have an identifier name
#399: FILE: include/linux/sunrpc/gss_api.h:128:
+int gss_mech_put(struct gss_api_mech *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#408: FILE: include/linux/sunrpc/gss_asn1.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#409: FILE: include/linux/sunrpc/gss_asn1.h:2:
+ *  linux/include/linux/sunrpc/gss_asn1.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: include/linux/sunrpc/gss_asn1.h:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: include/linux/sunrpc/gss_asn1.h:64:
+#define g_OID_equal(o1,o2) \
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o1' - possible side-effects?
#471: FILE: include/linux/sunrpc/gss_asn1.h:64:
+#define g_OID_equal(o1,o2) \
+   (((o1)->len == (o2)->len) && \
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o2' - possible side-effects?
#471: FILE: include/linux/sunrpc/gss_asn1.h:64:
+#define g_OID_equal(o1,o2) \
+   (((o1)->len == (o2)->len) && \
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: include/linux/sunrpc/gss_asn1.h:65:
+   (((o1)->len == (o2)->len) && \$

CHECK:SPACING: No space is necessary after a cast
#473: FILE: include/linux/sunrpc/gss_asn1.h:66:
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: include/linux/sunrpc/gss_asn1.h:66:
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: include/linux/sunrpc/gss_asn1.h:66:
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: include/linux/sunrpc/gss_asn1.h:66:
+    (memcmp((o1)->data,(o2)->data,(int) (o1)->len) == 0))
                                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#475: FILE: include/linux/sunrpc/gss_asn1.h:68:
+u32 g_verify_token_header(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: include/linux/sunrpc/gss_asn1.h:69:
+     struct xdr_netobj *mech,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: include/linux/sunrpc/gss_asn1.h:70:
+     int *body_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: include/linux/sunrpc/gss_asn1.h:71:
+     unsigned char **buf_in,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: include/linux/sunrpc/gss_asn1.h:72:
+     int tok_type,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: include/linux/sunrpc/gss_asn1.h:73:
+     int toksize);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#482: FILE: include/linux/sunrpc/gss_asn1.h:75:
+u32 g_get_mech_oid(struct xdr_netobj *mech, struct xdr_netobj * in_buf);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#484: FILE: include/linux/sunrpc/gss_asn1.h:77:
+int g_token_size(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: include/linux/sunrpc/gss_asn1.h:78:
+     struct xdr_netobj *mech,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: include/linux/sunrpc/gss_asn1.h:79:
+     unsigned int body_size);$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#488: FILE: include/linux/sunrpc/gss_asn1.h:81:
+void g_make_token_header(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: include/linux/sunrpc/gss_asn1.h:82:
+     struct xdr_netobj *mech,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: include/linux/sunrpc/gss_asn1.h:83:
+     int body_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: include/linux/sunrpc/gss_asn1.h:84:
+     unsigned char **buf,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: include/linux/sunrpc/gss_asn1.h:85:
+     int tok_type);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#497: FILE: include/linux/sunrpc/gss_err.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: include/linux/sunrpc/gss_err.h:14:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: include/linux/sunrpc/gss_err.h:24:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#535: FILE: include/linux/sunrpc/gss_err.h:39:
+typedef unsigned int OM_uint32;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#563: FILE: include/linux/sunrpc/gss_err.h:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#580: FILE: include/linux/sunrpc/gss_err.h:84:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: include/linux/sunrpc/gss_err.h:105:
+  ((x) & (GSS_C_CALLING_ERROR_MASK << GSS_C_CALLING_ERROR_OFFSET))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: include/linux/sunrpc/gss_err.h:107:
+  ((x) & (GSS_C_ROUTINE_ERROR_MASK << GSS_C_ROUTINE_ERROR_OFFSET))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: include/linux/sunrpc/gss_err.h:109:
+  ((x) & (GSS_C_SUPPLEMENTARY_MASK << GSS_C_SUPPLEMENTARY_OFFSET))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: include/linux/sunrpc/gss_err.h:111:
+  ((x) & ((GSS_C_CALLING_ERROR_MASK << GSS_C_CALLING_ERROR_OFFSET) | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: include/linux/sunrpc/gss_err.h:122:
+                             (((OM_uint32) 1ul) << GSS_C_CALLING_ERROR_OFFSET)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: include/linux/sunrpc/gss_err.h:122:
+                             (((OM_uint32) 1ul) << GSS_C_CALLING_ERROR_OFFSET)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: include/linux/sunrpc/gss_err.h:124:
+                             (((OM_uint32) 2ul) << GSS_C_CALLING_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: include/linux/sunrpc/gss_err.h:124:
+                             (((OM_uint32) 2ul) << GSS_C_CALLING_ERROR_OFFSET)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: include/linux/sunrpc/gss_err.h:126:
+                             (((OM_uint32) 3ul) << GSS_C_CALLING_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: include/linux/sunrpc/gss_err.h:126:
+                             (((OM_uint32) 3ul) << GSS_C_CALLING_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: include/linux/sunrpc/gss_err.h:141:
+     (((OM_uint32) 10ul) << GSS_C_ROUTINE_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: include/linux/sunrpc/gss_err.h:143:
+     (((OM_uint32) 11ul) << GSS_C_ROUTINE_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: include/linux/sunrpc/gss_err.h:145:
+     (((OM_uint32) 12ul) << GSS_C_ROUTINE_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: include/linux/sunrpc/gss_err.h:151:
+     (((OM_uint32) 17ul) << GSS_C_ROUTINE_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: include/linux/sunrpc/gss_err.h:153:
+     (((OM_uint32) 18ul) << GSS_C_ROUTINE_ERROR_OFFSET)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: include/linux/sunrpc/gss_err.h:167:
+   (((x) >> GSS_C_CALLING_ERROR_OFFSET) & GSS_C_CALLING_ERROR_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: include/linux/sunrpc/gss_err.h:169:
+   (((x) >> GSS_C_ROUTINE_ERROR_OFFSET) & GSS_C_ROUTINE_ERROR_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: include/linux/sunrpc/gss_err.h:171:
+   (((x) >> GSS_C_SUPPLEMENTARY_OFFSET) & GSS_C_SUPPLEMENTARY_MASK)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#724: FILE: include/linux/sunrpc/sched.h:52:
+	u32			tk_gss_seqno;	/* rpcsec_gss sequence number
+						   used on this request */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: include/linux/sunrpc/sched.h:52:
+						   used on this request */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#749: FILE: net/sunrpc/auth.c:27:
+u32
+pseudoflavor_to_flavor(u32 flavor) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#789: FILE: net/sunrpc/auth_gss/auth_gss.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#793: FILE: net/sunrpc/auth_gss/auth_gss.c:5:
+ * $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#825: FILE: net/sunrpc/auth_gss/auth_gss.c:37:
+ * $Id$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#828: FILE: net/sunrpc/auth_gss/auth_gss.c:40:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#857: FILE: net/sunrpc/auth_gss/auth_gss.c:69:
+/* XXX this define must match the gssd define
+* as it is passed to gssd to signal the use of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#858: FILE: net/sunrpc/auth_gss/auth_gss.c:70:
+* machine creds should be part of the shared rpc interface */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: net/sunrpc/auth_gss/auth_gss.c:72:
+#define CA_RUN_AS_MACHINE  0x00000200 $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#863: FILE: net/sunrpc/auth_gss/auth_gss.c:75:
+#define isprint(c)      ((c > 0x1f) && (c < 0x7f))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#863: FILE: net/sunrpc/auth_gss/auth_gss.c:75:
+#define isprint(c)      ((c > 0x1f) && (c < 0x7f))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: net/sunrpc/auth_gss/auth_gss.c:82:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#871: FILE: net/sunrpc/auth_gss/auth_gss.c:83:
+	dprintk("RPC: print_hexl: length %d\n",length);
 	                                      ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'print_hexl', this function's name, in a string
#871: FILE: net/sunrpc/auth_gss/auth_gss.c:83:
+	dprintk("RPC: print_hexl: length %d\n",length);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#873: FILE: net/sunrpc/auth_gss/auth_gss.c:85:
+	cp = (u8 *) p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: net/sunrpc/auth_gss/auth_gss.c:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#879: FILE: net/sunrpc/auth_gss/auth_gss.c:91:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#882: FILE: net/sunrpc/auth_gss/auth_gss.c:94:
+				dprintk("%02x ", (u_int)cp[i+j]);
 				                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#884: FILE: net/sunrpc/auth_gss/auth_gss.c:96:
+				dprintk("%02x", (u_int)cp[i+j]);
 				                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#893: FILE: net/sunrpc/auth_gss/auth_gss.c:105:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#895: FILE: net/sunrpc/auth_gss/auth_gss.c:107:
+			c = cp[i+j];
 			        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#903: FILE: net/sunrpc/auth_gss/auth_gss.c:115:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: net/sunrpc/auth_gss/auth_gss.c:116:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: net/sunrpc/auth_gss/auth_gss.c:117:
+ * NOTE: we have the opportunity to use different $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#905: FILE: net/sunrpc/auth_gss/auth_gss.c:117:
+/* 
+ * NOTE: we have the opportunity to use different 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#911: FILE: net/sunrpc/auth_gss/auth_gss.c:123:
+	struct rpc_auth * auth;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#913: FILE: net/sunrpc/auth_gss/auth_gss.c:125:
+	dprintk("RPC: creating GSS authenticator for client %p\n",clnt);
 	                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#916: FILE: net/sunrpc/auth_gss/auth_gss.c:128:
+	if (!(auth = kmalloc(sizeof(*auth), GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#946: FILE: net/sunrpc/auth_gss/auth_gss.c:158:
+ * allocated before freeing them. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#950: FILE: net/sunrpc/auth_gss/auth_gss.c:162:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_destroy_ctx', this function's name, in a string
#951: FILE: net/sunrpc/auth_gss/auth_gss.c:163:
+	dprintk("RPC: gss_destroy_ctx\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#963: FILE: net/sunrpc/auth_gss/auth_gss.c:175:
+
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_destroy_cred', this function's name, in a string
#970: FILE: net/sunrpc/auth_gss/auth_gss.c:182:
+	dprintk("RPC: gss_destroy_cred \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#970: FILE: net/sunrpc/auth_gss/auth_gss.c:182:
+	dprintk("RPC: gss_destroy_cred \n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_create_cred', this function's name, in a string
#982: FILE: net/sunrpc/auth_gss/auth_gss.c:194:
+	dprintk("RPC: gss_create_cred for uid %d, flavor %d\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#985: FILE: net/sunrpc/auth_gss/auth_gss.c:197:
+	if (!(cred = kmalloc(sizeof(*cred), GFP_KERNEL)))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#992: FILE: net/sunrpc/auth_gss/auth_gss.c:204:
+	/*
+	 * Note: in order to force a call to call_refresh(), we deliberately

CHECK:SPACING: No space is necessary after a cast
#999: FILE: net/sunrpc/auth_gss/auth_gss.c:211:
+	return (struct rpc_cred *) cred;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_create_cred', this function's name, in a string
#1002: FILE: net/sunrpc/auth_gss/auth_gss.c:214:
+	dprintk("RPC: gss_create_cred failed\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1003: FILE: net/sunrpc/auth_gss/auth_gss.c:215:
+	if (cred) gss_destroy_cred((struct rpc_cred *)cred);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1014: FILE: net/sunrpc/auth_gss/auth_gss.c:226:
+/*
+* Marshal credentials.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1014: FILE: net/sunrpc/auth_gss/auth_gss.c:226:
+/*
+* Marshal credentials.

CHECK:SPACING: No space is necessary after a cast
#1020: FILE: net/sunrpc/auth_gss/auth_gss.c:232:
+	struct gss_cred	*cred = (struct gss_cred *) task->tk_msg.rpc_cred;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: net/sunrpc/auth_gss/auth_gss.c:238:
+^Iu32             *verfbase = req->rq_svec[0].iov_base; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1028: FILE: net/sunrpc/auth_gss/auth_gss.c:240:
+	struct xdr_netobj bufin,bufout;
 	                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_marshal', this function's name, in a string
#1031: FILE: net/sunrpc/auth_gss/auth_gss.c:243:
+	dprintk("RPC: gss_marshal\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1035: FILE: net/sunrpc/auth_gss/auth_gss.c:247:
+	 * the end of the credential. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_marshal', this function's name, in a string
#1044: FILE: net/sunrpc/auth_gss/auth_gss.c:256:
+		dprintk("Bad pseudoflavor %d in gss_marshal\n",

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: net/sunrpc/auth_gss/auth_gss.c:264:
+	*p++ = htonl((u32) RPC_GSS_VERSION);

CHECK:SPACING: No space is necessary after a cast
#1053: FILE: net/sunrpc/auth_gss/auth_gss.c:265:
+	*p++ = htonl((u32) ctx->gc_proc);

CHECK:SPACING: No space is necessary after a cast
#1054: FILE: net/sunrpc/auth_gss/auth_gss.c:266:
+	*p++ = htonl((u32) task->tk_gss_seqno);

CHECK:SPACING: No space is necessary after a cast
#1055: FILE: net/sunrpc/auth_gss/auth_gss.c:267:
+	*p++ = htonl((u32) service);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: net/sunrpc/auth_gss/auth_gss.c:279:
+^I^I^I       GSS_C_QOP_DEFAULT, $

ERROR:SPACING: space required before the open brace '{'
#1069: FILE: net/sunrpc/auth_gss/auth_gss.c:281:
+	if(maj_stat != 0){

ERROR:SPACING: space required before the open parenthesis '('
#1069: FILE: net/sunrpc/auth_gss/auth_gss.c:281:
+	if(maj_stat != 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1070: FILE: net/sunrpc/auth_gss/auth_gss.c:282:
+		printk("gss_marshal: gss_get_mic FAILED (%d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_marshal', this function's name, in a string
#1070: FILE: net/sunrpc/auth_gss/auth_gss.c:282:
+		printk("gss_marshal: gss_get_mic FAILED (%d)\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1072: FILE: net/sunrpc/auth_gss/auth_gss.c:284:
+		return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1079: FILE: net/sunrpc/auth_gss/auth_gss.c:291:
+/*
+* Refresh credentials. XXX - finish

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1079: FILE: net/sunrpc/auth_gss/auth_gss.c:291:
+/*
+* Refresh credentials. XXX - finish

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: net/sunrpc/auth_gss/auth_gss.c:304:
+^Istruct gss_cred *cred = (struct gss_cred *)task->tk_msg.rpc_cred; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1097: FILE: net/sunrpc/auth_gss/auth_gss.c:309:
+	u32		flav,len;
 	   		    ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_validate', this function's name, in a string
#1100: FILE: net/sunrpc/auth_gss/auth_gss.c:312:
+	dprintk("RPC: gss_validate\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1103: FILE: net/sunrpc/auth_gss/auth_gss.c:315:
+	if ((len = ntohl(*p++)) > RPC_MAX_AUTH_SIZE) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1104: FILE: net/sunrpc/auth_gss/auth_gss.c:316:
+                printk("RPC: giant verf size: %ld\n", (unsigned long) len);$

CHECK:SPACING: No space is necessary after a cast
#1104: FILE: net/sunrpc/auth_gss/auth_gss.c:316:
+                printk("RPC: giant verf size: %ld\n", (unsigned long) len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: net/sunrpc/auth_gss/auth_gss.c:316:
+                printk("RPC: giant verf size: %ld\n", (unsigned long) len);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1104: FILE: net/sunrpc/auth_gss/auth_gss.c:316:
+                printk("RPC: giant verf size: %ld\n", (unsigned long) len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: net/sunrpc/auth_gss/auth_gss.c:317:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: net/sunrpc/auth_gss/auth_gss.c:317:
+                return NULL;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_validate', this function's name, in a string
#1107: FILE: net/sunrpc/auth_gss/auth_gss.c:319:
+	dprintk("RPC: gss_validate: verifier flavor %d, len %d\n", flav, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1110: FILE: net/sunrpc/auth_gss/auth_gss.c:322:
+		printk("RPC: bad verf flavor: %ld\n", (unsigned long)flav);

CHECK:SPACING: No space is necessary after a cast
#1114: FILE: net/sunrpc/auth_gss/auth_gss.c:326:
+	bufin.data = (u8 *) &seq;

CHECK:SPACING: No space is necessary after a cast
#1116: FILE: net/sunrpc/auth_gss/auth_gss.c:328:
+	bufout.data = (u8 *) p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: net/sunrpc/auth_gss/auth_gss.c:331:
+^Iif ((code = gss_verify_mic(ctx->gc_gss_ctx, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1119: FILE: net/sunrpc/auth_gss/auth_gss.c:331:
+	if ((code = gss_verify_mic(ctx->gc_gss_ctx, 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_validate', this function's name, in a string
#1123: FILE: net/sunrpc/auth_gss/auth_gss.c:335:
+	dprintk("RPC: GSS gss_validate: gss_verify_mic succeeded.\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1145: FILE: net/sunrpc/auth_gss/auth_gss.c:357:
+extern void gss_svc_ctx_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1148: FILE: net/sunrpc/auth_gss/auth_gss.c:360:
+/*
+ * Initialize RPCSEC_GSS module

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1171: FILE: net/sunrpc/auth_gss/gss_generic_token.c:1:
+/*

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1183: FILE: net/sunrpc/auth_gss/gss_generic_token.c:13:
+/*
+ * Copyright 1993 by OpenVision Technologies, Inc.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: net/sunrpc/auth_gss/gss_generic_token.c:14:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1194: FILE: net/sunrpc/auth_gss/gss_generic_token.c:24:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1210: FILE: net/sunrpc/auth_gss/gss_generic_token.c:40:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1215: FILE: net/sunrpc/auth_gss/gss_generic_token.c:45:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1217: FILE: net/sunrpc/auth_gss/gss_generic_token.c:47:
+#define TWRITE_STR(ptr, str, len) \
+	memcpy((ptr), (char *) (str), (len)); \
+	(ptr) += (len);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1217: FILE: net/sunrpc/auth_gss/gss_generic_token.c:47:
+#define TWRITE_STR(ptr, str, len) \
+	memcpy((ptr), (char *) (str), (len)); \
+	(ptr) += (len);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#1217: FILE: net/sunrpc/auth_gss/gss_generic_token.c:47:
+#define TWRITE_STR(ptr, str, len) \
+	memcpy((ptr), (char *) (str), (len)); \
+	(ptr) += (len);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1217: FILE: net/sunrpc/auth_gss/gss_generic_token.c:47:
+#define TWRITE_STR(ptr, str, len) \
+	memcpy((ptr), (char *) (str), (len)); \
+	(ptr) += (len);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#1218: FILE: net/sunrpc/auth_gss/gss_generic_token.c:48:
+	memcpy((ptr), (char *) (str), (len)); \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1222: FILE: net/sunrpc/auth_gss/gss_generic_token.c:52:
+/* XXXX this code currently makes the assumption that a mech oid will
+   never be longer than 127 bytes.  This assumption is not inherent in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1224: FILE: net/sunrpc/auth_gss/gss_generic_token.c:54:
+   balloons unexpectedly. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1227: FILE: net/sunrpc/auth_gss/gss_generic_token.c:57:
+/* Each token looks like this:
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#1246: FILE: net/sunrpc/auth_gss/gss_generic_token.c:76:
+der_length_size( int length)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1248: FILE: net/sunrpc/auth_gss/gss_generic_token.c:78:
+	if (length < (1<<7))
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1250: FILE: net/sunrpc/auth_gss/gss_generic_token.c:80:
+	else if (length < (1<<8))
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1256: FILE: net/sunrpc/auth_gss/gss_generic_token.c:86:
+	else if (length < (1<<16))
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1258: FILE: net/sunrpc/auth_gss/gss_generic_token.c:88:
+	else if (length < (1<<24))
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1268: FILE: net/sunrpc/auth_gss/gss_generic_token.c:98:
+	if (length < (1<<7)) {
 	               ^

CHECK:SPACING: No space is necessary after a cast
#1269: FILE: net/sunrpc/auth_gss/gss_generic_token.c:99:
+		*(*buf)++ = (unsigned char) length;

CHECK:SPACING: No space is necessary after a cast
#1271: FILE: net/sunrpc/auth_gss/gss_generic_token.c:101:
+		*(*buf)++ = (unsigned char) (der_length_size(length)+127);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1271: FILE: net/sunrpc/auth_gss/gss_generic_token.c:101:
+		*(*buf)++ = (unsigned char) (der_length_size(length)+127);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1273: FILE: net/sunrpc/auth_gss/gss_generic_token.c:103:
+		if (length >= (1<<24))
 		                ^

CHECK:SPACING: No space is necessary after a cast
#1274: FILE: net/sunrpc/auth_gss/gss_generic_token.c:104:
+			*(*buf)++ = (unsigned char) (length>>24);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1274: FILE: net/sunrpc/auth_gss/gss_generic_token.c:104:
+			*(*buf)++ = (unsigned char) (length>>24);
 			                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1275: FILE: net/sunrpc/auth_gss/gss_generic_token.c:105:
+		if (length >= (1<<16))
 		                ^

CHECK:SPACING: No space is necessary after a cast
#1276: FILE: net/sunrpc/auth_gss/gss_generic_token.c:106:
+			*(*buf)++ = (unsigned char) ((length>>16)&0xff);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1276: FILE: net/sunrpc/auth_gss/gss_generic_token.c:106:
+			*(*buf)++ = (unsigned char) ((length>>16)&0xff);
 			                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1276: FILE: net/sunrpc/auth_gss/gss_generic_token.c:106:
+			*(*buf)++ = (unsigned char) ((length>>16)&0xff);
 			                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1278: FILE: net/sunrpc/auth_gss/gss_generic_token.c:108:
+		if (length >= (1<<8))
 		                ^

CHECK:SPACING: No space is necessary after a cast
#1279: FILE: net/sunrpc/auth_gss/gss_generic_token.c:109:
+			*(*buf)++ = (unsigned char) ((length>>8)&0xff);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1279: FILE: net/sunrpc/auth_gss/gss_generic_token.c:109:
+			*(*buf)++ = (unsigned char) ((length>>8)&0xff);
 			                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1279: FILE: net/sunrpc/auth_gss/gss_generic_token.c:109:
+			*(*buf)++ = (unsigned char) ((length>>8)&0xff);
 			                                        ^

CHECK:SPACING: No space is necessary after a cast
#1280: FILE: net/sunrpc/auth_gss/gss_generic_token.c:110:
+		*(*buf)++ = (unsigned char) (length&0xff);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1280: FILE: net/sunrpc/auth_gss/gss_generic_token.c:110:
+		*(*buf)++ = (unsigned char) (length&0xff);
 		                                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1285: FILE: net/sunrpc/auth_gss/gss_generic_token.c:115:
+/* returns decoded length, or < 0 on failure.  Advances buf and
+   decrements bufsize */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1285: FILE: net/sunrpc/auth_gss/gss_generic_token.c:115:
+   decrements bufsize */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1298: FILE: net/sunrpc/auth_gss/gss_generic_token.c:128:
+		if ((sf &= 0x7f) > ((*bufsize)-1))
 		                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1298: FILE: net/sunrpc/auth_gss/gss_generic_token.c:128:
+		if ((sf &= 0x7f) > ((*bufsize)-1))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1304: FILE: net/sunrpc/auth_gss/gss_generic_token.c:134:
+			ret = (ret<<8) + (*(*buf)++);
 			          ^

CHECK:SPACING: No space is necessary after a cast
#1320: FILE: net/sunrpc/auth_gss/gss_generic_token.c:150:
+	body_size += 4 + (int) mech->len;         /* NEED overflow check */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1325: FILE: net/sunrpc/auth_gss/gss_generic_token.c:155:
+/* fills in a buffer with the token header.  The buffer is assumed to
+   be the right size.  buf is advanced past the token header */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1325: FILE: net/sunrpc/auth_gss/gss_generic_token.c:155:
+   be the right size.  buf is advanced past the token header */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1329: FILE: net/sunrpc/auth_gss/gss_generic_token.c:159:
+g_make_token_header(struct xdr_netobj *mech, int body_size, unsigned char **buf,
+		int tok_type)

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: net/sunrpc/auth_gss/gss_generic_token.c:164:
+	*(*buf)++ = (unsigned char) mech->len;

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: net/sunrpc/auth_gss/gss_generic_token.c:165:
+	TWRITE_STR(*buf, mech->data, ((int) mech->len));

CHECK:SPACING: No space is necessary after a cast
#1336: FILE: net/sunrpc/auth_gss/gss_generic_token.c:166:
+	*(*buf)++ = (unsigned char) ((tok_type>>8)&0xff);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1336: FILE: net/sunrpc/auth_gss/gss_generic_token.c:166:
+	*(*buf)++ = (unsigned char) ((tok_type>>8)&0xff);
 	                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1336: FILE: net/sunrpc/auth_gss/gss_generic_token.c:166:
+	*(*buf)++ = (unsigned char) ((tok_type>>8)&0xff);
 	                                          ^

CHECK:SPACING: No space is necessary after a cast
#1337: FILE: net/sunrpc/auth_gss/gss_generic_token.c:167:
+	*(*buf)++ = (unsigned char) (tok_type&0xff);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1337: FILE: net/sunrpc/auth_gss/gss_generic_token.c:167:
+	*(*buf)++ = (unsigned char) (tok_type&0xff);
 	                                     ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1341: FILE: net/sunrpc/auth_gss/gss_generic_token.c:171:
+/*
+ * Given a buffer containing a token, reads and verifies the token,

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1357: FILE: net/sunrpc/auth_gss/gss_generic_token.c:187:
+	if ((toksize-=1) < 0)
 	            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1357: FILE: net/sunrpc/auth_gss/gss_generic_token.c:187:
+	if ((toksize-=1) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1362: FILE: net/sunrpc/auth_gss/gss_generic_token.c:192:
+	if ((seqsize = der_read_length(&buf, &toksize)) < 0)

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1368: FILE: net/sunrpc/auth_gss/gss_generic_token.c:198:
+	if ((toksize-=1) < 0)
 	            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1368: FILE: net/sunrpc/auth_gss/gss_generic_token.c:198:
+	if ((toksize-=1) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1372: FILE: net/sunrpc/auth_gss/gss_generic_token.c:202:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: net/sunrpc/auth_gss/gss_generic_token.c:202:
+ $

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1373: FILE: net/sunrpc/auth_gss/gss_generic_token.c:203:
+	if ((toksize-=1) < 0)
 	            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1373: FILE: net/sunrpc/auth_gss/gss_generic_token.c:203:
+	if ((toksize-=1) < 0)

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1377: FILE: net/sunrpc/auth_gss/gss_generic_token.c:207:
+	if ((toksize-=toid.len) < 0)
 	            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1377: FILE: net/sunrpc/auth_gss/gss_generic_token.c:207:
+	if ((toksize-=toid.len) < 0)

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1380: FILE: net/sunrpc/auth_gss/gss_generic_token.c:210:
+	buf+=toid.len;
 	   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1382: FILE: net/sunrpc/auth_gss/gss_generic_token.c:212:
+^Iif (! g_OID_equal(&toid, mech)) $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1382: FILE: net/sunrpc/auth_gss/gss_generic_token.c:212:
+	if (! g_OID_equal(&toid, mech)) 
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1384: FILE: net/sunrpc/auth_gss/gss_generic_token.c:214:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: net/sunrpc/auth_gss/gss_generic_token.c:214:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1386: FILE: net/sunrpc/auth_gss/gss_generic_token.c:216:
+   /* G_WRONG_MECH is not returned immediately because it's more important
+      to return G_BAD_TOK_HEADER if the token header is in fact bad */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1386: FILE: net/sunrpc/auth_gss/gss_generic_token.c:216:
+      to return G_BAD_TOK_HEADER if the token header is in fact bad */

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1388: FILE: net/sunrpc/auth_gss/gss_generic_token.c:218:
+	if ((toksize-=2) < 0)
 	            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1388: FILE: net/sunrpc/auth_gss/gss_generic_token.c:218:
+	if ((toksize-=2) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1394: FILE: net/sunrpc/auth_gss/gss_generic_token.c:224:
+^Iif ((*buf++ != ((tok_type>>8)&0xff)) || (*buf++ != (tok_type&0xff))) $

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1394: FILE: net/sunrpc/auth_gss/gss_generic_token.c:224:
+	if ((*buf++ != ((tok_type>>8)&0xff)) || (*buf++ != (tok_type&0xff))) 
 	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1394: FILE: net/sunrpc/auth_gss/gss_generic_token.c:224:
+	if ((*buf++ != ((tok_type>>8)&0xff)) || (*buf++ != (tok_type&0xff))) 
 	                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1394: FILE: net/sunrpc/auth_gss/gss_generic_token.c:224:
+	if ((*buf++ != ((tok_type>>8)&0xff)) || (*buf++ != (tok_type&0xff))) 
 	                                                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1406: FILE: net/sunrpc/auth_gss/gss_generic_token.c:236:
+ * the parameter mech. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1408: FILE: net/sunrpc/auth_gss/gss_generic_token.c:238:
+g_get_mech_oid(struct xdr_netobj *mech, struct xdr_netobj * in_buf)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1412: FILE: net/sunrpc/auth_gss/gss_generic_token.c:242:
+	int ret=0;
 	       ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1415: FILE: net/sunrpc/auth_gss/gss_generic_token.c:245:
+	if ((len-=1) < 0)
 	        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1415: FILE: net/sunrpc/auth_gss/gss_generic_token.c:245:
+	if ((len-=1) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1420: FILE: net/sunrpc/auth_gss/gss_generic_token.c:250:
+	if ((seqsize = der_read_length(&buf, &len)) < 0)

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1423: FILE: net/sunrpc/auth_gss/gss_generic_token.c:253:
+	if ((len-=1) < 0)
 	        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1423: FILE: net/sunrpc/auth_gss/gss_generic_token.c:253:
+	if ((len-=1) < 0)

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1428: FILE: net/sunrpc/auth_gss/gss_generic_token.c:258:
+	if ((len-=1) < 0)
 	        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1428: FILE: net/sunrpc/auth_gss/gss_generic_token.c:258:
+	if ((len-=1) < 0)

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1432: FILE: net/sunrpc/auth_gss/gss_generic_token.c:262:
+	if ((len-=mech->len) < 0)
 	        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1432: FILE: net/sunrpc/auth_gss/gss_generic_token.c:262:
+	if ((len-=mech->len) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1434: FILE: net/sunrpc/auth_gss/gss_generic_token.c:264:
+^Iif (!(mech->data = kmalloc(mech->len, GFP_KERNEL))) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1434: FILE: net/sunrpc/auth_gss/gss_generic_token.c:264:
+	if (!(mech->data = kmalloc(mech->len, GFP_KERNEL))) 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1444: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1452: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:9:
+ *  Redistribution and use in source and binary forms, with or without $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1459: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:16:
+ *     notice, this list of conditions and the following disclaimer in the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1503: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:60:
+ * from underneath us while we hold the registered_mech_lock.  */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1506: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:63:
+gss_mech_register(struct xdr_netobj * mech_type, struct gss_api_ops * ops)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1506: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:63:
+gss_mech_register(struct xdr_netobj * mech_type, struct gss_api_ops * ops)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1510: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:67:
+	if (!(gm = kmalloc(sizeof(*gm), GFP_KERNEL))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1511: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:68:
+		printk("Failed to allocate memory in gss_mech_register");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_mech_register', this function's name, in a string
#1511: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:68:
+		printk("Failed to allocate memory in gss_mech_register");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1515: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:72:
+	if (!(gm->gm_oid.data = kmalloc(mech_type->len, GFP_KERNEL))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1516: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:73:
+		printk("Failed to allocate memory in gss_mech_register");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_mech_register', this function's name, in a string
#1516: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:73:
+		printk("Failed to allocate memory in gss_mech_register");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:80:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_mech_register', this function's name, in a string
#1527: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:84:
+	dprintk("RPC: gss_mech_register: registered mechanism with oid:\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1536: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:93:
+{
+

WARNING:SPLIT_STRING: quoted string split across lines
#1543: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:100:
+		dprintk("RPC: We just unregistered a gss_mechanism which"
+				" someone is still using.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1589: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:146:
+^Istruct gss_api_mech ^I*pos, *gm = NULL;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_mech_get_by_OID', this function's name, in a string
#1591: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:148:
+	dprintk("RPC: gss_mech_get_by_OID searching for mechanism with OID:\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pos->gm_oid.len == mech_type->len'
#1595: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:152:
+		if ((pos->gm_oid.len == mech_type->len)
+			&& !memcmp(pos->gm_oid.data, mech_type->data,
+							mech_type->len)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1596: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:153:
+		if ((pos->gm_oid.len == mech_type->len)
+			&& !memcmp(pos->gm_oid.data, mech_type->data,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_mech_get_by_OID', this function's name, in a string
#1603: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:160:
+	dprintk("RPC: gss_mech_get_by_OID %s it\n", gm ? "found" : "didn't find");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1608: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:165:
+gss_mech_put(struct gss_api_mech * gm)

ERROR:SPACING: spaces required around that '>' (ctx:WxV)
#1611: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:168:
+		if (gm->gm_oid.len >0)
 		                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1621: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:178:
+ * as easy for now to pass it in. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1627: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:184:
+	if (!(*ctx_id = kmalloc(sizeof(**ctx_id), GFP_KERNEL)))

WARNING:TABSTOP: Statements should start on a tabstop
#1644: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:201:
+	 return context_handle->mech_type->gm_ops

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1655: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:212:
+gss_verify_mic(struct gss_ctx		*context_handle,
+		struct xdr_netobj	*signbuf,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1668: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:225:
+ * bother returning an output token, since it would never be used anyway. */

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1673: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:230:
+	dprintk("gss_delete_sec_context deleting %p\n",*context_handle);
 	                                              ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1673: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:230:
+	dprintk("gss_delete_sec_context deleting %p\n",*context_handle);
 	                                               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_delete_sec_context', this function's name, in a string
#1673: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:230:
+	dprintk("gss_delete_sec_context deleting %p\n",*context_handle);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1684: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:241:
+	*context_handle=NULL;
 	               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1691: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:1:
+/*

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1704: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:14:
+/*
+ * Copyright 1993 by OpenVision Technologies, Inc.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1723: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:33:
+ */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1756: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:66:
+ * a better way to do all this. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1760: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:70:
+gss_register_triple(u32 pseudoflavor, struct gss_api_mech *mech,
+			  u32 qop, u32 service)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1764: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:74:
+	if (!(triple = kmalloc(sizeof(*triple), GFP_KERNEL))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1765: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:75:
+		printk("Alloc failed in gss_register_triple");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_register_triple', this function's name, in a string
#1765: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:75:
+		printk("Alloc failed in gss_register_triple");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1775: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:85:
+		printk("Registered pseudoflavor %d again\n", pseudoflavor);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1796: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:106:
+	if (!(triple = do_lookup_triple_by_pseudoflavor(pseudoflavor))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1798: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:108:
+		printk("Can't unregister unregistered pseudoflavor %d\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1808: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:118:
+
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1811: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:121:
+print_sec_triple(struct xdr_netobj *oid,u32 qop,u32 service)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1811: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:121:
+print_sec_triple(struct xdr_netobj *oid,u32 qop,u32 service)
                                                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'print_sec_triple', this function's name, in a string
#1813: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:123:
+	dprintk("RPC: print_sec_triple:\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1814: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:124:
+	dprintk("                     oid_len %d\n  oid :\n",oid->len);
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:125:
+	print_hexl((u32 *)oid->data,oid->len,0);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:125:
+	print_hexl((u32 *)oid->data,oid->len,0);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1816: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:126:
+	dprintk("                     qop %d\n",qop);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1817: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:127:
+	dprintk("                     service %d\n",service);
 	                                           ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_cmp_triples', this function's name, in a string
#1837: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:147:
+	dprintk("RPC: gss_cmp_triples \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1837: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:147:
+	dprintk("RPC: gss_cmp_triples \n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1838: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:148:
+	print_sec_triple(&oid,qop,service);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1838: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:148:
+	print_sec_triple(&oid,qop,service);
 	                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qop == triple->qop'
#1842: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:152:
+		if((g_OID_equal(&oid, &triple->mech->gm_oid))
+		    && (qop == triple->qop)
+		    && (service == triple->service)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'service == triple->service'
#1842: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:152:
+		if((g_OID_equal(&oid, &triple->mech->gm_oid))
+		    && (qop == triple->qop)
+		    && (service == triple->service)) {

ERROR:SPACING: space required before the open parenthesis '('
#1842: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:152:
+		if((g_OID_equal(&oid, &triple->mech->gm_oid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1843: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:153:
+		if((g_OID_equal(&oid, &triple->mech->gm_oid))
+		    && (qop == triple->qop)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1844: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:154:
+		    && (qop == triple->qop)
+		    && (service == triple->service)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_cmp_triples', this function's name, in a string
#1850: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:160:
+	dprintk("RPC: gss_cmp_triples return %d\n", pseudoflavor);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1864: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:174:
+ * doesn't give any guarantees.) */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1873: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:183:
+	return (triple ? 1 : 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_pseudoflavor_to_service', this function's name, in a string
#1885: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:195:
+		dprintk("RPC: gss_pseudoflavor_to_service called with"

WARNING:SPLIT_STRING: quoted string split across lines
#1886: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:196:
+		dprintk("RPC: gss_pseudoflavor_to_service called with"
+			" unsupported pseudoflavor %d\n", pseudoflavor);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1892: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:202:
+struct gss_api_mech *
+gss_pseudoflavor_to_mech(u32 pseudoflavor) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_pseudoflavor_to_mech', this function's name, in a string
#1903: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:213:
+		dprintk("RPC: gss_pseudoflavor_to_mech called with"

WARNING:SPLIT_STRING: quoted string split across lines
#1904: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:214:
+		dprintk("RPC: gss_pseudoflavor_to_mech called with"
+			" unsupported pseudoflavor %d\n", pseudoflavor);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1909: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:219:
+gss_pseudoflavor_to_mechOID(u32 pseudoflavor, struct xdr_netobj * oid)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_pseudoflavor_to_mechOID', this function's name, in a string
#1915: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:225:
+		dprintk("RPC: gss_pseudoflavor_to_mechOID called with"

WARNING:SPLIT_STRING: quoted string split across lines
#1916: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:226:
+		dprintk("RPC: gss_pseudoflavor_to_mechOID called with"
+			" unsupported pseudoflavor %d\n", pseudoflavor);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1917: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:227:
+^I^I        return -1;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1920: FILE: net/sunrpc/auth_gss/gss_pseudoflavors.c:230:
+	if (!(oid->data = kmalloc(oid->len, GFP_KERNEL)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1945: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:1:
+#define __NO_VERSION__

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1960: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:16:
+EXPORT_SYMBOL(gss_unregister_triple);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1961: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:17:
+EXPORT_SYMBOL(gss_cmp_triples);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1962: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:18:
+EXPORT_SYMBOL(gss_pseudoflavor_to_mechOID);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1963: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:19:
+EXPORT_SYMBOL(gss_pseudoflavor_supported);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1964: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:20:
+EXPORT_SYMBOL(gss_pseudoflavor_to_service);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1968: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:24:
+EXPORT_SYMBOL(gss_mech_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1969: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:25:
+EXPORT_SYMBOL(gss_mech_get_by_OID);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1970: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:26:
+EXPORT_SYMBOL(gss_mech_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1974: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:30:
+EXPORT_SYMBOL(g_verify_token_header);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1975: FILE: net/sunrpc/auth_gss/sunrpcgss_syms.c:31:
+EXPORT_SYMBOL(g_token_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2062: FILE: net/sunrpc/sunrpc_syms.c:72:
+EXPORT_SYMBOL(rpcauth_init_credcache);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 107 errors, 149 warnings, 91 checks, 1919 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
