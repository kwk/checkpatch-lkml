WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
ChangeSet 1.1608.97.3, 2004/03/10 14:23:19-08:00, lxiep@ltcfwd.linux.ibm.com

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#41: 
--- a/drivers/pci/hotplug/Makefile	Fri Mar 19 15:21:26 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: drivers/pci/hotplug/rpadlpar_core.c:54:
+^Ifor (child = of_get_next_child(parent, NULL);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: drivers/pci/hotplug/rpadlpar_core.c:56:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#72: FILE: drivers/pci/hotplug/rpadlpar_core.c:56:
+	     child; child = of_get_next_child(parent, child)) {
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: drivers/pci/hotplug/rpadlpar_core.c:58:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#109: FILE: drivers/pci/hotplug/rpadlpar_core.c:158:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#121: FILE: drivers/pci/hotplug/rpadlpar_core.c:188:
+			__FUNCTION__, dev->hdr_type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#130: FILE: drivers/pci/hotplug/rpadlpar_core.c:204:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#139: FILE: drivers/pci/hotplug/rpadlpar_core.c:212:
+			__FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#154: FILE: drivers/pci/hotplug/rpadlpar_core.c:227:
+		printk(KERN_ERR "%s: unable to add bus %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#154: FILE: drivers/pci/hotplug/rpadlpar_core.c:227:
+		printk(KERN_ERR "%s: unable to add bus %s\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: drivers/pci/hotplug/rpadlpar_core.c:228:
+		printk(KERN_ERR "%s: unable to add bus %s\n", __FUNCTION__,
+			drc_name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#194: FILE: drivers/pci/hotplug/rpadlpar_core.c:265:
+		if (dn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#196: FILE: drivers/pci/hotplug/rpadlpar_core.c:267:
+		else {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#208: FILE: drivers/pci/hotplug/rpadlpar_core.c:276:
+			__FUNCTION__, drc_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#231: FILE: drivers/pci/hotplug/rpadlpar_core.c:299:
+		printk(KERN_ERR "%s: unable to remove hotplug slot %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/pci/hotplug/rpadlpar_core.c:300:
+		printk(KERN_ERR "%s: unable to remove hotplug slot %s\n",
+			__FUNCTION__, drc_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#232: FILE: drivers/pci/hotplug/rpadlpar_core.c:300:
+			__FUNCTION__, drc_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#282: FILE: drivers/pci/hotplug/rpadlpar_core.c:328:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#292: FILE: drivers/pci/hotplug/rpadlpar_core.c:335:
+			__FUNCTION__, drc_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#301: FILE: drivers/pci/hotplug/rpadlpar_core.c:342:
+			__FUNCTION__, drc_name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/pci/hotplug/rpadlpar_core.c:368:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: drivers/pci/hotplug/rpadlpar_core.c:374:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#334: FILE: drivers/pci/hotplug/rpadlpar_core.c:375:
+	switch (slot->dev_type) {
+		case PCI_DEV:
[...]
+		case VIO_DEV:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: drivers/pci/hotplug/rpadlpar_core.c:405:
+			__FUNCTION__);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: drivers/pci/hotplug/rpaphp.h:111:
+extern int rpaphp_enable_pci_slot(struct slot *slot);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: drivers/pci/hotplug/rpaphp.h:112:
+extern int register_pci_slot(struct slot *slot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: drivers/pci/hotplug/rpaphp.h:113:
+extern int rpaphp_unconfig_pci_adapter(struct slot *slot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: drivers/pci/hotplug/rpaphp.h:114:
+extern int rpaphp_get_pci_adapter_status(struct slot *slot, int is_init, u8 * value);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: drivers/pci/hotplug/rpaphp.h:114:
+extern int rpaphp_get_pci_adapter_status(struct slot *slot, int is_init, u8 * value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: drivers/pci/hotplug/rpaphp.h:117:
+extern int rpaphp_add_slot(struct device_node *dn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: drivers/pci/hotplug/rpaphp.h:118:
+extern int rpaphp_remove_slot(struct slot *slot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#475: FILE: drivers/pci/hotplug/rpaphp.h:121:
+extern int rpaphp_get_vio_adapter_status(struct slot *slot, int is_init, u8 * value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: drivers/pci/hotplug/rpaphp.h:121:
+extern int rpaphp_get_vio_adapter_status(struct slot *slot, int is_init, u8 * value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: drivers/pci/hotplug/rpaphp.h:122:
+extern int rpaphp_unconfig_vio_adapter(struct slot *slot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: drivers/pci/hotplug/rpaphp.h:123:
+extern int register_vio_slot(struct device_node *dn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: drivers/pci/hotplug/rpaphp.h:124:
+extern int rpaphp_enable_vio_slot(struct slot *slot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: drivers/pci/hotplug/rpaphp.h:127:
+extern void dealloc_slot_struct(struct slot *slot);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#482: FILE: drivers/pci/hotplug/rpaphp.h:128:
+extern struct slot *alloc_slot_struct(struct device_node *dn, int drc_index, char *drc_name, int power_domain);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: drivers/pci/hotplug/rpaphp.h:128:
+extern struct slot *alloc_slot_struct(struct device_node *dn, int drc_index, char *drc_name, int power_domain);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: drivers/pci/hotplug/rpaphp.h:129:
+extern int register_slot(struct slot *slot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: drivers/pci/hotplug/rpaphp.h:130:
+extern int rpaphp_get_power_status(struct slot *slot, u8 * value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#484: FILE: drivers/pci/hotplug/rpaphp.h:130:
+extern int rpaphp_get_power_status(struct slot *slot, u8 * value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#485: FILE: drivers/pci/hotplug/rpaphp.h:131:
+extern int rpaphp_set_attention_status(struct slot *slot, u8 status);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: drivers/pci/hotplug/rpaphp.h:132:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: drivers/pci/hotplug/rpaphp_core.c:61:
+static int get_power_status(struct hotplug_slot *slot, u8 * value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#521: FILE: drivers/pci/hotplug/rpaphp_core.c:62:
+static int get_attention_status(struct hotplug_slot *slot, u8 * value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#522: FILE: drivers/pci/hotplug/rpaphp_core.c:63:
+static int get_adapter_status(struct hotplug_slot *slot, u8 * value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#577: FILE: drivers/pci/hotplug/rpaphp_core.c:79:
+static inline struct slot *get_slot (struct hotplug_slot *hotplug_slot, const char *function)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#691: FILE: drivers/pci/hotplug/rpaphp_core.c:135:
+static int get_power_status(struct hotplug_slot *hotplug_slot, u8 * value)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#708: FILE: drivers/pci/hotplug/rpaphp_core.c:154:
+static int get_attention_status(struct hotplug_slot *hotplug_slot, u8 * value)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#772: FILE: drivers/pci/hotplug/rpaphp_core.c:168:
+static int get_adapter_status(struct hotplug_slot *hotplug_slot, u8 * value)

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_33MHz>
#845: FILE: drivers/pci/hotplug/rpaphp_core.c:206:
+		*value = PCI_SPEED_33MHz;	/* speed for case 1-6 */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_66MHz>
#849: FILE: drivers/pci/hotplug/rpaphp_core.c:210:
+		*value = PCI_SPEED_66MHz;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_66MHz_PCIX>
#853: FILE: drivers/pci/hotplug/rpaphp_core.c:214:
+		*value = PCI_SPEED_66MHz_PCIX;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_100MHz_PCIX>
#857: FILE: drivers/pci/hotplug/rpaphp_core.c:218:
+		*value = PCI_SPEED_100MHz_PCIX;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_133MHz_PCIX>
#861: FILE: drivers/pci/hotplug/rpaphp_core.c:222:
+		*value = PCI_SPEED_133MHz_PCIX;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1048: FILE: drivers/pci/hotplug/rpaphp_core.c:250:
+	dbg("%s - Entry: slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1062: FILE: drivers/pci/hotplug/rpaphp_core.c:264:
+	dbg("%s - Exit: rc[%d]\n", __FUNCTION__, retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: drivers/pci/hotplug/rpaphp_core.c:269:
+static int is_php_dn(struct device_node *dn, int **indexes, int **names, int **types,
+	  int **power_domains)

CHECK:SPACING: No space is necessary after a cast
#1071: FILE: drivers/pci/hotplug/rpaphp_core.c:271:
+	*indexes = (int *) get_property(dn, "ibm,drc-indexes", NULL);

CHECK:SPACING: No space is necessary after a cast
#1078: FILE: drivers/pci/hotplug/rpaphp_core.c:275:
+	*names = (int *) get_property(dn, "ibm,drc-names", NULL);

CHECK:SPACING: No space is necessary after a cast
#1085: FILE: drivers/pci/hotplug/rpaphp_core.c:279:
+	*types = (int *) get_property(dn, "ibm,drc-types", NULL);

CHECK:SPACING: No space is necessary after a cast
#1093: FILE: drivers/pci/hotplug/rpaphp_core.c:283:
+	*power_domains = (int *) get_property(dn,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1139: FILE: drivers/pci/hotplug/rpaphp_core.c:290:
+	return (1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1326: FILE: drivers/pci/hotplug/rpaphp_core.c:310:
+	dbg("Entry %s: dn->full_name=%s\n", __FUNCTION__, dn->full_name);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1337: FILE: drivers/pci/hotplug/rpaphp_core.c:321:
+	    is_php_dn(dn, &indexes, &names, &types, &power_domains)) {
+

CHECK:SPACING: No space is necessary after a cast
#1338: FILE: drivers/pci/hotplug/rpaphp_core.c:322:
+		name = (char *) &names[1];

CHECK:SPACING: No space is necessary after a cast
#1339: FILE: drivers/pci/hotplug/rpaphp_core.c:323:
+		type = (char *) &types[1];

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1343: FILE: drivers/pci/hotplug/rpaphp_core.c:327:
+			if (!(slot = alloc_slot_struct(dn, indexes[i + 1], name,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1348: FILE: drivers/pci/hotplug/rpaphp_core.c:332:
+			slot->type = simple_strtoul(type, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:INDENTED_LABEL: labels should not be indented
#1355: FILE: drivers/pci/hotplug/rpaphp_core.c:339:
+      exit:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1358: FILE: drivers/pci/hotplug/rpaphp_core.c:341:
+	    __FUNCTION__, num_slots, retval);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1408: FILE: drivers/pci/hotplug/rpaphp_core.c:378:
+^I * memory will be freed in release_slot callback. $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1464: FILE: drivers/pci/hotplug/rpaphp_core.c:418:
+		dbg("%s: %s is already enabled\n", __FUNCTION__, slot->name);

WARNING:INDENTED_LABEL: labels should not be indented
#1523: FILE: drivers/pci/hotplug/rpaphp_core.c:435:
+      exit:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1524: FILE: drivers/pci/hotplug/rpaphp_core.c:436:
+	dbg("%s - Exit: rc[%d]\n", __FUNCTION__, retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1542: FILE: drivers/pci/hotplug/rpaphp_core.c:448:
+	dbg("%s - Entry: slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1548: FILE: drivers/pci/hotplug/rpaphp_core.c:451:
+		dbg("%s: %s is already disabled\n", __FUNCTION__, slot->name);

WARNING:INDENTED_LABEL: labels should not be indented
#1568: FILE: drivers/pci/hotplug/rpaphp_core.c:470:
+      exit:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1569: FILE: drivers/pci/hotplug/rpaphp_core.c:471:
+	dbg("%s - Exit: rc[%d]\n", __FUNCTION__, retval);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1599: FILE: drivers/pci/hotplug/rpaphp_pci.c:36:
+	sprintf(bus_id, "%04x:%02x:%02x.%d",dn->phb->global_number,
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1604: FILE: drivers/pci/hotplug/rpaphp_pci.c:39:
+^Idbg("Enter rpaphp_find_pci_dev() full_name=%s bus_id=%s\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: drivers/pci/hotplug/rpaphp_pci.c:40:
+	dbg("Enter rpaphp_find_pci_dev() full_name=%s bus_id=%s\n", 
+		dn->full_name, bus_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1606: FILE: drivers/pci/hotplug/rpaphp_pci.c:41:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#1607: FILE: drivers/pci/hotplug/rpaphp_pci.c:42:
+	while ((dev = pci_find_device(PCI_ANY_ID, PCI_ANY_ID, dev)) != NULL) {
+               if (!strcmp(pci_name(dev), bus_id)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1608: FILE: drivers/pci/hotplug/rpaphp_pci.c:43:
+               if (!strcmp(pci_name(dev), bus_id)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1608: FILE: drivers/pci/hotplug/rpaphp_pci.c:43:
+               if (!strcmp(pci_name(dev), bus_id)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#1608: FILE: drivers/pci/hotplug/rpaphp_pci.c:43:
+               if (!strcmp(pci_name(dev), bus_id)) {
 			retval_dev = dev;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1619: FILE: drivers/pci/hotplug/rpaphp_pci.c:53:
+EXPORT_SYMBOL_GPL(rpaphp_find_pci_dev);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1660: FILE: drivers/pci/hotplug/rpaphp_pci.c:96:
+		if (rc == NEED_POWER || rc == PWR_ONLY) {
[...]
+		} else if (rc == ERR_SENSE_USE)
[...]
+		else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1662: FILE: drivers/pci/hotplug/rpaphp_pci.c:98:
+			    __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1664: FILE: drivers/pci/hotplug/rpaphp_pci.c:100:
+^I^I^I/* some slots have to be powered up $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1671: FILE: drivers/pci/hotplug/rpaphp_pci.c:107:
+				    __FUNCTION__, slot->name, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1677: FILE: drivers/pci/hotplug/rpaphp_pci.c:113:
+			info("%s: slot is unusable\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1679: FILE: drivers/pci/hotplug/rpaphp_pci.c:115:
+			err("%s failed to get sensor state\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1686: FILE: drivers/pci/hotplug/rpaphp_pci.c:122:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1692: FILE: drivers/pci/hotplug/rpaphp_pci.c:128:
+int rpaphp_get_pci_adapter_status(struct slot *slot, int is_init, u8 * value)

CHECK:BRACES: Unbalanced braces around else statement
#1705: FILE: drivers/pci/hotplug/rpaphp_pci.c:141:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1706: FILE: drivers/pci/hotplug/rpaphp_pci.c:142:
+			if (!slot->dn->child)
[...]
+			else if (rpaphp_find_pci_dev(slot->dn->child))
[...]
+			else {
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1708: FILE: drivers/pci/hotplug/rpaphp_pci.c:144:
+				    __FUNCTION__, slot->dn->full_name);

CHECK:BRACES: Unbalanced braces around else statement
#1711: FILE: drivers/pci/hotplug/rpaphp_pci.c:147:
+			else {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1712: FILE: drivers/pci/hotplug/rpaphp_pci.c:148:
+				dbg("%s: can't find pdev of adapter in slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1712: FILE: drivers/pci/hotplug/rpaphp_pci.c:148:
+				dbg("%s: can't find pdev of adapter in slot[%s]\n", __FUNCTION__, slot->name);

WARNING:INDENTED_LABEL: labels should not be indented
#1721: FILE: drivers/pci/hotplug/rpaphp_pci.c:157:
+      exit:

WARNING:LINE_SPACING: Missing a blank line after declarations
#1742: FILE: drivers/pci/hotplug/rpaphp_pci.c:178:
+				struct resource *r = &dev->resource[i];
+				if (r->parent || !r->start || !r->flags)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#1760: FILE: drivers/pci/hotplug/rpaphp_pci.c:196:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1765: FILE: drivers/pci/hotplug/rpaphp_pci.c:201:
+ rpaphp_pci_config_dn() will recursively configure all devices under the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1765: FILE: drivers/pci/hotplug/rpaphp_pci.c:201:
+/*****************************************************************************
+ rpaphp_pci_config_dn() will recursively configure all devices under the 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1795: FILE: drivers/pci/hotplug/rpaphp_pci.c:231:
+			err("%s: could not add second bus\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1813: FILE: drivers/pci/hotplug/rpaphp_pci.c:249:
+	dbg("Entry %s: slot[%s]\n", __FUNCTION__, slot->name);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1816: FILE: drivers/pci/hotplug/rpaphp_pci.c:252:
+	if (slot->bridge) {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1819: FILE: drivers/pci/hotplug/rpaphp_pci.c:255:
+			err("%s: can't find bus structure\n", __FUNCTION__);

WARNING:INDENTED_LABEL: labels should not be indented
#1831: FILE: drivers/pci/hotplug/rpaphp_pci.c:267:
+      exit:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1832: FILE: drivers/pci/hotplug/rpaphp_pci.c:268:
+	dbg("Exit %s: pci_dev %s\n", __FUNCTION__, dev ? "found" : "not found");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1840: FILE: drivers/pci/hotplug/rpaphp_pci.c:276:
+	dbg("Entry %s: slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1842: FILE: drivers/pci/hotplug/rpaphp_pci.c:278:
+		info("%s: no card in slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1851: FILE: drivers/pci/hotplug/rpaphp_pci.c:287:
+	info("%s: adapter in slot[%s] unconfigured.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1854: FILE: drivers/pci/hotplug/rpaphp_pci.c:290:
+	dbg("Exit %s, rc=0x%x\n", __FUNCTION__, retval);

WARNING:TYPO_SPELLING: 'Initilize' may be misspelled - perhaps 'Initialize'?
#1860: FILE: drivers/pci/hotplug/rpaphp_pci.c:296:
+	dbg("%s Initilize the PCI slot's hotplug->info structure ...\n",
 	        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1861: FILE: drivers/pci/hotplug/rpaphp_pci.c:297:
+	    __FUNCTION__);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'slot->hotplug_slot->info->adapter_status'
#1865: FILE: drivers/pci/hotplug/rpaphp_pci.c:301:
+				      &slot->hotplug_slot->info->
+				      adapter_status);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1868: FILE: drivers/pci/hotplug/rpaphp_pci.c:304:
+		    __FUNCTION__, slot->dn->full_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1879: FILE: drivers/pci/hotplug/rpaphp_pci.c:315:
+		dbg("%s: no pci_dev for bridge dn %s\n", __FUNCTION__, slot->name);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1892: FILE: drivers/pci/hotplug/rpaphp_pci.c:328:
+			err("%s: slot[%s]'s device_node doesn't have child for adapter\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1892: FILE: drivers/pci/hotplug/rpaphp_pci.c:328:
+			err("%s: slot[%s]'s device_node doesn't have child for adapter\n", __FUNCTION__, slot->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1899: FILE: drivers/pci/hotplug/rpaphp_pci.c:335:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1901: FILE: drivers/pci/hotplug/rpaphp_pci.c:337:
+^I^I^I/* DLPAR add as opposed to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1902: FILE: drivers/pci/hotplug/rpaphp_pci.c:338:
+			 * boot time */

WARNING:INDENTED_LABEL: labels should not be indented
#1919: FILE: drivers/pci/hotplug/rpaphp_pci.c:355:
+      exit_rc:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1932: FILE: drivers/pci/hotplug/rpaphp_pci.c:368:
+	dbg("%s: sensor state[%d]\n", __FUNCTION__, state);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1935: FILE: drivers/pci/hotplug/rpaphp_pci.c:371:
+		dbg("%s : slot[%s] is occupid.\n", __FUNCTION__, slot->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1936: FILE: drivers/pci/hotplug/rpaphp_pci.c:372:
+		if ((slot->dev.pci_dev =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1939: FILE: drivers/pci/hotplug/rpaphp_pci.c:375:
+^I^I^Idbg("%s: PCI adapter %s in slot[%s] has been configured\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1940: FILE: drivers/pci/hotplug/rpaphp_pci.c:376:
+			dbg("%s: PCI adapter %s in slot[%s] has been configured\n", 
+				__FUNCTION__, pci_name(slot->dev.pci_dev), slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1940: FILE: drivers/pci/hotplug/rpaphp_pci.c:376:
+				__FUNCTION__, pci_name(slot->dev.pci_dev), slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1944: FILE: drivers/pci/hotplug/rpaphp_pci.c:380:
+			    __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1947: FILE: drivers/pci/hotplug/rpaphp_pci.c:383:
+		dbg("%s : slot[%s] is empty\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1950: FILE: drivers/pci/hotplug/rpaphp_pci.c:386:
+		err("%s: slot[%s] is in invalid state\n", __FUNCTION__,

WARNING:INDENTED_LABEL: labels should not be indented
#1955: FILE: drivers/pci/hotplug/rpaphp_pci.c:391:
+      exit:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1960: FILE: drivers/pci/hotplug/rpaphp_pci.c:396:
+	dbg("%s - Exit: rc[%d]\n", __FUNCTION__, retval);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1967: FILE: drivers/pci/hotplug/rpaphp_slot.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1968: FILE: drivers/pci/hotplug/rpaphp_slot.c:2:
+ * RPA Virtual I/O device functions $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1985: FILE: drivers/pci/hotplug/rpaphp_slot.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1986: FILE: drivers/pci/hotplug/rpaphp_slot.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:SPACING: No space is necessary after a cast
#2002: FILE: drivers/pci/hotplug/rpaphp_slot.c:36:
+	struct slot *slot = hotplug_slot? (struct slot *) hotplug_slot->private:NULL;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2002: FILE: drivers/pci/hotplug/rpaphp_slot.c:36:
+	struct slot *slot = hotplug_slot? (struct slot *) hotplug_slot->private:NULL;
 	                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2002: FILE: drivers/pci/hotplug/rpaphp_slot.c:36:
+	struct slot *slot = hotplug_slot? (struct slot *) hotplug_slot->private:NULL;
 	                                                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#2004: FILE: drivers/pci/hotplug/rpaphp_slot.c:38:
+	if (slot == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#2017: FILE: drivers/pci/hotplug/rpaphp_slot.c:51:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2020: FILE: drivers/pci/hotplug/rpaphp_slot.c:54:
+struct slot *alloc_slot_struct(struct device_node *dn, int drc_index, char *drc_name,
+		  int power_domain)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2023: FILE: drivers/pci/hotplug/rpaphp_slot.c:57:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_slot_struct', this function's name, in a string
#2024: FILE: drivers/pci/hotplug/rpaphp_slot.c:58:
+	dbg("Enter alloc_slot_struct(): dn->full_name=%s drc_index=0x%x drc_name=%s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2025: FILE: drivers/pci/hotplug/rpaphp_slot.c:59:
+	dbg("Enter alloc_slot_struct(): dn->full_name=%s drc_index=0x%x drc_name=%s\n",
+		dn->full_name, drc_index, drc_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2027: FILE: drivers/pci/hotplug/rpaphp_slot.c:61:
+	slot = kmalloc(sizeof (struct slot), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot)...) over kmalloc(sizeof (struct slot)...)
#2027: FILE: drivers/pci/hotplug/rpaphp_slot.c:61:
+	slot = kmalloc(sizeof (struct slot), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2030: FILE: drivers/pci/hotplug/rpaphp_slot.c:64:
+	memset(slot, 0, sizeof (struct slot));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2031: FILE: drivers/pci/hotplug/rpaphp_slot.c:65:
+	slot->hotplug_slot = kmalloc(sizeof (struct hotplug_slot), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot->hotplug_slot)...) over kmalloc(sizeof (struct hotplug_slot)...)
#2031: FILE: drivers/pci/hotplug/rpaphp_slot.c:65:
+	slot->hotplug_slot = kmalloc(sizeof (struct hotplug_slot), GFP_KERNEL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2034: FILE: drivers/pci/hotplug/rpaphp_slot.c:68:
+		return (NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2036: FILE: drivers/pci/hotplug/rpaphp_slot.c:70:
+	memset(slot->hotplug_slot, 0, sizeof (struct hotplug_slot));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2037: FILE: drivers/pci/hotplug/rpaphp_slot.c:71:
+	slot->hotplug_slot->info = kmalloc(sizeof (struct hotplug_slot_info),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot->hotplug_slot->info)...) over kmalloc(sizeof (struct hotplug_slot_info)...)
#2037: FILE: drivers/pci/hotplug/rpaphp_slot.c:71:
+	slot->hotplug_slot->info = kmalloc(sizeof (struct hotplug_slot_info),

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2042: FILE: drivers/pci/hotplug/rpaphp_slot.c:76:
+		return (NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2044: FILE: drivers/pci/hotplug/rpaphp_slot.c:78:
+	memset(slot->hotplug_slot->info, 0, sizeof (struct hotplug_slot_info));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2050: FILE: drivers/pci/hotplug/rpaphp_slot.c:84:
+		return (NULL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_slot_struct', this function's name, in a string
#2061: FILE: drivers/pci/hotplug/rpaphp_slot.c:95:
+	dbg("Exit alloc_slot_struct(): slot->dn->full_name=%s drc_index=0x%x drc_name=%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2062: FILE: drivers/pci/hotplug/rpaphp_slot.c:96:
+	dbg("Exit alloc_slot_struct(): slot->dn->full_name=%s drc_index=0x%x drc_name=%s\n",
+		slot->dn->full_name, slot->index, slot->name);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2063: FILE: drivers/pci/hotplug/rpaphp_slot.c:97:
+	return (slot);

WARNING:LONG_LINE: line length of 179 exceeds 100 columns
#2071: FILE: drivers/pci/hotplug/rpaphp_slot.c:105:
+	dbg("%s registering slot:path[%s] index[%x], name[%s] pdomain[%x] type[%d]\n", __FUNCTION__, slot->dn->full_name, slot->index, slot->name, slot->power_domain, slot->type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2071: FILE: drivers/pci/hotplug/rpaphp_slot.c:105:
+	dbg("%s registering slot:path[%s] index[%x], name[%s] pdomain[%x] type[%d]\n", __FUNCTION__, slot->dn->full_name, slot->index, slot->name, slot->power_domain, slot->type);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2077: FILE: drivers/pci/hotplug/rpaphp_slot.c:111:
+		return (retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2083: FILE: drivers/pci/hotplug/rpaphp_slot.c:117:
+		dbg("%s: sysfs_create_link: %s --> %s\n", __FUNCTION__,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2092: FILE: drivers/pci/hotplug/rpaphp_slot.c:126:
+			return (retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2100: FILE: drivers/pci/hotplug/rpaphp_slot.c:134:
+		dbg("%s: sysfs_create_link: %s --> %s\n", __FUNCTION__,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2108: FILE: drivers/pci/hotplug/rpaphp_slot.c:142:
+			return (retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2117: FILE: drivers/pci/hotplug/rpaphp_slot.c:151:
+	    __FUNCTION__, slot->name);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2128: FILE: drivers/pci/hotplug/rpaphp_slot.c:162:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2131: FILE: drivers/pci/hotplug/rpaphp_slot.c:165:
+int rpaphp_get_power_status(struct slot *slot, u8 * value)

CHECK:SPACING: No space is necessary after a cast
#2135: FILE: drivers/pci/hotplug/rpaphp_slot.c:169:
+	rc = rtas_get_power_level(slot->power_domain, (int *) value);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2159: FILE: drivers/pci/hotplug/rpaphp_vio.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2160: FILE: drivers/pci/hotplug/rpaphp_vio.c:2:
+ * RPA Hot Plug Virtual I/O device functions $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2177: FILE: drivers/pci/hotplug/rpaphp_vio.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2178: FILE: drivers/pci/hotplug/rpaphp_vio.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2188: FILE: drivers/pci/hotplug/rpaphp_vio.c:30:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2190: FILE: drivers/pci/hotplug/rpaphp_vio.c:32:
+ * $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2205: FILE: drivers/pci/hotplug/rpaphp_vio.c:47:
+	dbg("Entry %s: slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2207: FILE: drivers/pci/hotplug/rpaphp_vio.c:49:
+		info("%s: no VIOA in slot[%s]\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2214: FILE: drivers/pci/hotplug/rpaphp_vio.c:56:
+	info("%s: adapter in slot[%s] unconfigured.\n", __FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2216: FILE: drivers/pci/hotplug/rpaphp_vio.c:58:
+	dbg("Exit %s, rc=0x%x\n", __FUNCTION__, retval);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2224: FILE: drivers/pci/hotplug/rpaphp_vio.c:66:
+^I^I&slot->hotplug_slot->info->adapter_status); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2224: FILE: drivers/pci/hotplug/rpaphp_vio.c:66:
+	rpaphp_get_vio_adapter_status(slot, 1,
+		&slot->hotplug_slot->info->adapter_status); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2234: FILE: drivers/pci/hotplug/rpaphp_vio.c:76:
+^I$

CHECK:SPACING: No space is necessary after a cast
#2235: FILE: drivers/pci/hotplug/rpaphp_vio.c:77:
+	index = (u32 *) get_property(dn, "ibm,my-drc-index", NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2241: FILE: drivers/pci/hotplug/rpaphp_vio.c:83:
+	if (!(slot = alloc_slot_struct(dn, *index, name, 0))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2256: FILE: drivers/pci/hotplug/rpaphp_vio.c:98:
+^I^I__FUNCTION__, slot->name, slot->dev.vio_dev); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2256: FILE: drivers/pci/hotplug/rpaphp_vio.c:98:
+	info("%s: registered VIO device[name=%s vio_dev=%p]\n",
+		__FUNCTION__, slot->name, slot->dev.vio_dev); 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2256: FILE: drivers/pci/hotplug/rpaphp_vio.c:98:
+		__FUNCTION__, slot->name, slot->dev.vio_dev); 

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2261: FILE: drivers/pci/hotplug/rpaphp_vio.c:103:
+	return (rc);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2268: FILE: drivers/pci/hotplug/rpaphp_vio.c:110:
+	if ((slot->dev.vio_dev = vio_register_device(slot->dn))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2270: FILE: drivers/pci/hotplug/rpaphp_vio.c:112:
+		info("%s: VIO adapter %s in slot[%s] has been configured\n",
+			__FUNCTION__, slot->dn->name, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2270: FILE: drivers/pci/hotplug/rpaphp_vio.c:112:
+			__FUNCTION__, slot->dn->name, slot->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2274: FILE: drivers/pci/hotplug/rpaphp_vio.c:116:
+		info("%s: no vio_dev struct for adapter in slot[%s]\n",
+			__FUNCTION__, slot->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2274: FILE: drivers/pci/hotplug/rpaphp_vio.c:116:
+			__FUNCTION__, slot->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2277: FILE: drivers/pci/hotplug/rpaphp_vio.c:119:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294663.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 93 warnings, 55 checks, 2189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294663.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
