WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
- Apply icside host chip driver and other ARM related updates by Russell King,

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#63: FILE: drivers/ide/aec62xx.c:262:
+			return ((byte) ((system_bus_speed <= 33333) ? chipset_table->chipset_settings_33 : chipset_table->chipset_settings_34));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#72: FILE: drivers/ide/aec62xx.c:271:
+			return ((byte) ((system_bus_speed <= 33333) ? chipset_table->ultra_settings_33 : chipset_table->ultra_settings_34));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#85: FILE: drivers/ide/ali14xx.c:127:
+	param3 = param1 = (time2 * system_bus_speed + 999999) / 1000000;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#86: FILE: drivers/ide/ali14xx.c:128:
+	param4 = param2 = (time1 * system_bus_speed + 999999) / 1000000 - param1;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#98: FILE: drivers/ide/alim15x3.c:264:
+	if ((s_clc = (s_time * system_bus_speed + 999999) / 1000000) >= 8)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#101: FILE: drivers/ide/alim15x3.c:266:
+	if ((a_clc = (a_time * system_bus_speed + 999999) / 1000000) >= 8)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#107: FILE: drivers/ide/alim15x3.c:271:
+	if ((r_clc = ((c_time - s_time - a_time) * system_bus_speed + 999999) / 1000000) >= 16)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#112: FILE: drivers/ide/alim15x3.c:275:
+	if (!(r_clc = (c_time * system_bus_speed + 999999) / 1000000 - a_clc - s_clc)) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#132: FILE: drivers/ide/amd74xx.c:133:
+	amd_print("PCI clock:                          %d.%dMHz", system_bus_speed / 1000, system_bus_speed / 100 % 10);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#158: FILE: drivers/ide/amd74xx.c:176:
+		speed[i] = 4 * system_bus_speed / ((den[i] && uen[i]) ? udma[i] : (active[i] + recover[i]) * 2);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#159: FILE: drivers/ide/amd74xx.c:177:
+		cycle[i] = 1000000 * ((den[i] && uen[i]) ? udma[i] : (active[i] + recover[i]) * 2) / system_bus_speed / 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#191: FILE: drivers/ide/amd74xx.c:250:
+	if (speed == XFER_UDMA_5 && system_bus_speed <= 33333) t.udma = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#252: FILE: drivers/ide/cy82c693.c:124:
+	clocks = (time*bus_speed+999999)/1000000 -1;
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#252: FILE: drivers/ide/cy82c693.c:124:
+	clocks = (time*bus_speed+999999)/1000000 -1;
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#252: FILE: drivers/ide/cy82c693.c:124:
+	clocks = (time*bus_speed+999999)/1000000 -1;
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#252: FILE: drivers/ide/cy82c693.c:124:
+	clocks = (time*bus_speed+999999)/1000000 -1;
 	                                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#339: FILE: drivers/ide/icside.c:158:
+	inb (state->irq_port + ICS_ARCIN_V6_INTROFFSET_1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: drivers/ide/icside.c:159:
+	inb (state->irq_port + ICS_ARCIN_V6_INTROFFSET_2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: drivers/ide/icside.c:301:
+			printk("icside: received %d segments, build %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: drivers/ide/icside.c:302:
+			printk("icside: received %d segments, build %d\n",
+				rq->nr_phys_segments, nents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/ide/icside.c:392:
+			printk("%s: DMA disabled\n", drive->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: drivers/ide/icside.c:397:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: drivers/ide/icside.c:460:
+	BUG_ON(dma_channel_active(ch->hw.dma));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: drivers/ide/icside.c:478:
+	if (OK_STAT(stat,DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: drivers/ide/icside.c:478:
+	if (OK_STAT(stat,DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#619: FILE: drivers/ide/icside.c:478:
+	if (OK_STAT(stat,DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#624: FILE: drivers/ide/icside.c:483:
+		printk("%s: dma_intr: bad DMA status (dma_stat=%x)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: drivers/ide/icside.c:499:
+	BUG_ON(dma_channel_active(ch->hw.dma));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#643: FILE: drivers/ide/icside.c:501:
+	count = ch->sg_nents = ide_build_sglist(ch, rq);

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#648: FILE: drivers/ide/icside.c:506:
+	 * Route the DMA signals to to this channel.

WARNING:LINE_SPACING: Missing a blank line after declarations
#701: FILE: drivers/ide/icside.c:542:
+		struct ata_taskfile *args = rq->special;
+		cmd = args->taskfile.command;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#771: FILE: drivers/ide/icside.c:569:
+		struct ata_taskfile *args = rq->special;
+		cmd = args->taskfile.command;

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#799: FILE: drivers/ide/icside.c:594:
+	printk(KERN_ERR "ATA: %s: UDMA timeout occured:", drive->name);
 	                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#799: FILE: drivers/ide/icside.c:594:
+	printk(KERN_ERR "ATA: %s: UDMA timeout occured:", drive->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#806: FILE: drivers/ide/icside.c:600:
+	printk(KERN_ERR "ATA: %s: IRQ lost\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#818: FILE: drivers/ide/icside.c:611:
+	printk("    %s: SG-DMA", ch->name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ch->sg_table)...) over kmalloc(sizeof(struct scatterlist)...)
#820: FILE: drivers/ide/icside.c:613:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * NR_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: drivers/ide/icside.c:614:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * NR_ENTRIES,
 				 GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#847: FILE: drivers/ide/icside.c:632:
+	printk(" capable%s\n", autodma ? ", auto-enable" : "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#853: FILE: drivers/ide/icside.c:637:
+	printk(" disabled, unable to allocate DMA table\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#864: FILE: drivers/ide/icside.c:644:
+	if (ch->sg_table) {
+		kfree(ch->sg_table);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*state)...) over kmalloc(sizeof(struct icside_state)...)
#1000: FILE: drivers/ide/icside.c:755:
+	state = kmalloc(sizeof(struct icside_state), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1153: FILE: drivers/ide/ide.c:659:
+	{ ICRC_ERR|ABRT_ERR,	ABRT_ERR,		"DriveStatusError"   },
 	          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1154: FILE: drivers/ide/ide.c:660:
+	{ ICRC_ERR|ABRT_ERR,	ICRC_ERR,		"BadSector"	     },
 	          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1155: FILE: drivers/ide/ide.c:661:
+	{ ICRC_ERR|ABRT_ERR,	ICRC_ERR|ABRT_ERR,	"BadCRC"	     },
 	          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1155: FILE: drivers/ide/ide.c:661:
+	{ ICRC_ERR|ABRT_ERR,	ICRC_ERR|ABRT_ERR,	"BadCRC"	     },
 	                    	        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1166: FILE: drivers/ide/ide.c:672:
+	printk(" { ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1170: FILE: drivers/ide/ide.c:676:
+			printk("%s ", msgs->msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1172: FILE: drivers/ide/ide.c:678:
+	printk("} ");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1175: FILE: drivers/ide/ide.c:681:
+#define ata_dump_bits(msgs,nr,bits) do { } while (0)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1175: FILE: drivers/ide/ide.c:681:
+#define ata_dump_bits(msgs,nr,bits) do { } while (0)
                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1217: FILE: drivers/ide/ide.c:696:
+	printk("%s: %s: status=0x%02x", drive->name, msg, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1219: FILE: drivers/ide/ide.c:698:
+	printk("\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1312: FILE: drivers/ide/ide.c:3211:
+	if (pci_present())
+	    system_bus_speed = 33333;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1317: FILE: drivers/ide/ide.c:3215:
+	if (idebus_parameter >= 20 && idebus_parameter <= 80) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1320: FILE: drivers/ide/ide.c:3218:
+		switch (system_bus_speed) {
+			case 33000: system_bus_speed = 33333; break;
+			case 37000: system_bus_speed = 37500; break;
+			case 41000: system_bus_speed = 41666; break;
+			case 66000: system_bus_speed = 66666; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1321: FILE: drivers/ide/ide.c:3219:
+			case 33000: system_bus_speed = 33333; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1322: FILE: drivers/ide/ide.c:3220:
+			case 37000: system_bus_speed = 37500; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1323: FILE: drivers/ide/ide.c:3221:
+			case 41000: system_bus_speed = 41666; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1324: FILE: drivers/ide/ide.c:3222:
+			case 66000: system_bus_speed = 66666; break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1328: FILE: drivers/ide/ide.c:3226:
+	if (idebus_parameter >= 20000 && idebus_parameter <= 80000)
+	    system_bus_speed = idebus_parameter;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1330: FILE: drivers/ide/ide.c:3228:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1331: FILE: drivers/ide/ide.c:3229:
+	printk(KERN_INFO "ATA: %s bus speed %d.%dMHz\n",

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1332: FILE: drivers/ide/ide.c:3230:
+		pci_present() ? "PCI" : "System", system_bus_speed / 1000, system_bus_speed / 100 % 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: drivers/ide/ide.c:3230:
+	printk(KERN_INFO "ATA: %s bus speed %d.%dMHz\n",
+		pci_present() ? "PCI" : "System", system_bus_speed / 1000, system_bus_speed / 100 % 10);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1346: FILE: drivers/ide/opti621.c:178:
+	return ((time*bus_speed+999999)/1000000);
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1346: FILE: drivers/ide/opti621.c:178:
+	return ((time*bus_speed+999999)/1000000);
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1346: FILE: drivers/ide/opti621.c:178:
+	return ((time*bus_speed+999999)/1000000);
 	                               ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1424: FILE: drivers/ide/pcidma.c:557:
+EXPORT_SYMBOL(udma_pci_start);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1425: FILE: drivers/ide/pcidma.c:558:
+EXPORT_SYMBOL(udma_pci_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1426: FILE: drivers/ide/pcidma.c:559:
+EXPORT_SYMBOL(udma_pci_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1427: FILE: drivers/ide/pcidma.c:560:
+EXPORT_SYMBOL(udma_pci_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1428: FILE: drivers/ide/pcidma.c:561:
+EXPORT_SYMBOL(udma_pci_irq_status);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1429: FILE: drivers/ide/pcidma.c:562:
+EXPORT_SYMBOL(udma_pci_timeout);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1430: FILE: drivers/ide/pcidma.c:563:
+EXPORT_SYMBOL(udma_pci_irq_lost);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#1442: FILE: drivers/ide/pdc202xx.c:171:
+	static const char *pdc_quirk_drives[] = {

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1465: FILE: drivers/ide/piix.c:149:
+	piix_print("PCI clock:                          %d.%dMHz", system_bus_speed / 1000, system_bus_speed / 100 % 10);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1575: FILE: drivers/ide/qd65xx.c:155:
+	byte active_cycle   = 17-IDE_IN(active_time   * system_bus_speed / 1000000 + 1, 2, 17);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1576: FILE: drivers/ide/qd65xx.c:156:
+	byte recovery_cycle = 15-IDE_IN(recovery_time * system_bus_speed / 1000000 + 1, 2, 15);
 	                        ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1629: FILE: drivers/ide/sl82c105.c:37:
+#define CTRL_IDE_IRQB	(1 << 30)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1630: FILE: drivers/ide/sl82c105.c:38:
+#define CTRL_IDE_IRQA	(1 << 28)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1631: FILE: drivers/ide/sl82c105.c:39:
+#define CTRL_LEGIRQ	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1632: FILE: drivers/ide/sl82c105.c:40:
+#define CTRL_P1F16	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1633: FILE: drivers/ide/sl82c105.c:41:
+#define CTRL_P1EN	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1634: FILE: drivers/ide/sl82c105.c:42:
+#define CTRL_P0F16	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1635: FILE: drivers/ide/sl82c105.c:43:
+#define	CTRL_P0EN	(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1645: FILE: drivers/ide/sl82c105.c:129:
 
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1740: FILE: drivers/ide/sl82c105.c:250:
+	printk("sl82c105: lost IRQ: resetting host\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1747: FILE: drivers/ide/sl82c105.c:257:
+		printk("sl82c105: drive was requesting IRQ, but host lost it\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1756: FILE: drivers/ide/sl82c105.c:266:
+		printk("sl82c105: DMA was enabled\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1853: FILE: drivers/ide/sl82c105.c:357:
+	if (bridge_rev <= 5)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1855: FILE: drivers/ide/sl82c105.c:359:
+	else {

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1884: FILE: drivers/ide/via82cxxx.c:108:
+} via_isa_bridges [] __initdata = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1901: FILE: drivers/ide/via82cxxx.c:177:
+	via_print("PCI clock:                          %d.%dMHz", system_bus_speed / 1000, system_bus_speed / 100 % 10);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2043: FILE: include/linux/ide.h:865:
+void udma_pci_irq_lost(struct ata_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 46 warnings, 33 checks, 1858 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000457000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
