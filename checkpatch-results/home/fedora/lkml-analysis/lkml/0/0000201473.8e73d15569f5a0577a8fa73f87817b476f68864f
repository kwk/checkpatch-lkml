ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: include/linux/security.h:1133:
+^Iint (*file_mmap) (struct file * file, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: include/linux/security.h:1133:
+	int (*file_mmap) (struct file * file, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#93: FILE: include/linux/security.h:1133:
+	int (*file_mmap) (struct file * file, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: include/linux/security.h:1136:
+^Iint (*file_mprotect) (struct vm_area_struct * vma, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: include/linux/security.h:1136:
+	int (*file_mprotect) (struct vm_area_struct * vma, 

WARNING:SPACING: Unnecessary space before function pointer arguments
#97: FILE: include/linux/security.h:1136:
+	int (*file_mprotect) (struct vm_area_struct * vma, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#108: FILE: include/linux/security.h:1639:
+static inline int security_file_mmap (struct file *file, unsigned long reqprot,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#113: FILE: include/linux/security.h:1643:
+	return security_ops->file_mmap (file, reqprot, prot, flags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: include/linux/security.h:1650:
+	return security_ops->file_mprotect (vma, reqprot, prot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#130: FILE: include/linux/security.h:2288:
+static inline int security_file_mmap (struct file *file, unsigned long reqprot,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: security/dummy.c:449:
+static int dummy_file_mmap (struct file *file, unsigned long reqprot,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: security/dummy.c:456:
+static int dummy_file_mprotect (struct vm_area_struct *vma, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#209: FILE: security/dummy.c:456:
+static int dummy_file_mprotect (struct vm_area_struct *vma, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: security/selinux/hooks.c:2453:
+static int selinux_file_mmap(struct file *file, unsigned long reqprot, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: security/selinux/include/av_perm_to_string.h:86:
+   S_(SECCLASS_SECURITY, SECURITY__SETCHECKREQPROT, "setcheckreqprot")$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: security/selinux/Kconfig:89:
+^I  mmap and mprotect calls.  If this option is set to 0 (zero), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: security/selinux/Kconfig:91:
+^I  by the kernel.  If this option is set to 1 (one), SELinux will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: security/selinux/Kconfig:93:
+^I  The checkreqprot flag may be changed from the default via the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: security/selinux/Kconfig:94:
+^I  'checkreqprot=' boot parameter.  It may also be changed at runtime $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#351: FILE: security/selinux/selinuxfs.c:41:
+	selinux_checkreqprot = simple_strtoul(str,NULL,0) ? 1 : 0;
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#351: FILE: security/selinux/selinuxfs.c:41:
+	selinux_checkreqprot = simple_strtoul(str,NULL,0) ? 1 : 0;
 	                                              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#351: FILE: security/selinux/selinuxfs.c:41:
+	selinux_checkreqprot = simple_strtoul(str,NULL,0) ? 1 : 0;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#354: FILE: security/selinux/selinuxfs.c:44:
+__setup("checkreqprot=", checkreqprot_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: security/selinux/selinuxfs.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: security/selinux/selinuxfs.c:314:
+static ssize_t sel_read_checkreqprot(struct file *filp, char __user *buf,
                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: security/selinux/selinuxfs.c:324:
+static ssize_t sel_write_checkreqprot(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: security/selinux/selinuxfs.c:324:
+static ssize_t sel_write_checkreqprot(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#399: FILE: security/selinux/selinuxfs.c:341:
+	page = (char*)get_zeroed_page(GFP_KERNEL);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#407: FILE: security/selinux/selinuxfs.c:349:
+	if (sscanf(page, "%u", &new_value) != 1)
+		goto out;

CHECK:SPACING: No space is necessary after a cast
#413: FILE: security/selinux/selinuxfs.c:355:
+	free_page((unsigned long) page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#416: FILE: security/selinux/selinuxfs.c:358:
+}
+static struct file_operations sel_checkreqprot_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#416: FILE: security/selinux/selinuxfs.c:358:
+static struct file_operations sel_checkreqprot_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#427: FILE: security/selinux/selinuxfs.c:1244:
+		[SEL_CHECKREQPROT] = {"checkreqprot", &sel_checkreqprot_ops, S_IRUGO|S_IWUSR},
 		                                                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#427: FILE: security/selinux/selinuxfs.c:1244:
+		[SEL_CHECKREQPROT] = {"checkreqprot", &sel_checkreqprot_ops, S_IRUGO|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 14 warnings, 5 checks, 312 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
