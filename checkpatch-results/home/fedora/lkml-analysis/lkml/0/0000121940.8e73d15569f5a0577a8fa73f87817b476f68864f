WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#36: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4820:
+ * This is called from ipath_ib_rcv() to process an incomming packet
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#71: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4855:
+ * This is called from ipath_kreceive() to process an incomming packet at
                                                       ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#84: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4868:
+	if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#94: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4878:
+	if (lnh == IPS_LRH_BTH)
[...]
+	else if (lnh == IPS_LRH_GRH)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#98: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4882:
+	else {

CHECK:SPACING: No space is necessary after a cast
#103: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4887:
+	opcode = *(u8 *) (&ohdr->bth[0]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4893:
+	if (qp_num == 0xFFFFFF) {
[...]
+	} else if ((qp = ipath_lookup_qpn(&dev->qp_table, qp_num)) != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mcast"
#114: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4898:
+		if (mcast == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#128: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4912:
+	} else if ((qp = ipath_lookup_qpn(&dev->qp_table, qp_num)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#136: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4920:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#153: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4937:
+	if (dev == NULL)

CHECK:SPACING: No space is necessary after a cast
#170: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4954:
+			qp->timerwait.prev = (struct list_head *) resend;

CHECK:SPACING: No space is necessary after a cast
#187: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4971:
+				qp->timerwait.prev = (struct list_head *) rnr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qp"
#224: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5008:
+	for (qp = resend; qp != NULL;

CHECK:SPACING: No space is necessary after a cast
#225: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5009:
+	     qp = (struct ipath_qp *) qp->timerwait.prev) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qp"
#239: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5023:
+	for (qp = rnr; qp != NULL;

CHECK:SPACING: No space is necessary after a cast
#240: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5024:
+	     qp = (struct ipath_qp *) qp->timerwait.prev) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#258: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5042:
+	if (dev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swq"
#292: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5076:
+		if (swq == NULL)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#294: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5078:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#350: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5134:
+		return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#487: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5271:
+			p = (struct ipath_rwqe *)((char *) p + sz);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#596: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5380:
+	uint32_t vendor, boardrev, majrev, minrev;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#641: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5425:
+	uint32_t flags = ipath_layer_get_flags(dev->ib_unit);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#643: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5427:
+	uint32_t l;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#644: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5428:
+	uint16_t lid = ipath_layer_get_lid(dev->ib_unit);

WARNING:SIZEOF_PARENTHESIS: sizeof *pd should be sizeof(*pd)
#757: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5541:
+	pd = kmalloc(sizeof *pd, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "udata"
#762: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5546:
+	pd->user = udata != NULL;

WARNING:SIZEOF_PARENTHESIS: sizeof *ah should be sizeof(*ah)
#784: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5568:
+	ah = kmalloc(sizeof *ah, GFP_ATOMIC);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#810: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5594:
+	mr = kmalloc(sizeof *mr, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#815: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5599:
+	memset(mr, 0, sizeof *mr);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#830: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5614:
+	mr = kmalloc(sizeof *mr + m * sizeof mr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr->mr.map[0] should be sizeof(*mr->mr.map[0])
#836: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5620:
+		mr->mr.map[i] = kmalloc(sizeof *mr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#856: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5640:
+	mr->ibmr.rkey = mr->ibmr.lkey = mr->mr.lkey;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#888: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5672:
+	list_for_each_entry(chunk, &region->chunk_list, list)
+	    n += chunk->nents;

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#893: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5677:
+	mr = kmalloc(sizeof *mr + m * sizeof mr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr->mr.map[0] should be sizeof(*mr->mr.map[0])
#899: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5683:
+		mr->mr.map[i] = kmalloc(sizeof *mr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#919: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5703:
+	mr->ibmr.rkey = mr->ibmr.lkey = mr->mr.lkey;

WARNING:SIZEOF_PARENTHESIS: sizeof *fmr should be sizeof(*fmr)
#968: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5752:
+	fmr = kmalloc(sizeof *fmr + m * sizeof fmr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *fmr->mr.map[0] should be sizeof(*fmr->mr.map[0])
#974: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5758:
+		fmr->mr.map[i] = kmalloc(sizeof *fmr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#991: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5775:
+	fmr->ibfmr.rkey = fmr->ibfmr.lkey = fmr->mr.lkey;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1008: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5792:
+			      u64 * page_list, int list_len, u64 iova)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1138: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5922:
+static CLASS_DEVICE_ATTR(hw_rev, S_IRUGO, show_rev, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1139: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5923:
+static CLASS_DEVICE_ATTR(hca_type, S_IRUGO, show_hca, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1140: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5924:
+static CLASS_DEVICE_ATTR(board_id, S_IRUGO, show_board, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1141: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5925:
+static CLASS_DEVICE_ATTR(stats, S_IRUGO, show_stats, NULL);

WARNING:SIZEOF_PARENTHESIS: sizeof *context should be sizeof(*context)
#1159: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5943:
+	context = kmalloc(sizeof *context, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *idev should be sizeof(*idev)
#1182: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5966:
+	idev = (struct ipath_ibdev *)ib_alloc_device(sizeof *idev);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev"
#1183: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5967:
+	if (idev == NULL)

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be64 should be cpu_to_be64
#1192: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5976:
+	idev->gid_prefix = __constant_cpu_to_be64(0xfe80000000000000UL);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1196: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5980:
+	idev->qp_table.table = kmalloc(idev->qp_table.max *
+				       sizeof(*idev->qp_table.table),
+				       GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->qp_table.table"
#1199: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5983:
+	if (idev->qp_table.table == NULL) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1215: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5999:
+	idev->lk_table.table = kmalloc(idev->lk_table.max *
+				       sizeof(*idev->lk_table.table),
+				       GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->lk_table.table"
#1218: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6002:
+	if (idev->lk_table.table == NULL) {

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1248: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6032:
+	strlcpy(dev->name, "ipath%d", IB_DEVICE_NAME_MAX);

CHECK:SPACING: No space is necessary after a cast
#1328: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6112:
+	(void) ib_register_mad_agent(dev, 1, (enum ib_qp_type) 2,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mcast_tree.rb_node"
#1369: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6153:
+	if (mcast_tree.rb_node != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipath_devices"
#1389: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6173:
+	if (ipath_devices == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1396: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6180:
+		if (ret == 0)
[...]
+		else if ((ret = ipath_register_ib_device(i)) != 0) {
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1398: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6182:
+		else if ((ret = ipath_register_ib_device(i)) != 0) {

WARNING:SPLIT_STRING: quoted string split across lines
#1400: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6184:
+			_VERBS_ERROR("ib_ipath%d cannot register ib device "
+				     "(%d)!\n", i, ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 27 warnings, 32 checks, 1393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
