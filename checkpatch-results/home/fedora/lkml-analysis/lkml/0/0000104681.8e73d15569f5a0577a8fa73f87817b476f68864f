WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: include/asm-generic/bitops/find.h:1:
+#ifndef _ASM_GENERIC_BITOPS_FIND_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/asm-generic/bitops/find.h:4:
+extern unsigned long find_next_bit(const unsigned long *addr, unsigned long

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/asm-generic/bitops/find.h:7:
+extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: lib/find_next_bit.c:25:
+unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#95: FILE: lib/find_next_bit.c:28:
+	unsigned long result = offset & ~(BITS_PER_LONG-1);
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: lib/find_next_bit.c:45:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#127: FILE: lib/find_next_bit.c:46:
+		if ((tmp = *(p++)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#146: FILE: lib/find_next_bit.c:63:
+EXPORT_SYMBOL(find_next_bit);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: lib/find_next_bit.c:70:
+unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: lib/find_next_bit.c:73:
+	unsigned long result = offset & ~(BITS_PER_LONG-1);
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#183: FILE: lib/find_next_bit.c:90:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: lib/find_next_bit.c:91:
+		if (~(tmp = *(p++)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#204: FILE: lib/find_next_bit.c:108:
+EXPORT_SYMBOL(find_next_zero_bit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104681.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 8 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104681.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
