WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: include/linux/task_struct.h:1:
+#ifndef _LINUX_TASK_STRUCT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#249: FILE: include/linux/task_struct.h:4:
+#include <asm/atomic.h> /* sem.h needs this first */

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#259: FILE: include/linux/task_struct.h:14:
+#include <asm/processor.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#266: FILE: include/linux/task_struct.h:21:
+typedef struct prio_array prio_array_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#270: FILE: include/linux/task_struct.h:25:
+	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: include/linux/task_struct.h:67:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: include/linux/task_struct.h:69:
+^I * older sibling, respectively.  (p->father can be replaced with $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: include/linux/task_struct.h:96:
+	uid_t uid,euid,suid,fsuid;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: include/linux/task_struct.h:96:
+	uid_t uid,euid,suid,fsuid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: include/linux/task_struct.h:96:
+	uid_t uid,euid,suid,fsuid;
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/task_struct.h:97:
+	gid_t gid,egid,sgid,fsgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/task_struct.h:97:
+	gid_t gid,egid,sgid,fsgid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/task_struct.h:97:
+	gid_t gid,egid,sgid,fsgid;
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: include/linux/task_struct.h:133:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: include/linux/task_struct.h:137:
+   ^Iu32 parent_exec_id;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#382: FILE: include/linux/task_struct.h:137:
+   ^Iu32 parent_exec_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: include/linux/task_struct.h:137:
+   ^Iu32 parent_exec_id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: include/linux/task_struct.h:138:
+   ^Iu32 self_exec_id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#383: FILE: include/linux/task_struct.h:138:
+   ^Iu32 self_exec_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: include/linux/task_struct.h:138:
+   ^Iu32 self_exec_id;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: include/linux/task_struct.h:150:
+extern void __put_task_struct(struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: include/linux/task_struct.h:151:
+#define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#396: FILE: include/linux/task_struct.h:151:
+#define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#397: FILE: include/linux/task_struct.h:152:
+#define put_task_struct(tsk) \
+do { if (atomic_dec_and_test(&(tsk)->usage)) __put_task_struct(tsk); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: include/linux/task_struct.h:153:
+do { if (atomic_dec_and_test(&(tsk)->usage)) __put_task_struct(tsk); } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 10 warnings, 2 checks, 389 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
