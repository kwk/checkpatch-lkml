WARNING:TYPO_SPELLING: 'Satisify' may be misspelled - perhaps 'Satisfy'?
#17: 
Subject: [PATCH] 2/2 Satisify high-order allocations with linear scan
                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
The purpose of this patch is to linearly scan the address space when a high-order

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: include/linux/swap.h:176:
+extern int try_to_free_highorder_pages(struct zone **, unsigned int, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone **' should also have an identifier name
#58: FILE: include/linux/swap.h:176:
+extern int try_to_free_highorder_pages(struct zone **, unsigned int, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#58: FILE: include/linux/swap.h:176:
+extern int try_to_free_highorder_pages(struct zone **, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#58: FILE: include/linux/swap.h:176:
+extern int try_to_free_highorder_pages(struct zone **, unsigned int, unsigned int);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#69: FILE: mm/page_alloc.c:56:
+int lnscan_success=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#69: FILE: mm/page_alloc.c:56:
+int lnscan_success=0;
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#70: FILE: mm/page_alloc.c:57:
+int lnscan_fail=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#70: FILE: mm/page_alloc.c:57:
+int lnscan_fail=0;
                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#78: FILE: mm/page_alloc.c:855:
+	int tried_highorder=0;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#96: FILE: mm/page_alloc.c:941:
+			if (tried_highorder) lnscan_success++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#99: FILE: mm/page_alloc.c:944:
+		if (tried_highorder) lnscan_fail++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#104: FILE: mm/page_alloc.c:949:
+		tried_highorder=1;
 		               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: mm/page_alloc.c:1978:
+ ^Iseq_printf(m, "lnscan success:    %d\n", lnscan_success);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: mm/page_alloc.c:1978:
+ ^Iseq_printf(m, "lnscan success:    %d\n", lnscan_success);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: mm/page_alloc.c:1978:
+ ^Iseq_printf(m, "lnscan success:    %d\n", lnscan_success);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "lnscan fail:       %d\n", lnscan_fail);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "lnscan fail:       %d\n", lnscan_fail);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: mm/page_alloc.c:1979:
+ ^Iseq_printf(m, "lnscan fail:       %d\n", lnscan_fail);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#148: FILE: mm/vmscan.c:1289:
+	struct zone* zone;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#154: FILE: mm/vmscan.c:1295:
+spinlock_t reclaims_lock;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#168: FILE: mm/vmscan.c:1309:
+int find_startblock(int zoneid, struct reclaim_task *rtask) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#170: FILE: mm/vmscan.c:1311:
+	int retval=1;
 	          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: mm/vmscan.c:1314:
+ ^Iif (rtask->index == -1) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#173: FILE: mm/vmscan.c:1314:
+ ^Iif (rtask->index == -1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: mm/vmscan.c:1314:
+ ^Iif (rtask->index == -1) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#181: FILE: mm/vmscan.c:1322:
+	if (rtask->index >= (rtask->zone->present_pages >> MAX_ORDER)-1) {
 	                                                             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#181: FILE: mm/vmscan.c:1322:
+	if (rtask->index >= (rtask->zone->present_pages >> MAX_ORDER)-1) {
+		rtask->index=startindex=0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#182: FILE: mm/vmscan.c:1323:
+		rtask->index=startindex=0;
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#182: FILE: mm/vmscan.c:1323:
+		rtask->index=startindex=0;
 		                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#182: FILE: mm/vmscan.c:1323:
+		rtask->index=startindex=0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: mm/vmscan.c:1326:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: mm/vmscan.c:1328:
+		int bitidx = rtask->index*2;
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#191: FILE: mm/vmscan.c:1332:
+		    test_bit(bitidx+1,rtask->zone->free_area_usemap)) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: mm/vmscan.c:1332:
+		    test_bit(bitidx+1,rtask->zone->free_area_usemap)) {
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#194: FILE: mm/vmscan.c:1335:
+			int success=1;
 			           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: mm/vmscan.c:1341:
+				ltask = list_entry(curr,
+						struct reclaim_task,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#204: FILE: mm/vmscan.c:1345:
+					success=0;
 					       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#218: FILE: mm/vmscan.c:1359:
+				(rtask->zone->present_pages >> MAX_ORDER)-1)
 				                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#219: FILE: mm/vmscan.c:1360:
+			rtask->index=0;
 			            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#232: FILE: mm/vmscan.c:1373:
+int try_to_free_highorder_block(struct reclaim_task *rtask,
+				unsigned int order, int gfp_mask) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#238: FILE: mm/vmscan.c:1379:
+	int nr_freed=0;
 	            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#242: FILE: mm/vmscan.c:1383:
+	struct zone* zone = rtask->zone;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#253: FILE: mm/vmscan.c:1394:
+	if (endpage > endpageblock) endpage = endpageblock;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#256: FILE: mm/vmscan.c:1397:
+	tryfree=0;
 	       ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#259: FILE: mm/vmscan.c:1400:
+	while (page <= endpage && page <= endpageblock) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#268: FILE: mm/vmscan.c:1409:
+			if (!TestClearPageLRU(page)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: mm/vmscan.c:1409:
+			if (!TestClearPageLRU(page)) BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: mm/vmscan.c:1425:
+				list_add(&page->lru,
+					&page_zone(page)->inactive_list);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: mm/vmscan.c:1442:
+		if (endpageblock - endpage > (1 << order)) goto retry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: mm/vmscan.c:1456:
+		int tofree;
+		if (nr_freed >= (1 << order)) return nr_freed;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#315: FILE: mm/vmscan.c:1456:
+		if (nr_freed >= (1 << order)) return nr_freed;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#319: FILE: mm/vmscan.c:1460:
+		if (endpageblock - endpage > tofree) goto retry;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#326: FILE: mm/vmscan.c:1467:
+	tryfree=0;
 	       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: mm/vmscan.c:1474:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#349: FILE: mm/vmscan.c:1490:
+
+}

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#358: FILE: mm/vmscan.c:1499:
+ * guarentee of success.
    ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#360: FILE: mm/vmscan.c:1501:
+int try_to_free_highorder_pages(struct zone** zones,

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#360: FILE: mm/vmscan.c:1501:
+int try_to_free_highorder_pages(struct zone** zones,
+					  unsigned int gfp_flags,
+					  unsigned int order) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/vmscan.c:1502:
+int try_to_free_highorder_pages(struct zone** zones,
+					  unsigned int gfp_flags,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#363: FILE: mm/vmscan.c:1504:
+					  unsigned int order) {
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#368: FILE: mm/vmscan.c:1509:
+	if (! gfp_flags & __GFP_WAIT ||
 	    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: mm/vmscan.c:1509:
+	if (! gfp_flags & __GFP_WAIT ||
[...]
+	    ! gfp_flags & __GFP_FS) return 0;

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#369: FILE: mm/vmscan.c:1510:
+	    ! gfp_flags & __GFP_IO   ||
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#370: FILE: mm/vmscan.c:1511:
+	    ! gfp_flags & __GFP_FS) return 0;
 	    ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rtask)...) over kmalloc(sizeof(struct reclaim_task)...)
#377: FILE: mm/vmscan.c:1518:
+	rtask = kmalloc(sizeof(struct reclaim_task), gfp_flags);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#382: FILE: mm/vmscan.c:1523:
+	nr_freed=0;
 	        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#384: FILE: mm/vmscan.c:1525:
+	for (i = 0; zones[i] != NULL && nr_freed < (1 << order); i++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#388: FILE: mm/vmscan.c:1529:
+		rtask->index=-1;
 		            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#388: FILE: mm/vmscan.c:1529:
+		rtask->index=-1;
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#395: FILE: mm/vmscan.c:1536:
+		for (scanblocks=16;
 		               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#396: FILE: mm/vmscan.c:1537:
+			scanblocks >= 0 && nr_freed<(1 << order) ;
 			                           ^

WARNING:SPACING: space prohibited before semicolon
#396: FILE: mm/vmscan.c:1537:
+			scanblocks >= 0 && nr_freed<(1 << order) ;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#398: FILE: mm/vmscan.c:1539:
+			scanblocks--) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#399: FILE: mm/vmscan.c:1540:
+			if (!find_startblock(i, rtask)) break;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#408: FILE: mm/vmscan.c:1549:
+
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#410: FILE: mm/vmscan.c:1551:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#418: FILE: mm/vmscan.c:1559:
+
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#420: FILE: mm/vmscan.c:1561:
+static int __init lnscan_init(void) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#421: FILE: mm/vmscan.c:1562:
+	printk("Initialising lnscan\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 18 warnings, 20 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
