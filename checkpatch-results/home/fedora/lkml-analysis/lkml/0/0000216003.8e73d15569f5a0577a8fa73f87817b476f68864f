CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#79: FILE: fs/ext3/xattr.c:69:
+#define BFIRST(bh) ENTRY(BHDR(bh)+1)
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: fs/ext3/xattr.c:152:
+		struct ext3_xattr_entry *next = EXT3_XATTR_NEXT(entry);
+		if ((void *)next >= end)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#143: FILE: fs/ext3/xattr.c:190:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#157: FILE: fs/ext3/xattr.c:204:
+	if (!cmp && ext3_xattr_check_entry(entry, size))
+			return -EIO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#190: FILE: fs/ext3/xattr.c:242:
+		atomic_read(&(bh->b_count)), le32_to_cpu(BHDR(bh)->h_refcount));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 27)
#191: FILE: fs/ext3/xattr.c:243:
+	if (ext3_xattr_check_block(bh)) {
[...]
+			   "inode %ld: bad block %d", inode->i_ino,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#192: FILE: fs/ext3/xattr.c:244:
+bad_block:	ext3_error(inode->i_sb, __FUNCTION__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#312: FILE: fs/ext3/xattr.c:327:
+		atomic_read(&(bh->b_count)), le32_to_cpu(BHDR(bh)->h_refcount));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#314: FILE: fs/ext3/xattr.c:329:
+		ext3_error(inode->i_sb, __FUNCTION__,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#376: FILE: fs/ext3/xattr.c:386:
+			BHDR(bh)->h_refcount = cpu_to_le32(

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: fs/ext3/xattr.c:427:
+			size_t offs = le16_to_cpu(last->e_value_offs);
+			if (offs < min_offs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: fs/ext3/xattr.c:435:
+			size_t size = le32_to_cpu(s->here->e_value_size);
+			free += EXT3_XATTR_SIZE(size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: fs/ext3/xattr.c:450:
+		size_t rest = (void *)last - (void *)s->here + sizeof(__u32);
+		memmove((void *)s->here + size, s->here, rest);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#452: FILE: fs/ext3/xattr.c:460:
+			size_t size = EXT3_XATTR_SIZE(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#457: FILE: fs/ext3/xattr.c:465:
+				/* The old and the new value have the same
+				   size. Just replace. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: fs/ext3/xattr.c:465:
+				   size. Just replace. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: fs/ext3/xattr.c:485:
+				size_t o = le16_to_cpu(last->e_value_offs);
+				if (!last->e_value_block &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: fs/ext3/xattr.c:495:
+			size_t size = EXT3_XATTR_LEN(name_len);
+			last = ENTRY((void *)last - size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: fs/ext3/xattr.c:508:
+			void *val = s->base + min_offs - size;
+			s->here->e_value_offs = cpu_to_le16(min_offs - size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i.value"
#561: FILE: fs/ext3/xattr.c:562:
+	if (i.value == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: fs/ext3/xattr.c:572:
+		ea_bdebug(old_bh, "b_count=%d, refcount=%d",
+			atomic_read(&(old_bh->b_count)),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around old_bh->b_count
#581: FILE: fs/ext3/xattr.c:572:
+			atomic_read(&(old_bh->b_count)),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#583: FILE: fs/ext3/xattr.c:574:
+		if (ext3_xattr_check_block(old_bh)) {
[...]
 				"inode %ld: bad block %d", inode->i_ino,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#584: FILE: fs/ext3/xattr.c:575:
+bad_block:		ext3_error(sb, __FUNCTION__,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#726: FILE: fs/ext3/xattr.c:652:
+			s.first = ENTRY(header+1);
 			                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#748: FILE: fs/ext3/xattr.c:667:
+		s.first = ENTRY(header+1);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: fs/ext3/xattr.c:668:
+		s.here = ENTRY(header+1);
 		                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: fs/ext3/xattr.c:700:
+				ea_bdebug(new_bh, "reusing; refcount now=%d",
+					le32_to_cpu(BHDR(new_bh)->h_refcount));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#965: FILE: fs/ext3/xattr.c:827:
+		ext3_error(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: fs/ext3/xattr.c:828:
+		ext3_error(inode->i_sb, __FUNCTION__,
 			"inode %ld: block %d read error", inode->i_ino,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#975: FILE: fs/ext3/xattr.c:834:
+		ext3_error(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: fs/ext3/xattr.c:835:
+		ext3_error(inode->i_sb, __FUNCTION__,
 			"inode %ld: bad block %d", inode->i_ino,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1023: FILE: fs/ext3/xattr.c:961:
+			ext3_error(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: fs/ext3/xattr.c:962:
+			ext3_error(inode->i_sb, __FUNCTION__,
 				"inode %ld: block %ld read error",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216003.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 18 warnings, 16 checks, 967 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216003.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
