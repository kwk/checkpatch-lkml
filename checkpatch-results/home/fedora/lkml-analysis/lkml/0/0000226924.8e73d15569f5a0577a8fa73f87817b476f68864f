WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -Nur linux-2.6.9.org/drivers/message/fusion/mptbase.c linux-2.6.9/drivers/message/fusion/mptbase.c

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#37: FILE: drivers/message/fusion/mptbase.c:3167:
+		MPT_MDELAY (1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <IntStatus>
#55: FILE: drivers/message/fusion/mptbase.c:5941:
+	intstat = CHIPREG_READ32(&ioc->chip->IntStatus);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#69: FILE: drivers/message/fusion/mptbase.c:6067:
+EXPORT_SYMBOL_GPL(mpt_poll_interrupt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: drivers/message/fusion/mptbase.h:1116:
+extern void	 mpt_poll_interrupt(MPT_ADAPTER *ioc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#93: FILE: drivers/message/fusion/mptbase.h:1133:
+#define MPT_HOST_LOCK(host_lock)		\
+	if (crashdump_mode()) 			\
+		spin_lock(host_lock);		\
+	else					\
+		spin_lock_irq(host_lock);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host_lock' - possible side-effects?
#93: FILE: drivers/message/fusion/mptbase.h:1133:
+#define MPT_HOST_LOCK(host_lock)		\
+	if (crashdump_mode()) 			\
+		spin_lock(host_lock);		\
+	else					\
+		spin_lock_irq(host_lock);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#93: FILE: drivers/message/fusion/mptbase.h:1133:
+#define MPT_HOST_LOCK(host_lock)		\
+	if (crashdump_mode()) 			\
+		spin_lock(host_lock);		\
+	else					\
+		spin_lock_irq(host_lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: drivers/message/fusion/mptbase.h:1134:
+^Iif (crashdump_mode()) ^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#99: FILE: drivers/message/fusion/mptbase.h:1139:
+#define MPT_HOST_UNLOCK(host_lock)		\
+	if (crashdump_mode())			\
+		spin_unlock(host_lock);		\
+	else					\
+		spin_unlock_irq(host_lock);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host_lock' - possible side-effects?
#99: FILE: drivers/message/fusion/mptbase.h:1139:
+#define MPT_HOST_UNLOCK(host_lock)		\
+	if (crashdump_mode())			\
+		spin_unlock(host_lock);		\
+	else					\
+		spin_unlock_irq(host_lock);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#99: FILE: drivers/message/fusion/mptbase.h:1139:
+#define MPT_HOST_UNLOCK(host_lock)		\
+	if (crashdump_mode())			\
+		spin_unlock(host_lock);		\
+	else					\
+		spin_unlock_irq(host_lock);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#105: FILE: drivers/message/fusion/mptbase.h:1145:
+#define MPT_MDELAY(n)				\
+	if (crashdump_mode())			\
+		diskdump_mdelay(n);		\
+	else					\
+		mdelay(n);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#105: FILE: drivers/message/fusion/mptbase.h:1145:
+#define MPT_MDELAY(n)				\
+	if (crashdump_mode())			\
+		diskdump_mdelay(n);		\
+	else					\
+		mdelay(n);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#105: FILE: drivers/message/fusion/mptbase.h:1145:
+#define MPT_MDELAY(n)				\
+	if (crashdump_mode())			\
+		diskdump_mdelay(n);		\
+	else					\
+		mdelay(n);

CHECK:SPACING: No space is necessary after a cast
#151: FILE: drivers/message/fusion/mptscsih.c:2988:
+	hd = (MPT_SCSI_HOST *) sdev->host->hostdata;

CHECK:CAMELCASE: Avoid CamelCase: <FreeQlock>
#157: FILE: drivers/message/fusion/mptscsih.c:2994:
+	if (spin_is_locked(&ioc->FreeQlock))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#157: FILE: drivers/message/fusion/mptscsih.c:2994:
+	if (spin_is_locked(&ioc->FreeQlock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:SPACING: No space is necessary after a cast
#173: FILE: drivers/message/fusion/mptscsih.c:3010:
+	hd = (MPT_SCSI_HOST *) sdev->host->hostdata;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#180: FILE: drivers/message/fusion/mptscsih.c:3017:
+}
+/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 9 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
