WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
 fs/eventpoll.c               |1624  +++++++++++++++++++++++++++++++++++++++++++

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: arch/i386/kernel/entry.S:661:
+^I.long SYMBOL_NAME(sys_epoll_create)     $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: fs/eventpoll.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Efficent' may be misspelled - perhaps 'Efficient'?
#102: FILE: fs/eventpoll.c:2:
+ *  fs/eventpoll.c ( Efficent event polling implementation )
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#102: FILE: fs/eventpoll.c:2:
+ *  fs/eventpoll.c ( Efficent event polling implementation )

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: fs/eventpoll.c:11:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/eventpoll.c:12:
+ *  11 December 2002^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: fs/eventpoll.c:14:
+ * ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: fs/eventpoll.c:14:
+ * ^I^I$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#137: FILE: fs/eventpoll.c:37:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#138: FILE: fs/eventpoll.c:38:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#140: FILE: fs/eventpoll.c:40:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#142: FILE: fs/eventpoll.c:42:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: fs/eventpoll.c:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#151: FILE: fs/eventpoll.c:51:
+#define DPRINTK(x) printk x

CHECK:SPACING: No space is necessary after a cast
#154: FILE: fs/eventpoll.c:54:
+#define DPRINTK(x) (void) 0

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#154: FILE: fs/eventpoll.c:54:
+#define DPRINTK(x) (void) 0

CHECK:SPACING: No space is necessary after a cast
#155: FILE: fs/eventpoll.c:55:
+#define DNPRINTK(n, x) (void) 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#155: FILE: fs/eventpoll.c:55:
+#define DNPRINTK(n, x) (void) 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: fs/eventpoll.c:66:
+
+

CHECK:SPACING: No space is necessary after a cast
#183: FILE: fs/eventpoll.c:83:
+#define EP_HASH_PAGES(hbits) ((int) ((1 << (hbits)) / EP_HENTRY_X_PAGE + \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hbits' - possible side-effects?
#183: FILE: fs/eventpoll.c:83:
+#define EP_HASH_PAGES(hbits) ((int) ((1 << (hbits)) / EP_HENTRY_X_PAGE + \
+				     ((1 << (hbits)) % EP_HENTRY_X_PAGE ? 1: 0)))

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#184: FILE: fs/eventpoll.c:84:
+				     ((1 << (hbits)) % EP_HENTRY_X_PAGE ? 1: 0)))
 				                                           ^

CHECK:SPACING: No space is necessary after a cast
#187: FILE: fs/eventpoll.c:87:
+#define EPI_MEM_ALLOC()	(struct epitem *) kmem_cache_alloc(epi_cache, SLAB_KERNEL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#187: FILE: fs/eventpoll.c:87:
+#define EPI_MEM_ALLOC()	(struct epitem *) kmem_cache_alloc(epi_cache, SLAB_KERNEL)

CHECK:SPACING: No space is necessary after a cast
#193: FILE: fs/eventpoll.c:93:
+#define PWQ_MEM_ALLOC()	(struct eppoll_entry *) kmem_cache_alloc(pwq_cache, SLAB_KERNEL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#193: FILE: fs/eventpoll.c:93:
+#define PWQ_MEM_ALLOC()	(struct eppoll_entry *) kmem_cache_alloc(pwq_cache, SLAB_KERNEL)

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#203: FILE: fs/eventpoll.c:103:
+ * This is usefull for us because we can test if the item is linked
            ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#206: FILE: fs/eventpoll.c:106:
+#define EP_LIST_DEL(p) do { list_del(p); INIT_LIST_HEAD(p); } while (0)

CHECK:SPACING: No space is necessary after a cast
#212: FILE: fs/eventpoll.c:112:
+#define EP_ITEM_FROM_WAIT(p) ((struct epitem *) container_of(p, struct eppoll_entry, wait)->base)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#229: FILE: fs/eventpoll.c:129:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#249: FILE: fs/eventpoll.c:149:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'rapresent' may be misspelled - perhaps 'represent'?
#254: FILE: fs/eventpoll.c:154:
+ * structure and rapresent the main data sructure for the eventpoll
                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#254: FILE: fs/eventpoll.c:154:
+ * structure and rapresent the main data sructure for the eventpoll
                                          ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#337: FILE: fs/eventpoll.c:237:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#359: FILE: fs/eventpoll.c:259:
+static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: fs/eventpoll.c:271:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#395: FILE: fs/eventpoll.c:295:
+static struct file_operations eventpoll_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: fs/eventpoll.c:302:
+        buf->f_type = EVENTPOLLFS_MAGIC;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: fs/eventpoll.c:302:
+        buf->f_type = EVENTPOLLFS_MAGIC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/eventpoll.c:303:
+        buf->f_bsize = 1024;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/eventpoll.c:303:
+        buf->f_bsize = 1024;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: fs/eventpoll.c:304:
+        buf->f_namelen = 255;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: fs/eventpoll.c:304:
+        buf->f_namelen = 255;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: fs/eventpoll.c:305:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: fs/eventpoll.c:305:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: fs/eventpoll.c:309:
+        statfs:         eventpollfs_statfs,$

WARNING:INDENTED_LABEL: labels should not be indented
#409: FILE: fs/eventpoll.c:309:
+        statfs:         eventpollfs_statfs,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: fs/eventpoll.c:312:
+static struct super_block * eventpollfs_read_super(struct super_block *sb, void *data, int silent)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: fs/eventpoll.c:315:
+	struct inode *root = new_inode(sb);
+	if (!root)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#417: FILE: fs/eventpoll.c:317:
+	root->i_mode = S_IFDIR | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: fs/eventpoll.c:318:
+	root->i_uid = root->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#419: FILE: fs/eventpoll.c:319:
+	root->i_atime = root->i_mtime = root->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#426: FILE: fs/eventpoll.c:326:
+		iput(root);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: fs/eventpoll.c:337:
+
+

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#439: FILE: fs/eventpoll.c:339:
+static struct dentry_operations eventpollfs_dentry_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#443: FILE: fs/eventpoll.c:343:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#448: FILE: fs/eventpoll.c:348:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#453: FILE: fs/eventpoll.c:353:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#508: FILE: fs/eventpoll.c:408:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#517: FILE: fs/eventpoll.c:417:
+	for (i = 0, val = 1; val < hintsize && i < EP_MAX_HASH_BITS; i++, val <<= 1);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#518: FILE: fs/eventpoll.c:418:
+	return i <  EP_MIN_HASH_BITS ?  EP_MIN_HASH_BITS: i;
 	                                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: fs/eventpoll.c:421:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#525: FILE: fs/eventpoll.c:425:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: fs/eventpoll.c:430:
+
+

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#556: FILE: fs/eventpoll.c:456:
+	 * cleanup path, and this means that noone is using this file anymore.
 	                                     ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: fs/eventpoll.c:470:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_create', this function's name, in a string
#585: FILE: fs/eventpoll.c:485:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_create(%d)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#589: FILE: fs/eventpoll.c:489:
+	hashbits = ep_get_hash_bits((unsigned int) size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: fs/eventpoll.c:504:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_create', this function's name, in a string
#605: FILE: fs/eventpoll.c:505:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_create(%d) = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_create', this function's name, in a string
#613: FILE: fs/eventpoll.c:513:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_create(%d) = %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#618: FILE: fs/eventpoll.c:518:
+
+

WARNING:TYPO_SPELLING: 'rapresents' may be misspelled - perhaps 'represents'?
#622: FILE: fs/eventpoll.c:522:
+ * the interest set. It rapresents the kernel part of the user spcae epoll_ctl(2).
                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'spcae' may be misspelled - perhaps 'space'?
#622: FILE: fs/eventpoll.c:522:
+ * the interest set. It rapresents the kernel part of the user spcae epoll_ctl(2).
                                                                ^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_ctl', this function's name, in a string
#632: FILE: fs/eventpoll.c:532:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_ctl(%d, %d, %d, %u)\n",

WARNING:TYPO_SPELLING: 'rapresent' may be misspelled - perhaps 'represent'?
#675: FILE: fs/eventpoll.c:575:
+	 * This does not rapresent a problem though and we don't really want
 	                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'syncronization' may be misspelled - perhaps 'synchronization'?
#676: FILE: fs/eventpoll.c:576:
+	 * to put an extra syncronization object to deal with this harmless condition.
 	                   ^^^^^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#683: FILE: fs/eventpoll.c:583:
+		if (!epi) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#687: FILE: fs/eventpoll.c:587:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#697: FILE: fs/eventpoll.c:597:
+		if (epi) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: fs/eventpoll.c:600:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_ctl', this function's name, in a string
#717: FILE: fs/eventpoll.c:617:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_ctl(%d, %d, %d, %u) = %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#723: FILE: fs/eventpoll.c:623:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_wait', this function's name, in a string
#735: FILE: fs/eventpoll.c:635:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_wait(%d, %p, %d, %d)\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#743: FILE: fs/eventpoll.c:643:
+	if ((error = verify_area(VERIFY_WRITE, events, maxevents * sizeof(struct epoll_event))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_wait', this function's name, in a string
#772: FILE: fs/eventpoll.c:672:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_wait(%d, %p, %d, %d) = %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#778: FILE: fs/eventpoll.c:678:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#848: FILE: fs/eventpoll.c:748:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#855: FILE: fs/eventpoll.c:755:
+
+

CHECK:SPACING: No space is necessary after a cast
#861: FILE: fs/eventpoll.c:761:
+		pages[i] = (char *) __get_free_pages(GFP_KERNEL, 0);

CHECK:SPACING: No space is necessary after a cast
#865: FILE: fs/eventpoll.c:765:
+				free_pages((unsigned long) pages[i], 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: fs/eventpoll.c:774:
+
+

CHECK:SPACING: No space is necessary after a cast
#881: FILE: fs/eventpoll.c:781:
+		free_pages((unsigned long) pages[i], 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#886: FILE: fs/eventpoll.c:786:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#892: FILE: fs/eventpoll.c:792:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ep)...) over kmalloc(sizeof(struct eventpoll)...)
#892: FILE: fs/eventpoll.c:792:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_file_init', this function's name, in a string
#905: FILE: fs/eventpoll.c:805:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_file_init() ep=%p\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#910: FILE: fs/eventpoll.c:810:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#916: FILE: fs/eventpoll.c:816:
+{
+

CHECK:SPACING: No space is necessary after a cast
#917: FILE: fs/eventpoll.c:817:
+	return (unsigned int) hash_ptr(file, ep->hashbits);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#920: FILE: fs/eventpoll.c:820:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#926: FILE: fs/eventpoll.c:826:
+{
+

CHECK:SPACING: No space is necessary after a cast
#927: FILE: fs/eventpoll.c:827:
+	return (struct list_head *) (ep->hpages[index / EP_HENTRY_X_PAGE] +

CHECK:LINE_SPACING: Please don't use multiple blank lines
#931: FILE: fs/eventpoll.c:831:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#957: FILE: fs/eventpoll.c:857:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1004: FILE: fs/eventpoll.c:904:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_find', this function's name, in a string
#1031: FILE: fs/eventpoll.c:931:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_find(%p) -> %p\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: fs/eventpoll.c:937:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1044: FILE: fs/eventpoll.c:944:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1048: FILE: fs/eventpoll.c:948:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1056: FILE: fs/eventpoll.c:956:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1061: FILE: fs/eventpoll.c:961:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1071: FILE: fs/eventpoll.c:971:
+	if (epi->nwait >= 0 && (pwq = PWQ_MEM_ALLOC()))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1071: FILE: fs/eventpoll.c:971:
+	if (epi->nwait >= 0 && (pwq = PWQ_MEM_ALLOC()))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1080: FILE: fs/eventpoll.c:980:
+	else
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1080: FILE: fs/eventpoll.c:980:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1082: FILE: fs/eventpoll.c:982:
+		/* We have to signal that an error occured */
 		                                   ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1087: FILE: fs/eventpoll.c:987:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1096: FILE: fs/eventpoll.c:996:
+	if (!(epi = EPI_MEM_ALLOC()))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1147: FILE: fs/eventpoll.c:1047:
+		if (waitqueue_active(&ep->poll_wait))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_insert', this function's name, in a string
#1157: FILE: fs/eventpoll.c:1057:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_insert(%p, %p)\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1179: FILE: fs/eventpoll.c:1079:
+
+

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1217: FILE: fs/eventpoll.c:1117:
+		if (waitqueue_active(&ep->poll_wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1230: FILE: fs/eventpoll.c:1130:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1245: FILE: fs/eventpoll.c:1145:
+	if (nwait)
+	{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1257: FILE: fs/eventpoll.c:1157:
+
+

WARNING:TYPO_SPELLING: 'togheter' may be misspelled - perhaps 'together'?
#1276: FILE: fs/eventpoll.c:1176:
+	 * This operation togheter with the above check closes the door to
 	                  ^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_unlink', this function's name, in a string
#1291: FILE: fs/eventpoll.c:1191:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_unlink(%p, %p) = %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1297: FILE: fs/eventpoll.c:1197:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_remove', this function's name, in a string
#1339: FILE: fs/eventpoll.c:1239:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_remove(%p, %p) = %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1345: FILE: fs/eventpoll.c:1245:
+
+

WARNING:TYPO_SPELLING: 'machanism' may be misspelled - perhaps 'mechanism'?
#1348: FILE: fs/eventpoll.c:1248:
+ * machanism. It is called by the stored file descriptors when they
    ^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1351: FILE: fs/eventpoll.c:1251:
+static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync)

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1376: FILE: fs/eventpoll.c:1276:
+	if (waitqueue_active(&ep->poll_wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1388: FILE: fs/eventpoll.c:1288:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1402: FILE: fs/eventpoll.c:1302:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1421: FILE: fs/eventpoll.c:1321:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1456: FILE: fs/eventpoll.c:1356:
+
+

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1459: FILE: fs/eventpoll.c:1359:
+ * __copy_to_user() might sleep, and also f_op->poll() might reenable the IRQ
                                                              ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1504: FILE: fs/eventpoll.c:1404:
+
+

WARNING:TYPO_SPELLING: 'transfering' may be misspelled - perhaps 'transferring'?
#1515: FILE: fs/eventpoll.c:1415:
+	 * eventpoll_release() while we're transfering
 	                                   ^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: fs/eventpoll.c:1450:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1563: FILE: fs/eventpoll.c:1463:
+	jtimeout = timeout == -1 ? MAX_SCHEDULE_TIMEOUT: (timeout * HZ) / 1000;
 	                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1611: FILE: fs/eventpoll.c:1511:
+	if (!res && eavail &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1618: FILE: fs/eventpoll.c:1518:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1621: FILE: fs/eventpoll.c:1521:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1625: FILE: fs/eventpoll.c:1525:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1643: FILE: fs/eventpoll.c:1543:
+	inode->i_mode = S_IRUSR | S_IWUSR;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1646: FILE: fs/eventpoll.c:1546:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1654: FILE: fs/eventpoll.c:1554:
+
+

WARNING:TYPO_SPELLING: 'syncronize' may be misspelled - perhaps 'synchronize'?
#1659: FILE: fs/eventpoll.c:1559:
+	/* Initialize the semaphore used to syncronize the file cleanup code */
 	                                    ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1710: FILE: fs/eventpoll.c:1610:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1747: FILE: fs/file_table.c:90:
+	eventpoll_init_file(filp);
 	                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1756: FILE: fs/file_table.c:111:
+^I ^I * The function eventpoll_release() should be the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1756: FILE: fs/file_table.c:111:
+^I ^I * The function eventpoll_release() should be the $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1756: FILE: fs/file_table.c:111:
+^I ^I * The function eventpoll_release() should be the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1757: FILE: fs/file_table.c:112:
+^I ^I * first called in the file cleanup chain.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1757: FILE: fs/file_table.c:112:
+^I ^I * first called in the file cleanup chain.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1758: FILE: fs/file_table.c:113:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1758: FILE: fs/file_table.c:113:
+^I ^I */$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1777: FILE: fs/select.c:56:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address, poll_table *p);
                              ^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1777: FILE: fs/select.c:56:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address, poll_table *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1790: FILE: fs/select.c:67:
+	struct poll_table_page * p = pwq->table;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1799: FILE: fs/select.c:84:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address, poll_table *_p)
                              ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1809: FILE: fs/select.c:116:
 
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1841: FILE: fs/select.c:401:
+	poll_table* pt = &wait->pt;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1873: FILE: include/asm-ppc/unistd.h:244:
+#define __NR_epoll_create   ^I254$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1874: FILE: include/asm-ppc/unistd.h:245:
+#define __NR_epoll_ctl      ^I255$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1875: FILE: include/asm-ppc/unistd.h:246:
+#define __NR_epoll_wait     ^I256$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1882: FILE: include/linux/eventpoll.h:1:
+/*

WARNING:TYPO_SPELLING: 'Efficent' may be misspelled - perhaps 'Efficient'?
#1883: FILE: include/linux/eventpoll.h:2:
+ *  include/linux/eventpoll.h ( Efficent event polling implementation )
                                 ^^^^^^^^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1883: FILE: include/linux/eventpoll.h:2:
+ *  include/linux/eventpoll.h ( Efficent event polling implementation )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1898: FILE: include/linux/eventpoll.h:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1914: FILE: include/linux/eventpoll.h:33:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1938: FILE: include/linux/fs.h:546:
+	spinlock_t		f_ep_lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1945: FILE: include/linux/hash.h:1:
+#ifndef _LINUX_HASH_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1948: FILE: include/linux/hash.h:4:
+/* Fast hashing routine for a long.
+   (C) 2002 William Lee Irwin III, IBM */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1948: FILE: include/linux/hash.h:4:
+   (C) 2002 William Lee Irwin III, IBM */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1977: FILE: include/linux/hash.h:33:
+	unsigned long n = hash;
+	n <<= 18;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1997: FILE: include/linux/hash.h:53:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#2017: FILE: include/linux/kernel.h:185:
+#define container_of(ptr, type, member) ({                      \
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
+	(type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#2017: FILE: include/linux/kernel.h:185:
+#define container_of(ptr, type, member) ({                      \
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
+	(type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2018: FILE: include/linux/kernel.h:186:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
 	                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2018: FILE: include/linux/kernel.h:186:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);    \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2018: FILE: include/linux/kernel.h:186:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);    \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2019: FILE: include/linux/kernel.h:187:
+	(type *)( (char *)__mptr - offsetof(type,member) );})
 	                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2019: FILE: include/linux/kernel.h:187:
+	(type *)( (char *)__mptr - offsetof(type,member) );})
 	                                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2019: FILE: include/linux/kernel.h:187:
+	(type *)( (char *)__mptr - offsetof(type,member) );})

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2019: FILE: include/linux/kernel.h:187:
+	(type *)( (char *)__mptr - offsetof(type,member) );})

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2033: FILE: include/linux/poll.h:15:
+/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2050: FILE: include/linux/poll.h:27:
+		p->qproc(filp, wait_address, p);
 		         ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2067: FILE: include/linux/poll.h:40:
+	struct poll_table_page * table;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2071: FILE: include/linux/poll.h:44:
+extern void poll_initwait(struct poll_wqueues *pwq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2072: FILE: include/linux/poll.h:45:
+extern void poll_freewait(struct poll_wqueues *pwq);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2082: FILE: include/linux/sched.h:148:
+typedef struct task_struct task_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2094: FILE: include/linux/sys.h:7:
+#define NR_syscalls 260 $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2104: FILE: include/linux/wait.h:22:
+typedef struct __wait_queue wait_queue_t;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2129: FILE: include/linux/wait.h:144:
+	func:		NULL,						\
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#2129: FILE: include/linux/wait.h:144:
+	func:		NULL,						\

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2142: FILE: include/linux/wait.h:186:
 }
+static inline void init_waitqueue_func_entry(wait_queue_t *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2143: FILE: include/linux/wait.h:187:
+static inline void init_waitqueue_func_entry(wait_queue_t *q,
+					wait_queue_func_t func)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2148: FILE: include/linux/wait.h:192:
+}                      $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2156: FILE: include/linux/wait.h:204:
 }
+#define add_wait_queue_cond(q, wait, cond) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#2156: FILE: include/linux/wait.h:204:
+#define add_wait_queue_cond(q, wait, cond) \
+	({                                                      \
+		unsigned long flags;                            \
+		int _raced = 0;                                 \
+		wq_write_lock_irqsave(&(q)->lock, flags);       \
+		(wait)->flags = 0;                              \
+		__add_wait_queue((q), (wait));                  \
+		rmb();                                          \
+		if (!(cond)) {                                  \
+			_raced = 1;                             \
+			__remove_wait_queue((q), (wait));       \
+		}                                               \
+		wq_write_unlock_irqrestore(&(q)->lock, flags);  \
+		_raced;                                         \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wait' - possible side-effects?
#2156: FILE: include/linux/wait.h:204:
+#define add_wait_queue_cond(q, wait, cond) \
+	({                                                      \
+		unsigned long flags;                            \
+		int _raced = 0;                                 \
+		wq_write_lock_irqsave(&(q)->lock, flags);       \
+		(wait)->flags = 0;                              \
+		__add_wait_queue((q), (wait));                  \
+		rmb();                                          \
+		if (!(cond)) {                                  \
+			_raced = 1;                             \
+			__remove_wait_queue((q), (wait));       \
+		}                                               \
+		wq_write_unlock_irqrestore(&(q)->lock, flags);  \
+		_raced;                                         \
+	})

WARNING:MEMORY_BARRIER: memory barrier without comment
#2163: FILE: include/linux/wait.h:211:
+		rmb();                                          \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2207: FILE: kernel/sched.c:729:
+			unsigned flags = curr->flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2208: FILE: kernel/sched.c:730:
+			unsigned flags = curr->flags;
+			func(curr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407311.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 76 warnings, 87 checks, 2089 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407311.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
