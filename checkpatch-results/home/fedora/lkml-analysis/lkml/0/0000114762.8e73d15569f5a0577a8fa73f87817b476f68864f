WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: kernel/futex.c:920:
+       mapping->robust_head =3D NULL;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#63: FILE: kernel/futex.c:920:
+       mapping->robust_head =3D NULL;
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/futex.h:38:
+extern void futex_free_robust_list(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/futex.h:39:
+extern void exit_futex(struct task_struct *tsk);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: include/linux/futex.h:43:
+#define futex_init_inode(a) ^I^Ido { } while (0)$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#264: FILE: kernel/futex.c:47:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: kernel/futex.c:148:
+static int get_futex_key(unsigned long uaddr, union futex_key *key,
+			struct list_head **list, struct semaphore **sem)

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: kernel/futex.c:892:
+ ^Istruct futex_robust *this, *next;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: kernel/futex.c:892:
+ ^Istruct futex_robust *this, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: kernel/futex.c:892:
+ ^Istruct futex_robust *this, *next;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#427: FILE: kernel/futex.c:895:
+	if (inode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#431: FILE: kernel/futex.c:899:
+	if (mapping == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping->robust_head"
#433: FILE: kernel/futex.c:901:
+	if (mapping->robust_head == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#455: FILE: kernel/futex.c:923:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: kernel/futex.c:988:
+		uaddr = get_shared_uaddr(key,vma);
 		                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: kernel/futex.c:1009:
+ ^Iunsigned long uaddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: kernel/futex.c:1009:
+ ^Iunsigned long uaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: kernel/futex.c:1009:
+ ^Iunsigned long uaddr;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#547: FILE: kernel/futex.c:1015:
+	list_for_each_entry_safe(this, next, head, list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#582: FILE: kernel/futex.c:1050:
+	if (mm==NULL)
 	      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#582: FILE: kernel/futex.c:1050:
+	if (mm==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#587: FILE: kernel/futex.c:1055:
+	for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#588: FILE: kernel/futex.c:1056:
+		if (vma->vm_file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file->f_mapping"
#591: FILE: kernel/futex.c:1059:
+		if (vma->vm_file->f_mapping == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file->f_mapping->robust_head"
#594: FILE: kernel/futex.c:1062:
+		if (vma->vm_file->f_mapping->robust_head == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file->f_mapping->robust_head"
#666: FILE: kernel/futex.c:1134:
+		if (vma->vm_file->f_mapping->robust_head == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#712: FILE: kernel/futex.c:1180:
+	if (head == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#720: FILE: kernel/futex.c:1188:
+		if (match_futex (&this->key, &key)) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#792: FILE: kernel/futex.c:1318:
+	robust_futex_cachep = kmem_cache_create("robust_futex", sizeof(struct futex_robust), 0, 0, NULL, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#793: FILE: kernel/futex.c:1319:
+	file_futex_cachep = kmem_cache_create("file_futex", sizeof(struct futex_head), 0, 0, NULL, NULL);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#806: FILE: init/Kconfig:351:
+config ROBUST_FUTEX
+	bool "Enable robust futex support"
+	depends on FUTEX
+	default y
+	help
+	  Enable this option if you want to use robust user space mutexes.
+	  Enabling this option slows down the exit path of the kernel for
+	  all processes.  Robust futexes will run glibc-based applications correctly.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 12 warnings, 14 checks, 642 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
