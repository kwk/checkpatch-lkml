WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: arch/ppc/platforms/4xx/bamboo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#42: FILE: arch/ppc/platforms/4xx/bamboo.c:2:
+ * arch/ppc/platforms/4xx/bamboo.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#79: FILE: arch/ppc/platforms/4xx/bamboo.c:39:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#82: FILE: arch/ppc/platforms/4xx/bamboo.c:42:
+#include <asm/io.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: arch/ppc/platforms/4xx/bamboo.c:93:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#134: FILE: arch/ppc/platforms/4xx/bamboo.c:94:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#139: FILE: arch/ppc/platforms/4xx/bamboo.c:99:
+	seq_printf(m, "vendor\t\t: IBM\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#140: FILE: arch/ppc/platforms/4xx/bamboo.c:100:
+	seq_printf(m, "machine\t\t: PPC440EP EVB (Bamboo)\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: arch/ppc/platforms/4xx/bamboo.c:111:
+^I * ^I   A   B   C   D$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: arch/ppc/platforms/4xx/bamboo.c:126:
+	unsigned char * selection1_base;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: arch/ppc/platforms/4xx/bamboo.c:131:
+^I$

CHECK:SPACING: No space is necessary after a cast
#174: FILE: arch/ppc/platforms/4xx/bamboo.c:134:
+	iounmap((void *) selection1_base);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: arch/ppc/platforms/4xx/bamboo.c:139:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: arch/ppc/platforms/4xx/bamboo.c:141:
+^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#201: FILE: arch/ppc/platforms/4xx/bamboo.c:161:
+#define PCI_READW(offset) \
+        (readw((void *)((u32)pci_reg_base+offset)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: arch/ppc/platforms/4xx/bamboo.c:162:
+        (readw((void *)((u32)pci_reg_base+offset)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/ppc/platforms/4xx/bamboo.c:162:
+        (readw((void *)((u32)pci_reg_base+offset)))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: arch/ppc/platforms/4xx/bamboo.c:162:
+        (readw((void *)((u32)pci_reg_base+offset)))
                                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#204: FILE: arch/ppc/platforms/4xx/bamboo.c:164:
+#define PCI_WRITEW(value, offset) \
+	(writew(value, (void *)((u32)pci_reg_base+offset)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: arch/ppc/platforms/4xx/bamboo.c:165:
+	(writew(value, (void *)((u32)pci_reg_base+offset)))
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/ppc/platforms/4xx/bamboo.c:166:
+^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#207: FILE: arch/ppc/platforms/4xx/bamboo.c:167:
+#define PCI_WRITEL(value, offset) \
+	(writel(value, (void *)((u32)pci_reg_base+offset)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#208: FILE: arch/ppc/platforms/4xx/bamboo.c:168:
+	(writel(value, (void *)((u32)pci_reg_base+offset)))
 	                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: arch/ppc/platforms/4xx/bamboo.c:175:
+	unsigned long memory_size;
+	memory_size = ppc_md.find_end_of_memory();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/ppc/platforms/4xx/bamboo.c:180:
+^IPCI_WRITEW(PCI_READW(PCI_COMMAND) | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: arch/ppc/platforms/4xx/bamboo.c:181:
+^I^I   PCI_COMMAND_MEMORY | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: arch/ppc/platforms/4xx/bamboo.c:195:
+^IPCI_WRITEL(((0xffffffff - $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: arch/ppc/platforms/4xx/bamboo.c:196:
+^I^I     (BAMBOO_PCI_UPPER_MEM - BAMBOO_PCI_MEM_BASE)) | 0x01), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: arch/ppc/platforms/4xx/bamboo.c:198:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: arch/ppc/platforms/4xx/bamboo.c:205:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: arch/ppc/platforms/4xx/bamboo.c:212:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: arch/ppc/platforms/4xx/bamboo.c:220:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: arch/ppc/platforms/4xx/bamboo.c:228:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: arch/ppc/platforms/4xx/bamboo.c:252:
+	pci_init_resource(&hose->io_resource,
+			BAMBOO_PCI_LOWER_IO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: arch/ppc/platforms/4xx/bamboo.c:258:
+	pci_init_resource(&hose->mem_resources[0],
+			BAMBOO_PCI_LOWER_MEM,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: arch/ppc/platforms/4xx/bamboo.c:274:
+	setup_indirect_pci(hose,
+			BAMBOO_PCI_CFGA_PLB32,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#351: FILE: arch/ppc/platforms/4xx/bamboo.c:311:
+	if (early_serial_setup(&port) != 0) {
+		printk("Early serial init of port 0 failed\n");
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: arch/ppc/platforms/4xx/bamboo.c:312:
+		printk("Early serial init of port 0 failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#365: FILE: arch/ppc/platforms/4xx/bamboo.c:325:
+	if (early_serial_setup(&port) != 0) {
+		printk("Early serial init of port 1 failed\n");
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: arch/ppc/platforms/4xx/bamboo.c:326:
+		printk("Early serial init of port 1 failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#379: FILE: arch/ppc/platforms/4xx/bamboo.c:339:
+	if (early_serial_setup(&port) != 0) {
+		printk("Early serial init of port 2 failed\n");
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: arch/ppc/platforms/4xx/bamboo.c:340:
+		printk("Early serial init of port 2 failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#393: FILE: arch/ppc/platforms/4xx/bamboo.c:353:
+	if (early_serial_setup(&port) != 0) {
+		printk("Early serial init of port 3 failed\n");
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: arch/ppc/platforms/4xx/bamboo.c:354:
+		printk("Early serial init of port 3 failed\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#401: FILE: arch/ppc/platforms/4xx/bamboo.c:361:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: arch/ppc/platforms/4xx/bamboo.c:369:
+	TODC_INIT(TODC_TYPE_DS1743,
+			0,

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: arch/ppc/platforms/4xx/bamboo.c:375:
+        loops_per_jiffy = 50000000/HZ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: arch/ppc/platforms/4xx/bamboo.c:375:
+        loops_per_jiffy = 50000000/HZ;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#415: FILE: arch/ppc/platforms/4xx/bamboo.c:375:
+        loops_per_jiffy = 50000000/HZ;
                                   ^

CHECK:CAMELCASE: Avoid CamelCase: <Root_RAM0>
#422: FILE: arch/ppc/platforms/4xx/bamboo.c:382:
+		ROOT_DEV = Root_RAM0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Root_NFS>
#426: FILE: arch/ppc/platforms/4xx/bamboo.c:386:
+		ROOT_DEV = Root_NFS;

CHECK:CAMELCASE: Avoid CamelCase: <Root_HDA1>
#428: FILE: arch/ppc/platforms/4xx/bamboo.c:388:
+		ROOT_DEV = Root_HDA1;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: arch/ppc/platforms/4xx/bamboo.c:394:
+	printk("IBM Bamboo port (MontaVista Software, Inc. (source@mvista.com))\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: arch/ppc/platforms/4xx/bamboo.c:398:
+void __init platform_init(unsigned long r3, unsigned long r4,
+		unsigned long r5, unsigned long r6, unsigned long r7)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#449: FILE: arch/ppc/platforms/4xx/bamboo.c:409:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#473: FILE: arch/ppc/platforms/4xx/bamboo.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: arch/ppc/platforms/4xx/bamboo.h:28:
+#define PIBS_MAC_BASE			(PIBS_FLASH_BASE+0xc0400)
                      			                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#515: FILE: arch/ppc/platforms/4xx/bamboo.h:43:
+#define BAMBOO_FULL_DUPLEX_EN(x)	(x & 0x08)

CHECK:CAMELCASE: Avoid CamelCase: <BAMBOO_FORCE_100Mbps>
#516: FILE: arch/ppc/platforms/4xx/bamboo.h:44:
+#define BAMBOO_FORCE_100Mbps(x)		(x & 0x04)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#516: FILE: arch/ppc/platforms/4xx/bamboo.h:44:
+#define BAMBOO_FORCE_100Mbps(x)		(x & 0x04)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#517: FILE: arch/ppc/platforms/4xx/bamboo.h:45:
+#define BAMBOO_AUTONEGOTIATE(x)		(x & 0x02)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#520: FILE: arch/ppc/platforms/4xx/bamboo.h:48:
+#define BAMBOO_BOOT_SMALL_FLASH(x)	(!(x & 0x80))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#521: FILE: arch/ppc/platforms/4xx/bamboo.h:49:
+#define BAMBOO_LARGE_FLASH_EN(x)	(!(x & 0x40))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#522: FILE: arch/ppc/platforms/4xx/bamboo.h:50:
+#define BAMBOO_BOOT_NAND_FLASH(x)	(!(x & 0x20))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#525: FILE: arch/ppc/platforms/4xx/bamboo.h:53:
+#define BAMBOO_SEL_MII(x)		(x & 0x80)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#526: FILE: arch/ppc/platforms/4xx/bamboo.h:54:
+#define BAMBOO_SEL_RMII(x)		(x & 0x40)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#527: FILE: arch/ppc/platforms/4xx/bamboo.h:55:
+#define BAMBOO_SEL_SMII(x)		(x & 0x20)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#554: FILE: arch/ppc/platforms/4xx/bamboo.h:82:
+#define BASE_BAUD			33177600/3/16
                  			        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#554: FILE: arch/ppc/platforms/4xx/bamboo.h:82:
+#define BASE_BAUD			33177600/3/16
                  			          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#554: FILE: arch/ppc/platforms/4xx/bamboo.h:82:
+#define BASE_BAUD			33177600/3/16

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#563: FILE: arch/ppc/platforms/4xx/bamboo.h:91:
+		iomem_base: UART##num##_IO_BASE,		\
 		          ^

WARNING:INDENTED_LABEL: labels should not be indented
#563: FILE: arch/ppc/platforms/4xx/bamboo.h:91:
+		iomem_base: UART##num##_IO_BASE,		\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#564: FILE: arch/ppc/platforms/4xx/bamboo.h:92:
+		io_type: SERIAL_IO_MEM},
 		       ^

WARNING:INDENTED_LABEL: labels should not be indented
#564: FILE: arch/ppc/platforms/4xx/bamboo.h:92:
+		io_type: SERIAL_IO_MEM},

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#566: FILE: arch/ppc/platforms/4xx/bamboo.h:94:
+#define SERIAL_PORT_DFNS	\
+	STD_UART_OP(0)		\
+	STD_UART_OP(1)		\
+	STD_UART_OP(2)		\
+	STD_UART_OP(3)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: arch/ppc/platforms/4xx/bamboo.h:134:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165138.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 21 warnings, 34 checks, 563 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165138.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
