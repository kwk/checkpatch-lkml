WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
> You can also do preprocessor macro tricks to get something like an unnamed

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#55: FILE: include/linux/dcache.h:64:
+#define DENTRY_MEMBERS \
+	atomic_t d_count; \
+	unsigned int d_flags; \
+	struct inode  * d_inode;	/* Where the name belongs to - NULL is negative */ \
+	struct dentry * d_parent;	/* parent directory */ \
+	struct list_head d_hash;	/* lookup hash list */ \
+	struct list_head d_lru;		/* d_count = 0 LRU list */ \
+	struct list_head d_child;	/* child of parent list */ \
+	struct list_head d_subdirs;	/* our children */ \
+	struct list_head d_alias;	/* inode alias list */ \
+	int d_mounted; \
+	struct qstr d_name; \
+	unsigned long d_time;		/* used by d_revalidate */ \
+	struct dentry_operations  *d_op; \
+	struct super_block * d_sb;	/* The root of the dentry tree */ \
+	unsigned long d_vfs_flags; \
+	void * d_fsdata;		/* fs-specific data */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#58: FILE: include/linux/dcache.h:67:
+	struct inode  * d_inode;	/* Where the name belongs to - NULL is negative */ \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: include/linux/dcache.h:68:
+	struct dentry * d_parent;	/* parent directory */ \

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#68: FILE: include/linux/dcache.h:77:
+	struct dentry_operations  *d_op; \

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#69: FILE: include/linux/dcache.h:78:
+	struct super_block * d_sb;	/* The root of the dentry tree */ \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#71: FILE: include/linux/dcache.h:80:
+	void * d_fsdata;		/* fs-specific data */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#76: FILE: include/linux/dcache.h:85:
+};
+/* +15 to guarantee a minimal inline len of 16 bytes */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#78: FILE: include/linux/dcache.h:87:
+	(15 + L1_CACHE_BYTES - (15+sizeof(struct dentry_nameless))%L1_CACHE_BYTES)
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#78: FILE: include/linux/dcache.h:87:
+	(15 + L1_CACHE_BYTES - (15+sizeof(struct dentry_nameless))%L1_CACHE_BYTES)
 	                                                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 3 warnings, 3 checks, 50 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
