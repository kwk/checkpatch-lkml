WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
# mount / -o remount,fcache_dev=8/6,fcache_prime=0o

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
# dmesg

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
# dmesg

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#196: FILE: drivers/block/Kconfig:459:
+config BLK_FCACHE
+	bool "Boot frontend cache driver"
+	help
+	This driver puts the data needed for a boot sequentially in a
+	defined place, taking all seeks out of the boot process.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#213: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: drivers/block/fcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#229: FILE: drivers/block/fcache.c:12:
+ * the fcache is located on another disk, the hit should be small. If the
+ * the fcache is located on the same disk (another partition), it runs

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#265: FILE: drivers/block/fcache.c:48:
+	spinlock_t lock;

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#388: FILE: drivers/block/fcache.c:171:
+	header->max_extents = ((fdev->cache_blocks - 1) * PAGE_SIZE) / (PAGE_SIZE - sizeof(struct fcache_extent));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#391: FILE: drivers/block/fcache.c:174:
+	header->extent_offset = 1 + (header->max_extents * sizeof(struct fcache_extent) / PAGE_SIZE);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#414: FILE: drivers/block/fcache.c:197:
+	printk("fcache: new header: first block %lu, max %lu\n", fdev->next_cache_block, fdev->max_extents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: drivers/block/fcache.c:197:
+	printk("fcache: new header: first block %lu, max %lu\n", fdev->next_cache_block, fdev->max_extents);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#476: FILE: drivers/block/fcache.c:259:
+	this_extents = nr_extents = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#506: FILE: drivers/block/fcache.c:289:
+	printk("fcache: wrote %d extents, holding %luKiB of data\n", nr_extents, kib);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#532: FILE: drivers/block/fcache.c:315:
+	printk("fcache: wrote header (extents=%lu,serial=%d)\n", fdev->nr_extents, fdev->serial);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#669: FILE: drivers/block/fcache.c:452:
+			fed = list_entry(fdev->list.next, struct fcache_endio_data,list);
 			                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#749: FILE: drivers/block/fcache.c:532:
+	if (start > fe->fs_sector)
[...]
+	else if (start < fe->fs_sector) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: drivers/block/fcache.c:538:
+		BUG_ON(!(bio->bi_flags & (1 << BIO_CLONED)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#756: FILE: drivers/block/fcache.c:539:
+		BUG_ON(bio_data_dir(bio) != WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: drivers/block/fcache.c:583:
+		BUG_ON(!(bio->bi_flags & (1 << BIO_CLONED)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: drivers/block/fcache.c:584:
+		BUG_ON(bio_data_dir(bio) != WRITE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#932: FILE: drivers/block/fcache.c:715:
+	if (fdev->nr_extents < fdev->max_extents) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#935: FILE: drivers/block/fcache.c:718:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#943: FILE: drivers/block/fcache.c:726:
+		printk("fcache: ran out of space\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#972: FILE: drivers/block/fcache.c:755:
+		BUG_ON(addr - start + sizeof(*fe) > PAGE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1051: FILE: drivers/block/fcache.c:834:
+		printk("fcache: bad magic %x\n", header->magic);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1055: FILE: drivers/block/fcache.c:838:
+		printk("fcache: bad version %d\n", header->version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1067: FILE: drivers/block/fcache.c:850:
+		printk("fcache: found serial %d, expected %d.\n", header->serial, serial);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1068: FILE: drivers/block/fcache.c:851:
+		printk("fcache: reprime the cache!\n");

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1077: FILE: drivers/block/fcache.c:860:
+		printk("fcache: header looks valid (extents=%ld extents, serial=%u)\n", fdev->nr_extents, fdev->serial);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1077: FILE: drivers/block/fcache.c:860:
+		printk("fcache: header looks valid (extents=%ld extents, serial=%u)\n", fdev->nr_extents, fdev->serial);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1079: FILE: drivers/block/fcache.c:862:
+		printk("fcache: loaded %d extents\n", ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1171: FILE: drivers/block/fcache.c:954:
+		sector_t end_fe, end_bi;
+		fe = extents[i];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_sector >= fdev->fs_start_sector'
#1245: FILE: drivers/block/fcache.c:1028:
+	if ((bio->bi_sector >= fdev->fs_start_sector) &&
+	    (bio->bi_sector < (fdev->fs_start_sector + fdev->fs_sectors)) &&
+	    !test_bit(0, &fdev->flags) &&
+	    !bio_flagged(bio, BIO_FCACHE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1249: FILE: drivers/block/fcache.c:1032:
+	    !bio_flagged(bio, BIO_FCACHE)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1289: FILE: drivers/block/fcache.c:1072:
+	if (ret != PAGE_SIZE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1294: FILE: drivers/block/fcache.c:1077:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1300: FILE: drivers/block/fcache.c:1083:
+	if (priming) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1303: FILE: drivers/block/fcache.c:1086:
+	} else

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1307: FILE: drivers/block/fcache.c:1090:
+		printk("fcache: %s opened successfully (%spriming)\n", bdevname(bdev, b), priming ? "" : "not ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1307: FILE: drivers/block/fcache.c:1090:
+		printk("fcache: %s opened successfully (%spriming)\n", bdevname(bdev, b), priming ? "" : "not ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1311: FILE: drivers/block/fcache.c:1094:
+	printk("fcache: failed %d\n", ret);

CHECK:SPACING: No space is necessary after a cast
#1325: FILE: drivers/block/fcache.c:1108:
+			(void) xchg(&q->make_request_fn, fdev->mfn);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1354: FILE: drivers/block/fcache.c:1137:
+	fcache_bdev = open_by_devnum(cache_dev, FMODE_READ|FMODE_WRITE);
 	                                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1357: FILE: drivers/block/fcache.c:1140:
+		printk("fcache: can't open %lx, err=%d\n", cache_dev, ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1366: FILE: drivers/block/fcache.c:1149:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1382: FILE: drivers/block/fcache.c:1165:
+	printk("fcache: reads %u, hits %u, nothing %u\n", fdev->ios, fdev->hits, fdev->nothing);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1431: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1431: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1431: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1456: FILE: fs/ext3/super.c:413:
+	printk(KERN_ERR "ext3: failed to open fcache (err=%d)\n", ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1466: FILE: fs/ext3/super.c:422:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#1485: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fcache_dev>
#1485: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fcache_prime>
#1485: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1519: FILE: fs/ext3/super.c:1061:
+			maj = simple_strtol(p, &pm, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1520: FILE: fs/ext3/super.c:1062:
+			min = simple_strtol(pm + 1, NULL, 10);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 38 warnings, 16 checks, 1446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
