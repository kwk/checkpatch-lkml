WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
>> > > I have the console on a serial port, and a terminal server. With kdb,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: include/linux/spinlock.h:48:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/linux/spinlock.h:48:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#80: FILE: include/linux/spinlock.h:50:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#82: FILE: include/linux/spinlock.h:52:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#83: FILE: include/linux/spinlock.h:53:
+	volatile unsigned int babble;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#88: FILE: include/linux/spinlock.h:58:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: include/linux/spinlock.h:58:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#90: FILE: include/linux/spinlock.h:60:
+#define spin_lock_init(x) \
+	do { \
+		(x)->magic = SPINLOCK_MAGIC; \
+		(x)->lock = 0; \
+		(x)->babble = 5; \
+		(x)->module = __FILE__; \
+		(x)->owner = NULL; \
+		(x)->oline = 0; \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#100: FILE: include/linux/spinlock.h:70:
+#define CHECK_LOCK(x) \
+	do { \
+	 	if ((x)->magic != SPINLOCK_MAGIC) { \
+			printk(KERN_ERR "%s:%d: spin_is_locked on uninitialized spinlock %p.\n", \
+					__FILE__, __LINE__, (x)); \
+		} \
+	} while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: include/linux/spinlock.h:72:
+^I ^Iif ((x)->magic != SPINLOCK_MAGIC) { \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: include/linux/spinlock.h:72:
+^I ^Iif ((x)->magic != SPINLOCK_MAGIC) { \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#103: FILE: include/linux/spinlock.h:73:
+			printk(KERN_ERR "%s:%d: spin_is_locked on uninitialized spinlock %p.\n", \

ERROR:SPACING: space required before the open parenthesis '('
#106: FILE: include/linux/spinlock.h:76:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#108: FILE: include/linux/spinlock.h:78:
+#define _raw_spin_lock(x)		\
+	do { \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __FILE__; \
+		(x)->oline = __LINE__; \
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: include/linux/spinlock.h:80:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: include/linux/spinlock.h:80:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#111: FILE: include/linux/spinlock.h:81:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#112: FILE: include/linux/spinlock.h:82:
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: include/linux/spinlock.h:83:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#123: FILE: include/linux/spinlock.h:93:
+ * FALSE. --> printk if already locked. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#124: FILE: include/linux/spinlock.h:94:
+#define spin_is_locked(x) \
+	({ \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		0; \
+	})

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#124: FILE: include/linux/spinlock.h:94:
+#define spin_is_locked(x) \

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: include/linux/spinlock.h:96:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: include/linux/spinlock.h:96:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#127: FILE: include/linux/spinlock.h:97:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#128: FILE: include/linux/spinlock.h:98:
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/linux/spinlock.h:99:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: include/linux/spinlock.h:107:
+ * TRUE. --> printk if already locked. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#138: FILE: include/linux/spinlock.h:108:
+#define _raw_spin_trylock(x) \
+	({ \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __FILE__; \
+		(x)->oline = __LINE__; \
+		1; \
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: include/linux/spinlock.h:110:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: include/linux/spinlock.h:110:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#141: FILE: include/linux/spinlock.h:111:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: include/linux/spinlock.h:112:
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#143: FILE: include/linux/spinlock.h:113:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#153: FILE: include/linux/spinlock.h:123:
+#define spin_unlock_wait(x)	\
+	do { \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, (x), \
+					(x)->owner, (x)->oline); \
+			(x)->babble--; \
+		}\
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: include/linux/spinlock.h:125:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: include/linux/spinlock.h:125:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#156: FILE: include/linux/spinlock.h:126:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: include/linux/spinlock.h:127:
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: include/linux/spinlock.h:128:
+					__FILE__,__LINE__, (x)->module, (x), \
 					        ^

ERROR:SPACING: space required after that close brace '}'
#161: FILE: include/linux/spinlock.h:131:
+		}\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#164: FILE: include/linux/spinlock.h:134:
+#define _raw_spin_unlock(x) \
+	do { \
+	 	CHECK_LOCK(x); \
+		if (!(x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \
+					__FILE__,__LINE__, (x)->module, (x));\
+			(x)->babble--; \
+		} \
+		(x)->lock = 0; \
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: include/linux/spinlock.h:136:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: include/linux/spinlock.h:136:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#167: FILE: include/linux/spinlock.h:137:
+		if (!(x)->lock&&(x)->babble) { \
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#168: FILE: include/linux/spinlock.h:138:
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: include/linux/spinlock.h:139:
+					__FILE__,__LINE__, (x)->module, (x));\
 					        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: include/linux/spinlock.h:170:
+  typedef struct { } rwlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#200: FILE: include/linux/spinlock.h:170:
+  typedef struct { } rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#201: FILE: include/linux/spinlock.h:171:
+  #define RW_LOCK_UNLOCKED (rwlock_t) { }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/linux/spinlock.h:173:
+  typedef struct { int gcc_is_buggy; } rwlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#203: FILE: include/linux/spinlock.h:173:
+  typedef struct { int gcc_is_buggy; } rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#204: FILE: include/linux/spinlock.h:174:
+  #define RW_LOCK_UNLOCKED (rwlock_t) { 0 }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400111.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 24 warnings, 7 checks, 148 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400111.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
