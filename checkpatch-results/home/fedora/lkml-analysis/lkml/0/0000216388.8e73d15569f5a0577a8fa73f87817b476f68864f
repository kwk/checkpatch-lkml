WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> attached patch should speed up page rellocation at time of resume. Please test.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: arch/i386/power/swsusp.S:61:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: kernel/power/pbe.h:1:
+static int mod_progress = 1;

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#104: FILE: kernel/power/pbe.h:3:
+static void inline mod_printk_progress(int i)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#106: FILE: kernel/power/pbe.h:5:
+	if (mod_progress == 0) mod_progress = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#107: FILE: kernel/power/pbe.h:6:
+	if (!(i%100))
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#108: FILE: kernel/power/pbe.h:7:
+		printk( "\b\b\b\b%3d%%", i / mod_progress );

ERROR:SPACING: space prohibited after that open parenthesis '('
#108: FILE: kernel/power/pbe.h:7:
+		printk( "\b\b\b\b%3d%%", i / mod_progress );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#108: FILE: kernel/power/pbe.h:7:
+		printk( "\b\b\b\b%3d%%", i / mod_progress );

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#111: FILE: kernel/power/pbe.h:10:
+#define ONE_PAGE_PBE_NUM   (PAGE_SIZE/sizeof(struct pbe))
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#112: FILE: kernel/power/pbe.h:11:
+#define PBE_IS_PAGE_END(x) \
+	( PAGE_SIZE - sizeof(struct pbe) == ((x) - ((~(PAGE_SIZE - 1)) & (x))) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#113: FILE: kernel/power/pbe.h:12:
+	( PAGE_SIZE - sizeof(struct pbe) == ((x) - ((~(PAGE_SIZE - 1)) & (x))) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#113: FILE: kernel/power/pbe.h:12:
+	( PAGE_SIZE - sizeof(struct pbe) == ((x) - ((~(PAGE_SIZE - 1)) & (x))) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#115: FILE: kernel/power/pbe.h:14:
+#define pgdir_for_each(pos, n, head) \
+	for(pos = head, n = pos ? (suspend_pagedir_t*)pos->dummy.val : NULL; \
+			pos != NULL; \
+			pos = n, n = pos ? (suspend_pagedir_t *)pos->dummy.val : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#115: FILE: kernel/power/pbe.h:14:
+#define pgdir_for_each(pos, n, head) \
+	for(pos = head, n = pos ? (suspend_pagedir_t*)pos->dummy.val : NULL; \
+			pos != NULL; \
+			pos = n, n = pos ? (suspend_pagedir_t *)pos->dummy.val : NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#116: FILE: kernel/power/pbe.h:15:
+	for(pos = head, n = pos ? (suspend_pagedir_t*)pos->dummy.val : NULL; \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: kernel/power/pbe.h:15:
+	for(pos = head, n = pos ? (suspend_pagedir_t*)pos->dummy.val : NULL; \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#117: FILE: kernel/power/pbe.h:16:
+			pos != NULL; \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#120: FILE: kernel/power/pbe.h:19:
+#define pbe_for_each(pos, n, index, max, head) \
+	for(pos = head, index = 0,\
+			n = pos ? (struct pbe *)pos->dummy.val : NULL; \
+		(pos != NULL) && (index < max); \
+		pos = (PBE_IS_PAGE_END((unsigned long)pos)) ? n : \
+			((struct pbe *)((unsigned long)pos + sizeof(struct pbe))), \
+			index ++, \
+			n = pos ? (struct pbe*)pos->dummy.val : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#120: FILE: kernel/power/pbe.h:19:
+#define pbe_for_each(pos, n, index, max, head) \
+	for(pos = head, index = 0,\
+			n = pos ? (struct pbe *)pos->dummy.val : NULL; \
+		(pos != NULL) && (index < max); \
+		pos = (PBE_IS_PAGE_END((unsigned long)pos)) ? n : \
+			((struct pbe *)((unsigned long)pos + sizeof(struct pbe))), \
+			index ++, \
+			n = pos ? (struct pbe*)pos->dummy.val : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#120: FILE: kernel/power/pbe.h:19:
+#define pbe_for_each(pos, n, index, max, head) \
+	for(pos = head, index = 0,\
+			n = pos ? (struct pbe *)pos->dummy.val : NULL; \
+		(pos != NULL) && (index < max); \
+		pos = (PBE_IS_PAGE_END((unsigned long)pos)) ? n : \
+			((struct pbe *)((unsigned long)pos + sizeof(struct pbe))), \
+			index ++, \
+			n = pos ? (struct pbe*)pos->dummy.val : NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'max' may be better as '(max)' to avoid precedence issues
#120: FILE: kernel/power/pbe.h:19:
+#define pbe_for_each(pos, n, index, max, head) \
+	for(pos = head, index = 0,\
+			n = pos ? (struct pbe *)pos->dummy.val : NULL; \
+		(pos != NULL) && (index < max); \
+		pos = (PBE_IS_PAGE_END((unsigned long)pos)) ? n : \
+			((struct pbe *)((unsigned long)pos + sizeof(struct pbe))), \
+			index ++, \
+			n = pos ? (struct pbe*)pos->dummy.val : NULL)

ERROR:SPACING: space required before the open parenthesis '('
#121: FILE: kernel/power/pbe.h:20:
+	for(pos = head, index = 0,\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#123: FILE: kernel/power/pbe.h:22:
+		(pos != NULL) && (index < max); \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#127: FILE: kernel/power/pbe.h:26:
+			n = pos ? (struct pbe*)pos->dummy.val : NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: kernel/power/pbe.h:33:
+^Ipr_debug("find_pbe_by_index: %p, 0x%03x", pgdir, index); $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_pbe_by_index', this function's name, in a string
#134: FILE: kernel/power/pbe.h:33:
+	pr_debug("find_pbe_by_index: %p, 0x%03x", pgdir, index); 

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: kernel/power/pbe.h:36:
+^I^I^Ipbe = (struct pbe *)((unsigned long)pbe + $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: kernel/power/pbe.h:39:
+			pr_debug(" %p, o{%p} c{%p}\n",
+					pbe, (void*)pbe->orig_address, (void*)pbe->address);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#140: FILE: kernel/power/pbe.h:39:
+					pbe, (void*)pbe->orig_address, (void*)pbe->address);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#140: FILE: kernel/power/pbe.h:39:
+					pbe, (void*)pbe->orig_address, (void*)pbe->address);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#143: FILE: kernel/power/pbe.h:42:
+		p ++;
 		  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: kernel/power/pbe.h:50:
+^Ipgdir_for_each(cur, next, head) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: kernel/power/pbe.h:50:
+	suspend_pagedir_t *next, *cur;
+	pgdir_for_each(cur, next, head) 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#162: FILE: kernel/power/pbe.h:61:
+static int inline write_one_pbe(struct pbe *p, void *data, int cur)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_one_pbe', this function's name, in a string
#168: FILE: kernel/power/pbe.h:67:
+	pr_debug("write_one_pbe: %p, o{%p} c{%p} %d ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: kernel/power/pbe.h:68:
+	pr_debug("write_one_pbe: %p, o{%p} c{%p} %d ",
+			p, (void *)p->orig_address, (void *)p->address, cur);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#171: FILE: kernel/power/pbe.h:70:
+	if (error) return error;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: kernel/power/pbe.h:76:
+static int bio_read_page(pgoff_t page_off, void * page);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#186: FILE: kernel/power/pbe.h:85:
+static int inline read_one_pbe(struct pbe *p, void *data, int cur)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_one_pbe', this function's name, in a string
#192: FILE: kernel/power/pbe.h:91:
+	pr_debug("read_one_pbe: %p, o{%p} c{%p} %lu\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: kernel/power/pbe.h:92:
+^I^I^Ip, (void *)p->orig_address, data, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: kernel/power/pbe.h:92:
+	pr_debug("read_one_pbe: %p, o{%p} c{%p} %lu\n",
+			p, (void *)p->orig_address, data, 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#197: FILE: kernel/power/pbe.h:96:
+	if (error) return error;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: kernel/power/pbe.h:102:
+ * Returns true if given address/order collides with any orig_address $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: kernel/power/pbe.h:104:
+static int does_collide_order(unsigned long addr, int order) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#209: FILE: kernel/power/pbe.h:108:
+	for (i=0; i < (1<<order); i++)
 	      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: kernel/power/pbe.h:108:
+	for (i=0; i < (1<<order); i++)
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#210: FILE: kernel/power/pbe.h:109:
+		if(!PageNosaveFree(virt_to_page(addr + i * PAGE_SIZE)))

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#215: FILE: kernel/power/pbe.h:114:
+static void **eaten_memory = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#224: FILE: kernel/power/pbe.h:123:
+			eaten_memory = (void**)addr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: kernel/power/pbe.h:127:
+		addr = (void*)__get_free_pages(GFP_ATOMIC | __GFP_COLD, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: kernel/power/pbe.h:128:
+^I^Iif (!addr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: kernel/power/pbe.h:133:
+^I^IClearPageNosaveFree(virt_to_page(addr)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: kernel/power/pbe.h:139:
+ * alloc_one_pagedir - $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: kernel/power/pbe.h:142:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: kernel/power/pbe.h:144:
+static suspend_pagedir_t * alloc_one_pagedir(suspend_pagedir_t *prev, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: kernel/power/pbe.h:144:
+static suspend_pagedir_t * alloc_one_pagedir(suspend_pagedir_t *prev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: kernel/power/pbe.h:145:
+static suspend_pagedir_t * alloc_one_pagedir(suspend_pagedir_t *prev, 
+		int collide)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: kernel/power/pbe.h:152:
+^I/*pr_debug("pgdir: %p, %p, %d\n", $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#254: FILE: kernel/power/pbe.h:153:
+	/*pr_debug("pgdir: %p, %p, %d\n", 
+	  pgdir, prev, sizeof(suspend_pagedir_t)); */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: kernel/power/pbe.h:153:
+	  pgdir, prev, sizeof(suspend_pagedir_t)); */

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#260: FILE: kernel/power/pbe.h:159:
+			prev[i].dummy.val= (unsigned long)pgdir;
 			                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: kernel/power/pbe.h:169:
+	int diff = 0, ret = 0;
+	do {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: kernel/power/pbe.h:186:
+static int alloc_pagedir(struct pbe **pbe, int pbe_nums, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: kernel/power/pbe.h:187:
+static int alloc_pagedir(struct pbe **pbe, int pbe_nums, 
+		int collide, int page_nums)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_pagedir', this function's name, in a string
#298: FILE: kernel/power/pbe.h:197:
+	pr_debug("alloc_pagedir: %d, %d\n", pbe_nums, after_alloc);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#322: FILE: kernel/power/pbe.h:221:
+	static int eaten_i = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: kernel/power/pbe.h:223:
+	printk("\b%c", eaten_progess[eaten_i]);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#325: FILE: kernel/power/pbe.h:224:
+	eaten_i ++;
 	        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#326: FILE: kernel/power/pbe.h:225:
+	if (eaten_i > 3) eaten_i = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: kernel/power/pbe.h:232:
+^Ipr_debug("check_one_pbe: %p %lu o{%p} ", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_one_pbe', this function's name, in a string
#333: FILE: kernel/power/pbe.h:232:
+	pr_debug("check_one_pbe: %p %lu o{%p} ", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/power/pbe.h:233:
+	pr_debug("check_one_pbe: %p %lu o{%p} ", 
+			p, p->swap_address.val, (void*)p->orig_address);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#334: FILE: kernel/power/pbe.h:233:
+			p, p->swap_address.val, (void*)p->orig_address);

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: kernel/power/pbe.h:235:
+	if(!addr)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#338: FILE: kernel/power/pbe.h:237:
+	pr_debug("c{%p} done\n", (void*)addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: kernel/power/pbe.h:243:
+static void __init swsusp_copy_pagedir(suspend_pagedir_t *d_pgdir, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: kernel/power/pbe.h:244:
+static void __init swsusp_copy_pagedir(suspend_pagedir_t *d_pgdir, 
+		suspend_pagedir_t *s_pgdir)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_pgdir"
#349: FILE: kernel/power/pbe.h:248:
+	while (s_pgdir != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: kernel/power/pbe.h:251:
+		suspend_pagedir_t *d_next = (suspend_pagedir_t *)d_pgdir->dummy.val;
+		for (i = 0; i < ONE_PAGE_PBE_NUM; i++) {

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#356: FILE: kernel/power/pbe.h:255:
+			s_pgdir ++; d_pgdir ++;
 			        ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#356: FILE: kernel/power/pbe.h:255:
+			s_pgdir ++; d_pgdir ++;
 			                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#376: FILE: kernel/power/pbe.h:275:
+	printk("Relocating pagedir ... ");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#385: FILE: kernel/power/pbe.h:284:
+		pr_debug("clear <%p>\n", (void*)pos->orig_address);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: kernel/power/pbe.h:287:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#390: FILE: kernel/power/pbe.h:289:
+	if (error < 0) {
+		return error;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: kernel/power/pbe.h:298:
+		BUG_ON(error);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: kernel/power/pbe.h:310:
+	printk(" done\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#418: FILE: kernel/power/pbe.h:317:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: kernel/power/pbe.h:325:
+^Ipr_debug("read_one_pagedir: %p, %d, %lu, %p\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_one_pagedir', this function's name, in a string
#426: FILE: kernel/power/pbe.h:325:
+	pr_debug("read_one_pagedir: %p, %d, %lu, %p\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: kernel/power/pbe.h:326:
+	pr_debug("read_one_pagedir: %p, %d, %lu, %p\n", 
+			pgdir, i, offset, (void*)next);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#427: FILE: kernel/power/pbe.h:326:
+			pgdir, i, offset, (void*)next);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: kernel/power/pbe.h:327:
+	if ((error = bio_read_page(offset, (void *)pgdir))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#428: FILE: kernel/power/pbe.h:327:
+	if ((error = bio_read_page(offset, (void *)pgdir))) {
+		return error;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: kernel/power/pbe.h:336:
+ *  for_each_pbe_copy_back - $

WARNING:TYPO_SPELLING: 'usefuly' may be misspelled - perhaps 'usefully'?
#439: FILE: kernel/power/pbe.h:338:
+ *  That usefuly for help us writing the code in assemble code
          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#444: FILE: kernel/power/pbe.h:343:
+#if 0 /* if your copy back code is running in real mode, enable it */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: kernel/power/pbe.h:344:
+#define GET_ADDRESS(x) __pa(x) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#449: FILE: kernel/power/pbe.h:348:
+asmlinkage void for_each_pbe_copy_back(void)
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pgdir"
#454: FILE: kernel/power/pbe.h:353:
+	while (pgdir != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: kernel/power/pbe.h:355:
+		unsigned long nums, i;
+		pgdir = (struct pbe *)GET_ADDRESS(pgdir);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#457: FILE: kernel/power/pbe.h:356:
+		next = (struct pbe*)pgdir->dummy.val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: kernel/power/pbe.h:359:
+			register unsigned long *orig, *copy;
+			orig = (unsigned long *)pgdir->orig_address;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#461: FILE: kernel/power/pbe.h:360:
+			if (orig == 0) goto end;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#464: FILE: kernel/power/pbe.h:363:
+#if 0

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#467: FILE: kernel/power/pbe.h:366:
+			for (i = 0; i < PAGE_SIZE / sizeof(unsigned long); i+=4) {
 			                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: kernel/power/pbe.h:368:
+				*(orig + i+1) = *(copy + i+1);
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: kernel/power/pbe.h:368:
+				*(orig + i+1) = *(copy + i+1);
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#470: FILE: kernel/power/pbe.h:369:
+				*(orig + i+2) = *(copy + i+2);
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#470: FILE: kernel/power/pbe.h:369:
+				*(orig + i+2) = *(copy + i+2);
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#471: FILE: kernel/power/pbe.h:370:
+				*(orig + i+3) = *(copy + i+3);
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#471: FILE: kernel/power/pbe.h:370:
+				*(orig + i+3) = *(copy + i+3);
 				                          ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#474: FILE: kernel/power/pbe.h:373:
+			pgdir ++;
 			      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: kernel/power/swsusp.c:303:
+		BUG_ON(pos->orig_address == 0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#548: FILE: kernel/power/swsusp.c:304:
+		error = write_one_pbe(pos, (void*)pos->address, i);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#549: FILE: kernel/power/swsusp.c:305:
+		if (error) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#567: FILE: kernel/power/swsusp.c:381:
+		if (error) break;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#568: FILE: kernel/power/swsusp.c:382:
+		n ++;
 		  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#582: FILE: kernel/power/swsusp.c:570:
+	struct pbe * pbe = NULL;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#593: FILE: kernel/power/swsusp.c:580:
+				pbe = find_pbe_by_index(pagedir_nosave, nr_copy_pages-to_copy);
 				                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#594: FILE: kernel/power/swsusp.c:581:
+				BUG_ON(pbe == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pbe"
#594: FILE: kernel/power/swsusp.c:581:
+				BUG_ON(pbe == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#597: FILE: kernel/power/swsusp.c:584:
+				BUG_ON(pbe->orig_address == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: kernel/power/swsusp.c:585:
+				BUG_ON(pbe->address == 0);

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#603: FILE: kernel/power/swsusp.c:588:
+				to_copy --;
 				        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: kernel/power/swsusp.c:601:
+	struct pbe * p, * n;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#680: FILE: kernel/power/swsusp.c:601:
+	struct pbe * p, * n;
 	                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#694: FILE: kernel/power/swsusp.c:620:
+	struct pbe * p, * n;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#694: FILE: kernel/power/swsusp.c:620:
+	struct pbe * p, * n;
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#716: FILE: kernel/power/swsusp.c:695:
+	if ((error = alloc_pagedir(&pagedir_save, nr_copy_pages, 0, 0)) < 0) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#866: FILE: kernel/power/swsusp.c:973:
+	struct pbe * p, * n;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#866: FILE: kernel/power/swsusp.c:973:
+	struct pbe * p, * n;
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#873: FILE: kernel/power/swsusp.c:977:
+	if ((error = check_pagedir())) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#873: FILE: kernel/power/swsusp.c:977:
+	if ((error = check_pagedir())) {
+		return -ENOMEM;
+	}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#888: FILE: kernel/power/swsusp.c:985:
+		error = read_one_pbe(p, (void*)p->address, i);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#889: FILE: kernel/power/swsusp.c:986:
+		if (error) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#920: FILE: kernel/power/swsusp.c:1008:
+		if (error) break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#923: FILE: kernel/power/swsusp.c:1011:
+	BUG_ON(i != n);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 78 errors, 31 warnings, 31 checks, 869 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
