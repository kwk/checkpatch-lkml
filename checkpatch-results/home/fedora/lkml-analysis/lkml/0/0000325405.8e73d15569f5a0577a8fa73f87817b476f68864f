WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/block/Kconfig.iosched:30:
+config IOSCHED_CFQ
+	bool "CFQ I/O scheduler" if EMBEDDED
+	default y
+	---help---
+	  The CFQ I/O scheduler tries to distribute bandwidth equally
+	  among all processes in the system, with the option of assigning
+	  io priorities a process or process group. It should provide a fair
+	  working environment, suitable for desktop systems.

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: drivers/block/ll_rw_blk.c:2958:
+	printk("%s: set ioprio %d\n", current->comm, ioprio);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#254: FILE: drivers/scsi/ide-scsi.c:957:
+		printk(KERN_WARNING "ide-scsi is deprecated for cd burning! Use ide-cd and give dev=/dev/hdX as device\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/elevator.h:79:
+extern void elv_set_congested(request_queue_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#330: FILE: include/linux/elevator.h:79:
+extern void elv_set_congested(request_queue_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#351: FILE: include/linux/elevator.h:125:
+#define RQ_ELV_DATA(rq)		(rq)->elevator_private

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#411: FILE: drivers/block/cfq-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#412: FILE: drivers/block/cfq-iosched.c:2:
+ *  linux/drivers/block/cfq-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#421: FILE: drivers/block/cfq-iosched.c:11:
+ *  noone else wants to use the disk. 100% is considered real-time io, and
     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Withing' may be misspelled - perhaps 'Within'?
#423: FILE: drivers/block/cfq-iosched.c:13:
+ *  io, a class may consume 100% disk bandwidth regardless. Withing a class,
                                                             ^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#463: FILE: drivers/block/cfq-iosched.c:53:
+#define CFQ_QHASH_ENTRIES	(1 << CFQ_QHASH_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#468: FILE: drivers/block/cfq-iosched.c:58:
+#define CFQ_MHASH_ENTRIES	(1 << CFQ_MHASH_SHIFT)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: drivers/block/cfq-iosched.c:59:
+#define CFQ_MHASH_FN(sec)	(hash_long(CFQ_MHASH_BLOCK((sec)),CFQ_MHASH_SHIFT))
                          	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#470: FILE: drivers/block/cfq-iosched.c:60:
+#define rq_hash_key(rq)		((rq)->sector + (rq)->nr_sectors)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'crq' - possible side-effects?
#476: FILE: drivers/block/cfq-iosched.c:66:
+#define cfq_account_io(crq)	\
+	((crq)->ioprio != IOPRIO_IDLE && (crq)->ioprio != IOPRIO_RT)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#603: FILE: drivers/block/cfq-iosched.c:193:
+	BUG_ON(!hlist_unhashed(&crq->hash));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: drivers/block/cfq-iosched.c:207:
+		BUG_ON(hlist_unhashed(&crq->hash));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#634: FILE: drivers/block/cfq-iosched.c:224:
+#define RB_EMPTY(node)		((node)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#636: FILE: drivers/block/cfq-iosched.c:226:
+#define rq_rb_key(rq)		(rq)->sector

ERROR:SPACING: space required after that ',' (ctx:VxV)
#639: FILE: drivers/block/cfq-iosched.c:229:
+cfq_del_crq_rb(struct cfq_data *cfqd, struct cfq_queue *cfqq,struct cfq_rq *crq)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#680: FILE: drivers/block/cfq-iosched.c:270:
+cfq_add_crq_rb(struct cfq_data *cfqd, struct cfq_queue *cfqq,struct cfq_rq *crq)
                                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: drivers/block/cfq-iosched.c:370:
+		BUG_ON(__rq->sector + __rq->nr_sectors != bio->bi_sector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#895: FILE: drivers/block/cfq-iosched.c:485:
+	q_rq = q_io = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#899: FILE: drivers/block/cfq-iosched.c:489:
+		BUG_ON(RB_EMPTY(&cfqq->sort_list));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1016: FILE: drivers/block/cfq-iosched.c:606:
+	if (cfq_dispatch_requests(q, IOPRIO_IDLE, cfqd->cfq_idle_quantum, cfqd->cfq_idle_quantum_io))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: drivers/block/cfq-iosched.c:627:
+		BUG_ON(list_empty(cfqd->dispatch));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1040: FILE: drivers/block/cfq-iosched.c:630:
+		BUG_ON(q->last_merge == rq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: drivers/block/cfq-iosched.c:633:
+			BUG_ON(!hlist_unhashed(&crq->hash));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1127: FILE: drivers/block/cfq-iosched.c:717:
+		printk("prio hash collision %d %d\n", prio, cfqq->ioprio);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1152: FILE: drivers/block/cfq-iosched.c:742:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1199: FILE: drivers/block/cfq-iosched.c:789:
+	switch (where) {
+		case ELEVATOR_INSERT_BACK:
[...]
+		case ELEVATOR_INSERT_FRONT:
[...]
+		case ELEVATOR_INSERT_SORT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1201: FILE: drivers/block/cfq-iosched.c:791:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1211: FILE: drivers/block/cfq-iosched.c:801:
+			BUG_ON(!blk_fs_request(rq));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1215: FILE: drivers/block/cfq-iosched.c:805:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1215: FILE: drivers/block/cfq-iosched.c:805:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);
 			                                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1215: FILE: drivers/block/cfq-iosched.c:805:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1305: FILE: drivers/block/cfq-iosched.c:895:
+		BUG_ON(q->last_merge == rq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1306: FILE: drivers/block/cfq-iosched.c:896:
+		BUG_ON(!hlist_unhashed(&crq->hash));

CHECK:SPACING: No space is necessary after a cast
#1348: FILE: drivers/block/cfq-iosched.c:938:
+	struct cfq_data *cfqd = (struct cfq_data *) data;

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: drivers/block/cfq-iosched.c:969:
+	cfqd->timer.data = (unsigned long) cfqd;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->crq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1392: FILE: drivers/block/cfq-iosched.c:982:
+	cfqd->crq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_MHASH_ENTRIES, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->cfq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1396: FILE: drivers/block/cfq-iosched.c:986:
+	cfqd->cfq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_QHASH_ENTRIES, GFP_KERNEL);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1400: FILE: drivers/block/cfq-iosched.c:990:
+	cfqd->crq_pool = mempool_create(BLKDEV_MIN_RQ, mempool_alloc_slab, mempool_free_slab, crq_pool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1435: FILE: drivers/block/cfq-iosched.c:1025:
+	crq_pool = kmem_cache_create("crq_pool", sizeof(struct cfq_rq), 0, 0,
+					NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1441: FILE: drivers/block/cfq-iosched.c:1031:
+	cfq_pool = kmem_cache_create("cfq_pool", sizeof(struct cfq_queue), 0, 0,
+					NULL, NULL);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#1461: FILE: drivers/block/cfq-iosched.c:1051:
+	ssize_t (*show)(struct cfq_data *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1461: FILE: drivers/block/cfq-iosched.c:1051:
+	ssize_t (*show)(struct cfq_data *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#1462: FILE: drivers/block/cfq-iosched.c:1052:
+	ssize_t (*store)(struct cfq_data *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1462: FILE: drivers/block/cfq-iosched.c:1052:
+	ssize_t (*store)(struct cfq_data *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1462: FILE: drivers/block/cfq-iosched.c:1052:
+	ssize_t (*store)(struct cfq_data *, const char *, size_t);

CHECK:SPACING: No space is necessary after a cast
#1474: FILE: drivers/block/cfq-iosched.c:1064:
+	char *p = (char *) page;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1476: FILE: drivers/block/cfq-iosched.c:1066:
+	*var = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1480: FILE: drivers/block/cfq-iosched.c:1070:
+#define SHOW_FUNCTION(__FUNC, __VAR)					\
+static ssize_t __FUNC(struct cfq_data *cfqd, char *page)		\
+{									\
+	return cfq_var_show(__VAR, (page));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1485: FILE: drivers/block/cfq-iosched.c:1075:
+}
+SHOW_FUNCTION(cfq_quantum_show, cfqd->cfq_quantum);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__PTR' - possible side-effects?
#1494: FILE: drivers/block/cfq-iosched.c:1084:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct cfq_data *cfqd, const char *page, size_t count)	\
+{									\
+	int ret = cfq_var_store(__PTR, (page), count);			\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#1494: FILE: drivers/block/cfq-iosched.c:1084:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct cfq_data *cfqd, const char *page, size_t count)	\
+{									\
+	int ret = cfq_var_store(__PTR, (page), count);			\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#1494: FILE: drivers/block/cfq-iosched.c:1084:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct cfq_data *cfqd, const char *page, size_t count)	\
+{									\
+	int ret = cfq_var_store(__PTR, (page), count);			\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1494: FILE: drivers/block/cfq-iosched.c:1084:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX)				\
+static ssize_t __FUNC(struct cfq_data *cfqd, const char *page, size_t count)	\
+{									\
+	int ret = cfq_var_store(__PTR, (page), count);			\
+	if (*(__PTR) < (MIN))						\
+		*(__PTR) = (MIN);					\
+	else if (*(__PTR) > (MAX))					\
+		*(__PTR) = (MAX);					\
+	return ret;							\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1504: FILE: drivers/block/cfq-iosched.c:1094:
+}
+STORE_FUNCTION(cfq_quantum_store, &cfqd->cfq_quantum, 1, INT_MAX);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1514: FILE: drivers/block/cfq-iosched.c:1104:
+	.attr = {.name = "quantum", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1518: FILE: drivers/block/cfq-iosched.c:1108:
+};
+static struct cfq_fs_entry cfq_quantum_io_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1519: FILE: drivers/block/cfq-iosched.c:1109:
+	.attr = {.name = "quantum_io", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1523: FILE: drivers/block/cfq-iosched.c:1113:
+};
+static struct cfq_fs_entry cfq_idle_quantum_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1524: FILE: drivers/block/cfq-iosched.c:1114:
+	.attr = {.name = "idle_quantum", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1528: FILE: drivers/block/cfq-iosched.c:1118:
+};
+static struct cfq_fs_entry cfq_idle_quantum_io_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1529: FILE: drivers/block/cfq-iosched.c:1119:
+	.attr = {.name = "idle_quantum_io", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1533: FILE: drivers/block/cfq-iosched.c:1123:
+};
+static struct cfq_fs_entry cfq_queued_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1534: FILE: drivers/block/cfq-iosched.c:1124:
+	.attr = {.name = "queued", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1538: FILE: drivers/block/cfq-iosched.c:1128:
+};
+static struct cfq_fs_entry cfq_grace_rt_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1539: FILE: drivers/block/cfq-iosched.c:1129:
+	.attr = {.name = "grace_rt", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1543: FILE: drivers/block/cfq-iosched.c:1133:
+};
+static struct cfq_fs_entry cfq_grace_idle_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1544: FILE: drivers/block/cfq-iosched.c:1134:
+	.attr = {.name = "grace_idle", .mode = S_IRUGO | S_IWUSR },

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1587: FILE: drivers/block/cfq-iosched.c:1177:
+static struct sysfs_ops cfq_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1600: FILE: drivers/block/cfq-iosched.c:1190:
+^I.elevator_merge_fn = ^I^Icfq_merge,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1617: FILE: drivers/block/cfq-iosched.c:1207:
+EXPORT_SYMBOL(iosched_cfq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000325405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 42 warnings, 26 checks, 1503 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000325405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
