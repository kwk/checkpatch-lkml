WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#318: FILE: fs/ncpfs/ioctl.c:23:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#329: FILE: fs/ncpfs/ioctl.c:96:
+struct compat_ncp_objectname_ioctl
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#332: FILE: fs/ncpfs/ioctl.c:99:
+	compat_caddr_t	object_name;	/* an userspace data, in most cases user name */
 	              	            	   ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#356: FILE: fs/ncpfs/ioctl.c:123:
+struct compat_ncp_privatedata_ioctl
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: fs/ncpfs/ioctl.c:136:
+ncp_get_compat_fs_info_v2(struct ncp_server * server, struct file *file,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: fs/ncpfs/ioctl.c:137:
+ncp_get_compat_fs_info_v2(struct ncp_server * server, struct file *file,
+		   struct compat_ncp_fs_info_v2 __user * arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: fs/ncpfs/ioctl.c:137:
+		   struct compat_ncp_fs_info_v2 __user * arg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#375: FILE: fs/ncpfs/ioctl.c:142:
+	if ((file_permission(file, MAY_WRITE) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#376: FILE: fs/ncpfs/ioctl.c:143:
+	if ((file_permission(file, MAY_WRITE) != 0)
+	    && (current->uid != server->m.mounted_uid)) {

CHECK:CAMELCASE: Avoid CamelCase: <volNumber>
#389: FILE: fs/ncpfs/ioctl.c:156:
+	info2.volume_number = NCP_FINFO(inode)->volNumber;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DosDirNum>
#390: FILE: fs/ncpfs/ioctl.c:157:
+	info2.directory_id  = NCP_FINFO(inode)->DosDirNum;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#391: FILE: fs/ncpfs/ioctl.c:158:
+	info2.dummy1 = info2.dummy2 = info2.dummy3 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: fs/ncpfs/ioctl.c:287:
+			struct compat_ncp_ioctl_request request32;
+			if (copy_from_user(&request32, argp, sizeof(request32)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#453: FILE: fs/ncpfs/ioctl.c:350:
+		return ncp_get_compat_fs_info_v2(server, filp, argp);
 		                                         ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: fs/ncpfs/ioctl.c:354:
+	 * any of the possible ioctls */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#461: FILE: fs/ncpfs/ioctl.c:358:
+		if ((file_permission(filp, MAY_READ) != 0)
 		                     ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != server->m.mounted_uid'
#461: FILE: fs/ncpfs/ioctl.c:358:
+		if ((file_permission(filp, MAY_READ) != 0)
+			&& (current->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#462: FILE: fs/ncpfs/ioctl.c:359:
+		if ((file_permission(filp, MAY_READ) != 0)
+			&& (current->uid != server->m.mounted_uid)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: fs/ncpfs/ioctl.c:364:
+			u16 uid;
+			SET_UID(uid, server->m.mounted_uid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: fs/ncpfs/ioctl.c:369:
+			if (put_user(server->m.mounted_uid,
+						(u32 __user *)argp))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/ncpfs/ioctl.c:373:
+			if (put_user(server->m.mounted_uid,
+						(u64 __user *)argp))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#490: FILE: fs/ncpfs/ioctl.c:588:
+		if (current->uid != server->m.mounted_uid) {
+			return -EACCES;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#505: FILE: fs/ncpfs/ioctl.c:603:
+				if (copy_to_user(compat_ptr(user.object_name),
[...]
+						 outl)) return -EFAULT;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: fs/ncpfs/ioctl.c:657:
+				struct compat_ncp_objectname_ioctl user32;
+				if (copy_from_user(&user32, argp, sizeof(user32)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: fs/ncpfs/ioctl.c:711:
+				struct compat_ncp_privatedata_ioctl user32;
+				if (copy_from_user(&user32, argp, sizeof(user32)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: fs/ncpfs/ioctl.c:731:
+				struct compat_ncp_privatedata_ioctl user32;
+				user32.len = user.len;

CHECK:SPACING: No space is necessary after a cast
#593: FILE: fs/ncpfs/ioctl.c:732:
+				user32.data = (unsigned long) user.data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: fs/ncpfs/ioctl.c:758:
+				struct compat_ncp_privatedata_ioctl user32;
+				if (copy_from_user(&user32, argp, sizeof(user32)))

CHECK:SPACING: No space is necessary after a cast
#656: FILE: fs/ncpfs/ioctl.c:832:
+	arg = (unsigned long) compat_ptr(arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#670: FILE: include/linux/ncp_fs.h:218:
+long ncp_compat_ioctl(struct file *, unsigned int, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#670: FILE: include/linux/ncp_fs.h:218:
+long ncp_compat_ioctl(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#670: FILE: include/linux/ncp_fs.h:218:
+long ncp_compat_ioctl(struct file *, unsigned int, unsigned long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054487.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 12 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054487.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
