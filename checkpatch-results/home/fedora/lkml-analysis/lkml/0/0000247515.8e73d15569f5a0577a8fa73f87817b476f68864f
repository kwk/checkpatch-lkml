WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
http://www-124.ibm.com/developerworks/opensource/linuxperf/readahead/read-ahead-design.pdf

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#114: 
2.0GHz with 1GB memory and test were on on both a dedicated 10k-rpm SCSI 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: include/linux/mm.h:730:
+unsigned long  page_cache_readahead(struct address_space *mapping, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: include/linux/mm.h:731:
+unsigned long  page_cache_readahead(struct address_space *mapping, 
 			  struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#212: FILE: include/linux/fs.h:568:
+#define RA_FLAG_MISS 0x01       /* a cache miss occured against this file */
                                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: include/linux/fs.h:568:
 };
+#define RA_FLAG_MISS 0x01       /* a cache miss occured against this file */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#232: FILE: mm/readahead.c:56:
+	ra->start=0;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#233: FILE: mm/readahead.c:57:
+	ra->flags=0;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#234: FILE: mm/readahead.c:58:
+	ra->size=-1UL;
 	        ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#234: FILE: mm/readahead.c:58:
+	ra->size=-1UL;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#235: FILE: mm/readahead.c:59:
+	ra->ahead_start=0;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#236: FILE: mm/readahead.c:60:
+	ra->ahead_size=0;
 	              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: mm/readahead.c:61:
+    return;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: mm/readahead.c:71:
+unsigned long get_init_ra_size(unsigned long size, unsigned long max,
+							   unsigned long min)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#249: FILE: mm/readahead.c:73:
+	unsigned long s_size=1, newsize;
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: mm/readahead.c:74:
+^Ido { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: mm/readahead.c:74:
+	unsigned long s_size=1, newsize;
+	do { 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: mm/readahead.c:77:
+    if (s_size <= max / 64) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#253: FILE: mm/readahead.c:77:
+    if (s_size <= max / 64) {
[...]
+    } else if (s_size <= max/4) {
[...]
+    } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: mm/readahead.c:78:
+        newsize = s_size * s_size;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: mm/readahead.c:78:
+        newsize = s_size * s_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: mm/readahead.c:79:
+    } else if (s_size <= max/4) {$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#255: FILE: mm/readahead.c:79:
+    } else if (s_size <= max/4) {
                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: mm/readahead.c:80:
+        newsize = max / 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: mm/readahead.c:80:
+        newsize = max / 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: mm/readahead.c:81:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: mm/readahead.c:82:
+        newsize = max;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: mm/readahead.c:82:
+        newsize = max;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mm/readahead.c:83:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: mm/readahead.c:88:
+ * Set the new window size, this is called only when $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: mm/readahead.c:93:
+unsigned long get_next_ra_size(unsigned long cur, unsigned long max, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: mm/readahead.c:94:
+unsigned long get_next_ra_size(unsigned long cur, unsigned long max, 
+							   unsigned long min, unsigned long * flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: mm/readahead.c:94:
+							   unsigned long min, unsigned long * flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: mm/readahead.c:97:
+	unsigned long newsize;
+	if (*flags & RA_FLAG_MISS) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: mm/readahead.c:98:
+		newsize = max((cur - 2),min);
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#276: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {
 	                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#276: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#276: FILE: mm/readahead.c:100:
+	} else if ( cur < max/16 ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: mm/readahead.c:104:
+^I}            $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: mm/readahead.c:109:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: mm/readahead.c:212:
+ * to detect the resumption of sequential I/O.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: mm/readahead.c:219:
+ * new current window's pages are probably still locked.  So $

WARNING:TYPO_SPELLING: 'agressively' may be misspelled - perhaps 'aggressively'?
#332: FILE: mm/readahead.c:233:
+ * is time to submit a new IO.  The code ramps up the size agressively at first,
                                                            ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: mm/readahead.c:249:
+ * regardless of size unless readahead is unable to start enough I/O to satisfy $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#377: FILE: mm/readahead.c:357:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read);
 	                                          ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#403: FILE: mm/readahead.c:360:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: mm/readahead.c:367:
+unsigned long $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#414: FILE: mm/readahead.c:369:
+	struct file *filp, unsigned long offset, unsigned long req_size)
 	             ^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#422: FILE: mm/readahead.c:371:
+	unsigned long max, min, maxsane, newsize=req_size;
 	                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: mm/readahead.c:372:
+	unsigned long actual=0;
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: mm/readahead.c:373:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#436: FILE: mm/readahead.c:380:
+	if (offset == ra->prev_page && req_size == 1 && ra->size != 0) {
+		goto out;
 	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: mm/readahead.c:383:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: mm/readahead.c:386:
+^Imaxsane = max_sane_readahead(max); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: mm/readahead.c:388:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: mm/readahead.c:392:
+   ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: mm/readahead.c:392:
+   ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: mm/readahead.c:392:
+   ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: mm/readahead.c:393:
+   ^I * Special case - first read.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: mm/readahead.c:393:
+   ^I * Special case - first read.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: mm/readahead.c:394:
+   ^I * We'll assume it's a whole-file read if at start of file, and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: mm/readahead.c:394:
+   ^I * We'll assume it's a whole-file read if at start of file, and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: mm/readahead.c:395:
+   ^I * grow the window fast.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: mm/readahead.c:395:
+   ^I * grow the window fast.$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#478: FILE: mm/readahead.c:396:
+   	 * grow the window fast.
+     * or detect first sequential access

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: mm/readahead.c:397:
+   ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: mm/readahead.c:397:
+   ^I */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#479: FILE: mm/readahead.c:397:
+     * or detect first sequential access
+   	 */

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: mm/readahead.c:399:
+        || (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq access$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#481: FILE: mm/readahead.c:399:
+	if ((ra->size == 0 && offset == 0)   // first io	and start of file
+        || (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq access

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: mm/readahead.c:399:
+        || (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq access$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#481: FILE: mm/readahead.c:399:
+        || (ra->size == -1UL && ra->prev_page == offset-1)) { //1st seq access
                                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#482: FILE: mm/readahead.c:400:
+		ra->prev_page  = offset + newsize-1;
 		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: mm/readahead.c:401:
+        ra->size = get_init_ra_size(newsize, max, min);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: mm/readahead.c:401:
+        ra->size = get_init_ra_size(newsize, max, min);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: mm/readahead.c:402:
+        ra->start = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: mm/readahead.c:402:
+        ra->start = offset;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#485: FILE: mm/readahead.c:403:
+        actual = do_page_cache_readahead(mapping, filp, offset, ra->size);
                                                   ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: mm/readahead.c:403:
+        actual = do_page_cache_readahead(mapping, filp, offset, ra->size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: mm/readahead.c:403:
+        actual = do_page_cache_readahead(mapping, filp, offset, ra->size);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: mm/readahead.c:404:
+^I^I/* if the request size is larger than our max readahead, we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: mm/readahead.c:405:
+^I^I * at least want to be sure that we get 2 IOs if flight and $

WARNING:TYPO_SPELLING: 'definitly' may be misspelled - perhaps 'definitely'?
#488: FILE: mm/readahead.c:406:
+		 * we know that we will definitly need the new I/O.
 		                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#509: FILE: mm/readahead.c:413:
+			actual = do_page_cache_readahead(mapping, filp,
 			                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: mm/readahead.c:414:
+			actual = do_page_cache_readahead(mapping, filp,
+					ra->ahead_start, ra->ahead_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: mm/readahead.c:420:
+     * partial page reads and first access were handled above, $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#526: FILE: mm/readahead.c:421:
+     * partial page reads and first access were handled above, 
+	 * so this must be the next page otherwise it is random

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#527: FILE: mm/readahead.c:422:
+	 * so this must be the next page otherwise it is random
+     */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: mm/readahead.c:423:
+      if ((offset != (ra->prev_page+1) || (ra->size == 0))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 16)
#528: FILE: mm/readahead.c:423:
+      if ((offset != (ra->prev_page+1) || (ra->size == 0))) {
+		ra_off(ra);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: mm/readahead.c:423:
+      if ((offset != (ra->prev_page+1) || (ra->size == 0))) {
                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra->size == 0'
#528: FILE: mm/readahead.c:423:
+      if ((offset != (ra->prev_page+1) || (ra->size == 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#530: FILE: mm/readahead.c:425:
+		ra->prev_page  = offset + newsize-1;
 		                                 ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#531: FILE: mm/readahead.c:426:
+        actual = do_page_cache_readahead(mapping, filp, offset, newsize);
                                                   ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: mm/readahead.c:426:
+        actual = do_page_cache_readahead(mapping, filp, offset, newsize);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: mm/readahead.c:426:
+        actual = do_page_cache_readahead(mapping, filp, offset, newsize);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: mm/readahead.c:427:
+        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: mm/readahead.c:427:
+        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: mm/readahead.c:428:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: mm/readahead.c:430:
+^I/* If we get here we are doing sequential IO and this was $

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#538: FILE: mm/readahead.c:431:
+	 * not the first occurence (ie we have an existing window)
 	                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#555: FILE: mm/readahead.c:438:
+        actual = do_page_cache_readahead(mapping, filp,
                                                   ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: mm/readahead.c:438:
+        actual = do_page_cache_readahead(mapping, filp,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: mm/readahead.c:438:
+        actual = do_page_cache_readahead(mapping, filp,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: mm/readahead.c:439:
+        actual = do_page_cache_readahead(mapping, filp,
+				ra->ahead_start, ra->ahead_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: mm/readahead.c:440:
+^I}else { $

ERROR:SPACING: space required after that close brace '}'
#557: FILE: mm/readahead.c:440:
+	}else { 

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#559: FILE: mm/readahead.c:442:
+		if ((offset + newsize -1) >= ra->ahead_start) {
 		                      ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#635: FILE: mm/readahead.c:448:
+			actual = do_page_cache_readahead(mapping, filp,
 			                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mm/readahead.c:449:
+			actual = do_page_cache_readahead(mapping, filp,
 					ra->ahead_start, ra->ahead_size);

ERROR:SPACING: space required after that close brace '}'
#640: FILE: mm/readahead.c:450:
+		}else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: mm/readahead.c:451:
+^I^I^I/* do nothing, read contained in current window and ahead $

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#644: FILE: mm/readahead.c:454:
+			ra->prev_page = offset + newsize -1;
 			                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: mm/readahead.c:458:
+    return (newsize);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: mm/readahead.c:465:
+ * thrashing) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: mm/readahead.c:473:
+^Ira->flags |= RA_FLAG_MISS;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#718: FILE: mm/filemap.c:727:
+	next_index = index = *ppos >> PAGE_CACHE_SHIFT;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#737: FILE: mm/filemap.c:753:
+		if(index == next_index && req_size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: mm/filemap.c:754:
+^I^I^Iret_size = page_cache_readahead(mapping, &ra, $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#739: FILE: mm/filemap.c:755:
+					filp, index, req_size);
 					^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: mm/filemap.c:755:
+			ret_size = page_cache_readahead(mapping, &ra, 
+					filp, index, req_size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247515.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 47 warnings, 21 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247515.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
