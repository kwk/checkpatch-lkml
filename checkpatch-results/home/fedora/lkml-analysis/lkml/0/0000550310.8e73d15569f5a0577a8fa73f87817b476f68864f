WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
> Ok I didnt realise the firmware thing was tcp checksum paths only. Thats fine

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#23: 
> Ok I didnt realise the firmware thing was tcp checksum paths only. Thats fine
       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#23: 
> Ok I didnt realise the firmware thing was tcp checksum paths only. Thats fine
                                                                     ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: drivers/net/starfire.c:97:
+   The Starfire has a 512 element hash table based on the Ethernet CRC. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#124: FILE: drivers/net/starfire.c:102:
+/*
+ * Set the copy breakpoint for the copy-only-tiny-frames scheme.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#164: FILE: drivers/net/starfire.c:141:
+#define TX_TIMEOUT	(2*HZ)
                   	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#207: FILE: drivers/net/starfire.c:185:
+/*
+				Theory of Operation

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#287: FILE: drivers/net/starfire.c:265:
+
 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: drivers/net/starfire.c:265:
+^L$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: drivers/net/starfire.c:265:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#328: FILE: drivers/net/starfire.c:291:
+	int (*probe)(struct pci_dev *dev, const struct pci_device_id *id);		/* New device inserted */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#329: FILE: drivers/net/starfire.c:292:
+	void (*remove)(struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#339: FILE: drivers/net/starfire.c:300:
+#define __devinit			__init

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#340: FILE: drivers/net/starfire.c:301:
+#define __devinitdata			__initdata

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#341: FILE: drivers/net/starfire.c:302:
 #define __devexit

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#511: FILE: drivers/net/starfire.c:469:
+	static int __initdata probed = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MISPLACED_INIT: __initdata should be placed after probed
#511: FILE: drivers/net/starfire.c:469:
+	static int __initdata probed = 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#533: FILE: drivers/net/starfire.c:479:
+#define kick_tx_timer(dev, func, timeout) \
+	if (netif_queue_stopped(dev)) { \
+		/* If this happens network layer tells us we're broken. */ \
+		if (jiffies - dev->trans_start > timeout) \
+			func(dev); \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#533: FILE: drivers/net/starfire.c:479:
+#define kick_tx_timer(dev, func, timeout) \
+	if (netif_queue_stopped(dev)) { \
+		/* If this happens network layer tells us we're broken. */ \
+		if (jiffies - dev->trans_start > timeout) \
+			func(dev); \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'timeout' may be better as '(timeout)' to avoid precedence issues
#533: FILE: drivers/net/starfire.c:479:
+#define kick_tx_timer(dev, func, timeout) \
+	if (netif_queue_stopped(dev)) { \
+		/* If this happens network layer tells us we're broken. */ \
+		if (jiffies - dev->trans_start > timeout) \
+			func(dev); \
+	}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#550: FILE: drivers/net/starfire.c:491:
+#define init_tx_timer(dev, func, timeout) \
+	dev->tx_timeout = func; \
+	dev->watchdog_timeo = timeout;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#550: FILE: drivers/net/starfire.c:491:
+#define init_tx_timer(dev, func, timeout) \
+	dev->tx_timeout = func; \
+	dev->watchdog_timeo = timeout;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#550: FILE: drivers/net/starfire.c:491:
+#define init_tx_timer(dev, func, timeout) \
+	dev->tx_timeout = func; \
+	dev->watchdog_timeo = timeout;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#550: FILE: drivers/net/starfire.c:491:
+#define init_tx_timer(dev, func, timeout) \
+	dev->tx_timeout = func; \
+	dev->watchdog_timeo = timeout;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#718: FILE: drivers/net/starfire.c:729:
+static int __devinit starfire_init_one(struct pci_dev *pdev,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#788: FILE: drivers/net/starfire.c:789:
+		printk("%2.2x:", dev->dev_addr[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#796: FILE: drivers/net/starfire.c:795:
+			printk("%2.2x%s",

CHECK:CAMELCASE: Avoid CamelCase: <EEPROMCtrl>
#797: FILE: drivers/net/starfire.c:796:
+			       (unsigned int)readb(ioaddr + EEPROMCtrl + i),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <TxMode>
#802: FILE: drivers/net/starfire.c:801:
+	writel(0x8000, ioaddr + TxMode);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#803: FILE: drivers/net/starfire.c:802:
+	udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#810: FILE: drivers/net/starfire.c:809:
+		udelay(10);

CHECK:CAMELCASE: Avoid CamelCase: <PCIDeviceConfig>
#811: FILE: drivers/net/starfire.c:810:
+		if ((readl(ioaddr + PCIDeviceConfig) & 1) == 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#815: FILE: drivers/net/starfire.c:814:
+		printk("%s: chipset reset never completed!\n", dev->name);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#817: FILE: drivers/net/starfire.c:816:
+	udelay(1000);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#847: FILE: drivers/net/starfire.c:861:
+			udelay(500);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#853: FILE: drivers/net/starfire.c:867:
+				printk("%s: PHY reset never completed!\n", dev->name);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#873: FILE: drivers/net/starfire.c:904:
+	while ((result & 0xC0000000) != 0x80000000 && --boguscnt > 0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#911: FILE: drivers/net/starfire.c:953:
+	if (np->tx_done_q == 0 || np->rx_done_q == 0
+		|| np->rx_ring == 0 || np->tx_ring == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <RxMinDescrThreshShift>
#940: FILE: drivers/net/starfire.c:973:
+	       (0 << RxMinDescrThreshShift) |

CHECK:CAMELCASE: Avoid CamelCase: <RxPrefetchMode>
#941: FILE: drivers/net/starfire.c:974:
+	       RxPrefetchMode | RxVariableQ |

CHECK:CAMELCASE: Avoid CamelCase: <RxVariableQ>
#941: FILE: drivers/net/starfire.c:974:
+	       RxPrefetchMode | RxVariableQ |

CHECK:CAMELCASE: Avoid CamelCase: <RxDescSpace4>
#942: FILE: drivers/net/starfire.c:975:
+	       RxDescSpace4,

CHECK:CAMELCASE: Avoid CamelCase: <RxDescQCtrl>
#943: FILE: drivers/net/starfire.c:976:
+	       ioaddr + RxDescQCtrl);

CHECK:CAMELCASE: Avoid CamelCase: <RxComplType3>
#970: FILE: drivers/net/starfire.c:1000:
+	       RxComplType3 |

CHECK:CAMELCASE: Avoid CamelCase: <RxComplThreshShift>
#971: FILE: drivers/net/starfire.c:1001:
+	       (0 << RxComplThreshShift),

CHECK:CAMELCASE: Avoid CamelCase: <RxCompletionAddr>
#972: FILE: drivers/net/starfire.c:1002:
+	       ioaddr + RxCompletionAddr);

CHECK:CAMELCASE: Avoid CamelCase: <RxComplType2>
#979: FILE: drivers/net/starfire.c:1006:
+	       RxComplType2 |

CHECK:CAMELCASE: Avoid CamelCase: <RxComplType0>
#987: FILE: drivers/net/starfire.c:1011:
+	       RxComplType0 |

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#995: FILE: drivers/net/starfire.c:1018:
+		printk(KERN_DEBUG "%s: Filling in the station address.\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1004: FILE: drivers/net/starfire.c:1044:
+		printk(KERN_DEBUG "%s: Setting the Rx and Tx modes.\n", dev->name);

WARNING:SPLIT_STRING: quoted string split across lines
#1032: FILE: drivers/net/starfire.c:1107:
 				printk(KERN_INFO "%s: Setting %s-duplex based on MII #%d"
+				       " negotiated capability %4.4x.\n", dev->name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <IntrStatus>
#1042: FILE: drivers/net/starfire.c:1127:
+		       dev->name, (int)readl(ioaddr + IntrStatus));

WARNING:SPLIT_STRING: quoted string split across lines
#1060: FILE: drivers/net/starfire.c:1153:
 	printk(KERN_WARNING "%s: Transmit timed out, status %8.8x,"
+	       " resetting...\n", dev->name, (int)readl(ioaddr + IntrStatus));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1190: FILE: drivers/net/starfire.c:1296:
+		printk (KERN_ERR "Netdev interrupt handler(): IRQ %d for unknown device.\n", irq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1190: FILE: drivers/net/starfire.c:1296:
+		printk (KERN_ERR "Netdev interrupt handler(): IRQ %d for unknown device.\n", irq);

CHECK:CAMELCASE: Avoid CamelCase: <TxConsumerIdx>
#1213: FILE: drivers/net/starfire.c:1320:
+		consumer = readl(ioaddr + TxConsumerIdx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1215: FILE: drivers/net/starfire.c:1322:
+			printk(KERN_DEBUG "%s: Tx Consumer index is %d.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1225: FILE: drivers/net/starfire.c:1326:
+			printk(KERN_DEBUG "%s: Tx completion entry %d is %8.8x, %d is %8.8x.\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1228: FILE: drivers/net/starfire.c:1329:
+			       (np->tx_done+1) & (DONE_Q_SIZE-1),
 			                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1228: FILE: drivers/net/starfire.c:1329:
+			       (np->tx_done+1) & (DONE_Q_SIZE-1),
 			                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1229: FILE: drivers/net/starfire.c:1330:
+			       le32_to_cpu(np->tx_done_q[(np->tx_done+1)&(DONE_Q_SIZE-1)].status));
 			                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1229: FILE: drivers/net/starfire.c:1330:
+			       le32_to_cpu(np->tx_done_q[(np->tx_done+1)&(DONE_Q_SIZE-1)].status));
 			                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1229: FILE: drivers/net/starfire.c:1330:
+			       le32_to_cpu(np->tx_done_q[(np->tx_done+1)&(DONE_Q_SIZE-1)].status));
 			                                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1268: FILE: drivers/net/starfire.c:1335:
+				printk(KERN_DEBUG "%s: Tx completion entry %d is %8.8x.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1275: FILE: drivers/net/starfire.c:1342:
+				u16 entry = tx_status;		/* Implicit truncate */
+				entry /= sizeof(struct starfire_tx_desc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1296: FILE: drivers/net/starfire.c:1358:
+			np->tx_done = (np->tx_done+1) & (DONE_Q_SIZE-1);
 			                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1296: FILE: drivers/net/starfire.c:1358:
+			np->tx_done = (np->tx_done+1) & (DONE_Q_SIZE-1);
 			                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <CompletionQConsumerIdx>
#1298: FILE: drivers/net/starfire.c:1360:
+		writew(np->tx_done, ioaddr + CompletionQConsumerIdx + 2);

WARNING:SPLIT_STRING: quoted string split across lines
#1309: FILE: drivers/net/starfire.c:1374:
 			printk(KERN_WARNING "%s: Too much work at interrupt, "
+			       "status=0x%4.4x.\n",

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1350: FILE: drivers/net/starfire.c:1418:
+			printk(KERN_DEBUG "  netdev_rx() status of %d was %8.8x.\n", np->rx_done, desc_status);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1350: FILE: drivers/net/starfire.c:1418:
+			printk(KERN_DEBUG "  netdev_rx() status of %d was %8.8x.\n", np->rx_done, desc_status);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1358: FILE: drivers/net/starfire.c:1424:
+				printk(KERN_DEBUG "  netdev_rx() Rx error was %8.8x.\n", desc_status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1358: FILE: drivers/net/starfire.c:1424:
+				printk(KERN_DEBUG "  netdev_rx() Rx error was %8.8x.\n", desc_status);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1378: FILE: drivers/net/starfire.c:1436:
+			printk(KERN_DEBUG "  netdev_rx() normal Rx pkt length %d, bogus_cnt %d.\n", pkt_len, boguscnt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1378: FILE: drivers/net/starfire.c:1436:
+			printk(KERN_DEBUG "  netdev_rx() normal Rx pkt length %d, bogus_cnt %d.\n", pkt_len, boguscnt);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1390: FILE: drivers/net/starfire.c:1439:
+		/* Check if the packet is long enough to accept without copying
+		   to a minimally-sized skbuff. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1390: FILE: drivers/net/starfire.c:1439:
+		   to a minimally-sized skbuff. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1391: FILE: drivers/net/starfire.c:1440:
+		if (pkt_len < rx_copybreak

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1392: FILE: drivers/net/starfire.c:1441:
+		if (pkt_len < rx_copybreak
+		    && (skb = dev_alloc_skb(pkt_len + 2)) != NULL) {

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1431: FILE: drivers/net/starfire.c:1456:
+			pci_unmap_single(np->pci_dev, np->rx_info[entry].mapping, np->rx_buf_sz, PCI_DMA_FROMDEVICE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1440: FILE: drivers/net/starfire.c:1465:
+			printk(KERN_DEBUG "  Rx data %2.2x:%2.2x:%2.2x:%2.2x:%2.2x:"

WARNING:SPLIT_STRING: quoted string split across lines
#1441: FILE: drivers/net/starfire.c:1466:
+			printk(KERN_DEBUG "  Rx data %2.2x:%2.2x:%2.2x:%2.2x:%2.2x:"
+			       "%2.2x %2.2x:%2.2x:%2.2x:%2.2x:%2.2x:%2.2x %2.2x%2.2x "

WARNING:SPLIT_STRING: quoted string split across lines
#1442: FILE: drivers/net/starfire.c:1467:
+			       "%2.2x %2.2x:%2.2x:%2.2x:%2.2x:%2.2x:%2.2x %2.2x%2.2x "
+			       "%d.%d.%d.%d.\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1474: FILE: drivers/net/starfire.c:1477:
+		if (le32_to_cpu(np->rx_done_q[np->rx_done].status2) & 0x01000000) {
+			skb->ip_summed = CHECKSUM_UNNECESSARY;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1478: FILE: drivers/net/starfire.c:1481:
+		/*
+		 * This feature doesn't seem to be working, at least

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1489: FILE: drivers/net/starfire.c:1492:
+			printk(KERN_DEBUG "%s: checksum_hw, status2 = %x\n", dev->name, np->rx_done_q[np->rx_done].status2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1489: FILE: drivers/net/starfire.c:1492:
+			printk(KERN_DEBUG "%s: checksum_hw, status2 = %x\n", dev->name, np->rx_done_q[np->rx_done].status2);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1518: FILE: drivers/net/starfire.c:1528:
 	if (debug > 5
+	    || memcmp(np->pad0, np->pad0 + 1, sizeof(np->pad0) -1))

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1518: FILE: drivers/net/starfire.c:1528:
+	    || memcmp(np->pad0, np->pad0 + 1, sizeof(np->pad0) -1))
 	                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1523: FILE: drivers/net/starfire.c:1531:
+		       memcmp(np->pad0, np->pad0 + 1, sizeof(np->pad0) -1));
 		                                                       ^

WARNING:SPLIT_STRING: quoted string split across lines
#1534: FILE: drivers/net/starfire.c:1543:
 		printk(KERN_NOTICE "%s: Link changed: Autonegotiation advertising"
+		       " %4.4x, partner %4.4x.\n", dev->name,

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)
 	                                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)
 	                                                                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <IntrAbnormalSummary>
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)

CHECK:CAMELCASE: Avoid CamelCase: <IntrLinkChange>
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)

CHECK:CAMELCASE: Avoid CamelCase: <IntrStatsMax>
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)

CHECK:CAMELCASE: Avoid CamelCase: <IntrTxDataLow>
#1546: FILE: drivers/net/starfire.c:1554:
+	if ((intr_status & ~(IntrAbnormalSummary|IntrLinkChange|IntrStatsMax|IntrTxDataLow|1)) && debug)

CHECK:CAMELCASE: Avoid CamelCase: <RxDMAStatus>
#1563: FILE: drivers/net/starfire.c:1578:
+	np->stats.rx_dropped += readw(ioaddr + RxDMAStatus);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1581: FILE: drivers/net/starfire.c:1626:
 	} else if ((dev->mc_count > multicast_filter_limit)
+		   || (dev->flags & IFF_ALLMULTI)) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1620: FILE: drivers/net/starfire.c:1742:
+				       i, le32_to_cpu(np->rx_ring[i].rxaddr), le32_to_cpu(np->rx_done_q[i].status));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#1650: FILE: drivers/net/starfire.c:1761:
+		if (skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1679: FILE: drivers/net/starfire.c:1791:
+			   pci_resource_len (pdev, 0));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 49 warnings, 50 checks, 1592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550310.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
