WARNING:TYPO_SPELLING: 'Alle' may be misspelled - perhaps 'All'?
#35: 
Alle 05:00, gioved=EC 19 agosto 2004, Jeff Dike ha scritto:
^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> I've released a second 2.6.7 UML patch.  This is to push out the changes I

WARNING:TYPO_SPELLING: 'som' may be misspelled - perhaps 'some'?
#40: 
* First, please do a "make clean" before releasing the patch. There are som=
                                                                        ^^^

WARNING:TYPO_SPELLING: 'fixe' may be misspelled - perhaps 'fixed'?
#66: 
params, since sector_t, used in kstatfs, is unsigned. Do you want them fixe=
                                                                       ^^^^

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#82: 
However, IMHO, since you cannot close and reopen a pipe, it's braindead tha=
                                                                        ^^^

WARNING:BAD_SIGN_OFF: Duplicate signature
#146: 
Signed-off-by: Paolo 'Blaisorblade' Giarrusso <blaisorblade_spam@yahoo.it>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: arch/um/include/filehandle.h:24:
+extern void *open_dir(char *file);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: arch/um/include/filehandle.h:38:
+extern int make_pipe(struct file_handle *fhs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: arch/um/include/os.h:178:
+extern int os_make_dev(const char *name, int mode, int major, int minor);

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: arch/um/kernel/filehandle.c:55:
+	if(dir != NULL)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dir"
#228: FILE: arch/um/kernel/filehandle.c:55:
+	if(dir != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: arch/um/kernel/filehandle.c:57:
+	if(err != -EMFILE)

ERROR:SPACING: space required before the open parenthesis '('
#236: FILE: arch/um/kernel/filehandle.c:63:
+	if(dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#236: FILE: arch/um/kernel/filehandle.c:63:
+	if(dir == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#239: FILE: arch/um/kernel/filehandle.c:66:
+	return(dir);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: arch/um/kernel/filehandle.c:202:
+	if(offset != -1)

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: arch/um/kernel/filehandle.c:226:
+	if(err && (err != -EMFILE))

ERROR:SPACING: space required before the open brace '{'
#307: FILE: arch/um/kernel/filehandle.c:229:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: arch/um/kernel/filehandle.c:229:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#311: FILE: arch/um/kernel/filehandle.c:233:
+	if(err)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#316: FILE: arch/um/kernel/filehandle.c:238:
+	return(0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: arch/um/kernel/smp.c:172:
+^I               pipe = new_task->thread.mode.tt.switch_pipe;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: arch/um/kernel/tt/process_kern.c:125:
+	if(read_file(fh, -1, &c, sizeof(c)) != sizeof(c))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'suspend_new_thread', this function's name, in a string
#421: FILE: arch/um/kernel/tt/process_kern.c:126:
+		panic("read failed in suspend_new_thread");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#464: FILE: arch/um/kernel/tt/process_kern.c:246:
+	if(pipe == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#464: FILE: arch/um/kernel/tt/process_kern.c:246:
+	if(pipe == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pipe"
#464: FILE: arch/um/kernel/tt/process_kern.c:246:
+	if(pipe == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#470: FILE: arch/um/kernel/tt/process_kern.c:252:
+	if(err)

ERROR:SPACING: space required before the open brace '{'
#494: FILE: arch/um/kernel/tt/process_kern.c:280:
+	if(IS_ERR(p->thread.mode.tt.switch_pipe)){

ERROR:SPACING: space required before the open parenthesis '('
#494: FILE: arch/um/kernel/tt/process_kern.c:280:
+	if(IS_ERR(p->thread.mode.tt.switch_pipe)){

CHECK:SPACING: No space is necessary after a cast
#539: FILE: arch/um/kernel/tt/process_kern.c:330:
+	close_file(&((struct file_handle *) p->thread.mode.tt.switch_pipe)[0]);

CHECK:SPACING: No space is necessary after a cast
#540: FILE: arch/um/kernel/tt/process_kern.c:331:
+	close_file(&((struct file_handle *) p->thread.mode.tt.switch_pipe)[1]);

ERROR:SPACING: space required before the open parenthesis '('
#567: FILE: arch/um/kernel/tt/process_kern.c:555:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: arch/um/os-Linux/file.c:248:
+^I^Iprintk("fcntl F_SETFL or F_SETOWN failed, errno = %d\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#589: FILE: arch/um/os-Linux/file.c:248:
+		printk("fcntl F_SETFL or F_SETOWN failed, errno = %d\n", 

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: arch/um/os-Linux/process.c:43:
+	if(sscanf(buf, "%*d " COMM_SCANF " %*c %*d %*d %*d %*d %*d %*d %*d "

WARNING:SPLIT_STRING: quoted string split across lines
#642: FILE: arch/um/os-Linux/process.c:45:
 		  "%*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d "
+		  "%*d %*d %*d %*d %*d %lu", &pc) != 1){

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BAD_SIGN_OFF: Duplicate signature
#702: 
Signed-off-by: Paolo 'Blaisorblade' Giarrusso <blaisorblade_spam@yahoo.it>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#742: FILE: arch/um/kernel/ksyms.c:87:
+EXPORT_SYMBOL(os_remove_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#750: FILE: arch/um/kernel/ksyms.c:95:
+EXPORT_SYMBOL(os_fd_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#751: FILE: arch/um/kernel/ksyms.c:96:
+EXPORT_SYMBOL(os_close_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#752: FILE: arch/um/kernel/ksyms.c:97:
+EXPORT_SYMBOL(os_make_dev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#753: FILE: arch/um/kernel/ksyms.c:98:
+EXPORT_SYMBOL(os_stat_filesystem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#754: FILE: arch/um/kernel/ksyms.c:99:
+EXPORT_SYMBOL(os_move_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#755: FILE: arch/um/kernel/ksyms.c:100:
+EXPORT_SYMBOL(os_read_symlink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#756: FILE: arch/um/kernel/ksyms.c:101:
+EXPORT_SYMBOL(os_link_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#757: FILE: arch/um/kernel/ksyms.c:102:
+EXPORT_SYMBOL(os_make_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#758: FILE: arch/um/kernel/ksyms.c:103:
+EXPORT_SYMBOL(os_make_symlink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#759: FILE: arch/um/kernel/ksyms.c:104:
+EXPORT_SYMBOL(os_set_file_time);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#760: FILE: arch/um/kernel/ksyms.c:105:
+EXPORT_SYMBOL(os_truncate_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#761: FILE: arch/um/kernel/ksyms.c:106:
+EXPORT_SYMBOL(os_set_file_owner);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#762: FILE: arch/um/kernel/ksyms.c:107:
+EXPORT_SYMBOL(os_set_file_perms);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#763: FILE: arch/um/kernel/ksyms.c:108:
+EXPORT_SYMBOL(os_lstat_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#764: FILE: arch/um/kernel/ksyms.c:109:
+EXPORT_SYMBOL(os_tell_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#765: FILE: arch/um/kernel/ksyms.c:110:
+EXPORT_SYMBOL(os_read_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#766: FILE: arch/um/kernel/ksyms.c:111:
+EXPORT_SYMBOL(os_seek_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: arch/um/kernel/ksyms.c:112:
+EXPORT_SYMBOL(submit_aio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#805: FILE: arch/um/kernel/physmem.c:233:
+EXPORT_SYMBOL(physmem_forget_descriptor);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#807: FILE: arch/um/kernel/physmem.c:235:
+EXPORT_SYMBOL(physmem_subst_mapping);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#837: FILE: fs/hostfs/externfs.c:1311:
+EXPORT_SYMBOL(init_externfs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#838: FILE: fs/hostfs/externfs.c:1312:
+EXPORT_SYMBOL(inode_externfs_info);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#839: FILE: fs/hostfs/externfs.c:1313:
+EXPORT_SYMBOL(inode_name_prefix);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#879: FILE: fs/hostfs/humfs.c:709:
+#if 0

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#943: FILE: fs/hostfs/host_file.c:434:
+EXPORT_SYMBOL(free_path);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#945: FILE: fs/hostfs/host_file.c:436:
+EXPORT_SYMBOL(get_path);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#946: FILE: fs/hostfs/host_file.c:437:
+EXPORT_SYMBOL(host_create_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#947: FILE: fs/hostfs/host_file.c:438:
+EXPORT_SYMBOL(host_file_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#948: FILE: fs/hostfs/host_file.c:439:
+EXPORT_SYMBOL(host_link_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: fs/hostfs/host_file.c:440:
+EXPORT_SYMBOL(host_make_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#950: FILE: fs/hostfs/host_file.c:441:
+EXPORT_SYMBOL(host_make_symlink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#951: FILE: fs/hostfs/host_file.c:442:
+EXPORT_SYMBOL(host_open_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#952: FILE: fs/hostfs/host_file.c:443:
+EXPORT_SYMBOL(host_open_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#953: FILE: fs/hostfs/host_file.c:444:
+EXPORT_SYMBOL(host_read_link);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#954: FILE: fs/hostfs/host_file.c:445:
+EXPORT_SYMBOL(host_remove_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#955: FILE: fs/hostfs/host_file.c:446:
+EXPORT_SYMBOL(host_rename_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#956: FILE: fs/hostfs/host_file.c:447:
+EXPORT_SYMBOL(host_root_filename);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#957: FILE: fs/hostfs/host_file.c:448:
+EXPORT_SYMBOL(host_set_attr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#958: FILE: fs/hostfs/host_file.c:449:
+EXPORT_SYMBOL(host_stat_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#959: FILE: fs/hostfs/host_file.c:450:
+EXPORT_SYMBOL(host_stat_fs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#960: FILE: fs/hostfs/host_file.c:451:
+EXPORT_SYMBOL(host_unlink_file);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 52 warnings, 8 checks, 799 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
