WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#164: FILE: arch/i386/kernel/kprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#166: FILE: arch/i386/kernel/kprobes.c:3:
+ *  arch/i386/kernel/kprobes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#179: FILE: arch/i386/kernel/kprobes.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#180: FILE: arch/i386/kernel/kprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: arch/i386/kernel/kprobes.c:21:
+ * 2002 ^ICreated by Vamsi Krishna S <vamsi_krishna@in.ibm.com> Kernel$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#207: FILE: arch/i386/kernel/kprobes.c:44:
+	switch(opcode) {
+		case 0xfa: 	/* cli */
+		case 0xfb:	/* sti */
+		case 0xcf:	/* iret/iretd */
+		case 0x9d:	/* popf/popfd */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: arch/i386/kernel/kprobes.c:44:
+	switch(opcode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: arch/i386/kernel/kprobes.c:45:
+^I^Icase 0xfa: ^I/* cli */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#243: FILE: arch/i386/kernel/kprobes.c:80:
+	u8 *addr = (u8 *)(regs->eip-1);
 	                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: arch/i386/kernel/kprobes.c:88:
+                   Disarm the probe we just hit, and ignore it. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#251: FILE: arch/i386/kernel/kprobes.c:88:
+		/* We *are* holding lock here, so this is safe.
+                   Disarm the probe we just hit, and ignore it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#251: FILE: arch/i386/kernel/kprobes.c:88:
+                   Disarm the probe we just hit, and ignore it. */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#275: FILE: arch/i386/kernel/kprobes.c:112:
+	kprobe_saved_eflags = kprobe_old_eflags
+		= (regs->eflags & (TF_MASK|IF_MASK));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#275: FILE: arch/i386/kernel/kprobes.c:112:
+		= (regs->eflags & (TF_MASK|IF_MASK));
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#276: FILE: arch/i386/kernel/kprobes.c:113:
+	if(is_IF_modifier(p->opcode))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#309: FILE: arch/i386/kernel/kprobes.c:146:
+	switch(p->insn[0]) {
+		case 0x9c:	/* pushfl */
[...]
+		case 0xe8:	/* call relative */
[...]
+		case 0xff:
[...]
+		case 0xea:	/* jmp absolute */
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: arch/i386/kernel/kprobes.c:146:
+	switch(p->insn[0]) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#321: FILE: arch/i386/kernel/kprobes.c:158:
+			} else if (((p->insn[1] & 0x31) == 0x20) || /* jmp near, absolute indirect */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#334: FILE: arch/i386/kernel/kprobes.c:171:
+	if (next_eip) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: arch/i386/kernel/kprobes.c:196:
+        /*$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#374: FILE: arch/i386/kernel/kprobes.c:211:
+	if (current_kprobe->fault_handler
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))

ERROR:SPACING: space prohibited after that '&&' (ctx:ExW)
#374: FILE: arch/i386/kernel/kprobes.c:211:
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))
 	    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: arch/i386/kernel/kprobes.c:216:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: arch/i386/kernel/kprobes.c:216:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: arch/i386/kernel/kprobes.c:216:
+        ^Iregs->eflags |= kprobe_old_eflags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: arch/i386/kernel/traps.c:568:
+           disabled.  Normal trap handlers don't. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: arch/i386/kernel/traps.c:568:
+	/* This is an interrupt gate, because kprobes wants interrupts
+           disabled.  Normal trap handlers don't. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#424: FILE: arch/i386/kernel/traps.c:568:
+           disabled.  Normal trap handlers don't. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#438: FILE: arch/i386/kernel/traps.c:596:
+asmlinkage int do_debug(struct pt_regs * regs, long error_code)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#485: FILE: arch/i386/kernel/traps.c:933:
+	_set_gate(idt_table+3,14,3,&int3,__KERNEL_CS); /* int3-5 can be called from all */
 	                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#514: FILE: include/asm-i386/kprobes.h:1:
+#ifndef _ASM_KPROBES_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#518: FILE: include/asm-i386/kprobes.h:5:
+ *  include/asm-i386/kprobes.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#531: FILE: include/asm-i386/kprobes.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#532: FILE: include/asm-i386/kprobes.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#536: FILE: include/asm-i386/kprobes.h:23:
+ * 2002 ^ICreated by Vamsi Krishna S <vamsi_krishna@in.ibm.com> Kernel$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/asm-i386/kprobes.h:48:
+extern int kprobe_fault_handler(struct pt_regs *regs, int trapnr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#562: FILE: include/asm-i386/kprobes.h:49:
+extern int post_kprobe_handler(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#563: FILE: include/asm-i386/kprobes.h:50:
+extern int kprobe_handler(struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#574: FILE: include/linux/kprobes.h:1:
+#ifndef _LINUX_KPROBES_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#578: FILE: include/linux/kprobes.h:5:
+ *  include/linux/kprobes.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#591: FILE: include/linux/kprobes.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#592: FILE: include/linux/kprobes.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#596: FILE: include/linux/kprobes.h:23:
+ * 2002 ^ICreated by Vamsi Krishna S <vamsi_krishna@in.ibm.com> Kernel$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#627: FILE: include/linux/kprobes.h:54:
+	  * Return 1 if it handled fault, otherwise kernel will see it. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/kprobes.h:76:
+extern void arch_prepare_kprobe(struct kprobe *p);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#658: FILE: include/linux/kprobes.h:85:
+static inline int register_kprobe(struct kprobe *p) { return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#677: FILE: kernel/kprobes.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#679: FILE: kernel/kprobes.c:3:
+ *  kernel/kprobes.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#692: FILE: kernel/kprobes.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#693: FILE: kernel/kprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#706: FILE: kernel/kprobes.c:30:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#710: FILE: kernel/kprobes.c:34:
+#define KPROBE_TABLE_SIZE (1 << KPROBE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#714: FILE: kernel/kprobes.c:38:
+unsigned int kprobe_cpu = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#726: FILE: kernel/kprobes.c:50:
+	kprobe_cpu = NR_CPUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#738: FILE: kernel/kprobes.c:62:
+		struct kprobe *p = list_entry(tmp, struct kprobe, list);
+		if (p->addr == addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#784: FILE: kernel/kprobes.c:108:
+__initcall(init_kprobes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#786: FILE: kernel/kprobes.c:110:
+EXPORT_SYMBOL_GPL(register_kprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#787: FILE: kernel/kprobes.c:111:
+EXPORT_SYMBOL_GPL(unregister_kprobe);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263316.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 29 warnings, 10 checks, 651 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263316.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
