CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#47: FILE: fs/proc/base.c:1257:
+static struct dentry *proc_fd_instantiate(struct inode *dir,
+	struct dentry *dentry, struct task_struct *task, void *ptr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#61: FILE: fs/proc/base.c:1259:
+	unsigned fd = *(unsigned *)ptr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#61: FILE: fs/proc/base.c:1259:
+	unsigned fd = *(unsigned *)ptr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: fs/proc/base.c:1262:
+ ^Istruct inode *inode;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: fs/proc/base.c:1262:
+ ^Istruct inode *inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/proc/base.c:1262:
+ ^Istruct inode *inode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: fs/proc/base.c:1263:
+ ^Istruct proc_inode *ei;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: fs/proc/base.c:1263:
+ ^Istruct proc_inode *ei;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: fs/proc/base.c:1263:
+ ^Istruct proc_inode *ei;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#119: FILE: fs/proc/base.c:1311:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry, struct nameidata *nd)
                                                                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#119: FILE: fs/proc/base.c:1311:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: fs/proc/base.c:1311:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: fs/proc/base.c:1311:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry, struct nameidata *nd)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: fs/proc/base.c:1314:
+	unsigned fd = name_to_int(dentry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/proc/base.c:1410:
+static struct dentry *proc_pident_instantiate(struct inode *dir,
+	struct dentry *dentry, struct task_struct *task, void *ptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/proc/base.c:1846:
+struct dentry *proc_pid_instantiate(struct inode *dir,
+	struct dentry * dentry, struct task_struct *task, void *ptr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: fs/proc/base.c:1846:
+	struct dentry * dentry, struct task_struct *task, void *ptr)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#226: FILE: fs/proc/base.c:1855:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#226: FILE: fs/proc/base.c:1855:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#226: FILE: fs/proc/base.c:1855:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '|=' (ctx:VxV)
#229: FILE: fs/proc/base.c:1858:
+	inode->i_flags|=S_IMMUTABLE;
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/proc/base.c:2080:
+static struct dentry *proc_task_instantiate(struct inode *dir,
+	struct dentry *dentry, struct task_struct *task, void *ptr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: fs/proc/base.c:2084:
+	struct inode *inode;
+	inode = proc_pid_make_inode(dir->i_sb, task, PROC_TID_INO);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#297: FILE: fs/proc/base.c:2088:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#297: FILE: fs/proc/base.c:2088:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#297: FILE: fs/proc/base.c:2088:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;

ERROR:SPACING: spaces required around that '|=' (ctx:VxV)
#300: FILE: fs/proc/base.c:2091:
+	inode->i_flags|=S_IMMUTABLE;
 	              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 12 warnings, 8 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
