ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#53: FILE: include/asm-sh64/io.h:146:
+static inline unsigned long virt_to_phys(volatile void * address)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#53: FILE: include/asm-sh64/io.h:146:
+static inline unsigned long virt_to_phys(volatile void * address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: include/asm-sh64/io.h:151:
+static inline void * phys_to_virt(unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/asm-sh64/io.h:159:
+static inline void * ioremap(unsigned long phys_addr, unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: include/asm-sh64/io.h:164:
+static inline void * ioremap_nocache (unsigned long phys_addr, unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#74: FILE: include/asm-sh64/io.h:164:
+static inline void * ioremap_nocache (unsigned long phys_addr, unsigned long size)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#170: FILE: include/asm-sh64/pgtable.h:424:
+static inline pte_t pte_rdprotect(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~_PAGE_READ)); return pte; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#171: FILE: include/asm-sh64/pgtable.h:425:
+static inline pte_t pte_wrprotect(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~_PAGE_WRITE)); return pte; }

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#172: FILE: include/asm-sh64/pgtable.h:426:
+static inline pte_t pte_exprotect(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~_PAGE_EXECUTE)); return pte; }

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#173: FILE: include/asm-sh64/pgtable.h:427:
+static inline pte_t pte_mkclean(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~_PAGE_DIRTY)); return pte; }

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#174: FILE: include/asm-sh64/pgtable.h:428:
+static inline pte_t pte_mkold(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~_PAGE_ACCESSED)); return pte; }

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#176: FILE: include/asm-sh64/pgtable.h:430:
+static inline pte_t pte_mkread(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_READ)); return pte; }

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#177: FILE: include/asm-sh64/pgtable.h:431:
+static inline pte_t pte_mkwrite(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_WRITE)); return pte; }

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#178: FILE: include/asm-sh64/pgtable.h:432:
+static inline pte_t pte_mkexec(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_EXECUTE)); return pte; }

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#179: FILE: include/asm-sh64/pgtable.h:433:
+static inline pte_t pte_mkdirty(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_DIRTY)); return pte; }

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#180: FILE: include/asm-sh64/pgtable.h:434:
+static inline pte_t pte_mkyoung(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_ACCESSED)); return pte; }

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#181: FILE: include/asm-sh64/pgtable.h:435:
+static inline pte_t pte_mkhuge(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) | _PAGE_SZHUGE)); return pte; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: include/asm-sh64/system.h:135:
+static inline unsigned long xchg_u32(volatile int * m, unsigned long val)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#221: FILE: include/asm-sh64/system.h:135:
+static inline unsigned long xchg_u32(volatile int * m, unsigned long val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: include/asm-sh64/system.h:146:
+static inline unsigned long xchg_u8(volatile unsigned char * m, unsigned long val)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#230: FILE: include/asm-sh64/system.h:146:
+static inline unsigned long xchg_u8(volatile unsigned char * m, unsigned long val)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126253.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 0 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126253.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
