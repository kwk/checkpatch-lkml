WARNING:TYPO_SPELLING: 'availabe' may be misspelled - perhaps 'available'?
#33: 
The normal ioctl operations are not availabe with that file descriptor.
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
named /dev/dac960_gam.  It uses minor device number 252 of the miscellaneous

WARNING:TYPO_SPELLING: 'distrubted' may be misspelled - perhaps 'distributed'?
#40: 
The currently distrubted "Global Array Manager" server distrubted by
              ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'distrubted' may be misspelled - perhaps 'distributed'?
#40: 
The currently distrubted "Global Array Manager" server distrubted by
                                                       ^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'page'
#41: 
LSIlogic on their web page page works only on RH7.3 or earlier.  It doesn't

WARNING:TYPO_SPELLING: 'incompatabilities' may be misspelled - perhaps 'incompatibilities'?
#42: 
work under RH9.  There are probably some library incompatabilities.
                                                 ^^^^^^^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_CheckStatusBuffer>
#103: FILE: drivers/block/DAC960.c:5573:
+static boolean DAC960_CheckStatusBuffer(DAC960_Controller_T *Controller,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Controller_T>
#103: FILE: drivers/block/DAC960.c:5573:
+static boolean DAC960_CheckStatusBuffer(DAC960_Controller_T *Controller,

CHECK:CAMELCASE: Avoid CamelCase: <Controller>
#103: FILE: drivers/block/DAC960.c:5573:
+static boolean DAC960_CheckStatusBuffer(DAC960_Controller_T *Controller,

CHECK:CAMELCASE: Avoid CamelCase: <ByteCount>
#104: FILE: drivers/block/DAC960.c:5574:
+					unsigned int ByteCount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/block/DAC960.c:5576:
+  unsigned char *NewStatusBuffer;$

CHECK:CAMELCASE: Avoid CamelCase: <NewStatusBuffer>
#109: FILE: drivers/block/DAC960.c:5576:
+  unsigned char *NewStatusBuffer;

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: drivers/block/DAC960.c:5577:
+  unsigned char *NewStatusBuffer;
+  if (Controller->InitialStatusLength + 1 +

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/block/DAC960.c:5577:
+  if (Controller->InitialStatusLength + 1 +$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#110: FILE: drivers/block/DAC960.c:5577:
+  if (Controller->InitialStatusLength + 1 +
[...]
+    return true;

CHECK:CAMELCASE: Avoid CamelCase: <InitialStatusLength>
#110: FILE: drivers/block/DAC960.c:5577:
+  if (Controller->InitialStatusLength + 1 +

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: drivers/block/DAC960.c:5578:
+      Controller->CurrentStatusLength + ByteCount + 1 <=$

CHECK:CAMELCASE: Avoid CamelCase: <CurrentStatusLength>
#111: FILE: drivers/block/DAC960.c:5578:
+      Controller->CurrentStatusLength + ByteCount + 1 <=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: drivers/block/DAC960.c:5579:
+      Controller->CombinedStatusBufferLength)$

CHECK:CAMELCASE: Avoid CamelCase: <CombinedStatusBufferLength>
#112: FILE: drivers/block/DAC960.c:5579:
+      Controller->CombinedStatusBufferLength)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: drivers/block/DAC960.c:5580:
+    return true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: drivers/block/DAC960.c:5581:
+  if (Controller->CombinedStatusBufferLength == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#114: FILE: drivers/block/DAC960.c:5581:
+  if (Controller->CombinedStatusBufferLength == 0)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/block/DAC960.c:5583:
+      unsigned int NewStatusBufferLength = DAC960_InitialStatusBufferSize;$

CHECK:CAMELCASE: Avoid CamelCase: <NewStatusBufferLength>
#187: FILE: drivers/block/DAC960.c:5583:
+      unsigned int NewStatusBufferLength = DAC960_InitialStatusBufferSize;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_InitialStatusBufferSize>
#187: FILE: drivers/block/DAC960.c:5583:
+      unsigned int NewStatusBufferLength = DAC960_InitialStatusBufferSize;

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: drivers/block/DAC960.c:5584:
+      unsigned int NewStatusBufferLength = DAC960_InitialStatusBufferSize;
+      while (NewStatusBufferLength < ByteCount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: drivers/block/DAC960.c:5584:
+      while (NewStatusBufferLength < ByteCount)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/block/DAC960.c:5586:
+      Controller->CombinedStatusBuffer =$

CHECK:CAMELCASE: Avoid CamelCase: <CombinedStatusBuffer>
#190: FILE: drivers/block/DAC960.c:5586:
+      Controller->CombinedStatusBuffer =

CHECK:SPACING: No space is necessary after a cast
#191: FILE: drivers/block/DAC960.c:5587:
+	(unsigned char *) kmalloc(NewStatusBufferLength, GFP_ATOMIC);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#191: FILE: drivers/block/DAC960.c:5587:
+	(unsigned char *) kmalloc(NewStatusBufferLength, GFP_ATOMIC);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: drivers/block/DAC960.c:5588:
+      if (Controller->CombinedStatusBuffer == NULL) return false;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#192: FILE: drivers/block/DAC960.c:5588:
+      if (Controller->CombinedStatusBuffer == NULL) return false;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller->CombinedStatusBuffer"
#192: FILE: drivers/block/DAC960.c:5588:
+      if (Controller->CombinedStatusBuffer == NULL) return false;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: drivers/block/DAC960.c:5589:
+      Controller->CombinedStatusBufferLength = NewStatusBufferLength;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/block/DAC960.c:5590:
+      return true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/block/DAC960.c:5591:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/block/DAC960.c:5592:
+  NewStatusBuffer = (unsigned char *)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/block/DAC960.c:5593:
+    kmalloc(2 * Controller->CombinedStatusBufferLength, GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/block/DAC960.c:5594:
+  if (NewStatusBuffer == NULL)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#198: FILE: drivers/block/DAC960.c:5594:
+  if (NewStatusBuffer == NULL)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#198: FILE: drivers/block/DAC960.c:5594:
+  if (NewStatusBuffer == NULL)
+    {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!NewStatusBuffer"
#198: FILE: drivers/block/DAC960.c:5594:
+  if (NewStatusBuffer == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/block/DAC960.c:5595:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/block/DAC960.c:5596:
+      DAC960_Warning("Unable to expand Combined Status Buffer - Truncating\n",$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Warning>
#200: FILE: drivers/block/DAC960.c:5596:
+      DAC960_Warning("Unable to expand Combined Status Buffer - Truncating\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/block/DAC960.c:5598:
+      return false;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/block/DAC960.c:5599:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/block/DAC960.c:5600:
+  memcpy(NewStatusBuffer, Controller->CombinedStatusBuffer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/block/DAC960.c:5602:
+  kfree(Controller->CombinedStatusBuffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: drivers/block/DAC960.c:5603:
+  Controller->CombinedStatusBuffer = NewStatusBuffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: drivers/block/DAC960.c:5604:
+  Controller->CombinedStatusBufferLength *= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: drivers/block/DAC960.c:5605:
+  Controller->CurrentStatusBuffer =$

CHECK:CAMELCASE: Avoid CamelCase: <CurrentStatusBuffer>
#209: FILE: drivers/block/DAC960.c:5605:
+  Controller->CurrentStatusBuffer =

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/block/DAC960.c:5606:
+    &NewStatusBuffer[Controller->InitialStatusLength + 1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/block/DAC960.c:5607:
+  return true;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#214: FILE: drivers/block/DAC960.c:5610:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: drivers/block/DAC960.c:5612:
+/*
+  DAC960_Message prints Driver Messages.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Message>
#219: FILE: drivers/block/DAC960.c:5615:
+static void DAC960_Message(DAC960_MessageLevel_T MessageLevel,

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_MessageLevel_T>
#219: FILE: drivers/block/DAC960.c:5615:
+static void DAC960_Message(DAC960_MessageLevel_T MessageLevel,

CHECK:CAMELCASE: Avoid CamelCase: <MessageLevel>
#219: FILE: drivers/block/DAC960.c:5615:
+static void DAC960_Message(DAC960_MessageLevel_T MessageLevel,

CHECK:CAMELCASE: Avoid CamelCase: <Format>
#220: FILE: drivers/block/DAC960.c:5616:
+			   unsigned char *Format,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/block/DAC960.c:5620:
+  static unsigned char Buffer[DAC960_LineBufferSize];$

CHECK:CAMELCASE: Avoid CamelCase: <Buffer>
#224: FILE: drivers/block/DAC960.c:5620:
+  static unsigned char Buffer[DAC960_LineBufferSize];

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_LineBufferSize>
#224: FILE: drivers/block/DAC960.c:5620:
+  static unsigned char Buffer[DAC960_LineBufferSize];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/block/DAC960.c:5621:
+  static boolean BeginningOfLine = true;$

CHECK:CAMELCASE: Avoid CamelCase: <BeginningOfLine>
#225: FILE: drivers/block/DAC960.c:5621:
+  static boolean BeginningOfLine = true;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/block/DAC960.c:5622:
+  va_list Arguments;$

CHECK:CAMELCASE: Avoid CamelCase: <Arguments>
#226: FILE: drivers/block/DAC960.c:5622:
+  va_list Arguments;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/block/DAC960.c:5623:
+  int Length = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <Length>
#227: FILE: drivers/block/DAC960.c:5623:
+  int Length = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: drivers/block/DAC960.c:5624:
+  int Length = 0;
+  va_start(Arguments, Controller);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: drivers/block/DAC960.c:5624:
+  va_start(Arguments, Controller);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/block/DAC960.c:5625:
+  Length = vsprintf(Buffer, Format, Arguments);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/block/DAC960.c:5626:
+  va_end(Arguments);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/block/DAC960.c:5627:
+  if (Controller == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#231: FILE: drivers/block/DAC960.c:5627:
+  if (Controller == NULL)
+    printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller"
#231: FILE: drivers/block/DAC960.c:5627:
+  if (Controller == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/block/DAC960.c:5628:
+    printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: drivers/block/DAC960.c:5628:
+    printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_MessageLevelMap>
#232: FILE: drivers/block/DAC960.c:5628:
+    printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ControllerCount>
#233: FILE: drivers/block/DAC960.c:5629:
+	   DAC960_ControllerCount, Buffer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/block/DAC960.c:5630:
+  else if (MessageLevel == DAC960_AnnounceLevel ||$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#234: FILE: drivers/block/DAC960.c:5630:
+  else if (MessageLevel == DAC960_AnnounceLevel ||
+	   MessageLevel == DAC960_InfoLevel)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#234: FILE: drivers/block/DAC960.c:5630:
+  else if (MessageLevel == DAC960_AnnounceLevel ||
[...]
+    {

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_AnnounceLevel>
#234: FILE: drivers/block/DAC960.c:5630:
+  else if (MessageLevel == DAC960_AnnounceLevel ||

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_InfoLevel>
#235: FILE: drivers/block/DAC960.c:5631:
+	   MessageLevel == DAC960_InfoLevel)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/block/DAC960.c:5632:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/block/DAC960.c:5633:
+      if (!Controller->ControllerInitialized)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#237: FILE: drivers/block/DAC960.c:5633:
+      if (!Controller->ControllerInitialized)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#237: FILE: drivers/block/DAC960.c:5633:
+      if (!Controller->ControllerInitialized)
+	{

CHECK:CAMELCASE: Avoid CamelCase: <ControllerInitialized>
#237: FILE: drivers/block/DAC960.c:5633:
+      if (!Controller->ControllerInitialized)

WARNING:TABSTOP: Statements should start on a tabstop
#239: FILE: drivers/block/DAC960.c:5635:
+	  if (DAC960_CheckStatusBuffer(Controller, Length))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#239: FILE: drivers/block/DAC960.c:5635:
+	  if (DAC960_CheckStatusBuffer(Controller, Length))
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#239: FILE: drivers/block/DAC960.c:5635:
+	  if (DAC960_CheckStatusBuffer(Controller, Length))
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#240: FILE: drivers/block/DAC960.c:5636:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#275: FILE: drivers/block/DAC960.c:5645:
+	  if (MessageLevel == DAC960_AnnounceLevel)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#275: FILE: drivers/block/DAC960.c:5645:
+	  if (MessageLevel == DAC960_AnnounceLevel)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#275: FILE: drivers/block/DAC960.c:5645:
+	  if (MessageLevel == DAC960_AnnounceLevel)
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#276: FILE: drivers/block/DAC960.c:5646:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#277: FILE: drivers/block/DAC960.c:5647:
+	      static int AnnouncementLines = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#277: FILE: drivers/block/DAC960.c:5647:
+	      static int AnnouncementLines = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <AnnouncementLines>
#277: FILE: drivers/block/DAC960.c:5647:
+	      static int AnnouncementLines = 0;

WARNING:TABSTOP: Statements should start on a tabstop
#278: FILE: drivers/block/DAC960.c:5648:
+	      if (++AnnouncementLines <= 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: drivers/block/DAC960.c:5648:
+	      static int AnnouncementLines = 0;
+	      if (++AnnouncementLines <= 2)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: drivers/block/DAC960.c:5649:
+		printk("%sDAC960: %s", DAC960_MessageLevelMap[MessageLevel],

WARNING:TABSTOP: Statements should start on a tabstop
#291: FILE: drivers/block/DAC960.c:5652:
+	  else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#291: FILE: drivers/block/DAC960.c:5652:
+	  else
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#291: FILE: drivers/block/DAC960.c:5652:
+	  else
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#292: FILE: drivers/block/DAC960.c:5653:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#293: FILE: drivers/block/DAC960.c:5654:
+	      if (BeginningOfLine)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#293: FILE: drivers/block/DAC960.c:5654:
+	      if (BeginningOfLine)
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#293: FILE: drivers/block/DAC960.c:5654:
+	      if (BeginningOfLine)
+		{

WARNING:TABSTOP: Statements should start on a tabstop
#295: FILE: drivers/block/DAC960.c:5656:
+		  if (Buffer[0] != '\n' || Length > 1)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#295: FILE: drivers/block/DAC960.c:5656:
+		  if (Buffer[0] != '\n' || Length > 1)
+		    printk("%sDAC960#%d: %s",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: drivers/block/DAC960.c:5657:
+		    printk("%sDAC960#%d: %s",

CHECK:CAMELCASE: Avoid CamelCase: <ControllerNumber>
#298: FILE: drivers/block/DAC960.c:5659:
+			   Controller->ControllerNumber, Buffer);

WARNING:TABSTOP: Statements should start on a tabstop
#300: FILE: drivers/block/DAC960.c:5661:
+	      else printk("%s", Buffer);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: drivers/block/DAC960.c:5661:
+	      else printk("%s", Buffer);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: drivers/block/DAC960.c:5661:
+	      else printk("%s", Buffer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: drivers/block/DAC960.c:5664:
+      else if (DAC960_CheckStatusBuffer(Controller, Length))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#308: FILE: drivers/block/DAC960.c:5664:
+      else if (DAC960_CheckStatusBuffer(Controller, Length))
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#308: FILE: drivers/block/DAC960.c:5664:
+      else if (DAC960_CheckStatusBuffer(Controller, Length))
+	{

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#310: FILE: drivers/block/DAC960.c:5666:
+	  strcpy(&Controller->CurrentStatusBuffer[

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: drivers/block/DAC960.c:5670:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: drivers/block/DAC960.c:5671:
+  else if (MessageLevel == DAC960_ProgressLevel)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#315: FILE: drivers/block/DAC960.c:5671:
+  else if (MessageLevel == DAC960_ProgressLevel)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#315: FILE: drivers/block/DAC960.c:5671:
+  else if (MessageLevel == DAC960_ProgressLevel)
+    {

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProgressLevel>
#315: FILE: drivers/block/DAC960.c:5671:
+  else if (MessageLevel == DAC960_ProgressLevel)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: drivers/block/DAC960.c:5672:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: drivers/block/DAC960.c:5673:
+      strcpy(Controller->ProgressBuffer, Buffer);$

CHECK:CAMELCASE: Avoid CamelCase: <ProgressBuffer>
#317: FILE: drivers/block/DAC960.c:5673:
+      strcpy(Controller->ProgressBuffer, Buffer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: drivers/block/DAC960.c:5674:
+      Controller->ProgressBufferLength = Length;$

CHECK:CAMELCASE: Avoid CamelCase: <ProgressBufferLength>
#318: FILE: drivers/block/DAC960.c:5674:
+      Controller->ProgressBufferLength = Length;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: drivers/block/DAC960.c:5675:
+      if (Controller->EphemeralProgressMessage)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#319: FILE: drivers/block/DAC960.c:5675:
+      if (Controller->EphemeralProgressMessage)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#319: FILE: drivers/block/DAC960.c:5675:
+      if (Controller->EphemeralProgressMessage)
+	{

CHECK:CAMELCASE: Avoid CamelCase: <EphemeralProgressMessage>
#319: FILE: drivers/block/DAC960.c:5675:
+      if (Controller->EphemeralProgressMessage)

WARNING:TABSTOP: Statements should start on a tabstop
#321: FILE: drivers/block/DAC960.c:5677:
+	  if (jiffies - Controller->LastProgressReportTime

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#321: FILE: drivers/block/DAC960.c:5677:
+	  if (jiffies - Controller->LastProgressReportTime
+	      >= DAC960_ProgressReportingInterval)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#321: FILE: drivers/block/DAC960.c:5677:
+	  if (jiffies - Controller->LastProgressReportTime
[...]
+	    {

CHECK:CAMELCASE: Avoid CamelCase: <LastProgressReportTime>
#321: FILE: drivers/block/DAC960.c:5677:
+	  if (jiffies - Controller->LastProgressReportTime

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProgressReportingInterval>
#322: FILE: drivers/block/DAC960.c:5678:
+	      >= DAC960_ProgressReportingInterval)

WARNING:TABSTOP: Statements should start on a tabstop
#323: FILE: drivers/block/DAC960.c:5679:
+	    {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: drivers/block/DAC960.c:5680:
+	      printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: drivers/block/DAC960.c:5685:
+      else printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: drivers/block/DAC960.c:5685:
+      else printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#723: FILE: drivers/block/DAC960.c:5685:
+      else printk("%sDAC960#%d: %s", DAC960_MessageLevelMap[MessageLevel],

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: drivers/block/DAC960.c:6320:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: drivers/block/DAC960.c:6321:
+  BytesAvailable = strlen(StatusMessage) - Offset;$

CHECK:CAMELCASE: Avoid CamelCase: <BytesAvailable>
#800: FILE: drivers/block/DAC960.c:6321:
+  BytesAvailable = strlen(StatusMessage) - Offset;

CHECK:CAMELCASE: Avoid CamelCase: <StatusMessage>
#800: FILE: drivers/block/DAC960.c:6321:
+  BytesAvailable = strlen(StatusMessage) - Offset;

CHECK:CAMELCASE: Avoid CamelCase: <Offset>
#800: FILE: drivers/block/DAC960.c:6321:
+  BytesAvailable = strlen(StatusMessage) - Offset;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: drivers/block/DAC960.c:6322:
+  if (Count >= BytesAvailable)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#801: FILE: drivers/block/DAC960.c:6322:
+  if (Count >= BytesAvailable)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#801: FILE: drivers/block/DAC960.c:6322:
+  if (Count >= BytesAvailable)
+    {

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#801: FILE: drivers/block/DAC960.c:6322:
+  if (Count >= BytesAvailable)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: drivers/block/DAC960.c:6323:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: drivers/block/DAC960.c:6324:
+      Count = BytesAvailable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: drivers/block/DAC960.c:6325:
+      *EOF = true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: drivers/block/DAC960.c:6326:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: drivers/block/DAC960.c:6327:
+  if (Count <= 0) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#806: FILE: drivers/block/DAC960.c:6327:
+  if (Count <= 0) return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: drivers/block/DAC960.c:6328:
+  *Start = Page;$

CHECK:CAMELCASE: Avoid CamelCase: <Start>
#807: FILE: drivers/block/DAC960.c:6328:
+  *Start = Page;

CHECK:CAMELCASE: Avoid CamelCase: <Page>
#807: FILE: drivers/block/DAC960.c:6328:
+  *Start = Page;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: drivers/block/DAC960.c:6329:
+  memcpy(Page, &StatusMessage[Offset], Count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: drivers/block/DAC960.c:6330:
+  return Count;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#812: FILE: drivers/block/DAC960.c:6333:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#814: FILE: drivers/block/DAC960.c:6335:
+/*
+  DAC960_ProcReadInitialStatus implements reading /proc/rd/cN/initial_status.

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcReadInitialStatus>
#817: FILE: drivers/block/DAC960.c:6338:
+static int DAC960_ProcReadInitialStatus(char *Page, char **Start, off_t Offset,

CHECK:CAMELCASE: Avoid CamelCase: <Data>
#818: FILE: drivers/block/DAC960.c:6339:
+					int Count, int *EOF, void *Data)

CHECK:SPACING: No space is necessary after a cast
#820: FILE: drivers/block/DAC960.c:6341:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: drivers/block/DAC960.c:6341:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: drivers/block/DAC960.c:6342:
+  int BytesAvailable = Controller->InitialStatusLength - Offset;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: drivers/block/DAC960.c:6343:
+  int BytesAvailable = Controller->InitialStatusLength - Offset;
+  if (Count >= BytesAvailable)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: drivers/block/DAC960.c:6343:
+  if (Count >= BytesAvailable)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#822: FILE: drivers/block/DAC960.c:6343:
+  if (Count >= BytesAvailable)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#822: FILE: drivers/block/DAC960.c:6343:
+  if (Count >= BytesAvailable)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: drivers/block/DAC960.c:6344:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: drivers/block/DAC960.c:6345:
+      Count = BytesAvailable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: drivers/block/DAC960.c:6346:
+      *EOF = true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: drivers/block/DAC960.c:6347:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: drivers/block/DAC960.c:6348:
+  if (Count <= 0) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#827: FILE: drivers/block/DAC960.c:6348:
+  if (Count <= 0) return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: drivers/block/DAC960.c:6349:
+  *Start = Page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: drivers/block/DAC960.c:6350:
+  memcpy(Page, &Controller->CombinedStatusBuffer[Offset], Count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: drivers/block/DAC960.c:6351:
+  return Count;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: drivers/block/DAC960.c:6354:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#835: FILE: drivers/block/DAC960.c:6356:
+/*
+  DAC960_ProcReadCurrentStatus implements reading /proc/rd/cN/current_status.

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcReadCurrentStatus>
#838: FILE: drivers/block/DAC960.c:6359:
+static int DAC960_ProcReadCurrentStatus(char *Page, char **Start, off_t Offset,

CHECK:SPACING: No space is necessary after a cast
#841: FILE: drivers/block/DAC960.c:6362:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: drivers/block/DAC960.c:6362:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: drivers/block/DAC960.c:6363:
+  unsigned char *StatusMessage =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: drivers/block/DAC960.c:6364:
+    "No Rebuild or Consistency Check in Progress\n";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#844: FILE: drivers/block/DAC960.c:6365:
+  int ProgressMessageLength = strlen(StatusMessage);$

CHECK:CAMELCASE: Avoid CamelCase: <ProgressMessageLength>
#844: FILE: drivers/block/DAC960.c:6365:
+  int ProgressMessageLength = strlen(StatusMessage);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: drivers/block/DAC960.c:6366:
+  int BytesAvailable;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#846: FILE: drivers/block/DAC960.c:6367:
+  int BytesAvailable;
+  if (jiffies != Controller->LastCurrentStatusTime)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: drivers/block/DAC960.c:6367:
+  if (jiffies != Controller->LastCurrentStatusTime)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#846: FILE: drivers/block/DAC960.c:6367:
+  if (jiffies != Controller->LastCurrentStatusTime)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#846: FILE: drivers/block/DAC960.c:6367:
+  if (jiffies != Controller->LastCurrentStatusTime)
+    {

CHECK:CAMELCASE: Avoid CamelCase: <LastCurrentStatusTime>
#846: FILE: drivers/block/DAC960.c:6367:
+  if (jiffies != Controller->LastCurrentStatusTime)

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#846: FILE: drivers/block/DAC960.c:6367:
+  if (jiffies != Controller->LastCurrentStatusTime)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: drivers/block/DAC960.c:6368:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: drivers/block/DAC960.c:6369:
+      Controller->CurrentStatusLength = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: drivers/block/DAC960.c:6370:
+      DAC960_AnnounceDriver(Controller);$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_AnnounceDriver>
#849: FILE: drivers/block/DAC960.c:6370:
+      DAC960_AnnounceDriver(Controller);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: drivers/block/DAC960.c:6371:
+      DAC960_ReportControllerConfiguration(Controller);$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ReportControllerConfiguration>
#850: FILE: drivers/block/DAC960.c:6371:
+      DAC960_ReportControllerConfiguration(Controller);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: drivers/block/DAC960.c:6372:
+      DAC960_ReportDeviceConfiguration(Controller);$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ReportDeviceConfiguration>
#851: FILE: drivers/block/DAC960.c:6372:
+      DAC960_ReportDeviceConfiguration(Controller);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: drivers/block/DAC960.c:6373:
+      if (Controller->ProgressBufferLength > 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: drivers/block/DAC960.c:6375:
+      if (DAC960_CheckStatusBuffer(Controller, 2 + ProgressMessageLength))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#854: FILE: drivers/block/DAC960.c:6375:
+      if (DAC960_CheckStatusBuffer(Controller, 2 + ProgressMessageLength))
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#854: FILE: drivers/block/DAC960.c:6375:
+      if (DAC960_CheckStatusBuffer(Controller, 2 + ProgressMessageLength))
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#856: FILE: drivers/block/DAC960.c:6377:
+	  unsigned char *CurrentStatusBuffer = Controller->CurrentStatusBuffer;

WARNING:LINE_SPACING: Missing a blank line after declarations
#857: FILE: drivers/block/DAC960.c:6378:
+	  unsigned char *CurrentStatusBuffer = Controller->CurrentStatusBuffer;
+	  CurrentStatusBuffer[Controller->CurrentStatusLength++] = ' ';

WARNING:TABSTOP: Statements should start on a tabstop
#859: FILE: drivers/block/DAC960.c:6380:
+	  if (Controller->ProgressBufferLength > 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#859: FILE: drivers/block/DAC960.c:6380:
+	  if (Controller->ProgressBufferLength > 0)
+	    strcpy(&CurrentStatusBuffer[Controller->CurrentStatusLength],

WARNING:TABSTOP: Statements should start on a tabstop
#862: FILE: drivers/block/DAC960.c:6383:
+	  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#862: FILE: drivers/block/DAC960.c:6383:
+	  else
+	    strcpy(&CurrentStatusBuffer[Controller->CurrentStatusLength],

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: drivers/block/DAC960.c:6388:
+      Controller->LastCurrentStatusTime = jiffies;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: drivers/block/DAC960.c:6389:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: drivers/block/DAC960.c:6390:
+  BytesAvailable = Controller->CurrentStatusLength - Offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: drivers/block/DAC960.c:6391:
+  if (Count >= BytesAvailable)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#870: FILE: drivers/block/DAC960.c:6391:
+  if (Count >= BytesAvailable)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#870: FILE: drivers/block/DAC960.c:6391:
+  if (Count >= BytesAvailable)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: drivers/block/DAC960.c:6392:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/block/DAC960.c:6393:
+      Count = BytesAvailable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: drivers/block/DAC960.c:6394:
+      *EOF = true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: drivers/block/DAC960.c:6395:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: drivers/block/DAC960.c:6396:
+  if (Count <= 0) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#875: FILE: drivers/block/DAC960.c:6396:
+  if (Count <= 0) return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: drivers/block/DAC960.c:6397:
+  *Start = Page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: drivers/block/DAC960.c:6398:
+  memcpy(Page, &Controller->CurrentStatusBuffer[Offset], Count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: drivers/block/DAC960.c:6399:
+  return Count;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#881: FILE: drivers/block/DAC960.c:6402:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#883: FILE: drivers/block/DAC960.c:6404:
+/*
+  DAC960_ProcReadUserCommand implements reading /proc/rd/cN/user_command.

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcReadUserCommand>
#886: FILE: drivers/block/DAC960.c:6407:
+static int DAC960_ProcReadUserCommand(char *Page, char **Start, off_t Offset,

CHECK:SPACING: No space is necessary after a cast
#889: FILE: drivers/block/DAC960.c:6410:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: drivers/block/DAC960.c:6410:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: drivers/block/DAC960.c:6411:
+  int BytesAvailable = Controller->UserStatusLength - Offset;$

CHECK:CAMELCASE: Avoid CamelCase: <UserStatusLength>
#890: FILE: drivers/block/DAC960.c:6411:
+  int BytesAvailable = Controller->UserStatusLength - Offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#891: FILE: drivers/block/DAC960.c:6412:
+  int BytesAvailable = Controller->UserStatusLength - Offset;
+  if (Count >= BytesAvailable)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: drivers/block/DAC960.c:6412:
+  if (Count >= BytesAvailable)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#891: FILE: drivers/block/DAC960.c:6412:
+  if (Count >= BytesAvailable)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#891: FILE: drivers/block/DAC960.c:6412:
+  if (Count >= BytesAvailable)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: drivers/block/DAC960.c:6413:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: drivers/block/DAC960.c:6414:
+      Count = BytesAvailable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: drivers/block/DAC960.c:6415:
+      *EOF = true;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: drivers/block/DAC960.c:6416:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: drivers/block/DAC960.c:6417:
+  if (Count <= 0) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#896: FILE: drivers/block/DAC960.c:6417:
+  if (Count <= 0) return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: drivers/block/DAC960.c:6418:
+  *Start = Page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: drivers/block/DAC960.c:6419:
+  memcpy(Page, &Controller->UserStatusBuffer[Offset], Count);$

CHECK:CAMELCASE: Avoid CamelCase: <UserStatusBuffer>
#898: FILE: drivers/block/DAC960.c:6419:
+  memcpy(Page, &Controller->UserStatusBuffer[Offset], Count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: drivers/block/DAC960.c:6420:
+  return Count;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#902: FILE: drivers/block/DAC960.c:6423:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#904: FILE: drivers/block/DAC960.c:6425:
+/*
+  DAC960_ProcWriteUserCommand implements writing /proc/rd/cN/user_command.

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcWriteUserCommand>
#907: FILE: drivers/block/DAC960.c:6428:
+static int DAC960_ProcWriteUserCommand(struct file *file, const char *Buffer,

CHECK:SPACING: No space is necessary after a cast
#910: FILE: drivers/block/DAC960.c:6431:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: drivers/block/DAC960.c:6431:
+  DAC960_Controller_T *Controller = (DAC960_Controller_T *) Data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: drivers/block/DAC960.c:6432:
+  unsigned char CommandBuffer[80];$

CHECK:CAMELCASE: Avoid CamelCase: <CommandBuffer>
#911: FILE: drivers/block/DAC960.c:6432:
+  unsigned char CommandBuffer[80];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: drivers/block/DAC960.c:6433:
+  int Length;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: drivers/block/DAC960.c:6434:
+  int Length;
+  if (Count > sizeof(CommandBuffer)-1) return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: drivers/block/DAC960.c:6434:
+  if (Count > sizeof(CommandBuffer)-1) return -EINVAL;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#913: FILE: drivers/block/DAC960.c:6434:
+  if (Count > sizeof(CommandBuffer)-1) return -EINVAL;
                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#913: FILE: drivers/block/DAC960.c:6434:
+  if (Count > sizeof(CommandBuffer)-1) return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: drivers/block/DAC960.c:6435:
+  if (copy_from_user(CommandBuffer, Buffer, Count)) return -EFAULT;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#914: FILE: drivers/block/DAC960.c:6435:
+  if (copy_from_user(CommandBuffer, Buffer, Count)) return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: drivers/block/DAC960.c:6436:
+  CommandBuffer[Count] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: drivers/block/DAC960.c:6437:
+  Length = strlen(CommandBuffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: drivers/block/DAC960.c:6438:
+  if (CommandBuffer[Length-1] == '\n')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#917: FILE: drivers/block/DAC960.c:6438:
+  if (CommandBuffer[Length-1] == '\n')
+    CommandBuffer[--Length] = '\0';

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#917: FILE: drivers/block/DAC960.c:6438:
+  if (CommandBuffer[Length-1] == '\n')
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: drivers/block/DAC960.c:6439:
+    CommandBuffer[--Length] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: drivers/block/DAC960.c:6440:
+  if (Controller->FirmwareType == DAC960_V1_Controller)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#919: FILE: drivers/block/DAC960.c:6440:
+  if (Controller->FirmwareType == DAC960_V1_Controller)
+    return (DAC960_V1_ExecuteUserCommand(Controller, CommandBuffer)

CHECK:CAMELCASE: Avoid CamelCase: <FirmwareType>
#919: FILE: drivers/block/DAC960.c:6440:
+  if (Controller->FirmwareType == DAC960_V1_Controller)

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_Controller>
#919: FILE: drivers/block/DAC960.c:6440:
+  if (Controller->FirmwareType == DAC960_V1_Controller)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: drivers/block/DAC960.c:6441:
+    return (DAC960_V1_ExecuteUserCommand(Controller, CommandBuffer)$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_ExecuteUserCommand>
#920: FILE: drivers/block/DAC960.c:6441:
+    return (DAC960_V1_ExecuteUserCommand(Controller, CommandBuffer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: drivers/block/DAC960.c:6443:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#922: FILE: drivers/block/DAC960.c:6443:
+  else
+    return (DAC960_V2_ExecuteUserCommand(Controller, CommandBuffer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: drivers/block/DAC960.c:6444:
+    return (DAC960_V2_ExecuteUserCommand(Controller, CommandBuffer)$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_ExecuteUserCommand>
#923: FILE: drivers/block/DAC960.c:6444:
+    return (DAC960_V2_ExecuteUserCommand(Controller, CommandBuffer)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#927: FILE: drivers/block/DAC960.c:6448:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: drivers/block/DAC960.c:6450:
+/*
+  DAC960_CreateProcEntries creates the /proc/rd/... entries for the

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_CreateProcEntries>
#933: FILE: drivers/block/DAC960.c:6454:
+static void DAC960_CreateProcEntries(DAC960_Controller_T *Controller)

CHECK:CAMELCASE: Avoid CamelCase: <StatusProcEntry>
#935: FILE: drivers/block/DAC960.c:6456:
+	struct proc_dir_entry *StatusProcEntry;

CHECK:CAMELCASE: Avoid CamelCase: <ControllerProcEntry>
#936: FILE: drivers/block/DAC960.c:6457:
+	struct proc_dir_entry *ControllerProcEntry;

CHECK:CAMELCASE: Avoid CamelCase: <UserCommandProcEntry>
#937: FILE: drivers/block/DAC960.c:6458:
+	struct proc_dir_entry *UserCommandProcEntry;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcDirectoryEntry>
#939: FILE: drivers/block/DAC960.c:6460:
+	if (DAC960_ProcDirectoryEntry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DAC960_ProcDirectoryEntry"
#939: FILE: drivers/block/DAC960.c:6460:
+	if (DAC960_ProcDirectoryEntry == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: drivers/block/DAC960.c:6461:
+  ^I^IDAC960_ProcDirectoryEntry = proc_mkdir("rd", NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: drivers/block/DAC960.c:6461:
+  ^I^IDAC960_ProcDirectoryEntry = proc_mkdir("rd", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: drivers/block/DAC960.c:6461:
+  ^I^IDAC960_ProcDirectoryEntry = proc_mkdir("rd", NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: drivers/block/DAC960.c:6462:
+  ^I^IStatusProcEntry = create_proc_read_entry("status", 0,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: drivers/block/DAC960.c:6462:
+  ^I^IStatusProcEntry = create_proc_read_entry("status", 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: drivers/block/DAC960.c:6462:
+  ^I^IStatusProcEntry = create_proc_read_entry("status", 0,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: drivers/block/DAC960.c:6463:
+  		StatusProcEntry = create_proc_read_entry("status", 0,
+					   DAC960_ProcDirectoryEntry,

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ProcReadStatus>
#943: FILE: drivers/block/DAC960.c:6464:
+					   DAC960_ProcReadStatus, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: drivers/block/DAC960.c:6467:
+      sprintf(Controller->ControllerName, "c%d", Controller->ControllerNumber);$

CHECK:CAMELCASE: Avoid CamelCase: <ControllerName>
#946: FILE: drivers/block/DAC960.c:6467:
+      sprintf(Controller->ControllerName, "c%d", Controller->ControllerNumber);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: drivers/block/DAC960.c:6468:
+      ControllerProcEntry = proc_mkdir(Controller->ControllerName,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: drivers/block/DAC960.c:6470:
+      create_proc_read_entry("initial_status", 0, ControllerProcEntry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: drivers/block/DAC960.c:6472:
+      create_proc_read_entry("current_status", 0, ControllerProcEntry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: drivers/block/DAC960.c:6474:
+      UserCommandProcEntry =$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUSR' are not preferred. Consider using octal permissions '0600'.
#954: FILE: drivers/block/DAC960.c:6475:
+	create_proc_read_entry("user_command", S_IWUSR | S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: drivers/block/DAC960.c:6478:
+      UserCommandProcEntry->write_proc = DAC960_ProcWriteUserCommand;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: drivers/block/DAC960.c:6479:
+      Controller->ControllerProcEntry = ControllerProcEntry;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#961: FILE: drivers/block/DAC960.c:6482:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#963: FILE: drivers/block/DAC960.c:6484:
+/*
+  DAC960_DestroyProcEntries destroys the /proc/rd/... entries for the

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_DestroyProcEntries>
#967: FILE: drivers/block/DAC960.c:6488:
+static void DAC960_DestroyProcEntries(DAC960_Controller_T *Controller)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: drivers/block/DAC960.c:6490:
+      if (Controller->ControllerProcEntry == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 14)
#969: FILE: drivers/block/DAC960.c:6490:
+      if (Controller->ControllerProcEntry == NULL)
+	      return;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller->ControllerProcEntry"
#969: FILE: drivers/block/DAC960.c:6490:
+      if (Controller->ControllerProcEntry == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#970: FILE: drivers/block/DAC960.c:6491:
+	      return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: drivers/block/DAC960.c:6492:
+      remove_proc_entry("initial_status", Controller->ControllerProcEntry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: drivers/block/DAC960.c:6493:
+      remove_proc_entry("current_status", Controller->ControllerProcEntry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: drivers/block/DAC960.c:6494:
+      remove_proc_entry("user_command", Controller->ControllerProcEntry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: drivers/block/DAC960.c:6495:
+      remove_proc_entry(Controller->ControllerName, DAC960_ProcDirectoryEntry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: drivers/block/DAC960.c:6496:
+      Controller->ControllerProcEntry = NULL;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#982: FILE: drivers/block/DAC960.c:6503:
+ * DAC960_gam_ioctl is the ioctl function for performing RAID operations.
+*/

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#985: FILE: drivers/block/DAC960.c:6506:
+			    unsigned int Request, unsigned long Argument)

CHECK:CAMELCASE: Avoid CamelCase: <Argument>
#985: FILE: drivers/block/DAC960.c:6506:
+			    unsigned int Request, unsigned long Argument)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: drivers/block/DAC960.c:6508:
+  int ErrorCode = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <ErrorCode>
#987: FILE: drivers/block/DAC960.c:6508:
+  int ErrorCode = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#988: FILE: drivers/block/DAC960.c:6509:
+  int ErrorCode = 0;
+  if (!capable(CAP_SYS_ADMIN)) return -EACCES;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: drivers/block/DAC960.c:6509:
+  if (!capable(CAP_SYS_ADMIN)) return -EACCES;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#988: FILE: drivers/block/DAC960.c:6509:
+  if (!capable(CAP_SYS_ADMIN)) return -EACCES;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: drivers/block/DAC960.c:6510:
+  switch (Request)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#989: FILE: drivers/block/DAC960.c:6510:
+  switch (Request)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: drivers/block/DAC960.c:6511:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: drivers/block/DAC960.c:6512:
+    case DAC960_IOCTL_GET_CONTROLLER_COUNT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: drivers/block/DAC960.c:6513:
+      return DAC960_ControllerCount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: drivers/block/DAC960.c:6514:
+    case DAC960_IOCTL_GET_CONTROLLER_INFO:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: drivers/block/DAC960.c:6515:
+      {$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ControllerInfo_T>
#995: FILE: drivers/block/DAC960.c:6516:
+	DAC960_ControllerInfo_T *UserSpaceControllerInfo =

CHECK:CAMELCASE: Avoid CamelCase: <UserSpaceControllerInfo>
#995: FILE: drivers/block/DAC960.c:6516:
+	DAC960_ControllerInfo_T *UserSpaceControllerInfo =

CHECK:SPACING: No space is necessary after a cast
#996: FILE: drivers/block/DAC960.c:6517:
+	  (DAC960_ControllerInfo_T *) Argument;

CHECK:CAMELCASE: Avoid CamelCase: <ControllerInfo>
#997: FILE: drivers/block/DAC960.c:6518:
+	DAC960_ControllerInfo_T ControllerInfo;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: drivers/block/DAC960.c:6521:
+	int ControllerNumber;
+	if (UserSpaceControllerInfo == NULL) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1000: FILE: drivers/block/DAC960.c:6521:
+	if (UserSpaceControllerInfo == NULL) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UserSpaceControllerInfo"
#1000: FILE: drivers/block/DAC960.c:6521:
+	if (UserSpaceControllerInfo == NULL) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1003: FILE: drivers/block/DAC960.c:6524:
+	if (ErrorCode != 0) return ErrorCode;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1004: FILE: drivers/block/DAC960.c:6525:
+	if (ControllerNumber < 0 ||
[...]
+	  return -ENXIO;

WARNING:TABSTOP: Statements should start on a tabstop
#1006: FILE: drivers/block/DAC960.c:6527:
+	  return -ENXIO;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Controllers>
#1007: FILE: drivers/block/DAC960.c:6528:
+	Controller = DAC960_Controllers[ControllerNumber];

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1008: FILE: drivers/block/DAC960.c:6529:
+	if (Controller == NULL) return -ENXIO;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller"
#1008: FILE: drivers/block/DAC960.c:6529:
+	if (Controller == NULL) return -ENXIO;

CHECK:CAMELCASE: Avoid CamelCase: <Channels>
#1012: FILE: drivers/block/DAC960.c:6533:
+	ControllerInfo.Channels = Controller->Channels;

CHECK:CAMELCASE: Avoid CamelCase: <Targets>
#1013: FILE: drivers/block/DAC960.c:6534:
+	ControllerInfo.Targets = Controller->Targets;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_Bus>
#1014: FILE: drivers/block/DAC960.c:6535:
+	ControllerInfo.PCI_Bus = Controller->Bus;

CHECK:CAMELCASE: Avoid CamelCase: <Bus>
#1014: FILE: drivers/block/DAC960.c:6535:
+	ControllerInfo.PCI_Bus = Controller->Bus;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_Device>
#1015: FILE: drivers/block/DAC960.c:6536:
+	ControllerInfo.PCI_Device = Controller->Device;

CHECK:CAMELCASE: Avoid CamelCase: <Device>
#1015: FILE: drivers/block/DAC960.c:6536:
+	ControllerInfo.PCI_Device = Controller->Device;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_Function>
#1016: FILE: drivers/block/DAC960.c:6537:
+	ControllerInfo.PCI_Function = Controller->Function;

CHECK:CAMELCASE: Avoid CamelCase: <Function>
#1016: FILE: drivers/block/DAC960.c:6537:
+	ControllerInfo.PCI_Function = Controller->Function;

CHECK:CAMELCASE: Avoid CamelCase: <IRQ_Channel>
#1017: FILE: drivers/block/DAC960.c:6538:
+	ControllerInfo.IRQ_Channel = Controller->IRQ_Channel;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_Address>
#1018: FILE: drivers/block/DAC960.c:6539:
+	ControllerInfo.PCI_Address = Controller->PCI_Address;

CHECK:CAMELCASE: Avoid CamelCase: <ModelName>
#1019: FILE: drivers/block/DAC960.c:6540:
+	strcpy(ControllerInfo.ModelName, Controller->ModelName);

CHECK:CAMELCASE: Avoid CamelCase: <FirmwareVersion>
#1020: FILE: drivers/block/DAC960.c:6541:
+	strcpy(ControllerInfo.FirmwareVersion, Controller->FirmwareVersion);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: drivers/block/DAC960.c:6544:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: drivers/block/DAC960.c:6545:
+    case DAC960_IOCTL_V1_EXECUTE_COMMAND:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: drivers/block/DAC960.c:6546:
+      {$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_UserCommand_T>
#1026: FILE: drivers/block/DAC960.c:6547:
+	DAC960_V1_UserCommand_T *UserSpaceUserCommand =

CHECK:CAMELCASE: Avoid CamelCase: <UserSpaceUserCommand>
#1026: FILE: drivers/block/DAC960.c:6547:
+	DAC960_V1_UserCommand_T *UserSpaceUserCommand =

CHECK:SPACING: No space is necessary after a cast
#1027: FILE: drivers/block/DAC960.c:6548:
+	  (DAC960_V1_UserCommand_T *) Argument;

CHECK:CAMELCASE: Avoid CamelCase: <UserCommand>
#1028: FILE: drivers/block/DAC960.c:6549:
+	DAC960_V1_UserCommand_T UserCommand;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_Command_T>
#1030: FILE: drivers/block/DAC960.c:6551:
+	DAC960_Command_T *Command = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#1030: FILE: drivers/block/DAC960.c:6551:
+	DAC960_Command_T *Command = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_CommandOpcode_T>
#1031: FILE: drivers/block/DAC960.c:6552:
+	DAC960_V1_CommandOpcode_T CommandOpcode;

CHECK:CAMELCASE: Avoid CamelCase: <CommandOpcode>
#1031: FILE: drivers/block/DAC960.c:6552:
+	DAC960_V1_CommandOpcode_T CommandOpcode;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_CommandStatus_T>
#1032: FILE: drivers/block/DAC960.c:6553:
+	DAC960_V1_CommandStatus_T CommandStatus;

CHECK:CAMELCASE: Avoid CamelCase: <CommandStatus>
#1032: FILE: drivers/block/DAC960.c:6553:
+	DAC960_V1_CommandStatus_T CommandStatus;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferLength>
#1037: FILE: drivers/block/DAC960.c:6558:
+	int ControllerNumber, DataTransferLength;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferBuffer>
#1038: FILE: drivers/block/DAC960.c:6559:
+	unsigned char *DataTransferBuffer = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferBufferDMA>
#1039: FILE: drivers/block/DAC960.c:6560:
+	dma_addr_t DataTransferBufferDMA;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1040: FILE: drivers/block/DAC960.c:6561:
+	dma_addr_t DataTransferBufferDMA;
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1040: FILE: drivers/block/DAC960.c:6561:
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UserSpaceUserCommand"
#1040: FILE: drivers/block/DAC960.c:6561:
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: drivers/block/DAC960.c:6563:
+	if (copy_from_user(&UserCommand, UserSpaceUserCommand,
+				   sizeof(DAC960_V1_UserCommand_T))) {

CHECK:CAMELCASE: Avoid CamelCase: <Failure1a>
#1044: FILE: drivers/block/DAC960.c:6565:
+		goto Failure1a;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1047: FILE: drivers/block/DAC960.c:6568:
+	if (ControllerNumber < 0 ||
[...]
+	  return -ENXIO;

WARNING:TABSTOP: Statements should start on a tabstop
#1049: FILE: drivers/block/DAC960.c:6570:
+	  return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1051: FILE: drivers/block/DAC960.c:6572:
+	if (Controller == NULL) return -ENXIO;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller"
#1051: FILE: drivers/block/DAC960.c:6572:
+	if (Controller == NULL) return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1052: FILE: drivers/block/DAC960.c:6573:
+	if (Controller->FirmwareType != DAC960_V1_Controller) return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <CommandMailbox>
#1053: FILE: drivers/block/DAC960.c:6574:
+	CommandOpcode = UserCommand.CommandMailbox.Common.CommandOpcode;

CHECK:CAMELCASE: Avoid CamelCase: <Common>
#1053: FILE: drivers/block/DAC960.c:6574:
+	CommandOpcode = UserCommand.CommandMailbox.Common.CommandOpcode;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1055: FILE: drivers/block/DAC960.c:6576:
+	if (CommandOpcode & 0x80) return -EINVAL;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1056: FILE: drivers/block/DAC960.c:6577:
+	if (CommandOpcode == DAC960_V1_DCDB)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1056: FILE: drivers/block/DAC960.c:6577:
+	if (CommandOpcode == DAC960_V1_DCDB)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1057: FILE: drivers/block/DAC960.c:6578:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1058: FILE: drivers/block/DAC960.c:6579:
+	    if (copy_from_user(&DCDB, UserCommand.DCDB,

WARNING:TABSTOP: Statements should start on a tabstop
#1062: FILE: drivers/block/DAC960.c:6583:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1063: FILE: drivers/block/DAC960.c:6584:
+	    if (DCDB.Channel >= DAC960_V1_MaxChannels) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1063: FILE: drivers/block/DAC960.c:6584:
+	    if (DCDB.Channel >= DAC960_V1_MaxChannels) return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <Channel>
#1063: FILE: drivers/block/DAC960.c:6584:
+	    if (DCDB.Channel >= DAC960_V1_MaxChannels) return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_MaxChannels>
#1063: FILE: drivers/block/DAC960.c:6584:
+	    if (DCDB.Channel >= DAC960_V1_MaxChannels) return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#1064: FILE: drivers/block/DAC960.c:6585:
+	    if (!((DataTransferLength == 0 &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1064: FILE: drivers/block/DAC960.c:6585:
+	    if (!((DataTransferLength == 0 &&
[...]
+	      return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <Direction>
#1065: FILE: drivers/block/DAC960.c:6586:
+		   DCDB.Direction

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_DCDB_NoDataTransfer>
#1066: FILE: drivers/block/DAC960.c:6587:
+		   == DAC960_V1_DCDB_NoDataTransfer) ||

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_DCDB_DataTransferDeviceToSystem>
#1069: FILE: drivers/block/DAC960.c:6590:
+		   == DAC960_V1_DCDB_DataTransferDeviceToSystem) ||

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_DCDB_DataTransferSystemToDevice>
#1072: FILE: drivers/block/DAC960.c:6593:
+		   == DAC960_V1_DCDB_DataTransferSystemToDevice)))

WARNING:TABSTOP: Statements should start on a tabstop
#1073: FILE: drivers/block/DAC960.c:6594:
+	      return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#1074: FILE: drivers/block/DAC960.c:6595:
+	    if (((DCDB.TransferLengthHigh4 << 16) | DCDB.TransferLength)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1074: FILE: drivers/block/DAC960.c:6595:
+	    if (((DCDB.TransferLengthHigh4 << 16) | DCDB.TransferLength)
[...]
+	      return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <TransferLengthHigh4>
#1074: FILE: drivers/block/DAC960.c:6595:
+	    if (((DCDB.TransferLengthHigh4 << 16) | DCDB.TransferLength)

CHECK:CAMELCASE: Avoid CamelCase: <TransferLength>
#1074: FILE: drivers/block/DAC960.c:6595:
+	    if (((DCDB.TransferLengthHigh4 << 16) | DCDB.TransferLength)

WARNING:TABSTOP: Statements should start on a tabstop
#1076: FILE: drivers/block/DAC960.c:6597:
+	      return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <PCIDevice>
#1077: FILE: drivers/block/DAC960.c:6598:
+	    DCDB_IOBUF = pci_alloc_consistent(Controller->PCIDevice,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: drivers/block/DAC960.c:6599:
+	    DCDB_IOBUF = pci_alloc_consistent(Controller->PCIDevice,
+			sizeof(DAC960_V1_DCDB_T), &DCDB_IOBUFDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1079: FILE: drivers/block/DAC960.c:6600:
+	    if (DCDB_IOBUF == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 24)
#1079: FILE: drivers/block/DAC960.c:6600:
+	    if (DCDB_IOBUF == NULL)
+			return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DCDB_IOBUF"
#1079: FILE: drivers/block/DAC960.c:6600:
+	    if (DCDB_IOBUF == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#1081: FILE: drivers/block/DAC960.c:6602:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1082: FILE: drivers/block/DAC960.c:6603:
+	if (DataTransferLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1082: FILE: drivers/block/DAC960.c:6603:
+	if (DataTransferLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1083: FILE: drivers/block/DAC960.c:6604:
+	  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1085: FILE: drivers/block/DAC960.c:6606:
+	    DataTransferBuffer = pci_alloc_consistent(Controller->PCIDevice,
+				DataTransferLength, &DataTransferBufferDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1086: FILE: drivers/block/DAC960.c:6607:
+	    if (DataTransferBuffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DataTransferBuffer"
#1086: FILE: drivers/block/DAC960.c:6607:
+	    if (DataTransferBuffer == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <Failure1>
#1088: FILE: drivers/block/DAC960.c:6609:
+		goto Failure1;

WARNING:TABSTOP: Statements should start on a tabstop
#1089: FILE: drivers/block/DAC960.c:6610:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1091: FILE: drivers/block/DAC960.c:6612:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1092: FILE: drivers/block/DAC960.c:6613:
+	else if (DataTransferLength < 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1092: FILE: drivers/block/DAC960.c:6613:
+	else if (DataTransferLength < 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1093: FILE: drivers/block/DAC960.c:6614:
+	  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: drivers/block/DAC960.c:6616:
+	    DataTransferBuffer = pci_alloc_consistent(Controller->PCIDevice,
+				-DataTransferLength, &DataTransferBufferDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1096: FILE: drivers/block/DAC960.c:6617:
+	    if (DataTransferBuffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DataTransferBuffer"
#1096: FILE: drivers/block/DAC960.c:6617:
+	    if (DataTransferBuffer == NULL) {

WARNING:TABSTOP: Statements should start on a tabstop
#1099: FILE: drivers/block/DAC960.c:6620:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1100: FILE: drivers/block/DAC960.c:6621:
+	    if (copy_from_user(DataTransferBuffer,

WARNING:TABSTOP: Statements should start on a tabstop
#1105: FILE: drivers/block/DAC960.c:6626:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1106: FILE: drivers/block/DAC960.c:6627:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1107: FILE: drivers/block/DAC960.c:6628:
+	if (CommandOpcode == DAC960_V1_DCDB)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1107: FILE: drivers/block/DAC960.c:6628:
+	if (CommandOpcode == DAC960_V1_DCDB)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1108: FILE: drivers/block/DAC960.c:6629:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1110: FILE: drivers/block/DAC960.c:6631:
+	    while ((Command = DAC960_AllocateCommand(Controller)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1110: FILE: drivers/block/DAC960.c:6631:
+	    while ((Command = DAC960_AllocateCommand(Controller)) == NULL)
+	      DAC960_WaitForCommand(Controller);

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_AllocateCommand>
#1110: FILE: drivers/block/DAC960.c:6631:
+	    while ((Command = DAC960_AllocateCommand(Controller)) == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_WaitForCommand>
#1111: FILE: drivers/block/DAC960.c:6632:
+	      DAC960_WaitForCommand(Controller);

WARNING:TABSTOP: Statements should start on a tabstop
#1112: FILE: drivers/block/DAC960.c:6633:
+	    while (Controller->V1.DirectCommandActive[DCDB.Channel]

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1112: FILE: drivers/block/DAC960.c:6633:
+	    while (Controller->V1.DirectCommandActive[DCDB.Channel]
+						     [DCDB.TargetID])
+	      {

CHECK:CAMELCASE: Avoid CamelCase: <DirectCommandActive>
#1112: FILE: drivers/block/DAC960.c:6633:
+	    while (Controller->V1.DirectCommandActive[DCDB.Channel]

CHECK:CAMELCASE: Avoid CamelCase: <TargetID>
#1113: FILE: drivers/block/DAC960.c:6634:
+						     [DCDB.TargetID])

WARNING:TABSTOP: Statements should start on a tabstop
#1114: FILE: drivers/block/DAC960.c:6635:
+	      {

CHECK:CAMELCASE: Avoid CamelCase: <CommandWaitQueue>
#1116: FILE: drivers/block/DAC960.c:6637:
+		__wait_event(Controller->CommandWaitQueue,

WARNING:TABSTOP: Statements should start on a tabstop
#1120: FILE: drivers/block/DAC960.c:6641:
+	      }

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_ClearCommand>
#1124: FILE: drivers/block/DAC960.c:6645:
+	    DAC960_V1_ClearCommand(Command);

CHECK:CAMELCASE: Avoid CamelCase: <CommandType>
#1125: FILE: drivers/block/DAC960.c:6646:
+	    Command->CommandType = DAC960_ImmediateCommand;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ImmediateCommand>
#1125: FILE: drivers/block/DAC960.c:6646:
+	    Command->CommandType = DAC960_ImmediateCommand;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V1_CommandMailbox_T>
#1127: FILE: drivers/block/DAC960.c:6648:
+		   sizeof(DAC960_V1_CommandMailbox_T));

CHECK:CAMELCASE: Avoid CamelCase: <Type3>
#1128: FILE: drivers/block/DAC960.c:6649:
+	    Command->V1.CommandMailbox.Type3.BusAddress = DCDB_IOBUFDMA;

CHECK:CAMELCASE: Avoid CamelCase: <BusAddress>
#1128: FILE: drivers/block/DAC960.c:6649:
+	    Command->V1.CommandMailbox.Type3.BusAddress = DCDB_IOBUFDMA;

WARNING:TABSTOP: Statements should start on a tabstop
#1131: FILE: drivers/block/DAC960.c:6652:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1132: FILE: drivers/block/DAC960.c:6653:
+	else
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1132: FILE: drivers/block/DAC960.c:6653:
+	else
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1133: FILE: drivers/block/DAC960.c:6654:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1135: FILE: drivers/block/DAC960.c:6656:
+	    while ((Command = DAC960_AllocateCommand(Controller)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1135: FILE: drivers/block/DAC960.c:6656:
+	    while ((Command = DAC960_AllocateCommand(Controller)) == NULL)
+	      DAC960_WaitForCommand(Controller);

WARNING:TABSTOP: Statements should start on a tabstop
#1142: FILE: drivers/block/DAC960.c:6663:
+	    if (DataTransferBuffer != NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1142: FILE: drivers/block/DAC960.c:6663:
+	    if (DataTransferBuffer != NULL)
+	      Command->V1.CommandMailbox.Type3.BusAddress =

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "DataTransferBuffer"
#1142: FILE: drivers/block/DAC960.c:6663:
+	    if (DataTransferBuffer != NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#1145: FILE: drivers/block/DAC960.c:6666:
+	  }

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_ExecuteCommand>
#1146: FILE: drivers/block/DAC960.c:6667:
+	DAC960_ExecuteCommand(Command);

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_DeallocateCommand>
#1149: FILE: drivers/block/DAC960.c:6670:
+	DAC960_DeallocateCommand(Command);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1151: FILE: drivers/block/DAC960.c:6672:
+	if (DataTransferLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1151: FILE: drivers/block/DAC960.c:6672:
+	if (DataTransferLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1152: FILE: drivers/block/DAC960.c:6673:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1153: FILE: drivers/block/DAC960.c:6674:
+	    if (copy_to_user(UserCommand.DataTransferBuffer,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1157: FILE: drivers/block/DAC960.c:6678:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1157: FILE: drivers/block/DAC960.c:6678:
+            }$

WARNING:TABSTOP: Statements should start on a tabstop
#1158: FILE: drivers/block/DAC960.c:6679:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1159: FILE: drivers/block/DAC960.c:6680:
+	if (CommandOpcode == DAC960_V1_DCDB)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1159: FILE: drivers/block/DAC960.c:6680:
+	if (CommandOpcode == DAC960_V1_DCDB)
[...]
+	     */

WARNING:TABSTOP: Statements should start on a tabstop
#1160: FILE: drivers/block/DAC960.c:6681:
+	  {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1162: FILE: drivers/block/DAC960.c:6683:
+	    /*
+	      I don't believe Target or Channel in the DCDB_IOBUF

WARNING:TABSTOP: Statements should start on a tabstop
#1167: FILE: drivers/block/DAC960.c:6688:
+	    if (copy_to_user(UserCommand.DCDB, DCDB_IOBUF,

WARNING:TABSTOP: Statements should start on a tabstop
#1171: FILE: drivers/block/DAC960.c:6692:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1172: FILE: drivers/block/DAC960.c:6693:
+	  }

WARNING:INDENTED_LABEL: labels should not be indented
#1174: FILE: drivers/block/DAC960.c:6695:
+      Failure1:

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1175: FILE: drivers/block/DAC960.c:6696:
+	if (DataTransferBuffer != NULL)
+	  pci_free_consistent(Controller->PCIDevice, abs(DataTransferLength),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "DataTransferBuffer"
#1175: FILE: drivers/block/DAC960.c:6696:
+	if (DataTransferBuffer != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: drivers/block/DAC960.c:6698:
+	  pci_free_consistent(Controller->PCIDevice, abs(DataTransferLength),
+			DataTransferBuffer, DataTransferBufferDMA);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1178: FILE: drivers/block/DAC960.c:6699:
+	if (DCDB_IOBUF != NULL)
+	  pci_free_consistent(Controller->PCIDevice, sizeof(DAC960_V1_DCDB_T),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "DCDB_IOBUF"
#1178: FILE: drivers/block/DAC960.c:6699:
+	if (DCDB_IOBUF != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: drivers/block/DAC960.c:6701:
+	  pci_free_consistent(Controller->PCIDevice, sizeof(DAC960_V1_DCDB_T),
+			DCDB_IOBUF, DCDB_IOBUFDMA);

WARNING:INDENTED_LABEL: labels should not be indented
#1181: FILE: drivers/block/DAC960.c:6702:
+      Failure1a:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: drivers/block/DAC960.c:6704:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: drivers/block/DAC960.c:6705:
+    case DAC960_IOCTL_V2_EXECUTE_COMMAND:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: drivers/block/DAC960.c:6706:
+      {$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_UserCommand_T>
#1186: FILE: drivers/block/DAC960.c:6707:
+	DAC960_V2_UserCommand_T *UserSpaceUserCommand =

CHECK:SPACING: No space is necessary after a cast
#1187: FILE: drivers/block/DAC960.c:6708:
+	  (DAC960_V2_UserCommand_T *) Argument;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_CommandMailbox_T>
#1191: FILE: drivers/block/DAC960.c:6712:
+	DAC960_V2_CommandMailbox_T *CommandMailbox;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_CommandStatus_T>
#1192: FILE: drivers/block/DAC960.c:6713:
+	DAC960_V2_CommandStatus_T CommandStatus;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferResidue>
#1195: FILE: drivers/block/DAC960.c:6716:
+	int DataTransferResidue, RequestSenseLength;

CHECK:CAMELCASE: Avoid CamelCase: <RequestSenseLength>
#1195: FILE: drivers/block/DAC960.c:6716:
+	int DataTransferResidue, RequestSenseLength;

CHECK:CAMELCASE: Avoid CamelCase: <RequestSenseBuffer>
#1198: FILE: drivers/block/DAC960.c:6719:
+	unsigned char *RequestSenseBuffer = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <RequestSenseBufferDMA>
#1199: FILE: drivers/block/DAC960.c:6720:
+	dma_addr_t RequestSenseBufferDMA;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1200: FILE: drivers/block/DAC960.c:6721:
+	dma_addr_t RequestSenseBufferDMA;
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1200: FILE: drivers/block/DAC960.c:6721:
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UserSpaceUserCommand"
#1200: FILE: drivers/block/DAC960.c:6721:
+	if (UserSpaceUserCommand == NULL) return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <Failure2a>
#1204: FILE: drivers/block/DAC960.c:6725:
+		goto Failure2a;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1207: FILE: drivers/block/DAC960.c:6728:
+	if (ControllerNumber < 0 ||
[...]
+	  return -ENXIO;

WARNING:TABSTOP: Statements should start on a tabstop
#1209: FILE: drivers/block/DAC960.c:6730:
+	  return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1211: FILE: drivers/block/DAC960.c:6732:
+	if (Controller == NULL) return -ENXIO;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller"
#1211: FILE: drivers/block/DAC960.c:6732:
+	if (Controller == NULL) return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1212: FILE: drivers/block/DAC960.c:6733:
+	if (Controller->FirmwareType != DAC960_V2_Controller) return -EINVAL;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_Controller>
#1212: FILE: drivers/block/DAC960.c:6733:
+	if (Controller->FirmwareType != DAC960_V2_Controller) return -EINVAL;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1214: FILE: drivers/block/DAC960.c:6735:
+	if (DataTransferLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1214: FILE: drivers/block/DAC960.c:6735:
+	if (DataTransferLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1215: FILE: drivers/block/DAC960.c:6736:
+	  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: drivers/block/DAC960.c:6738:
+	    DataTransferBuffer = pci_alloc_consistent(Controller->PCIDevice,
+				DataTransferLength, &DataTransferBufferDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1218: FILE: drivers/block/DAC960.c:6739:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1218: FILE: drivers/block/DAC960.c:6739:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DataTransferBuffer"
#1218: FILE: drivers/block/DAC960.c:6739:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#1220: FILE: drivers/block/DAC960.c:6741:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1221: FILE: drivers/block/DAC960.c:6742:
+	else if (DataTransferLength < 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1221: FILE: drivers/block/DAC960.c:6742:
+	else if (DataTransferLength < 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1222: FILE: drivers/block/DAC960.c:6743:
+	  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1224: FILE: drivers/block/DAC960.c:6745:
+	    DataTransferBuffer = pci_alloc_consistent(Controller->PCIDevice,
+				-DataTransferLength, &DataTransferBufferDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1225: FILE: drivers/block/DAC960.c:6746:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1225: FILE: drivers/block/DAC960.c:6746:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!DataTransferBuffer"
#1225: FILE: drivers/block/DAC960.c:6746:
+	    if (DataTransferBuffer == NULL) return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#1226: FILE: drivers/block/DAC960.c:6747:
+	    if (copy_from_user(DataTransferBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <Failure2>
#1230: FILE: drivers/block/DAC960.c:6751:
+		goto Failure2;

WARNING:TABSTOP: Statements should start on a tabstop
#1231: FILE: drivers/block/DAC960.c:6752:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1232: FILE: drivers/block/DAC960.c:6753:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1234: FILE: drivers/block/DAC960.c:6755:
+	if (RequestSenseLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1234: FILE: drivers/block/DAC960.c:6755:
+	if (RequestSenseLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1235: FILE: drivers/block/DAC960.c:6756:
+	  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: drivers/block/DAC960.c:6758:
+	    RequestSenseBuffer = pci_alloc_consistent(Controller->PCIDevice,
+			RequestSenseLength, &RequestSenseBufferDMA);

WARNING:TABSTOP: Statements should start on a tabstop
#1238: FILE: drivers/block/DAC960.c:6759:
+	    if (RequestSenseBuffer == NULL)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1238: FILE: drivers/block/DAC960.c:6759:
+	    if (RequestSenseBuffer == NULL)
+	      {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!RequestSenseBuffer"
#1238: FILE: drivers/block/DAC960.c:6759:
+	    if (RequestSenseBuffer == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#1239: FILE: drivers/block/DAC960.c:6760:
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1242: FILE: drivers/block/DAC960.c:6763:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#1244: FILE: drivers/block/DAC960.c:6765:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1246: FILE: drivers/block/DAC960.c:6767:
+	while ((Command = DAC960_AllocateCommand(Controller)) == NULL)
+	  DAC960_WaitForCommand(Controller);

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_ClearCommand>
#1249: FILE: drivers/block/DAC960.c:6770:
+	DAC960_V2_ClearCommand(Command);

CHECK:CAMELCASE: Avoid CamelCase: <CommandControlBits>
#1254: FILE: drivers/block/DAC960.c:6775:
+	CommandMailbox->Common.CommandControlBits

CHECK:CAMELCASE: Avoid CamelCase: <AdditionalScatterGatherListMemory>
#1255: FILE: drivers/block/DAC960.c:6776:
+			      .AdditionalScatterGatherListMemory = false;

CHECK:CAMELCASE: Avoid CamelCase: <NoAutoRequestSense>
#1257: FILE: drivers/block/DAC960.c:6778:
+			      .NoAutoRequestSense = true;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferSize>
#1258: FILE: drivers/block/DAC960.c:6779:
+	CommandMailbox->Common.DataTransferSize = 0;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferPageNumber>
#1259: FILE: drivers/block/DAC960.c:6780:
+	CommandMailbox->Common.DataTransferPageNumber = 0;

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferMemoryAddress>
#1260: FILE: drivers/block/DAC960.c:6781:
+	memset(&CommandMailbox->Common.DataTransferMemoryAddress, 0,

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_DataTransferMemoryAddress_T>
#1261: FILE: drivers/block/DAC960.c:6782:
+	       sizeof(DAC960_V2_DataTransferMemoryAddress_T));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1262: FILE: drivers/block/DAC960.c:6783:
+	if (DataTransferLength != 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1262: FILE: drivers/block/DAC960.c:6783:
+	if (DataTransferLength != 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1263: FILE: drivers/block/DAC960.c:6784:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1264: FILE: drivers/block/DAC960.c:6785:
+	    if (DataTransferLength > 0)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1264: FILE: drivers/block/DAC960.c:6785:
+	    if (DataTransferLength > 0)
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1265: FILE: drivers/block/DAC960.c:6786:
+	      {

CHECK:CAMELCASE: Avoid CamelCase: <DataTransferControllerToHost>
#1267: FILE: drivers/block/DAC960.c:6788:
+				      .DataTransferControllerToHost = true;

WARNING:TABSTOP: Statements should start on a tabstop
#1269: FILE: drivers/block/DAC960.c:6790:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#1270: FILE: drivers/block/DAC960.c:6791:
+	    else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1270: FILE: drivers/block/DAC960.c:6791:
+	    else
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1271: FILE: drivers/block/DAC960.c:6792:
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1275: FILE: drivers/block/DAC960.c:6796:
+	      }

CHECK:CAMELCASE: Avoid CamelCase: <ScatterGatherSegments>
#1277: FILE: drivers/block/DAC960.c:6798:
+				  .ScatterGatherSegments[0]

CHECK:CAMELCASE: Avoid CamelCase: <SegmentDataPointer>
#1278: FILE: drivers/block/DAC960.c:6799:
+				  .SegmentDataPointer = DataTransferBufferDMA;

CHECK:CAMELCASE: Avoid CamelCase: <SegmentByteCount>
#1281: FILE: drivers/block/DAC960.c:6802:
+				  .SegmentByteCount =

WARNING:TABSTOP: Statements should start on a tabstop
#1283: FILE: drivers/block/DAC960.c:6804:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1284: FILE: drivers/block/DAC960.c:6805:
+	if (RequestSenseLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1284: FILE: drivers/block/DAC960.c:6805:
+	if (RequestSenseLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1285: FILE: drivers/block/DAC960.c:6806:
+	  {

CHECK:CAMELCASE: Avoid CamelCase: <RequestSenseSize>
#1288: FILE: drivers/block/DAC960.c:6809:
+	    CommandMailbox->Common.RequestSenseSize = RequestSenseLength;

CHECK:CAMELCASE: Avoid CamelCase: <RequestSenseBusAddress>
#1289: FILE: drivers/block/DAC960.c:6810:
+	    CommandMailbox->Common.RequestSenseBusAddress =

ERROR:CODE_INDENT: code indent should use tabs where possible
#1290: FILE: drivers/block/DAC960.c:6811:
+^I      ^I^I^I^I^I^IRequestSenseBufferDMA;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1290: FILE: drivers/block/DAC960.c:6811:
+^I      ^I^I^I^I^I^IRequestSenseBufferDMA;$

WARNING:TABSTOP: Statements should start on a tabstop
#1291: FILE: drivers/block/DAC960.c:6812:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1299: FILE: drivers/block/DAC960.c:6820:
+	if (RequestSenseLength > UserCommand.RequestSenseLength)
+	  RequestSenseLength = UserCommand.RequestSenseLength;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1302: FILE: drivers/block/DAC960.c:6823:
+	if (copy_to_user(&UserSpaceUserCommand->DataTransferLength,
+				 &DataTransferResidue,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1319: FILE: drivers/block/DAC960.c:6833:
+	if (DataTransferLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1319: FILE: drivers/block/DAC960.c:6833:
+	if (DataTransferLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1320: FILE: drivers/block/DAC960.c:6834:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1321: FILE: drivers/block/DAC960.c:6835:
+	    if (copy_to_user(UserCommand.DataTransferBuffer,

WARNING:TABSTOP: Statements should start on a tabstop
#1325: FILE: drivers/block/DAC960.c:6839:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1326: FILE: drivers/block/DAC960.c:6840:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1327: FILE: drivers/block/DAC960.c:6841:
+	if (RequestSenseLength > 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1327: FILE: drivers/block/DAC960.c:6841:
+	if (RequestSenseLength > 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1328: FILE: drivers/block/DAC960.c:6842:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1329: FILE: drivers/block/DAC960.c:6843:
+	    if (copy_to_user(UserCommand.RequestSenseBuffer,

WARNING:TABSTOP: Statements should start on a tabstop
#1333: FILE: drivers/block/DAC960.c:6847:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1334: FILE: drivers/block/DAC960.c:6848:
+	  }

WARNING:INDENTED_LABEL: labels should not be indented
#1336: FILE: drivers/block/DAC960.c:6850:
+      Failure2:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/block/DAC960.c:6852:
+	  pci_free_consistent(Controller->PCIDevice, abs(DataTransferLength),
+		DataTransferBuffer, DataTransferBufferDMA);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1339: FILE: drivers/block/DAC960.c:6853:
+	if (RequestSenseBuffer != NULL)
+	  pci_free_consistent(Controller->PCIDevice, RequestSenseLength,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "RequestSenseBuffer"
#1339: FILE: drivers/block/DAC960.c:6853:
+	if (RequestSenseBuffer != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1341: FILE: drivers/block/DAC960.c:6855:
+	  pci_free_consistent(Controller->PCIDevice, RequestSenseLength,
+		RequestSenseBuffer, RequestSenseBufferDMA);

WARNING:INDENTED_LABEL: labels should not be indented
#1342: FILE: drivers/block/DAC960.c:6856:
+      Failure2a:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: drivers/block/DAC960.c:6858:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: drivers/block/DAC960.c:6859:
+    case DAC960_IOCTL_V2_GET_HEALTH_STATUS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1346: FILE: drivers/block/DAC960.c:6860:
+      {$

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_GetHealthStatus_T>
#1347: FILE: drivers/block/DAC960.c:6861:
+	DAC960_V2_GetHealthStatus_T *UserSpaceGetHealthStatus =

CHECK:CAMELCASE: Avoid CamelCase: <UserSpaceGetHealthStatus>
#1347: FILE: drivers/block/DAC960.c:6861:
+	DAC960_V2_GetHealthStatus_T *UserSpaceGetHealthStatus =

CHECK:SPACING: No space is necessary after a cast
#1348: FILE: drivers/block/DAC960.c:6862:
+	  (DAC960_V2_GetHealthStatus_T *) Argument;

CHECK:CAMELCASE: Avoid CamelCase: <GetHealthStatus>
#1349: FILE: drivers/block/DAC960.c:6863:
+	DAC960_V2_GetHealthStatus_T GetHealthStatus;

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_HealthStatusBuffer_T>
#1350: FILE: drivers/block/DAC960.c:6864:
+	DAC960_V2_HealthStatusBuffer_T HealthStatusBuffer;

CHECK:CAMELCASE: Avoid CamelCase: <HealthStatusBuffer>
#1350: FILE: drivers/block/DAC960.c:6864:
+	DAC960_V2_HealthStatusBuffer_T HealthStatusBuffer;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1353: FILE: drivers/block/DAC960.c:6867:
+	int ControllerNumber;
+	if (UserSpaceGetHealthStatus == NULL) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1353: FILE: drivers/block/DAC960.c:6867:
+	if (UserSpaceGetHealthStatus == NULL) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UserSpaceGetHealthStatus"
#1353: FILE: drivers/block/DAC960.c:6867:
+	if (UserSpaceGetHealthStatus == NULL) return -EINVAL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1358: FILE: drivers/block/DAC960.c:6872:
+	if (ControllerNumber < 0 ||
[...]
+	  return -ENXIO;

WARNING:TABSTOP: Statements should start on a tabstop
#1360: FILE: drivers/block/DAC960.c:6874:
+	  return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1362: FILE: drivers/block/DAC960.c:6876:
+	if (Controller == NULL) return -ENXIO;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Controller"
#1362: FILE: drivers/block/DAC960.c:6876:
+	if (Controller == NULL) return -ENXIO;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1363: FILE: drivers/block/DAC960.c:6877:
+	if (Controller->FirmwareType != DAC960_V2_Controller) return -EINVAL;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1368: FILE: drivers/block/DAC960.c:6882:
+	while (Controller->V2.HealthStatusBuffer->StatusChangeCounter
+	       == HealthStatusBuffer.StatusChangeCounter &&
+	       Controller->V2.HealthStatusBuffer->NextEventSequenceNumber
+	       == HealthStatusBuffer.NextEventSequenceNumber)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1368: FILE: drivers/block/DAC960.c:6882:
+	while (Controller->V2.HealthStatusBuffer->StatusChangeCounter
[...]
+	  {

CHECK:CAMELCASE: Avoid CamelCase: <StatusChangeCounter>
#1368: FILE: drivers/block/DAC960.c:6882:
+	while (Controller->V2.HealthStatusBuffer->StatusChangeCounter

CHECK:CAMELCASE: Avoid CamelCase: <NextEventSequenceNumber>
#1370: FILE: drivers/block/DAC960.c:6884:
+	       Controller->V2.HealthStatusBuffer->NextEventSequenceNumber

WARNING:TABSTOP: Statements should start on a tabstop
#1372: FILE: drivers/block/DAC960.c:6886:
+	  {

CHECK:CAMELCASE: Avoid CamelCase: <HealthStatusWaitQueue>
#1373: FILE: drivers/block/DAC960.c:6887:
+	    interruptible_sleep_on_timeout(&Controller->HealthStatusWaitQueue,

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_MonitoringTimerInterval>
#1374: FILE: drivers/block/DAC960.c:6888:
+					   DAC960_MonitoringTimerInterval);

WARNING:TABSTOP: Statements should start on a tabstop
#1375: FILE: drivers/block/DAC960.c:6889:
+	    if (signal_pending(current)) return -EINTR;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1375: FILE: drivers/block/DAC960.c:6889:
+	    if (signal_pending(current)) return -EINTR;

WARNING:TABSTOP: Statements should start on a tabstop
#1376: FILE: drivers/block/DAC960.c:6890:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: drivers/block/DAC960.c:6896:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: drivers/block/DAC960.c:6898:
+  return -EINVAL;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1391: FILE: drivers/block/DAC960.c:6901:
+static struct file_operations DAC960_gam_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1448: FILE: drivers/block/DAC960.c:6918:
+		printk(KERN_ERR "DAC960_gam: can't misc_register on minor %d\n", DAC960_GAM_MINOR);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000344129.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 69 errors, 349 warnings, 211 checks, 1482 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000344129.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
