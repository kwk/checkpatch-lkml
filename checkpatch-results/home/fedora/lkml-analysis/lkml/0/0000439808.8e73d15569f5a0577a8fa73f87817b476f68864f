WARNING:REPEATED_WORD: Possible repeated word: 'that'
#39: 
I think the only thing that that might be useful for would be

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#40: 
eliminating disk partitions, and and that is something that I'd

WARNING:TYPO_SPELLING: 'Elminated' may be misspelled - perhaps 'Eliminated'?
#66: 
	5. Elminated a bug that caused the loop device to try
	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Accomodate' may be misspelled - perhaps 'Accommodate'?
#102: 
        1. Accomodate bio_copy failures by reserving one page (or
           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: include/linux/loop.h:32:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#166: FILE: include/linux/loop.h:33:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative 
+				512 byte sectors */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#166: FILE: include/linux/loop.h:33:
+				512 byte sectors */

CHECK:BIT_MACRO: Prefer using the BIT macro
#168: FILE: include/linux/loop.h:35:
+#define LO_IV_SECTOR_SIZE (1 << LO_IV_SECTOR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#268: FILE: drivers/block/loop.c:118:
+	sector += lo->lo_sector_offset; /* FIXME.  Make IV independent of
+					   location of the loop device. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#268: FILE: drivers/block/loop.c:118:
+					   location of the loop device. */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#269: FILE: drivers/block/loop.c:119:
+	switch (lo->lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
[...]
+		default:
[...]
+		case LO_IV_MODE_DEFAULT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#275: FILE: drivers/block/loop.c:125:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#275: FILE: drivers/block/loop.c:125:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#278: FILE: drivers/block/loop.c:128:
+			IV = sector / ((unsigned long) (bs >> 9));

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#279: FILE: drivers/block/loop.c:129:
+			offset = ((unsigned long) (((sector % (bs >> 9)) << 9) + lo->lo_offset)) % bs;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#279: FILE: drivers/block/loop.c:129:
+			offset = ((unsigned long) (((sector % (bs >> 9)) << 9) + lo->lo_offset)) % bs;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#385: FILE: drivers/block/loop.c:224:
+	return (compute_loop_size(lo) + (SECTOR_SIZE-1) - lo->lo_offset) >> 9;
 	                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: drivers/block/loop.c:245:
+	unsigned size, offset, this_size, end;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#417: FILE: drivers/block/loop.c:258:
+	/* pos is not necessarily page aligned.  So, we loop, in
+	   case the transfer writes to two pages. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#417: FILE: drivers/block/loop.c:258:
+	   case the transfer writes to two pages. */

ERROR:SPACING: space required before the open parenthesis '('
#418: FILE: drivers/block/loop.c:259:
+	for(;;) {

CHECK:SPACING: No space is necessary after a cast
#419: FILE: drivers/block/loop.c:260:
+		end = min(offset + size, (unsigned) PAGE_CACHE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: drivers/block/loop.c:260:
+		end = min(offset + size, (unsigned) PAGE_CACHE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#445: FILE: drivers/block/loop.c:280:
+			printk(KERN_ERR

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#507: FILE: drivers/block/loop.c:343:
+	p = (struct lo_read_data*)desc->buf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: drivers/block/loop.c:346:
+	IV = loop_get_iv(lo,
+		((page->index <<  (PAGE_CACHE_SHIFT - LO_IV_SECTOR_BITS))

CHECK:SPACING: No space is necessary after a cast
#575: FILE: drivers/block/loop.c:406:
+	const loff_t pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#749: FILE: drivers/block/loop.c:647:
+			printk(KERN_WARNING "loop: missing bio\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#789: FILE: drivers/block/loop.c:695:
+		/* We will ignore the underlying device's page cache, so
+		   first send any data in it to disk, without waiting.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#791: FILE: drivers/block/loop.c:697:
+		   our reads. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lo)...) over kmalloc(sizeof(struct loop_device)...)
#802: FILE: drivers/block/loop.c:725:
+	lo = kmalloc(sizeof(struct loop_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lo"
#803: FILE: drivers/block/loop.c:726:
+	if (lo == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: drivers/block/loop.c:784:
+^Istruct loop_func_table *xfer= xfer_funcs[lo->lo_encrypt_type]; $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#875: FILE: drivers/block/loop.c:784:
+	struct loop_func_table *xfer= xfer_funcs[lo->lo_encrypt_type]; 
 	                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: drivers/block/loop.c:787:
+^I^Ierr = xfer->release(lo); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: drivers/block/loop.c:789:
+^I^Ixfer->unlock(lo); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: drivers/block/loop.c:797:
+^Istruct loop_func_table *xfer = xfer_funcs[type]; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: drivers/block/loop.c:798:
+	struct loop_func_table *xfer = xfer_funcs[type]; 
+	if (xfer->init)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: drivers/block/loop.c:800:
+^Iif (!err) { $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#917: FILE: drivers/block/loop.c:813:
+	if (bdev->bd_openers != 2)	/* one for this fd being open plus
+					   one incremented by loop_set_fd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#917: FILE: drivers/block/loop.c:813:
+					   one incremented by loop_set_fd */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev->bd_queue"
#1039: FILE: drivers/block/loop.c:919:
+	lo = (bdev->bd_queue != NULL) ? bdev->bd_queue->queuedata : NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lo"
#1045: FILE: drivers/block/loop.c:925:
+	if (lo != NULL) {

CHECK:SPACING: No space is necessary after a cast
#1065: FILE: drivers/block/loop.c:942:
+		err = loop_set_status(lo, bdev, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: drivers/block/loop.c:948:
+		err = put_user((unsigned long) compute_loop_sectors(lo),

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: drivers/block/loop.c:949:
+			       (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#1085: FILE: drivers/block/loop.c:952:
+		err = put_user((u64) compute_loop_sectors(lo),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1086: FILE: drivers/block/loop.c:953:
+			       (u64*)arg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1174: FILE: drivers/block/loop.c:994:
+	unsigned char buf[20];
+	sprintf(buf, "%d", dev_minor);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#1177: FILE: drivers/block/loop.c:997:
+		       S_IFBLK | S_IRUSR | S_IWUSR | S_IRGRP, &lo_fops, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 24 warnings, 15 checks, 1123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
