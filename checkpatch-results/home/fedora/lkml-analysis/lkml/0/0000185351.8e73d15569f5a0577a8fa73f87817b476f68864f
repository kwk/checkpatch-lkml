WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
                                                                                

WARNING:TYPO_SPELLING: 'indepedent' may be misspelled - perhaps 'independent'?
#122: FILE: arch/ppc64/Kconfig:132:
+	  but it is indepedent of the system firmware.  And like a reboot
 	            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'similiarity' may be misspelled - perhaps 'similarity'?
#125: FILE: arch/ppc64/Kconfig:135:
+	  The name comes from the similiarity to the exec system call.
 	                          ^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: arch/ppc64/kernel/machine_kexec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: arch/ppc64/kernel/machine_kexec.c:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#195: FILE: arch/ppc64/kernel/machine_kexec.c:22:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: space required before the open parenthesis '('
#234: FILE: arch/ppc64/kernel/machine_kexec.c:61:
+	for(i = 0; i < image->nr_segments; i++)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: arch/ppc64/kernel/machine_kexec.c:79:
+		for(i = 0; i < image->nr_segments; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'begin < high'
#256: FILE: arch/ppc64/kernel/machine_kexec.c:83:
+			if ((begin < high) && (end > low))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > low'
#256: FILE: arch/ppc64/kernel/machine_kexec.c:83:
+			if ((begin < high) && (end > low))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#262: FILE: arch/ppc64/kernel/machine_kexec.c:89:
+	for (node = of_find_node_by_type(NULL, "pci"); node != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!basep"
#268: FILE: arch/ppc64/kernel/machine_kexec.c:95:
+		if (basep == NULL || sizep == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sizep"
#268: FILE: arch/ppc64/kernel/machine_kexec.c:95:
+		if (basep == NULL || sizep == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: arch/ppc64/kernel/machine_kexec.c:101:
+		for(i = 0; i < image->nr_segments; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'begin < high'
#278: FILE: arch/ppc64/kernel/machine_kexec.c:105:
+			if ((begin < high) && (end > low))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > low'
#278: FILE: arch/ppc64/kernel/machine_kexec.c:105:
+			if ((begin < high) && (end > low))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: arch/ppc64/kernel/machine_kexec.c:175:
+		flush_icache_range(ranges[i].mem + KERNELBASE,
+				ranges[i].mem + KERNELBASE +

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#370: FILE: arch/ppc64/kernel/machine_kexec.c:197:
+	int my_cpu, i, notified=-1;
 	                       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#370: FILE: arch/ppc64/kernel/machine_kexec.c:197:
+	int my_cpu, i, notified=-1;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#376: FILE: arch/ppc64/kernel/machine_kexec.c:203:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#376: FILE: arch/ppc64/kernel/machine_kexec.c:203:
+	for (i=0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#382: FILE: arch/ppc64/kernel/machine_kexec.c:209:
+				printk("kexec: cpu %d hw_cpu_id %d is not"

WARNING:SPLIT_STRING: quoted string split across lines
#383: FILE: arch/ppc64/kernel/machine_kexec.c:210:
+				printk("kexec: cpu %d hw_cpu_id %d is not"
+						" possible, ignoring\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#392: FILE: arch/ppc64/kernel/machine_kexec.c:219:
+				printk("kexec: cpu %d hw_cpu_id %d is not"

WARNING:SPLIT_STRING: quoted string split across lines
#393: FILE: arch/ppc64/kernel/machine_kexec.c:220:
+				printk("kexec: cpu %d hw_cpu_id %d is not"
+						" online, ignoring\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: arch/ppc64/kernel/machine_kexec.c:225:
+				printk( "kexec: waiting for cpu %d (physical"

ERROR:SPACING: space prohibited after that open parenthesis '('
#398: FILE: arch/ppc64/kernel/machine_kexec.c:225:
+				printk( "kexec: waiting for cpu %d (physical"

WARNING:SPLIT_STRING: quoted string split across lines
#399: FILE: arch/ppc64/kernel/machine_kexec.c:226:
+				printk( "kexec: waiting for cpu %d (physical"
+						" %d) to go down\n",

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#446: FILE: arch/ppc64/kernel/machine_kexec.c:273:
+	__attribute__((__section__(".data.init_task"))) = { };

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: arch/ppc64/kernel/machine_kexec.c:277:
+extern NORET_TYPE void kexec_sequence(void *newstack, unsigned long start,
+	void *image, void *control, void (*clear_all)(void)) ATTRIB_NORET;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#455: FILE: arch/ppc64/kernel/machine_kexec.c:282:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'staticly' may be misspelled - perhaps 'statically'?
#461: FILE: arch/ppc64/kernel/machine_kexec.c:288:
+	/* switch to a staticly allocated stack.  Based on irq stack code.
 	               ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/ppc64/kernel/machine_kexec.c:298:
+	kexec_sequence(&kexec_stack, image->start, image,
+			page_address(image->control_code_page),

WARNING:REPEATED_WORD: Possible repeated word: 'hack'
#653: FILE: arch/ppc64/kernel/misc.S:854:
+#ifdef CONFIG_PPC_RTAS /* hack hack hack */

WARNING:REPEATED_WORD: Possible repeated word: 'hack'
#653: FILE: arch/ppc64/kernel/misc.S:854:
+#ifdef CONFIG_PPC_RTAS /* hack hack hack */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#697: FILE: arch/ppc64/kernel/mpic.c:807:
+	BUG_ON(mpic == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpic"
#697: FILE: arch/ppc64/kernel/mpic.c:807:
+	BUG_ON(mpic == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: arch/ppc64/kernel/mpic.c:815:
+		mpic_irq_write(i, MPIC_IRQ_DESTINATION,
+			mpic_irq_read(i, MPIC_IRQ_DESTINATION) & ~msk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#713: FILE: arch/ppc64/kernel/mpic.c:823:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: arch/ppc64/kernel/mpic.h:259:
+extern void mpic_teardown_this_cpu(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_init_mpic>
#739: FILE: arch/ppc64/kernel/pSeries_setup.c:198:
+		ppc_md.init_IRQ		= pSeries_init_mpic;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: arch/ppc64/kernel/pSeries_setup.c:200:
+^I ^Ippc_md.cpu_irq_down^I= mpic_teardown_this_cpu;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#741: FILE: arch/ppc64/kernel/pSeries_setup.c:200:
+^I ^Ippc_md.cpu_irq_down^I= mpic_teardown_this_cpu;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: arch/ppc64/kernel/xics.c:671:
+	status = rtas_set_indicator(GLOBAL_INTERRUPT_QUEUE,
+		(1UL << interrupt_server_size) - 1 - default_distrib_server, 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#837: FILE: include/asm-ppc64/kexec.h:1:
+#ifndef _PPC64_KEXEC_H

WARNING:TYPO_SPELLING: 'althogh' may be misspelled - perhaps 'although'?
#862: FILE: include/asm-ppc64/kexec.h:26:
+/* XXX: today we don't use this at all, althogh we have a static stack */
                                         ^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#872: FILE: include/asm-ppc64/kexec.h:36:
+typedef u32 note_buf_t[MAX_NOTE_BYTES/4];
                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#876: FILE: include/asm-ppc64/kexec.h:40:
+extern void kexec_smp_wait(void);	/* get and clear naca physid, wait for

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#877: FILE: include/asm-ppc64/kexec.h:41:
+extern void kexec_smp_wait(void);	/* get and clear naca physid, wait for
+					  master to copy new code to 0 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#877: FILE: include/asm-ppc64/kexec.h:41:
+					  master to copy new code to 0 */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185351.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 21 warnings, 21 checks, 740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185351.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
