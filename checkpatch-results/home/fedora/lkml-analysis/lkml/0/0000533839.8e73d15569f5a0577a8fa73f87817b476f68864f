WARNING:TYPO_SPELLING: 'partion' may be misspelled - perhaps 'partition'?
#15: 
Subject: [RFD w/info-PATCH] device arguments from lookup, partion code in
                                                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#38: 
	seperated list of options following the device's name.  Sample
	^^^^^^^^^

WARNING:TYPO_SPELLING: 'postive' may be misspelled - perhaps 'positive'?
#50: 
	(resulting in a postive dentry) or invalid.  Potential uses for
	                ^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#53: 
	ioctls, .... lots of options.  Please seperate comments on this
	                                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'explaination' may be misspelled - perhaps 'explanation'?
#76: 
	Given the above two bits, here's a brief explaination of a
	                                         ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#82: 
	also be viewed as /dev/hda at offset 512000 with a limit of 10GB.
	                       ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#84: 
	with /dev/hda/offset=512000,limit=10240000000.  Now, by putting
	          ^^^

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#111: FILE: Makefile:4:
+EXTRAVERSION =-pre3-sick-test
 ^^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: drivers/block/blkrestrict.c:1:
+/* driver/block/blkrestrict.c - written by Benjamin LaHaise

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#159: FILE: drivers/block/blkrestrict.c:18:
+ *^Ialong with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#160: FILE: drivers/block/blkrestrict.c:19:
+ *^IFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#166: FILE: drivers/block/blkrestrict.c:25:
+static char major_name[] = "restrict";

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#189: FILE: drivers/block/blkrestrict.c:48:
+	printk("restrict_create_dev: (0x%02x, 0x%02x) offset=0x%lx limit=0x%lx on (0x%04x)\n", major_nr, minor, info->offset, info->limit, info->dev);	/* FIXME: duh */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: drivers/block/blkrestrict.c:48:
+	printk("restrict_create_dev: (0x%02x, 0x%02x) offset=0x%lx limit=0x%lx on (0x%04x)\n", major_nr, minor, info->offset, info->limit, info->dev);	/* FIXME: duh */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'restrict_create_dev', this function's name, in a string
#189: FILE: drivers/block/blkrestrict.c:48:
+	printk("restrict_create_dev: (0x%02x, 0x%02x) offset=0x%lx limit=0x%lx on (0x%04x)\n", major_nr, minor, info->offset, info->limit, info->dev);	/* FIXME: duh */

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#210: FILE: drivers/block/blkrestrict.c:69:
+		printk("restrict_make_req: 0x%lx beyond limit on 0x%x (0x%lx,0x%lx)\n", bh->b_rsector, bh->b_rdev, info->offset, info->limit);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: drivers/block/blkrestrict.c:69:
+		printk("restrict_make_req: 0x%lx beyond limit on 0x%x (0x%lx,0x%lx)\n", bh->b_rsector, bh->b_rdev, info->offset, info->limit);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'restrict_make_req', this function's name, in a string
#210: FILE: drivers/block/blkrestrict.c:69:
+		printk("restrict_make_req: 0x%lx beyond limit on 0x%x (0x%lx,0x%lx)\n", bh->b_rsector, bh->b_rdev, info->offset, info->limit);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#221: FILE: drivers/block/blkrestrict.c:80:
+static struct block_device_operations restrict_bdops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#222: FILE: drivers/block/blkrestrict.c:81:
+	open:		restrict_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#223: FILE: drivers/block/blkrestrict.c:82:
+	release:	restrict_release,
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#223: FILE: drivers/block/blkrestrict.c:82:
+	release:	restrict_release,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: drivers/block/blkrestrict.c:91:
+	printk("blkrestrict_init: got major %u\n", major_nr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blkrestrict_init', this function's name, in a string
#232: FILE: drivers/block/blkrestrict.c:91:
+	printk("blkrestrict_init: got major %u\n", major_nr);

CHECK:CAMELCASE: Avoid CamelCase: <Arg_ull>
#286: FILE: fs/block_dev.c:661:
+	{ "offset",	Arg_ull,	offsetof(struct blkdev_param, offset) },

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Arg_bool>
#288: FILE: fs/block_dev.c:663:
+	{ "raw",	Arg_bool,	offsetof(struct blkdev_param, raw) },

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#307: FILE: fs/block_dev.c:681:
+		printk("blkdev_open: args='%*s'\n", dentry->d_name.len, dentry->d_name.name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: fs/block_dev.c:685:
+		printk("blkdev_open: offset=0x%Lx limit=0x%Lx raw=%d",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#311: FILE: fs/block_dev.c:685:
+		printk("blkdev_open: offset=0x%Lx limit=0x%Lx raw=%d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/block_dev.c:686:
+		printk("blkdev_open: offset=0x%Lx limit=0x%Lx raw=%d",
+			param.offset, param.limit, param.raw);

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: fs/block_dev.c:690:
+			struct inode *old_inode = inode;
+			inode = get_empty_inode();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#317: FILE: fs/block_dev.c:691:
+			inode->i_rdev = restrict_create_dev(old_inode->i_rdev, param.offset, param.limit);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#318: FILE: fs/block_dev.c:692:
+			bdev = inode->i_bdev = bdget(inode->i_rdev);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#335: FILE: fs/block_dev.c:771:
+struct inode_operations def_blk_iops = {

WARNING:INDENTED_LABEL: labels should not be indented
#336: FILE: fs/block_dev.c:772:
+	lookup:		blkdev_lookup,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: fs/lookupargs.c:1:
+/* fs/lookupargs.c - written by Benjamin LaHaise

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#355: FILE: fs/lookupargs.c:1:
+/* fs/lookupargs.c - written by Benjamin LaHaise

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#356: FILE: fs/lookupargs.c:2:
+ *	Support for comma seperated argument lists via a lookup method.
   	                  ^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#372: FILE: fs/lookupargs.c:18:
+ *^Ialong with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#373: FILE: fs/lookupargs.c:19:
+ *^IFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#379: FILE: fs/lookupargs.c:25:
+static const struct parsed_arg_format *find_arg_fmt(

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#382: FILE: fs/lookupargs.c:28:
+	if (fmt)
+	for (; fmt->name; fmt++) {

ERROR:SPACING: space required after that ',' (ctx:OxV)
#422: FILE: fs/lookupargs.c:68:
+	     left--,str++)
 	           ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#440: FILE: fs/lookupargs.c:86:
+	     left--,str++) {
 	           ^

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#466: FILE: fs/lookupargs.c:112:
+		*(unsigned long long *)data = simple_strtoull(arg->option_start, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: fs/lookupargs.c:121:
+	int ret = 0;
+	for_each_parsed_arg(str) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: fs/lookupargs.c:123:
+		arg_format_t *fmt = find_arg_fmt(&arg, fmt_list);
+		ret = -EINVAL;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#487: FILE: fs/lookupargs.c:133:
+struct dentry *generic_parse_lookup(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_name.len == 1'
#493: FILE: fs/lookupargs.c:139:
+	if (dentry->d_name.name[0] == '.' &&
+	    ((dentry->d_name.len == 1) ||
+	     (dentry->d_name.name[1] == '.' && dentry->d_name.len == 2)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: fs/lookupargs.c:147:
+		arg_format_t *fmt = find_arg_fmt(&arg, fmt_list);
+		if (!fmt || generic_check_arg(&arg, fmt)) {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#550: FILE: include/linux/fs.h:987:
+extern struct inode_operations def_blk_iops;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#558: FILE: include/linux/lookupargs.h:1:
+/* include/linux/lookupargs.h

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#558: FILE: include/linux/lookupargs.h:1:
+/* include/linux/lookupargs.h

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#570: FILE: include/linux/lookupargs.h:13:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <Arg_c>
#572: FILE: include/linux/lookupargs.h:15:
+	Arg_c,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_uc>
#573: FILE: include/linux/lookupargs.h:16:
+	Arg_uc,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_s>
#574: FILE: include/linux/lookupargs.h:17:
+	Arg_s,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_us>
#575: FILE: include/linux/lookupargs.h:18:
+	Arg_us,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_i>
#576: FILE: include/linux/lookupargs.h:19:
+	Arg_i,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_ui>
#577: FILE: include/linux/lookupargs.h:20:
+	Arg_ui,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_l>
#578: FILE: include/linux/lookupargs.h:21:
+	Arg_l,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_ul>
#579: FILE: include/linux/lookupargs.h:22:
+	Arg_ul,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_ll>
#580: FILE: include/linux/lookupargs.h:23:
+	Arg_ll,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_u32>
#581: FILE: include/linux/lookupargs.h:24:
+	Arg_u32,

CHECK:CAMELCASE: Avoid CamelCase: <Arg_u64>
#582: FILE: include/linux/lookupargs.h:25:
+	Arg_u64,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#586: FILE: include/linux/lookupargs.h:29:
+typedef const struct parsed_arg_format {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#601: FILE: include/linux/lookupargs.h:44:
+extern int generic_parse_args(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: include/linux/lookupargs.h:44:
+extern int generic_parse_args(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#603: FILE: include/linux/lookupargs.h:46:
+extern struct dentry *generic_parse_lookup(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/linux/lookupargs.h:46:
+extern struct dentry *generic_parse_lookup(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 41 warnings, 22 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
