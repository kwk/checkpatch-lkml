WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This is the cleaned up dcache patch using Read-Copy update and lazy lru list

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: fs/autofs4/expire.c:145:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/coda/pioctl.c:100:
+	       atomic_read(&target_inode->i_count), nd.dentry->d_count);
 	                                            ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: fs/dcache.c:61:
+	struct dentry * dentry = (struct dentry *)arg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/dcache.c:63:
+^Iif (dname_external(dentry)) $

CHECK:SPACING: No space is necessary after a cast
#178: FILE: fs/dcache.c:64:
+		kfree((void *) dentry->d_name.name);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: fs/dcache.c:65:
+^Ikmem_cache_free(dentry_cache, dentry); $

ERROR:SPACING: space prohibited after that open parenthesis '('
#252: FILE: fs/dcache.c:198:
+	if ( d_unhashed(dentry)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: fs/dcache.c:347:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#419: FILE: fs/dcache.c:730:
+	struct dentry * found = NULL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#435: FILE: fs/dcache.c:753:
+		if (!(dentry->d_vfs_flags & DCACHE_UNLINKED)) {
+			found = __dget(dentry);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: fs/dcache.c:757:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: fs/dcache.c:861:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#473: FILE: fs/dcache.c:861:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: fs/intermezzo/journal.c:189:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: fs/intermezzo/journal.c:189:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: fs/intermezzo/presto.c:476:
+        if ( dentry->d_count > 1 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/intermezzo/presto.c:476:
+        if ( dentry->d_count > 1 )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#553: FILE: fs/intermezzo/presto.c:476:
+        if ( dentry->d_count > 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#553: FILE: fs/intermezzo/presto.c:476:
+        if ( dentry->d_count > 1 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: fs/intermezzo/vfs.c:1204:
+        switch (dentry->d_count) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: fs/intermezzo/vfs.c:1204:
+        switch (dentry->d_count) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: fs/intermezzo/vfs.c:1207:
+                if (dentry->d_count != 2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: fs/intermezzo/vfs.c:1207:
+                if (dentry->d_count != 2)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#581: FILE: fs/locks.c:1239:
 	if ((arg == F_WRLCK)
+	    && ((dentry->d_count > 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#706: FILE: fs/nfsd/vfs.c:1284:
+		((odentry->d_count > 1)
+		 || (ndentry->d_count > 1))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: include/linux/dcache.h:139:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: include/linux/dcache.h:211:
+extern struct dentry * dget_locked(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#816: FILE: include/linux/dcache.h:211:
+extern struct dentry * dget_locked(struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#816: FILE: include/linux/dcache.h:211:
+extern struct dentry * dget_locked(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:MEMORY_BARRIER: memory barrier without comment
#821: FILE: include/linux/dcache.h:216:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#823: FILE: include/linux/dcache.h:218:
+	wmb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#850: FILE: include/linux/dcache.h:245:
+static inline void d_drop(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#865: FILE: include/linux/dcache.h:265:
+static inline struct dentry * dget(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#880: FILE: include/linux/dcache.h:276:
+static __inline__ struct dentry * __dget(struct dentry *dentry)

WARNING:INLINE: plain inline is preferred over __inline__
#880: FILE: include/linux/dcache.h:276:
+static __inline__ struct dentry * __dget(struct dentry *dentry)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 12 warnings, 5 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
