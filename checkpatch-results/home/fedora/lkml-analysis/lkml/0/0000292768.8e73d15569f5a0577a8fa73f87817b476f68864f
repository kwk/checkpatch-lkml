ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Paul Jackson; Xavier Bru'
#52: 
To: Paul Jackson; Xavier Bru

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'ricklind@us.ibm.com; mbligh@aracnet.com; lse-tech@lists.sourceforge.net;', should be: 'ricklind@us.ibm.com; (mbligh@aracnet.com; lse-tech@lists.sourceforge.net;)'
#53: 
Cc: ricklind@us.ibm.com; mbligh@aracnet.com; lse-tech@lists.sourceforge.net;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/proc/array.c:410:
+int proc_pid_cpu(struct task_struct *task, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#105: FILE: fs/proc/array.c:414:
+	len =3D sprintf(buffer,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#109: FILE: fs/proc/array.c:418:
+		jiffies_to_clock_t(task->stime));
+	=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#109: FILE: fs/proc/array.c:418:
+	=09
 	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#110: FILE: fs/proc/array.c:419:
+	for (i =3D 0 ; i < NR_CPUS; i++) {
 	       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#110: FILE: fs/proc/array.c:419:
+	for (i =3D 0 ; i < NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#111: FILE: fs/proc/array.c:420:
+		if (cpu_online(i))
+		len +=3D sprintf(buffer + len, "cpu%d %lu %lu\n",

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#112: FILE: fs/proc/array.c:421:
+		len +=3D sprintf(buffer + len, "cpu%d %lu %lu\n",
 		    ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#117: FILE: fs/proc/array.c:426:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#118: FILE: fs/proc/array.c:427:
+	len +=3D sprintf(buffer + len, "current_cpu %d\n",task_cpu(task));
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: fs/proc/array.c:427:
+	len +=3D sprintf(buffer + len, "current_cpu %d\n",task_cpu(task));
 	                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/proc/base.c:88:
+  E(PROC_PID_CPU,^I"cpu",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#141: FILE: fs/proc/base.c:88:
+  E(PROC_PID_CPU,	"cpu",		S_IFREG|S_IRUGO),
                  	      		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#141: FILE: fs/proc/base.c:88:
+  E(PROC_PID_CPU,	"cpu",		S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#152: FILE: fs/proc/base.c:1179:
+			inode->i_fop =3D &proc_info_file_operations;
 			             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#152: FILE: fs/proc/base.c:1179:
+			inode->i_fop =3D &proc_info_file_operations;
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#153: FILE: fs/proc/base.c:1180:
+			ei->op.proc_read =3D proc_pid_cpu;
 			                 ^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#173: FILE: include/linux/sched.h:396:
mm-specific or thread-specific */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#189: FILE: kernel/fork.c:868:
+		for(i =3D 0; i < NR_CPUS; i++)
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#189: FILE: kernel/fork.c:868:
+		for(i =3D 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#189: FILE: kernel/fork.c:868:
+		for(i =3D 0; i < NR_CPUS; i++)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#190: FILE: kernel/fork.c:869:
+			p->per_cpu_utime[i] =3D p->per_cpu_stime[i] =3D 0;
 			                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#190: FILE: kernel/fork.c:869:
+			p->per_cpu_utime[i] =3D p->per_cpu_stime[i] =3D 0;
 			                                            ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#207: FILE: kernel/timer.c:724:
+	p->per_cpu_utime[cpu] +=3D user;
 	                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#208: FILE: kernel/timer.c:725:
+	p->per_cpu_stime[cpu] +=3D system;
 	                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000292768.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 6 warnings, 4 checks, 88 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000292768.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
