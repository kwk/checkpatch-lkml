WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#27: 
to duplicate the code to copy the structure to userspace, aswell as
                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: block/ioctl.c:266:
+		if (copy_to_user((struct hd_geometry __user *)arg, &geo,
+					sizeof(geo)))

CHECK:CAMELCASE: Avoid CamelCase: <GeometryTranslationHeads>
#223: FILE: drivers/block/DAC960.c:102:
+		geo->heads = p->V1.GeometryTranslationHeads;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GeometryTranslationSectors>
#224: FILE: drivers/block/DAC960.c:103:
+		geo->sectors = p->V1.GeometryTranslationSectors;

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveInformation>
#225: FILE: drivers/block/DAC960.c:104:
+		geo->cylinders = p->V1.LogicalDriveInformation[drive_nr].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->V1.LogicalDriveInformation[drive_nr].LogicalDriveSize'
#226: FILE: drivers/block/DAC960.c:105:
+		geo->cylinders = p->V1.LogicalDriveInformation[drive_nr].
+			LogicalDriveSize / (geo->heads * geo->sectors);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <LogicalDriveSize>
#226: FILE: drivers/block/DAC960.c:105:
+			LogicalDriveSize / (geo->heads * geo->sectors);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigurableDeviceSize>
#250: FILE: drivers/block/DAC960.c:124:
+		geo->cylinders = i->ConfigurableDeviceSize /

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: drivers/block/cciss.c:198:
+        .getgeo^I^I= cciss_getgeo,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: drivers/block/cciss.c:198:
+        .getgeo^I^I= cciss_getgeo,$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#517: FILE: drivers/block/cpqarray.c:1140:
+		geo->cylinders = drv->nr_blks / (0xff*0x3f);
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#725: FILE: drivers/block/paride/pf.c:324:
+		geo->cylinders = sector_div(capacity, PF_FD_HDS * PF_FD_SPT);`
 		                                                            ^

CHECK:SPACING: No space is necessary after a cast
#860: FILE: drivers/block/sx8.c:440:
+	geo->heads = (u8) port->dev_geom_head;

CHECK:SPACING: No space is necessary after a cast
#861: FILE: drivers/block/sx8.c:441:
+	geo->sectors = (u8) port->dev_geom_sect;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1578: FILE: include/linux/fs.h:936:
+	int (*getgeo)(struct block_device *, struct hd_geometry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hd_geometry *' should also have an identifier name
#1578: FILE: include/linux/fs.h:936:
+	int (*getgeo)(struct block_device *, struct hd_geometry *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000132996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 5 warnings, 9 checks, 1346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000132996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
