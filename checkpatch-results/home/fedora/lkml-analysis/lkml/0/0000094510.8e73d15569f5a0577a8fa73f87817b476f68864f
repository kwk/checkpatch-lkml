WARNING:TYPO_SPELLING: 'specifc' may be misspelled - perhaps 'specific'?
#39: 
- allow vendor specifc init to fail.
               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'comparision' may be misspelled - perhaps 'comparison'?
#66: 
Sizes for comparision:
          ^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: drivers/usb/input/Kconfig:243:
+config USB_TOUCHSCREEN
+	tristate "USB Touchscreen Driver"
+	depends on USB && INPUT
+	---help---
+	  USB Touchscreen driver for:
+	  - eGalax Touchkit USB
+	  - PanJit TouchSet USB
+	  - 3M MicroTouch USB
+	  - ITM
+
+	  Have a look at <http://linux.chapter7.ch/touchkit/> for
+	  a usage description and the required user-space stuff.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called usbtouchscreen.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#100: FILE: drivers/usb/input/Kconfig:259:
+config USB_TOUCHSCREEN_EGALAX
+	default y
+	bool "eGalax device support" if EMBEDDED
+	depends on USB_TOUCHSCREEN
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#105: FILE: drivers/usb/input/Kconfig:264:
+config USB_TOUCHSCREEN_PANJIT
+	default y
+	bool "PanJit device support" if EMBEDDED
+	depends on USB_TOUCHSCREEN
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#110: FILE: drivers/usb/input/Kconfig:269:
+config USB_TOUCHSCREEN_3M
+	default y
+	bool "3M/Microtouch device support" if EMBEDDED
+	depends on USB_TOUCHSCREEN
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#115: FILE: drivers/usb/input/Kconfig:274:
+config USB_TOUCHSCREEN_ITM
+	default y
+	bool "ITM device support" if EMBEDDED
+	depends on USB_TOUCHSCREEN
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: drivers/usb/input/usbtouchscreen.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: drivers/usb/input/usbtouchscreen.c:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#186: FILE: drivers/usb/input/usbtouchscreen.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: drivers/usb/input/usbtouchscreen.c:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: drivers/usb/input/usbtouchscreen.c:58:
+
+

WARNING:TYPO_SPELLING: 'specifc' may be misspelled - perhaps 'specific'?
#221: FILE: drivers/usb/input/usbtouchscreen.c:59:
+/* device specifc data/functions */
           ^^^^^^^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#230: FILE: drivers/usb/input/usbtouchscreen.c:68:
+	void (*process_pkt) (struct usbtouch_usb *usbtouch, struct pt_regs *regs, char *pkt, int len);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#230: FILE: drivers/usb/input/usbtouchscreen.c:68:
+	void (*process_pkt) (struct usbtouch_usb *usbtouch, struct pt_regs *regs, char *pkt, int len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#231: FILE: drivers/usb/input/usbtouchscreen.c:69:
+	int  (*read_data)   (char *pkt, int *x, int *y, int *touch, int *press);

WARNING:SPACING: Unnecessary space before function pointer arguments
#232: FILE: drivers/usb/input/usbtouchscreen.c:70:
+	int  (*init)        (struct usbtouch_usb *usbtouch);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: drivers/usb/input/usbtouchscreen.c:75:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: drivers/usb/input/usbtouchscreen.c:91:
+                                 struct pt_regs *regs, char *pkt, int len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: drivers/usb/input/usbtouchscreen.c:91:
+                                 struct pt_regs *regs, char *pkt, int len);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: drivers/usb/input/usbtouchscreen.c:128:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#312: FILE: drivers/usb/input/usbtouchscreen.c:150:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: drivers/usb/input/usbtouchscreen.c:166:
+                           struct pt_regs *regs, char *pkt, int len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: drivers/usb/input/usbtouchscreen.c:166:
+                           struct pt_regs *regs, char *pkt, int len)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: drivers/usb/input/usbtouchscreen.c:227:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: drivers/usb/input/usbtouchscreen.c:242:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: drivers/usb/input/usbtouchscreen.c:266:
+^I                      MTOUCHUSB_RESET,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: drivers/usb/input/usbtouchscreen.c:267:
+^I                      USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: drivers/usb/input/usbtouchscreen.c:268:
+^I                      1, 0, NULL, 0, USB_CTRL_SET_TIMEOUT);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#432: FILE: drivers/usb/input/usbtouchscreen.c:270:
+	    __FUNCTION__, ret);

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: drivers/usb/input/usbtouchscreen.c:275:
+^I                      MTOUCHUSB_ASYNC_REPORT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: drivers/usb/input/usbtouchscreen.c:276:
+^I                      USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: drivers/usb/input/usbtouchscreen.c:277:
+^I                      1, 1, NULL, 0, USB_CTRL_SET_TIMEOUT);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#441: FILE: drivers/usb/input/usbtouchscreen.c:279:
+	    __FUNCTION__, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#449: FILE: drivers/usb/input/usbtouchscreen.c:287:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: drivers/usb/input/usbtouchscreen.c:303:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: drivers/usb/input/usbtouchscreen.c:357:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: drivers/usb/input/usbtouchscreen.c:362:
+                                 struct pt_regs *regs, char *pkt, int len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: drivers/usb/input/usbtouchscreen.c:362:
+                                 struct pt_regs *regs, char *pkt, int len)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#529: FILE: drivers/usb/input/usbtouchscreen.c:367:
+	if (!type->read_data(pkt, &x, &y, &touch, &press))
+			return;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#552: FILE: drivers/usb/input/usbtouchscreen.c:390:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#565: FILE: drivers/usb/input/usbtouchscreen.c:403:
+		    __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#572: FILE: drivers/usb/input/usbtouchscreen.c:410:
+		    __FUNCTION__, urb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#576: FILE: drivers/usb/input/usbtouchscreen.c:414:
+		    __FUNCTION__, urb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#586: FILE: drivers/usb/input/usbtouchscreen.c:424:
+		    __FUNCTION__, retval);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: drivers/usb/input/usbtouchscreen.c:446:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: drivers/usb/input/usbtouchscreen.c:452:
+^I^I                usbtouch->data, usbtouch->data_dma);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#618: FILE: drivers/usb/input/usbtouchscreen.c:456:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*usbtouch)...) over kzalloc(sizeof(struct usbtouch_usb)...)
#633: FILE: drivers/usb/input/usbtouchscreen.c:471:
+	usbtouch = kzalloc(sizeof(struct usbtouch_usb), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: drivers/usb/input/usbtouchscreen.c:482:
+^I                                  SLAB_KERNEL, &usbtouch->data_dma);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#656: FILE: drivers/usb/input/usbtouchscreen.c:494:
+		dbg("%s - usb_alloc_urb failed: usbtouch->irq", __FUNCTION__);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#664: FILE: drivers/usb/input/usbtouchscreen.c:502:
+		strlcpy(usbtouch->name, udev->manufacturer, sizeof(usbtouch->name));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/usb/input/usbtouchscreen.c:512:
+		snprintf(usbtouch->name, sizeof(usbtouch->name),
+			"USB Touchscreen %04x:%04x",

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#675: FILE: drivers/usb/input/usbtouchscreen.c:513:
+			 le16_to_cpu(udev->descriptor.idVendor),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#676: FILE: drivers/usb/input/usbtouchscreen.c:514:
+			 le16_to_cpu(udev->descriptor.idProduct));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#679: FILE: drivers/usb/input/usbtouchscreen.c:517:
+	strlcpy(usbtouch->phys, "/input0", sizeof(usbtouch->phys));

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: drivers/usb/input/usbtouchscreen.c:533:
+^I^I                     type->max_press, 0, 0);$

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#700: FILE: drivers/usb/input/usbtouchscreen.c:538:
+			 usbtouch_irq, usbtouch, endpoint->bInterval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#709: FILE: drivers/usb/input/usbtouchscreen.c:547:
+			dbg("%s - type->init() failed, err: %d", __FUNCTION__, err);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#716: FILE: drivers/usb/input/usbtouchscreen.c:554:
+		dbg("%s - input_register_device failed, err: %d", __FUNCTION__, err);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#736: FILE: drivers/usb/input/usbtouchscreen.c:574:
+	dbg("%s - called", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#741: FILE: drivers/usb/input/usbtouchscreen.c:579:
+	dbg("%s - usbtouch is initialized, cleaning up", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094510.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 30 warnings, 18 checks, 684 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094510.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
