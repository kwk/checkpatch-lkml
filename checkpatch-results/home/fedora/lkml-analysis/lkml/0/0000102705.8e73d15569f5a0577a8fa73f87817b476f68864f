CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nice' - possible side-effects?
#210: FILE: kernel/sched.c:684:
+#define NICE_TO_LOAD_PRIO(nice) \
+	((nice >= 0) ? (20 - (nice)) : (20 + (nice) * (nice)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nice' may be better as '(nice)' to avoid precedence issues
#210: FILE: kernel/sched.c:684:
+#define NICE_TO_LOAD_PRIO(nice) \
+	((nice >= 0) ? (20 - (nice)) : (20 + (nice) * (nice)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: kernel/sched.c:695:
+	if (rt_task(p)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: kernel/sched.c:705:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#320: FILE: kernel/sched.c:1035:
+	return min(rq->cpu_load[type-1], rq->raw_weighted_load);
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#338: FILE: kernel/sched.c:1049:
+	return max(rq->cpu_load[type-1], rq->raw_weighted_load);
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#372: FILE: kernel/sched.c:1324:
+				100*(tl + p->load_weight) <= imbalance*load) {
 				   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#372: FILE: kernel/sched.c:1324:
+				100*(tl + p->load_weight) <= imbalance*load) {
 				                                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#475: FILE: kernel/sched.c:2036:
+	busiest_load_per_task = busiest_nr_running = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#476: FILE: kernel/sched.c:2037:
+	this_load_per_task = this_nr_running = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#490: FILE: kernel/sched.c:2054:
+		sum_weighted_load = sum_nr_running = avg_load = 0;

WARNING:TYPO_SPELLING: 'gaurantee' may be misspelled - perhaps 'guarantee'?
#550: FILE: kernel/sched.c:2125:
+	 * there is no gaurantee that any tasks will be moved so we'll have
 	               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#560: FILE: kernel/sched.c:2133:
+		if (max_load - this_load >= busiest_load_per_task*2) {
 		                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#581: FILE: kernel/sched.c:2153:
+		tmp = busiest_load_per_task*SCHED_LOAD_SCALE/busiest->cpu_power;
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#581: FILE: kernel/sched.c:2153:
+		tmp = busiest_load_per_task*SCHED_LOAD_SCALE/busiest->cpu_power;
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#591: FILE: kernel/sched.c:2160:
+				busiest_load_per_task*SCHED_LOAD_SCALE)
 				                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#596: FILE: kernel/sched.c:2163:
+			tmp = busiest_load_per_task*SCHED_LOAD_SCALE/this->cpu_power;
 			                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#596: FILE: kernel/sched.c:2163:
+			tmp = busiest_load_per_task*SCHED_LOAD_SCALE/this->cpu_power;
 			                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#597: FILE: kernel/sched.c:2164:
+		pwr_move += this->cpu_power*min(this_load_per_task, this_load + tmp);
 		                           ^

WARNING:TABSTOP: Statements should start on a tabstop
#607: FILE: kernel/sched.c:2173:
+		 else if (*imbalance <= busiest_load_per_task / 2)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#623: FILE: kernel/sched.c:2213:
+#define minus_1_or_zero(n) ((n) > 0 ? (n) - 1 : 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: kernel/sched.c:2462:
+	if (move_tasks(target_rq, target_cpu, busiest_rq, 1,
+			RTPRIO_TO_LOAD_WEIGHT(100), sd, SCHED_IDLE, NULL))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 2 warnings, 20 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
