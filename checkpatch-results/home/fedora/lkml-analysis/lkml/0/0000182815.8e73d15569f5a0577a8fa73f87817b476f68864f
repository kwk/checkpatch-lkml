WARNING:REPEATED_WORD: Possible repeated word: 'for'
#49: 
> > Andrew for for testing near the end of this month. So please, if you

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#52: 
> I have been working closely with John to re-work the soft-timer subsytem
                                                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#56: 
Description: Rework the soft-timer subsytem to use timerintervals (a new
                                   ^^^^^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#82: FILE: include/linux/jiffies.h:279:
+#if HZ <= NSEC_PER_SEC && !(NSEC_PER_SEC % HZ)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#84: FILE: include/linux/jiffies.h:281:
+#elif HZ > NSEC_PER_SEC && !(HZ % NSEC_PER_SEC)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#85: FILE: include/linux/jiffies.h:282:
+	return ((nsec_t)j + (HZ / NSEC_PER_SEC) - 1)/(HZ / NSEC_PER_SEC);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: include/linux/jiffies.h:317:
+	nsec_t temp;
+	if (n > jiffies_to_nsecs(MAX_JIFFY_OFFSET))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#112: FILE: include/linux/jiffies.h:319:
+#if HZ <= NSEC_PER_SEC && !(NSEC_PER_SEC % HZ)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#116: FILE: include/linux/jiffies.h:323:
+#elif HZ > NSEC_PER_SEC && !(HZ % NSEC_PER_SEC)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/sched.h:189:
+extern nsec_t FASTCALL(schedule_timeout_nsecs(nsec_t timeout_nsecs));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/sched.h:190:
+extern unsigned long FASTCALL(schedule_timeout_usecs(unsigned long timeout_usecs));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/sched.h:191:
+extern unsigned int FASTCALL(schedule_timeout_msecs(unsigned int timeout_msesc));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/timer.h:69:
+extern void add_timer(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/timer.h:70:
+extern int set_timer_nsecs(struct timer_list *timer, nsec_t expires_nsecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/timer.h:71:
+extern void set_timer_on_nsecs(struct timer_list *timer, nsec_t expires_nsecs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/timer.h:72:
+extern void set_timer_on_nsecs(struct timer_list *timer, nsec_t expires_nsecs,
+								int cpu);

CHECK:BIT_MACRO: Prefer using the BIT macro
#224: FILE: kernel/timer.c:67:
+#define TIMERINTERVAL_SIZE (1 << TIMERINTERVAL_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: kernel/timer.c:136:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#255: FILE: kernel/timer.c:139:
+ * we would not propogate the carry and force a wrap when adding the 1.
                 ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: kernel/timer.c:161:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: kernel/timer.c:193:
+	unsigned long relative_jiffies = abs_jiffies - jiffies;
+	return nsecs_to_timerintervals_ceiling(do_monotonic_clock()) +

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#376: FILE: kernel/timer.c:347:
+void add_timer(struct timer_list * timer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#381: FILE: kernel/timer.c:352:
+EXPORT_SYMBOL(add_timer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#425: FILE: kernel/timer.c:410:
+	BUG_ON(!timer->function);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#437: FILE: kernel/timer.c:422:
+EXPORT_SYMBOL_GPL(set_timer_nsecs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/timer.c:435:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: kernel/timer.c:435:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/timer.c:435:
+  ^Iunsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/timer.c:437:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: kernel/timer.c:437:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: kernel/timer.c:437:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: kernel/timer.c:437:
+  	BUG_ON(timer_pending(timer) || !timer->function);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#464: FILE: kernel/timer.c:449:
+EXPORT_SYMBOL_GPL(set_timer_on_nsecs);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#479: FILE: kernel/timer.c:601:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'N' may be better as '(N)' to avoid precedence issues
#479: FILE: kernel/timer.c:601:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/timer.c:611:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: kernel/timer.c:611:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: kernel/timer.c:611:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

CHECK:SPACING: No space is necessary after a cast
#600: FILE: kernel/timer.c:1349:
+	timer.data = (unsigned long) current;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#616: FILE: kernel/timer.c:1365:
+EXPORT_SYMBOL_GPL(schedule_timeout_nsecs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#660: FILE: kernel/timer.c:1409:
+EXPORT_SYMBOL_GPL(schedule_timeout_usecs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#704: FILE: kernel/timer.c:1453:
+EXPORT_SYMBOL_GPL(schedule_timeout_msecs);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 26 warnings, 11 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182815.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
