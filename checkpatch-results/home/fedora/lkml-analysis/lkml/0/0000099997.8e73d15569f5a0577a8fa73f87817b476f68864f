WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#65: 
 work-dave/ipc/msg.c             |  152 ++++++++++++++++++++++------------------

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#79: FILE: ipc/msg.c:63:
+#define msg_lock(ctx, id)	((struct msg_queue*)ipc_lock(&ctx->msg_ids,id))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#79: FILE: ipc/msg.c:63:
+#define msg_lock(ctx, id)	((struct msg_queue*)ipc_lock(&ctx->msg_ids,id))
                          	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#79: FILE: ipc/msg.c:63:
+#define msg_lock(ctx, id)	((struct msg_queue*)ipc_lock(&ctx->msg_ids,id))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#81: FILE: ipc/msg.c:65:
+#define msg_rmid(ctx, id)	((struct msg_queue*)ipc_rmid(&ctx->msg_ids,id))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: ipc/msg.c:65:
+#define msg_rmid(ctx, id)	((struct msg_queue*)ipc_rmid(&ctx->msg_ids,id))
                          	                                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#81: FILE: ipc/msg.c:65:
+#define msg_rmid(ctx, id)	((struct msg_queue*)ipc_rmid(&ctx->msg_ids,id))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#82: FILE: ipc/msg.c:66:
+#define msg_checkid(ctx, msq, msgid)	\
+	ipc_checkid(&ctx->msg_ids,&msq->q_perm,msgid)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msq' may be better as '(msq)' to avoid precedence issues
#82: FILE: ipc/msg.c:66:
+#define msg_checkid(ctx, msq, msgid)	\
+	ipc_checkid(&ctx->msg_ids,&msq->q_perm,msgid)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#83: FILE: ipc/msg.c:67:
+	ipc_checkid(&ctx->msg_ids,&msq->q_perm,msgid)
 	                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#83: FILE: ipc/msg.c:67:
+	ipc_checkid(&ctx->msg_ids,&msq->q_perm,msgid)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: ipc/msg.c:67:
+	ipc_checkid(&ctx->msg_ids,&msq->q_perm,msgid)
 	                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#84: FILE: ipc/msg.c:68:
+#define msg_buildid(ctx, id, seq) \
+	ipc_buildid(&ctx->msg_ids, id, seq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#99: FILE: ipc/msg.c:71:
+static void freeque (struct ipc_msg_context *, struct msg_queue *msq, int id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: ipc/msg.c:72:
+static int newque (struct ipc_msg_context *context, key_t key, int id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: ipc/msg.c:91:
+void __init msg_init (struct ipc_msg_context *context)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: ipc/msg.c:93:
+	ipc_init_ids(&context->msg_ids,msg_ctlmni);
 	                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: ipc/msg.c:100:
+static int newque (struct ipc_msg_context *context, key_t key, int msgflg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: ipc/msg.c:127:
+	msq->q_id = msg_buildid(context,id,msq->q_perm.seq);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: ipc/msg.c:127:
+	msq->q_id = msg_buildid(context,id,msq->q_perm.seq);
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: ipc/msg.c:194:
+static void freeque (struct ipc_msg_context *context,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#205: FILE: ipc/msg.c:225:
+	else if ((id = ipc_findkey(&context->msg_ids, key)) == -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: ipc/msg.c:401:
+		if(cmd == MSG_STAT && msqid >= context->msg_ids.entries->size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: ipc/msg.c:415:
+			if (msg_checkid(context,msq,msqid))
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: ipc/msg.c:415:
+			if (msg_checkid(context,msq,msqid))
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: ipc/msg.c:462:
+	if (msg_checkid(context,msq,msqid))
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: ipc/msg.c:462:
+	if (msg_checkid(context,msq,msqid))
 	                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#332: FILE: ipc/msg.c:501:
+		freeque (context, msq, msqid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: ipc/msg.c:597:
+	if (msg_checkid(context,msq,msqid))
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: ipc/msg.c:597:
+	if (msg_checkid(context,msq,msqid))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#391: FILE: ipc/msg.c:648:
+		atomic_add(msgsz,&context->msg_bytes);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#391: FILE: ipc/msg.c:648:
+		atomic_add(msgsz,&context->msg_bytes);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: ipc/msg.c:699:
+	if (msg_checkid(context,msq,msqid))
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: ipc/msg.c:699:
+	if (msg_checkid(context,msq,msqid))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#431: FILE: ipc/msg.c:739:
+			atomic_sub(msg->m_ts,&context->msg_bytes);
 			                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#431: FILE: ipc/msg.c:739:
+			atomic_sub(msg->m_ts,&context->msg_bytes);
 			                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: ipc/util.h:15:
+void msg_init (struct ipc_msg_context *context);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#511: FILE: include/linux/ipc.h:6:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: include/linux/ipc.h:97:
+extern struct ipc_msg_context *alloc_ipc_msg_context(gfp_t flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#540: FILE: kernel/fork.c:1189:
+		extern struct ipc_msg_context ipc_msg_context;

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: kernel/fork.c:1190:
+		extern struct ipc_msg_context ipc_msg_context;
+		p->ipc_msg_context = current->ipc_msg_context;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000099997.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 11 warnings, 6 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000099997.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
