WARNING:TYPO_SPELLING: 'simliar' may be misspelled - perhaps 'similar'?
#40: 
and invalid timevals sanitized in a simliar way as the pre 2.6.16 code
                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#51: 
callers (sys_setitimer, compat_sys_setitimer, osf_setitimer) are catched.
                                                                 ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#83: FILE: kernel/itimer.c:162:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#85: FILE: kernel/itimer.c:164:
+		       "setitimer: %s (pid = %d) provided "
+		       "invalid timeval %s: tv_sec = %ld tv_usec = %ld\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#88: FILE: kernel/itimer.c:167:
+		       tv->tv_sec, (long) tv->tv_usec);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#91: FILE: kernel/itimer.c:170:
+	tmp = (unsigned long) tv->tv_usec;

CHECK:SPACING: No space is necessary after a cast
#95: FILE: kernel/itimer.c:174:
+	tmp = (unsigned long) tv->tv_sec;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#103: FILE: kernel/itimer.c:182:
+#define timeval_valid(t) \
+	(((t)->tv_sec >= 0) && (((unsigned long) (t)->tv_usec) < USEC_PER_SEC))

CHECK:SPACING: No space is necessary after a cast
#104: FILE: kernel/itimer.c:183:
+	(((t)->tv_sec >= 0) && (((unsigned long) (t)->tv_usec) < USEC_PER_SEC))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#110: FILE: kernel/itimer.c:189:
+static void check_itimerval(struct itimerval *value) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#111: FILE: kernel/itimer.c:190:
+static void check_itimerval(struct itimerval *value) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 6 checks, 91 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
