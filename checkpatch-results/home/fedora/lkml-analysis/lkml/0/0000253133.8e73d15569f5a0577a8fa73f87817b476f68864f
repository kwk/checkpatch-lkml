WARNING:INLINE: plain inline is preferred over __inline__
#121: FILE: drivers/char/drm/drmP.h:711:
+static __inline__ int drm_core_check_feature(struct drm_device *dev, int feature)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: drivers/char/drm/drmP.h:719:
+  return drm_core_check_feature(dev, DRIVER_USE_AGP);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: drivers/char/drm/drmP.h:728:
+  return drm_core_check_feature(dev, DRIVER_USE_MTRR);$

ERROR:SPACING: space prohibited after that open parenthesis '('
#208: FILE: drivers/char/drm/drm_bufs.h:134:
+			if ( map->type == _DRM_FRAME_BUFFER ||

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/char/drm/drm_bufs.h:135:
+			if ( map->type == _DRM_FRAME_BUFFER ||
+			     (map->flags & _DRM_WRITE_COMBINING) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#209: FILE: drivers/char/drm/drm_bufs.h:135:
+			     (map->flags & _DRM_WRITE_COMBINING) ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#210: FILE: drivers/char/drm/drm_bufs.h:136:
+				map->mtrr = mtrr_add( map->offset, map->size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/char/drm/drm_bufs.h:137:
+				map->mtrr = mtrr_add( map->offset, map->size,
+						      MTRR_TYPE_WRCOMB, 1 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#211: FILE: drivers/char/drm/drm_bufs.h:137:
+						      MTRR_TYPE_WRCOMB, 1 );

WARNING:TABSTOP: Statements should start on a tabstop
#250: FILE: drivers/char/drm/drm_bufs.h:273:
+		  if (drm_core_has_MTRR(dev)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 32)
#250: FILE: drivers/char/drm/drm_bufs.h:273:
+		  if (drm_core_has_MTRR(dev)) {
+				if (map->mtrr >= 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: drivers/char/drm/drm_bufs.h:276:
+					int retcode;
+					retcode = mtrr_del(map->mtrr,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#297: FILE: drivers/char/drm/drm_bufs.h:1189:
+		    (__HAVE_SG && (dma->flags & _DRM_DMA_USE_SG)) ) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#355: FILE: drivers/char/drm/drm_drv.h:407:
+						if ( map->mtrr >= 0 ) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:SPACING: space prohibited after that open parenthesis '('
#355: FILE: drivers/char/drm/drm_drv.h:407:
+						if ( map->mtrr >= 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#355: FILE: drivers/char/drm/drm_drv.h:407:
+						if ( map->mtrr >= 0 ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: drivers/char/drm/drm_drv.h:409:
+							int retcode;
+							retcode = mtrr_del( map->mtrr,

ERROR:SPACING: space prohibited after that open parenthesis '('
#357: FILE: drivers/char/drm/drm_drv.h:409:
+							retcode = mtrr_del( map->mtrr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: drivers/char/drm/drm_drv.h:410:
+							retcode = mtrr_del( map->mtrr,
+									    map->offset,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#359: FILE: drivers/char/drm/drm_drv.h:411:
+									    map->size );

ERROR:SPACING: space prohibited after that open parenthesis '('
#360: FILE: drivers/char/drm/drm_drv.h:412:
+							DRM_DEBUG( "mtrr_del=%d\n", retcode );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#360: FILE: drivers/char/drm/drm_drv.h:412:
+							DRM_DEBUG( "mtrr_del=%d\n", retcode );

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#379: FILE: drivers/char/drm/drm_drv.h:539:
+	if (drm_core_has_AGP(dev))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->agp == NULL'
#382: FILE: drivers/char/drm/drm_drv.h:542:
+		if (drm_core_check_feature(dev, DRIVER_REQUIRE_AGP) && (dev->agp == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->agp"
#382: FILE: drivers/char/drm/drm_drv.h:542:
+		if (drm_core_check_feature(dev, DRIVER_REQUIRE_AGP) && (dev->agp == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that open parenthesis '('
#383: FILE: drivers/char/drm/drm_drv.h:543:
+			DRM_ERROR( "Cannot initialize the agpgart module.\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#383: FILE: drivers/char/drm/drm_drv.h:543:
+			DRM_ERROR( "Cannot initialize the agpgart module.\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#385: FILE: drivers/char/drm/drm_drv.h:545:
+			DRM(takedown)( dev );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#385: FILE: drivers/char/drm/drm_drv.h:545:
+			DRM(takedown)( dev );

ERROR:SPACING: space prohibited after that open parenthesis '('
#390: FILE: drivers/char/drm/drm_drv.h:550:
+				dev->agp->agp_mtrr = mtrr_add( dev->agp->agp_info.aper_base,

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#391: FILE: drivers/char/drm/drm_drv.h:551:
+							       dev->agp->agp_info.aper_size*1024*1024,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/char/drm/drm_drv.h:551:
+				dev->agp->agp_mtrr = mtrr_add( dev->agp->agp_info.aper_base,
+							       dev->agp->agp_info.aper_size*1024*1024,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: drivers/char/drm/drm_drv.h:551:
+							       dev->agp->agp_info.aper_size*1024*1024,
 							                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: drivers/char/drm/drm_drv.h:551:
+							       dev->agp->agp_info.aper_size*1024*1024,
 							                                        ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#393: FILE: drivers/char/drm/drm_drv.h:553:
+							       1 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#428: FILE: drivers/char/drm/drm_drv.h:653:
+		if (drm_core_has_AGP(dev) && dev->agp ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: drivers/char/drm/drm_memory.h:137:
+  return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: drivers/char/drm/drm_memory.h:142:
+  return NULL;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#467: FILE: drivers/char/drm/drm_memory.h:145:
+static inline unsigned long drm_follow_page (void *vaddr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/char/drm/drm_memory.h:147:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: drivers/char/drm/drm_os_linux.h:50:
+  unsigned long aper_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: drivers/char/drm/drm_os_linux.h:51:
+  unsigned long aper_size;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#563: FILE: drivers/char/drm/drm_os_linux.h:53:
+};
+#define DRM_AGP_MEM             int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: drivers/char/drm/drm_os_linux.h:58:
+static __inline__ int mtrr_add (unsigned long base, unsigned long size,

WARNING:INLINE: plain inline is preferred over __inline__
#568: FILE: drivers/char/drm/drm_os_linux.h:58:
+static __inline__ int mtrr_add (unsigned long base, unsigned long size,

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: drivers/char/drm/drm_os_linux.h:59:
+                                unsigned int type, char increment)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: drivers/char/drm/drm_os_linux.h:59:
+                                unsigned int type, char increment)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: drivers/char/drm/drm_os_linux.h:61:
+    return -ENODEV;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#574: FILE: drivers/char/drm/drm_os_linux.h:64:
+static __inline__ int mtrr_del (int reg, unsigned long base,

WARNING:INLINE: plain inline is preferred over __inline__
#574: FILE: drivers/char/drm/drm_os_linux.h:64:
+static __inline__ int mtrr_del (int reg, unsigned long base,

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: drivers/char/drm/drm_os_linux.h:65:
+                                unsigned long size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: drivers/char/drm/drm_os_linux.h:65:
+                                unsigned long size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: drivers/char/drm/drm_os_linux.h:67:
+    return -ENODEV;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#579: FILE: drivers/char/drm/drm_os_linux.h:69:
+}
+#define MTRR_TYPE_WRCOMB     1

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#597: FILE: drivers/char/drm/drm_vm.h:53:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INLINE: plain inline is preferred over __inline__
#619: FILE: drivers/char/drm/drm_vm.h:116:
+static __inline__ struct page *DRM(do_vm_nopage)(struct vm_area_struct *vma,

WARNING:TABSTOP: Statements should start on a tabstop
#660: FILE: drivers/char/drm/drm_vm.h:586:
+	  if (drm_core_has_AGP(dev) && dev->agp->cant_use_aperture) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 25 warnings, 11 checks, 825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
