WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
This adds basic KGDB support to ppc64, and support for kgdb8250 on the 'Maple'

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: arch/ppc64/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#80: FILE: arch/ppc64/kernel/kgdb.c:2:
+ * arch/ppc64/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#109: FILE: arch/ppc64/kernel/kgdb.c:31:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#148: FILE: arch/ppc64/kernel/kgdb.c:70:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <computeSignal>
#150: FILE: arch/ppc64/kernel/kgdb.c:72:
+static int computeSignal(unsigned int tt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#185: FILE: arch/ppc64/kernel/kgdb.c:107:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->nip'
#185: FILE: arch/ppc64/kernel/kgdb.c:107:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&arch_kgdb_ops.gdb_bpt_instr'
#185: FILE: arch/ppc64/kernel/kgdb.c:107:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: arch/ppc64/kernel/kgdb.c:140:
+#define PACK64(ptr,src) do { *(ptr++) = (src); } while(0)
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#218: FILE: arch/ppc64/kernel/kgdb.c:140:
+#define PACK64(ptr,src) do { *(ptr++) = (src); } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#218: FILE: arch/ppc64/kernel/kgdb.c:140:
+#define PACK64(ptr,src) do { *(ptr++) = (src); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#218: FILE: arch/ppc64/kernel/kgdb.c:140:
+#define PACK64(ptr,src) do { *(ptr++) = (src); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: arch/ppc64/kernel/kgdb.c:142:
+#define PACK32(ptr,src) do {          \
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#220: FILE: arch/ppc64/kernel/kgdb.c:142:
+#define PACK32(ptr,src) do {          \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	*(ptr32++) = (src);           \
+	ptr = (unsigned long *)ptr32; \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#225: FILE: arch/ppc64/kernel/kgdb.c:147:
+	} while(0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#247: FILE: arch/ppc64/kernel/kgdb.c:169:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <Following>
#248: FILE: arch/ppc64/kernel/kgdb.c:170:
+	Following are in struct thread_struct, not struct pt_regs,

CHECK:CAMELCASE: Avoid CamelCase: <Would>
#249: FILE: arch/ppc64/kernel/kgdb.c:171:
+	ignoring for now since kernel does not use them.  Would it

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#250: FILE: arch/ppc64/kernel/kgdb.c:172:
+	make sense to get them from the thread that kgdb is set to?
 	                                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <If>
#252: FILE: arch/ppc64/kernel/kgdb.c:174:
+	If this code is enabled, update the definition of NUMREGBYTES to

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: arch/ppc64/kernel/kgdb.c:189:
+	BUG_ON((unsigned long)ptr >

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#302: FILE: arch/ppc64/kernel/kgdb.c:224:
+#if 0

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#305: FILE: arch/ppc64/kernel/kgdb.c:227:
+	make sense to get them from the thread that kgdb is set to?
 	                                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: arch/ppc64/kernel/kgdb.c:244:
+	BUG_ON((unsigned long)ptr >

ERROR:SPACING: space required after that ',' (ctx:VxV)
#326: FILE: arch/ppc64/kernel/kgdb.c:248:
+#define UNPACK64(dest,ptr) do { dest = *(ptr++); } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#326: FILE: arch/ppc64/kernel/kgdb.c:248:
+#define UNPACK64(dest,ptr) do { dest = *(ptr++); } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#326: FILE: arch/ppc64/kernel/kgdb.c:248:
+#define UNPACK64(dest,ptr) do { dest = *(ptr++); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#326: FILE: arch/ppc64/kernel/kgdb.c:248:
+#define UNPACK64(dest,ptr) do { dest = *(ptr++); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: arch/ppc64/kernel/kgdb.c:250:
+#define UNPACK32(dest,ptr) do {       \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#328: FILE: arch/ppc64/kernel/kgdb.c:250:
+#define UNPACK32(dest,ptr) do {       \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	dest = *(ptr32++);            \
+	ptr = (unsigned long *)ptr32; \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: arch/ppc64/kernel/kgdb.c:255:
+	} while(0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#353: FILE: arch/ppc64/kernel/kgdb.c:275:
+#if 0

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#356: FILE: arch/ppc64/kernel/kgdb.c:278:
+	make sense to get them from the thread that kgdb is set to?
 	                                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: arch/ppc64/kernel/kgdb.c:294:
+	BUG_ON((unsigned long)ptr >

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#377: FILE: arch/ppc64/kernel/kgdb.c:299:
+ * This function does PowerPC64 specific procesing for interfacing to gdb.
                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#414: FILE: arch/ppc64/kernel/kgdb.c:336:
+	__asm__ __volatile__("mflr 0; std 0,0(%0)\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#442: FILE: arch/ppc64/kernel/kgdb.c:364:
+	__asm__ __volatile__("ld	13,32(%0)\n\

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: arch/ppc64/kernel/kgdb.c:365:
+^I ^I^I      ld^I14,40(%0)\n\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: arch/ppc64/kernel/kgdb.c:365:
+^I ^I^I      ld^I14,40(%0)\n\$

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#473: FILE: arch/ppc64/kernel/kgdb.c:395:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#567: FILE: include/asm-ppc64/kgdb.h:1:
+/*

WARNING:IF_1: Consider removing the #if 1 and its #endif
#587: FILE: include/asm-ppc64/kgdb.h:21:
+#if 1

WARNING:TYPO_SPELLING: 'fpr' may be misspelled - perhaps 'for'?
#592: FILE: include/asm-ppc64/kgdb.h:26:
+ *   32 gpr, 32 fpr, nip, msr, link, ctr
                 ^^^

WARNING:TYPO_SPELLING: 'fpr' may be misspelled - perhaps 'for'?
#604: FILE: include/asm-ppc64/kgdb.h:38:
+ *   32 gpr, 32 fpr, nip, msr, link, ctr
                 ^^^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#613: FILE: include/asm-ppc64/kgdb.h:47:
+#define BREAKPOINT()		asm(".long 0x7d821008"); /* twge r2, r2 */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 22 warnings, 12 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
