WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#38: 
and auxilliary stuff. Virtual pids are distinguished from real ones
    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:BIT_MACRO: Prefer using the BIT macro
#82: FILE: include/linux/pid.h:14:
+#define VPID_DIV	(1 << VPID_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pid' - possible side-effects?
#101: FILE: include/linux/pid.h:41:
+#define is_virtual_pid(pid)		(__is_virtual_pid(pid) || \
+		(((pid) == 1) && inside_vps()))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/pid.h:44:
+extern int vpid_to_pid(int pid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/pid.h:45:
+extern int __vpid_to_pid(int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/pid.h:46:
+extern pid_t pid_type_to_vpid(int type, pid_t pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/pid.h:47:
+extern pid_t __pid_type_to_vpid(int type, pid_t pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/pid.h:83:
+extern int alloc_vpid(int pid, int vpid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/pid.h:84:
+extern void free_vpid(int vpid);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/linux/sched.h:1352:
+static inline pid_t get_task_pid_ve(struct task_struct *tsk,
+		struct task_struct *ve_tsk)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#253: FILE: kernel/pid.c:69:
 static pidmap_t pidmap_array[PIDMAP_ENTRIES] =
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(PIDMAP_NRFREE), NULL } };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#253: FILE: kernel/pid.c:69:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(PIDMAP_NRFREE), NULL } };
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#253: FILE: kernel/pid.c:69:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(PIDMAP_NRFREE), NULL } };

ERROR:SPACING: space prohibited before that close square bracket ']'
#253: FILE: kernel/pid.c:69:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(PIDMAP_NRFREE), NULL } };

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#261: FILE: kernel/pid.c:78:
+	BUG_ON(__is_virtual_pid(pid) || pid == 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: kernel/pid.c:282:
+	struct pid * p;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#334: FILE: kernel/pid.c:289:
+	if (p) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: kernel/pid.c:305:
+	BUG_ON(is_virtual_pid(pid));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#377: FILE: kernel/pid.c:332:
+struct vpid_mapping
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: kernel/pid.c:352:
+	hlist_for_each_entry(map, elem,
+			&vpid_hash[vpid_hashfn(vnr, vpsid)], link) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#462: FILE: kernel/pid.c:417:
+			if (unlikely(m == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: kernel/pid.c:428:
+		hlist_add_head(&m->link,
+				&vpid_hash[vpid_hashfn(vpid, vpsid)]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: kernel/pid.c:450:
+		struct vpid_mapping *m;
+		m = kmem_cache_alloc(vpid_mapping_cachep, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: kernel/pid.c:475:
+		if (add_mapping(t->tgid, virt_tgid(t), vps->id,
+					&cache))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: kernel/pid.c:478:
+		if (add_mapping(t->signal->pgrp, virt_pgid(t), vps->id,
+					&cache))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: kernel/pid.c:481:
+		if (add_mapping(t->signal->session, virt_sid(t), vps->id,
+					&cache))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#536: FILE: kernel/pid.c:491:
+		for (i=0; i<(1<<pidhash_shift); i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#536: FILE: kernel/pid.c:491:
+		for (i=0; i<(1<<pidhash_shift); i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#536: FILE: kernel/pid.c:491:
+		for (i=0; i<(1<<pidhash_shift); i++) {
 		              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#554: FILE: kernel/pid.c:509:
+		struct vpid_mapping *m;
+		m = hlist_entry(cache.first, struct vpid_mapping, link);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#578: FILE: kernel/pid.c:533:
+		if ((result = switch_to_sparse_mapping(pid, vps)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#599: FILE: kernel/pid.c:554:
+		 * It is weak place. We do linear search. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "__lookup_vpid_mapping"
#606: FILE: kernel/pid.c:561:
+		} while (__lookup_vpid_mapping(result, m->vpsid) != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#609: FILE: kernel/pid.c:564:
+		 * collisions after future alloc_pidmap() */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: kernel/pid.c:570:
+		hlist_add_head(&m->link,
+				&vpid_hash[vpid_hashfn(result, m->vpsid)]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: kernel/pid.c:592:
+	BUG_ON(m == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#637: FILE: kernel/pid.c:592:
+	BUG_ON(m == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: kernel/pid.c:661:
+		kmem_cache_create("vpid_mapping",
+				sizeof(struct vpid_mapping),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108813.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 21 checks, 588 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108813.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
