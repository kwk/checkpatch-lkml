WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#51: FILE: include/linux/rmap.h:41:
+int exec_rmap(struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#52: FILE: include/linux/rmap.h:42:
+int dup_rmap(struct mm_struct *, struct mm_struct *oldmm);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#53: FILE: include/linux/rmap.h:43:
+void exit_rmap(struct mm_struct *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#157: FILE: mm/rmap.c:43:
+};
+static kmem_cache_t *anonmm_cachep;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: mm/rmap.c:52:
+	anonmm_cachep = kmem_cache_create("anonmm",
+			sizeof(struct anonmm), 0,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_rmap', this function's name, in a string
#169: FILE: mm/rmap.c:55:
+		panic("init_rmap: Cannot alloc anonmm SLAB cache");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: mm/rmap.c:112:
+		BUG_ON(anonmm == anonhd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: mm/rmap.c:116:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: mm/rmap.c:120:
+		BUG_ON(anonhd->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: mm/rmap.c:121:
+		BUG_ON(!list_empty(&anonhd->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#244: FILE: mm/rmap.c:130:
+	BUG_ON(anonmm->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: mm/rmap.c:131:
+	BUG_ON(anonmm == anonhd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: mm/rmap.c:135:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#256: FILE: mm/rmap.c:142:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#295: FILE: mm/rmap.c:166:
+	return (address >= vma->vm_start && address < vma->vm_end)?
 	                                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#296: FILE: mm/rmap.c:167:
+		address: NOADDR;
 		       ^

WARNING:INDENTED_LABEL: labels should not be indented
#296: FILE: mm/rmap.c:167:
+		address: NOADDR;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: mm/rmap.c:176:
+static int page_referenced_one(struct page *page,
+	struct mm_struct *mm, unsigned long address, int *mapcount)

CHECK:SPACING: No space is necessary after a cast
#374: FILE: mm/rmap.c:220:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#392: FILE: mm/rmap.c:230:
+		referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#409: FILE: mm/rmap.c:246:
+		referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#453: FILE: mm/rmap.c:285:
+			referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#465: FILE: mm/rmap.c:297:
+			referenced += page_referenced_one(

CHECK:SPACING: No space is necessary after a cast
#518: FILE: mm/rmap.c:357:
+		page->mapping = (void *) anonmm;

CHECK:SPACING: No space is necessary after a cast
#535: FILE: mm/rmap.c:387:
+	if (anonmm == (struct anonmm *) page->mapping &&

CHECK:SPACING: No space is necessary after a cast
#544: FILE: mm/rmap.c:394:
+		if (anonmm != (struct anonmm *) page->mapping) {

CHECK:SPACING: No space is necessary after a cast
#547: FILE: mm/rmap.c:397:
+			page->mapping = (void *) anonmm;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: mm/rmap.c:452:
+static int try_to_unmap_one(struct page *page, struct mm_struct *mm,
+	unsigned long address, int *mapcount, struct vm_area_struct *vma)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#617: FILE: mm/rmap.c:490:
+	if (!vma || (vma->vm_flags & (VM_LOCKED|VM_RESERVED))) {
 	                                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: mm/rmap.c:505:
+		BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#635: FILE: mm/rmap.c:508:
+		BUG_ON(pte_file(*pte));

CHECK:SPACING: No space is necessary after a cast
#658: FILE: mm/rmap.c:532:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#668: FILE: mm/rmap.c:542:
+		ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#684: FILE: mm/rmap.c:558:
+		ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#720: FILE: mm/rmap.c:595:
+			ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#735: FILE: mm/rmap.c:607:
+			ret = try_to_unmap_one(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294938.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 14 warnings, 20 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294938.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
