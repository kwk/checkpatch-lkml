CHECK:SPACING: No space is necessary after a cast
#121: FILE: arch/i386/kernel/mtrr.c:394:
+		write_cr4(ctxt->cr4val & (unsigned char) ~(1 << 7));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#125: FILE: arch/i386/kernel/mtrr.c:398:
+	/*  Disable and flush caches. Note that wbinvd flushes the TLBs as
+	   a side-effect  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: arch/i386/kernel/mtrr.c:398:
+	   a side-effect  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: arch/i386/kernel/mtrr.c:401:
+		unsigned int cr0 = read_cr0() | 0x40000000;
+		wbinvd();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#146: FILE: arch/i386/kernel/mtrr.c:408:
+		rdmsr(MTRRdefType_MSR, ctxt->deftype_lo, ctxt->deftype_hi);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <getCx86>
#151: FILE: arch/i386/kernel/mtrr.c:413:
+		tmp = getCx86(CX86_CCR3);

CHECK:CAMELCASE: Avoid CamelCase: <setCx86>
#152: FILE: arch/i386/kernel/mtrr.c:414:
+		setCx86(CX86_CCR3, (tmp & 0x0f) | 0x10);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRcap_MSR>
#242: FILE: arch/i386/kernel/mtrr.c:459:
+		rdmsr(MTRRcap_MSR, config, dummy);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: arch/i386/kernel/mtrr.c:479:
+^I/* ServerWorks LE chipsets have problems with write-combining $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#269: FILE: arch/i386/kernel/mtrr.c:480:
+	/* ServerWorks LE chipsets have problems with write-combining 
+	   Don't allow it and leave room for other chipsets to be tagged */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#269: FILE: arch/i386/kernel/mtrr.c:480:
+	   Don't allow it and leave room for other chipsets to be tagged */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#277: FILE: arch/i386/kernel/mtrr.c:485:
+			printk(KERN_INFO

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: arch/i386/kernel/mtrr.c:509:
+	       unsigned long *size, mtrr_type * type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <MTRRphysMask_MSR>
#323: FILE: arch/i386/kernel/mtrr.c:513:
+	rdmsr(MTRRphysMask_MSR(reg), mask_lo, mask_hi);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRphysBase_MSR>
#332: FILE: arch/i386/kernel/mtrr.c:522:
+	rdmsr(MTRRphysBase_MSR(reg), base_lo, base_hi);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#339: FILE: arch/i386/kernel/mtrr.c:529:
+	/* This works correctly if size is a power of two, i.e. a
+	   contiguous range. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#339: FILE: arch/i386/kernel/mtrr.c:529:
+	   contiguous range. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: arch/i386/kernel/mtrr.c:537:
+	      unsigned long *size, mtrr_type * type)

CHECK:SPACING: No space is necessary after a cast
#360: FILE: arch/i386/kernel/mtrr.c:550:
+	((unsigned char *) base)[3] = getCx86(arr);

CHECK:SPACING: No space is necessary after a cast
#361: FILE: arch/i386/kernel/mtrr.c:551:
+	((unsigned char *) base)[2] = getCx86(arr + 1);

CHECK:SPACING: No space is necessary after a cast
#362: FILE: arch/i386/kernel/mtrr.c:552:
+	((unsigned char *) base)[1] = getCx86(arr + 2);

CHECK:SPACING: No space is necessary after a cast
#368: FILE: arch/i386/kernel/mtrr.c:558:
+	shift = ((unsigned char *) base)[1] & 0x0f;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: arch/i386/kernel/mtrr.c:607:
+	     unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: arch/i386/kernel/mtrr.c:667:
+		unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#627: FILE: arch/i386/kernel/mtrr.c:682:
+			 unsigned long *size, mtrr_type * type);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#708: FILE: arch/i386/kernel/mtrr.c:703:
+		/* The invalid bit is kept in the mask, so we simply clear the
+		   relevant mask register to disable a range. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#708: FILE: arch/i386/kernel/mtrr.c:703:
+		   relevant mask register to disable a range. */

WARNING:SPACING: space prohibited before semicolon
#734: FILE: arch/i386/kernel/mtrr.c:729:
+	for (arr_size = 0; size; arr_size++, size >>= 1) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#734: FILE: arch/i386/kernel/mtrr.c:729:
+	for (arr_size = 0; size; arr_size++, size >>= 1) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#773: FILE: arch/i386/kernel/mtrr.c:766:
+	setCx86(arr, ((unsigned char *) &base)[3]);

CHECK:SPACING: No space is necessary after a cast
#774: FILE: arch/i386/kernel/mtrr.c:767:
+	setCx86(arr + 1, ((unsigned char *) &base)[2]);

CHECK:SPACING: No space is necessary after a cast
#775: FILE: arch/i386/kernel/mtrr.c:768:
+	setCx86(arr + 2, (((unsigned char *) &base)[1]) | arr_size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#870: FILE: arch/i386/kernel/mtrr.c:803:
+		/* Set the register to the base, the type (off by one) and an
+		   inverted bitmask of the size The size is the only odd

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: arch/i386/kernel/mtrr.c:805:
+^I^I   1111 1011 but if you subtract one and invert you get the   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#875: FILE: arch/i386/kernel/mtrr.c:808:
+		   But ~(x - 1) == ~x + 1 == -x. Two's complement rocks!  */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#900: FILE: arch/i386/kernel/mtrr.c:833:
+		high = low = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#904: FILE: arch/i386/kernel/mtrr.c:837:
+			low = -size << PAGE_SHIFT | 0x1f;	/* only support write-combining... */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Unbalanced braces around else statement
#905: FILE: arch/i386/kernel/mtrr.c:838:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1021: FILE: arch/i386/kernel/mtrr.c:882:
+	if ((vr->base_lo & 0xfffff0ffUL) != (lo & 0xfffff0ffUL)
+	    || (vr->base_hi & 0xfUL) != (hi & 0xfUL)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1037: FILE: arch/i386/kernel/mtrr.c:890:
+	if ((vr->mask_lo & 0xfffff800UL) != (lo & 0xfffff800UL)
+	    || (vr->mask_hi & 0xfUL) != (hi & 0xfUL)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1057: FILE: arch/i386/kernel/mtrr.c:898:
+get_fixed_ranges(mtrr_type * frs)

CHECK:SPACING: No space is necessary after a cast
#1059: FILE: arch/i386/kernel/mtrr.c:900:
+	unsigned long *p = (unsigned long *) frs;

CHECK:CAMELCASE: Avoid CamelCase: <MTRRfix64K_00000_MSR>
#1064: FILE: arch/i386/kernel/mtrr.c:903:
+	rdmsr(MTRRfix64K_00000_MSR, p[0], p[1]);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRfix16K_80000_MSR>
#1067: FILE: arch/i386/kernel/mtrr.c:906:
+		rdmsr(MTRRfix16K_80000_MSR + i, p[2 + i * 2], p[3 + i * 2]);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRfix4K_C0000_MSR>
#1069: FILE: arch/i386/kernel/mtrr.c:908:
+		rdmsr(MTRRfix4K_C0000_MSR + i, p[6 + i * 2], p[7 + i * 2]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1073: FILE: arch/i386/kernel/mtrr.c:912:
+set_fixed_ranges_testing(mtrr_type * frs)

CHECK:SPACING: No space is necessary after a cast
#1093: FILE: arch/i386/kernel/mtrr.c:914:
+	unsigned long *p = (unsigned long *) frs;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1144: FILE: arch/i386/kernel/mtrr.c:961:
+	nvrs = state->num_var_ranges = get_num_var_ranges();

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1146: FILE: arch/i386/kernel/mtrr.c:963:
+	vrs = state->var_ranges
+	    = kmalloc(nvrs * sizeof (struct mtrr_var_range), GFP_KERNEL);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1146: FILE: arch/i386/kernel/mtrr.c:963:
+	    = kmalloc(nvrs * sizeof (struct mtrr_var_range), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vrs"
#1147: FILE: arch/i386/kernel/mtrr.c:964:
+	if (vrs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1148: FILE: arch/i386/kernel/mtrr.c:965:
+		nvrs = state->num_var_ranges = 0;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1164: FILE: arch/i386/kernel/mtrr.c:981:
+	if (state->var_ranges)
+		kfree(state->var_ranges);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1207: FILE: arch/i386/kernel/mtrr.c:1003:
+	/*  Set_mtrr_restore restores the old value of MTRRdefType,
+	   so to set it we fiddle with the saved value  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: arch/i386/kernel/mtrr.c:1003:
+	   so to set it we fiddle with the saved value  */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1209: FILE: arch/i386/kernel/mtrr.c:1005:
+	if ((ctxt->deftype_lo & 0xff) != state->def_type
+	    || ((ctxt->deftype_lo & 0xc00) >> 10) != state->enabled) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1339: FILE: arch/i386/kernel/mtrr.c:1079:
+	/*  Now all CPUs should have finished the function. Release the barrier to
+	   allow them to re-enable their caches and return from their interrupt,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1340: FILE: arch/i386/kernel/mtrr.c:1080:
+	   then enable the local cache and return  */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1390: FILE: arch/i386/kernel/mtrr.c:1100:
+	printk("mtrr: probably your BIOS does not setup all CPUs\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1407: FILE: arch/i386/kernel/mtrr.c:1117:
+	if ((usage_table = kmalloc(max * sizeof *usage_table, GFP_KERNEL))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SIZEOF_PARENTHESIS: sizeof *usage_table should be sizeof(*usage_table)
#1407: FILE: arch/i386/kernel/mtrr.c:1117:
+	if ((usage_table = kmalloc(max * sizeof *usage_table, GFP_KERNEL))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1409: FILE: arch/i386/kernel/mtrr.c:1119:
+		printk("mtrr: could not allocate\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1422: FILE: arch/i386/kernel/mtrr.c:1125:
+	if ((ascii_buffer = kmalloc(max * LINE_SIZE, GFP_KERNEL)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1423: FILE: arch/i386/kernel/mtrr.c:1126:
+		printk("mtrr: could not allocate\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 3'
#1551: FILE: arch/i386/kernel/mtrr.c:1199:
+			if ((i == 3) && arr3_protected)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lsize == 0'
#1558: FILE: arch/i386/kernel/mtrr.c:1206:
+		if ((lsize == 0) && (size >= 0x40))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size >= 0x40'
#1558: FILE: arch/i386/kernel/mtrr.c:1206:
+		if ((lsize == 0) && (size >= 0x40))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1667: FILE: arch/i386/kernel/mtrr.c:1275:
+		/* Apply the K6 block alignment and size rules
+		   In order

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1674: FILE: arch/i386/kernel/mtrr.c:1282:
+		if (type > MTRR_TYPE_WRCOMB || size < (1 << (17 - PAGE_SHIFT))
+		    || (size & ~(size - 1)) - size || (base & (size - 1)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1682: FILE: arch/i386/kernel/mtrr.c:1287:
+^I^I/*  For Intel PPro stepping <= 7, must be 4 MiB aligned $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1683: FILE: arch/i386/kernel/mtrr.c:1288:
+		/*  For Intel PPro stepping <= 7, must be 4 MiB aligned 
+		   and not touch 0x70000000->0x7003FFFF */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1683: FILE: arch/i386/kernel/mtrr.c:1288:
+		   and not touch 0x70000000->0x7003FFFF */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1689: FILE: arch/i386/kernel/mtrr.c:1294:
+				printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1696: FILE: arch/i386/kernel/mtrr.c:1301:
+			    (type == MTRR_TYPE_WRCOMB
+			     || type == MTRR_TYPE_WRBACK)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1697: FILE: arch/i386/kernel/mtrr.c:1302:
+				printk(KERN_WARNING

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1702: FILE: arch/i386/kernel/mtrr.c:1307:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1716: FILE: arch/i386/kernel/mtrr.c:1316:
+			if (type != MTRR_TYPE_WRCOMB
+			    && (centaur_mcr_type == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1717: FILE: arch/i386/kernel/mtrr.c:1317:
+			    && (centaur_mcr_type == 0
+				|| type != MTRR_TYPE_UNCACHABLE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1718: FILE: arch/i386/kernel/mtrr.c:1318:
+				printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1725: FILE: arch/i386/kernel/mtrr.c:1325:
+			printk(KERN_WARNING

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1731: FILE: arch/i386/kernel/mtrr.c:1331:
+		/*  Check upper bits of base and last are equal and lower bits are 0
+		   for base and 1 for last  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1731: FILE: arch/i386/kernel/mtrr.c:1331:
+		   for base and 1 for last  */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1733: FILE: arch/i386/kernel/mtrr.c:1333:
+		for (lbase = base; !(lbase & 1) && (last & 1);
+		     lbase = lbase >> 1, last = last >> 1) ;

WARNING:SPACING: space prohibited before semicolon
#1734: FILE: arch/i386/kernel/mtrr.c:1334:
+		     lbase = lbase >> 1, last = last >> 1) ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1736: FILE: arch/i386/kernel/mtrr.c:1336:
+			printk(KERN_WARNING

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1777: FILE: arch/i386/kernel/mtrr.c:1348:
+		printk("mtrr: type: %u illegal\n", type);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == MTRR_TYPE_WRCOMB'
#1790: FILE: arch/i386/kernel/mtrr.c:1353:
+	if ((type == MTRR_TYPE_WRCOMB) && !have_wrcomb()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1791: FILE: arch/i386/kernel/mtrr.c:1354:
+		printk(KERN_WARNING

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1793: FILE: arch/i386/kernel/mtrr.c:1356:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1806: FILE: arch/i386/kernel/mtrr.c:1360:
+		printk("mtrr: base or size exceeds the MTRR width\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base < lbase'
#1818: FILE: arch/i386/kernel/mtrr.c:1372:
+		if ((base < lbase) && (base + size <= lbase))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base < lbase'
#1821: FILE: arch/i386/kernel/mtrr.c:1375:
+		if ((base < lbase) || (base + size > lbase + lsize)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1823: FILE: arch/i386/kernel/mtrr.c:1377:
+			printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1825: FILE: arch/i386/kernel/mtrr.c:1379:
+			       "mtrr: 0x%lx000,0x%lx000 overlaps existing"
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1850: FILE: arch/i386/kernel/mtrr.c:1404:
+		printk("mtrr: no more MTRRs available\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1894: FILE: arch/i386/kernel/mtrr.c:1465:
+		printk("mtrr: size and base must be multiples of 4 kiB\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1895: FILE: arch/i386/kernel/mtrr.c:1466:
+		printk("mtrr: size: 0x%lx  base: 0x%lx\n", size, base);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1959: FILE: arch/i386/kernel/mtrr.c:1520:
+			printk("mtrr: no MTRR for %lx000,%lx000 found\n", base,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2006: FILE: arch/i386/kernel/mtrr.c:1527:
+		printk("mtrr: register: %d too big\n", reg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg == 3'
#2010: FILE: arch/i386/kernel/mtrr.c:1531:
+		if ((reg == 3) && arr3_protected) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2012: FILE: arch/i386/kernel/mtrr.c:1533:
+			printk("mtrr: ARR3 cannot be changed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2019: FILE: arch/i386/kernel/mtrr.c:1540:
+		printk("mtrr: MTRR %d not used\n", reg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2024: FILE: arch/i386/kernel/mtrr.c:1545:
+		printk("mtrr: reg: %d has count=0\n", reg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2060: FILE: arch/i386/kernel/mtrr.c:1582:
+		printk("mtrr: size and base must be multiples of 4 kiB\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2061: FILE: arch/i386/kernel/mtrr.c:1583:
+		printk("mtrr: size: 0x%lx  base: 0x%lx\n", size, base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fcount"
#2090: FILE: arch/i386/kernel/mtrr.c:1599:
+	if (fcount == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2091: FILE: arch/i386/kernel/mtrr.c:1600:
+		if ((fcount =

WARNING:SIZEOF_PARENTHESIS: sizeof *fcount should be sizeof(*fcount)
#2092: FILE: arch/i386/kernel/mtrr.c:1601:
+		     kmalloc(max * sizeof *fcount, GFP_KERNEL)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2093: FILE: arch/i386/kernel/mtrr.c:1602:
+			printk("mtrr: could not allocate\n");

WARNING:SIZEOF_PARENTHESIS: sizeof *fcount should be sizeof(*fcount)
#2096: FILE: arch/i386/kernel/mtrr.c:1605:
+		memset(fcount, 0, max * sizeof *fcount);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2120: FILE: arch/i386/kernel/mtrr.c:1612:
+			printk("mtrr: size: 0x%lx  base: 0x%lx\n", size, base);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2143: FILE: arch/i386/kernel/mtrr.c:1635:
+			printk("mtrr: size: 0x%lx  base: 0x%lx\n", size, base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fcount"
#2152: FILE: arch/i386/kernel/mtrr.c:1644:
+	if (fcount == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2163: FILE: arch/i386/kernel/mtrr.c:1653:
+mtrr_read(struct file *file, char *buf, size_t len, loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2208: FILE: arch/i386/kernel/mtrr.c:1666:
+mtrr_write(struct file *file, const char *buf, size_t len, loff_t * ppos)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2278: FILE: arch/i386/kernel/mtrr.c:1692:
+		reg = simple_strtoul(line + 8, &ptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2285: FILE: arch/i386/kernel/mtrr.c:1699:
+		printk("mtrr: no \"base=\" in line: \"%s\"\n", line);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#2288: FILE: arch/i386/kernel/mtrr.c:1702:
+	base = simple_strtoull(line + 5, &ptr, 0);

WARNING:SPACING: space prohibited before semicolon
#2289: FILE: arch/i386/kernel/mtrr.c:1703:
+	for (; isspace(*ptr); ++ptr) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2289: FILE: arch/i386/kernel/mtrr.c:1703:
+	for (; isspace(*ptr); ++ptr) ;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2291: FILE: arch/i386/kernel/mtrr.c:1705:
+		printk("mtrr: no \"size=\" in line: \"%s\"\n", line);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#2294: FILE: arch/i386/kernel/mtrr.c:1708:
+	size = simple_strtoull(ptr + 5, &ptr, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2296: FILE: arch/i386/kernel/mtrr.c:1710:
+		printk("mtrr: size and base must be multiples of 4 kiB\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2297: FILE: arch/i386/kernel/mtrr.c:1711:
+		printk("mtrr: size: 0x%Lx  base: 0x%Lx\n", size, base);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2297: FILE: arch/i386/kernel/mtrr.c:1711:
+		printk("mtrr: size: 0x%Lx  base: 0x%Lx\n", size, base);

WARNING:SPACING: space prohibited before semicolon
#2300: FILE: arch/i386/kernel/mtrr.c:1714:
+	for (; isspace(*ptr); ++ptr) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2300: FILE: arch/i386/kernel/mtrr.c:1714:
+	for (; isspace(*ptr); ++ptr) ;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2302: FILE: arch/i386/kernel/mtrr.c:1716:
+		printk("mtrr: no \"type=\" in line: \"%s\"\n", line);

WARNING:SPACING: space prohibited before semicolon
#2306: FILE: arch/i386/kernel/mtrr.c:1720:
+	for (; isspace(*ptr); ++ptr) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2306: FILE: arch/i386/kernel/mtrr.c:1720:
+	for (; isspace(*ptr); ++ptr) ;

CHECK:SPACING: No space is necessary after a cast
#2313: FILE: arch/i386/kernel/mtrr.c:1727:
+		    mtrr_add_page((unsigned long) base, (unsigned long) size, i,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2319: FILE: arch/i386/kernel/mtrr.c:1733:
+	printk("mtrr: illegal type: \"%s\"\n", ptr);

CHECK:SPACING: No space is necessary after a cast
#2468: FILE: arch/i386/kernel/mtrr.c:1752:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2468: FILE: arch/i386/kernel/mtrr.c:1752:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2479: FILE: arch/i386/kernel/mtrr.c:1763:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2479: FILE: arch/i386/kernel/mtrr.c:1763:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2488: FILE: arch/i386/kernel/mtrr.c:1772:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2488: FILE: arch/i386/kernel/mtrr.c:1772:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2497: FILE: arch/i386/kernel/mtrr.c:1781:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2497: FILE: arch/i386/kernel/mtrr.c:1781:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2504: FILE: arch/i386/kernel/mtrr.c:1788:
+		if (copy_from_user(&gentry, (void *) arg, sizeof gentry))

WARNING:SIZEOF_PARENTHESIS: sizeof gentry should be sizeof(gentry)
#2504: FILE: arch/i386/kernel/mtrr.c:1788:
+		if (copy_from_user(&gentry, (void *) arg, sizeof gentry))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2512: FILE: arch/i386/kernel/mtrr.c:1796:
+		if (gentry.base + gentry.size > 0x100000
+		    || gentry.size == 0x100000)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2513: FILE: arch/i386/kernel/mtrr.c:1797:
+			gentry.base = gentry.size = gentry.type = 0;

CHECK:BRACES: Unbalanced braces around else statement
#2514: FILE: arch/i386/kernel/mtrr.c:1798:
+		else {

CHECK:SPACING: No space is necessary after a cast
#2520: FILE: arch/i386/kernel/mtrr.c:1804:
+		if (copy_to_user((void *) arg, &gentry, sizeof gentry))

WARNING:SIZEOF_PARENTHESIS: sizeof gentry should be sizeof(gentry)
#2520: FILE: arch/i386/kernel/mtrr.c:1804:
+		if (copy_to_user((void *) arg, &gentry, sizeof gentry))

CHECK:SPACING: No space is necessary after a cast
#2526: FILE: arch/i386/kernel/mtrr.c:1810:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2526: FILE: arch/i386/kernel/mtrr.c:1810:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2537: FILE: arch/i386/kernel/mtrr.c:1821:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2537: FILE: arch/i386/kernel/mtrr.c:1821:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2546: FILE: arch/i386/kernel/mtrr.c:1830:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2546: FILE: arch/i386/kernel/mtrr.c:1830:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2555: FILE: arch/i386/kernel/mtrr.c:1839:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

WARNING:SIZEOF_PARENTHESIS: sizeof sentry should be sizeof(sentry)
#2555: FILE: arch/i386/kernel/mtrr.c:1839:
+		if (copy_from_user(&sentry, (void *) arg, sizeof sentry))

CHECK:SPACING: No space is necessary after a cast
#2562: FILE: arch/i386/kernel/mtrr.c:1846:
+		if (copy_from_user(&gentry, (void *) arg, sizeof gentry))

WARNING:SIZEOF_PARENTHESIS: sizeof gentry should be sizeof(gentry)
#2562: FILE: arch/i386/kernel/mtrr.c:1846:
+		if (copy_from_user(&gentry, (void *) arg, sizeof gentry))

CHECK:SPACING: No space is necessary after a cast
#2569: FILE: arch/i386/kernel/mtrr.c:1853:
+		if (copy_to_user((void *) arg, &gentry, sizeof gentry))

WARNING:SIZEOF_PARENTHESIS: sizeof gentry should be sizeof(gentry)
#2569: FILE: arch/i386/kernel/mtrr.c:1853:
+		if (copy_to_user((void *) arg, &gentry, sizeof gentry))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fcount"
#2582: FILE: arch/i386/kernel/mtrr.c:1866:
+	if (fcount == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2589: FILE: arch/i386/kernel/mtrr.c:1873:
+				printk("mtrr: reg %d not used\n", i);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2613: FILE: arch/i386/kernel/mtrr.c:1883:
+static struct file_operations mtrr_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#2614: FILE: arch/i386/kernel/mtrr.c:1884:
+	owner:THIS_MODULE,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2615: FILE: arch/i386/kernel/mtrr.c:1885:
+	read:mtrr_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#2615: FILE: arch/i386/kernel/mtrr.c:1885:
+	read:mtrr_read,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2616: FILE: arch/i386/kernel/mtrr.c:1886:
+	write:mtrr_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2616: FILE: arch/i386/kernel/mtrr.c:1886:
+	write:mtrr_write,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2617: FILE: arch/i386/kernel/mtrr.c:1887:
+	ioctl:mtrr_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2617: FILE: arch/i386/kernel/mtrr.c:1887:
+	ioctl:mtrr_ioctl,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2618: FILE: arch/i386/kernel/mtrr.c:1888:
+	release:mtrr_close,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2618: FILE: arch/i386/kernel/mtrr.c:1888:
+	release:mtrr_close,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2673: FILE: arch/i386/kernel/mtrr.c:1911:
+		if (size == 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2675: FILE: arch/i386/kernel/mtrr.c:1913:
+		else {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2719: FILE: arch/i386/kernel/mtrr.c:1945:
+typedef struct {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2899: FILE: arch/i386/kernel/mtrr.c:2066:
+		printk("mtrr: ARR usage was not enabled, enabled manually\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2901: FILE: arch/i386/kernel/mtrr.c:2068:
+		printk("mtrr: ARR3 cannot be changed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2910: FILE: arch/i386/kernel/mtrr.c:2075:
+		printk("mtrr: ARR3 was write protected, unprotected\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2926: FILE: arch/i386/kernel/mtrr.c:2087:
+	unsigned i;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2998: FILE: arch/i386/kernel/mtrr.c:2119:
+^I/*  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2999: FILE: arch/i386/kernel/mtrr.c:2120:
+^I *  Throw the main write-combining switch... $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3001: FILE: arch/i386/kernel/mtrr.c:2122:
+^I *  cleverer things and we should behave. $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3019: FILE: arch/i386/kernel/mtrr.c:2137:
+	unsigned i;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3119: FILE: arch/i386/kernel/mtrr.c:2184:
+		switch (boot_cpu_data.x86_vendor) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3122: FILE: arch/i386/kernel/mtrr.c:2187:
+			/* The original Athlon docs said that
+			   total addressable memory is 44 bits wide.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3132: FILE: arch/i386/kernel/mtrr.c:2197:
+			if (boot_cpu_data.x86 == 7
+			    && (cpuid_eax(0x80000000) >= 0x80000008)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3134: FILE: arch/i386/kernel/mtrr.c:2199:
+				u32 phys_addr;
+				phys_addr = cpuid_eax(0x80000008) & 0xff;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#3216: FILE: arch/i386/kernel/mtrr.c:2231:
+	} else
+	    if (test_bit(X86_FEATURE_CYRIX_ARR, &boot_cpu_data.x86_capability))

CHECK:BRACES: Unbalanced braces around else statement
#3216: FILE: arch/i386/kernel/mtrr.c:2231:
+	} else

WARNING:TABSTOP: Statements should start on a tabstop
#3217: FILE: arch/i386/kernel/mtrr.c:2232:
+	    if (test_bit(X86_FEATURE_CYRIX_ARR, &boot_cpu_data.x86_capability))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3217: FILE: arch/i386/kernel/mtrr.c:2232:
+	    if (test_bit(X86_FEATURE_CYRIX_ARR, &boot_cpu_data.x86_capability))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#3227: FILE: arch/i386/kernel/mtrr.c:2242:
+	} else
+	    if (test_bit

CHECK:BRACES: Unbalanced braces around else statement
#3227: FILE: arch/i386/kernel/mtrr.c:2242:
+	} else

WARNING:TABSTOP: Statements should start on a tabstop
#3228: FILE: arch/i386/kernel/mtrr.c:2243:
+	    if (test_bit

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3243: FILE: arch/i386/kernel/mtrr.c:2258:
+	printk("mtrr: v%s Richard Gooch (rgooch@atnf.csiro.au)\n"

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3329: FILE: arch/i386/kernel/mtrr.c:2289:
+	/*  Note that this is not ideal, since the cache is only flushed/disabled
+	   for this CPU while the MTRRs are changed, but changing this requires

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3330: FILE: arch/i386/kernel/mtrr.c:2290:
+	   more invasive changes to the way the kernel boots  */

WARNING:SIZEOF_PARENTHESIS: sizeof mask should be sizeof(mask)
#3335: FILE: arch/i386/kernel/mtrr.c:2295:
+	for (count = 0; count < sizeof mask * 8; ++count) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3363: FILE: arch/i386/kernel/mtrr.c:2323:
+		printk("mtrr: SMP support incomplete for this vendor\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#3398: FILE: arch/i386/kernel/mtrr.c:2345:
+	    create_proc_entry("mtrr", S_IWUSR | S_IRUGO, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3409: FILE: arch/i386/kernel/mtrr.c:2353:
+				      S_IFREG | S_IRUGO | S_IWUSR,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500269.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 108 warnings, 68 checks, 3371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500269.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
