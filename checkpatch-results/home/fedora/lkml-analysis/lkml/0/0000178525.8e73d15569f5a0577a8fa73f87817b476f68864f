ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: mmigrate.c:42:
+struct page * migrate_onepage_nonblock(struct page *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: mmigrate.c:42:
+struct page * migrate_onepage_nonblock(struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#85: FILE: mmigrate.c:42:
+struct page * migrate_onepage_nonblock(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#87: FILE: mmigrate.c:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#90: FILE: mmigrate.c:47:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_mapping"
#106: FILE: mmigrate.c:63:
+	if (page_mapping(page) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#114: FILE: mmigrate.c:71:
+extern inline void extract_pages(struct page *, struct zone *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: mmigrate.c:72:
+                unsigned int, unsigned int,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: mmigrate.c:72:
+extern inline void extract_pages(struct page *, struct zone *,
+                unsigned int, unsigned int,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mmigrate.c:72:
+                unsigned int, unsigned int,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: mmigrate.c:73:
+                struct free_area *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: mmigrate.c:73:
+                struct free_area *);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#118: FILE: mmigrate.c:75:
+extern inline void set_page_order(struct page *page, int order);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: mmigrate.c:77:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: mmigrate.c:92:
+        zone->free_pages += order_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: mmigrate.c:92:
+        zone->free_pages += order_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: mmigrate.c:94:
+        list_add_tail(&page->lru, &zone->free_area[order].free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: mmigrate.c:94:
+        list_add_tail(&page->lru, &zone->free_area[order].free_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: mmigrate.c:95:
+        zone->free_area[order].nr_free++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: mmigrate.c:95:
+        zone->free_area[order].nr_free++;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: mmigrate.c:106:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#150: FILE: mmigrate.c:107:
+	printk(KERN_ERR "coalesce_memory!!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'coalesce_memory', this function's name, in a string
#150: FILE: mmigrate.c:107:
+	printk(KERN_ERR "coalesce_memory!!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: mmigrate.c:109:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#153: FILE: mmigrate.c:110:
+	for (torder = order-1; torder > max_order_delta; torder--) {
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: mmigrate.c:118:
+^I^Inr_pages = (1UL << order) - (1UL << torder); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: mmigrate.c:123:
+        ^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: mmigrate.c:123:
+        ^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: mmigrate.c:123:
+        ^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: mmigrate.c:137:
+^I^I^Ifwd_nr_freeable = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: mmigrate.c:140:
+^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#185: FILE: mmigrate.c:142:
+			for (wcount=1; wcount<=nr_pages; wcount++) {
 			           ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#185: FILE: mmigrate.c:142:
+			for (wcount=1; wcount<=nr_pages; wcount++) {
 			                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: mmigrate.c:143:
+^I^I^I^Ipwalk = page - wcount; $

CHECK:BRACES: braces {} should be used on all arms of this statement
#188: FILE: mmigrate.c:145:
+				if (!is_page_busy(pwalk))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#190: FILE: mmigrate.c:147:
+				else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: mmigrate.c:162:
+^I^I^Ifor (wcount = (1UL<<torder); wcount < nr_pages+(1UL<<torder); $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#205: FILE: mmigrate.c:162:
+			for (wcount = (1UL<<torder); wcount < nr_pages+(1UL<<torder); 
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: mmigrate.c:162:
+			for (wcount = (1UL<<torder); wcount < nr_pages+(1UL<<torder); 
 			                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#205: FILE: mmigrate.c:162:
+			for (wcount = (1UL<<torder); wcount < nr_pages+(1UL<<torder); 
 			                                                   ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#207: FILE: mmigrate.c:164:
+				wcount++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: mmigrate.c:169:
+				if (!is_page_busy(pwalk))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#214: FILE: mmigrate.c:171:
+				else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: mmigrate.c:182:
+^I^I^I/* found enough freeable pages, remove the middle $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: mmigrate.c:183:
+^I^I ^I * page from the free list, target pages $

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: mmigrate.c:183:
+^I^I ^I * page from the free list, target pages $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: mmigrate.c:183:
+^I^I ^I * page from the free list, target pages $

WARNING:REPEATED_WORD: Possible repeated word: 'pages'
#227: FILE: mmigrate.c:184:
+		 	 * page from the free list, target pages 
+			 * pages from LRU, and try to migrate.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: mmigrate.c:187:
+^I^I^Iextract_pages(page, zone, 0, torder, area); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: mmigrate.c:189:
+			printk(KERN_ERR "extract page!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: mmigrate.c:191:
+        ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: mmigrate.c:191:
+        ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: mmigrate.c:191:
+        ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#239: FILE: mmigrate.c:196:
+			for (tpage = page - back_nr_freeable; tpage < page; tpage++) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: mmigrate.c:207:
+^I^I^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: mmigrate.c:209:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: mmigrate.c:209:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: mmigrate.c:209:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: mmigrate.c:211:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: mmigrate.c:211:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: mmigrate.c:211:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#264: FILE: mmigrate.c:221:
+			for (tpage = page + (1UL<<torder);
 			                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#265: FILE: mmigrate.c:222:
+				tpage < page + (1UL<<torder) + fwd_nr_freeable; tpage++) {
 				                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: mmigrate.c:235:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: mmigrate.c:235:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: mmigrate.c:235:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: mmigrate.c:237:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: mmigrate.c:237:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: mmigrate.c:237:
+        ^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: mmigrate.c:253:
+^I^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: mmigrate.c:254:
+				printk(KERN_ERR "migrate page!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: mmigrate.c:257:
+        ^I^I^I^Ispin_lock_irq(&zone->lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#300: FILE: mmigrate.c:257:
+        ^I^I^I^Ispin_lock_irq(&zone->lru_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: mmigrate.c:257:
+        ^I^I^I^Ispin_lock_irq(&zone->lru_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: mmigrate.c:261:
+        ^I^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: mmigrate.c:261:
+        ^I^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: mmigrate.c:261:
+        ^I^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#306: FILE: mmigrate.c:263:
+					printk(KERN_ERR "migrate failure!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: mmigrate.c:265:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#311: FILE: mmigrate.c:268:
+					if(page_count(tpage) != 1) {

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#312: FILE: mmigrate.c:269:
+						printk(KERN_ERR "Damn, freed_list page has page_count!= 2 (%d) - flags:%lx\n", page_count(tpage), page->flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#312: FILE: mmigrate.c:269:
+						printk(KERN_ERR "Damn, freed_list page has page_count!= 2 (%d) - flags:%lx\n", page_count(tpage), page->flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: mmigrate.c:274:
+        ^I^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: mmigrate.c:274:
+        ^I^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: mmigrate.c:274:
+        ^I^I^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: mmigrate.c:275:
+^I^I^I^I^Imoveback_to_freelist(page, zone, torder); $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#330: FILE: mmigrate.c:287:
+			if (freed == nr_pages) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: mmigrate.c:289:
+				struct page *freed_page;
+				printk(KERN_ERR "successfully freed %d pages\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#332: FILE: mmigrate.c:289:
+				printk(KERN_ERR "successfully freed %d pages\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: mmigrate.c:290:
+				printk(KERN_ERR "successfully freed %d pages\n",
+					freed);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: mmigrate.c:291:
+^I^I^I^Ispin_lock_irqsave(&zone->lock, flags); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: mmigrate.c:293:
+        ^I^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: mmigrate.c:293:
+        ^I^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: mmigrate.c:293:
+        ^I^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: mmigrate.c:297:
+					if(page_count(tpage) != 1) {

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#341: FILE: mmigrate.c:298:
+						printk(KERN_ERR "Damn, freed_list page has page_count!= 1 (%d) - flags:%lx\n", page_count(tpage), page->flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#341: FILE: mmigrate.c:298:
+						printk(KERN_ERR "Damn, freed_list page has page_count!= 1 (%d) - flags:%lx\n", page_count(tpage), page->flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: mmigrate.c:302:
+^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#346: FILE: mmigrate.c:303:
+				printk(KERN_ERR "successfully freed %d pages\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mmigrate.c:304:
+				printk(KERN_ERR "successfully freed %d pages\n",
+				freed);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#350: FILE: mmigrate.c:307:
+				return 1;
+			} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: mmigrate.c:309:
+				struct page *freed_page;
+				spin_lock_irq(&zone->lru_lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: mmigrate.c:312:
+					BUG_ON(page_count(tpage) != 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: mmigrate.c:315:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: mmigrate.c:315:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: mmigrate.c:315:
+        ^I^I^Ispin_unlock_irq(&zone->lru_lock);$

WARNING:TYPO_SPELLING: 'could'nt' may be misspelled - perhaps 'couldn't'?
#359: FILE: mmigrate.c:316:
+				printk(KERN_ERR "could'nt free pages %d pages (only %d), bailing out!\n", nr_pages, freed);
 				                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#359: FILE: mmigrate.c:316:
+				printk(KERN_ERR "could'nt free pages %d pages (only %d), bailing out!\n", nr_pages, freed);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#359: FILE: mmigrate.c:316:
+				printk(KERN_ERR "could'nt free pages %d pages (only %d), bailing out!\n", nr_pages, freed);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#363: FILE: mmigrate.c:320:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: mmigrate.c:322:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#366: FILE: mmigrate.c:323:
+	printk(KERN_ERR "finished loop but failed to migrate any page!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: mmigrate.c:328:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#378: FILE: mmigrate.c:335:
+static struct address_space_operations migration_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: mmigrate.c:336:
+        .writepage      = NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: mmigrate.c:336:
+        .writepage      = NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: mmigrate.c:337:
+        .sync_page      = NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: mmigrate.c:337:
+        .sync_page      = NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: mmigrate.c:338:
+        .set_page_dirty = __set_page_dirty_nobuffers,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: mmigrate.c:338:
+        .set_page_dirty = __set_page_dirty_nobuffers,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: mmigrate.c:342:
+        .memory_backed  = 1,    /* Does not contribute to dirty memory */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: mmigrate.c:342:
+        .memory_backed  = 1,    /* Does not contribute to dirty memory */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: mmigrate.c:343:
+        .unplug_io_fn   = NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: mmigrate.c:343:
+        .unplug_io_fn   = NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: mmigrate.c:347:
+        .page_tree      = RADIX_TREE_INIT(GFP_ATOMIC),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: mmigrate.c:347:
+        .page_tree      = RADIX_TREE_INIT(GFP_ATOMIC),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: mmigrate.c:348:
+        .tree_lock      = RW_LOCK_UNLOCKED,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: mmigrate.c:348:
+        .tree_lock      = RW_LOCK_UNLOCKED,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: mmigrate.c:349:
+        .a_ops          = &migration_aops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: mmigrate.c:349:
+        .a_ops          = &migration_aops,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: mmigrate.c:350:
+        .flags          = GFP_HIGHUSER,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: mmigrate.c:350:
+        .flags          = GFP_HIGHUSER,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: mmigrate.c:351:
+        .i_mmap_nonlinear = LIST_HEAD_INIT(migration_space.i_mmap_nonlinear),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: mmigrate.c:351:
+        .i_mmap_nonlinear = LIST_HEAD_INIT(migration_space.i_mmap_nonlinear),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: mmigrate.c:352:
+        .backing_dev_info = &migration_backing_dev_info,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: mmigrate.c:352:
+        .backing_dev_info = &migration_backing_dev_info,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: mmigrate.c:355:
+int init_migration_cache(void) $

CHECK:SPACING: No space is necessary after a cast
#398: FILE: mmigrate.c:355:
+int init_migration_cache(void) 

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#405: FILE: mmigrate.c:362:
+__initcall(init_migration_cache);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: mmigrate.c:364:
+struct page *lookup_migration_cache(int id) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: mmigrate.c:365:
+{ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: mmigrate.c:384:
+        idr_remove(&migration_idr, id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: mmigrate.c:384:
+        idr_remove(&migration_idr, id);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: mmigrate.c:398:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: mmigrate.c:402:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: mmigrate.c:404:
+^Ilock_page(page);^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: mmigrate.c:426:
+	BUG_ON(c->i < dec);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#474: FILE: mmigrate.c:431:
+		printk(KERN_ERR "removing page from migration cache!\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#483: FILE: mmigrate.c:440:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: mmigrate.c:441:
+^Ilock_page(page);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: mmigrate.c:448:
+int add_to_migration_cache(struct page *page, int gfp_mask) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: mmigrate.c:453:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: mmigrate.c:454:
+	BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: mmigrate.c:456:
+	BUG_ON(PagePrivate(page));

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: mmigrate.c:458:
+        if (idr_pre_get(&migration_idr, GFP_ATOMIC) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: mmigrate.c:458:
+        if (idr_pre_get(&migration_idr, GFP_ATOMIC) == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: mmigrate.c:459:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: mmigrate.c:459:
+                return -ENOMEM;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*counter)...) over kmalloc(sizeof(struct counter)...)
#504: FILE: mmigrate.c:461:
+	counter = kmalloc(sizeof(struct counter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#513: FILE: mmigrate.c:470:
+	printk(KERN_ERR "adding to migration cache!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: mmigrate.c:474:
+^I        error = idr_get_new_above(&migration_idr, counter, 1, &offset);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: mmigrate.c:477:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: mmigrate.c:482:
+		error = radix_tree_insert(&migration_space.page_tree, entry.val,
+							page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: mmigrate.c:491:
+                radix_tree_preload_end();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: mmigrate.c:491:
+                radix_tree_preload_end();$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#536: FILE: mmigrate.c:493:
+
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_mapping"
#551: FILE: mmigrate.c:584:
+		page_mapping(page) == NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: mmigrate.c:585:
+^Iif (page_count(page) + truncated <= freeable_page_count) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#580: FILE: mmigrate.c:734:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: mmigrate.c:742:
+generic_migrate_page_nonblock(struct page *page, struct page *newpage,
+	int (*migrate_fn)(struct page *, struct page *, struct list_head *, int))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: mmigrate.c:753:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#601: FILE: mmigrate.c:755:
+	if ((ret = replace_pages(page, newpage)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#609: FILE: mmigrate.c:763:
+		if ((ret = try_to_unmap(page, NULL)) != SWAP_SUCCESS) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#635: FILE: mmigrate.c:789:
+		/* fall thru */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#637: FILE: mmigrate.c:791:
+		/* fall thru */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: mmigrate.c:816:
+		BUG_ON(newpage->mapping == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpage->mapping"
#662: FILE: mmigrate.c:816:
+		BUG_ON(newpage->mapping == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: mmigrate.c:821:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#672: FILE: mmigrate.c:826:
+	if (PageMigration(newpage))
[...]
+	else if (PageSwapCache(newpage)) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#690: FILE: mmigrate.c:844:
+/*	touch_unmapped_address(&vlist);
+	if (PageMigration(page))

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#696: FILE: mmigrate.c:850:
+	} */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#702: FILE: mmigrate.c:856:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#772: FILE: mmigrate.c:1024:
+/*		if (!add_to_swap(page, GFP_KERNEL)) {
+			unlock_page(page);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: mmigrate.c:1026:
+		} */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: mmigrate.c:1062:
+ * migrate_onepage_nonblock() is equivalent to migrate_onepage() but fails $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#817: FILE: mmigrate.c:1085:
+	if ((mapping = page_mapping(page)) == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: mmigrate.c:1086:
+^I^Ireturn ERR_PTR(-ENOENT); $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpage"
#825: FILE: mmigrate.c:1093:
+	if (newpage == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: mmigrate.c:1098:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#831: FILE: mmigrate.c:1099:
+	if (mapping->a_ops && mapping->a_ops->migrate_page) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#834: FILE: mmigrate.c:1102:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#837: FILE: mmigrate.c:1105:
+		BUG_ON(page_count(newpage) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: mmigrate.c:1109:
+	BUG_ON(page_count(page) != 1);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 67 errors, 89 warnings, 37 checks, 764 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
