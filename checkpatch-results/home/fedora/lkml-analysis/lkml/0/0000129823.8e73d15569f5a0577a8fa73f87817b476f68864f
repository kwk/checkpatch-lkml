WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
- split the timeout implementation from kernel/timer.c, into kernel/ktimeout.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: kernel/ktimeout.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#58: FILE: kernel/ktimeout.c:2:
+ *  linux/kernel/ktimeout.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#85: FILE: kernel/ktimeout.c:29:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#89: FILE: kernel/ktimeout.c:33:
+#include <asm/io.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: kernel/ktimeout.c:41:
+#define TVN_SIZE (1 << TVN_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: kernel/ktimeout.c:42:
+#define TVR_SIZE (1 << TVR_BITS)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#103: FILE: kernel/ktimeout.c:47:
+	spinlock_t lock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: kernel/ktimeout.c:51:
+typedef struct tvec_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#111: FILE: kernel/ktimeout.c:55:
+typedef struct tvec_root_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#125: FILE: kernel/ktimeout.c:69:
+typedef struct tvec_t_base_s tvec_base_t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: kernel/ktimeout.c:73:
+static inline void set_running_timer(tvec_base_t *base,
+					struct timer_list *timer)

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: kernel/ktimeout.c:88:
+		int i = expires & TVR_MASK;
+		vec = base->tv1.vec + i;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: kernel/ktimeout.c:91:
+		int i = (expires >> TVR_BITS) & TVN_MASK;
+		vec = base->tv2.vec + i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: kernel/ktimeout.c:94:
+		int i = (expires >> (TVR_BITS + TVN_BITS)) & TVN_MASK;
+		vec = base->tv3.vec + i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#153: FILE: kernel/ktimeout.c:97:
+		int i = (expires >> (TVR_BITS + 2 * TVN_BITS)) & TVN_MASK;
+		vec = base->tv4.vec + i;

CHECK:SPACING: No space is necessary after a cast
#154: FILE: kernel/ktimeout.c:98:
+	} else if ((signed long) idx < 0) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#178: FILE: kernel/ktimeout.c:122:
+typedef struct timer_base_s timer_base_t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: kernel/ktimeout.c:146:
+static inline void detach_timer(struct timer_list *timer,
+					int clear_pending)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: kernel/ktimeout.c:169:
+static timer_base_t *lock_timer_base(struct timer_list *timer,
+					unsigned long *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base"
#231: FILE: kernel/ktimeout.c:175:
+		if (likely(base != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: kernel/ktimeout.c:193:
+	BUG_ON(!timer->function);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#287: FILE: kernel/ktimeout.c:231:
+EXPORT_SYMBOL(__mod_timer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: kernel/ktimeout.c:243:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: kernel/ktimeout.c:243:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: kernel/ktimeout.c:243:
+  ^Iunsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: kernel/ktimeout.c:245:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: kernel/ktimeout.c:245:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: kernel/ktimeout.c:245:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: kernel/ktimeout.c:245:
+  	BUG_ON(timer_pending(timer) || !timer->function);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: kernel/ktimeout.c:252:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: kernel/ktimeout.c:274:
+	BUG_ON(!timer->function);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#343: FILE: kernel/ktimeout.c:287:
+EXPORT_SYMBOL(mod_timer);

WARNING:TYPO_SPELLING: 'deactive' may be misspelled - perhaps 'deactivate'?
#346: FILE: kernel/ktimeout.c:290:
+ * del_timer - deactive a timer.
                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#374: FILE: kernel/ktimeout.c:318:
+EXPORT_SYMBOL(del_timer);

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: kernel/ktimeout.c:370:
+		int ret = try_to_del_timer_sync(timer);
+		if (ret >= 0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#431: FILE: kernel/ktimeout.c:375:
+EXPORT_SYMBOL(del_timer_sync);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#449: FILE: kernel/ktimeout.c:393:
+		BUG_ON(tmp->base != &base->t_base);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#465: FILE: kernel/ktimeout.c:409:
+#define INDEX(N) (base->timer_jiffies >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'N' may be better as '(N)' to avoid precedence issues
#465: FILE: kernel/ktimeout.c:409:
+#define INDEX(N) (base->timer_jiffies >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: kernel/ktimeout.c:419:
+ ^I^Iint index = base->timer_jiffies & TVR_MASK;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: kernel/ktimeout.c:419:
+ ^I^Iint index = base->timer_jiffies & TVR_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: kernel/ktimeout.c:419:
+ ^I^Iint index = base->timer_jiffies & TVR_MASK;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: kernel/ktimeout.c:420:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: kernel/ktimeout.c:420:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: kernel/ktimeout.c:425:
+		if (!index &&
+			(!cascade(base, &base->tv2, INDEX(0))) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: kernel/ktimeout.c:429:
+^I^I++base->timer_jiffies; $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#488: FILE: kernel/ktimeout.c:432:
+			void (*fn)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: kernel/ktimeout.c:435:
+			timer = list_entry(head->next,struct timer_list,entry);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: kernel/ktimeout.c:435:
+			timer = list_entry(head->next,struct timer_list,entry);
 			                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/ktimeout.c:436:
+ ^I^I^Ifn = timer->function;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: kernel/ktimeout.c:436:
+ ^I^I^Ifn = timer->function;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: kernel/ktimeout.c:436:
+ ^I^I^Ifn = timer->function;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/ktimeout.c:437:
+ ^I^I^Idata = timer->data;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: kernel/ktimeout.c:437:
+ ^I^I^Idata = timer->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: kernel/ktimeout.c:437:
+ ^I^I^Idata = timer->data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: kernel/ktimeout.c:444:
+				int preempt_count = preempt_count();
+				fn(data);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#502: FILE: kernel/ktimeout.c:446:
+					printk(KERN_WARNING "huh, entered %p "

WARNING:SPLIT_STRING: quoted string split across lines
#503: FILE: kernel/ktimeout.c:447:
+					printk(KERN_WARNING "huh, entered %p "
+					       "with preempt_count %08x, exited"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#504: FILE: kernel/ktimeout.c:448:
+					       "with preempt_count %08x, exited"
+					       " with %08x?\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: kernel/ktimeout.c:451:
+					BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: kernel/ktimeout.c:537:
+ ^Iktimer_run_queues();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#593: FILE: kernel/ktimeout.c:537:
+ ^Iktimer_run_queues();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: kernel/ktimeout.c:537:
+ ^Iktimer_run_queues();$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#642: FILE: kernel/ktimeout.c:586:
+	switch (timeout)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#662: FILE: kernel/ktimeout.c:606:
+		if (timeout < 0)
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#664: FILE: kernel/ktimeout.c:608:
+			printk(KERN_ERR "schedule_timeout: wrong timeout "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'schedule_timeout', this function's name, in a string
#664: FILE: kernel/ktimeout.c:608:
+			printk(KERN_ERR "schedule_timeout: wrong timeout "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#665: FILE: kernel/ktimeout.c:609:
+			printk(KERN_ERR "schedule_timeout: wrong timeout "
+				"value %lx from %p\n", timeout,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#716: FILE: kernel/ktimeout.c:660:
+EXPORT_SYMBOL(msleep);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#731: FILE: kernel/ktimeout.c:675:
+EXPORT_SYMBOL(msleep_interruptible);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#733: FILE: kernel/ktimeout.c:677:
+static void __devinit init_timers_cpu(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#765: FILE: kernel/ktimeout.c:709:
+static void __devinit migrate_timers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#771: FILE: kernel/ktimeout.c:715:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: kernel/ktimeout.c:724:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/ktimeout.c:741:
+static int __devinit timer_cpu_notify(struct notifier_block *self, $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#797: FILE: kernel/ktimeout.c:741:
+static int __devinit timer_cpu_notify(struct notifier_block *self, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: kernel/ktimeout.c:742:
+static int __devinit timer_cpu_notify(struct notifier_block *self, 
+				unsigned long action, void *hcpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#801: FILE: kernel/ktimeout.c:745:
+	long cpu = (long)hcpu;
+	switch(action) {

ERROR:SPACING: space required before the open parenthesis '('
#801: FILE: kernel/ktimeout.c:745:
+	switch(action) {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#816: FILE: kernel/ktimeout.c:760:
+static struct notifier_block __devinitdata timers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after timers_nb
#816: FILE: kernel/ktimeout.c:760:
+static struct notifier_block __devinitdata timers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#820: FILE: kernel/ktimeout.c:764:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: kernel/ktimeout.c:768:
+	timer_cpu_notify(&timers_nb, (unsigned long)CPU_UP_PREPARE,
+				(void *)(long)smp_processor_id());

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 55 warnings, 14 checks, 1539 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
