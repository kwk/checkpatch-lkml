WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Thank you for your interest. The file attached now has been diffed against last week's 2.6.16.11.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#66: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#66: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#74: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1)*bh->b_size*8)/16)*2;
 	                                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/minix/bitmap.c:54:
+	int k = 0;
+	if (sb->s_blocksize != 1024)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/minix/bitmap.c:61:
+void minix_free_block(struct inode * inode, unsigned long block)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: fs/minix/bitmap.c:68:
+	unsigned long bit,zone;
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: fs/minix/bitmap.c:82:
+	char *offset = kmalloc(sizeof(char *), GFP_KERNEL);
+	bh = sbi->s_zmap[zone >> k];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: fs/minix/bitmap.c:83:
+	mask >>= (4-k);
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: fs/minix/bitmap.c:85:
+	offset += (zone & mask)*1024;
 	                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#124: FILE: fs/minix/bitmap.c:88:
+		printk("free_block (%s:%lu): bit already cleared\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#137: FILE: fs/minix/bitmap.c:100:
+	int num_1K_blocks = (inode->i_sb->s_blocksize)/1024;
 	                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#157: FILE: fs/minix/bitmap.c:110:
+			offset += k*1024;
 			           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#159: FILE: fs/minix/bitmap.c:112:
+			if ((j = minix_find_first_zero_bit(offset, 8192))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#165: FILE: fs/minix/bitmap.c:118:
+				j += k*8192 + i*bits_per_zone + sbi->s_firstdatazone-1;
 				      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#165: FILE: fs/minix/bitmap.c:118:
+				j += k*8192 + i*bits_per_zone + sbi->s_firstdatazone-1;
 				               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#165: FILE: fs/minix/bitmap.c:118:
+				j += k*8192 + i*bits_per_zone + sbi->s_firstdatazone-1;
 				                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#182: FILE: fs/minix/bitmap.c:144:
+	int minix_inodes_per_block = BLOCK_SIZE/sizeof(struct minix_inode);
 	                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#207: FILE: fs/minix/bitmap.c:169:
+	int minix2_inodes_per_block = sb->s_blocksize/sizeof(struct minix2_inode);
 	                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#245: FILE: fs/minix/bitmap.c:231:
+	mask >>= (4-k);
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: fs/minix/bitmap.c:240:
+	char *offset = kmalloc(sizeof(char *), GFP_KERNEL);
+	bh = sbi->s_imap[ino >> k];

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: fs/minix/bitmap.c:242:
+	offset += (ino & mask)*1024;
 	                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: fs/minix/bitmap.c:245:
+		printk("minix_free_inode: bit %lu already cleared.\n", bit);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: fs/minix/bitmap.c:260:
+	int num_1K_blocks = (inode->i_sb->s_blocksize)/1024;
 	                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#292: FILE: fs/minix/bitmap.c:277:
+			offset += k*1024;
 			           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#293: FILE: fs/minix/bitmap.c:278:
+			if ((j = minix_find_first_zero_bit(offset, 8192))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#317: FILE: fs/minix/bitmap.c:300:
+	j += i*bits_per_zone + k*8192;
 	      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#317: FILE: fs/minix/bitmap.c:300:
+	j += i*bits_per_zone + k*8192;
 	                        ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#336: FILE: fs/minix/dir.c:15:
+typedef struct minix3_dir_entry minix3_dirent;

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: fs/minix/dir.c:120:
+^I ^I^I} else {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: fs/minix/dir.c:120:
+^I ^I^I} else {$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#367: FILE: fs/minix/dir.c:127:
+				unsigned l = strnlen(namx,sbi->s_namelen);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: fs/minix/dir.c:127:
+				unsigned l = strnlen(namx,sbi->s_namelen);
 				                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/minix/dir.c:130:
+				over = filldir(dirent, namx, l,
+					(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#373: FILE: fs/minix/dir.c:130:
+					(n<<PAGE_CACHE_SHIFT) | offset,
 					  ^

CHECK:SPACING: No space is necessary after a cast
#395: FILE: fs/minix/dir.c:187:
+		de3 = (struct minix3_dir_entry *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#400: FILE: fs/minix/dir.c:190:
+		for ( ; (char *) de <= kaddr ;

WARNING:SPACING: space prohibited before semicolon
#400: FILE: fs/minix/dir.c:190:
+		for ( ; (char *) de <= kaddr ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: fs/minix/dir.c:191:
+					de3 = minix_next_entry(de3,sbi),
 					                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: fs/minix/dir.c:192:
+					de = minix_next_entry(de,sbi)) {
 					                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: fs/minix/dir.c:202:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: fs/minix/dir.c:202:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: fs/minix/dir.c:202:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#421: FILE: fs/minix/dir.c:222:
+	struct minix3_dir_entry * de3;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: fs/minix/dir.c:253:
+^I^I^I^Iinodx = de3->inode; ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: fs/minix/dir.c:253:
+^I^I^I^Iinodx = de3->inode; ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: fs/minix/dir.c:254:
+^I^I ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: fs/minix/dir.c:254:
+^I^I ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#451: FILE: fs/minix/dir.c:260:
+				if (sbi->s_version == MINIX_V3) {
[...]
+		 		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: fs/minix/dir.c:262:
+^I^I ^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: fs/minix/dir.c:262:
+^I^I ^I^I} else {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: fs/minix/dir.c:270:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: fs/minix/dir.c:270:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: fs/minix/dir.c:270:
+			if (namecompare(namelen,sbi->s_namelen,name,namx))
 			                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#476: FILE: fs/minix/dir.c:287:
+	memcpy (namx, name, namelen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: fs/minix/dir.c:289:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#481: FILE: fs/minix/dir.c:292:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#491: FILE: fs/minix/dir.c:336:
+	struct minix3_dir_entry * de3;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/minix/dir.c:356:
+		strcpy(de3->name,".");
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: fs/minix/dir.c:358:
+		strcpy(de->name,".");
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: fs/minix/dir.c:364:
+		strcpy(de3->name,"..");
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#515: FILE: fs/minix/dir.c:366:
+		strcpy(de->name,"..");
 		               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#528: FILE: fs/minix/dir.c:388:
+		minix3_dirent * de3 = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#557: FILE: fs/minix/dir.c:413:
+				if (!namx[1]) {
[...]
-				} else if (de->name[1] != '.')
[...]
 					goto not_empty;
[...]

ERROR:SPACING: space prohibited after that open parenthesis '('
#625: FILE: fs/minix/inode.c:208:
+	} else if ( *(__u16 *)(bh->b_data + 24) == MINIX3_SUPER_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#626: FILE: fs/minix/inode.c:209:
+		m3s = (struct minix3_super_block *) bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: fs/minix/inode.c:224:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#641: FILE: fs/minix/inode.c:224:
+	} else 

ERROR:SPACING: space required before the open parenthesis '('
#650: FILE: fs/minix/inode.c:267:
+		if(sbi->s_version != MINIX_V3) /* s_state is now out from V3 sb */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#660: FILE: fs/minix/inode.c:305:
+		printk("VFS: Can't find a Minix filesystem V1 | V2 | V3 on device "

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#668: FILE: fs/minix/inode.c:564:
+	struct inode * dir = dentry->d_parent->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#669: FILE: fs/minix/inode.c:565:
+	struct super_block * sb = dir->i_sb;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#690: FILE: fs/minix/itree_common.c:26:
+	return (block_t *)((char*)bh->b_data + bh->b_size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: fs/minix/itree_common.c:295:
+	struct super_block * sb = inode->i_sb;

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#717: FILE: fs/minix/itree_common.c:306:
+	iblock = (inode->i_size + sb->s_blocksize -1) >> (10+k);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#717: FILE: fs/minix/itree_common.c:306:
+	iblock = (inode->i_size + sb->s_blocksize -1) >> (10+k);
 	                                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#726: FILE: fs/minix/itree_common.c:351:
+static inline unsigned nblocks(loff_t size, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#728: FILE: fs/minix/itree_common.c:353:
+	struct inode * dir = dentry->d_parent->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#729: FILE: fs/minix/itree_common.c:354:
+	struct super_block * sb = dir->i_sb;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#739: FILE: fs/minix/itree_common.c:361:
+		blocks += sb->s_blocksize/sizeof(block_t) - 1;
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#740: FILE: fs/minix/itree_common.c:362:
+		blocks /= sb->s_blocksize/sizeof(block_t);
 		                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#752: FILE: fs/minix/itree_v1.c:58:
+unsigned V1_minix_blocks(loff_t size, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#752: FILE: fs/minix/itree_v1.c:58:
+unsigned V1_minix_blocks(loff_t size, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#764: FILE: fs/minix/itree_v2.c:26:
+	struct super_block * sb = inode->i_sb;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#769: FILE: fs/minix/itree_v2.c:30:
+	} else if (block >= (minix_sb(inode->i_sb)->s_max_size/sb->s_blocksize)) {
 	                                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#778: FILE: fs/minix/itree_v2.c:64:
+unsigned V2_minix_blocks(loff_t size, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#778: FILE: fs/minix/itree_v2.c:64:
+unsigned V2_minix_blocks(loff_t size, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#804: FILE: fs/minix/minix.h:54:
+extern void minix_free_block(struct inode * inode, unsigned long block);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#804: FILE: fs/minix/minix.h:54:
+extern void minix_free_block(struct inode * inode, unsigned long block);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#819: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry*' should also have an identifier name
#819: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry*);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#820: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#820: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry*' should also have an identifier name
#820: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry*);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#830: FILE: fs/minix/minix.h:77:
+extern int minix3_block_size_shift(struct super_block * sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#830: FILE: fs/minix/minix.h:77:
+extern int minix3_block_size_shift(struct super_block * sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: include/linux/minix_fs.h:26:
+#define MINIX3_SUPER_MAGIC^I0x4d5a^I^I/* minix V3 fs */ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 31 warnings, 37 checks, 757 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
